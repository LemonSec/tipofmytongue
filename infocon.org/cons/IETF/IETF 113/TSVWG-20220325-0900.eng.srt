1
00:00:25,920 --> 00:00:28,920
yes

2
00:00:36,800 --> 00:00:39,800
is

3
00:01:18,159 --> 00:01:21,560
sound check

4
00:01:29,600 --> 00:01:31,920
i think you ask for next slides unless

5
00:01:31,920 --> 00:01:33,360
you want to use it remotely just say

6
00:01:33,360 --> 00:01:36,360
next

7
00:01:45,040 --> 00:01:49,799
well that's a bit of an unusual fault

8
00:01:58,030 --> 00:02:00,159
[Laughter]

9
00:02:00,159 --> 00:02:03,759
okay just looking at the slide deck now

10
00:02:03,759 --> 00:02:05,840
oh it's fine it's just difficult to read

11
00:02:05,840 --> 00:02:09,840
the first slide that's all

12
00:02:10,399 --> 00:02:12,800
so for anybody um who's getting

13
00:02:12,800 --> 00:02:16,160
themselves into this room this is tsvwg

14
00:02:16,160 --> 00:02:18,560
our wonderful first slide renders quite

15
00:02:18,560 --> 00:02:20,800
well in the proceedings and pretty

16
00:02:20,800 --> 00:02:24,080
awfully here so i'm

17
00:02:27,120 --> 00:02:30,160
i i'm

18
00:02:35,120 --> 00:02:37,360
this is

19
00:02:37,360 --> 00:02:40,319
this is a non-critical problem um we're

20
00:02:40,319 --> 00:02:42,000
about to

21
00:02:42,000 --> 00:02:43,599
start the meeting

22
00:02:43,599 --> 00:02:45,840
so we're just gathering people if you

23
00:02:45,840 --> 00:02:47,040
are

24
00:02:47,040 --> 00:02:48,480
one of the presenters and you want to do

25
00:02:48,480 --> 00:02:52,080
a quick sound check please do

26
00:02:52,080 --> 00:02:56,280
we will start in just a few minutes

27
00:03:05,519 --> 00:03:07,120
david west can you do a quick sound

28
00:03:07,120 --> 00:03:09,680
check please

29
00:03:11,599 --> 00:03:13,440
yep can you hear me

30
00:03:13,440 --> 00:03:15,760
yeah yes good morning

31
00:03:15,760 --> 00:03:17,599
good morning

32
00:03:17,599 --> 00:03:20,640
and can you hear me

33
00:03:22,720 --> 00:03:24,000
excellent

34
00:03:24,000 --> 00:03:25,280
david

35
00:03:25,280 --> 00:03:27,599
okay excellent

36
00:03:27,599 --> 00:03:30,319
can you hear me

37
00:03:35,519 --> 00:03:38,159
thank you tom

38
00:03:39,760 --> 00:03:42,879
right okay um

39
00:03:43,519 --> 00:03:47,640
i suggest we start the meeting

40
00:03:50,080 --> 00:03:54,480
so welcome everybody this is tsvwg

41
00:03:54,480 --> 00:03:56,799
it's the transport

42
00:03:56,799 --> 00:03:59,599
and services working group

43
00:03:59,599 --> 00:04:02,319
we have a two-hour agenda for today

44
00:04:02,319 --> 00:04:05,680
i'm gory fergus i'm one of the coaches

45
00:04:05,680 --> 00:04:08,560
i'm the chair who'll be on the platform

46
00:04:08,560 --> 00:04:11,519
remotely we have where's eddie

47
00:04:11,519 --> 00:04:12,840
and david

48
00:04:12,840 --> 00:04:16,000
black apologies for the first slide it's

49
00:04:16,000 --> 00:04:18,720
quite cute but it's not very informative

50
00:04:18,720 --> 00:04:20,720
the rest of the slides i'm sure

51
00:04:20,720 --> 00:04:22,639
i will be readable

52
00:04:22,639 --> 00:04:25,040
so

53
00:04:25,199 --> 00:04:27,120
maybe i fibbed this is the not well the

54
00:04:27,120 --> 00:04:29,360
not well is traditionally in small print

55
00:04:29,360 --> 00:04:31,759
if you haven't read the not well by now

56
00:04:31,759 --> 00:04:34,400
then you really should

57
00:04:34,400 --> 00:04:37,440
um ietf not wells apply to all ietf

58
00:04:37,440 --> 00:04:39,919
contributions on the mailing list at the

59
00:04:39,919 --> 00:04:43,040
microphone and by any other means

60
00:04:43,040 --> 00:04:45,759
and are the ways in which we ensure that

61
00:04:45,759 --> 00:04:48,639
we have dealt appropriately with ipr

62
00:04:48,639 --> 00:04:50,720
and other issues that relate to the itf

63
00:04:50,720 --> 00:04:53,720
process

64
00:04:58,080 --> 00:05:00,720
we're using me taco for this meeting

65
00:05:00,720 --> 00:05:03,120
which means that the mic q

66
00:05:03,120 --> 00:05:04,080
will be

67
00:05:04,080 --> 00:05:05,840
via me techo

68
00:05:05,840 --> 00:05:08,240
if you're going to the mic

69
00:05:08,240 --> 00:05:10,639
please

70
00:05:10,639 --> 00:05:13,039
state your name

71
00:05:13,039 --> 00:05:15,360
it's important that people can hear your

72
00:05:15,360 --> 00:05:17,440
name in the proceedings in the audio so

73
00:05:17,440 --> 00:05:19,520
please make sure you do say your name as

74
00:05:19,520 --> 00:05:24,039
well as raising your hand in me taco

75
00:05:24,639 --> 00:05:27,759
if there is anyone who hasn't yet joined

76
00:05:27,759 --> 00:05:30,080
the room using the qr code

77
00:05:30,080 --> 00:05:32,560
or by launching the meet tekkel 2

78
00:05:32,560 --> 00:05:34,800
please make sure you do this

79
00:05:34,800 --> 00:05:37,039
this is also important for the ietf

80
00:05:37,039 --> 00:05:39,840
proceedings that everybody in the room

81
00:05:39,840 --> 00:05:40,720
has

82
00:05:40,720 --> 00:05:44,240
joined the meeting in some way

83
00:05:44,240 --> 00:05:45,919
if you're frightened about joining and

84
00:05:45,919 --> 00:05:47,840
staying joined you can join just for a

85
00:05:47,840 --> 00:05:50,479
moment so that we tag you as being part

86
00:05:50,479 --> 00:05:53,280
of this group and we can see that you're

87
00:05:53,280 --> 00:05:54,639
a participant

88
00:05:54,639 --> 00:05:57,120
so please join online

89
00:05:57,120 --> 00:06:00,880
and register for the blue sheet

90
00:06:05,280 --> 00:06:10,159
this is the tsvwg status slide

91
00:06:12,160 --> 00:06:14,160
there are five internet drafts with the

92
00:06:14,160 --> 00:06:16,639
working group chairs and authors

93
00:06:16,639 --> 00:06:18,720
all passed working group last call in

94
00:06:18,720 --> 00:06:21,919
different states of completion

95
00:06:21,919 --> 00:06:23,680
the ecn cups

96
00:06:23,680 --> 00:06:26,400
for lorelei's draft is shepherded by

97
00:06:26,400 --> 00:06:28,000
david black

98
00:06:28,000 --> 00:06:31,440
and needs text to replace

99
00:06:31,440 --> 00:06:33,840
the reframing interaction works words in

100
00:06:33,840 --> 00:06:35,840
that document

101
00:06:35,840 --> 00:06:37,600
this is a small change but it's a change

102
00:06:37,600 --> 00:06:39,840
it has to be agreed with the authors and

103
00:06:39,840 --> 00:06:41,840
will be put on list once that change is

104
00:06:41,840 --> 00:06:43,759
complete

105
00:06:43,759 --> 00:06:46,800
ecn for tunnels that use shim headers

106
00:06:46,800 --> 00:06:48,319
has a similar issues that has been

107
00:06:48,319 --> 00:06:49,599
resolved

108
00:06:49,599 --> 00:06:51,199
both of these documents are ready for

109
00:06:51,199 --> 00:06:53,759
working group shepard write-up

110
00:06:53,759 --> 00:06:55,280
and the changes will be posted to the

111
00:06:55,280 --> 00:06:56,800
list during that process and then it

112
00:06:56,800 --> 00:07:00,560
will be passed up towards to our a day

113
00:07:00,560 --> 00:07:04,880
we plan to do this before the next ietf

114
00:07:05,199 --> 00:07:07,120
we have three drafts that have completed

115
00:07:07,120 --> 00:07:09,599
working group last call some time ago

116
00:07:09,599 --> 00:07:10,960
and have gone through an extended

117
00:07:10,960 --> 00:07:14,240
process of further review and shepherd

118
00:07:14,240 --> 00:07:17,840
right up to document the process

119
00:07:20,160 --> 00:07:22,560
these are l4s architecture

120
00:07:22,560 --> 00:07:26,560
alphas identifier and l4s aqm

121
00:07:26,560 --> 00:07:28,720
we plan to issue that shepard write-up

122
00:07:28,720 --> 00:07:29,680
soon

123
00:07:29,680 --> 00:07:31,440
and wise might wish to comment at this

124
00:07:31,440 --> 00:07:32,479
moment

125
00:07:32,479 --> 00:07:34,160
if there was anything else to say why is

126
00:07:34,160 --> 00:07:37,199
there anything else to say about these

127
00:07:37,199 --> 00:07:39,680
uh no changes since uh we talked about

128
00:07:39,680 --> 00:07:41,199
it earlier this week

129
00:07:41,199 --> 00:07:42,960
i think everything you said is accurate

130
00:07:42,960 --> 00:07:46,479
gory good

131
00:07:47,520 --> 00:07:49,199
right we don't need to review these

132
00:07:49,199 --> 00:07:50,720
things

133
00:07:50,720 --> 00:07:52,639
and we will move straight to the agenda

134
00:07:52,639 --> 00:07:55,440
for friday then

135
00:07:56,800 --> 00:08:00,080
friday's agenda looks like this

136
00:08:00,080 --> 00:08:03,919
we have transport protocols for dccp

137
00:08:03,919 --> 00:08:05,039
um

138
00:08:05,039 --> 00:08:08,240
we have a differentiated services

139
00:08:08,240 --> 00:08:10,319
section where we're going to look at nqb

140
00:08:10,319 --> 00:08:13,599
and dscp considerations

141
00:08:13,599 --> 00:08:17,360
and we have transport for udp

142
00:08:17,360 --> 00:08:18,479
where we're going to look at the udp

143
00:08:18,479 --> 00:08:21,039
options work

144
00:08:21,840 --> 00:08:24,240
we don't anticipate any other business

145
00:08:24,240 --> 00:08:25,919
but now is the opportunity if you'd wish

146
00:08:25,919 --> 00:08:28,720
to hack or modify or make suggestions on

147
00:08:28,720 --> 00:08:29,919
our agenda

148
00:08:29,919 --> 00:08:31,840
does anyone have any agenda suggestions

149
00:08:31,840 --> 00:08:35,640
that we should take into consideration

150
00:08:45,839 --> 00:08:47,279
in that case that's the agenda for this

151
00:08:47,279 --> 00:08:50,160
meeting and we will proceed

152
00:08:50,160 --> 00:08:52,399
with the announcements i think there is

153
00:08:52,399 --> 00:08:55,360
one announcement

154
00:08:55,360 --> 00:08:57,519
and

155
00:08:58,160 --> 00:09:01,800
it ain't here

156
00:09:09,839 --> 00:09:11,519
all right we'll speak i'll we'll cover

157
00:09:11,519 --> 00:09:15,040
that way after the

158
00:09:15,200 --> 00:09:18,800
after marxist taught them that's fine

159
00:09:18,800 --> 00:09:21,279
so marcus

160
00:09:21,279 --> 00:09:25,320
you're up for the dccp

161
00:09:26,160 --> 00:09:28,640
slides

162
00:09:29,839 --> 00:09:31,279
hey

163
00:09:31,279 --> 00:09:33,600
wait a minute

164
00:09:33,600 --> 00:09:35,600
wes can you advance these slides if i

165
00:09:35,600 --> 00:09:36,880
launch them or do you have to launch

166
00:09:36,880 --> 00:09:39,120
them

167
00:09:40,640 --> 00:09:43,600
or david or whoever

168
00:09:43,600 --> 00:09:46,320
yeah i don't know

169
00:09:47,360 --> 00:09:49,120
how about you one of you two launches

170
00:09:49,120 --> 00:09:50,560
this slide deck

171
00:09:50,560 --> 00:09:52,880
and this is marcus

172
00:09:52,880 --> 00:09:54,560
and we'll get your slides up in just a

173
00:09:54,560 --> 00:09:56,800
second

174
00:09:57,440 --> 00:09:59,600
okay can i start

175
00:09:59,600 --> 00:10:01,040
you can start your slides will appear

176
00:10:01,040 --> 00:10:04,040
shortly

177
00:10:05,120 --> 00:10:06,800
yeah good morning everybody marcus

178
00:10:06,800 --> 00:10:08,480
armand from dodger telecom i'm here as a

179
00:10:08,480 --> 00:10:11,760
5g attributes enthusiast um but more

180
00:10:11,760 --> 00:10:13,760
important i think on behalf of

181
00:10:13,760 --> 00:10:17,279
the mpdccp draft authors group

182
00:10:17,279 --> 00:10:21,680
so let's see if the first slide comes up

183
00:10:31,680 --> 00:10:35,760
if not then i can launch them from here

184
00:10:35,839 --> 00:10:38,880
i'll launch them from here

185
00:10:40,480 --> 00:10:41,680
there you go

186
00:10:41,680 --> 00:10:44,399
yeah so i want to give some insights

187
00:10:44,399 --> 00:10:46,880
into our progress on the multi-pass dccp

188
00:10:46,880 --> 00:10:48,880
draft and

189
00:10:48,880 --> 00:10:50,560
yeah

190
00:10:50,560 --> 00:10:52,720
and the main changes which have happened

191
00:10:52,720 --> 00:10:53,760
since

192
00:10:53,760 --> 00:10:55,360
last itf

193
00:10:55,360 --> 00:11:00,279
are around the handshaking procedure

194
00:11:03,600 --> 00:11:05,040
yeah well the problem is we don't have

195
00:11:05,040 --> 00:11:06,880
the the new site is not in retech and i

196
00:11:06,880 --> 00:11:08,560
don't know how to get them

197
00:11:08,560 --> 00:11:10,480
and that's true there's a lot of missing

198
00:11:10,480 --> 00:11:12,880
slides

199
00:11:20,399 --> 00:11:21,839
okay next slide

200
00:11:21,839 --> 00:11:23,920
no no no then then i will take this one

201
00:11:23,920 --> 00:11:25,920
unfortunately that is the old uh version

202
00:11:25,920 --> 00:11:27,920
of the slide set so if you want to have

203
00:11:27,920 --> 00:11:29,760
the latest one please look into the

204
00:11:29,760 --> 00:11:32,880
agenda that you will get it

205
00:11:33,360 --> 00:11:36,399
yeah we have uh changes um

206
00:11:36,399 --> 00:11:38,560
or we have a lot of changes in in the

207
00:11:38,560 --> 00:11:41,279
draft since since last ietf so we

208
00:11:41,279 --> 00:11:43,600
finalized the hand checking procedure

209
00:11:43,600 --> 00:11:45,200
have some more information about that in

210
00:11:45,200 --> 00:11:47,440
one of the next slides

211
00:11:47,440 --> 00:11:49,200
we did a lot of

212
00:11:49,200 --> 00:11:51,200
changes

213
00:11:51,200 --> 00:11:54,800
in the mpprio option also here i will

214
00:11:54,800 --> 00:11:57,279
give some more information about it mp

215
00:11:57,279 --> 00:11:59,920
prior is used for a fine granular path

216
00:11:59,920 --> 00:12:01,680
management

217
00:12:01,680 --> 00:12:02,399
to

218
00:12:02,399 --> 00:12:03,120
to

219
00:12:03,120 --> 00:12:05,600
enable disable paths to set a path into

220
00:12:05,600 --> 00:12:08,399
a backup mode so that is only used

221
00:12:08,399 --> 00:12:10,959
if no other part is available

222
00:12:10,959 --> 00:12:13,040
and we can also use it for past

223
00:12:13,040 --> 00:12:14,480
prioritization

224
00:12:14,480 --> 00:12:18,399
as an input for scheduling decisions

225
00:12:18,560 --> 00:12:21,040
maximum packet size i think is also an

226
00:12:21,040 --> 00:12:22,560
important topic that is something what

227
00:12:22,560 --> 00:12:25,680
is already considered in the dccp

228
00:12:25,680 --> 00:12:29,199
rfc 4340

229
00:12:29,360 --> 00:12:32,399
where the maximum packet size

230
00:12:32,399 --> 00:12:33,200
is

231
00:12:33,200 --> 00:12:35,360
described how how it can be detected and

232
00:12:35,360 --> 00:12:37,440
how it can be communicated to the upper

233
00:12:37,440 --> 00:12:41,120
layers to the applications itself and

234
00:12:41,120 --> 00:12:43,760
we consider now in our draft how this

235
00:12:43,760 --> 00:12:46,079
has to be treated in the multi-pass

236
00:12:46,079 --> 00:12:47,200
context

237
00:12:47,200 --> 00:12:49,839
so we defined i think a nice strategy

238
00:12:49,839 --> 00:12:52,800
here to deal with that and to keep

239
00:12:52,800 --> 00:12:55,360
comfortable compatibility with the

240
00:12:55,360 --> 00:12:58,560
single pass dccp

241
00:12:58,959 --> 00:13:02,320
we started to define some closing a

242
00:13:02,320 --> 00:13:05,360
procedure defining two new options mp

243
00:13:05,360 --> 00:13:07,600
close and mp fast close i will also have

244
00:13:07,600 --> 00:13:10,800
separate slides on this

245
00:13:10,800 --> 00:13:13,440
we added a congestion control sections

246
00:13:13,440 --> 00:13:16,399
or congestion considerations

247
00:13:16,399 --> 00:13:18,880
for bottleneck fairness

248
00:13:18,880 --> 00:13:21,120
with single pass

249
00:13:21,120 --> 00:13:22,880
yeah i think that's also worth to read i

250
00:13:22,880 --> 00:13:26,000
do not have additional slides here

251
00:13:26,000 --> 00:13:27,200
in

252
00:13:27,200 --> 00:13:30,079
general we maintain the

253
00:13:30,079 --> 00:13:33,440
draft at github so you will find much

254
00:13:33,440 --> 00:13:35,040
more information

255
00:13:35,040 --> 00:13:37,279
you will also

256
00:13:37,279 --> 00:13:41,040
find the individual pull requests there

257
00:13:41,040 --> 00:13:45,040
which describe exactly what we have done

258
00:13:45,040 --> 00:13:47,600
along with the draft development we also

259
00:13:47,600 --> 00:13:50,639
developed our open source code

260
00:13:50,639 --> 00:13:52,800
at github where we have a linux

261
00:13:52,800 --> 00:13:55,279
reference implementation for multi-pass

262
00:13:55,279 --> 00:13:59,360
eccp available and that one we extended

263
00:13:59,360 --> 00:14:01,680
with some of the changes

264
00:14:01,680 --> 00:14:03,839
we made in version two and three of the

265
00:14:03,839 --> 00:14:07,680
mpdccp draft next slide please

266
00:14:11,839 --> 00:14:13,760
we were also part

267
00:14:13,760 --> 00:14:15,199
of the

268
00:14:15,199 --> 00:14:18,880
first tsvw interim meeting in february

269
00:14:18,880 --> 00:14:20,079
this year

270
00:14:20,079 --> 00:14:21,519
just want to highlight here what we

271
00:14:21,519 --> 00:14:23,440
presented and discussed

272
00:14:23,440 --> 00:14:25,279
during this interim

273
00:14:25,279 --> 00:14:26,800
on the left

274
00:14:26,800 --> 00:14:29,839
you will find the mpprio

275
00:14:29,839 --> 00:14:31,279
option

276
00:14:31,279 --> 00:14:33,279
which i already entities which gives us

277
00:14:33,279 --> 00:14:36,030
a fine granular path management

278
00:14:36,030 --> 00:14:37,600
[Music]

279
00:14:37,600 --> 00:14:38,959
capability

280
00:14:38,959 --> 00:14:41,199
so we can design with

281
00:14:41,199 --> 00:14:44,560
we can assign up to four bits or we can

282
00:14:44,560 --> 00:14:47,360
use up to four bits to make different

283
00:14:47,360 --> 00:14:49,040
prioritization levels

284
00:14:49,040 --> 00:14:51,680
to enable disable parts

285
00:14:51,680 --> 00:14:52,880
and to give

286
00:14:52,880 --> 00:14:55,120
the scheduling

287
00:14:55,120 --> 00:14:58,240
engine of the multi-path protocol the

288
00:14:58,240 --> 00:15:01,279
appropriate input how to how to deal

289
00:15:01,279 --> 00:15:04,160
with paths um that is for example quite

290
00:15:04,160 --> 00:15:05,519
useful

291
00:15:05,519 --> 00:15:08,720
uh for at triple s when the wi-fi path

292
00:15:08,720 --> 00:15:11,120
shall be prioritized over the cellular

293
00:15:11,120 --> 00:15:12,880
access

294
00:15:12,880 --> 00:15:14,720
we stabilized as i

295
00:15:14,720 --> 00:15:16,800
also said uh the handshaking procedure

296
00:15:16,800 --> 00:15:19,519
we decided for a four-way

297
00:15:19,519 --> 00:15:21,839
design more or less that resembled the

298
00:15:21,839 --> 00:15:24,720
multi-pass tcp logic which i think is

299
00:15:24,720 --> 00:15:26,880
quite stable so we adopted this idea

300
00:15:26,880 --> 00:15:28,240
it's not exactly the same as a

301
00:15:28,240 --> 00:15:30,560
multi-pass tcp

302
00:15:30,560 --> 00:15:33,440
but quite similar so at least these

303
00:15:33,440 --> 00:15:35,440
four-way design is

304
00:15:35,440 --> 00:15:38,160
taken from there

305
00:15:38,240 --> 00:15:40,480
we presented also some early results of

306
00:15:40,480 --> 00:15:41,839
a partial

307
00:15:41,839 --> 00:15:46,000
p4 multi-pass dccp implementation which

308
00:15:46,000 --> 00:15:48,720
was carried out by cartridge university

309
00:15:48,720 --> 00:15:50,079
and has shown

310
00:15:50,079 --> 00:15:53,279
the hardware acceleration potential

311
00:15:53,279 --> 00:15:54,720
on smartnix

312
00:15:54,720 --> 00:15:56,720
i have a dedicated slide to this in in

313
00:15:56,720 --> 00:15:58,800
the backup not sure if you will have

314
00:15:58,800 --> 00:16:01,519
time to look into but as i said it it's

315
00:16:01,519 --> 00:16:04,480
the last slide here in in this document

316
00:16:04,480 --> 00:16:06,959
so both to look into

317
00:16:06,959 --> 00:16:09,120
yeah and we started to present during

318
00:16:09,120 --> 00:16:12,079
the interim what is the relation between

319
00:16:12,079 --> 00:16:15,519
um 3gbp and iepf

320
00:16:15,519 --> 00:16:16,560
if we

321
00:16:16,560 --> 00:16:18,959
discuss 80 triple s related multi-pass

322
00:16:18,959 --> 00:16:21,040
protocols i will have a dedicated slide

323
00:16:21,040 --> 00:16:22,480
on this here as well

324
00:16:22,480 --> 00:16:26,120
next slide please

325
00:16:54,560 --> 00:16:57,040
okay

326
00:16:58,000 --> 00:17:01,880
can i reclaim it

327
00:17:04,400 --> 00:17:07,120
yep fine

328
00:17:11,679 --> 00:17:14,679
okay

329
00:17:21,839 --> 00:17:24,079
yes on this one thanks for bringing it

330
00:17:24,079 --> 00:17:24,880
back

331
00:17:24,880 --> 00:17:26,319
um yeah

332
00:17:26,319 --> 00:17:28,000
now looking into the

333
00:17:28,000 --> 00:17:30,000
new closing a closing procedure we

334
00:17:30,000 --> 00:17:32,000
introduced in the latest version of the

335
00:17:32,000 --> 00:17:33,520
mpd ccp

336
00:17:33,520 --> 00:17:35,679
basically we defined two

337
00:17:35,679 --> 00:17:38,320
new multi-pass options

338
00:17:38,320 --> 00:17:40,240
one of the fast cloud the other one is

339
00:17:40,240 --> 00:17:42,480
just called close in the fast close we

340
00:17:42,480 --> 00:17:44,799
we used to

341
00:17:44,799 --> 00:17:46,960
start starter abrupt shutdown of the mp

342
00:17:46,960 --> 00:17:48,720
dccp connection

343
00:17:48,720 --> 00:17:50,559
there's not really a negotiation about

344
00:17:50,559 --> 00:17:52,400
that so

345
00:17:52,400 --> 00:17:53,360
if

346
00:17:53,360 --> 00:17:55,360
a multi-pass dccp

347
00:17:55,360 --> 00:17:57,200
peer decides to close

348
00:17:57,200 --> 00:17:59,840
a multi-pass dcp connection using the mp

349
00:17:59,840 --> 00:18:02,400
fast close it will just send this option

350
00:18:02,400 --> 00:18:04,880
over all paths to the uh to the peer

351
00:18:04,880 --> 00:18:06,559
host

352
00:18:06,559 --> 00:18:09,200
and with ending already shut down the

353
00:18:09,200 --> 00:18:10,559
connection

354
00:18:10,559 --> 00:18:13,200
on its side as soon as the mp fast close

355
00:18:13,200 --> 00:18:15,919
is received on any of the parts at the

356
00:18:15,919 --> 00:18:18,559
pier host the pure host will close the

357
00:18:18,559 --> 00:18:21,280
multi-pass dccp connection as well

358
00:18:21,280 --> 00:18:24,400
so there is not this common procedure of

359
00:18:24,400 --> 00:18:25,600
closing a

360
00:18:25,600 --> 00:18:28,080
connection which is known from the dccp

361
00:18:28,080 --> 00:18:29,919
context

362
00:18:29,919 --> 00:18:32,640
for that we defined a new reset code a

363
00:18:32,640 --> 00:18:34,880
new dccp reset code

364
00:18:34,880 --> 00:18:36,960
with the number 12

365
00:18:36,960 --> 00:18:38,720
and that we also added to the iana

366
00:18:38,720 --> 00:18:41,280
considerations

367
00:18:41,280 --> 00:18:44,080
that this can be adopted then

368
00:18:44,080 --> 00:18:46,960
the mp close that is was introduced for

369
00:18:46,960 --> 00:18:50,400
a regular dccp shutdown

370
00:18:50,400 --> 00:18:52,559
so that is more or less a following for

371
00:18:52,559 --> 00:18:55,200
compatibility reasons the

372
00:18:55,200 --> 00:18:58,400
dccp closing procedure so we add the mp

373
00:18:58,400 --> 00:19:00,000
close to a regular

374
00:19:00,000 --> 00:19:03,679
dcp close request or a dccp reset

375
00:19:03,679 --> 00:19:05,440
packet

376
00:19:05,440 --> 00:19:07,919
the amp cloud has to be used to shut

377
00:19:07,919 --> 00:19:10,400
down all of the passes individually so

378
00:19:10,400 --> 00:19:13,120
it has to be sent on all parties

379
00:19:13,120 --> 00:19:15,600
and first after all

380
00:19:15,600 --> 00:19:19,120
passes are shut down then the overall

381
00:19:19,120 --> 00:19:21,840
multi-pass gccp

382
00:19:21,840 --> 00:19:23,360
connection

383
00:19:23,360 --> 00:19:25,280
will be removed

384
00:19:25,280 --> 00:19:27,200
in general for both multi-path options

385
00:19:27,200 --> 00:19:29,679
we use a key data field that uses some

386
00:19:29,679 --> 00:19:32,320
material which was exchanged during the

387
00:19:32,320 --> 00:19:33,840
handshake

388
00:19:33,840 --> 00:19:37,520
to authenticate subsequent paths here we

389
00:19:37,520 --> 00:19:39,840
also use it to

390
00:19:39,840 --> 00:19:41,679
avoid a misuse

391
00:19:41,679 --> 00:19:42,720
of the

392
00:19:42,720 --> 00:19:45,120
mp fast close or mp close options or

393
00:19:45,120 --> 00:19:48,160
that mine men in the middle cannot

394
00:19:48,160 --> 00:19:51,039
close a multi-pass tcp connection

395
00:19:51,039 --> 00:19:52,720
uncoordinated

396
00:19:52,720 --> 00:19:55,520
next slide please

397
00:19:57,600 --> 00:19:59,840
yeah

398
00:20:00,160 --> 00:20:03,200
yeah as we are moving forward with our

399
00:20:03,200 --> 00:20:04,799
draft

400
00:20:04,799 --> 00:20:07,440
i want to give you an overview of what

401
00:20:07,440 --> 00:20:08,960
is currently the feature set of the

402
00:20:08,960 --> 00:20:11,120
multi-pass gcp and what are the maturity

403
00:20:11,120 --> 00:20:13,600
of the individual features

404
00:20:13,600 --> 00:20:15,520
so starting on the left

405
00:20:15,520 --> 00:20:17,760
we have finalized the complete

406
00:20:17,760 --> 00:20:20,720
handshaking procedure in the draft as

407
00:20:20,720 --> 00:20:23,520
well as in the open source prototype

408
00:20:23,520 --> 00:20:25,200
so that is aligned

409
00:20:25,200 --> 00:20:27,760
we use the mp capable feature to to

410
00:20:27,760 --> 00:20:29,200
negotiate

411
00:20:29,200 --> 00:20:31,120
in general the multi-pass capability

412
00:20:31,120 --> 00:20:32,400
between two

413
00:20:32,400 --> 00:20:33,679
hosts

414
00:20:33,679 --> 00:20:34,880
that is part of the hand tracking

415
00:20:34,880 --> 00:20:36,080
procedure

416
00:20:36,080 --> 00:20:37,919
um and also part of the handshaking

417
00:20:37,919 --> 00:20:40,880
procedure is the multi-pass key

418
00:20:40,880 --> 00:20:43,840
option for exchanging the key material i

419
00:20:43,840 --> 00:20:46,320
already outlined which is used to

420
00:20:46,320 --> 00:20:47,679
authenticate subsequent flow

421
00:20:47,679 --> 00:20:49,520
establishment

422
00:20:49,520 --> 00:20:51,200
along with that now i trump a little bit

423
00:20:51,200 --> 00:20:52,480
in the table

424
00:20:52,480 --> 00:20:54,720
is can we also see in the multi-pass

425
00:20:54,720 --> 00:20:55,840
hmac

426
00:20:55,840 --> 00:20:58,080
that is used in the

427
00:20:58,080 --> 00:20:59,520
establishment

428
00:20:59,520 --> 00:21:01,280
process of subsequent flows when

429
00:21:01,280 --> 00:21:03,039
multi-pass join

430
00:21:03,039 --> 00:21:07,440
is used which can be found on the right

431
00:21:07,600 --> 00:21:08,880
but

432
00:21:08,880 --> 00:21:11,280
staying in the left table

433
00:21:11,280 --> 00:21:14,640
we have the multi-pass sequence

434
00:21:14,640 --> 00:21:17,919
option that carries um overall

435
00:21:17,919 --> 00:21:19,520
connection

436
00:21:19,520 --> 00:21:23,039
um number a sequence number sorry which

437
00:21:23,039 --> 00:21:25,919
is related to the multi-pass connection

438
00:21:25,919 --> 00:21:27,280
and last but not least we have the

439
00:21:27,280 --> 00:21:29,679
multi-pass rtt option which can carry

440
00:21:29,679 --> 00:21:30,799
some

441
00:21:30,799 --> 00:21:32,080
timing

442
00:21:32,080 --> 00:21:34,799
information that is quite useful in the

443
00:21:34,799 --> 00:21:37,520
reordering process we apply on on

444
00:21:37,520 --> 00:21:39,679
receiver side to compensate latency

445
00:21:39,679 --> 00:21:41,440
differences

446
00:21:41,440 --> 00:21:43,840
all in all the features in the left

447
00:21:43,840 --> 00:21:44,880
table

448
00:21:44,880 --> 00:21:47,919
we think are complete

449
00:21:49,120 --> 00:21:51,600
some of them still need some updates

450
00:21:51,600 --> 00:21:52,720
for

451
00:21:52,720 --> 00:21:55,280
the prototype but in the draft itself i

452
00:21:55,280 --> 00:21:57,200
think that is stable and

453
00:21:57,200 --> 00:21:59,679
ready for being reviewed

454
00:21:59,679 --> 00:22:02,400
on the right and the partial ready table

455
00:22:02,400 --> 00:22:04,559
i think we also made a lot of progress

456
00:22:04,559 --> 00:22:06,960
but for most of the features there's

457
00:22:06,960 --> 00:22:08,559
still

458
00:22:08,559 --> 00:22:11,520
the implementation missing and that is

459
00:22:11,520 --> 00:22:13,360
starting with the mp confirm which we

460
00:22:13,360 --> 00:22:16,080
use for reliable exchange of multi-pass

461
00:22:16,080 --> 00:22:18,480
options at the multi-pass join as i

462
00:22:18,480 --> 00:22:20,400
already outlined to

463
00:22:20,400 --> 00:22:22,960
establish subsequent flows

464
00:22:22,960 --> 00:22:24,799
we have a section on a fallback

465
00:22:24,799 --> 00:22:27,120
mechanism so what what happens if

466
00:22:27,120 --> 00:22:30,000
multipath cannot be negotiated

467
00:22:30,000 --> 00:22:31,679
i think here is some editorial work

468
00:22:31,679 --> 00:22:33,360
missing

469
00:22:33,360 --> 00:22:35,600
yeah then newly added the mp fast close

470
00:22:35,600 --> 00:22:38,000
and mp close

471
00:22:38,000 --> 00:22:39,600
especially for the mp close it still

472
00:22:39,600 --> 00:22:41,280
needs some work in the in the draft

473
00:22:41,280 --> 00:22:42,400
itself

474
00:22:42,400 --> 00:22:44,400
um yeah and last but not least we also

475
00:22:44,400 --> 00:22:46,480
have multi-pass at address remove

476
00:22:46,480 --> 00:22:48,480
address so

477
00:22:48,480 --> 00:22:49,520
in case

478
00:22:49,520 --> 00:22:52,640
new um ip addresses are identified which

479
00:22:52,640 --> 00:22:55,679
can be used to establish

480
00:22:55,679 --> 00:22:59,200
new multi-pass dccp sub-flows then those

481
00:22:59,200 --> 00:23:01,440
options can be used or in case ip

482
00:23:01,440 --> 00:23:03,120
addresses are not available anymore

483
00:23:03,120 --> 00:23:04,880
passes are not available anymore remove

484
00:23:04,880 --> 00:23:07,440
address can be used and the mprio i

485
00:23:07,440 --> 00:23:10,880
think i already outlined uh during this

486
00:23:10,880 --> 00:23:13,520
presentation so draft work is almost

487
00:23:13,520 --> 00:23:14,640
completed

488
00:23:14,640 --> 00:23:16,960
and we have now the main focus on on the

489
00:23:16,960 --> 00:23:20,159
implementation to keep this in line with

490
00:23:20,159 --> 00:23:21,600
uh what we

491
00:23:21,600 --> 00:23:23,520
have available in the draft next slide

492
00:23:23,520 --> 00:23:25,760
please

493
00:23:27,039 --> 00:23:29,919
yeah that is uh probably uh interesting

494
00:23:29,919 --> 00:23:31,200
uh for

495
00:23:31,200 --> 00:23:33,280
those who are also interested in the

496
00:23:33,280 --> 00:23:37,360
3tpp 80 triple s functionality maybe in

497
00:23:37,360 --> 00:23:40,080
one short sentence the 80 triple s

498
00:23:40,080 --> 00:23:44,240
is a part of the 5g

499
00:23:44,400 --> 00:23:47,760
system and it's providing

500
00:23:48,720 --> 00:23:51,279
multi-path transport from a mobile

501
00:23:51,279 --> 00:23:53,760
network operator towards a terminal

502
00:23:53,760 --> 00:23:55,520
device towards a ue

503
00:23:55,520 --> 00:23:57,200
that is where we are very active that is

504
00:23:57,200 --> 00:24:00,000
where we see the multi-pass gccp as one

505
00:24:00,000 --> 00:24:01,520
solution

506
00:24:01,520 --> 00:24:05,200
in that space and just matching here

507
00:24:05,200 --> 00:24:06,000
what

508
00:24:06,000 --> 00:24:08,000
we think we already provide with the

509
00:24:08,000 --> 00:24:09,760
multi-pass dccp with the draft

510
00:24:09,760 --> 00:24:12,159
definition but also with the

511
00:24:12,159 --> 00:24:13,840
published prototype

512
00:24:13,840 --> 00:24:15,440
so if you have a look into into the

513
00:24:15,440 --> 00:24:17,760
right table what are the requirements

514
00:24:17,760 --> 00:24:19,919
from at triple s basically it needs the

515
00:24:19,919 --> 00:24:22,799
multi-pass transport

516
00:24:22,799 --> 00:24:23,919
it needs

517
00:24:23,919 --> 00:24:26,880
non-tcp support so maybe for those of

518
00:24:26,880 --> 00:24:28,799
you who are a little bit more familiar

519
00:24:28,799 --> 00:24:32,559
uh at triple s is an existing framework

520
00:24:32,559 --> 00:24:34,799
but so far it only

521
00:24:34,799 --> 00:24:38,080
can deal with a tcp

522
00:24:38,080 --> 00:24:40,000
multi-pass splitting because multi-pass

523
00:24:40,000 --> 00:24:43,200
tcp is is used for that so for non-tcp

524
00:24:43,200 --> 00:24:45,440
traffic there is no solution so far and

525
00:24:45,440 --> 00:24:48,640
that is where we look into at the moment

526
00:24:48,640 --> 00:24:50,799
so here for sure we have the multi-pass

527
00:24:50,799 --> 00:24:52,559
dccp

528
00:24:52,559 --> 00:24:54,400
uh proposed

529
00:24:54,400 --> 00:24:56,799
we need steering modes so in in the

530
00:24:56,799 --> 00:24:58,720
multi-pass terminology that are

531
00:24:58,720 --> 00:25:02,640
scheduling entities

532
00:25:02,640 --> 00:25:05,679
we need reordering to compensate

533
00:25:05,679 --> 00:25:08,000
the paths uh latency differences on

534
00:25:08,000 --> 00:25:10,240
receiver side to bring packets in order

535
00:25:10,240 --> 00:25:11,440
again

536
00:25:11,440 --> 00:25:13,520
we need path measurement to make good

537
00:25:13,520 --> 00:25:15,279
sketch as an input for scheduling

538
00:25:15,279 --> 00:25:18,400
decisions and we need path management to

539
00:25:18,400 --> 00:25:21,440
uh establish or destruct uh subflows

540
00:25:21,440 --> 00:25:23,200
whenever it is required

541
00:25:23,200 --> 00:25:25,279
matching this on the left with what we

542
00:25:25,279 --> 00:25:28,080
provide so far we think we have now a

543
00:25:28,080 --> 00:25:30,480
very very complete prototype available

544
00:25:30,480 --> 00:25:33,039
with the multi-pass dccp itself with a

545
00:25:33,039 --> 00:25:35,360
new encapsulation framework with a lot

546
00:25:35,360 --> 00:25:37,200
of scheduling logics

547
00:25:37,200 --> 00:25:40,000
with a lot of reordering logics

548
00:25:40,000 --> 00:25:43,039
multiple congestion controls ccid 2 and

549
00:25:43,039 --> 00:25:44,640
and 3

550
00:25:44,640 --> 00:25:46,240
which were already

551
00:25:46,240 --> 00:25:48,240
defined

552
00:25:48,240 --> 00:25:52,000
in foil for dccp itself so those

553
00:25:52,000 --> 00:25:54,480
we have adopted and we're also working

554
00:25:54,480 --> 00:25:58,240
on a new ccid5 which is following the

555
00:25:58,240 --> 00:26:00,480
bbr algorithm

556
00:26:00,480 --> 00:26:02,000
yeah and last but not least we also

557
00:26:02,000 --> 00:26:04,720
provide path management functionalities

558
00:26:04,720 --> 00:26:06,960
so you see the links here

559
00:26:06,960 --> 00:26:09,440
and they will direct you directly to our

560
00:26:09,440 --> 00:26:11,679
github repository where those functions

561
00:26:11,679 --> 00:26:14,159
are available next slide please

562
00:26:14,159 --> 00:26:16,480
well lars is in the queue hi marcus

563
00:26:16,480 --> 00:26:18,000
thanks uh last i could actually question

564
00:26:18,000 --> 00:26:20,240
this slide so have you started

565
00:26:20,240 --> 00:26:22,080
discussing with the linux netdev

566
00:26:22,080 --> 00:26:24,880
community about upstreaming this so

567
00:26:24,880 --> 00:26:26,159
good question at the moment it's a

568
00:26:26,159 --> 00:26:27,919
completely out of three uh

569
00:26:27,919 --> 00:26:29,840
implementation which makes it much much

570
00:26:29,840 --> 00:26:31,600
simpler for us because press it in the

571
00:26:31,600 --> 00:26:33,760
foreground to get some first experience

572
00:26:33,760 --> 00:26:36,080
before we read make the move and bring

573
00:26:36,080 --> 00:26:37,679
this into the main line that that to the

574
00:26:37,679 --> 00:26:38,960
lateness and

575
00:26:38,960 --> 00:26:40,720
for mptcp the problem is that nobody

576
00:26:40,720 --> 00:26:42,320
could really use it because you needed

577
00:26:42,320 --> 00:26:44,080
to build custom kernels and nobody wants

578
00:26:44,080 --> 00:26:45,679
to do that and if you want to run

579
00:26:45,679 --> 00:26:47,600
containers with this stuff you

580
00:26:47,600 --> 00:26:49,360
can't right so

581
00:26:49,360 --> 00:26:50,080
you

582
00:26:50,080 --> 00:26:51,200
so

583
00:26:51,200 --> 00:26:52,720
it needs to be in the linux kernel by

584
00:26:52,720 --> 00:26:54,799
default if it's if it's supposed to be a

585
00:26:54,799 --> 00:26:56,720
building block for like atss or

586
00:26:56,720 --> 00:26:57,600
something like that right because

587
00:26:57,600 --> 00:27:00,320
nobody's going to compile kernels

588
00:27:00,320 --> 00:27:02,159
um

589
00:27:02,159 --> 00:27:04,720
yes i think we are pretty aware but we

590
00:27:04,720 --> 00:27:06,559
also have to deal with a with our

591
00:27:06,559 --> 00:27:08,400
resources we have available so that is

592
00:27:08,400 --> 00:27:10,080
that is currently that is currently the

593
00:27:10,080 --> 00:27:12,320
so we are at the moment we just have

594
00:27:12,320 --> 00:27:14,480
this linux reference out of free

595
00:27:14,480 --> 00:27:17,039
implementation available nevertheless i

596
00:27:17,039 --> 00:27:18,960
think cardstock university

597
00:27:18,960 --> 00:27:20,799
they are also working on some user space

598
00:27:20,799 --> 00:27:22,559
implementation of this right that would

599
00:27:22,559 --> 00:27:24,799
make a difference yeah but it i just

600
00:27:24,799 --> 00:27:26,399
wanted to check what the state yeah but

601
00:27:26,399 --> 00:27:28,080
not not sure how mature they are maybe

602
00:27:28,080 --> 00:27:29,440
there is something for the next itf

603
00:27:29,440 --> 00:27:30,720
where they can present some steps yeah

604
00:27:30,720 --> 00:27:32,799
and i'm not saying that you know this

605
00:27:32,799 --> 00:27:34,559
stops the itf working on this right yes

606
00:27:34,559 --> 00:27:36,799
wanted to know what uh okay thank you

607
00:27:36,799 --> 00:27:38,720
yeah thanks a lot awesome we have a

608
00:27:38,720 --> 00:27:41,279
question from michael tucson

609
00:27:41,279 --> 00:27:43,440
online

610
00:27:43,440 --> 00:27:45,840
go ahead michael

611
00:27:45,840 --> 00:27:48,399
um as far as i know there are some iprs

612
00:27:48,399 --> 00:27:51,600
involved so um how is the relation

613
00:27:51,600 --> 00:27:52,640
between

614
00:27:52,640 --> 00:27:55,520
these iprs and upstreaming this to the

615
00:27:55,520 --> 00:27:58,480
linux kernel and or

616
00:27:58,480 --> 00:28:00,240
this open source code so

617
00:28:00,240 --> 00:28:02,080
since you say you i can download the

618
00:28:02,080 --> 00:28:04,480
open source code does that mean

619
00:28:04,480 --> 00:28:07,760
uh what's in the iprs is not

620
00:28:07,760 --> 00:28:09,600
uh in the code

621
00:28:09,600 --> 00:28:12,159
i i i think that we declared before

622
00:28:12,159 --> 00:28:13,039
working

623
00:28:13,039 --> 00:28:15,360
group adoption

624
00:28:15,360 --> 00:28:16,880
so

625
00:28:16,880 --> 00:28:19,840
we made it free also the multi-pass dccp

626
00:28:19,840 --> 00:28:21,039
implementation the protocol

627
00:28:21,039 --> 00:28:23,360
implementation is part of the

628
00:28:23,360 --> 00:28:24,480
linux

629
00:28:24,480 --> 00:28:26,399
kernel network stack

630
00:28:26,399 --> 00:28:27,200
so

631
00:28:27,200 --> 00:28:30,080
it's gpl based

632
00:28:30,080 --> 00:28:33,039
okay so no no ipr's involved if i use

633
00:28:33,039 --> 00:28:35,840
that code yes yes please and please do

634
00:28:35,840 --> 00:28:37,039
so

635
00:28:37,039 --> 00:28:39,760
that would be great

636
00:28:39,760 --> 00:28:40,640
thank you

637
00:28:40,640 --> 00:28:43,960
thank you michael

638
00:28:44,000 --> 00:28:45,279
slide please

639
00:28:45,279 --> 00:28:47,840
next slide

640
00:28:49,360 --> 00:28:52,720
yep um so some general updates uh on

641
00:28:52,720 --> 00:28:54,640
where we are now with the multiple

642
00:28:54,640 --> 00:28:57,120
dccp

643
00:28:57,120 --> 00:29:00,080
here i make again the relation to 3tpp

644
00:29:00,080 --> 00:29:01,600
and i think on that we will also have a

645
00:29:01,600 --> 00:29:05,200
site meeting uh later on um

646
00:29:05,200 --> 00:29:08,320
after after the tsvwts session where

647
00:29:08,320 --> 00:29:10,880
also our 3gpp delegate from from the

648
00:29:10,880 --> 00:29:13,360
telecom will give some insights into

649
00:29:13,360 --> 00:29:15,039
uh how

650
00:29:15,039 --> 00:29:17,919
atriples

651
00:29:18,640 --> 00:29:20,640
yeah how it looks like what what are the

652
00:29:20,640 --> 00:29:22,880
time constraints from a 3gbp perspective

653
00:29:22,880 --> 00:29:25,520
and so on so everyone who is

654
00:29:25,520 --> 00:29:27,120
interested in that should join the site

655
00:29:27,120 --> 00:29:28,799
discussion

656
00:29:28,799 --> 00:29:30,559
um nevertheless

657
00:29:30,559 --> 00:29:32,080
the point i wanted to make is so

658
00:29:32,080 --> 00:29:34,000
multi-parts dccp is so far the only

659
00:29:34,000 --> 00:29:36,720
solution for non-tcp non-tcp splitting

660
00:29:36,720 --> 00:29:39,360
support which made it into the technical

661
00:29:39,360 --> 00:29:42,000
technical report after the last sa-2

662
00:29:42,000 --> 00:29:43,520
meeting

663
00:29:43,520 --> 00:29:45,440
which has happened in

664
00:29:45,440 --> 00:29:47,520
when was it february

665
00:29:47,520 --> 00:29:48,320
yeah

666
00:29:48,320 --> 00:29:50,559
exactly

667
00:29:50,559 --> 00:29:52,640
so for sure we also expect that the

668
00:29:52,640 --> 00:29:55,279
other solutions will will come up

669
00:29:55,279 --> 00:29:57,440
into this technical report but so far

670
00:29:57,440 --> 00:30:00,480
only multiples gccp is there and we also

671
00:30:00,480 --> 00:30:02,240
have some some great support from from

672
00:30:02,240 --> 00:30:03,679
big

673
00:30:03,679 --> 00:30:06,000
parties here

674
00:30:06,000 --> 00:30:09,120
i already outlined we have now the full

675
00:30:09,120 --> 00:30:12,080
uh set of functionalities available

676
00:30:12,080 --> 00:30:14,399
which are at triple s compatible

677
00:30:14,399 --> 00:30:16,720
i will not repeat all of them

678
00:30:16,720 --> 00:30:19,919
i think i made this clear already

679
00:30:19,919 --> 00:30:22,720
we have a plc agreed with a big terminal

680
00:30:22,720 --> 00:30:25,120
wonder who will adopt the multi-pass

681
00:30:25,120 --> 00:30:27,279
tccp into their

682
00:30:27,279 --> 00:30:29,279
android

683
00:30:29,279 --> 00:30:31,360
system and so that is where we are

684
00:30:31,360 --> 00:30:33,279
currently working on together

685
00:30:33,279 --> 00:30:34,799
together with this terminal vendor to

686
00:30:34,799 --> 00:30:36,960
get some first experience

687
00:30:36,960 --> 00:30:39,200
we also started some exploration of

688
00:30:39,200 --> 00:30:42,240
including random linear network coding

689
00:30:42,240 --> 00:30:44,399
and combine this with multi-pass dcp to

690
00:30:44,399 --> 00:30:46,159
see the effect

691
00:30:46,159 --> 00:30:49,600
especially when packet loss occurs

692
00:30:49,600 --> 00:30:50,960
yeah active drive development is at

693
00:30:50,960 --> 00:30:54,240
github with currently nine contributors

694
00:30:54,240 --> 00:30:56,320
um if i look at the time i think i have

695
00:30:56,320 --> 00:30:59,360
to speed up a little bit um so that is

696
00:30:59,360 --> 00:31:00,880
the relationship i think we will later

697
00:31:00,880 --> 00:31:03,440
on discuss again in the site meeting

698
00:31:03,440 --> 00:31:05,919
so maybe we can skip this for

699
00:31:05,919 --> 00:31:08,640
this meeting now

700
00:31:11,120 --> 00:31:12,720
there we go ah

701
00:31:12,720 --> 00:31:14,640
very good yeah that is that is something

702
00:31:14,640 --> 00:31:17,360
interesting um so we spontaneously

703
00:31:17,360 --> 00:31:19,120
decided to participate in the hackathon

704
00:31:19,120 --> 00:31:21,760
so we just took a free free table and

705
00:31:21,760 --> 00:31:23,360
started live hacking

706
00:31:23,360 --> 00:31:24,640
so we have a

707
00:31:24,640 --> 00:31:26,960
google pixel 4 phone now available with

708
00:31:26,960 --> 00:31:29,840
multi-pass tccp integrated

709
00:31:29,840 --> 00:31:32,320
we used it to demonstrate the effect

710
00:31:32,320 --> 00:31:34,799
what what happens if

711
00:31:34,799 --> 00:31:36,640
the commercial accesses the wi-fi and

712
00:31:36,640 --> 00:31:38,480
the 4g axis be used

713
00:31:38,480 --> 00:31:40,000
in the hackathon room

714
00:31:40,000 --> 00:31:42,559
if one of them fail

715
00:31:42,559 --> 00:31:45,120
so this google pixel 4 be connected to a

716
00:31:45,120 --> 00:31:47,679
multi-pass dccp proxy in the internet

717
00:31:47,679 --> 00:31:49,840
and we started a real skype call between

718
00:31:49,840 --> 00:31:52,720
this multi-pass dccp enabled smartphone

719
00:31:52,720 --> 00:31:54,799
and a traditional smartphone without

720
00:31:54,799 --> 00:31:58,320
multiples tcp through the mpdccp proxy

721
00:31:58,320 --> 00:32:01,919
so what what happened um when when one

722
00:32:01,919 --> 00:32:04,240
or the the currently used access failed

723
00:32:04,240 --> 00:32:05,440
there was a

724
00:32:05,440 --> 00:32:08,080
immediate hand over into the other axis

725
00:32:08,080 --> 00:32:10,399
and there was no interruption in the

726
00:32:10,399 --> 00:32:11,760
skype call

727
00:32:11,760 --> 00:32:14,399
so it works i have this phone available

728
00:32:14,399 --> 00:32:17,200
and i'm open to present it to anyone who

729
00:32:17,200 --> 00:32:19,760
is interested

730
00:32:21,440 --> 00:32:23,679
yep coming to the last slide

731
00:32:23,679 --> 00:32:25,519
so

732
00:32:25,519 --> 00:32:27,360
we believe

733
00:32:27,360 --> 00:32:30,000
with draft version 4 we are feature

734
00:32:30,000 --> 00:32:32,080
complete

735
00:32:32,080 --> 00:32:32,880
so

736
00:32:32,880 --> 00:32:35,120
we are now in the process of getting

737
00:32:35,120 --> 00:32:38,159
reviewers on board and

738
00:32:38,159 --> 00:32:41,120
please feel welcome to join this that

739
00:32:41,120 --> 00:32:44,399
would be really helpful for us

740
00:32:44,399 --> 00:32:46,399
i further outlined that

741
00:32:46,399 --> 00:32:49,120
we did a lot of development and it does

742
00:32:49,120 --> 00:32:52,080
a lot of publications

743
00:32:52,080 --> 00:32:54,799
around the multi-pass dccp prototype

744
00:32:54,799 --> 00:32:56,720
including also now the encapsulation

745
00:32:56,720 --> 00:32:58,799
framework which is quite important to

746
00:32:58,799 --> 00:32:59,919
enable

747
00:32:59,919 --> 00:33:02,399
any type of traffic for multi-pass

748
00:33:02,399 --> 00:33:04,480
transport

749
00:33:04,480 --> 00:33:07,120
we are ramping up now poc activities

750
00:33:07,120 --> 00:33:09,200
with industry

751
00:33:09,200 --> 00:33:12,240
also to test interoperability

752
00:33:12,240 --> 00:33:14,559
and we will continue result generation

753
00:33:14,559 --> 00:33:16,559
and publication together

754
00:33:16,559 --> 00:33:19,440
with academia

755
00:33:19,440 --> 00:33:21,760
our goal is also to keep pace with a

756
00:33:21,760 --> 00:33:24,720
3gbp release 18 timelines again i think

757
00:33:24,720 --> 00:33:26,960
that will be something we will later on

758
00:33:26,960 --> 00:33:29,279
discuss in the site meeting the details

759
00:33:29,279 --> 00:33:31,039
when it will happen you you can find

760
00:33:31,039 --> 00:33:34,399
here on this slide so please feel free

761
00:33:34,399 --> 00:33:35,840
to join

762
00:33:35,840 --> 00:33:36,640
uh

763
00:33:36,640 --> 00:33:39,760
the reviewing queue for multi-pass gccp

764
00:33:39,760 --> 00:33:42,320
also to start maybe hacking

765
00:33:42,320 --> 00:33:45,360
uh the prototype would be also great

766
00:33:45,360 --> 00:33:47,440
and with that i would say let's go to

767
00:33:47,440 --> 00:33:49,120
the question round thank you

768
00:33:49,120 --> 00:33:53,479
so any questions please

769
00:33:59,200 --> 00:34:00,399
thank you ever so much for joining the

770
00:34:00,399 --> 00:34:02,080
hackathon and it's always good to see

771
00:34:02,080 --> 00:34:03,519
running code and

772
00:34:03,519 --> 00:34:04,640
i think

773
00:34:04,640 --> 00:34:06,720
evidence that things work is definitely

774
00:34:06,720 --> 00:34:09,359
something that's useful

775
00:34:09,359 --> 00:34:10,879
um you'll see the announcement while

776
00:34:10,879 --> 00:34:12,960
we're taking questions this is a

777
00:34:12,960 --> 00:34:15,599
tsv related side meeting across the

778
00:34:15,599 --> 00:34:18,320
corridor after the current break just

779
00:34:18,320 --> 00:34:20,399
after the end of this meeting

780
00:34:20,399 --> 00:34:22,639
the room capacity is always limited

781
00:34:22,639 --> 00:34:24,320
because this meeting was called together

782
00:34:24,320 --> 00:34:26,480
just to provide some coordination

783
00:34:26,480 --> 00:34:29,440
it's basically just a chance to talk and

784
00:34:29,440 --> 00:34:31,199
make sure that people understand the

785
00:34:31,199 --> 00:34:32,879
position of different things that are

786
00:34:32,879 --> 00:34:35,520
going on and we're really pleased that

787
00:34:35,520 --> 00:34:37,918
um we have some participation from three

788
00:34:37,918 --> 00:34:40,320
gpp representatives to help

789
00:34:40,320 --> 00:34:43,520
just tell us a little bit more

790
00:34:46,399 --> 00:34:50,239
we have one question uh go ahead

791
00:34:50,239 --> 00:34:52,879
uh yes uh checking here

792
00:34:52,879 --> 00:34:54,079
um

793
00:34:54,079 --> 00:34:56,760
in 3gpp uh ats

794
00:34:56,760 --> 00:35:01,200
ss3 discussion uh there was one

795
00:35:01,200 --> 00:35:04,800
study topic regarding to use more than

796
00:35:04,800 --> 00:35:05,599
two

797
00:35:05,599 --> 00:35:07,119
parallel passes

798
00:35:07,119 --> 00:35:09,839
like a three different passes

799
00:35:09,839 --> 00:35:13,280
in order to provide the multi-castings

800
00:35:13,280 --> 00:35:15,040
well uh when you did give the

801
00:35:15,040 --> 00:35:17,040
presentation i try to look for

802
00:35:17,040 --> 00:35:18,640
information regarding that beyond the

803
00:35:18,640 --> 00:35:19,440
two

804
00:35:19,440 --> 00:35:20,320
so

805
00:35:20,320 --> 00:35:24,079
can you elaborate on that one thank you

806
00:35:24,079 --> 00:35:26,079
yep so if i got your question right you

807
00:35:26,079 --> 00:35:27,520
ask

808
00:35:27,520 --> 00:35:30,960
how many paths we we support

809
00:35:30,960 --> 00:35:31,920
um

810
00:35:31,920 --> 00:35:33,839
okay very good yeah so we are completely

811
00:35:33,839 --> 00:35:36,480
agnostic to that uh we support as many

812
00:35:36,480 --> 00:35:38,480
parts are available so we don't have any

813
00:35:38,480 --> 00:35:41,200
limitation so it doesn't matter if there

814
00:35:41,200 --> 00:35:42,880
are just two paths or two access

815
00:35:42,880 --> 00:35:44,880
available or three or four or five or

816
00:35:44,880 --> 00:35:47,040
six

817
00:35:47,040 --> 00:35:49,040
okay

818
00:35:49,040 --> 00:35:51,119
okay thank you oh yeah by the way for

819
00:35:51,119 --> 00:35:54,880
the 3gpp part the hss

820
00:35:54,880 --> 00:35:57,520
multipath tcp they're going to provide

821
00:35:57,520 --> 00:36:00,079
some proxy and and

822
00:36:00,079 --> 00:36:01,599
some ups

823
00:36:01,599 --> 00:36:05,440
so for your implementation mp tccp are

824
00:36:05,440 --> 00:36:07,440
you looking at the similar ones uh to

825
00:36:07,440 --> 00:36:09,040
put some proxy

826
00:36:09,040 --> 00:36:12,160
uh on some sort of ups in order to

827
00:36:12,160 --> 00:36:13,760
provide multipaths

828
00:36:13,760 --> 00:36:15,599
thank you

829
00:36:15,599 --> 00:36:17,920
yeah that is maybe something which has

830
00:36:17,920 --> 00:36:21,440
to be clarified in 3tpp if there is a

831
00:36:21,440 --> 00:36:24,880
certain protocol needed to

832
00:36:25,040 --> 00:36:27,359
signal uh the

833
00:36:27,359 --> 00:36:30,400
um that there is a multi-pass tccp proxy

834
00:36:30,400 --> 00:36:31,359
um

835
00:36:31,359 --> 00:36:33,760
so at the moment from the multi-pass dcp

836
00:36:33,760 --> 00:36:35,200
traffic itself

837
00:36:35,200 --> 00:36:38,160
there is no support for this and i think

838
00:36:38,160 --> 00:36:40,079
that is also not the idea of the

839
00:36:40,079 --> 00:36:42,240
multi-pass gccp draft

840
00:36:42,240 --> 00:36:44,720
so that is specifying really the basic

841
00:36:44,720 --> 00:36:47,200
protocol and not

842
00:36:47,200 --> 00:36:48,800
any proxy

843
00:36:48,800 --> 00:36:51,040
functionalities

844
00:36:51,040 --> 00:36:52,320
oh okay

845
00:36:52,320 --> 00:36:55,839
okay thank you

846
00:36:58,960 --> 00:37:02,880
okay thank you ever so much

847
00:37:02,880 --> 00:37:05,119
another question oh david question from

848
00:37:05,119 --> 00:37:06,880
david

849
00:37:06,880 --> 00:37:08,480
marcus there's some questions in the

850
00:37:08,480 --> 00:37:10,720
chat about whether remote participation

851
00:37:10,720 --> 00:37:12,560
will be available for the side meeting

852
00:37:12,560 --> 00:37:14,800
have you made any arrangements

853
00:37:14,800 --> 00:37:17,359
there is no remote participation support

854
00:37:17,359 --> 00:37:19,280
for site meetings

855
00:37:19,280 --> 00:37:21,359
we will make notes and we will

856
00:37:21,359 --> 00:37:22,960
distribute some of the materials from

857
00:37:22,960 --> 00:37:25,599
that to try and help inform this this is

858
00:37:25,599 --> 00:37:28,000
purely an information distribution

859
00:37:28,000 --> 00:37:30,800
meeting no decisions will be made

860
00:37:30,800 --> 00:37:32,240
everything that comes out of this will

861
00:37:32,240 --> 00:37:34,839
be made available to people

862
00:37:34,839 --> 00:37:35,920
and um

863
00:37:35,920 --> 00:37:37,760
sorry but we can't arrange remote

864
00:37:37,760 --> 00:37:40,800
participation at that

865
00:37:43,920 --> 00:37:46,320
martin thank you just to comment on that

866
00:37:46,320 --> 00:37:49,599
so um yeah so it is ietf policy did not

867
00:37:49,599 --> 00:37:51,760
provide the support for remote meetings

868
00:37:51,760 --> 00:37:55,040
that said if somebody wants to use the

869
00:37:55,040 --> 00:37:57,440
btc client of their choice um that's

870
00:37:57,440 --> 00:37:59,040
obviously okay

871
00:37:59,040 --> 00:38:02,560
um independently so um

872
00:38:02,560 --> 00:38:04,240
because if if somebody chooses to do

873
00:38:04,240 --> 00:38:06,400
that we just email the list and let

874
00:38:06,400 --> 00:38:09,440
people know that's available

875
00:38:10,240 --> 00:38:12,160
or not it's up to you

876
00:38:12,160 --> 00:38:14,800
to marcus as the as the proponent for

877
00:38:14,800 --> 00:38:16,640
the meeting it's really fun this i mean

878
00:38:16,640 --> 00:38:19,599
maybe we need a longer ietf meeting

879
00:38:19,599 --> 00:38:21,760
uh yeah we'll see what we can do tell us

880
00:38:21,760 --> 00:38:23,920
yeah i'm not sure what the policies are

881
00:38:23,920 --> 00:38:25,320
if this is

882
00:38:25,320 --> 00:38:27,520
tsvwg endorsed

883
00:38:27,520 --> 00:38:31,040
then it's not tsvwg endorsed it's tsvwd

884
00:38:31,040 --> 00:38:33,280
related okay so it's purely information

885
00:38:33,280 --> 00:38:35,920
distribution about what is going on and

886
00:38:35,920 --> 00:38:37,680
what people think so it could be in a

887
00:38:37,680 --> 00:38:39,040
corridor but to make it a little bit

888
00:38:39,040 --> 00:38:40,960
easier because we saw several people

889
00:38:40,960 --> 00:38:43,839
interested we boot to side room

890
00:38:43,839 --> 00:38:45,119
so

891
00:38:45,119 --> 00:38:46,640
nothing

892
00:38:46,640 --> 00:38:49,040
we'll go in the notes for tsvwg about

893
00:38:49,040 --> 00:38:50,320
this but we will distribute the

894
00:38:50,320 --> 00:38:53,280
information to the list

895
00:38:55,839 --> 00:39:00,200
thanks marcus thanks

896
00:39:05,520 --> 00:39:08,720
so next up in our agenda is

897
00:39:08,720 --> 00:39:09,920
discussion of diff service

898
00:39:09,920 --> 00:39:12,839
differentiated services

899
00:39:12,839 --> 00:39:16,320
um we said we'll take anafist

900
00:39:16,320 --> 00:39:17,680
and

901
00:39:17,680 --> 00:39:20,640
talk about the

902
00:39:21,440 --> 00:39:25,960
considerations for assigning dscps

903
00:39:28,800 --> 00:39:30,800
we can advance slides if you're saying

904
00:39:30,800 --> 00:39:32,320
next

905
00:39:32,320 --> 00:39:35,760
not sure who's got side control yeah

906
00:39:35,760 --> 00:39:38,000
uh is this the latest version of the

907
00:39:38,000 --> 00:39:40,240
slide deck this is david i have high

908
00:39:40,240 --> 00:39:43,119
control just say next uh i'll i'll move

909
00:39:43,119 --> 00:39:44,400
them forward

910
00:39:44,400 --> 00:39:45,680
okay thank you

911
00:39:45,680 --> 00:39:48,079
uh right so hi i'm anna i'm here to talk

912
00:39:48,079 --> 00:39:49,920
about our draft considerations for

913
00:39:49,920 --> 00:39:54,240
assigning gifts of code points uh next

914
00:39:54,400 --> 00:39:56,800
so i'm going to start with some updates

915
00:39:56,800 --> 00:39:59,280
so uh we published revision01 and in

916
00:39:59,280 --> 00:40:01,280
this revision we included some

917
00:40:01,280 --> 00:40:02,720
clarifications around the different

918
00:40:02,720 --> 00:40:04,880
pathologies that can happen

919
00:40:04,880 --> 00:40:07,280
to a diffserv code point as it crosses a

920
00:40:07,280 --> 00:40:09,200
path in particular we added a new

921
00:40:09,200 --> 00:40:11,599
pathology which is clearing the least

922
00:40:11,599 --> 00:40:14,960
significant bits of a dhcp

923
00:40:14,960 --> 00:40:16,720
and since we published that we also got

924
00:40:16,720 --> 00:40:18,160
a load of comments

925
00:40:18,160 --> 00:40:21,200
um in particular thank you very much to

926
00:40:21,200 --> 00:40:24,400
brian carpenter and rudy gargayeb

927
00:40:24,400 --> 00:40:27,599
who offers some very helpful suggestions

928
00:40:27,599 --> 00:40:29,440
uh mostly this is just

929
00:40:29,440 --> 00:40:31,920
adding or editing text on how we relate

930
00:40:31,920 --> 00:40:34,800
to other rfcs

931
00:40:34,800 --> 00:40:39,440
like 3086 on phps or um clarifying some

932
00:40:39,440 --> 00:40:41,839
of the text in rfc 2474

933
00:40:41,839 --> 00:40:43,359
and especially

934
00:40:43,359 --> 00:40:46,319
what it says about remarking of this

935
00:40:46,319 --> 00:40:48,240
code points at boundaries between

936
00:40:48,240 --> 00:40:49,920
domains

937
00:40:49,920 --> 00:40:52,560
we also got some suggestions to

938
00:40:52,560 --> 00:40:54,319
talk a bit more about

939
00:40:54,319 --> 00:40:56,960
management code points and also to

940
00:40:56,960 --> 00:40:58,720
clarify that

941
00:40:58,720 --> 00:41:01,440
the gsma ir34 standard is not binding

942
00:41:01,440 --> 00:41:03,040
and has not necessarily seen a lot of

943
00:41:03,040 --> 00:41:04,839
deployment oops

944
00:41:04,839 --> 00:41:06,640
sorry um

945
00:41:06,640 --> 00:41:08,000
so we're going to make all of these

946
00:41:08,000 --> 00:41:10,160
edits i haven't had a chance to get back

947
00:41:10,160 --> 00:41:11,839
to people on the mailing list but thank

948
00:41:11,839 --> 00:41:14,560
you very much they are very helpful and

949
00:41:14,560 --> 00:41:16,800
i will propose some text and we will get

950
00:41:16,800 --> 00:41:18,880
back to you thank you very much

951
00:41:18,880 --> 00:41:20,560
uh there's something else we want to

952
00:41:20,560 --> 00:41:22,560
discuss and we want to include in a

953
00:41:22,560 --> 00:41:25,040
future version of the draft

954
00:41:25,040 --> 00:41:27,040
and i'm going to try and paint a picture

955
00:41:27,040 --> 00:41:29,119
here on what that is

956
00:41:29,119 --> 00:41:33,240
so next slide please

957
00:41:34,319 --> 00:41:37,520
so i'm going to start with um

958
00:41:37,520 --> 00:41:39,040
sure i have a lot of transitions i'm

959
00:41:39,040 --> 00:41:41,280
going to be saying next a lot

960
00:41:41,280 --> 00:41:43,599
but i'm going to uh try and show you

961
00:41:43,599 --> 00:41:46,720
on this grid which um

962
00:41:46,720 --> 00:41:48,480
these are all of the 64 chord points

963
00:41:48,480 --> 00:41:50,960
arranged in an 8x8 grid and i'm first

964
00:41:50,960 --> 00:41:52,800
going to highlight the ones that have

965
00:41:52,800 --> 00:41:54,640
already been assigned

966
00:41:54,640 --> 00:41:57,440
uh next

967
00:41:57,520 --> 00:41:58,960
so first off

968
00:41:58,960 --> 00:42:02,000
uh you have rsu 2474 we specified the

969
00:42:02,000 --> 00:42:04,079
specifies the class selector code points

970
00:42:04,079 --> 00:42:07,200
i think this is back in 1998.

971
00:42:07,200 --> 00:42:08,000
um

972
00:42:08,000 --> 00:42:09,839
and these are the the code points that

973
00:42:09,839 --> 00:42:12,000
um keep compatibility with the previous

974
00:42:12,000 --> 00:42:14,319
dos precedence field

975
00:42:14,319 --> 00:42:16,640
uh next

976
00:42:16,640 --> 00:42:18,640
then along come all of the assured

977
00:42:18,640 --> 00:42:20,000
forwarding code points which can also

978
00:42:20,000 --> 00:42:22,160
encode drop probability

979
00:42:22,160 --> 00:42:22,960
um

980
00:42:22,960 --> 00:42:25,200
next

981
00:42:25,839 --> 00:42:27,280
and then finally you have three more

982
00:42:27,280 --> 00:42:29,280
assignments that have been made over the

983
00:42:29,280 --> 00:42:30,640
past 20 years

984
00:42:30,640 --> 00:42:33,119
you have one for expedited forwarding

985
00:42:33,119 --> 00:42:35,599
you have one for voice admit and finally

986
00:42:35,599 --> 00:42:39,599
in 2018 you have one for lower effort

987
00:42:39,599 --> 00:42:42,000
next please

988
00:42:42,000 --> 00:42:44,079
on top of all of those assignments you

989
00:42:44,079 --> 00:42:45,280
also have

990
00:42:45,280 --> 00:42:48,000
uh code points so if you take the

991
00:42:48,000 --> 00:42:49,680
sorry the binary representation of these

992
00:42:49,680 --> 00:42:51,839
code points those are the ones that end

993
00:42:51,839 --> 00:42:53,680
in one one are the ones on those two

994
00:42:53,680 --> 00:42:54,720
columns

995
00:42:54,720 --> 00:42:56,640
and they are reserved for experimental

996
00:42:56,640 --> 00:42:59,640
use

997
00:42:59,680 --> 00:43:02,240
next please

998
00:43:03,440 --> 00:43:05,119
right so this is how the grid looks

999
00:43:05,119 --> 00:43:06,720
right now with all of the assignments

1000
00:43:06,720 --> 00:43:08,880
and over the years i've been i've been

1001
00:43:08,880 --> 00:43:10,839
measuring diffserv ever since around

1002
00:43:10,839 --> 00:43:15,680
2016 and in doing measurements um

1003
00:43:15,680 --> 00:43:17,520
well we kind of know

1004
00:43:17,520 --> 00:43:18,960
what code points are popular in

1005
00:43:18,960 --> 00:43:20,880
particular in specific types of networks

1006
00:43:20,880 --> 00:43:22,880
or from specific uh

1007
00:43:22,880 --> 00:43:25,280
types of edges so

1008
00:43:25,280 --> 00:43:27,440
next please

1009
00:43:27,440 --> 00:43:30,079
so for example um at the web server edge

1010
00:43:30,079 --> 00:43:33,359
you see a lot of the af 11 21 and 31

1011
00:43:33,359 --> 00:43:34,480
code points

1012
00:43:34,480 --> 00:43:35,280
uh

1013
00:43:35,280 --> 00:43:39,119
and to a lot lesser extent cs3 and ef

1014
00:43:39,119 --> 00:43:41,680
next please

1015
00:43:41,680 --> 00:43:44,079
mobile networks a lot of mobile networks

1016
00:43:44,079 --> 00:43:45,839
just remark all of the incoming code

1017
00:43:45,839 --> 00:43:46,960
points to

1018
00:43:46,960 --> 00:43:49,680
uh one only one value and that's often

1019
00:43:49,680 --> 00:43:52,720
af 11 12 or 13.

1020
00:43:52,720 --> 00:43:55,839
uh next please

1021
00:43:56,160 --> 00:43:58,400
uh by examining a large number of packet

1022
00:43:58,400 --> 00:44:01,200
traces at an internet exchange we saw a

1023
00:44:01,200 --> 00:44:04,000
lot of the icmp traffic does carry a

1024
00:44:04,000 --> 00:44:06,560
code point cs6

1025
00:44:06,560 --> 00:44:08,319
as rc247

1026
00:44:08,319 --> 00:44:10,640
states so that's

1027
00:44:10,640 --> 00:44:12,480
another one that is used

1028
00:44:12,480 --> 00:44:15,040
next please

1029
00:44:15,599 --> 00:44:16,560
and

1030
00:44:16,560 --> 00:44:19,440
finally examining dns server replies we

1031
00:44:19,440 --> 00:44:22,560
see that often they use cs1 that one in

1032
00:44:22,560 --> 00:44:24,400
particular all of this is measurement

1033
00:44:24,400 --> 00:44:26,000
data and

1034
00:44:26,000 --> 00:44:28,800
the latest slide deck has an appendix

1035
00:44:28,800 --> 00:44:30,000
and all of the

1036
00:44:30,000 --> 00:44:31,920
highlights of this data and all of the

1037
00:44:31,920 --> 00:44:33,440
measurements that we conducted are in

1038
00:44:33,440 --> 00:44:35,599
there so i thoroughly encourage you to

1039
00:44:35,599 --> 00:44:37,599
take a look

1040
00:44:37,599 --> 00:44:40,800
so next please

1041
00:44:42,400 --> 00:44:43,680
right so these are the code points that

1042
00:44:43,680 --> 00:44:45,520
are used

1043
00:44:45,520 --> 00:44:47,280
uh based on measurement data

1044
00:44:47,280 --> 00:44:49,119
unfortunately the measurement data also

1045
00:44:49,119 --> 00:44:52,319
highlights a problem

1046
00:44:52,319 --> 00:44:53,520
so

1047
00:44:53,520 --> 00:44:55,599
in our first study that we did

1048
00:44:55,599 --> 00:44:57,440
we found a significant number of

1049
00:44:57,440 --> 00:44:58,560
fruiters

1050
00:44:58,560 --> 00:45:01,920
and what they do is they bleach the

1051
00:45:01,920 --> 00:45:04,880
three most significant bits of a dhcp

1052
00:45:04,880 --> 00:45:06,800
we call this pathology toss precedence

1053
00:45:06,800 --> 00:45:09,280
bleaching and it happens on up to 20

1054
00:45:09,280 --> 00:45:11,359
percent of paths is that's what we found

1055
00:45:11,359 --> 00:45:13,760
in our study it depends on vantage point

1056
00:45:13,760 --> 00:45:16,160
but it's a pathology that we found for

1057
00:45:16,160 --> 00:45:18,800
from every vantage point that we tested

1058
00:45:18,800 --> 00:45:20,160
we also

1059
00:45:20,160 --> 00:45:22,240
validated the data through different

1060
00:45:22,240 --> 00:45:23,359
methods

1061
00:45:23,359 --> 00:45:25,920
uh validated in a study on edge networks

1062
00:45:25,920 --> 00:45:28,880
made through um ripe atlas

1063
00:45:28,880 --> 00:45:31,119
and we also found this in the packetries

1064
00:45:31,119 --> 00:45:32,800
analysis

1065
00:45:32,800 --> 00:45:34,960
so uh those precedence bleaching is

1066
00:45:34,960 --> 00:45:37,599
extensive

1067
00:45:37,680 --> 00:45:40,400
uh what does it mean well

1068
00:45:40,400 --> 00:45:42,400
if you clear the top three uh bits of a

1069
00:45:42,400 --> 00:45:43,760
dhcp

1070
00:45:43,760 --> 00:45:45,280
essentially what you end up with with a

1071
00:45:45,280 --> 00:45:48,480
value of the resulting dhcp is between 0

1072
00:45:48,480 --> 00:45:49,760
and 7.

1073
00:45:49,760 --> 00:45:53,040
so for example af 11 bleaches to dhcp2

1074
00:45:53,040 --> 00:45:56,079
ef which is 46 if you slash off the top

1075
00:45:56,079 --> 00:45:59,440
three bits it bleeds to six

1076
00:45:59,440 --> 00:46:02,000
next please

1077
00:46:02,560 --> 00:46:04,319
so essentially all of the dhcps on one

1078
00:46:04,319 --> 00:46:06,880
column will bleach to the lower lower

1079
00:46:06,880 --> 00:46:09,520
lowest value down there of that column

1080
00:46:09,520 --> 00:46:12,880
so that is a big problem for assignments

1081
00:46:12,880 --> 00:46:15,680
uh next please

1082
00:46:15,680 --> 00:46:16,960
well

1083
00:46:16,960 --> 00:46:19,760
why well it's a two

1084
00:46:19,760 --> 00:46:21,680
it's a two-way problem because if you

1085
00:46:21,680 --> 00:46:23,680
have all of these uh popular chord

1086
00:46:23,680 --> 00:46:25,119
points that then get

1087
00:46:25,119 --> 00:46:28,079
uh toss precedence bleach to one

1088
00:46:28,079 --> 00:46:29,680
small code point that it means that

1089
00:46:29,680 --> 00:46:32,400
small code point b two or six then can

1090
00:46:32,400 --> 00:46:34,240
no longer be used for assignments

1091
00:46:34,240 --> 00:46:37,520
because it's essentially polluted

1092
00:46:37,520 --> 00:46:39,200
as it's being used by a lot of other

1093
00:46:39,200 --> 00:46:41,520
traffic

1094
00:46:41,599 --> 00:46:43,680
and also it it also has implications for

1095
00:46:43,680 --> 00:46:46,800
the uh larger dhcps because then if you

1096
00:46:46,800 --> 00:46:48,800
choose one of them

1097
00:46:48,800 --> 00:46:50,560
then for example if you choose the sap

1098
00:46:50,560 --> 00:46:53,599
if you choose to assign the scp 9 or 17

1099
00:46:53,599 --> 00:46:55,680
then well if they get close precedence

1100
00:46:55,680 --> 00:46:57,760
bleached they end up with code 0.1 which

1101
00:46:57,760 --> 00:47:00,000
is used for lower effort and you really

1102
00:47:00,000 --> 00:47:02,880
don't want that in an assignment right

1103
00:47:02,880 --> 00:47:04,079
so

1104
00:47:04,079 --> 00:47:06,240
what do we have in that bottom row well

1105
00:47:06,240 --> 00:47:07,920
we have zero

1106
00:47:07,920 --> 00:47:09,680
which is the sign which is best effort

1107
00:47:09,680 --> 00:47:12,400
we have one which is a sign lower effort

1108
00:47:12,400 --> 00:47:14,880
next piece

1109
00:47:15,680 --> 00:47:17,839
then we have two and as i've said a lot

1110
00:47:17,839 --> 00:47:19,599
of traffic aggregates

1111
00:47:19,599 --> 00:47:21,280
well those precedent speeches down to

1112
00:47:21,280 --> 00:47:23,680
two so that one is not necessarily very

1113
00:47:23,680 --> 00:47:24,800
usable

1114
00:47:24,800 --> 00:47:26,640
at least in the core of the internet

1115
00:47:26,640 --> 00:47:29,119
then we have three which is experimental

1116
00:47:29,119 --> 00:47:31,440
next please

1117
00:47:31,440 --> 00:47:34,000
then we have code point four and

1118
00:47:34,000 --> 00:47:35,599
this one has a different kind of problem

1119
00:47:35,599 --> 00:47:36,880
it's more of a

1120
00:47:36,880 --> 00:47:39,760
historical ssh bug all ssh

1121
00:47:39,760 --> 00:47:41,760
well not all ssh but a lot of ssh

1122
00:47:41,760 --> 00:47:43,119
traffic uses

1123
00:47:43,119 --> 00:47:44,559
this particular code point and we've

1124
00:47:44,559 --> 00:47:47,520
seen this as well in measurements

1125
00:47:47,520 --> 00:47:50,000
next please

1126
00:47:50,240 --> 00:47:53,040
then we have the scp-5 and we have nqb

1127
00:47:53,040 --> 00:47:56,319
which is provisionally um

1128
00:47:56,319 --> 00:47:59,119
allocated to this to this value

1129
00:47:59,119 --> 00:48:03,200
then we have six uh next please

1130
00:48:03,440 --> 00:48:06,960
six has the exact same problem as um

1131
00:48:06,960 --> 00:48:09,200
2 but to a lesser extent because on that

1132
00:48:09,200 --> 00:48:11,200
column you have ef and f13 which are

1133
00:48:11,200 --> 00:48:12,480
quite popular

1134
00:48:12,480 --> 00:48:14,720
and then you have 7 which is also left

1135
00:48:14,720 --> 00:48:17,520
in the experimental

1136
00:48:19,040 --> 00:48:21,520
next please

1137
00:48:22,480 --> 00:48:24,079
right so you have a problem with those

1138
00:48:24,079 --> 00:48:26,880
precedence bleeding

1139
00:48:27,680 --> 00:48:29,680
so you can either view this in two ways

1140
00:48:29,680 --> 00:48:31,200
either those person is bleaching is

1141
00:48:31,200 --> 00:48:32,800
something that is a given it happens in

1142
00:48:32,800 --> 00:48:34,720
the internet and then assigning one of

1143
00:48:34,720 --> 00:48:35,599
those

1144
00:48:35,599 --> 00:48:37,040
code points that is smaller than seven

1145
00:48:37,040 --> 00:48:38,800
is a big deal and then you should

1146
00:48:38,800 --> 00:48:40,960
consider these smaller code points as

1147
00:48:40,960 --> 00:48:43,200
aggregates as opposed to

1148
00:48:43,200 --> 00:48:46,559
assign them for a specific purpose

1149
00:48:46,559 --> 00:48:48,240
or you can consider it's not a problem

1150
00:48:48,240 --> 00:48:50,559
because those bleaching is after all a

1151
00:48:50,559 --> 00:48:53,520
pathology and it shouldn't be happening

1152
00:48:53,520 --> 00:48:56,000
and then you can you have other options

1153
00:48:56,000 --> 00:48:57,280
you can just

1154
00:48:57,280 --> 00:48:59,680
choose

1155
00:49:00,400 --> 00:49:02,640
well you can have a dual allocation like

1156
00:49:02,640 --> 00:49:05,440
um nqb does and it deals with it that

1157
00:49:05,440 --> 00:49:07,599
way because it has uh one quadrant

1158
00:49:07,599 --> 00:49:08,880
assigned from the edge and one code

1159
00:49:08,880 --> 00:49:10,559
point for the core and the codebrand for

1160
00:49:10,559 --> 00:49:14,839
the core is the scp-5 which is meant to

1161
00:49:14,839 --> 00:49:17,839
traverse but what if those precedence

1162
00:49:17,839 --> 00:49:19,520
breaching was just a pathology then you

1163
00:49:19,520 --> 00:49:21,119
could easily just choose one chord point

1164
00:49:21,119 --> 00:49:22,720
to represent

1165
00:49:22,720 --> 00:49:25,119
that of the same semantic across

1166
00:49:25,119 --> 00:49:28,480
both edge and core right

1167
00:49:29,520 --> 00:49:31,200
in any case whichever way you choose to

1168
00:49:31,200 --> 00:49:33,520
go about this you have to think because

1169
00:49:33,520 --> 00:49:34,319
um

1170
00:49:34,319 --> 00:49:36,480
assigning the small code point kind of

1171
00:49:36,480 --> 00:49:38,319
risks making code points in the same

1172
00:49:38,319 --> 00:49:40,800
column unusable

1173
00:49:40,800 --> 00:49:44,200
next slide please

1174
00:49:48,640 --> 00:49:50,960
uh right so

1175
00:49:50,960 --> 00:49:52,720
underlying all of this there are

1176
00:49:52,720 --> 00:49:54,240
essentially

1177
00:49:54,240 --> 00:49:55,680
three cases that i've seen in

1178
00:49:55,680 --> 00:49:57,599
measurements and from talking to

1179
00:49:57,599 --> 00:49:59,520
different operators

1180
00:49:59,520 --> 00:50:01,599
you either have networks who don't care

1181
00:50:01,599 --> 00:50:03,680
about their server at all and then they

1182
00:50:03,680 --> 00:50:05,920
pass code points transparently

1183
00:50:05,920 --> 00:50:07,599
um

1184
00:50:07,599 --> 00:50:08,880
and this is

1185
00:50:08,880 --> 00:50:10,559
this is a valid use case of this and

1186
00:50:10,559 --> 00:50:12,720
we've seen this in measurements uh then

1187
00:50:12,720 --> 00:50:14,800
you have managed networks another you

1188
00:50:14,800 --> 00:50:17,280
know good use case for difficult this

1189
00:50:17,280 --> 00:50:18,559
service sorry

1190
00:50:18,559 --> 00:50:19,440
um

1191
00:50:19,440 --> 00:50:21,200
so operators uh

1192
00:50:21,200 --> 00:50:22,800
police code points allow only some

1193
00:50:22,800 --> 00:50:25,440
through remark the other ones to protect

1194
00:50:25,440 --> 00:50:27,040
internal nodes in the network and that's

1195
00:50:27,040 --> 00:50:29,680
perfectly fine

1196
00:50:31,280 --> 00:50:32,960
so in this particular scenario an

1197
00:50:32,960 --> 00:50:34,880
operator chooses to support a new code

1198
00:50:34,880 --> 00:50:36,400
point when it is assigned

1199
00:50:36,400 --> 00:50:38,480
and that's fine

1200
00:50:38,480 --> 00:50:40,160
so whatever operators do with code

1201
00:50:40,160 --> 00:50:41,680
points there's lots as long as it's not

1202
00:50:41,680 --> 00:50:43,680
those precedent splitting then it's fine

1203
00:50:43,680 --> 00:50:45,280
because it doesn't affect new

1204
00:50:45,280 --> 00:50:48,480
assignments of gold points if

1205
00:50:48,480 --> 00:50:49,440
yeah

1206
00:50:49,440 --> 00:50:51,599
oh and then finally um

1207
00:50:51,599 --> 00:50:53,520
there's the unmanaged networks or what i

1208
00:50:53,520 --> 00:50:55,119
call unmanaged networks that have really

1209
00:50:55,119 --> 00:50:56,640
weird behavior

1210
00:50:56,640 --> 00:50:59,440
um i consider tostrescence bleaching to

1211
00:50:59,440 --> 00:51:02,319
be in this category for example

1212
00:51:02,319 --> 00:51:04,240
uh but there are also other types of

1213
00:51:04,240 --> 00:51:06,839
pathologies like for example bleaching

1214
00:51:06,839 --> 00:51:08,480
the um

1215
00:51:08,480 --> 00:51:10,160
the other the other three bits of the

1216
00:51:10,160 --> 00:51:13,200
dscp and that happens but only in

1217
00:51:13,200 --> 00:51:15,440
some very few weird networks

1218
00:51:15,440 --> 00:51:18,079
and you can have inconsistent remarking

1219
00:51:18,079 --> 00:51:19,359
anyway

1220
00:51:19,359 --> 00:51:20,880
problem networks

1221
00:51:20,880 --> 00:51:23,599
and

1222
00:51:23,599 --> 00:51:25,760
basically

1223
00:51:25,760 --> 00:51:27,599
we'd like to propose some text about

1224
00:51:27,599 --> 00:51:29,280
this what would like to get input from

1225
00:51:29,280 --> 00:51:30,880
the working group on what to say about

1226
00:51:30,880 --> 00:51:32,400
them

1227
00:51:32,400 --> 00:51:35,880
next slide please

1228
00:51:36,960 --> 00:51:39,200
so um yeah what do we say about them

1229
00:51:39,200 --> 00:51:42,640
will go in the next version of the draft

1230
00:51:42,640 --> 00:51:44,960
um

1231
00:51:46,880 --> 00:51:48,400
i guess at the moment our draft is

1232
00:51:48,400 --> 00:51:51,520
informational um

1233
00:51:51,520 --> 00:51:53,680
we don't know if we could maybe make

1234
00:51:53,680 --> 00:51:56,400
recommendations for future assignments i

1235
00:51:56,400 --> 00:51:58,319
mean i'm going to include the table and

1236
00:51:58,319 --> 00:51:59,760
the implications that i've just talked

1237
00:51:59,760 --> 00:52:02,559
about in the version alongside with

1238
00:52:02,559 --> 00:52:05,200
the text that other people proposed

1239
00:52:05,200 --> 00:52:07,040
and

1240
00:52:07,040 --> 00:52:08,559
maybe it's also worthwhile talking to

1241
00:52:08,559 --> 00:52:10,079
operators to understand a little bit

1242
00:52:10,079 --> 00:52:11,680
more about

1243
00:52:11,680 --> 00:52:13,440
um

1244
00:52:13,440 --> 00:52:16,079
how things are used

1245
00:52:16,079 --> 00:52:17,680
but yeah that concludes my presentation

1246
00:52:17,680 --> 00:52:19,680
what i have is a lot of appendix slides

1247
00:52:19,680 --> 00:52:21,440
with lots of data so please be sure to

1248
00:52:21,440 --> 00:52:23,359
check those out

1249
00:52:23,359 --> 00:52:24,400
uh

1250
00:52:24,400 --> 00:52:26,720
thank you

1251
00:52:27,520 --> 00:52:29,760
thank you anna

1252
00:52:29,760 --> 00:52:32,160
do we have any questions

1253
00:52:32,160 --> 00:52:34,079
we have martin at the mic that'll be

1254
00:52:34,079 --> 00:52:36,319
good

1255
00:52:37,280 --> 00:52:40,240
uh martin martin duke google um first of

1256
00:52:40,240 --> 00:52:41,760
all i'd like this is my first

1257
00:52:41,760 --> 00:52:42,880
opportunity to thank you in person for

1258
00:52:42,880 --> 00:52:44,800
doing this draft um

1259
00:52:44,800 --> 00:52:46,720
i'm learning a ton just listening to all

1260
00:52:46,720 --> 00:52:47,920
this and that

1261
00:52:47,920 --> 00:52:49,760
that grid you showed just really makes

1262
00:52:49,760 --> 00:52:51,119
it super clear

1263
00:52:51,119 --> 00:52:53,119
that we're burning the last generally

1264
00:52:53,119 --> 00:52:54,319
useful

1265
00:52:54,319 --> 00:52:56,880
code point um which is uh

1266
00:52:56,880 --> 00:52:59,920
pause for some reflection on this um

1267
00:52:59,920 --> 00:53:01,520
yeah like i would encourage you to take

1268
00:53:01,520 --> 00:53:05,040
this to maybe ops area next time um that

1269
00:53:05,040 --> 00:53:07,280
might be a good step in terms of the

1270
00:53:07,280 --> 00:53:09,040
operator survey you may not reach the

1271
00:53:09,040 --> 00:53:11,119
people who are still bleaching

1272
00:53:11,119 --> 00:53:12,559
um because those are generally less

1273
00:53:12,559 --> 00:53:14,079
informed less connected people but

1274
00:53:14,079 --> 00:53:15,920
nevertheless um

1275
00:53:15,920 --> 00:53:17,359
that is a good

1276
00:53:17,359 --> 00:53:20,800
entrance point into this um

1277
00:53:20,800 --> 00:53:24,240
into that community uh

1278
00:53:24,240 --> 00:53:27,359
but yeah mainly thanks um so

1279
00:53:27,359 --> 00:53:28,960
your intent is still to have this be an

1280
00:53:28,960 --> 00:53:31,280
informational draft in your potential

1281
00:53:31,280 --> 00:53:34,319
if not mistaken and you're

1282
00:53:34,319 --> 00:53:36,160
proposing potentially additional draft

1283
00:53:36,160 --> 00:53:38,720
that that

1284
00:53:39,280 --> 00:53:42,559
was was that like what's the new draft

1285
00:53:42,559 --> 00:53:44,800
supposed to be

1286
00:53:44,800 --> 00:53:47,599
uh the next revision of this draft

1287
00:53:47,599 --> 00:53:49,839
oh okay okay right

1288
00:53:49,839 --> 00:53:52,960
okay uh maybe step in this chair here

1289
00:53:52,960 --> 00:53:54,559
so the the current work item is

1290
00:53:54,559 --> 00:53:56,480
informational yes

1291
00:53:56,480 --> 00:53:58,400
and i guess this

1292
00:53:58,400 --> 00:54:00,720
draft will be revised as informational

1293
00:54:00,720 --> 00:54:03,760
yeah and it is informational until we

1294
00:54:03,760 --> 00:54:05,359
get to the point where we start

1295
00:54:05,359 --> 00:54:07,599
clarifying the way that these 20 year

1296
00:54:07,599 --> 00:54:10,400
old rfcs are being

1297
00:54:10,400 --> 00:54:13,119
updated based on the current practice

1298
00:54:13,119 --> 00:54:15,680
so i i hadn't realized this when we

1299
00:54:15,680 --> 00:54:18,400
started it but maybe brian's carpenter's

1300
00:54:18,400 --> 00:54:20,160
post recently on the mailing list was

1301
00:54:20,160 --> 00:54:21,280
actually quite

1302
00:54:21,280 --> 00:54:23,280
quite deep quite useful

1303
00:54:23,280 --> 00:54:25,119
maybe after 20 years we should reflect

1304
00:54:25,119 --> 00:54:26,960
on what the best practices as we deal

1305
00:54:26,960 --> 00:54:28,319
with the last few chord point

1306
00:54:28,319 --> 00:54:30,160
registrations we should kind of get this

1307
00:54:30,160 --> 00:54:31,599
right

1308
00:54:31,599 --> 00:54:32,319
so

1309
00:54:32,319 --> 00:54:34,559
i think anna's line of this document is

1310
00:54:34,559 --> 00:54:36,480
informational is quite correct if we

1311
00:54:36,480 --> 00:54:37,680
think ahead

1312
00:54:37,680 --> 00:54:40,000
if we decide to do anything more then

1313
00:54:40,000 --> 00:54:42,160
this document maybe either has to have a

1314
00:54:42,160 --> 00:54:44,240
pair which is not information but maybe

1315
00:54:44,240 --> 00:54:47,520
bcp or ps or whatever it is and that

1316
00:54:47,520 --> 00:54:49,040
would be a change for the whole disserv

1317
00:54:49,040 --> 00:54:50,319
architecture which is currently all

1318
00:54:50,319 --> 00:54:53,119
recommended

1319
00:54:53,119 --> 00:54:56,720
um well okay so the thing the thing is

1320
00:54:56,720 --> 00:54:58,319
um it'll be good to get discussion on

1321
00:54:58,319 --> 00:55:00,400
the date that ana's had

1322
00:55:00,400 --> 00:55:02,400
and to decide on the way forward i don't

1323
00:55:02,400 --> 00:55:04,400
think this blocks the nqb work by the

1324
00:55:04,400 --> 00:55:06,319
way because i think we can friend qb we

1325
00:55:06,319 --> 00:55:08,559
can find the right answer no and then we

1326
00:55:08,559 --> 00:55:10,240
really don't have very many chord points

1327
00:55:10,240 --> 00:55:11,599
left so we have to decide what we're

1328
00:55:11,599 --> 00:55:13,520
doing in future so i think these things

1329
00:55:13,520 --> 00:55:15,119
could work in parallel

1330
00:55:15,119 --> 00:55:17,119
it'd be interesting to see how that pans

1331
00:55:17,119 --> 00:55:18,000
out

1332
00:55:18,000 --> 00:55:19,760
yeah i mean i i would

1333
00:55:19,760 --> 00:55:21,760
just looking i mean having

1334
00:55:21,760 --> 00:55:23,359
been aware of this for

1335
00:55:23,359 --> 00:55:25,839
five minutes now i i i would be tempted

1336
00:55:25,839 --> 00:55:27,520
to a

1337
00:55:27,520 --> 00:55:29,680
try to enter you know engage with the

1338
00:55:29,680 --> 00:55:30,880
operator community and see if we can

1339
00:55:30,880 --> 00:55:32,720
handle this bleaching situation which i

1340
00:55:32,720 --> 00:55:34,240
think would be great if we could fix it

1341
00:55:34,240 --> 00:55:35,599
but secondly

1342
00:55:35,599 --> 00:55:37,119
like i mean we've got a lot of

1343
00:55:37,119 --> 00:55:39,520
experimental code points and maybe like

1344
00:55:39,520 --> 00:55:40,720
deprecating

1345
00:55:40,720 --> 00:55:41,920
half of them

1346
00:55:41,920 --> 00:55:44,400
would be wise so we have a

1347
00:55:44,400 --> 00:55:46,799
we have a code a three bit code point

1348
00:55:46,799 --> 00:55:48,960
that is available just to be off the top

1349
00:55:48,960 --> 00:55:50,720
of my head i mean obviously it's not a

1350
00:55:50,720 --> 00:55:52,640
fully considered opinion i think we need

1351
00:55:52,640 --> 00:55:54,079
to consider um

1352
00:55:54,079 --> 00:55:55,760
what anna martin's experiment was

1353
00:55:55,760 --> 00:55:58,000
actually local use and experimental

1354
00:55:58,000 --> 00:56:00,480
local use of the scps is incredibly

1355
00:56:00,480 --> 00:56:04,559
important yeah and we also have managed

1356
00:56:04,559 --> 00:56:07,680
use of dscps and networks that just pass

1357
00:56:07,680 --> 00:56:09,920
the scps without doing a lot of changes

1358
00:56:09,920 --> 00:56:11,920
to them and those which do changes which

1359
00:56:11,920 --> 00:56:13,680
are historically based which are kind of

1360
00:56:13,680 --> 00:56:15,359
maybe harmful so there's maybe different

1361
00:56:15,359 --> 00:56:16,880
categories

1362
00:56:16,880 --> 00:56:18,160
so this is going to be a thing that's

1363
00:56:18,160 --> 00:56:20,079
useful to explore i suspect all the

1364
00:56:20,079 --> 00:56:21,359
people in the queue are going to talk

1365
00:56:21,359 --> 00:56:23,140
about this yes and

1366
00:56:23,140 --> 00:56:24,400
[Music]

1367
00:56:24,400 --> 00:56:26,000
yes i think we should take it to op

1368
00:56:26,000 --> 00:56:27,040
sorry i think that was a wonderful

1369
00:56:27,040 --> 00:56:30,000
suggestion so as a core contributor to

1370
00:56:30,000 --> 00:56:32,400
anna's work and i think a presentation

1371
00:56:32,400 --> 00:56:34,319
upset would be so wonderful

1372
00:56:34,319 --> 00:56:36,079
all right thank you

1373
00:56:36,079 --> 00:56:37,839
thanks

1374
00:56:37,839 --> 00:56:39,920
and after all that we have now rudiger

1375
00:56:39,920 --> 00:56:41,520
who's also been active on the mailing

1376
00:56:41,520 --> 00:56:45,119
list and rudika please speak to the mic

1377
00:56:45,119 --> 00:56:47,119
yeah i hope you can hear me

1378
00:56:47,119 --> 00:56:49,359
we can hear you please go ahead

1379
00:56:49,359 --> 00:56:50,160
great

1380
00:56:50,160 --> 00:56:51,200
yeah i'm

1381
00:56:51,200 --> 00:56:52,799
would you go guys i'm

1382
00:56:52,799 --> 00:56:55,520
configuring bleaching at the bacherators

1383
00:56:55,520 --> 00:56:56,960
of dodge telecom

1384
00:56:56,960 --> 00:56:59,040
and um

1385
00:56:59,040 --> 00:57:00,799
long-term

1386
00:57:00,799 --> 00:57:02,079
gifts of

1387
00:57:02,079 --> 00:57:05,440
participant i appreciate uh

1388
00:57:05,440 --> 00:57:07,839
work on an update of the existing drafts

1389
00:57:07,839 --> 00:57:08,960
because

1390
00:57:08,960 --> 00:57:10,000
i think

1391
00:57:10,000 --> 00:57:12,799
and i contributed a lot of my

1392
00:57:12,799 --> 00:57:14,640
operational experience

1393
00:57:14,640 --> 00:57:17,520
and uh what i'd like to have or like to

1394
00:57:17,520 --> 00:57:19,440
see in future is

1395
00:57:19,440 --> 00:57:21,359
something which uh

1396
00:57:21,359 --> 00:57:23,440
allows for default transport in the

1397
00:57:23,440 --> 00:57:25,839
backbone default saying just default

1398
00:57:25,839 --> 00:57:27,200
nothing else

1399
00:57:27,200 --> 00:57:29,440
but uh service differentiation in the

1400
00:57:29,440 --> 00:57:31,839
access and that should be also

1401
00:57:31,839 --> 00:57:34,000
standardized uh

1402
00:57:34,000 --> 00:57:36,079
sharing of resources and what i'm aware

1403
00:57:36,079 --> 00:57:38,559
of is you can either optimize for

1404
00:57:38,559 --> 00:57:41,020
throughput or you optimize for

1405
00:57:41,020 --> 00:57:42,160
[Music]

1406
00:57:42,160 --> 00:57:44,880
performance which is low jitter and low

1407
00:57:44,880 --> 00:57:46,960
delay i don't want to say it's that or

1408
00:57:46,960 --> 00:57:49,760
this option just should be fair and not

1409
00:57:49,760 --> 00:57:51,200
discriminate

1410
00:57:51,200 --> 00:57:53,440
against others so

1411
00:57:53,440 --> 00:57:55,760
there are no pipes it's just a default

1412
00:57:55,760 --> 00:57:57,200
behavior in the backbone and the

1413
00:57:57,200 --> 00:57:59,920
standardized behavior on the access how

1414
00:57:59,920 --> 00:58:02,240
resources are shared and i

1415
00:58:02,240 --> 00:58:03,680
can tell you that

1416
00:58:03,680 --> 00:58:05,040
many

1417
00:58:05,040 --> 00:58:07,280
people who request quality of service

1418
00:58:07,280 --> 00:58:09,760
concepts from me nowadays come and ask

1419
00:58:09,760 --> 00:58:13,280
for exactly that thank you

1420
00:58:18,000 --> 00:58:18,880
um

1421
00:58:18,880 --> 00:58:20,960
sorry what's their question

1422
00:58:20,960 --> 00:58:23,839
no

1423
00:58:24,880 --> 00:58:27,119
i guess the question i guess that we we

1424
00:58:27,119 --> 00:58:29,760
can include rudiger's comments

1425
00:58:29,760 --> 00:58:33,280
in that part of the draft uh yes yes

1426
00:58:33,280 --> 00:58:35,359
if the result of your draft is to

1427
00:58:35,359 --> 00:58:37,680
recommend an update of

1428
00:58:37,680 --> 00:58:39,520
the div specifications i really

1429
00:58:39,520 --> 00:58:41,920
appreciate that thanks

1430
00:58:41,920 --> 00:58:44,400
okay ah that's useful input as well

1431
00:58:44,400 --> 00:58:46,799
thank you erdogan

1432
00:58:46,799 --> 00:58:48,319
let's continue this on the mailing list

1433
00:58:48,319 --> 00:58:51,720
jonathan morton

1434
00:58:51,760 --> 00:58:54,720
just like to express support for

1435
00:58:54,720 --> 00:58:58,960
um some kind of bcp or uh

1436
00:58:58,960 --> 00:59:01,599
um rfc updates

1437
00:59:01,599 --> 00:59:04,240
to um

1438
00:59:04,240 --> 00:59:06,960
try to discourage the use of bleaching

1439
00:59:06,960 --> 00:59:10,720
in the network in some effective way

1440
00:59:10,720 --> 00:59:14,959
so yes we can continue this offline

1441
00:59:15,680 --> 00:59:18,079
yes it's in line as well with what we're

1442
00:59:18,079 --> 00:59:19,520
thinking

1443
00:59:19,520 --> 00:59:22,160
okay right so the answer is please

1444
00:59:22,160 --> 00:59:25,040
revise the draft

1445
00:59:25,040 --> 00:59:27,599
please consider a presentation to ops

1446
00:59:27,599 --> 00:59:29,760
area to try and tell them what what we

1447
00:59:29,760 --> 00:59:33,119
have found and also let's probe on what

1448
00:59:33,119 --> 00:59:35,119
we mean by recommendations but do these

1449
00:59:35,119 --> 00:59:37,040
three activities separately

1450
00:59:37,040 --> 00:59:38,559
revise the draft

1451
00:59:38,559 --> 00:59:40,559
think the presentation to ops area at

1452
00:59:40,559 --> 00:59:43,200
the next ietf and also think about

1453
00:59:43,200 --> 00:59:44,960
whether the recommendations for the use

1454
00:59:44,960 --> 00:59:45,760
of

1455
00:59:45,760 --> 00:59:47,520
chord points could be something we

1456
00:59:47,520 --> 00:59:49,119
discuss on list and come to some

1457
00:59:49,119 --> 00:59:50,720
consensus about these might have very

1458
00:59:50,720 --> 00:59:52,400
different time frames but thank you ever

1459
00:59:52,400 --> 00:59:55,200
so much for the talk uh yes i'll start

1460
00:59:55,200 --> 00:59:57,520
the process on the mailing list or

1461
00:59:57,520 --> 00:59:59,520
the one and the third things you just

1462
00:59:59,520 --> 01:00:03,920
mentioned thank you anna wonderful

1463
01:00:10,079 --> 01:00:12,160
oh they are

1464
01:00:12,160 --> 01:00:14,160
they appeared

1465
01:00:14,160 --> 01:00:15,920
excellent we have a question from bob

1466
01:00:15,920 --> 01:00:18,160
briscoe and sophia so bob please go

1467
01:00:18,160 --> 01:00:19,440
ahead let's just have to suggest as well

1468
01:00:19,440 --> 01:00:21,839
as upstairs the ieg which is an informal

1469
01:00:21,839 --> 01:00:24,839
operator

1470
01:00:29,520 --> 01:00:31,119
i'll put that

1471
01:00:31,119 --> 01:00:32,000
um

1472
01:00:32,000 --> 01:00:35,440
bob you completely broke up

1473
01:00:35,440 --> 01:00:38,440
iepg

1474
01:00:43,040 --> 01:00:45,200
can anyone channel bob i can bob type

1475
01:00:45,200 --> 01:00:48,160
that into the chat

1476
01:00:48,480 --> 01:00:49,440
yeah

1477
01:00:49,440 --> 01:00:51,280
excellent that would help i think he

1478
01:00:51,280 --> 01:00:52,480
said what i was also going to say that

1479
01:00:52,480 --> 01:00:54,640
you should also look at the iepg meeting

1480
01:00:54,640 --> 01:00:56,720
on sundays which is a sort of operator

1481
01:00:56,720 --> 01:00:58,480
hangout thing that's adjacent to the

1482
01:00:58,480 --> 01:01:00,000
iatf

1483
01:01:00,000 --> 01:01:01,839
well warren kumari is sort of involved

1484
01:01:01,839 --> 01:01:04,160
with that if you know him or

1485
01:01:04,160 --> 01:01:05,760
talk to me afterwards i'm not involved

1486
01:01:05,760 --> 01:01:07,839
but i can point you at people

1487
01:01:07,839 --> 01:01:09,599
i would love an introduction um

1488
01:01:09,599 --> 01:01:10,720
definitely so there's a bunch of

1489
01:01:10,720 --> 01:01:12,720
operators that meet like on sundays and

1490
01:01:12,720 --> 01:01:14,720
chat about this and that's what no the

1491
01:01:14,720 --> 01:01:19,359
date every itf sunday they meet or

1492
01:01:19,359 --> 01:01:20,400
yeah

1493
01:01:20,400 --> 01:01:21,599
so the

1494
01:01:21,599 --> 01:01:22,839
the comment was

1495
01:01:22,839 --> 01:01:26,319
um consider also iepg where you can have

1496
01:01:26,319 --> 01:01:28,000
the same talk with a very different

1497
01:01:28,000 --> 01:01:29,839
focus because it's operators who are

1498
01:01:29,839 --> 01:01:32,160
probably really engaged with this

1499
01:01:32,160 --> 01:01:36,000
yeah so iepg as well

1500
01:01:36,839 --> 01:01:38,400
and

1501
01:01:38,400 --> 01:01:40,799
was that bob's comment yes

1502
01:01:40,799 --> 01:01:43,119
as far as we know right please go ahead

1503
01:01:43,119 --> 01:01:45,839
now this is to be uh two key questions

1504
01:01:45,839 --> 01:01:48,079
one is uh you mentioned that there may

1505
01:01:48,079 --> 01:01:49,839
be an operator survey

1506
01:01:49,839 --> 01:01:52,559
will that uh will that happen

1507
01:01:52,559 --> 01:01:54,480
and the second one is that when the

1508
01:01:54,480 --> 01:01:56,400
recommendation will come will the

1509
01:01:56,400 --> 01:01:58,960
recommendation will come to tsbg

1510
01:01:58,960 --> 01:02:01,440
or somewhere else

1511
01:02:01,440 --> 01:02:03,280
easy questions to answer thanks ever so

1512
01:02:03,280 --> 01:02:04,640
much for asking

1513
01:02:04,640 --> 01:02:07,359
we can launch an operator survey we

1514
01:02:07,359 --> 01:02:10,640
would have to do that of course with um

1515
01:02:10,640 --> 01:02:12,319
the ops area because it's an operator

1516
01:02:12,319 --> 01:02:14,960
survey and i think operator service have

1517
01:02:14,960 --> 01:02:16,960
worked quite well in that area so we

1518
01:02:16,960 --> 01:02:19,760
might try that i will speak to warren

1519
01:02:19,760 --> 01:02:21,520
and yes the recommendation will come

1520
01:02:21,520 --> 01:02:24,079
from this working group but clearly this

1521
01:02:24,079 --> 01:02:26,000
is something that is

1522
01:02:26,000 --> 01:02:28,160
a fairly substantial change to the way

1523
01:02:28,160 --> 01:02:30,160
the internet routers work and the way we

1524
01:02:30,160 --> 01:02:31,920
operate them so other groups would have

1525
01:02:31,920 --> 01:02:33,200
to be involved if we change the

1526
01:02:33,200 --> 01:02:35,839
recommendations which is kind of why i'm

1527
01:02:35,839 --> 01:02:37,520
leaning towards separating the two

1528
01:02:37,520 --> 01:02:39,520
discussions into here's the information

1529
01:02:39,520 --> 01:02:41,119
on what we have and how we register

1530
01:02:41,119 --> 01:02:44,000
things and here's any new considerations

1531
01:02:44,000 --> 01:02:46,160
that we have out of it as a standards

1532
01:02:46,160 --> 01:02:47,839
track document which we'll have to go

1533
01:02:47,839 --> 01:02:50,000
around the ietf with

1534
01:02:50,000 --> 01:02:51,920
okay this is a working group to discuss

1535
01:02:51,920 --> 01:02:54,480
this that's that's very good so i think

1536
01:02:54,480 --> 01:02:56,240
i heard you also mentioned that that

1537
01:02:56,240 --> 01:02:58,640
recommendation possibly will imply that

1538
01:02:58,640 --> 01:03:00,720
to look at deep server architecture am i

1539
01:03:00,720 --> 01:03:02,880
correct

1540
01:03:02,880 --> 01:03:06,640
it it looks like it might because the

1541
01:03:06,640 --> 01:03:08,160
current diffserv architecture is all

1542
01:03:08,160 --> 01:03:10,799
recommended it was put in place about 20

1543
01:03:10,799 --> 01:03:12,799
years ago to make something work when

1544
01:03:12,799 --> 01:03:14,720
nothing worked now we have things

1545
01:03:14,720 --> 01:03:16,400
working we might be able to change that

1546
01:03:16,400 --> 01:03:17,599
a little bit

1547
01:03:17,599 --> 01:03:19,200
however if it's working well we might

1548
01:03:19,200 --> 01:03:21,280
want to make small changes

1549
01:03:21,280 --> 01:03:23,599
thanks

1550
01:03:24,319 --> 01:03:26,799
thank you sebia

1551
01:03:26,799 --> 01:03:30,200
final questions

1552
01:03:33,039 --> 01:03:33,920
great

1553
01:03:33,920 --> 01:03:37,520
keep going jake please talk

1554
01:03:38,079 --> 01:03:41,520
yeah i want to echo martin's uh this was

1555
01:03:41,520 --> 01:03:43,520
really good i felt like i learned a ton

1556
01:03:43,520 --> 01:03:45,839
in 10 minutes and i would encourage you

1557
01:03:45,839 --> 01:03:48,160
to also take this to maprg

1558
01:03:48,160 --> 01:03:50,240
as a measurement presentation there i

1559
01:03:50,240 --> 01:03:51,920
think you would

1560
01:03:51,920 --> 01:03:54,079
not only the operator community but i i

1561
01:03:54,079 --> 01:03:56,720
suspect uh many others in the ietf

1562
01:03:56,720 --> 01:03:58,480
community and the

1563
01:03:58,480 --> 01:03:59,599
associated

1564
01:03:59,599 --> 01:04:01,359
research communities would

1565
01:04:01,359 --> 01:04:03,039
benefit from understanding these

1566
01:04:03,039 --> 01:04:04,880
observations thank you

1567
01:04:04,880 --> 01:04:06,720
thank you thanks jake like i'm gonna

1568
01:04:06,720 --> 01:04:10,839
have a very busy next idf

1569
01:04:12,000 --> 01:04:13,920
thank you anna i think um you've had

1570
01:04:13,920 --> 01:04:15,359
enough invitations for the moment for

1571
01:04:15,359 --> 01:04:17,119
doing more work please do some more work

1572
01:04:17,119 --> 01:04:19,680
and come back

1573
01:04:21,599 --> 01:04:22,960
and

1574
01:04:22,960 --> 01:04:25,039
with that and i do encourage us to use

1575
01:04:25,039 --> 01:04:26,400
the mailing list

1576
01:04:26,400 --> 01:04:29,039
and we will move forward with the next

1577
01:04:29,039 --> 01:04:31,280
draft which is one

1578
01:04:31,280 --> 01:04:32,960
which i think greg will present remotely

1579
01:04:32,960 --> 01:04:35,920
greg are you online

1580
01:04:39,280 --> 01:04:41,200
just want to

1581
01:04:41,200 --> 01:04:43,680
excellent

1582
01:04:44,480 --> 01:04:48,400
please speak to your slides

1583
01:04:48,559 --> 01:04:50,559
all right um

1584
01:04:50,559 --> 01:04:52,160
thank you um you can go on to the next

1585
01:04:52,160 --> 01:04:55,280
slide this is a brief update

1586
01:04:55,280 --> 01:04:57,760
for the nqb draft obviously

1587
01:04:57,760 --> 01:04:59,359
some discussion

1588
01:04:59,359 --> 01:05:02,960
around code point assignments

1589
01:05:02,960 --> 01:05:05,599
will continue on the mailing list

1590
01:05:05,599 --> 01:05:07,599
but

1591
01:05:07,599 --> 01:05:09,920
here just wanted to cover the uh edits

1592
01:05:09,920 --> 01:05:11,520
that were made in the draft

1593
01:05:11,520 --> 01:05:14,400
recently and i did do a presentation at

1594
01:05:14,400 --> 01:05:16,880
the interim um

1595
01:05:16,880 --> 01:05:19,280
uh a short time ago

1596
01:05:19,280 --> 01:05:20,839
so

1597
01:05:20,839 --> 01:05:24,240
um a lot of time has passed since then

1598
01:05:24,240 --> 01:05:26,640
but uh one update the draft has been

1599
01:05:26,640 --> 01:05:28,400
made this graph 10.

1600
01:05:28,400 --> 01:05:29,359
um

1601
01:05:29,359 --> 01:05:32,319
and i can on the next slide i i did send

1602
01:05:32,319 --> 01:05:33,440
a list

1603
01:05:33,440 --> 01:05:35,920
of the edits to the mailing list um this

1604
01:05:35,920 --> 01:05:38,480
is verbatim what i i sent

1605
01:05:38,480 --> 01:05:40,960
um next slide has a little bit better

1606
01:05:40,960 --> 01:05:42,480
breakdown

1607
01:05:42,480 --> 01:05:43,760
uh of

1608
01:05:43,760 --> 01:05:44,559
what

1609
01:05:44,559 --> 01:05:47,599
the changes uh really amount to

1610
01:05:47,599 --> 01:05:48,480
um

1611
01:05:48,480 --> 01:05:50,160
this version here is instead of going

1612
01:05:50,160 --> 01:05:52,000
section by section in the document but

1613
01:05:52,000 --> 01:05:53,680
if you want my next slide really

1614
01:05:53,680 --> 01:05:56,559
summarizes what the uh

1615
01:05:56,559 --> 01:05:58,000
the changes were

1616
01:05:58,000 --> 01:06:01,440
first one is um the section in

1617
01:06:01,440 --> 01:06:04,720
uh the graph that talks about what types

1618
01:06:04,720 --> 01:06:06,799
of senders are

1619
01:06:06,799 --> 01:06:09,839
compatible with the nqb marking and and

1620
01:06:09,839 --> 01:06:11,760
would be recommended to mark

1621
01:06:11,760 --> 01:06:14,000
their traffic as nqb

1622
01:06:14,000 --> 01:06:16,960
in particular it talks about

1623
01:06:16,960 --> 01:06:19,760
sports uh flows of sports applications

1624
01:06:19,760 --> 01:06:20,960
that are sending

1625
01:06:20,960 --> 01:06:23,039
at a relatively low rate

1626
01:06:23,039 --> 01:06:26,799
and um for those who attended the last

1627
01:06:26,799 --> 01:06:31,119
ietf uh as well as the interim note that

1628
01:06:31,119 --> 01:06:33,839
that's been a point of discussion for

1629
01:06:33,839 --> 01:06:34,799
um

1630
01:06:34,799 --> 01:06:36,720
a couple of rounds to try to get that

1631
01:06:36,720 --> 01:06:38,079
language right

1632
01:06:38,079 --> 01:06:39,200
um

1633
01:06:39,200 --> 01:06:41,760
and so hopefully we got it uh

1634
01:06:41,760 --> 01:06:44,160
right this time but encourage folks to

1635
01:06:44,160 --> 01:06:45,920
take a look at that

1636
01:06:45,920 --> 01:06:46,880
and

1637
01:06:46,880 --> 01:06:48,720
if there are further comments or

1638
01:06:48,720 --> 01:06:50,799
suggestions on refining that language i

1639
01:06:50,799 --> 01:06:53,520
certainly would appreciate hearing those

1640
01:06:53,520 --> 01:06:55,520
the second item is

1641
01:06:55,520 --> 01:06:56,720
some more discussion around the

1642
01:06:56,720 --> 01:06:58,880
rationale for the choice of the code

1643
01:06:58,880 --> 01:07:01,680
point 45

1644
01:07:01,680 --> 01:07:04,000
and this was sparked by some

1645
01:07:04,000 --> 01:07:06,920
comments i received off list

1646
01:07:06,920 --> 01:07:08,480
[Music]

1647
01:07:08,480 --> 01:07:09,280
that

1648
01:07:09,280 --> 01:07:10,880
suggested that

1649
01:07:10,880 --> 01:07:13,119
a little bit more background and

1650
01:07:13,119 --> 01:07:14,640
rationale would be helpful for

1651
01:07:14,640 --> 01:07:17,279
explaining that

1652
01:07:17,520 --> 01:07:18,880
the third item

1653
01:07:18,880 --> 01:07:21,039
um additional implication of edca

1654
01:07:21,039 --> 01:07:23,039
manipulation this was a comment on the

1655
01:07:23,039 --> 01:07:24,960
mailing list

1656
01:07:24,960 --> 01:07:25,920
that

1657
01:07:25,920 --> 01:07:27,760
pointed that

1658
01:07:27,760 --> 01:07:28,960
in the draft

1659
01:07:28,960 --> 01:07:31,760
suggests that uh one

1660
01:07:31,760 --> 01:07:35,599
approach to making legacy wi-fi networks

1661
01:07:35,599 --> 01:07:38,240
look a lot more like they're supporting

1662
01:07:38,240 --> 01:07:40,480
the nqb php

1663
01:07:40,480 --> 01:07:43,760
in other words make them support

1664
01:07:43,760 --> 01:07:45,200
at least some of the requirements of the

1665
01:07:45,200 --> 01:07:46,880
php

1666
01:07:46,880 --> 01:07:48,400
can be achieved by

1667
01:07:48,400 --> 01:07:51,280
changing the edca parameters that are

1668
01:07:51,280 --> 01:07:54,720
used for the video access category and

1669
01:07:54,720 --> 01:07:56,799
one thing the graph didn't state um

1670
01:07:56,799 --> 01:07:58,559
directly and then was commented on the

1671
01:07:58,559 --> 01:08:00,160
mailing list is that

1672
01:08:00,160 --> 01:08:02,559
well by doing that you give up

1673
01:08:02,559 --> 01:08:05,280
a priority queue so you turn a priority

1674
01:08:05,280 --> 01:08:08,319
queue into a queue that has the same

1675
01:08:08,319 --> 01:08:10,480
priority as best effort and so now

1676
01:08:10,480 --> 01:08:12,640
there's a a

1677
01:08:12,640 --> 01:08:14,160
discussion of that

1678
01:08:14,160 --> 01:08:15,599
or statement on

1679
01:08:15,599 --> 01:08:17,679
about that in the draft

1680
01:08:17,679 --> 01:08:20,799
and then uh fourth bullet um the iana

1681
01:08:20,799 --> 01:08:22,479
section um

1682
01:08:22,479 --> 01:08:24,740
so reformatted that to

1683
01:08:24,740 --> 01:08:25,920
[Music]

1684
01:08:25,920 --> 01:08:28,158
align with expectations for the

1685
01:08:28,158 --> 01:08:30,000
instructions to ayanna

1686
01:08:30,000 --> 01:08:33,600
and also per a comment at the interim

1687
01:08:33,600 --> 01:08:35,120
um gave

1688
01:08:35,120 --> 01:08:37,359
unique names for the two code points

1689
01:08:37,359 --> 01:08:39,279
forty five and five

1690
01:08:39,279 --> 01:08:40,080
um

1691
01:08:40,080 --> 01:08:43,040
names i've chosen are in qb edge and nqb

1692
01:08:43,040 --> 01:08:43,920
core

1693
01:08:43,920 --> 01:08:45,759
although it's kind of an open question

1694
01:08:45,759 --> 01:08:48,799
to the working group um are those

1695
01:08:48,799 --> 01:08:50,799
the right names

1696
01:08:50,799 --> 01:08:53,679
i think um some of the discussion about

1697
01:08:53,679 --> 01:08:54,799
um

1698
01:08:54,799 --> 01:08:57,120
you know toss precedence bleaching and

1699
01:08:57,120 --> 01:08:59,279
uh other um

1700
01:08:59,279 --> 01:09:01,600
um

1701
01:09:01,600 --> 01:09:02,640
network

1702
01:09:02,640 --> 01:09:04,880
uh effects that uh

1703
01:09:04,880 --> 01:09:06,799
that

1704
01:09:06,799 --> 01:09:08,960
remark code points

1705
01:09:08,960 --> 01:09:10,399
um

1706
01:09:10,399 --> 01:09:12,158
we might consider whether those are the

1707
01:09:12,158 --> 01:09:14,080
right names or not but i think um again

1708
01:09:14,080 --> 01:09:16,960
some some broader discussion on

1709
01:09:16,960 --> 01:09:19,198
on that hopefully to take that out

1710
01:09:19,198 --> 01:09:21,120
and then finally some editorial myths i

1711
01:09:21,120 --> 01:09:22,960
cleaned up along the way

1712
01:09:22,960 --> 01:09:24,319
and that's it for

1713
01:09:24,319 --> 01:09:26,319
the changes so far

1714
01:09:26,319 --> 01:09:28,000
at this point you know what the next

1715
01:09:28,000 --> 01:09:30,399
slide

1716
01:09:32,839 --> 01:09:35,359
really um been looking for other

1717
01:09:35,359 --> 01:09:37,359
comments or the review comments

1718
01:09:37,359 --> 01:09:39,679
um before starting working with glasgow

1719
01:09:39,679 --> 01:09:41,759
um obviously the recent comments about

1720
01:09:41,759 --> 01:09:43,520
uh a good point of time i think we need

1721
01:09:43,520 --> 01:09:44,399
to

1722
01:09:44,399 --> 01:09:46,238
include those on the mailing list before

1723
01:09:46,238 --> 01:09:47,120
taking this to working from the

1724
01:09:47,120 --> 01:09:49,040
basketball

1725
01:09:49,040 --> 01:09:51,198
looks like uh

1726
01:09:51,198 --> 01:09:54,158
glory have your hand up

1727
01:09:58,960 --> 01:10:01,199
oh gauri first talking from the floor so

1728
01:10:01,199 --> 01:10:04,080
i can stretch and get some exercise um

1729
01:10:04,080 --> 01:10:06,960
yeah thanks greg um i think the whole

1730
01:10:06,960 --> 01:10:09,840
dscp thing can be dealt with

1731
01:10:09,840 --> 01:10:11,679
and i like the ch

1732
01:10:11,679 --> 01:10:14,880
who registrate names the two registering

1733
01:10:14,880 --> 01:10:16,320
them with different names is probably

1734
01:10:16,320 --> 01:10:17,600
right

1735
01:10:17,600 --> 01:10:18,719
i

1736
01:10:18,719 --> 01:10:21,040
only wonder if we should think about

1737
01:10:21,040 --> 01:10:23,280
adding some text about why we are doing

1738
01:10:23,280 --> 01:10:25,599
this

1739
01:10:25,920 --> 01:10:29,280
and also to perhaps clarify what the

1740
01:10:29,280 --> 01:10:31,600
aggregate or law numbered in this case

1741
01:10:31,600 --> 01:10:32,480
five

1742
01:10:32,480 --> 01:10:35,440
dscp point actually means when we have

1743
01:10:35,440 --> 01:10:37,520
other assignments with other dscps in

1744
01:10:37,520 --> 01:10:40,480
the same column of anna's table

1745
01:10:40,480 --> 01:10:42,960
so these seem like things which we

1746
01:10:42,960 --> 01:10:45,520
should talk about they don't affect nqb

1747
01:10:45,520 --> 01:10:47,040
but they may affect whether we choose

1748
01:10:47,040 --> 01:10:50,239
should must may and what words we write

1749
01:10:50,239 --> 01:10:52,719
so i think that might be a useful input

1750
01:10:52,719 --> 01:10:55,440
from the floor as an individual

1751
01:10:55,440 --> 01:10:58,239
right

1752
01:10:58,239 --> 01:11:01,199
all right thanks um yeah the the

1753
01:11:01,199 --> 01:11:03,360
you know should remark or and should not

1754
01:11:03,360 --> 01:11:06,239
use uh the value 45 across interconnects

1755
01:11:06,239 --> 01:11:07,920
i think that's

1756
01:11:07,920 --> 01:11:09,360
the areas where

1757
01:11:09,360 --> 01:11:14,159
i agree that you need consensus on those

1758
01:11:14,159 --> 01:11:15,760
and

1759
01:11:15,760 --> 01:11:17,920
it does kind of get back to what is the

1760
01:11:17,920 --> 01:11:20,480
what is the end-to-end philosophy

1761
01:11:20,480 --> 01:11:23,199
for diffserv going forward

1762
01:11:23,199 --> 01:11:25,280
seems like

1763
01:11:25,280 --> 01:11:25,520
you there's

1764
01:11:25,520 --> 01:11:27,280
some view that

1765
01:11:27,280 --> 01:11:30,640
uh diffserv is by intention

1766
01:11:30,640 --> 01:11:31,520
um

1767
01:11:31,520 --> 01:11:33,840
your as specific or you know domain

1768
01:11:33,840 --> 01:11:36,560
specific um and then obviously other

1769
01:11:36,560 --> 01:11:39,199
views that uh it was ideally intended

1770
01:11:39,199 --> 01:11:42,879
for end to end use so um

1771
01:11:43,040 --> 01:11:44,400
yeah yeah

1772
01:11:44,400 --> 01:11:48,719
we have david in the queue as well david

1773
01:11:49,199 --> 01:11:52,080
there uh for for the history uh this

1774
01:11:52,080 --> 01:11:55,199
serve was trying to be both trying to

1775
01:11:55,199 --> 01:11:56,800
allow

1776
01:11:56,800 --> 01:12:00,000
individual networks to configure

1777
01:12:00,000 --> 01:12:01,760
the services that they wanted to

1778
01:12:01,760 --> 01:12:02,960
configure

1779
01:12:02,960 --> 01:12:04,480
and

1780
01:12:04,480 --> 01:12:07,280
provide opportunity for

1781
01:12:07,280 --> 01:12:11,199
end-to-end uh uh and end-to-end uh

1782
01:12:11,199 --> 01:12:13,360
services the end-to-end has not worked

1783
01:12:13,360 --> 01:12:16,400
out all that well see ana's wonderful

1784
01:12:16,400 --> 01:12:20,519
slides for the gory details

1785
01:12:24,719 --> 01:12:27,600
any other questions

1786
01:12:28,000 --> 01:12:30,719
okay maybe david do you think we're near

1787
01:12:30,719 --> 01:12:33,120
a working group last call because um it

1788
01:12:33,120 --> 01:12:35,600
seems like the frameworks clause and all

1789
01:12:35,600 --> 01:12:38,000
we have to do is pin down some new text

1790
01:12:38,000 --> 01:12:39,920
around the use of these diff chord

1791
01:12:39,920 --> 01:12:41,679
points is there anything else you think

1792
01:12:41,679 --> 01:12:43,040
needs to be considered for a working

1793
01:12:43,040 --> 01:12:45,760
group must call to start

1794
01:12:45,760 --> 01:12:49,520
i think that's about it we should also

1795
01:12:49,520 --> 01:12:52,400
have a real close look at exactly what

1796
01:12:52,400 --> 01:12:55,120
we want to call the two new code points

1797
01:12:55,120 --> 01:12:56,560
but i think that's about right and i

1798
01:12:56,560 --> 01:12:59,199
think we're close

1799
01:13:01,040 --> 01:13:04,560
comments from jonathan martin

1800
01:13:04,560 --> 01:13:06,719
this is actually from jabber sebastian

1801
01:13:06,719 --> 01:13:09,600
muller asks what is the time frame for

1802
01:13:09,600 --> 01:13:12,080
the 45 assignment

1803
01:13:12,080 --> 01:13:14,560
if nqb becomes popular and supported

1804
01:13:14,560 --> 01:13:18,719
ubiquitously keeping 45 seems not needed

1805
01:13:18,719 --> 01:13:21,600
as this is only to fudge nqb into

1806
01:13:21,600 --> 01:13:24,400
existing or future legacy wi-fi

1807
01:13:24,400 --> 01:13:27,040
deployment

1808
01:13:30,719 --> 01:13:34,880
uh what's the the time frame um

1809
01:13:34,880 --> 01:13:36,880
you know i think um the other

1810
01:13:36,880 --> 01:13:39,760
applications that uh today uh would like

1811
01:13:39,760 --> 01:13:40,880
to be

1812
01:13:40,880 --> 01:13:43,520
marking their traffic with uh nqb code

1813
01:13:43,520 --> 01:13:45,440
point there currently isn't one that's

1814
01:13:45,440 --> 01:13:46,640
formally

1815
01:13:46,640 --> 01:13:48,080
assigned

1816
01:13:48,080 --> 01:13:49,440
and so

1817
01:13:49,440 --> 01:13:52,080
application developers have had to use

1818
01:13:52,080 --> 01:13:54,800
alternate um or been suggested to use

1819
01:13:54,800 --> 01:13:57,320
alternate code points that

1820
01:13:57,320 --> 01:13:59,360
[Music]

1821
01:13:59,360 --> 01:14:01,679
they could also be classified into the

1822
01:14:01,679 --> 01:14:04,000
same or aggregate into the same

1823
01:14:04,000 --> 01:14:07,040
uh php in the enquiry php um so i think

1824
01:14:07,040 --> 01:14:09,360
that there's a demand for

1825
01:14:09,360 --> 01:14:11,679
a code point uh sooner rather than later

1826
01:14:11,679 --> 01:14:14,679
um

1827
01:14:15,199 --> 01:14:17,840
maybe part of the question here is how

1828
01:14:17,840 --> 01:14:20,320
long do we need the allocation for

1829
01:14:20,320 --> 01:14:22,000
i wondered how good your crystal ball

1830
01:14:22,000 --> 01:14:24,640
was um do you think 45 would work across

1831
01:14:24,640 --> 01:14:27,040
the internet core in five years time and

1832
01:14:27,040 --> 01:14:29,440
we don't need the five assignment or do

1833
01:14:29,440 --> 01:14:31,360
you think we need the five assignment

1834
01:14:31,360 --> 01:14:33,280
forever and we don't need 45 because all

1835
01:14:33,280 --> 01:14:35,040
the wi-fi equipment will be updated

1836
01:14:35,040 --> 01:14:37,199
within five years do we have any clue

1837
01:14:37,199 --> 01:14:40,320
about where things are going

1838
01:14:41,040 --> 01:14:43,120
how long a version of no would you like

1839
01:14:43,120 --> 01:14:44,880
to hear gory

1840
01:14:44,880 --> 01:14:46,880
well i just thought with asking the

1841
01:14:46,880 --> 01:14:48,640
question i thought the answer might be

1842
01:14:48,640 --> 01:14:50,320
no we don't have a great crystal ball

1843
01:14:50,320 --> 01:14:51,840
and this has always been a problem in

1844
01:14:51,840 --> 01:14:54,000
the itf we don't know what's going to be

1845
01:14:54,000 --> 01:14:55,840
adopted by whom we just encourage

1846
01:14:55,840 --> 01:14:56,960
adoption

1847
01:14:56,960 --> 01:14:58,560
and then maybe we have to figure out

1848
01:14:58,560 --> 01:15:01,679
this text appropriately in the way we

1849
01:15:01,679 --> 01:15:03,520
can't consider the outcomes

1850
01:15:03,520 --> 01:15:07,199
i'm jonathan do you have more follow-up

1851
01:15:07,760 --> 01:15:11,199
sebastian says uh that you have conveyed

1852
01:15:11,199 --> 01:15:15,120
the core of his question correctly

1853
01:15:15,120 --> 01:15:17,840
and i would comment that as the draft is

1854
01:15:17,840 --> 01:15:19,360
currently written

1855
01:15:19,360 --> 01:15:22,080
uh the 45 assignment is long term

1856
01:15:22,080 --> 01:15:24,320
because that's what's recommended to end

1857
01:15:24,320 --> 01:15:27,679
points uh to signal uh

1858
01:15:27,679 --> 01:15:31,560
signal use of this php

1859
01:15:39,600 --> 01:15:42,080
thank you let's have a

1860
01:15:42,080 --> 01:15:44,640
short focused set of questions greg

1861
01:15:44,640 --> 01:15:46,560
after you've done any revised

1862
01:15:46,560 --> 01:15:48,159
work i'll work with the chairs on those

1863
01:15:48,159 --> 01:15:49,520
questions and let's then try and get

1864
01:15:49,520 --> 01:15:50,800
them cleared so we can get to that

1865
01:15:50,800 --> 01:15:52,960
working group last call

1866
01:15:52,960 --> 01:15:55,840
sounds good we'll do our best to help

1867
01:15:55,840 --> 01:15:59,120
everyone else please join in

1868
01:16:00,080 --> 01:16:02,719
thank you that closes the dscp part of

1869
01:16:02,719 --> 01:16:05,120
our schedule we're a little later than

1870
01:16:05,120 --> 01:16:06,960
the agenda but i think we're still on

1871
01:16:06,960 --> 01:16:09,520
time for all presentations so

1872
01:16:09,520 --> 01:16:11,920
uh the next presentation will be by tom

1873
01:16:11,920 --> 01:16:13,600
herbert

1874
01:16:13,600 --> 01:16:15,520
uh i took the decision to have a

1875
01:16:15,520 --> 01:16:19,040
slightly longer slot for tom um so that

1876
01:16:19,040 --> 01:16:21,920
he could have a full half hour um just

1877
01:16:21,920 --> 01:16:23,600
because this is an interesting and

1878
01:16:23,600 --> 01:16:25,679
useful background particularly for udp

1879
01:16:25,679 --> 01:16:28,080
options but also for anyone who's in the

1880
01:16:28,080 --> 01:16:30,640
transport area and wants to know

1881
01:16:30,640 --> 01:16:32,400
about what is currently going on with

1882
01:16:32,400 --> 01:16:35,600
implementation of internet checksums

1883
01:16:35,600 --> 01:16:37,840
in real equipment

1884
01:16:37,840 --> 01:16:41,120
so go ahead tom tell us please

1885
01:16:41,120 --> 01:16:42,719
um thank you

1886
01:16:42,719 --> 01:16:44,719
so my name is tom herbert as corey

1887
01:16:44,719 --> 01:16:46,719
mentioned and i'm going to give a little

1888
01:16:46,719 --> 01:16:48,400
bit of presentation

1889
01:16:48,400 --> 01:16:50,480
on how we're implementing the internet

1890
01:16:50,480 --> 01:16:51,760
checksum

1891
01:16:51,760 --> 01:16:54,239
so as gore said this is um

1892
01:16:54,239 --> 01:16:56,640
kind of a relevant topic it comes up a

1893
01:16:56,640 --> 01:16:57,600
lot

1894
01:16:57,600 --> 01:17:00,000
uh udp encapsulation

1895
01:17:00,000 --> 01:17:01,679
there's a lot of discussion on that in

1896
01:17:01,679 --> 01:17:03,840
actually any encapsulation

1897
01:17:03,840 --> 01:17:06,080
but we're also seeing questions being

1898
01:17:06,080 --> 01:17:07,760
raised in

1899
01:17:07,760 --> 01:17:11,679
udp options and just yesterday

1900
01:17:11,679 --> 01:17:13,840
fred champlain's talk on

1901
01:17:13,840 --> 01:17:15,360
ib parcels

1902
01:17:15,360 --> 01:17:17,199
the topic also came up

1903
01:17:17,199 --> 01:17:19,280
so the topic is relevant because the

1904
01:17:19,280 --> 01:17:21,280
internet checks them as we know it's

1905
01:17:21,280 --> 01:17:22,800
quite pervasive

1906
01:17:22,800 --> 01:17:24,000
it's in

1907
01:17:24,000 --> 01:17:26,560
all major transport protocols udp

1908
01:17:26,560 --> 01:17:28,080
tcp

1909
01:17:28,080 --> 01:17:30,640
it's also in ipv4 and the fpv4 header

1910
01:17:30,640 --> 01:17:31,760
checksum

1911
01:17:31,760 --> 01:17:33,600
uh kind of the go to

1912
01:17:33,600 --> 01:17:35,280
validation check

1913
01:17:35,280 --> 01:17:38,159
we like it because it's really simple uh

1914
01:17:38,159 --> 01:17:40,400
easy to compute that's really just an

1915
01:17:40,400 --> 01:17:42,080
addition

1916
01:17:42,080 --> 01:17:43,840
uh it's well known that it's not the

1917
01:17:43,840 --> 01:17:46,800
strongest of verification checks

1918
01:17:46,800 --> 01:17:48,560
but the

1919
01:17:48,560 --> 01:17:49,920
thing that makes it relevant

1920
01:17:49,920 --> 01:17:52,400
particularly to the implementation

1921
01:17:52,400 --> 01:17:55,040
is it can be very costly

1922
01:17:55,040 --> 01:17:58,560
if we don't um optimize it properly

1923
01:17:58,560 --> 01:17:59,440
uh

1924
01:17:59,440 --> 01:18:01,760
computing a sum over

1925
01:18:01,760 --> 01:18:04,320
uh some field of bytes if we have to do

1926
01:18:04,320 --> 01:18:07,120
that for instance in the cpu on a tcp

1927
01:18:07,120 --> 01:18:08,080
packet

1928
01:18:08,080 --> 01:18:10,960
a large tcp packet that could easily

1929
01:18:10,960 --> 01:18:12,560
overwhelm the cpu

1930
01:18:12,560 --> 01:18:14,560
because of the per byte cost of

1931
01:18:14,560 --> 01:18:15,679
processing

1932
01:18:15,679 --> 01:18:17,440
so there's been a lot of work on the

1933
01:18:17,440 --> 01:18:20,159
implementation side to really optimize

1934
01:18:20,159 --> 01:18:21,679
this

1935
01:18:21,679 --> 01:18:24,320
and i'll touch on some of that today

1936
01:18:24,320 --> 01:18:25,920
but i think the the relevance with

1937
01:18:25,920 --> 01:18:28,719
protocols especially new one is

1938
01:18:28,719 --> 01:18:29,760
when

1939
01:18:29,760 --> 01:18:32,000
a new protocol is being developed we do

1940
01:18:32,000 --> 01:18:33,840
have to consider the implementation

1941
01:18:33,840 --> 01:18:35,679
effects uh particularly something that

1942
01:18:35,679 --> 01:18:37,840
is potentially costly

1943
01:18:37,840 --> 01:18:41,040
like the internet uh checks them

1944
01:18:41,040 --> 01:18:43,760
next leg please

1945
01:18:44,640 --> 01:18:46,800
so a little bit primer on the internet

1946
01:18:46,800 --> 01:18:49,520
checksums so they are 16 bit values

1947
01:18:49,520 --> 01:18:51,280
usually they're put into

1948
01:18:51,280 --> 01:18:53,920
a two byte field in a packet and that

1949
01:18:53,920 --> 01:18:56,080
will be used as kind of the validation

1950
01:18:56,080 --> 01:18:57,440
code

1951
01:18:57,440 --> 01:19:00,320
the algorithm is a ones complement two

1952
01:19:00,320 --> 01:19:01,520
byte sum

1953
01:19:01,520 --> 01:19:03,440
and typically this just starts from a

1954
01:19:03,440 --> 01:19:05,520
start offset in the packet

1955
01:19:05,520 --> 01:19:07,440
to the end so we're going to basically

1956
01:19:07,440 --> 01:19:10,400
sum up all the two byte words

1957
01:19:10,400 --> 01:19:12,400
in the packet from some beginning point

1958
01:19:12,400 --> 01:19:13,760
you'll see the end

1959
01:19:13,760 --> 01:19:15,360
and that gives us an answer and that

1960
01:19:15,360 --> 01:19:18,239
answer is kind of the check

1961
01:19:18,239 --> 01:19:20,719
the sender and the receiver effectively

1962
01:19:20,719 --> 01:19:23,760
both perform the same algorithm

1963
01:19:23,760 --> 01:19:26,560
the sender actually sets the

1964
01:19:26,560 --> 01:19:29,840
sum such that it sums to a known value

1965
01:19:29,840 --> 01:19:31,199
in the case so the internet checks on

1966
01:19:31,199 --> 01:19:32,960
it'll be all ones

1967
01:19:32,960 --> 01:19:34,719
ffff

1968
01:19:34,719 --> 01:19:37,520
and the receiver performs the same

1969
01:19:37,520 --> 01:19:39,920
algorithm so it adds up the same bytes

1970
01:19:39,920 --> 01:19:42,239
and all it has to do is match the answer

1971
01:19:42,239 --> 01:19:45,040
to the expected answer and if it matches

1972
01:19:45,040 --> 01:19:47,440
then we assume the packet is correct

1973
01:19:47,440 --> 01:19:49,920
so as i mentioned that's using tcp udp

1974
01:19:49,920 --> 01:19:53,920
the ipv4 header checksum uh gre checksum

1975
01:19:53,920 --> 01:19:56,159
uh udp options will have

1976
01:19:56,159 --> 01:19:58,320
a checksum also

1977
01:19:58,320 --> 01:20:00,719
and it's probably used in several other

1978
01:20:00,719 --> 01:20:02,239
transport and

1979
01:20:02,239 --> 01:20:03,760
possibly even some

1980
01:20:03,760 --> 01:20:05,120
layer two protocol or layer three

1981
01:20:05,120 --> 01:20:06,719
protocols

1982
01:20:06,719 --> 01:20:09,440
next slide please

1983
01:20:10,480 --> 01:20:12,480
so the algorithm uh the specific

1984
01:20:12,480 --> 01:20:15,199
operation it's one a one's complement

1985
01:20:15,199 --> 01:20:16,880
addition

1986
01:20:16,880 --> 01:20:18,639
and the idea of one's complement

1987
01:20:18,639 --> 01:20:20,960
addition is we add two

1988
01:20:20,960 --> 01:20:24,080
binary numbers of some word size

1989
01:20:24,080 --> 01:20:26,960
uh it's normal addition uh if a carry is

1990
01:20:26,960 --> 01:20:29,280
generated though that carry is added

1991
01:20:29,280 --> 01:20:31,679
back into the result to get the final

1992
01:20:31,679 --> 01:20:32,800
answer

1993
01:20:32,800 --> 01:20:35,679
so in this example we're adding

1994
01:20:35,679 --> 01:20:40,080
210 as a byte and plus 106.

1995
01:20:40,080 --> 01:20:42,560
that does generate a carry

1996
01:20:42,560 --> 01:20:43,760
in the

1997
01:20:43,760 --> 01:20:45,840
basically the higher order bits so high

1998
01:20:45,840 --> 01:20:48,239
order bits generate the carry and all we

1999
01:20:48,239 --> 01:20:51,120
do is add the carry back in so the sum

2000
01:20:51,120 --> 01:20:56,080
in this case is 3d or 61.

2001
01:20:56,159 --> 01:20:59,559
next slide please

2002
01:21:00,159 --> 01:21:01,840
so one of the nice things about the

2003
01:21:01,840 --> 01:21:04,639
internet checksum it has a lot of

2004
01:21:04,639 --> 01:21:06,560
very nice arithmetic properties that we

2005
01:21:06,560 --> 01:21:08,000
can work with

2006
01:21:08,000 --> 01:21:10,400
um and do some optimizations and you can

2007
01:21:10,400 --> 01:21:12,639
contrast this for instance to some of

2008
01:21:12,639 --> 01:21:15,120
the stronger checksums or verification

2009
01:21:15,120 --> 01:21:18,480
codes like crc32

2010
01:21:18,480 --> 01:21:20,639
which don't have these properties and

2011
01:21:20,639 --> 01:21:22,320
actually makes them harder to compute or

2012
01:21:22,320 --> 01:21:23,920
harder to use

2013
01:21:23,920 --> 01:21:26,719
so one of the the first properties that

2014
01:21:26,719 --> 01:21:30,560
is well known and it's actually used

2015
01:21:30,560 --> 01:21:33,679
in internet checksums today

2016
01:21:33,679 --> 01:21:36,000
all ones is mathematically equivalent to

2017
01:21:36,000 --> 01:21:39,040
zero and one's complement addition so

2018
01:21:39,040 --> 01:21:40,960
for instance if we have

2019
01:21:40,960 --> 01:21:43,600
a word and we add

2020
01:21:43,600 --> 01:21:45,040
the os

2021
01:21:45,040 --> 01:21:46,400
version of that

2022
01:21:46,400 --> 01:21:48,880
that actually equals

2023
01:21:48,880 --> 01:21:50,480
the starting word

2024
01:21:50,480 --> 01:21:52,480
so it's an identity so there are

2025
01:21:52,480 --> 01:21:55,120
effectively two zeros in

2026
01:21:55,120 --> 01:21:58,320
checksum or one's complement edition

2027
01:21:58,320 --> 01:22:01,280
it's also communicative and associative

2028
01:22:01,280 --> 01:22:02,639
so we can add

2029
01:22:02,639 --> 01:22:04,960
two words we can switch the order and

2030
01:22:04,960 --> 01:22:06,480
get the same result

2031
01:22:06,480 --> 01:22:07,920
and then we can group

2032
01:22:07,920 --> 01:22:10,320
uh sums together in different

2033
01:22:10,320 --> 01:22:12,719
combinations to get the same result

2034
01:22:12,719 --> 01:22:13,600
so

2035
01:22:13,600 --> 01:22:17,760
given a set of words that we're summing

2036
01:22:17,760 --> 01:22:19,679
through one's complement addition

2037
01:22:19,679 --> 01:22:22,159
we can sum them up in any order

2038
01:22:22,159 --> 01:22:24,400
uh we can reverse them we can group them

2039
01:22:24,400 --> 01:22:26,800
together so there's a lot of options

2040
01:22:26,800 --> 01:22:28,960
there and that is going to actually be

2041
01:22:28,960 --> 01:22:30,400
quite useful

2042
01:22:30,400 --> 01:22:32,239
in some of the

2043
01:22:32,239 --> 01:22:33,360
um

2044
01:22:33,360 --> 01:22:35,199
kind of sub algorithms that we have when

2045
01:22:35,199 --> 01:22:36,840
we're manipulating

2046
01:22:36,840 --> 01:22:39,679
checksum we can also define a sub uh

2047
01:22:39,679 --> 01:22:42,400
check sub check sum subtraction

2048
01:22:42,400 --> 01:22:45,120
which is basically the not operation

2049
01:22:45,120 --> 01:22:48,960
so if we have a word and we add a do a

2050
01:22:48,960 --> 01:22:51,440
one's complement add of the not of that

2051
01:22:51,440 --> 01:22:53,840
so we flip all the bits so zero becomes

2052
01:22:53,840 --> 01:22:55,520
one one becomes zero

2053
01:22:55,520 --> 01:22:58,000
if we add those together then the sum is

2054
01:22:58,000 --> 01:23:00,719
always all ones and again that's

2055
01:23:00,719 --> 01:23:03,760
equivalent to a checksum zero value so

2056
01:23:03,760 --> 01:23:06,800
sums to basically zero

2057
01:23:06,800 --> 01:23:09,120
the other one is that check some

2058
01:23:09,120 --> 01:23:11,360
checksums of a larger word size

2059
01:23:11,360 --> 01:23:14,560
can be folded to a smaller word size

2060
01:23:14,560 --> 01:23:15,360
with

2061
01:23:15,360 --> 01:23:17,840
basically an equivalency so we can take

2062
01:23:17,840 --> 01:23:19,679
a 32-bit

2063
01:23:19,679 --> 01:23:21,840
checksum value for instance

2064
01:23:21,840 --> 01:23:24,080
and we can perform an operation

2065
01:23:24,080 --> 01:23:27,199
and make that a 16-bit checksum value

2066
01:23:27,199 --> 01:23:28,880
which is equivalent

2067
01:23:28,880 --> 01:23:30,560
of checksum

2068
01:23:30,560 --> 01:23:32,960
going from 32 to 16 bits it doesn't work

2069
01:23:32,960 --> 01:23:35,440
the other way but we can go from larger

2070
01:23:35,440 --> 01:23:37,920
word sizes to smaller word sizes

2071
01:23:37,920 --> 01:23:39,360
and i'll have an example a little bit

2072
01:23:39,360 --> 01:23:40,639
later on

2073
01:23:40,639 --> 01:23:44,400
on what the procedure for that is

2074
01:23:44,400 --> 01:23:47,638
next link

2075
01:23:49,440 --> 01:23:50,719
so the internet checks them as i

2076
01:23:50,719 --> 01:23:52,800
mentioned it's a ones complement

2077
01:23:52,800 --> 01:23:53,679
sum

2078
01:23:53,679 --> 01:23:55,920
and what we do to set it is there's a

2079
01:23:55,920 --> 01:23:57,360
start offset

2080
01:23:57,360 --> 01:23:59,520
in the packet so in the case of tcp for

2081
01:23:59,520 --> 01:24:01,040
instance this would be the first byte of

2082
01:24:01,040 --> 01:24:02,719
the ccp header

2083
01:24:02,719 --> 01:24:04,400
there's an end offset

2084
01:24:04,400 --> 01:24:06,159
typically that's the the end of the

2085
01:24:06,159 --> 01:24:07,360
packet

2086
01:24:07,360 --> 01:24:10,159
and we sum all the two byte words

2087
01:24:10,159 --> 01:24:12,320
from the first byte

2088
01:24:12,320 --> 01:24:15,280
the start offset to the end offset

2089
01:24:15,280 --> 01:24:18,320
if it's an odd number of bytes then we

2090
01:24:18,320 --> 01:24:21,840
simply add on a virtually add on a zero

2091
01:24:21,840 --> 01:24:25,040
logically out on a zero to the n

2092
01:24:25,040 --> 01:24:27,280
in some protocols for instance tcp and

2093
01:24:27,280 --> 01:24:30,000
udp there is a pseudo header so the

2094
01:24:30,000 --> 01:24:32,080
pseudo header is

2095
01:24:32,080 --> 01:24:34,560
also added in um the idea of the pseudo

2096
01:24:34,560 --> 01:24:36,239
header is to protect

2097
01:24:36,239 --> 01:24:38,480
uh bytes and fields outside of the

2098
01:24:38,480 --> 01:24:40,400
checksum coverage area so for instance a

2099
01:24:40,400 --> 01:24:42,159
pseudo header would include the ip

2100
01:24:42,159 --> 01:24:43,440
addresses

2101
01:24:43,440 --> 01:24:46,080
and the length in the case of tcp

2102
01:24:46,080 --> 01:24:47,120
checksum

2103
01:24:47,120 --> 01:24:49,280
so the pseudo header is is

2104
01:24:49,280 --> 01:24:52,400
created that's obviously standard we do

2105
01:24:52,400 --> 01:24:54,159
the ones complement sum of the pseudo

2106
01:24:54,159 --> 01:24:55,360
header

2107
01:24:55,360 --> 01:24:58,000
we add that to the ones complement sum

2108
01:24:58,000 --> 01:24:59,920
or that coverage area from the start to

2109
01:24:59,920 --> 01:25:01,360
the end offset

2110
01:25:01,360 --> 01:25:03,360
that gives us the full ones complement

2111
01:25:03,360 --> 01:25:04,239
sum

2112
01:25:04,239 --> 01:25:06,560
and then we basically take the not of

2113
01:25:06,560 --> 01:25:07,840
that

2114
01:25:07,840 --> 01:25:09,920
and that becomes the result

2115
01:25:09,920 --> 01:25:11,679
and i should have mentioned that before

2116
01:25:11,679 --> 01:25:14,080
this operation commences if the checksum

2117
01:25:14,080 --> 01:25:16,480
field is within the area that we're

2118
01:25:16,480 --> 01:25:18,239
check summing usually we'll set that to

2119
01:25:18,239 --> 01:25:20,400
zero for the purpose of compute

2120
01:25:20,400 --> 01:25:21,920
computation

2121
01:25:21,920 --> 01:25:24,639
and then once we have the result

2122
01:25:24,639 --> 01:25:27,120
which is again a summing over all of the

2123
01:25:27,120 --> 01:25:29,120
bytes that are covered

2124
01:25:29,120 --> 01:25:30,880
we take the knot of that and we set that

2125
01:25:30,880 --> 01:25:33,679
value into the checksum field

2126
01:25:33,679 --> 01:25:35,760
and then the result of that is when the

2127
01:25:35,760 --> 01:25:36,960
receiver

2128
01:25:36,960 --> 01:25:38,960
performs the same algorithm so we'll do

2129
01:25:38,960 --> 01:25:41,679
the sum from the start offset to the end

2130
01:25:41,679 --> 01:25:43,199
offset

2131
01:25:43,199 --> 01:25:45,520
and a way out in the pseudo header

2132
01:25:45,520 --> 01:25:47,120
the result will

2133
01:25:47,120 --> 01:25:49,679
the correct result would be all ones

2134
01:25:49,679 --> 01:25:52,159
fff in the case of

2135
01:25:52,159 --> 01:25:55,280
the internet 16-bit internet checks on

2136
01:25:55,280 --> 01:25:58,000
next slide please

2137
01:26:00,000 --> 01:26:01,679
so as i mentioned uh

2138
01:26:01,679 --> 01:26:03,280
that's the the

2139
01:26:03,280 --> 01:26:05,120
purpose of validation

2140
01:26:05,120 --> 01:26:08,000
so same algorithm

2141
01:26:08,000 --> 01:26:09,360
there's a pseudo header there's no

2142
01:26:09,360 --> 01:26:11,520
pseudo header like in the case of gre

2143
01:26:11,520 --> 01:26:12,719
checksum

2144
01:26:12,719 --> 01:26:14,960
then effectively just add in a zero

2145
01:26:14,960 --> 01:26:16,960
which means it's a noaa

2146
01:26:16,960 --> 01:26:19,199
and again if the result is all ones we

2147
01:26:19,199 --> 01:26:21,040
consider the checksum ballot

2148
01:26:21,040 --> 01:26:22,400
if it's not

2149
01:26:22,400 --> 01:26:25,199
then it's considered to be a corrupted

2150
01:26:25,199 --> 01:26:27,519
packet

2151
01:26:27,760 --> 01:26:30,320
next slide

2152
01:26:31,679 --> 01:26:33,840
so as i mentioned the

2153
01:26:33,840 --> 01:26:36,480
internet checksum it's computationally

2154
01:26:36,480 --> 01:26:39,199
expensive we do have to basically touch

2155
01:26:39,199 --> 01:26:40,560
every byte

2156
01:26:40,560 --> 01:26:41,920
every word

2157
01:26:41,920 --> 01:26:43,600
of a packet in the case of something

2158
01:26:43,600 --> 01:26:46,159
like tcp or udp checksum so there is a

2159
01:26:46,159 --> 01:26:48,320
lot of motivation to optimize this and

2160
01:26:48,320 --> 01:26:50,239
over the years

2161
01:26:50,239 --> 01:26:51,840
there have been

2162
01:26:51,840 --> 01:26:54,560
has been a lot of work to do just that

2163
01:26:54,560 --> 01:26:57,360
we can actually divide this into

2164
01:26:57,360 --> 01:26:59,280
basically two areas so we have some

2165
01:26:59,280 --> 01:27:01,760
checksums that cover small amounts of

2166
01:27:01,760 --> 01:27:03,040
data

2167
01:27:03,040 --> 01:27:04,880
the best example of that is the ip

2168
01:27:04,880 --> 01:27:07,440
header checksum typically this is

2169
01:27:07,440 --> 01:27:10,320
20 bytes maybe up to 40 bytes

2170
01:27:10,320 --> 01:27:12,639
it's a very small amount of data

2171
01:27:12,639 --> 01:27:13,760
so

2172
01:27:13,760 --> 01:27:16,080
the way direction we've gone on that is

2173
01:27:16,080 --> 01:27:18,000
to have very specialized cpu

2174
01:27:18,000 --> 01:27:19,280
instructions

2175
01:27:19,280 --> 01:27:22,080
to handle um handle that case basically

2176
01:27:22,080 --> 01:27:24,080
a one's complement addition

2177
01:27:24,080 --> 01:27:26,000
uh instruction

2178
01:27:26,000 --> 01:27:27,040
the

2179
01:27:27,040 --> 01:27:30,400
other side of this is large packets uh

2180
01:27:30,400 --> 01:27:32,719
this is like payloads so this for

2181
01:27:32,719 --> 01:27:34,960
instance is the typical case of tcp and

2182
01:27:34,960 --> 01:27:37,600
udp where we're calculating the checksum

2183
01:27:37,600 --> 01:27:39,199
over the full payload which could be

2184
01:27:39,199 --> 01:27:41,440
thousands of bytes

2185
01:27:41,440 --> 01:27:42,880
in that case

2186
01:27:42,880 --> 01:27:44,800
it really warrants checksum offload this

2187
01:27:44,800 --> 01:27:46,719
is when we

2188
01:27:46,719 --> 01:27:50,320
basically have the hardware actually

2189
01:27:50,320 --> 01:27:53,040
perform the checksum on behalf of

2190
01:27:53,040 --> 01:27:54,560
the host

2191
01:27:54,560 --> 01:27:57,280
and all nick vendors for instance today

2192
01:27:57,280 --> 01:27:58,880
support some

2193
01:27:58,880 --> 01:28:00,960
variant of checksum offload

2194
01:28:00,960 --> 01:28:02,080
it's

2195
01:28:02,080 --> 01:28:04,560
heavily motivated obviously by tcp where

2196
01:28:04,560 --> 01:28:06,560
where the checksum wasn't

2197
01:28:06,560 --> 01:28:09,679
or is never optional but also udp

2198
01:28:09,679 --> 01:28:11,120
so what they've done is they have

2199
01:28:11,120 --> 01:28:14,400
optimized um the nics in a couple of

2200
01:28:14,400 --> 01:28:16,159
ways we'll get into that in a moment

2201
01:28:16,159 --> 01:28:19,040
but the upshot of this is

2202
01:28:19,040 --> 01:28:21,600
for tcp and udp checksums from a host

2203
01:28:21,600 --> 01:28:22,880
perspective

2204
01:28:22,880 --> 01:28:26,080
the nics actually do all of the work and

2205
01:28:26,080 --> 01:28:29,760
basically we completely saved the cpu um

2206
01:28:29,760 --> 01:28:31,920
it's already baked in these have been

2207
01:28:31,920 --> 01:28:35,120
around for a very long time so

2208
01:28:35,120 --> 01:28:36,800
generally

2209
01:28:36,800 --> 01:28:39,040
this sort of checks on computation is

2210
01:28:39,040 --> 01:28:40,800
not considered to be

2211
01:28:40,800 --> 01:28:42,800
a problem in terms of performance at

2212
01:28:42,800 --> 01:28:44,400
this point

2213
01:28:44,400 --> 01:28:47,040
next slide please

2214
01:28:48,639 --> 01:28:50,560
so if we look at the

2215
01:28:50,560 --> 01:28:54,000
um kind of the the naive method to write

2216
01:28:54,000 --> 01:28:57,120
a checksum algorithm in pseudocode

2217
01:28:57,120 --> 01:28:57,840
so

2218
01:28:57,840 --> 01:29:00,880
we want to do a 16-bit sum

2219
01:29:00,880 --> 01:29:02,719
and as i mentioned if the first thing we

2220
01:29:02,719 --> 01:29:04,719
want to do is check if the length is odd

2221
01:29:04,719 --> 01:29:06,960
if it is we have to add that extra byte

2222
01:29:06,960 --> 01:29:09,040
so in this case we're just literally

2223
01:29:09,040 --> 01:29:11,040
tacking on the bite and increasing the

2224
01:29:11,040 --> 01:29:12,800
length to make it even

2225
01:29:12,800 --> 01:29:15,199
and then we go over a loop and the loop

2226
01:29:15,199 --> 01:29:17,840
is going over each two bytes

2227
01:29:17,840 --> 01:29:21,040
and it performs a sum

2228
01:29:21,040 --> 01:29:23,840
of each of those two bytes each

2229
01:29:23,840 --> 01:29:26,239
so the sum on the fourth line there

2230
01:29:26,239 --> 01:29:27,760
we're just adding

2231
01:29:27,760 --> 01:29:30,080
uh every two bytes and having a running

2232
01:29:30,080 --> 01:29:32,080
sum

2233
01:29:32,080 --> 01:29:33,360
and each

2234
01:29:33,360 --> 01:29:35,280
each time we do the add we have to check

2235
01:29:35,280 --> 01:29:36,320
the carry

2236
01:29:36,320 --> 01:29:38,320
if the carry is set which is what that

2237
01:29:38,320 --> 01:29:40,080
um check is

2238
01:29:40,080 --> 01:29:43,360
uh if some 16 is greater than all ones

2239
01:29:43,360 --> 01:29:46,320
then we add the carry back in

2240
01:29:46,320 --> 01:29:49,360
and proceed to the next two words so

2241
01:29:49,360 --> 01:29:51,520
it's again a running one's complement

2242
01:29:51,520 --> 01:29:52,320
some

2243
01:29:52,320 --> 01:29:53,840
where we're basically performing a

2244
01:29:53,840 --> 01:29:56,239
normal addition of two bytes and then

2245
01:29:56,239 --> 01:29:57,600
adding in

2246
01:29:57,600 --> 01:30:00,159
uh the checksum if it if the carry or

2247
01:30:00,159 --> 01:30:02,560
add anything in the carry if it was set

2248
01:30:02,560 --> 01:30:06,040
next slide please

2249
01:30:11,920 --> 01:30:13,360
yeah so just

2250
01:30:13,360 --> 01:30:16,080
um is there any good data you know what

2251
01:30:16,080 --> 01:30:16,960
the

2252
01:30:16,960 --> 01:30:19,679
um biggest reasons are for check some

2253
01:30:19,679 --> 01:30:21,360
errors and you know what their

2254
01:30:21,360 --> 01:30:23,600
probabilities are we just kind of you

2255
01:30:23,600 --> 01:30:26,719
know the use case always escaped me from

2256
01:30:26,719 --> 01:30:28,480
the analysis

2257
01:30:28,480 --> 01:30:30,800
yes there has been a lot of work

2258
01:30:30,800 --> 01:30:33,199
on that um i think it's probably out of

2259
01:30:33,199 --> 01:30:35,120
the scope of this presentation

2260
01:30:35,120 --> 01:30:36,960
but we do know for instance that

2261
01:30:36,960 --> 01:30:39,040
checksum is susceptible

2262
01:30:39,040 --> 01:30:41,760
uh to search and combinations it will

2263
01:30:41,760 --> 01:30:44,080
detect all one byte errors

2264
01:30:44,080 --> 01:30:46,800
uh but it's possible that it can miss

2265
01:30:46,800 --> 01:30:48,639
uh or one bit errors it can it's

2266
01:30:48,639 --> 01:30:50,480
possible it can miss uh two-bit errors

2267
01:30:50,480 --> 01:30:52,960
because they can cancel out each other

2268
01:30:52,960 --> 01:30:55,360
so it's stronger than parity much weaker

2269
01:30:55,360 --> 01:30:56,880
than crc

2270
01:30:56,880 --> 01:30:59,199
um but it will it will provide some

2271
01:30:59,199 --> 01:31:00,719
validation

2272
01:31:00,719 --> 01:31:02,719
yeah i was just wondering kind of the

2273
01:31:02,719 --> 01:31:05,440
most simple answer for this is

2274
01:31:05,440 --> 01:31:07,280
what actually happens and it protects

2275
01:31:07,280 --> 01:31:09,440
against it that the kind of the

2276
01:31:09,440 --> 01:31:10,960
motivational

2277
01:31:10,960 --> 01:31:13,120
are you asking um is it memory copies or

2278
01:31:13,120 --> 01:31:16,800
dma failures or something

2279
01:31:18,719 --> 01:31:20,239
yeah that it actually does protect

2280
01:31:20,239 --> 01:31:24,799
against right so the biggest reason that

2281
01:31:25,040 --> 01:31:26,320
because you know

2282
01:31:26,320 --> 01:31:27,920
i would say

2283
01:31:27,920 --> 01:31:30,159
we very often had this discussions about

2284
01:31:30,159 --> 01:31:32,560
when can i leave away the checksum

2285
01:31:32,560 --> 01:31:35,040
remember uh gory right so when we did

2286
01:31:35,040 --> 01:31:36,800
these tunnel things and udp without

2287
01:31:36,800 --> 01:31:39,199
checksum so there was the ongoing debate

2288
01:31:39,199 --> 01:31:40,080
but

2289
01:31:40,080 --> 01:31:41,840
me coming mostly from the network side i

2290
01:31:41,840 --> 01:31:44,639
never looked into the end to end which

2291
01:31:44,639 --> 01:31:46,639
is what the expensive part is so i was

2292
01:31:46,639 --> 01:31:48,000
just curious

2293
01:31:48,000 --> 01:31:50,000
thank you i i yes i would suspect it

2294
01:31:50,000 --> 01:31:51,360
would be

2295
01:31:51,360 --> 01:31:54,800
in the network if there is an error um

2296
01:31:54,800 --> 01:31:58,560
modern computers obviously have a bunch

2297
01:31:58,560 --> 01:32:01,280
of redundancy checks and have ecc and

2298
01:32:01,280 --> 01:32:02,480
memory

2299
01:32:02,480 --> 01:32:04,639
so it's much less likely

2300
01:32:04,639 --> 01:32:06,719
network corruption is probably more

2301
01:32:06,719 --> 01:32:08,159
likely

2302
01:32:08,159 --> 01:32:10,000
um it's still

2303
01:32:10,000 --> 01:32:12,400
not not super likely

2304
01:32:12,400 --> 01:32:13,280
uh

2305
01:32:13,280 --> 01:32:14,560
as i mentioned we do know the the

2306
01:32:14,560 --> 01:32:17,199
internet checksum is is fairly weak

2307
01:32:17,199 --> 01:32:19,520
if we need strong integrity checks uh

2308
01:32:19,520 --> 01:32:21,440
for security purposes for instance then

2309
01:32:21,440 --> 01:32:23,600
we do have to use much stronger

2310
01:32:23,600 --> 01:32:24,719
um

2311
01:32:24,719 --> 01:32:26,719
much stronger things

2312
01:32:26,719 --> 01:32:29,679
uh much stronger calculations

2313
01:32:29,679 --> 01:32:30,560
it's

2314
01:32:30,560 --> 01:32:32,400
so one question that often comes up is

2315
01:32:32,400 --> 01:32:35,440
why isn't the ethernet crc sufficient

2316
01:32:35,440 --> 01:32:37,600
the main difference is the internet

2317
01:32:37,600 --> 01:32:39,600
checksum is end to end

2318
01:32:39,600 --> 01:32:42,719
so ethernet crc um does just much

2319
01:32:42,719 --> 01:32:44,239
stronger protection that's always in

2320
01:32:44,239 --> 01:32:45,440
hardware

2321
01:32:45,440 --> 01:32:47,600
um internet check somehow however is

2322
01:32:47,600 --> 01:32:50,080
much weaker there's also another value

2323
01:32:50,080 --> 01:32:51,679
to it um

2324
01:32:51,679 --> 01:32:53,120
in the case of something like udp

2325
01:32:53,120 --> 01:32:56,159
options the checksum actually can

2326
01:32:56,159 --> 01:32:58,480
be used to differentiate between

2327
01:32:58,480 --> 01:33:00,159
standard uses

2328
01:33:00,159 --> 01:33:02,719
of a byte space and non-standard use use

2329
01:33:02,719 --> 01:33:05,040
cases so a non-standard use case may

2330
01:33:05,040 --> 01:33:06,960
still be valid but it might not be what

2331
01:33:06,960 --> 01:33:08,560
we expect in the texan would actually

2332
01:33:08,560 --> 01:33:09,920
protect us there

2333
01:33:09,920 --> 01:33:11,840
a question from richard in the care not

2334
01:33:11,840 --> 01:33:13,679
not a question but an observation so

2335
01:33:13,679 --> 01:33:17,199
from my experience um with our customers

2336
01:33:17,199 --> 01:33:19,040
we have

2337
01:33:19,040 --> 01:33:21,040
checked some errors typically

2338
01:33:21,040 --> 01:33:22,880
in the order of perhaps once a year

2339
01:33:22,880 --> 01:33:25,760
across the entirety of our customer base

2340
01:33:25,760 --> 01:33:28,159
and that typically happens with a fairly

2341
01:33:28,159 --> 01:33:28,960
old

2342
01:33:28,960 --> 01:33:31,199
network gear which has not ecc protect

2343
01:33:31,199 --> 01:33:32,239
memory

2344
01:33:32,239 --> 01:33:34,320
and when basically the packet is in

2345
01:33:34,320 --> 01:33:36,560
flight and you have unprotected or

2346
01:33:36,560 --> 01:33:38,239
undetected

2347
01:33:38,239 --> 01:33:39,280
multi-bit

2348
01:33:39,280 --> 01:33:40,639
errors

2349
01:33:40,639 --> 01:33:43,679
which then show up in higher layers of

2350
01:33:43,679 --> 01:33:46,480
the protocol where you do have crcs

2351
01:33:46,480 --> 01:33:48,480
that will flag

2352
01:33:48,480 --> 01:33:52,239
a bad transport in tcp for example

2353
01:33:52,239 --> 01:33:53,760
okay

2354
01:33:53,760 --> 01:33:55,679
thanks richard um

2355
01:33:55,679 --> 01:33:59,760
tom you have about 10 minutes left

2356
01:33:59,760 --> 01:34:01,040
okay

2357
01:34:01,040 --> 01:34:02,239
um

2358
01:34:02,239 --> 01:34:04,159
so one of the optimizations the first

2359
01:34:04,159 --> 01:34:06,400
one is we can actually sum over larger

2360
01:34:06,400 --> 01:34:08,560
words as i mentioned so we can

2361
01:34:08,560 --> 01:34:10,639
do a 32-bit edition

2362
01:34:10,639 --> 01:34:11,920
and we can

2363
01:34:11,920 --> 01:34:14,320
uh translate that into 16 bits next

2364
01:34:14,320 --> 01:34:16,799
slide please

2365
01:34:17,520 --> 01:34:19,280
so in this case we could have the same

2366
01:34:19,280 --> 01:34:22,159
loop but now the

2367
01:34:22,159 --> 01:34:23,920
boundary for the loop instead of being

2368
01:34:23,920 --> 01:34:25,440
length divided by 2 becomes length

2369
01:34:25,440 --> 01:34:27,840
divided by 4. so basically if we sum

2370
01:34:27,840 --> 01:34:30,639
32-bit words instead of 16 we have the

2371
01:34:30,639 --> 01:34:33,840
number of additions so hence that's a

2372
01:34:33,840 --> 01:34:36,320
a very nice performance improvement

2373
01:34:36,320 --> 01:34:38,799
next slide

2374
01:34:40,000 --> 01:34:42,159
uh so this is uh forwarding the checksum

2375
01:34:42,159 --> 01:34:44,239
to 16 bits it's pretty straightforward

2376
01:34:44,239 --> 01:34:46,639
basically just add um if we start with

2377
01:34:46,639 --> 01:34:49,280
the 32-bit value add the high order 16

2378
01:34:49,280 --> 01:34:52,080
bits low order 16 bits uh do one com

2379
01:34:52,080 --> 01:34:53,920
once complement sum and the result is

2380
01:34:53,920 --> 01:34:56,400
basically the folded value and again

2381
01:34:56,400 --> 01:34:58,239
this falls out from the arithmetic

2382
01:34:58,239 --> 01:34:59,360
properties

2383
01:34:59,360 --> 01:35:01,119
of the checksum

2384
01:35:01,119 --> 01:35:03,839
next slide please

2385
01:35:05,280 --> 01:35:07,760
on modern cpus as i mentioned there are

2386
01:35:07,760 --> 01:35:11,119
specific instructions to do this

2387
01:35:11,119 --> 01:35:13,280
to optimize the

2388
01:35:13,280 --> 01:35:16,000
uh once complement edition in x86 for

2389
01:35:16,000 --> 01:35:19,280
instance there's an ad with carry

2390
01:35:19,280 --> 01:35:21,440
the ad instruction itself

2391
01:35:21,440 --> 01:35:25,119
sets a carry bit in a control register

2392
01:35:25,119 --> 01:35:26,560
on x86

2393
01:35:26,560 --> 01:35:28,320
and then the specialized instruction ad

2394
01:35:28,320 --> 01:35:30,719
with kerry performs an ad but then it

2395
01:35:30,719 --> 01:35:33,520
does that um check of the carry and adds

2396
01:35:33,520 --> 01:35:35,199
the result back in

2397
01:35:35,199 --> 01:35:37,679
so this is used extensively

2398
01:35:37,679 --> 01:35:39,199
in

2399
01:35:39,199 --> 01:35:40,719
networking stack for instance when we

2400
01:35:40,719 --> 01:35:42,920
want to implement the checksum over the

2401
01:35:42,920 --> 01:35:44,880
ipv4 header

2402
01:35:44,880 --> 01:35:46,880
uh this basically

2403
01:35:46,880 --> 01:35:50,480
is resolved to a few uh ads with carries

2404
01:35:50,480 --> 01:35:53,119
next slide please

2405
01:35:54,239 --> 01:35:56,560
uh so i'll briefly touch on this this is

2406
01:35:56,560 --> 01:35:59,280
actually code um to do

2407
01:35:59,280 --> 01:36:01,840
checks on the ipv4 header uh the first

2408
01:36:01,840 --> 01:36:03,760
section is actually doing eight bytes at

2409
01:36:03,760 --> 01:36:04,880
a time

2410
01:36:04,880 --> 01:36:05,679
so

2411
01:36:05,679 --> 01:36:08,400
in order to check some over 20

2412
01:36:08,400 --> 01:36:10,639
or do to check some calculation over 20

2413
01:36:10,639 --> 01:36:11,600
bytes

2414
01:36:11,600 --> 01:36:14,080
we do an eight byte add an eight byte

2415
01:36:14,080 --> 01:36:16,239
add and then a four byte uh add and all

2416
01:36:16,239 --> 01:36:18,320
those are ones complement add and at the

2417
01:36:18,320 --> 01:36:19,440
end we

2418
01:36:19,440 --> 01:36:20,560
um

2419
01:36:20,560 --> 01:36:22,239
add in the carry bit when it was

2420
01:36:22,239 --> 01:36:23,760
generated so that's what those four

2421
01:36:23,760 --> 01:36:25,679
first four instructions are doing and

2422
01:36:25,679 --> 01:36:28,080
then the rest are the operation we're

2423
01:36:28,080 --> 01:36:30,480
basically folding 16 bits down to 32

2424
01:36:30,480 --> 01:36:32,960
bits and then six uh 32 bits down to 16

2425
01:36:32,960 --> 01:36:35,119
bits

2426
01:36:35,119 --> 01:36:38,599
next slide please

2427
01:36:39,360 --> 01:36:42,000
uh so i'll touch on this briefly um

2428
01:36:42,000 --> 01:36:44,159
one of the common operations in dealing

2429
01:36:44,159 --> 01:36:48,080
with checksum is if a packet header is

2430
01:36:48,080 --> 01:36:50,159
updated for instance in nat

2431
01:36:50,159 --> 01:36:52,239
the ip addresses are updated we do not

2432
01:36:52,239 --> 01:36:53,760
want to recompute

2433
01:36:53,760 --> 01:36:55,760
the full ip checksum we don't want to

2434
01:36:55,760 --> 01:36:58,480
recompute the full tcp checksum what we

2435
01:36:58,480 --> 01:37:00,480
can actually do is is figure out what

2436
01:37:00,480 --> 01:37:03,119
the delta is meaning

2437
01:37:03,119 --> 01:37:05,679
if we add a certain value into the

2438
01:37:05,679 --> 01:37:07,280
checksum field that would basically

2439
01:37:07,280 --> 01:37:09,360
offset the change we made elsewhere in

2440
01:37:09,360 --> 01:37:10,480
the packet

2441
01:37:10,480 --> 01:37:13,920
so it's very um very common thing to do

2442
01:37:13,920 --> 01:37:16,000
and it's also very highly performant

2443
01:37:16,000 --> 01:37:17,199
because

2444
01:37:17,199 --> 01:37:19,840
we can even pre-compute in some cases

2445
01:37:19,840 --> 01:37:21,679
this addition so

2446
01:37:21,679 --> 01:37:23,920
updating the checksum for something like

2447
01:37:23,920 --> 01:37:27,679
nat may come down to one single

2448
01:37:27,679 --> 01:37:29,840
ad with carry

2449
01:37:29,840 --> 01:37:31,440
operation one single one complement

2450
01:37:31,440 --> 01:37:33,679
addition and then set the field

2451
01:37:33,679 --> 01:37:34,960
so this

2452
01:37:34,960 --> 01:37:36,400
again the arithmetic properties of

2453
01:37:36,400 --> 01:37:38,159
checksum make this highly

2454
01:37:38,159 --> 01:37:39,920
efficient in order to do things like

2455
01:37:39,920 --> 01:37:41,119
this

2456
01:37:41,119 --> 01:37:43,839
next slide please

2457
01:37:45,280 --> 01:37:47,520
so checksum offload as i mentioned

2458
01:37:47,520 --> 01:37:49,280
is very useful

2459
01:37:49,280 --> 01:37:51,119
uh to get performance when we're

2460
01:37:51,119 --> 01:37:53,440
offloading or when we're processing tcp

2461
01:37:53,440 --> 01:37:55,119
and udp checksum

2462
01:37:55,119 --> 01:37:57,040
as i mentioned all nics have this

2463
01:37:57,040 --> 01:37:59,040
there's actually two methods i'm only

2464
01:37:59,040 --> 01:38:00,880
going to touch on the the more common

2465
01:38:00,880 --> 01:38:03,199
method or at least the preferred method

2466
01:38:03,199 --> 01:38:05,040
which is what we call protocol agnostic

2467
01:38:05,040 --> 01:38:06,080
offload

2468
01:38:06,080 --> 01:38:09,040
so this is a case where the nic

2469
01:38:09,040 --> 01:38:10,639
which is network interface controller

2470
01:38:10,639 --> 01:38:12,639
that's performing the checksum

2471
01:38:12,639 --> 01:38:14,960
calculations on behalf of the host

2472
01:38:14,960 --> 01:38:16,400
does not need to know what the

2473
01:38:16,400 --> 01:38:17,520
particular

2474
01:38:17,520 --> 01:38:19,600
protocols in the packet are it can do a

2475
01:38:19,600 --> 01:38:21,600
checksum calculation both on send and

2476
01:38:21,600 --> 01:38:24,639
receive for arbitrary protocols works to

2477
01:38:24,639 --> 01:38:26,480
encapsulate checksums and we can use

2478
01:38:26,480 --> 01:38:28,159
these techniques to validate multiple

2479
01:38:28,159 --> 01:38:31,280
checksums per packet the alternative is

2480
01:38:31,280 --> 01:38:33,840
more of a legacy mode which older

2481
01:38:33,840 --> 01:38:36,480
devices did and some of the original

2482
01:38:36,480 --> 01:38:39,440
checksum offloads did this they

2483
01:38:39,440 --> 01:38:42,080
only understand certain protocols

2484
01:38:42,080 --> 01:38:43,440
and

2485
01:38:43,440 --> 01:38:45,360
can do verifications on those protocols

2486
01:38:45,360 --> 01:38:47,440
however outside of that for instance

2487
01:38:47,440 --> 01:38:49,440
introducing new encapsulation we found

2488
01:38:49,440 --> 01:38:51,520
that they basically don't work

2489
01:38:51,520 --> 01:38:54,000
so there's a strong

2490
01:38:54,000 --> 01:38:55,520
preference in the community to use

2491
01:38:55,520 --> 01:38:57,840
protocol agnostic offloads and in the

2492
01:38:57,840 --> 01:38:59,920
case of checksum

2493
01:38:59,920 --> 01:39:01,119
that is

2494
01:39:01,119 --> 01:39:02,480
really important because of

2495
01:39:02,480 --> 01:39:04,800
encapsulations and other uses of

2496
01:39:04,800 --> 01:39:08,400
checksum next slide please

2497
01:39:09,360 --> 01:39:12,480
so transmit checksum offload

2498
01:39:12,480 --> 01:39:14,239
basically this is

2499
01:39:14,239 --> 01:39:16,080
following the same procedure as a host

2500
01:39:16,080 --> 01:39:18,400
except we're going to tell the

2501
01:39:18,400 --> 01:39:21,920
um nick or the device how to do it so we

2502
01:39:21,920 --> 01:39:24,480
send the start offset the end offset and

2503
01:39:24,480 --> 01:39:26,159
a transmit descriptor you'll see the end

2504
01:39:26,159 --> 01:39:28,000
offset is the end of the packet so

2505
01:39:28,000 --> 01:39:29,840
that's kind of implicit

2506
01:39:29,840 --> 01:39:32,560
and we give the device where to put the

2507
01:39:32,560 --> 01:39:33,920
checksum

2508
01:39:33,920 --> 01:39:36,159
uh the one thing the host has to do is

2509
01:39:36,159 --> 01:39:38,880
it will kind of prime the checksum field

2510
01:39:38,880 --> 01:39:41,199
so for instance if the pseudo

2511
01:39:41,199 --> 01:39:43,760
header is involved like in case of tcp

2512
01:39:43,760 --> 01:39:45,679
the host will compute the

2513
01:39:45,679 --> 01:39:47,440
once complement some of this of the

2514
01:39:47,440 --> 01:39:48,800
pseudo header

2515
01:39:48,800 --> 01:39:49,600
and

2516
01:39:49,600 --> 01:39:51,360
knot it and then set it into the

2517
01:39:51,360 --> 01:39:52,560
checksum

2518
01:39:52,560 --> 01:39:53,440
uh

2519
01:39:53,440 --> 01:39:57,119
feel so when the device gets this um

2520
01:39:57,119 --> 01:39:59,920
packet via a transmit descriptor it

2521
01:39:59,920 --> 01:40:01,920
performs the calculation and all it does

2522
01:40:01,920 --> 01:40:03,360
is start from the

2523
01:40:03,360 --> 01:40:05,760
starting offset to the end of the packet

2524
01:40:05,760 --> 01:40:08,000
perform the ones complement some and set

2525
01:40:08,000 --> 01:40:10,239
the result in the checksum field it

2526
01:40:10,239 --> 01:40:11,360
doesn't have to worry about the pseudo

2527
01:40:11,360 --> 01:40:12,880
header because that's already been taken

2528
01:40:12,880 --> 01:40:14,560
care of by the host

2529
01:40:14,560 --> 01:40:17,280
next slide please

2530
01:40:18,080 --> 01:40:20,560
uh so i'll skip this for a day

2531
01:40:20,560 --> 01:40:22,639
that's wanted to touch on there there

2532
01:40:22,639 --> 01:40:24,639
is a way to do multiple checksums per

2533
01:40:24,639 --> 01:40:25,600
packet

2534
01:40:25,600 --> 01:40:29,360
um in particular network devices

2535
01:40:29,360 --> 01:40:31,760
uh they only have the capability to

2536
01:40:31,760 --> 01:40:34,719
offload one checksum per packet however

2537
01:40:34,719 --> 01:40:37,119
we also want to take advantage of that

2538
01:40:37,119 --> 01:40:39,040
uh tough load multiple of them like in

2539
01:40:39,040 --> 01:40:41,360
the case of udp encapsulation where the

2540
01:40:41,360 --> 01:40:42,560
udp

2541
01:40:42,560 --> 01:40:44,880
checks them may be sent the tcp checksum

2542
01:40:44,880 --> 01:40:47,360
may also be set we want to offload both

2543
01:40:47,360 --> 01:40:48,320
of those

2544
01:40:48,320 --> 01:40:50,000
there is a way to do this called local

2545
01:40:50,000 --> 01:40:52,320
checksum offload without requiring the

2546
01:40:52,320 --> 01:40:54,719
device to actually compute a checksum

2547
01:40:54,719 --> 01:40:56,320
twice

2548
01:40:56,320 --> 01:40:59,040
uh next slide

2549
01:40:59,280 --> 01:41:01,520
so receive checksum offload

2550
01:41:01,520 --> 01:41:02,719
is

2551
01:41:02,719 --> 01:41:04,400
also similar so we wanted a protocol

2552
01:41:04,400 --> 01:41:06,480
agnostic way to do that

2553
01:41:06,480 --> 01:41:08,960
what we do is we just have the device

2554
01:41:08,960 --> 01:41:11,679
calculate the ones complement sum over

2555
01:41:11,679 --> 01:41:13,040
the whole packet

2556
01:41:13,040 --> 01:41:16,159
and it will return that sum to the host

2557
01:41:16,159 --> 01:41:17,600
and then the host stack can take that

2558
01:41:17,600 --> 01:41:19,440
sum and it can manipulate it such that

2559
01:41:19,440 --> 01:41:22,560
it can derive the checksum over any

2560
01:41:22,560 --> 01:41:24,960
bytes of the packet basically the way it

2561
01:41:24,960 --> 01:41:26,239
does that is

2562
01:41:26,239 --> 01:41:28,239
as it goes through the packet it will

2563
01:41:28,239 --> 01:41:30,080
subtract to a once complement

2564
01:41:30,080 --> 01:41:32,719
subtraction of the small check sum so

2565
01:41:32,719 --> 01:41:34,639
for instance if we want to derive in

2566
01:41:34,639 --> 01:41:36,080
this case the

2567
01:41:36,080 --> 01:41:37,199
ic

2568
01:41:37,199 --> 01:41:38,800
excuse me i see sum which is the

2569
01:41:38,800 --> 01:41:41,360
checksum uh covering or actually udp

2570
01:41:41,360 --> 01:41:42,880
checksum

2571
01:41:42,880 --> 01:41:45,119
if we have the full checksum value from

2572
01:41:45,119 --> 01:41:46,960
the beginning to the end of the packet

2573
01:41:46,960 --> 01:41:49,600
what we do is we subtract out the ones

2574
01:41:49,600 --> 01:41:52,960
complement sum of the ipv6 header and in

2575
01:41:52,960 --> 01:41:54,560
this case there is a surplus area we

2576
01:41:54,560 --> 01:41:56,560
subtract that out what's left is

2577
01:41:56,560 --> 01:41:58,320
precisely the sum

2578
01:41:58,320 --> 01:42:00,719
over the udp and udp payload and then

2579
01:42:00,719 --> 01:42:02,400
the host can use that

2580
01:42:02,400 --> 01:42:04,639
to calculate the checksum so this did

2581
01:42:04,639 --> 01:42:06,080
require the host to do a couple of

2582
01:42:06,080 --> 01:42:07,679
checks on calculations but they're on

2583
01:42:07,679 --> 01:42:10,239
the small portions of the packet not the

2584
01:42:10,239 --> 01:42:11,840
big portion

2585
01:42:11,840 --> 01:42:15,480
the next slide please

2586
01:42:15,760 --> 01:42:19,040
so similarly uh to transmit we do want

2587
01:42:19,040 --> 01:42:21,520
to be able to support um offloading of

2588
01:42:21,520 --> 01:42:23,520
three checksums uh this kind of

2589
01:42:23,520 --> 01:42:25,360
naturally works on the receive side

2590
01:42:25,360 --> 01:42:26,560
because the algorithm they just

2591
01:42:26,560 --> 01:42:28,719
described so we don't need any special

2592
01:42:28,719 --> 01:42:29,760
support

2593
01:42:29,760 --> 01:42:31,920
uh from the device all we need really is

2594
01:42:31,920 --> 01:42:34,000
that that full uh checks on what we call

2595
01:42:34,000 --> 01:42:36,400
checksum complete

2596
01:42:36,400 --> 01:42:39,119
uh next way

2597
01:42:39,840 --> 01:42:42,480
so i will touch on these briefly both

2598
01:42:42,480 --> 01:42:45,119
the receive and the transmit one of the

2599
01:42:45,119 --> 01:42:46,560
things we want to do is what's called

2600
01:42:46,560 --> 01:42:49,280
gso tso and lro

2601
01:42:49,280 --> 01:42:50,639
this is where

2602
01:42:50,639 --> 01:42:52,719
we want to use larger

2603
01:42:52,719 --> 01:42:54,080
packets

2604
01:42:54,080 --> 01:42:56,159
from the stacks perspective and then

2605
01:42:56,159 --> 01:42:57,440
when we're sending we want to break

2606
01:42:57,440 --> 01:42:59,840
those uh packets into smaller mtu size

2607
01:42:59,840 --> 01:43:02,480
packets for transmit and similarly on

2608
01:43:02,480 --> 01:43:03,679
our receive

2609
01:43:03,679 --> 01:43:05,520
we want to collect together some number

2610
01:43:05,520 --> 01:43:08,159
of packets on a flow maybe make a super

2611
01:43:08,159 --> 01:43:10,719
packet and get that to the stack we get

2612
01:43:10,719 --> 01:43:12,960
a lot of advantages from this if we are

2613
01:43:12,960 --> 01:43:14,960
able to process larger packets versus

2614
01:43:14,960 --> 01:43:17,600
smaller packets so it reduces the per

2615
01:43:17,600 --> 01:43:18,560
packet

2616
01:43:18,560 --> 01:43:20,639
overhead if we can consolidate coalesce

2617
01:43:20,639 --> 01:43:22,560
packets like this we also have to

2618
01:43:22,560 --> 01:43:24,639
consider the checksum though

2619
01:43:24,639 --> 01:43:26,880
when we're both sending and receiving so

2620
01:43:26,880 --> 01:43:28,480
i don't have time to cover this today

2621
01:43:28,480 --> 01:43:30,000
but there has been a lot of work in this

2622
01:43:30,000 --> 01:43:31,040
area

2623
01:43:31,040 --> 01:43:34,719
and in fact gso and tso and lro

2624
01:43:34,719 --> 01:43:37,119
they become quite critical again for

2625
01:43:37,119 --> 01:43:38,800
performance so we do want to maintain

2626
01:43:38,800 --> 01:43:41,280
these and this is another area where the

2627
01:43:41,280 --> 01:43:43,040
checksum becomes relevant because we

2628
01:43:43,040 --> 01:43:44,639
still want to maintain

2629
01:43:44,639 --> 01:43:46,639
uh the properties of the checksum in

2630
01:43:46,639 --> 01:43:49,199
terms of performance

2631
01:43:49,199 --> 01:43:51,440
and i believe that's all i have for

2632
01:43:51,440 --> 01:43:53,760
today any questions

2633
01:43:53,760 --> 01:43:56,400
thank you we'll take questions

2634
01:43:56,400 --> 01:43:59,519
we had a few during

2635
01:44:00,000 --> 01:44:01,600
jonathan morton

2636
01:44:01,600 --> 01:44:03,360
go ahead jonathan

2637
01:44:03,360 --> 01:44:07,440
hmm more of an observation here uh the

2638
01:44:07,440 --> 01:44:11,199
checksum delta technique is very useful

2639
01:44:11,199 --> 01:44:13,440
for um

2640
01:44:13,440 --> 01:44:16,080
for updating fields in the ip header for

2641
01:44:16,080 --> 01:44:17,840
example that

2642
01:44:17,840 --> 01:44:21,520
commonly get changed on root um

2643
01:44:21,520 --> 01:44:25,040
such as the ecn field

2644
01:44:25,040 --> 01:44:26,080
um

2645
01:44:26,080 --> 01:44:28,159
there can be bugs in the these

2646
01:44:28,159 --> 01:44:32,000
implementations and these results in

2647
01:44:32,000 --> 01:44:34,320
certain packets that have been changed

2648
01:44:34,320 --> 01:44:37,360
on boot having incorrect checksums while

2649
01:44:37,360 --> 01:44:39,360
the rest are

2650
01:44:39,360 --> 01:44:41,119
correct

2651
01:44:41,119 --> 01:44:42,159
so

2652
01:44:42,159 --> 01:44:43,920
it's a useful technique

2653
01:44:43,920 --> 01:44:45,440
you just have to make sure you get it

2654
01:44:45,440 --> 01:44:47,280
right

2655
01:44:47,280 --> 01:44:49,119
otherwise you get um

2656
01:44:49,119 --> 01:44:50,960
problems that might sometimes be hard to

2657
01:44:50,960 --> 01:44:52,400
notice

2658
01:44:52,400 --> 01:44:54,080
because they um

2659
01:44:54,080 --> 01:44:56,000
an incorrect received check some looks

2660
01:44:56,000 --> 01:44:57,679
like a dropped package which has the

2661
01:44:57,679 --> 01:44:59,920
same effect on congestion control as a

2662
01:44:59,920 --> 01:45:03,800
ce mark for example

2663
01:45:06,000 --> 01:45:08,639
yes yes

2664
01:45:12,239 --> 01:45:14,480
can i put myself in the queue and just

2665
01:45:14,480 --> 01:45:17,040
ask a question tom

2666
01:45:17,040 --> 01:45:17,920
does

2667
01:45:17,920 --> 01:45:20,400
the set of changes which joe touch put

2668
01:45:20,400 --> 01:45:23,520
into udp options since the last ietf

2669
01:45:23,520 --> 01:45:25,920
meeting where we place the checksum in a

2670
01:45:25,920 --> 01:45:27,600
particular place does that make it

2671
01:45:27,600 --> 01:45:29,760
easier to the offload i

2672
01:45:29,760 --> 01:45:31,360
how how do you feel about that new

2673
01:45:31,360 --> 01:45:33,759
placement

2674
01:45:33,840 --> 01:45:35,840
um

2675
01:45:35,840 --> 01:45:37,760
the the stack will

2676
01:45:37,760 --> 01:45:39,520
basically when it creates a packet it'll

2677
01:45:39,520 --> 01:45:41,760
know where the checksum is

2678
01:45:41,760 --> 01:45:44,880
um so that's it's not super critical for

2679
01:45:44,880 --> 01:45:48,000
it to be in a fixed uh location

2680
01:45:48,000 --> 01:45:49,199
however

2681
01:45:49,199 --> 01:45:52,400
the device also may have constraints

2682
01:45:52,400 --> 01:45:55,199
so for instance um it's very likely that

2683
01:45:55,199 --> 01:45:56,880
a device when it wants to offload a

2684
01:45:56,880 --> 01:46:00,000
checksum the start offset

2685
01:46:00,000 --> 01:46:02,159
uh may have to be

2686
01:46:02,159 --> 01:46:04,159
and and both both of the offsets may

2687
01:46:04,159 --> 01:46:05,679
need to be within the header of the

2688
01:46:05,679 --> 01:46:06,719
packet

2689
01:46:06,719 --> 01:46:10,000
so all these devices really assume that

2690
01:46:10,000 --> 01:46:12,000
the checksum were offloading and the

2691
01:46:12,000 --> 01:46:14,000
field are in the header because they may

2692
01:46:14,000 --> 01:46:16,880
only have for instance a one byte offset

2693
01:46:16,880 --> 01:46:17,840
field

2694
01:46:17,840 --> 01:46:20,480
uh real estate in the transmit

2695
01:46:20,480 --> 01:46:22,239
descriptor is

2696
01:46:22,239 --> 01:46:24,800
um very costly so we can only get a few

2697
01:46:24,800 --> 01:46:27,920
bytes for this so they may use a single

2698
01:46:27,920 --> 01:46:29,199
byte

2699
01:46:29,199 --> 01:46:31,600
typically we assume that the checksum is

2700
01:46:31,600 --> 01:46:33,040
at a two byte

2701
01:46:33,040 --> 01:46:34,159
alignment

2702
01:46:34,159 --> 01:46:35,040
so

2703
01:46:35,040 --> 01:46:36,880
a 256

2704
01:46:36,880 --> 01:46:39,280
of 256 values we can double that which

2705
01:46:39,280 --> 01:46:41,920
means the checksum could be anywhere up

2706
01:46:41,920 --> 01:46:45,040
to 500 and um i guess 10 bytes into the

2707
01:46:45,040 --> 01:46:46,400
packet

2708
01:46:46,400 --> 01:46:50,400
so having it at a fixed location

2709
01:46:50,400 --> 01:46:52,960
isn't as relevant as having it make sure

2710
01:46:52,960 --> 01:46:55,600
it's aligned to an offset of two bytes

2711
01:46:55,600 --> 01:46:58,000
and try to keep it within the header of

2712
01:46:58,000 --> 01:47:00,560
the packet so that the we can put it in

2713
01:47:00,560 --> 01:47:03,119
um we can fit it into the device

2714
01:47:03,119 --> 01:47:05,840
obviously software stacks um it's not so

2715
01:47:05,840 --> 01:47:07,360
relevant

2716
01:47:07,360 --> 01:47:09,760
um there may be some instances

2717
01:47:09,760 --> 01:47:12,080
um particularly on some older systems

2718
01:47:12,080 --> 01:47:13,360
where they don't really like to do

2719
01:47:13,360 --> 01:47:15,360
unaligned operations

2720
01:47:15,360 --> 01:47:17,360
so it's very

2721
01:47:17,360 --> 01:47:20,000
basically like um i think all their

2722
01:47:20,000 --> 01:47:22,719
currently defined protocols uh the

2723
01:47:22,719 --> 01:47:23,760
checksum

2724
01:47:23,760 --> 01:47:24,719
um

2725
01:47:24,719 --> 01:47:27,199
start should always be two byte aligned

2726
01:47:27,199 --> 01:47:29,280
uh to avoid any issues with unaligned

2727
01:47:29,280 --> 01:47:30,960
operations

2728
01:47:30,960 --> 01:47:33,040
yeah and i think that alignment is

2729
01:47:33,040 --> 01:47:35,440
what's in the current draft

2730
01:47:35,440 --> 01:47:37,440
okay so yeah i noticed it was uh one

2731
01:47:37,440 --> 01:47:40,080
bite a line so i also point out there's

2732
01:47:40,080 --> 01:47:42,800
a little bit of a misnomer that i see

2733
01:47:42,800 --> 01:47:44,159
uh come up

2734
01:47:44,159 --> 01:47:46,159
um particularly

2735
01:47:46,159 --> 01:47:48,560
this is with uh in the context of udb

2736
01:47:48,560 --> 01:47:50,159
encapsulation

2737
01:47:50,159 --> 01:47:53,440
and in the context of udp options

2738
01:47:53,440 --> 01:47:54,639
when

2739
01:47:54,639 --> 01:47:56,880
someone sets the mix of checksum

2740
01:47:56,880 --> 01:47:58,960
optional

2741
01:47:58,960 --> 01:48:02,639
that is not necessarily saving

2742
01:48:02,639 --> 01:48:04,880
cycles or saving performance and in fact

2743
01:48:04,880 --> 01:48:07,119
in some cases it can be worse and the

2744
01:48:07,119 --> 01:48:09,440
reason for this is if you consider

2745
01:48:09,440 --> 01:48:12,320
something like european encapsulation

2746
01:48:12,320 --> 01:48:16,719
where rfc i think 69 35 and 6936

2747
01:48:16,719 --> 01:48:19,840
um basically allow uh checksum zero even

2748
01:48:19,840 --> 01:48:23,040
in ipv6 where ipv6 uh basically states

2749
01:48:23,040 --> 01:48:25,520
that checksum is always required

2750
01:48:25,520 --> 01:48:27,920
um in certain circumstances particularly

2751
01:48:27,920 --> 01:48:30,239
from a host point of view if someone

2752
01:48:30,239 --> 01:48:32,880
sets the checksum to zero

2753
01:48:32,880 --> 01:48:34,320
thinking that that's going to save

2754
01:48:34,320 --> 01:48:35,679
cycles

2755
01:48:35,679 --> 01:48:37,119
we may still have to compute the

2756
01:48:37,119 --> 01:48:39,199
checksum because there's an embedded tcp

2757
01:48:39,199 --> 01:48:42,080
packet and we're receiving this on say a

2758
01:48:42,080 --> 01:48:43,679
host in a virtual network that has a

2759
01:48:43,679 --> 01:48:45,920
number of vms so we still have to

2760
01:48:45,920 --> 01:48:49,280
offload that tcp checksum

2761
01:48:49,280 --> 01:48:51,119
so we're not really saving much there

2762
01:48:51,119 --> 01:48:52,239
because we have to go through all the

2763
01:48:52,239 --> 01:48:54,080
algorithms and as i pointed out we're

2764
01:48:54,080 --> 01:48:56,800
still going to get the full checksum

2765
01:48:56,800 --> 01:48:59,040
from the device anyway but the problem

2766
01:48:59,040 --> 01:49:02,239
is in some of the legacy

2767
01:49:02,239 --> 01:49:03,679
uh check some algorithms that i

2768
01:49:03,679 --> 01:49:05,280
described

2769
01:49:05,280 --> 01:49:07,280
if we set a checksum to zero and we

2770
01:49:07,280 --> 01:49:09,360
still have to offload that in our tcp

2771
01:49:09,360 --> 01:49:12,159
checksum this receiver may in fact have

2772
01:49:12,159 --> 01:49:14,239
to go through the whole checksum

2773
01:49:14,239 --> 01:49:16,639
calculation on the host which is really

2774
01:49:16,639 --> 01:49:19,920
where performance drops significantly

2775
01:49:19,920 --> 01:49:21,040
so

2776
01:49:21,040 --> 01:49:22,960
i i think the the checks the checksum

2777
01:49:22,960 --> 01:49:24,320
we've absorbed

2778
01:49:24,320 --> 01:49:26,480
uh at least on the host and the host on

2779
01:49:26,480 --> 01:49:29,840
the next stack there's very little value

2780
01:49:29,840 --> 01:49:32,480
to disabling the checksum performance

2781
01:49:32,480 --> 01:49:34,719
wise from a host perspective

2782
01:49:34,719 --> 01:49:36,159
the only reason i think that that you

2783
01:49:36,159 --> 01:49:39,520
would disable it is if the device

2784
01:49:39,520 --> 01:49:42,000
like routers which was the motivation

2785
01:49:42,000 --> 01:49:43,040
for

2786
01:49:43,040 --> 01:49:45,840
disabling checks on ipv6 if they're

2787
01:49:45,840 --> 01:49:48,400
communicating and they're terminating uh

2788
01:49:48,400 --> 01:49:50,960
udp they may not have any any hardware

2789
01:49:50,960 --> 01:49:54,000
to support checksum offload but right uh

2790
01:49:54,000 --> 01:49:56,560
disabling the checksum is hardly ever an

2791
01:49:56,560 --> 01:49:58,719
advantage from host's point of view it's

2792
01:49:58,719 --> 01:50:00,080
more likely to be a disadvantaged

2793
01:50:00,080 --> 01:50:01,520
performance wise

2794
01:50:01,520 --> 01:50:03,920
and the routers also presumably had the

2795
01:50:03,920 --> 01:50:05,360
offset problem that they couldn't see

2796
01:50:05,360 --> 01:50:06,960
deep into the packet payload when they

2797
01:50:06,960 --> 01:50:08,840
were doing

2798
01:50:08,840 --> 01:50:10,560
re-encapsulation

2799
01:50:10,560 --> 01:50:12,320
right and and

2800
01:50:12,320 --> 01:50:14,239
yeah so there's a obviously there's a

2801
01:50:14,239 --> 01:50:16,480
lot of discussion on this uh but but i

2802
01:50:16,480 --> 01:50:18,000
do want to stress this fact and i said

2803
01:50:18,000 --> 01:50:19,119
it before

2804
01:50:19,119 --> 01:50:19,840
um

2805
01:50:19,840 --> 01:50:22,800
we've absorbed it uh the cost of the udp

2806
01:50:22,800 --> 01:50:24,719
the tcp checksum

2807
01:50:24,719 --> 01:50:26,320
right that's not a current problem we

2808
01:50:26,320 --> 01:50:27,360
have

2809
01:50:27,360 --> 01:50:29,440
uh the current problem we have is when

2810
01:50:29,440 --> 01:50:31,199
new protocols are introduced how do we

2811
01:50:31,199 --> 01:50:33,520
continue to leverage those

2812
01:50:33,520 --> 01:50:35,119
and not

2813
01:50:35,119 --> 01:50:37,520
accidentally introduce some sort of

2814
01:50:37,520 --> 01:50:39,760
protocol combination where

2815
01:50:39,760 --> 01:50:42,080
we're computing checksum checksums on

2816
01:50:42,080 --> 01:50:44,400
the host and basically the performance

2817
01:50:44,400 --> 01:50:45,840
is such that

2818
01:50:45,840 --> 01:50:47,840
the the protocol the new protocol may

2819
01:50:47,840 --> 01:50:50,639
not even be viable so this is where

2820
01:50:50,639 --> 01:50:52,320
really the implementation becomes

2821
01:50:52,320 --> 01:50:54,080
critical we have to consider the

2822
01:50:54,080 --> 01:50:57,440
implementation in these new protocols

2823
01:50:57,440 --> 01:50:58,480
thank you

2824
01:50:58,480 --> 01:51:01,520
uh we'll move to joel's presentation now

2825
01:51:01,520 --> 01:51:02,639
thank you

2826
01:51:02,639 --> 01:51:05,280
thank you tom for for that oh and i'm

2827
01:51:05,280 --> 01:51:08,639
going to be joe so just

2828
01:51:08,810 --> 01:51:11,440
[Music]

2829
01:51:11,440 --> 01:51:14,480
so uh gauri fairhouse proxying as joe

2830
01:51:14,480 --> 01:51:17,920
touch on the udp options update

2831
01:51:17,920 --> 01:51:20,480
um there's just five slides and the

2832
01:51:20,480 --> 01:51:22,880
first one talks about core

2833
01:51:22,880 --> 01:51:25,599
updates between version 13 and version

2834
01:51:25,599 --> 01:51:27,040
15.

2835
01:51:27,040 --> 01:51:29,280
and the first one being the new option

2836
01:51:29,280 --> 01:51:31,760
area structure which is why we allocated

2837
01:51:31,760 --> 01:51:33,520
most of the time

2838
01:51:33,520 --> 01:51:36,880
in tsvwg to the overview by tom on what

2839
01:51:36,880 --> 01:51:39,199
what the ocs is doing which is to check

2840
01:51:39,199 --> 01:51:41,520
some that's applied in udp options over

2841
01:51:41,520 --> 01:51:44,159
the options area where it's placed and

2842
01:51:44,159 --> 01:51:45,520
how it's aligned

2843
01:51:45,520 --> 01:51:47,920
and this is now in the draft it's been

2844
01:51:47,920 --> 01:51:49,360
in for a little while

2845
01:51:49,360 --> 01:51:51,440
being revised so the text should now be

2846
01:51:51,440 --> 01:51:53,199
good please look at this if that

2847
01:51:53,199 --> 01:51:55,280
concerns you

2848
01:51:55,280 --> 01:51:56,800
joel also

2849
01:51:56,800 --> 01:52:00,000
integrated the unsafe kind and primarily

2850
01:52:00,000 --> 01:52:02,639
to do with fragmentation

2851
01:52:02,639 --> 01:52:05,679
and the fragmentation text was updated

2852
01:52:05,679 --> 01:52:08,400
request response was now required as an

2853
01:52:08,400 --> 01:52:09,760
option in other words if you're

2854
01:52:09,760 --> 01:52:12,960
implementing udp options we expect

2855
01:52:12,960 --> 01:52:14,719
that function to be part of the

2856
01:52:14,719 --> 01:52:16,800
implementation you provide

2857
01:52:16,800 --> 01:52:19,280
next slide

2858
01:52:20,639 --> 01:52:22,719
there are a few other updates

2859
01:52:22,719 --> 01:52:24,080
um

2860
01:52:24,080 --> 01:52:26,560
obviously nits we got quite a lot of

2861
01:52:26,560 --> 01:52:28,639
feedback by the working group

2862
01:52:28,639 --> 01:52:30,639
and in the working group feedback people

2863
01:52:30,639 --> 01:52:32,800
noticed little inconsistencies numbers

2864
01:52:32,800 --> 01:52:34,719
that didn't form a complete series

2865
01:52:34,719 --> 01:52:37,280
numbers that were missing

2866
01:52:37,280 --> 01:52:39,440
and a few places where we made

2867
01:52:39,440 --> 01:52:43,360
clarifications about the format

2868
01:52:43,760 --> 01:52:46,080
one of the things we did uh change in

2869
01:52:46,080 --> 01:52:48,480
the more recent versions is to decide

2870
01:52:48,480 --> 01:52:50,639
when the ocs field was optional the

2871
01:52:50,639 --> 01:52:51,920
thing that

2872
01:52:51,920 --> 01:52:53,520
tom was just talking about whether we

2873
01:52:53,520 --> 01:52:56,880
should have an optional mode to ocs

2874
01:52:56,880 --> 01:52:59,440
the conclusion come by joe reflecting

2875
01:52:59,440 --> 01:53:03,440
the current revision is that the udp

2876
01:53:03,440 --> 01:53:07,440
options checksum the rcs is only up is

2877
01:53:07,440 --> 01:53:10,239
only zeroable when the udp checksum is

2878
01:53:10,239 --> 01:53:11,679
zero

2879
01:53:11,679 --> 01:53:13,440
this means that it doesn't affect not

2880
01:53:13,440 --> 01:53:16,239
traversal and it means by default if you

2881
01:53:16,239 --> 01:53:18,560
supply udp checksum then you must have

2882
01:53:18,560 --> 01:53:21,760
an ocs checksum

2883
01:53:24,960 --> 01:53:26,960
i think the other updates are fairly

2884
01:53:26,960 --> 01:53:28,239
minor if you've been following this

2885
01:53:28,239 --> 01:53:29,280
you'll have seen that these were

2886
01:53:29,280 --> 01:53:31,440
introduced in version 15 and jules just

2887
01:53:31,440 --> 01:53:34,239
pushed version 16 which corrects this

2888
01:53:34,239 --> 01:53:37,919
and some other things so next slide

2889
01:53:38,320 --> 01:53:42,239
this is to 16 specific limits on options

2890
01:53:42,239 --> 01:53:45,280
corrected the table of contents

2891
01:53:45,280 --> 01:53:47,520
corrected a lot of the terminology as

2892
01:53:47,520 --> 01:53:49,840
you can see joe thinks this is now

2893
01:53:49,840 --> 01:53:51,599
reaching maturity

2894
01:53:51,599 --> 01:53:54,639
next slide

2895
01:53:54,639 --> 01:53:57,280
and there are a few pending updates

2896
01:53:57,280 --> 01:53:58,719
meaning that joe is going to produce a

2897
01:53:58,719 --> 01:54:01,599
new version of the document

2898
01:54:01,599 --> 01:54:03,599
i'll happily take questions on from

2899
01:54:03,599 --> 01:54:05,280
anyone who

2900
01:54:05,280 --> 01:54:08,239
wants to ask questions and see if i can

2901
01:54:08,239 --> 01:54:10,000
answer them otherwise we'll push them to

2902
01:54:10,000 --> 01:54:13,440
joe does anybody have any questions on

2903
01:54:13,440 --> 01:54:16,159
this draft

2904
01:54:17,920 --> 01:54:20,639
tom go ahead

2905
01:54:20,800 --> 01:54:22,980
so i asked this on the mailing list um

2906
01:54:22,980 --> 01:54:24,480
[Music]

2907
01:54:24,480 --> 01:54:28,719
what is this state of implementation

2908
01:54:28,719 --> 01:54:32,639
uh do we have any information on that

2909
01:54:34,800 --> 01:54:36,400
i think the question is really directed

2910
01:54:36,400 --> 01:54:39,119
to joe and the working group in general

2911
01:54:39,119 --> 01:54:40,159
um

2912
01:54:40,159 --> 01:54:42,239
we implementation experience of the

2913
01:54:42,239 --> 01:54:44,400
latest version i have not heard anything

2914
01:54:44,400 --> 01:54:46,080
discussed on the mailing list please

2915
01:54:46,080 --> 01:54:47,920
blink it there

2916
01:54:47,920 --> 01:54:51,119
the general concept of udp options was

2917
01:54:51,119 --> 01:54:53,679
that an earlier version of this was

2918
01:54:53,679 --> 01:54:57,440
implemented tom jones will speak on dplp

2919
01:54:57,440 --> 01:55:00,880
mtud and he did part of that

2920
01:55:00,880 --> 01:55:03,119
implementation work it wasn't pushed to

2921
01:55:03,119 --> 01:55:04,400
kernel it wasn't

2922
01:55:04,400 --> 01:55:06,000
reflecting the latest version of this

2923
01:55:06,000 --> 01:55:08,400
draft but it demonstrates perhaps that

2924
01:55:08,400 --> 01:55:12,159
the thing might well be implementable

2925
01:55:12,159 --> 01:55:14,880
um as in other areas we'd love an

2926
01:55:14,880 --> 01:55:16,880
activity to implement this

2927
01:55:16,880 --> 01:55:19,360
we'd love a hackathon activity to take

2928
01:55:19,360 --> 01:55:22,480
and make something out of this

2929
01:55:22,480 --> 01:55:23,760
implementation experiences would be

2930
01:55:23,760 --> 01:55:24,800
welcome

2931
01:55:24,800 --> 01:55:26,239
does that answer tomorrow do you want to

2932
01:55:26,239 --> 01:55:28,559
follow up

2933
01:55:28,960 --> 01:55:30,719
i mean

2934
01:55:30,719 --> 01:55:33,119
at this

2935
01:55:34,960 --> 01:55:38,080
excellent clashing toms that's good

2936
01:55:38,080 --> 01:55:40,239
is that the last slide

2937
01:55:40,239 --> 01:55:41,920
okay um

2938
01:55:41,920 --> 01:55:43,360
i'm going to the working group chair

2939
01:55:43,360 --> 01:55:47,480
position because i'll sit down

2940
01:55:48,719 --> 01:55:51,679
i'll just announce that when we complete

2941
01:55:51,679 --> 01:55:54,320
the revision of udp options that's

2942
01:55:54,320 --> 01:55:56,880
coming we expect the document

2943
01:55:56,880 --> 01:55:57,840
to be

2944
01:55:57,840 --> 01:55:58,960
stable

2945
01:55:58,960 --> 01:56:00,880
and at this point i've invited some

2946
01:56:00,880 --> 01:56:04,800
people to review this on behalf of tsvwg

2947
01:56:04,800 --> 01:56:06,960
tommy paulie and colin perkins have

2948
01:56:06,960 --> 01:56:10,080
agreed to look through the specification

2949
01:56:10,080 --> 01:56:12,000
and see if they can see anything from a

2950
01:56:12,000 --> 01:56:13,440
full read-through

2951
01:56:13,440 --> 01:56:15,599
as this is our first stage of review

2952
01:56:15,599 --> 01:56:18,159
this is a new transport protocol

2953
01:56:18,159 --> 01:56:20,800
we've done this same procedure for dccp

2954
01:56:20,800 --> 01:56:23,199
and sctp so we're going to get some

2955
01:56:23,199 --> 01:56:25,760
independent reviews

2956
01:56:25,760 --> 01:56:27,360
based on their output we expect a

2957
01:56:27,360 --> 01:56:29,199
further revision and then a working

2958
01:56:29,199 --> 01:56:32,080
group last call

2959
01:56:33,119 --> 01:56:36,159
please provide comments and finally tom

2960
01:56:36,159 --> 01:56:39,840
tom's going to talk about dplp mtud

2961
01:56:39,840 --> 01:56:41,119
can i have the next slide please this is

2962
01:56:41,119 --> 01:56:43,119
just our names

2963
01:56:43,119 --> 01:56:45,920
um so we have the the dprp mqtt udp

2964
01:56:45,920 --> 01:56:48,400
options document um it just provides

2965
01:56:48,400 --> 01:56:50,000
additional text on top of udp options to

2966
01:56:50,000 --> 01:56:52,239
explain how to

2967
01:56:52,239 --> 01:56:54,840
integrate the requirements to implement

2968
01:56:54,840 --> 01:56:57,360
dplpm2ds so the formats and a bit about

2969
01:56:57,360 --> 01:56:59,199
how to send packets it's a really short

2970
01:56:59,199 --> 01:57:00,560
document it'd be great if more people

2971
01:57:00,560 --> 01:57:01,840
could read it

2972
01:57:01,840 --> 01:57:02,719
um

2973
01:57:02,719 --> 01:57:04,159
since the last revision we've aligned

2974
01:57:04,159 --> 01:57:07,040
this with um joe's spec

2975
01:57:07,040 --> 01:57:09,199
a lot of this alignment has just been

2976
01:57:09,199 --> 01:57:10,800
minor updates and terminology and what

2977
01:57:10,800 --> 01:57:12,320
things are called

2978
01:57:12,320 --> 01:57:14,400
and so we changed

2979
01:57:14,400 --> 01:57:16,320
probe token to nonce value because

2980
01:57:16,320 --> 01:57:19,119
that's what the language joe went to

2981
01:57:19,119 --> 01:57:21,280
we clarified that we can't send the two

2982
01:57:21,280 --> 01:57:23,440
kinds of options more than once in each

2983
01:57:23,440 --> 01:57:24,560
datagram

2984
01:57:24,560 --> 01:57:26,239
and we've rewritten some of the text on

2985
01:57:26,239 --> 01:57:27,920
probing with data to make it easier to

2986
01:57:27,920 --> 01:57:30,000
follow uh it's a it's a small change

2987
01:57:30,000 --> 01:57:32,320
it's a really small document um we don't

2988
01:57:32,320 --> 01:57:34,159
have a ton to say right now

2989
01:57:34,159 --> 01:57:35,599
and if we go to the next slide i think

2990
01:57:35,599 --> 01:57:37,520
the most important questions there

2991
01:57:37,520 --> 01:57:39,119
we think we're finished i know we're

2992
01:57:39,119 --> 01:57:42,159
we're metered by uh udp options proper

2993
01:57:42,159 --> 01:57:44,080
but we think we're done

2994
01:57:44,080 --> 01:57:45,760
uh we'd love to get some more feedback

2995
01:57:45,760 --> 01:57:47,360
from the working group uh i actually

2996
01:57:47,360 --> 01:57:49,599
think this document could probably be

2997
01:57:49,599 --> 01:57:51,520
almost wrapped up

2998
01:57:51,520 --> 01:57:53,440
pending just minor changes from joe in

2999
01:57:53,440 --> 01:57:55,920
terminology and language and udp options

3000
01:57:55,920 --> 01:57:57,599
so what does the working group think are

3001
01:57:57,599 --> 01:57:58,719
we done

3002
01:57:58,719 --> 01:58:02,199
can we be done

3003
01:58:09,679 --> 01:58:11,920
anybody got any questions and you want

3004
01:58:11,920 --> 01:58:14,880
to comment on this one

3005
01:58:15,199 --> 01:58:16,400
go ahead

3006
01:58:16,400 --> 01:58:18,639
chris

3007
01:58:18,639 --> 01:58:21,280
yes uh mike heard um

3008
01:58:21,280 --> 01:58:23,760
i've i read the document i didn't post

3009
01:58:23,760 --> 01:58:25,360
any uh

3010
01:58:25,360 --> 01:58:27,679
comments to the mailing list because i

3011
01:58:27,679 --> 01:58:30,000
didn't have any it looks really good

3012
01:58:30,000 --> 01:58:30,880
um

3013
01:58:30,880 --> 01:58:34,080
the one question i'd have for you tom

3014
01:58:34,080 --> 01:58:35,440
and gory

3015
01:58:35,440 --> 01:58:40,000
uh would you envisage that uh the uh

3016
01:58:40,000 --> 01:58:42,000
the

3017
01:58:42,000 --> 01:58:44,239
dpf

3018
01:58:44,239 --> 01:58:45,199
the

3019
01:58:45,199 --> 01:58:49,280
dpo pmtud procedure could be implemented

3020
01:58:49,280 --> 01:58:52,239
as a shim on top of the

3021
01:58:52,239 --> 01:58:55,199
udp options rather than being

3022
01:58:55,199 --> 01:58:57,520
integrated uh into it

3023
01:58:57,520 --> 01:59:00,080
uh i asked that because that it make it

3024
01:59:00,080 --> 01:59:02,560
that makes a difference in what we want

3025
01:59:02,560 --> 01:59:05,280
to specify in the base spec for

3026
01:59:05,280 --> 01:59:06,159
uh

3027
01:59:06,159 --> 01:59:08,560
an upper layer uh interface i think

3028
01:59:08,560 --> 01:59:11,119
that's something that hasn't really

3029
01:59:11,119 --> 01:59:13,599
gotten sufficient uh attention and

3030
01:59:13,599 --> 01:59:17,840
scrutiny thank you i am not really sure

3031
01:59:17,840 --> 01:59:20,159
what the question is um

3032
01:59:20,159 --> 01:59:22,400
i think you mean i mean so if we're

3033
01:59:22,400 --> 01:59:24,719
using the the udp options to implement

3034
01:59:24,719 --> 01:59:26,239
dpl pm2d

3035
01:59:26,239 --> 01:59:27,360
then

3036
01:59:27,360 --> 01:59:29,840
it's not really a shim

3037
01:59:29,840 --> 01:59:31,280
[Music]

3038
01:59:31,280 --> 01:59:33,440
i think the the service offered to the

3039
01:59:33,440 --> 01:59:36,320
upper layer is reporting the discovered

3040
01:59:36,320 --> 01:59:37,440
value

3041
01:59:37,440 --> 01:59:40,480
turning on and off dplp m2d and maybe

3042
01:59:40,480 --> 01:59:42,719
tweaking some of the parameters

3043
01:59:42,719 --> 01:59:44,280
there's an sctp implementation of

3044
01:59:44,280 --> 01:59:47,840
dplpm2d which is experimental which has

3045
01:59:47,840 --> 01:59:48,639
um

3046
01:59:48,639 --> 01:59:50,880
sort of five parameters to it so it's a

3047
01:59:50,880 --> 01:59:52,719
really small service set

3048
01:59:52,719 --> 01:59:54,639
uh i don't really know how you would

3049
01:59:54,639 --> 01:59:56,639
shim this in it's not really a core part

3050
01:59:56,639 --> 01:59:58,560
of udp options because it is

3051
01:59:58,560 --> 02:00:00,080
protocol action rather than just the

3052
02:00:00,080 --> 02:00:02,480
wire format which is most of udp options

3053
02:00:02,480 --> 02:00:06,959
um see i'm a bit maybe you could clarify

3054
02:00:09,440 --> 02:00:11,520
first of time perhaps i'd better think

3055
02:00:11,520 --> 02:00:13,440
it think it up and put the question in

3056
02:00:13,440 --> 02:00:16,559
writing to you cool

3057
02:00:22,080 --> 02:00:24,239
i guess the church action is um this

3058
02:00:24,239 --> 02:00:26,480
document will be declared

3059
02:00:26,480 --> 02:00:28,400
finished if nobody

3060
02:00:28,400 --> 02:00:29,840
comes and

3061
02:00:29,840 --> 02:00:31,760
says that more work is needed so please

3062
02:00:31,760 --> 02:00:33,920
review please check it and

3063
02:00:33,920 --> 02:00:36,800
if i hear nothing then we will ask the

3064
02:00:36,800 --> 02:00:38,719
co-chairs to start a working group last

3065
02:00:38,719 --> 02:00:41,040
call on this although we will probably

3066
02:00:41,040 --> 02:00:43,280
keep that in synchronization with the

3067
02:00:43,280 --> 02:00:46,639
udp options based pick

3068
02:00:46,800 --> 02:00:49,440
it's 12 noon and we're at the end of the

3069
02:00:49,440 --> 02:00:50,560
meeting

3070
02:00:50,560 --> 02:00:53,280
unless anybody has a final statement i

3071
02:00:53,280 --> 02:00:55,920
will say goodbye to you

3072
02:00:55,920 --> 02:00:57,679
i will start saying goodbye now thank

3073
02:00:57,679 --> 02:01:00,320
you ever so much for attending tsvwg we

3074
02:01:00,320 --> 02:01:02,800
look forward to participation on the

3075
02:01:02,800 --> 02:01:05,119
mailing list

3076
02:01:05,119 --> 02:01:07,360
there is a side meeting occurring at 12

3077
02:01:07,360 --> 02:01:09,440
30 if you wish to join

3078
02:01:09,440 --> 02:01:10,400
and

3079
02:01:10,400 --> 02:01:12,719
look forward to seeing you in the email

3080
02:01:12,719 --> 02:01:14,080
list

3081
02:01:14,080 --> 02:01:18,080
perhaps in philadelphia bye-bye

3082
02:01:21,440 --> 02:01:25,320
happy lunch time everyone

3083
02:01:41,040 --> 02:01:44,040
flash

