1
00:00:13,360 --> 00:00:17,160
all right um

2
00:00:17,279 --> 00:00:20,400
welcome to uh privacy pass at uh ietf

3
00:00:20,400 --> 00:00:22,000
13.

4
00:00:22,000 --> 00:00:23,279
um

5
00:00:23,279 --> 00:00:26,640
this session is being recorded as usual

6
00:00:26,640 --> 00:00:29,640
um

7
00:00:30,160 --> 00:00:31,760
you're probably by this time all

8
00:00:31,760 --> 00:00:33,760
familiar with the notewell

9
00:00:33,760 --> 00:00:36,320
um if anybody isn't you can quickly get

10
00:00:36,320 --> 00:00:37,920
a refresher here or

11
00:00:37,920 --> 00:00:41,120
look it up online

12
00:00:43,440 --> 00:00:45,920
as um so for for participants in the

13
00:00:45,920 --> 00:00:48,480
room if you want to speak at the mic

14
00:00:48,480 --> 00:00:51,280
please add yourself to the queue and

15
00:00:51,280 --> 00:00:54,399
also you need to log in to the uh

16
00:00:54,399 --> 00:00:56,879
meeting using the barcode or the qr code

17
00:00:56,879 --> 00:00:57,920
up there

18
00:00:57,920 --> 00:01:00,320
so that we can get you counted on the

19
00:01:00,320 --> 00:01:01,760
blue sheets

20
00:01:01,760 --> 00:01:04,559
the attendance

21
00:01:06,400 --> 00:01:08,640
all right

22
00:01:08,640 --> 00:01:10,080
uh

23
00:01:10,080 --> 00:01:12,159
some more information about the agenda

24
00:01:12,159 --> 00:01:13,760
we don't think we need to go in there so

25
00:01:13,760 --> 00:01:16,479
for our agenda today um we do need note

26
00:01:16,479 --> 00:01:18,640
takers is there anybody who's willing to

27
00:01:18,640 --> 00:01:22,560
uh take notes in the cody md

28
00:01:23,040 --> 00:01:27,840
either online or in the room here

29
00:01:29,280 --> 00:01:32,720
let's see if i go to

30
00:01:37,439 --> 00:01:40,320
i can't quite see if anybody respond in

31
00:01:40,320 --> 00:01:42,720
chat

32
00:01:43,040 --> 00:01:46,479
okay thank you jonathan

33
00:01:49,360 --> 00:01:50,799
all right and then

34
00:01:50,799 --> 00:01:54,000
on the agenda today we have um

35
00:01:54,000 --> 00:01:56,640
looking at our adopted drafts and going

36
00:01:56,640 --> 00:01:57,680
through some of the changes that have

37
00:01:57,680 --> 00:01:58,960
been made there

38
00:01:58,960 --> 00:02:01,119
um we have a draft on

39
00:02:01,119 --> 00:02:03,520
rate limit tokens

40
00:02:03,520 --> 00:02:05,839
that

41
00:02:07,280 --> 00:02:09,199
we are

42
00:02:09,199 --> 00:02:10,878
that we may adopt so we'll have a

43
00:02:10,878 --> 00:02:13,040
presentation on that and then if we have

44
00:02:13,040 --> 00:02:16,080
time i i don't know if mark is here but

45
00:02:16,080 --> 00:02:18,000
um there's some updates to the

46
00:02:18,000 --> 00:02:19,760
centralization problem we weren't sure

47
00:02:19,760 --> 00:02:21,599
if we were going to have time for that

48
00:02:21,599 --> 00:02:24,000
presentation so i don't know if if mark

49
00:02:24,000 --> 00:02:26,080
is going to attend or not but if he is

50
00:02:26,080 --> 00:02:27,599
we can get

51
00:02:27,599 --> 00:02:30,160
get him to give us an update are there

52
00:02:30,160 --> 00:02:32,480
any other additions or modifications to

53
00:02:32,480 --> 00:02:35,119
the agenda

54
00:02:35,360 --> 00:02:38,959
or ben did i leave anything off

55
00:02:41,920 --> 00:02:45,040
awesome mark is here

56
00:02:45,040 --> 00:02:46,080
all right

57
00:02:46,080 --> 00:02:47,360
um

58
00:02:47,360 --> 00:02:49,680
we only have one hour so let's see if

59
00:02:49,680 --> 00:02:52,879
let's see how fast we can move

60
00:02:52,879 --> 00:02:55,280
all right well then let's go and get

61
00:02:55,280 --> 00:02:57,360
started with um

62
00:02:57,360 --> 00:02:59,519
the

63
00:03:00,159 --> 00:03:04,040
uh core drafts

64
00:03:08,080 --> 00:03:10,400
chris do you wanna are you gonna share

65
00:03:10,400 --> 00:03:12,239
yeah can you stop sharing

66
00:03:12,239 --> 00:03:14,319
yeah i can just do this i think that'll

67
00:03:14,319 --> 00:03:17,560
do it

68
00:03:18,959 --> 00:03:22,239
i need to thank you

69
00:03:28,310 --> 00:03:29,599
[Music]

70
00:03:29,599 --> 00:03:32,799
oh sorry

71
00:03:32,799 --> 00:03:35,120
um

72
00:03:35,200 --> 00:03:37,760
okay uh morning everyone uh afternoon

73
00:03:37,760 --> 00:03:39,760
everyone i guess um

74
00:03:39,760 --> 00:03:40,959
uh

75
00:03:40,959 --> 00:03:42,640
joseph this is just gonna be an update

76
00:03:42,640 --> 00:03:44,000
on the the two core documents the

77
00:03:44,000 --> 00:03:46,879
architecture and the um

78
00:03:46,879 --> 00:03:50,879
the authentication scheme documents

79
00:03:51,200 --> 00:03:52,959
so for the architecture the the biggest

80
00:03:52,959 --> 00:03:55,120
change that went into the last revision

81
00:03:55,120 --> 00:03:57,200
was uh

82
00:03:57,200 --> 00:03:58,640
sort of an

83
00:03:58,640 --> 00:04:00,400
exploration of deployment considerations

84
00:04:00,400 --> 00:04:02,959
for uh ways in which you would use

85
00:04:02,959 --> 00:04:04,720
privacy perhaps in practice and what the

86
00:04:04,720 --> 00:04:06,480
implications are on

87
00:04:06,480 --> 00:04:08,080
sort of the privacy posture of the

88
00:04:08,080 --> 00:04:10,400
protocol with respect to clients

89
00:04:10,400 --> 00:04:11,840
um

90
00:04:11,840 --> 00:04:13,599
we'll kind of go through

91
00:04:13,599 --> 00:04:15,200
the main highlights of those deployment

92
00:04:15,200 --> 00:04:16,798
considerations here

93
00:04:16,798 --> 00:04:18,399
and talk about next steps for the draft

94
00:04:18,399 --> 00:04:19,918
after that

95
00:04:19,918 --> 00:04:22,160
as a reminder um

96
00:04:22,160 --> 00:04:25,120
uh the the architecture uh draft since

97
00:04:25,120 --> 00:04:26,000
the

98
00:04:26,000 --> 00:04:28,000
uh as of the last meeting was sort of

99
00:04:28,000 --> 00:04:32,000
updated such that it's now split into um

100
00:04:32,000 --> 00:04:35,040
uh like two sub-protocols in which

101
00:04:35,040 --> 00:04:37,120
uh there's this this issuance protocol

102
00:04:37,120 --> 00:04:39,759
that that clients run uh with an ad

103
00:04:39,759 --> 00:04:41,919
tester and issuer for the purposes of

104
00:04:41,919 --> 00:04:44,880
acquiring tokens

105
00:04:45,440 --> 00:04:46,880
for use

106
00:04:46,880 --> 00:04:49,600
and interacting with an origin via the

107
00:04:49,600 --> 00:04:52,960
redemption protocol later on

108
00:04:52,960 --> 00:04:54,479
in the architecture document describes

109
00:04:54,479 --> 00:04:56,320
what the role of the tester is and the

110
00:04:56,320 --> 00:04:58,800
azure is in the issuance protocol as

111
00:04:58,800 --> 00:05:01,440
well as what the role of the origin is

112
00:05:01,440 --> 00:05:05,440
in the challenge and redemption protocol

113
00:05:05,440 --> 00:05:07,199
tried to orchestrate things such that

114
00:05:07,199 --> 00:05:09,120
the redemption protocol is really simple

115
00:05:09,120 --> 00:05:10,880
and lightweight

116
00:05:10,880 --> 00:05:12,479
and doesn't really put a lot of burden

117
00:05:12,479 --> 00:05:13,840
on the origin

118
00:05:13,840 --> 00:05:15,840
conversely the issuance protocol of

119
00:05:15,840 --> 00:05:17,199
course sort of encapsulates all the

120
00:05:17,199 --> 00:05:18,720
complexity of

121
00:05:18,720 --> 00:05:21,600
new token types

122
00:05:21,600 --> 00:05:22,400
and

123
00:05:22,400 --> 00:05:23,440
the

124
00:05:23,440 --> 00:05:25,840
uh i guess relevant privacy properties

125
00:05:25,840 --> 00:05:26,720
um

126
00:05:26,720 --> 00:05:30,800
of those different issuance protocols um

127
00:05:30,800 --> 00:05:33,039
and uh

128
00:05:33,039 --> 00:05:35,680
and uh yeah that's pretty much sums it

129
00:05:35,680 --> 00:05:36,960
up i guess

130
00:05:36,960 --> 00:05:38,400
um

131
00:05:38,400 --> 00:05:41,199
the the overall flow of the

132
00:05:41,199 --> 00:05:43,680
the the protocol sort of looks like this

133
00:05:43,680 --> 00:05:47,199
uh if you recall so um

134
00:05:47,199 --> 00:05:48,400
the the

135
00:05:48,400 --> 00:05:50,080
origin of the server on the right-hand

136
00:05:50,080 --> 00:05:50,960
side

137
00:05:50,960 --> 00:05:53,199
um generally would ask the client you

138
00:05:53,199 --> 00:05:56,400
know it when it wants to

139
00:05:56,400 --> 00:05:57,680
you know wants the client to present a

140
00:05:57,680 --> 00:05:58,960
token

141
00:05:58,960 --> 00:06:00,319
simply ask the client you know can you

142
00:06:00,319 --> 00:06:02,720
attest to some particular property

143
00:06:02,720 --> 00:06:04,160
and give me proof of that particular

144
00:06:04,160 --> 00:06:07,280
property via a token and then the the

145
00:06:07,280 --> 00:06:09,199
client would then go off and interact

146
00:06:09,199 --> 00:06:11,039
with the issuer and the tester through

147
00:06:11,039 --> 00:06:12,800
the issuance protocol to

148
00:06:12,800 --> 00:06:14,240
produce a token

149
00:06:14,240 --> 00:06:15,840
and then present it back to the to the

150
00:06:15,840 --> 00:06:18,000
origin and the trust relation

151
00:06:18,000 --> 00:06:19,759
such that the the server trusts the

152
00:06:19,759 --> 00:06:21,680
issuer that is issuing tokens in this

153
00:06:21,680 --> 00:06:23,360
particular arrangement and the issuer

154
00:06:23,360 --> 00:06:26,160
trusts the tester that is attesting to

155
00:06:26,160 --> 00:06:28,080
particular properties on behalf of the

156
00:06:28,080 --> 00:06:30,400
client

157
00:06:30,960 --> 00:06:32,400
and

158
00:06:32,400 --> 00:06:33,840
in the latest version architecture

159
00:06:33,840 --> 00:06:35,680
document we've introduced this this

160
00:06:35,680 --> 00:06:37,440
notion of context

161
00:06:37,440 --> 00:06:37,720
um

162
00:06:37,720 --> 00:06:38,880
[Music]

163
00:06:38,880 --> 00:06:40,240
so for example

164
00:06:40,240 --> 00:06:42,319
during the redemption protocol um

165
00:06:42,319 --> 00:06:44,400
there's a redemption context and the

166
00:06:44,400 --> 00:06:46,160
redemption context sort of encapsulates

167
00:06:46,160 --> 00:06:47,600
all the things that the origin of the

168
00:06:47,600 --> 00:06:49,919
server would see about the client

169
00:06:49,919 --> 00:06:51,280
during its interaction with the client

170
00:06:51,280 --> 00:06:53,759
for the purposes of redeeming a token so

171
00:06:53,759 --> 00:06:55,120
that might be

172
00:06:55,120 --> 00:06:57,120
the origin name itself because the

173
00:06:57,120 --> 00:06:59,039
origin as information about that

174
00:06:59,039 --> 00:07:01,039
particular redemption context

175
00:07:01,039 --> 00:07:02,960
might be the time stamp of the

176
00:07:02,960 --> 00:07:04,560
redemption event

177
00:07:04,560 --> 00:07:07,919
um might be the client ip address uh you

178
00:07:07,919 --> 00:07:10,160
know whatever information there is about

179
00:07:10,160 --> 00:07:12,400
a particular client interaction

180
00:07:12,400 --> 00:07:14,319
when redeeming a token with a particular

181
00:07:14,319 --> 00:07:16,319
server

182
00:07:16,319 --> 00:07:17,440
likewise

183
00:07:17,440 --> 00:07:19,039
there's um

184
00:07:19,039 --> 00:07:21,599
an attestation context that

185
00:07:21,599 --> 00:07:24,319
is present during the uh or

186
00:07:24,319 --> 00:07:26,080
sort of encapsulates all of the you know

187
00:07:26,080 --> 00:07:27,919
perkline information that the

188
00:07:27,919 --> 00:07:30,160
attester sees during the issuance side

189
00:07:30,160 --> 00:07:31,199
of the

190
00:07:31,199 --> 00:07:33,840
exchange side of the interaction

191
00:07:33,840 --> 00:07:36,080
um it's the exact same sort of thing so

192
00:07:36,080 --> 00:07:37,360
it's the all the information that the

193
00:07:37,360 --> 00:07:39,280
tester sees about the client including

194
00:07:39,280 --> 00:07:42,160
timestamp the event all the the client's

195
00:07:42,160 --> 00:07:43,919
ip address

196
00:07:43,919 --> 00:07:45,759
whatever other relevant metadata or

197
00:07:45,759 --> 00:07:47,440
information is

198
00:07:47,440 --> 00:07:49,120
you know representative of that

199
00:07:49,120 --> 00:07:50,240
particular

200
00:07:50,240 --> 00:07:52,639
issuance event

201
00:07:52,639 --> 00:07:54,960
if you take a step back and ask yourself

202
00:07:54,960 --> 00:07:56,240
you know what is

203
00:07:56,240 --> 00:07:58,800
at least in a deployment of privacy pass

204
00:07:58,800 --> 00:08:00,879
what is meaningful privacy

205
00:08:00,879 --> 00:08:04,800
um because uh you know uh for most uses

206
00:08:04,800 --> 00:08:06,560
of privacy pass we're trying to use it

207
00:08:06,560 --> 00:08:08,560
for uh purposes of improving client

208
00:08:08,560 --> 00:08:09,680
privacy

209
00:08:09,680 --> 00:08:10,800
mind you there are applications of

210
00:08:10,800 --> 00:08:12,720
privacy password you may not care about

211
00:08:12,720 --> 00:08:14,560
privacy

212
00:08:14,560 --> 00:08:16,720
but for this particular uh you know

213
00:08:16,720 --> 00:08:18,879
scenario uh

214
00:08:18,879 --> 00:08:20,560
we are so in

215
00:08:20,560 --> 00:08:22,879
the the meaningful privacy we claim in

216
00:08:22,879 --> 00:08:25,280
this particular setup is that there's no

217
00:08:25,280 --> 00:08:26,400
single entity

218
00:08:26,400 --> 00:08:29,599
in the system uh that can link

219
00:08:29,599 --> 00:08:31,599
per client information and per server

220
00:08:31,599 --> 00:08:33,440
information sort of across these

221
00:08:33,440 --> 00:08:35,919
contexts this attestation redemption

222
00:08:35,919 --> 00:08:37,279
context

223
00:08:37,279 --> 00:08:38,958
and of course the the way in which you

224
00:08:38,958 --> 00:08:41,120
deploy privacy pass has an implic has an

225
00:08:41,120 --> 00:08:43,919
impact on you know uh who sees what in

226
00:08:43,919 --> 00:08:45,360
the interaction

227
00:08:45,360 --> 00:08:46,640
um

228
00:08:46,640 --> 00:08:48,080
and uh

229
00:08:48,080 --> 00:08:50,560
also has an impact on sort of what the

230
00:08:50,560 --> 00:08:52,160
client has to do when it's interacting

231
00:08:52,160 --> 00:08:53,360
with these different parties in the

232
00:08:53,360 --> 00:08:56,959
system in order to achieve this goal

233
00:08:57,040 --> 00:08:59,040
so take for example what we call the

234
00:08:59,040 --> 00:09:01,279
joint deployment model which is

235
00:09:01,279 --> 00:09:02,959
basically how privacy pass is deployed

236
00:09:02,959 --> 00:09:03,839
today

237
00:09:03,839 --> 00:09:05,760
where the client interacts within a

238
00:09:05,760 --> 00:09:07,300
tester and a server

239
00:09:07,300 --> 00:09:08,480
[Music]

240
00:09:08,480 --> 00:09:11,440
for the purposes of solving captchas

241
00:09:11,440 --> 00:09:13,040
as an attestation mechanism and then

242
00:09:13,040 --> 00:09:15,839
spending tokens

243
00:09:15,839 --> 00:09:17,920
as a as a way to demonstrate that they

244
00:09:17,920 --> 00:09:20,880
solve captures at some point in the past

245
00:09:20,880 --> 00:09:22,640
in this deployment model the a tester

246
00:09:22,640 --> 00:09:25,760
and server are the same entity um

247
00:09:25,760 --> 00:09:26,560
uh

248
00:09:26,560 --> 00:09:28,560
and so they have uh basically a shared

249
00:09:28,560 --> 00:09:30,320
view of the client during both

250
00:09:30,320 --> 00:09:32,320
interactions um

251
00:09:32,320 --> 00:09:35,120
uh they share the same ip address or

252
00:09:35,120 --> 00:09:37,839
they they will they will share um

253
00:09:37,839 --> 00:09:40,320
their view of the the client during uh

254
00:09:40,320 --> 00:09:42,800
the at the capture solving process

255
00:09:42,800 --> 00:09:44,880
as well as the you know presenting the

256
00:09:44,880 --> 00:09:47,279
token or the redemption solving process

257
00:09:47,279 --> 00:09:48,720
um

258
00:09:48,720 --> 00:09:50,959
and uh as a result sort of meaningful

259
00:09:50,959 --> 00:09:52,240
privacy in this particular arrangement

260
00:09:52,240 --> 00:09:53,680
means that the client has to either

261
00:09:53,680 --> 00:09:55,120
separate itself

262
00:09:55,120 --> 00:09:58,160
um across interactions over time

263
00:09:58,160 --> 00:10:00,880
uh sort of um

264
00:10:00,880 --> 00:10:03,040
so that across different redemption

265
00:10:03,040 --> 00:10:04,640
events or across different attestation

266
00:10:04,640 --> 00:10:06,720
events it appears as sort of a different

267
00:10:06,720 --> 00:10:07,839
client

268
00:10:07,839 --> 00:10:10,720
or over space such that um and when

269
00:10:10,720 --> 00:10:12,320
interacting with the attester or the

270
00:10:12,320 --> 00:10:15,360
server it appears as a different

271
00:10:15,360 --> 00:10:17,440
client or it's sort of unlinkable with

272
00:10:17,440 --> 00:10:20,480
respect to um

273
00:10:20,480 --> 00:10:22,880
an attestation and redemption event

274
00:10:22,880 --> 00:10:25,680
so uh if you're looking at the

275
00:10:25,680 --> 00:10:27,920
time separation aspect of this

276
00:10:27,920 --> 00:10:29,200
um

277
00:10:29,200 --> 00:10:32,079
this is where things like you know um uh

278
00:10:32,079 --> 00:10:34,320
our unlinkable tokens you know sort of

279
00:10:34,320 --> 00:10:36,000
the basis of the the privacy passport

280
00:10:36,000 --> 00:10:38,160
will come into play um

281
00:10:38,160 --> 00:10:39,040
a

282
00:10:39,040 --> 00:10:40,399
you you can't

283
00:10:40,399 --> 00:10:42,560
we we use like unlikable

284
00:10:42,560 --> 00:10:44,320
tokens that are issued through like

285
00:10:44,320 --> 00:10:46,000
blind signature protocols or opr

286
00:10:46,000 --> 00:10:48,959
protocols or whatever

287
00:10:49,279 --> 00:10:51,680
such that the a tester and server can't

288
00:10:51,680 --> 00:10:53,920
link

289
00:10:54,079 --> 00:10:56,000
a particular issuance flows to a

290
00:10:56,000 --> 00:10:58,079
particular redemption flow

291
00:10:58,079 --> 00:11:01,839
or go they're sort of separated in time

292
00:11:02,079 --> 00:11:04,160
on the space separation side

293
00:11:04,160 --> 00:11:06,640
um a client would sort of separate

294
00:11:06,640 --> 00:11:08,560
itself in space by using for example a

295
00:11:08,560 --> 00:11:10,720
proxy and connecting

296
00:11:10,720 --> 00:11:12,480
to the attester or connecting to the

297
00:11:12,480 --> 00:11:14,959
server indeed in the initial motivating

298
00:11:14,959 --> 00:11:17,839
use case for privacy password um tor

299
00:11:17,839 --> 00:11:19,600
users would go

300
00:11:19,600 --> 00:11:22,560
uh and interact with the um

301
00:11:22,560 --> 00:11:25,680
uh with the you know

302
00:11:25,680 --> 00:11:27,920
users with users of tor would be you

303
00:11:27,920 --> 00:11:28,880
know

304
00:11:28,880 --> 00:11:30,399
being faced with captures over and over

305
00:11:30,399 --> 00:11:34,480
again repeatedly um being forced to um

306
00:11:34,480 --> 00:11:36,800
uh present tokens uh

307
00:11:36,800 --> 00:11:38,320
they would

308
00:11:38,320 --> 00:11:39,680
they were already sort of separating

309
00:11:39,680 --> 00:11:42,880
themselves over space um

310
00:11:42,880 --> 00:11:46,079
but you can use other proxies if

311
00:11:46,079 --> 00:11:47,600
you know reasonable for your particular

312
00:11:47,600 --> 00:11:50,399
deployment model

313
00:11:52,160 --> 00:11:55,360
uh yeah ben go ahead

314
00:11:55,360 --> 00:11:58,480
hey you said time or space here um i

315
00:11:58,480 --> 00:12:00,639
guess i would have expected time and

316
00:12:00,639 --> 00:12:02,320
space because

317
00:12:02,320 --> 00:12:04,800
uh whether i see a consistent ip address

318
00:12:04,800 --> 00:12:06,880
over a long period of time or i don't

319
00:12:06,880 --> 00:12:10,240
know your ip address but i uh but you're

320
00:12:10,240 --> 00:12:12,880
the only client who's who's uh

321
00:12:12,880 --> 00:12:14,639
requesting and using tokens in some

322
00:12:14,639 --> 00:12:16,480
short period of time it seems like

323
00:12:16,480 --> 00:12:18,079
either one of those is

324
00:12:18,079 --> 00:12:18,800
uh

325
00:12:18,800 --> 00:12:21,200
well i think um sort of implicit here is

326
00:12:21,200 --> 00:12:23,040
that you're more than one client

327
00:12:23,040 --> 00:12:24,959
interacting with the system

328
00:12:24,959 --> 00:12:26,720
um

329
00:12:26,720 --> 00:12:28,639
right otherwise like that

330
00:12:28,639 --> 00:12:30,560
none of this really holds that there's

331
00:12:30,560 --> 00:12:33,360
no really privacy to be gained

332
00:12:33,360 --> 00:12:35,040
so

333
00:12:35,040 --> 00:12:37,440
certainly if there's only one client

334
00:12:37,440 --> 00:12:39,279
that's asking for tokens and spending

335
00:12:39,279 --> 00:12:40,880
them

336
00:12:40,880 --> 00:12:43,519
doing any sort of separation

337
00:12:43,519 --> 00:12:45,040
over time or over space doesn't really

338
00:12:45,040 --> 00:12:47,599
help so

339
00:12:48,480 --> 00:12:49,839
right i mean that if you don't have

340
00:12:49,839 --> 00:12:51,920
separation over time then you're you're

341
00:12:51,920 --> 00:12:52,959
sort of

342
00:12:52,959 --> 00:12:55,040
necessarily the only client that's

343
00:12:55,040 --> 00:12:57,360
because in any sufficiently short time

344
00:12:57,360 --> 00:13:00,000
window there's only one client

345
00:13:00,000 --> 00:13:02,000
sure and that's why in this particular

346
00:13:02,000 --> 00:13:03,839
model non-interactive tokens sort of

347
00:13:03,839 --> 00:13:06,639
like are the most sensible variant

348
00:13:06,639 --> 00:13:09,040
in particular because uh spending a

349
00:13:09,040 --> 00:13:11,120
token um or

350
00:13:11,120 --> 00:13:13,519
redeeming a token does not mean that you

351
00:13:13,519 --> 00:13:15,600
like went off and fetched in real time

352
00:13:15,600 --> 00:13:17,120
it just means that at some point in the

353
00:13:17,120 --> 00:13:20,720
past you have fetched a token so um

354
00:13:20,720 --> 00:13:21,519
uh

355
00:13:21,519 --> 00:13:23,600
there's like a sort of

356
00:13:23,600 --> 00:13:26,000
a natural separation between the two

357
00:13:26,000 --> 00:13:27,600
over over time

358
00:13:27,600 --> 00:13:30,320
um whereas if this if uh

359
00:13:30,320 --> 00:13:31,510
like all of these

360
00:13:31,510 --> 00:13:33,120
[Music]

361
00:13:33,120 --> 00:13:34,639
if if

362
00:13:34,639 --> 00:13:36,639
if there were interactive tokens rather

363
00:13:36,639 --> 00:13:38,160
um

364
00:13:38,160 --> 00:13:39,519
uh then

365
00:13:39,519 --> 00:13:41,600
there would be sort of no um time

366
00:13:41,600 --> 00:13:43,839
separation and you could link

367
00:13:43,839 --> 00:13:46,839
attestation and um

368
00:13:46,839 --> 00:13:49,839
uh and redemption together uh presumably

369
00:13:49,839 --> 00:13:52,240
by like time stamper or what have you

370
00:13:52,240 --> 00:13:54,079
right it seems like you could you know

371
00:13:54,079 --> 00:13:55,760
in that context you can do that linkage

372
00:13:55,760 --> 00:13:57,600
even if you have space separation so

373
00:13:57,600 --> 00:13:59,360
it's not that you need this is why i'm

374
00:13:59,360 --> 00:14:00,880
saying it's not that you need one or the

375
00:14:00,880 --> 00:14:03,040
other it seems like you need both

376
00:14:03,040 --> 00:14:04,399
anyway i won't help

377
00:14:04,399 --> 00:14:06,959
so recall the the the meaningful privacy

378
00:14:06,959 --> 00:14:08,399
here is that you're not being you're not

379
00:14:08,399 --> 00:14:10,639
able to link per client per server

380
00:14:10,639 --> 00:14:13,120
information um so although you're able

381
00:14:13,120 --> 00:14:15,519
to like link these two events together

382
00:14:15,519 --> 00:14:18,079
presumably by the time stamp um you're

383
00:14:18,079 --> 00:14:20,240
not linking uh

384
00:14:20,240 --> 00:14:22,639
uh you're not sort of revealing any uh

385
00:14:22,639 --> 00:14:24,720
per client information by virtue of

386
00:14:24,720 --> 00:14:26,240
using um

387
00:14:26,240 --> 00:14:28,480
a sort of uh a proxy and interacting

388
00:14:28,480 --> 00:14:30,320
with the cert for the tester server in

389
00:14:30,320 --> 00:14:33,279
that particular case

390
00:14:36,639 --> 00:14:38,800
so

391
00:14:38,880 --> 00:14:42,600
yeah um

392
00:14:44,079 --> 00:14:46,240
okay moving on um

393
00:14:46,240 --> 00:14:48,560
uh there's also um there's another

394
00:14:48,560 --> 00:14:50,079
another other deployments in the in the

395
00:14:50,079 --> 00:14:51,920
draft as well uh deployment models in

396
00:14:51,920 --> 00:14:53,440
the draft as well another one uh we

397
00:14:53,440 --> 00:14:54,959
talked about is this split deployment

398
00:14:54,959 --> 00:14:57,199
model um

399
00:14:57,199 --> 00:15:00,160
and this is this is uh useful for

400
00:15:00,160 --> 00:15:01,519
different attestation mechanisms that

401
00:15:01,519 --> 00:15:03,279
are less privacy friendly

402
00:15:03,279 --> 00:15:05,839
um like say for example the client is

403
00:15:05,839 --> 00:15:08,000
demonstrating that has you know

404
00:15:08,000 --> 00:15:09,920
ownership over some specific type of

405
00:15:09,920 --> 00:15:11,199
application account and it's like

406
00:15:11,199 --> 00:15:12,639
specifically logging in with that

407
00:15:12,639 --> 00:15:13,680
account

408
00:15:13,680 --> 00:15:15,279
um

409
00:15:15,279 --> 00:15:19,199
in this particular model by

410
00:15:19,199 --> 00:15:20,880
joint we mean that the sort of the

411
00:15:20,880 --> 00:15:23,279
tester and the server are run by two

412
00:15:23,279 --> 00:15:26,399
different non-colluding entities

413
00:15:26,399 --> 00:15:28,079
and as a result they don't share the

414
00:15:28,079 --> 00:15:30,639
same context with respect to

415
00:15:30,639 --> 00:15:34,160
attestation and redemption

416
00:15:34,160 --> 00:15:36,160
and so the the sort of

417
00:15:36,160 --> 00:15:37,680
bar to meaningful privacy is kind of

418
00:15:37,680 --> 00:15:39,600
lowered in a sense

419
00:15:39,600 --> 00:15:41,600
and just means that the attestation in

420
00:15:41,600 --> 00:15:43,360
this particular case can't reveal any

421
00:15:43,360 --> 00:15:46,000
sort of per server information

422
00:15:46,000 --> 00:15:48,480
um because the attester doesn't have uh

423
00:15:48,480 --> 00:15:51,440
the sort of the shared view of the uh

424
00:15:51,440 --> 00:15:53,279
the redemption side that otherwise would

425
00:15:53,279 --> 00:15:55,360
in the joint deployment model

426
00:15:55,360 --> 00:15:56,720
and likewise that redemption doesn't

427
00:15:56,720 --> 00:16:00,399
reveal any per client information

428
00:16:00,399 --> 00:16:01,600
so the

429
00:16:01,600 --> 00:16:03,600
excuse me the interaction between the

430
00:16:03,600 --> 00:16:05,839
client and the server

431
00:16:05,839 --> 00:16:07,680
during redemption

432
00:16:07,680 --> 00:16:10,638
just needs to sort of

433
00:16:10,959 --> 00:16:12,240
make sure that there's no client

434
00:16:12,240 --> 00:16:13,920
information revealed

435
00:16:13,920 --> 00:16:15,759
for example using a proxy to interact

436
00:16:15,759 --> 00:16:18,399
with it so that

437
00:16:19,440 --> 00:16:21,040
you know it's a particular unique ip

438
00:16:21,040 --> 00:16:23,759
address or whatever stays hidden

439
00:16:23,759 --> 00:16:26,399
and then during attestation

440
00:16:26,399 --> 00:16:28,079
you just need to make sure that

441
00:16:28,079 --> 00:16:29,600
whatever issuance protocol you're using

442
00:16:29,600 --> 00:16:31,360
doesn't leak inadvertently the the

443
00:16:31,360 --> 00:16:32,639
origin name

444
00:16:32,639 --> 00:16:34,639
or anything else in particular about the

445
00:16:34,639 --> 00:16:37,519
redemption context

446
00:16:37,519 --> 00:16:38,880
to the attester

447
00:16:38,880 --> 00:16:42,079
and uh this sort of has implications on

448
00:16:42,079 --> 00:16:43,839
you know how the asians protocol works

449
00:16:43,839 --> 00:16:45,600
in particular the insurance protocol

450
00:16:45,600 --> 00:16:46,959
should not reveal

451
00:16:46,959 --> 00:16:48,160
um

452
00:16:48,160 --> 00:16:50,560
any things that are

453
00:16:50,560 --> 00:16:52,800
you know particular to the to the origin

454
00:16:52,800 --> 00:16:53,839
um

455
00:16:53,839 --> 00:16:56,639
uh during issuance but um thankfully all

456
00:16:56,639 --> 00:16:58,240
the issuance protocols like the the

457
00:16:58,240 --> 00:16:59,600
blind signatures and the oprs and

458
00:16:59,600 --> 00:17:01,759
whatnot um

459
00:17:01,759 --> 00:17:04,480
naturally sort of hide this information

460
00:17:04,480 --> 00:17:06,720
by virtue of being blind signatures or

461
00:17:06,720 --> 00:17:10,240
oblivious suit around functions

462
00:17:10,959 --> 00:17:12,400
so

463
00:17:12,400 --> 00:17:14,559
yeah

464
00:17:14,559 --> 00:17:15,919
i think

465
00:17:15,919 --> 00:17:17,679
next steps there's there's an open issue

466
00:17:17,679 --> 00:17:19,280
right now um

467
00:17:19,280 --> 00:17:21,599
for sort of addressing the

468
00:17:21,599 --> 00:17:23,839
double spend requirements uh

469
00:17:23,839 --> 00:17:26,559
when you're using uh cross-origin tokens

470
00:17:26,559 --> 00:17:28,319
um

471
00:17:28,319 --> 00:17:31,039
across different uh or double spend

472
00:17:31,039 --> 00:17:33,360
prevention requirements excuse me when

473
00:17:33,360 --> 00:17:35,200
you're using

474
00:17:35,200 --> 00:17:38,320
cross-origin tokens

475
00:17:38,880 --> 00:17:41,200
which means that like say for example uh

476
00:17:41,200 --> 00:17:44,000
you have two origins that both accept

477
00:17:44,000 --> 00:17:46,480
cross-origin tokens they both have to

478
00:17:46,480 --> 00:17:48,320
sort of share double spend prevention

479
00:17:48,320 --> 00:17:52,160
state otherwise um a client could spend

480
00:17:52,160 --> 00:17:53,360
um

481
00:17:53,360 --> 00:17:55,440
a uh token at either one of these

482
00:17:55,440 --> 00:17:57,280
particular servers um and i don't think

483
00:17:57,280 --> 00:17:59,600
we explicitly sort of make that obvious

484
00:17:59,600 --> 00:18:01,440
uh in the draft right now

485
00:18:01,440 --> 00:18:02,880
um so there's just an issue to sort of

486
00:18:02,880 --> 00:18:04,400
call that out

487
00:18:04,400 --> 00:18:07,600
there is uh also some existing sort of

488
00:18:07,600 --> 00:18:09,840
privacy parameterization in the draft

489
00:18:09,840 --> 00:18:11,760
which sort of describes you know if this

490
00:18:11,760 --> 00:18:13,360
is the sort of like size of the

491
00:18:13,360 --> 00:18:14,480
anonymity set that you want for

492
00:18:14,480 --> 00:18:16,559
particular clients here's how you should

493
00:18:16,559 --> 00:18:19,520
arrange your issuers and arrange your

494
00:18:19,520 --> 00:18:21,440
testers and whatnot

495
00:18:21,440 --> 00:18:22,980
but it's still sort of

496
00:18:22,980 --> 00:18:24,240
[Music]

497
00:18:24,240 --> 00:18:26,400
kind of highly dependent on the previous

498
00:18:26,400 --> 00:18:28,720
incarnation of the architecture draft

499
00:18:28,720 --> 00:18:29,919
so we just need to kind of go through

500
00:18:29,919 --> 00:18:31,280
and update that

501
00:18:31,280 --> 00:18:32,960
um and then there's there's been a sort

502
00:18:32,960 --> 00:18:34,240
of a long-standing

503
00:18:34,240 --> 00:18:36,320
issue to address centralization

504
00:18:36,320 --> 00:18:38,080
although

505
00:18:38,080 --> 00:18:40,720
with mark's draft we may be able to

506
00:18:40,720 --> 00:18:43,440
or may consider just simply punting

507
00:18:43,440 --> 00:18:44,720
discussion there

508
00:18:44,720 --> 00:18:48,400
or conversely folding his his

509
00:18:48,400 --> 00:18:50,080
some of his text into this architecture

510
00:18:50,080 --> 00:18:52,400
document and closing out the issue i

511
00:18:52,400 --> 00:18:55,120
think at that point um

512
00:18:55,120 --> 00:18:56,799
we'll have sort of

513
00:18:56,799 --> 00:18:57,919
discussed and covered all of the

514
00:18:57,919 --> 00:19:00,160
different architectural uh properties of

515
00:19:00,160 --> 00:19:01,360
the system

516
00:19:01,360 --> 00:19:03,039
um

517
00:19:03,039 --> 00:19:04,799
uh that are

518
00:19:04,799 --> 00:19:06,640
you know relevant to uh how you would

519
00:19:06,640 --> 00:19:08,960
deploy how you use it and and what the

520
00:19:08,960 --> 00:19:11,919
the resulting privacy posture is or uh

521
00:19:11,919 --> 00:19:13,280
for clients

522
00:19:13,280 --> 00:19:15,600
i think we could either park it or

523
00:19:15,600 --> 00:19:18,000
uh move it into working group class call

524
00:19:18,000 --> 00:19:19,760
and focus our efforts elsewhere on

525
00:19:19,760 --> 00:19:22,559
issuance protocols um

526
00:19:22,559 --> 00:19:25,440
but that's pretty much it um

527
00:19:25,440 --> 00:19:26,799
anyone have any questions before i hand

528
00:19:26,799 --> 00:19:28,640
it over to tommy to talk about the

529
00:19:28,640 --> 00:19:30,640
architecture or the authentication

530
00:19:30,640 --> 00:19:32,960
scheme

531
00:19:36,000 --> 00:19:38,080
if not uh tommy jeremy stop sharing so

532
00:19:38,080 --> 00:19:39,520
you can pull it up or tell me just

533
00:19:39,520 --> 00:19:42,160
advance for you

534
00:19:45,679 --> 00:19:47,360
i can just say next slide it's it's fine

535
00:19:47,360 --> 00:19:48,559
if you don't mind

536
00:19:48,559 --> 00:19:50,240
yep that's fine

537
00:19:50,240 --> 00:19:51,280
okay

538
00:19:51,280 --> 00:19:52,799
all right next slide

539
00:19:52,799 --> 00:19:54,240
great um

540
00:19:54,240 --> 00:19:55,520
so i'm going to talk about the

541
00:19:55,520 --> 00:19:57,039
authentication scheme

542
00:19:57,039 --> 00:19:59,600
this is the document that we discussed

543
00:19:59,600 --> 00:20:01,280
at the interim meeting it is newly

544
00:20:01,280 --> 00:20:02,960
adopted

545
00:20:02,960 --> 00:20:04,799
and

546
00:20:04,799 --> 00:20:06,880
we did actually publish a

547
00:20:06,880 --> 00:20:08,720
zero one version

548
00:20:08,720 --> 00:20:10,960
uh just this week with a couple of the

549
00:20:10,960 --> 00:20:12,000
changes

550
00:20:12,000 --> 00:20:14,400
that i will talk about today

551
00:20:14,400 --> 00:20:16,640
now these are mainly minor terminology

552
00:20:16,640 --> 00:20:18,640
changes to some of the fields in the

553
00:20:18,640 --> 00:20:20,080
struct that should hopefully make it

554
00:20:20,080 --> 00:20:22,159
clearer

555
00:20:22,159 --> 00:20:23,520
and the other thing we wanted to cover

556
00:20:23,520 --> 00:20:25,520
today was the fact that we want to be

557
00:20:25,520 --> 00:20:27,760
able to stabilize this challenge and

558
00:20:27,760 --> 00:20:29,280
response format

559
00:20:29,280 --> 00:20:32,000
to make sure that people doing

560
00:20:32,000 --> 00:20:33,520
deployment experiments and interop

561
00:20:33,520 --> 00:20:35,520
experiments have

562
00:20:35,520 --> 00:20:37,760
something that we are comfortable with

563
00:20:37,760 --> 00:20:40,240
next slide

564
00:20:41,679 --> 00:20:44,080
okay so for the changes in the zero one

565
00:20:44,080 --> 00:20:45,840
document

566
00:20:45,840 --> 00:20:46,720
um

567
00:20:46,720 --> 00:20:49,039
the main thing was renaming some of the

568
00:20:49,039 --> 00:20:50,480
terminology

569
00:20:50,480 --> 00:20:52,640
there was a field in the challenge

570
00:20:52,640 --> 00:20:54,720
structure before which was a redemption

571
00:20:54,720 --> 00:20:56,799
nonce

572
00:20:56,799 --> 00:20:58,080
um

573
00:20:58,080 --> 00:21:00,159
oh

574
00:21:00,159 --> 00:21:02,880
ben in the chat is saying that the audio

575
00:21:02,880 --> 00:21:04,240
is

576
00:21:04,240 --> 00:21:06,400
not very clear

577
00:21:06,400 --> 00:21:07,360
is that

578
00:21:07,360 --> 00:21:08,400
true

579
00:21:08,400 --> 00:21:12,000
you are breaking up occasionally

580
00:21:12,159 --> 00:21:14,400
okay

581
00:21:14,960 --> 00:21:18,159
i'm trying to mute on me

582
00:21:23,360 --> 00:21:26,240
all right um i i will just

583
00:21:26,240 --> 00:21:27,200
try

584
00:21:27,200 --> 00:21:28,720
as best i can i'll speak a little bit

585
00:21:28,720 --> 00:21:30,400
more slowly

586
00:21:30,400 --> 00:21:31,200
so

587
00:21:31,200 --> 00:21:33,600
the redemption nonce is renamed to the

588
00:21:33,600 --> 00:21:36,400
redemption context

589
00:21:36,400 --> 00:21:38,960
generally

590
00:21:39,360 --> 00:21:40,640
this is because

591
00:21:40,640 --> 00:21:43,520
this field was not necessarily a nonce

592
00:21:43,520 --> 00:21:45,840
it's really just some servers chosen

593
00:21:45,840 --> 00:21:47,440
context that

594
00:21:47,440 --> 00:21:50,159
they want a token bound to

595
00:21:50,159 --> 00:21:52,240
and i want to point out

596
00:21:52,240 --> 00:21:53,679
that

597
00:21:53,679 --> 00:21:54,880
the

598
00:21:54,880 --> 00:21:56,559
fact that you have this redemption

599
00:21:56,559 --> 00:21:58,720
context in a challenge doesn't actually

600
00:21:58,720 --> 00:22:00,960
make the token issuance

601
00:22:00,960 --> 00:22:03,679
interactive as in saying that the client

602
00:22:03,679 --> 00:22:06,240
needs to fetch a token immediately

603
00:22:06,240 --> 00:22:09,039
it's just saying that this

604
00:22:09,039 --> 00:22:10,880
token is bound to something that the

605
00:22:10,880 --> 00:22:13,760
server knows for purposes of

606
00:22:13,760 --> 00:22:15,840
double spend prevention

607
00:22:15,840 --> 00:22:19,280
and it's something that isn't exposed to

608
00:22:19,280 --> 00:22:21,440
the issuance protocol so it's really

609
00:22:21,440 --> 00:22:22,960
just between

610
00:22:22,960 --> 00:22:24,799
the client and the origin that's doing

611
00:22:24,799 --> 00:22:26,480
the redeeming to make sure that you're

612
00:22:26,480 --> 00:22:27,520
not

613
00:22:27,520 --> 00:22:31,039
spending a token that someone else got

614
00:22:31,039 --> 00:22:33,520
and then one other minor rename is that

615
00:22:33,520 --> 00:22:36,799
there was another confusing context name

616
00:22:36,799 --> 00:22:38,720
in the actual token struct that was

617
00:22:38,720 --> 00:22:42,000
given back to the origin upon redemption

618
00:22:42,000 --> 00:22:44,640
and this was renamed to challenge digest

619
00:22:44,640 --> 00:22:47,360
because it is indeed a hash digest of

620
00:22:47,360 --> 00:22:51,039
the challenge next slide

621
00:22:52,400 --> 00:22:54,960
all right um then the other thing we

622
00:22:54,960 --> 00:22:56,799
want to do is talk about stabilizing the

623
00:22:56,799 --> 00:23:00,400
format of this challenge and response we

624
00:23:00,400 --> 00:23:03,039
have several implementations

625
00:23:03,039 --> 00:23:06,320
um that have been testing with interop

626
00:23:06,320 --> 00:23:08,720
and to encourage the deployment

627
00:23:08,720 --> 00:23:10,080
um

628
00:23:10,080 --> 00:23:12,559
of these experimentation between these

629
00:23:12,559 --> 00:23:14,720
the authors would like to

630
00:23:14,720 --> 00:23:16,640
essentially hear any issues with that

631
00:23:16,640 --> 00:23:19,200
format now so that um

632
00:23:19,200 --> 00:23:21,120
we don't have to worry about changing it

633
00:23:21,120 --> 00:23:23,360
too much later

634
00:23:23,360 --> 00:23:25,679
next slide

635
00:23:25,679 --> 00:23:27,280
so just to review

636
00:23:27,280 --> 00:23:29,520
what the current status is of these

637
00:23:29,520 --> 00:23:31,760
structures

638
00:23:31,760 --> 00:23:34,080
in the challenge so this is all using

639
00:23:34,080 --> 00:23:37,120
http authentication with the scheme as

640
00:23:37,120 --> 00:23:39,120
private token

641
00:23:39,120 --> 00:23:41,440
it has a challenge and a key that are

642
00:23:41,440 --> 00:23:42,960
passed there

643
00:23:42,960 --> 00:23:44,640
and then the challenge structure has the

644
00:23:44,640 --> 00:23:47,279
token type which defines which issuance

645
00:23:47,279 --> 00:23:49,760
protocol we would use

646
00:23:49,760 --> 00:23:53,120
it has the issuer name which tells you

647
00:23:53,120 --> 00:23:55,919
who who is allowed to actually get

648
00:23:55,919 --> 00:23:58,880
give you the tokens on the other side

649
00:23:58,880 --> 00:24:01,039
it has the newly renamed redemption

650
00:24:01,039 --> 00:24:03,200
context which is optional and is

651
00:24:03,200 --> 00:24:06,320
essentially just some random server

652
00:24:06,320 --> 00:24:08,559
chosen context that they want to bind

653
00:24:08,559 --> 00:24:10,720
this token to

654
00:24:10,720 --> 00:24:13,600
and then also an origin name to

655
00:24:13,600 --> 00:24:16,000
scope this token to a particular origin

656
00:24:16,000 --> 00:24:19,320
upon redemption

657
00:24:20,000 --> 00:24:21,120
and

658
00:24:21,120 --> 00:24:22,640
that's it

659
00:24:22,640 --> 00:24:25,679
for the challenge and the next slide

660
00:24:25,679 --> 00:24:28,080
is the redemption side

661
00:24:28,080 --> 00:24:31,039
it's the same scheme

662
00:24:31,039 --> 00:24:34,640
for actually sending this authorization

663
00:24:34,640 --> 00:24:37,840
the token type is there again

664
00:24:37,840 --> 00:24:40,240
there is now a client generated nonce

665
00:24:40,240 --> 00:24:42,559
which is a true nonce

666
00:24:42,559 --> 00:24:44,240
that um

667
00:24:44,240 --> 00:24:47,360
is is used to make sure that this is a

668
00:24:47,360 --> 00:24:49,360
unique token as part of the issuance

669
00:24:49,360 --> 00:24:50,799
protocol

670
00:24:50,799 --> 00:24:51,919
there's a

671
00:24:51,919 --> 00:24:56,080
hash of the challenge structure

672
00:24:56,080 --> 00:24:58,960
there is the token key id used and then

673
00:24:58,960 --> 00:25:00,640
there are all the bytes that are

674
00:25:00,640 --> 00:25:03,520
specific to the issuance protocol

675
00:25:03,520 --> 00:25:07,360
this is based on the rsa blind signature

676
00:25:07,360 --> 00:25:11,360
the oprf etc

677
00:25:12,000 --> 00:25:17,600
um i see a question from ted in the chat

678
00:25:18,880 --> 00:25:20,159
uh

679
00:25:20,159 --> 00:25:22,240
ted would you mind

680
00:25:22,240 --> 00:25:23,840
maybe

681
00:25:23,840 --> 00:25:26,720
asking the question at the mic

682
00:25:26,720 --> 00:25:28,480
uh ted hardy speaking if you wouldn't

683
00:25:28,480 --> 00:25:31,520
mind going back a sled

684
00:25:31,840 --> 00:25:33,679
i was i was typing slowly so it's

685
00:25:33,679 --> 00:25:35,760
actually about this uh for the opaque

686
00:25:35,760 --> 00:25:37,039
origin name

687
00:25:37,039 --> 00:25:39,760
which is optional uh if you wanted to

688
00:25:39,760 --> 00:25:40,960
have something

689
00:25:40,960 --> 00:25:43,679
that covered both youtube and

690
00:25:43,679 --> 00:25:45,600
you know google search at the moment you

691
00:25:45,600 --> 00:25:47,360
could leave this out

692
00:25:47,360 --> 00:25:49,520
and the redemption context would handle

693
00:25:49,520 --> 00:25:51,039
it you could present it and neither one

694
00:25:51,039 --> 00:25:52,799
could could do it

695
00:25:52,799 --> 00:25:56,159
but i was wondering whether it be

696
00:25:56,159 --> 00:25:58,159
another option to consider and maybe

697
00:25:58,159 --> 00:25:59,360
it's not needed

698
00:25:59,360 --> 00:26:01,520
is to allow opaque origin name to to

699
00:26:01,520 --> 00:26:03,360
have more than one

700
00:26:03,360 --> 00:26:05,120
appearance in the struct

701
00:26:05,120 --> 00:26:06,559
so that you could

702
00:26:06,559 --> 00:26:08,240
specify

703
00:26:08,240 --> 00:26:10,720
a a list of origin names that are

704
00:26:10,720 --> 00:26:12,559
covered for when you have cases like

705
00:26:12,559 --> 00:26:13,360
that

706
00:26:13,360 --> 00:26:15,279
where the redemption mechanics in the

707
00:26:15,279 --> 00:26:17,919
back end are likely to be the same

708
00:26:17,919 --> 00:26:20,240
um but the origin names are not so i'm

709
00:26:20,240 --> 00:26:22,159
not sure this is worth doing that's why

710
00:26:22,159 --> 00:26:24,799
i just put it in the chat to kind of as

711
00:26:24,799 --> 00:26:28,320
a side comment but that was the question

712
00:26:28,320 --> 00:26:31,360
got it um yeah that's a great

713
00:26:31,360 --> 00:26:33,440
point of an interesting feature that

714
00:26:33,440 --> 00:26:35,440
this could have as you point out it

715
00:26:35,440 --> 00:26:38,880
could of course just use cross origin

716
00:26:38,880 --> 00:26:41,760
tokens but then

717
00:26:41,760 --> 00:26:44,559
depending on what your issuer is

718
00:26:44,559 --> 00:26:47,120
this that could be a much broader pool

719
00:26:47,120 --> 00:26:49,279
of origins that it would be shared

720
00:26:49,279 --> 00:26:53,679
with and not just google and youtube

721
00:26:53,679 --> 00:26:56,320
the other approach i imagine could be

722
00:26:56,320 --> 00:26:59,520
taken is that the client could

723
00:26:59,520 --> 00:27:02,000
know essentially when it is

724
00:27:02,000 --> 00:27:03,760
safe to do

725
00:27:03,760 --> 00:27:05,919
cross-origin for a single origin similar

726
00:27:05,919 --> 00:27:06,960
to how

727
00:27:06,960 --> 00:27:08,960
i can do connection

728
00:27:08,960 --> 00:27:13,440
uh like http 2 connection reuse if the

729
00:27:13,440 --> 00:27:14,559
uh

730
00:27:14,559 --> 00:27:16,559
if two origins are covered in the same

731
00:27:16,559 --> 00:27:18,240
certificate of the server

732
00:27:18,240 --> 00:27:21,840
that i'm talking to potentially

733
00:27:22,240 --> 00:27:26,960
so um i think i i think you're probably

734
00:27:26,960 --> 00:27:28,559
right there that the there could be

735
00:27:28,559 --> 00:27:30,880
something else it uses to know whether

736
00:27:30,880 --> 00:27:33,440
it's safe to do the cross-origin

737
00:27:33,440 --> 00:27:36,159
um but

738
00:27:36,640 --> 00:27:38,159
the the mechanics of this in the back

739
00:27:38,159 --> 00:27:39,279
ends of some of these are going to be a

740
00:27:39,279 --> 00:27:40,799
little bit wonky because in some of

741
00:27:40,799 --> 00:27:43,039
these cases the same redemption

742
00:27:43,039 --> 00:27:44,399
mechanics are going to be used for

743
00:27:44,399 --> 00:27:47,279
something like gcp so you could have

744
00:27:47,279 --> 00:27:50,080
instances um that are being issued by

745
00:27:50,080 --> 00:27:52,159
google where the redemption mechanics

746
00:27:52,159 --> 00:27:54,000
definitely do not want you to use the

747
00:27:54,000 --> 00:27:54,880
same

748
00:27:54,880 --> 00:27:58,640
redemption context as

749
00:27:58,799 --> 00:28:00,399
the google properties themselves but

750
00:28:00,399 --> 00:28:01,919
they might be the same redemption

751
00:28:01,919 --> 00:28:04,320
mechanics in the back end for

752
00:28:04,320 --> 00:28:05,679
um

753
00:28:05,679 --> 00:28:07,919
uh origins that are just you know living

754
00:28:07,919 --> 00:28:09,520
in their cloud

755
00:28:09,520 --> 00:28:10,399
so

756
00:28:10,399 --> 00:28:12,159
if if you if we're not going to use

757
00:28:12,159 --> 00:28:14,880
multiple origin names then i think

758
00:28:14,880 --> 00:28:17,279
one of two things will happen

759
00:28:17,279 --> 00:28:19,039
either cross-origin is going to be very

760
00:28:19,039 --> 00:28:21,200
very common to to major services because

761
00:28:21,200 --> 00:28:22,159
they

762
00:28:22,159 --> 00:28:25,600
many of them have more than one

763
00:28:25,600 --> 00:28:27,520
name from the point of view of http

764
00:28:27,520 --> 00:28:28,559
origin

765
00:28:28,559 --> 00:28:29,360
or

766
00:28:29,360 --> 00:28:30,960
you're going to have to have some other

767
00:28:30,960 --> 00:28:31,919
system

768
00:28:31,919 --> 00:28:34,559
to kind of figure out oh okay what i'm

769
00:28:34,559 --> 00:28:35,919
going to actually use to figure out

770
00:28:35,919 --> 00:28:38,320
whether it's cross urgent safe

771
00:28:38,320 --> 00:28:41,360
is my last contact for them what all of

772
00:28:41,360 --> 00:28:42,799
the subject names were in the

773
00:28:42,799 --> 00:28:45,200
certificate or something like that

774
00:28:45,200 --> 00:28:46,399
um so it

775
00:28:46,399 --> 00:28:48,799
there's some trade-offs here and

776
00:28:48,799 --> 00:28:50,799
a simpler trade-off might actually just

777
00:28:50,799 --> 00:28:52,240
be to say

778
00:28:52,240 --> 00:28:54,240
opaque origin name can and can occur

779
00:28:54,240 --> 00:28:56,559
multiple times because then if somebody

780
00:28:56,559 --> 00:28:57,600
wants to

781
00:28:57,600 --> 00:28:59,039
um

782
00:28:59,039 --> 00:29:00,880
to scope it to a specific set they don't

783
00:29:00,880 --> 00:29:02,399
have to rely on either

784
00:29:02,399 --> 00:29:05,120
previous um contact by the

785
00:29:05,120 --> 00:29:07,039
the client or

786
00:29:07,039 --> 00:29:07,919
um

787
00:29:07,919 --> 00:29:10,000
maybe a try and fail with cross origin

788
00:29:10,000 --> 00:29:13,760
that was to the same um set of servers

789
00:29:13,760 --> 00:29:16,640
but to different um

790
00:29:16,640 --> 00:29:18,720
actual redemption context so just just a

791
00:29:18,720 --> 00:29:20,080
thought

792
00:29:20,080 --> 00:29:22,080
got it yeah no that's that's good we we

793
00:29:22,080 --> 00:29:24,640
will take that as a

794
00:29:24,640 --> 00:29:26,960
uh as an issue to look at

795
00:29:26,960 --> 00:29:29,360
stephen

796
00:29:30,320 --> 00:29:33,279
i think like even beyond like wanting

797
00:29:33,279 --> 00:29:34,880
multiple origins like the definition of

798
00:29:34,880 --> 00:29:37,600
an origin in privacy past is slightly

799
00:29:37,600 --> 00:29:39,279
different from like what an origin might

800
00:29:39,279 --> 00:29:42,159
be on the web like it might be a site or

801
00:29:42,159 --> 00:29:44,480
it might be an origin so i think ben

802
00:29:44,480 --> 00:29:47,200
mentioned the like ideas leave origin to

803
00:29:47,200 --> 00:29:49,200
be an actual opaque blob that depending

804
00:29:49,200 --> 00:29:51,520
on the use case like it might be

805
00:29:51,520 --> 00:29:53,600
interpreted as like a literal origin or

806
00:29:53,600 --> 00:29:55,039
it might be like a

807
00:29:55,039 --> 00:29:57,360
set of things or a site and leave that

808
00:29:57,360 --> 00:29:59,039
up to the use case rather than trying to

809
00:29:59,039 --> 00:30:01,919
put it in the stock

810
00:30:06,720 --> 00:30:08,559
all right thank you

811
00:30:08,559 --> 00:30:10,000
okay

812
00:30:10,000 --> 00:30:11,520
let's go

813
00:30:11,520 --> 00:30:14,799
forward a little bit

814
00:30:15,520 --> 00:30:18,240
all right um

815
00:30:18,240 --> 00:30:20,080
and yes that was steven

816
00:30:20,080 --> 00:30:22,480
so

817
00:30:22,480 --> 00:30:23,600
the

818
00:30:23,600 --> 00:30:25,600
origin behavior essentially the server

819
00:30:25,600 --> 00:30:28,960
behavior of what to do in this is

820
00:30:28,960 --> 00:30:31,039
if you want to challenge it should be

821
00:30:31,039 --> 00:30:32,480
very very simple

822
00:30:32,480 --> 00:30:35,520
you essentially just need to choose

823
00:30:35,520 --> 00:30:38,320
who your issuer is one or more of them

824
00:30:38,320 --> 00:30:41,120
and what token type you want to use so

825
00:30:41,120 --> 00:30:43,360
what issuance protocol

826
00:30:43,360 --> 00:30:45,520
you can choose to be per origin or

827
00:30:45,520 --> 00:30:47,120
cross-origin

828
00:30:47,120 --> 00:30:48,559
and to the discussion we were just

829
00:30:48,559 --> 00:30:51,200
having maybe you know there is a in

830
00:30:51,200 --> 00:30:52,799
between you essentially you need to

831
00:30:52,799 --> 00:30:55,919
choose what is that value of kind of

832
00:30:55,919 --> 00:30:57,840
what you are binding

833
00:30:57,840 --> 00:30:59,600
your challenge to

834
00:30:59,600 --> 00:31:02,159
and then you can choose the optional

835
00:31:02,159 --> 00:31:05,200
context that you want to have

836
00:31:05,200 --> 00:31:06,399
so

837
00:31:06,399 --> 00:31:07,919
for this

838
00:31:07,919 --> 00:31:10,159
the context really is about

839
00:31:10,159 --> 00:31:12,559
the state that you need to keep

840
00:31:12,559 --> 00:31:16,000
for double spend prevention

841
00:31:16,080 --> 00:31:19,919
if you don't have any context

842
00:31:19,919 --> 00:31:21,600
then

843
00:31:21,600 --> 00:31:23,440
the state for enforcing double spend

844
00:31:23,440 --> 00:31:25,679
prevention is

845
00:31:25,679 --> 00:31:27,279
not really tied to what's in the

846
00:31:27,279 --> 00:31:29,279
challenge but you need to have some

847
00:31:29,279 --> 00:31:32,000
broader state that you keep

848
00:31:32,000 --> 00:31:34,640
upon redemption to recognize

849
00:31:34,640 --> 00:31:38,880
identical tokens coming back to you

850
00:31:39,200 --> 00:31:40,640
and that is

851
00:31:40,640 --> 00:31:42,080
certainly

852
00:31:42,080 --> 00:31:44,480
doable

853
00:31:44,480 --> 00:31:47,120
but it can require more work on the

854
00:31:47,120 --> 00:31:48,320
origin

855
00:31:48,320 --> 00:31:50,799
the benefit of having the context-based

856
00:31:50,799 --> 00:31:52,480
token is that

857
00:31:52,480 --> 00:31:54,399
they can tie

858
00:31:54,399 --> 00:31:56,720
specific client session properties or

859
00:31:56,720 --> 00:31:58,880
other properties that they want

860
00:31:58,880 --> 00:32:02,080
to the token to make it a smaller set of

861
00:32:02,080 --> 00:32:04,399
things amongst which you need to do

862
00:32:04,399 --> 00:32:06,799
double spend prevention

863
00:32:06,799 --> 00:32:09,440
i think the next slide has some examples

864
00:32:09,440 --> 00:32:13,080
that chris gave

865
00:32:14,480 --> 00:32:16,640
so of course you can have an empty

866
00:32:16,640 --> 00:32:19,360
context but you could have some very

867
00:32:19,360 --> 00:32:20,320
simple

868
00:32:20,320 --> 00:32:22,320
mechanics like

869
00:32:22,320 --> 00:32:25,279
uh doing a hash of the client ip address

870
00:32:25,279 --> 00:32:27,919
or the client ip address subnet so that

871
00:32:27,919 --> 00:32:29,679
you can

872
00:32:29,679 --> 00:32:31,200
just compare

873
00:32:31,200 --> 00:32:34,159
these tokens to other clients that fall

874
00:32:34,159 --> 00:32:35,360
within

875
00:32:35,360 --> 00:32:36,960
that subnet

876
00:32:36,960 --> 00:32:38,799
or you could have

877
00:32:38,799 --> 00:32:41,840
something associated with your state

878
00:32:41,840 --> 00:32:44,159
with the client so if the client has a

879
00:32:44,159 --> 00:32:46,880
long-lived connection with you

880
00:32:46,880 --> 00:32:50,240
that's doing http 2 or http 3 maybe you

881
00:32:50,240 --> 00:32:52,480
have some state associated with that

882
00:32:52,480 --> 00:32:54,080
that you just keep for the lifetime of

883
00:32:54,080 --> 00:32:55,440
that session

884
00:32:55,440 --> 00:32:56,880
and then you can

885
00:32:56,880 --> 00:32:59,039
just guarantee that this token is only

886
00:32:59,039 --> 00:33:02,799
valid for the lifetime of that session

887
00:33:04,880 --> 00:33:07,279
all right

888
00:33:08,080 --> 00:33:11,200
and then on the client mainly what

889
00:33:11,200 --> 00:33:12,559
the interesting things that a client

890
00:33:12,559 --> 00:33:14,399
needs to do is manage

891
00:33:14,399 --> 00:33:16,399
what tokens are cached and how they are

892
00:33:16,399 --> 00:33:19,440
reused and recognizing

893
00:33:19,440 --> 00:33:20,240
when

894
00:33:20,240 --> 00:33:23,120
which which tokens are eligible to be

895
00:33:23,120 --> 00:33:25,279
reused and what cash you need to pull

896
00:33:25,279 --> 00:33:26,960
from

897
00:33:26,960 --> 00:33:30,000
when you don't have a context then it's

898
00:33:30,000 --> 00:33:31,840
very easy to cash it

899
00:33:31,840 --> 00:33:34,399
if they are context-based

900
00:33:34,399 --> 00:33:35,760
then

901
00:33:35,760 --> 00:33:36,840
you

902
00:33:36,840 --> 00:33:39,760
um have generally shorter caching

903
00:33:39,760 --> 00:33:41,519
lifetimes and

904
00:33:41,519 --> 00:33:43,600
we had a recent issue from something

905
00:33:43,600 --> 00:33:45,440
like chris pointed out that you want to

906
00:33:45,440 --> 00:33:47,279
probably clear

907
00:33:47,279 --> 00:33:50,080
any cached tokens whenever you clear

908
00:33:50,080 --> 00:33:52,640
your cookie state or something else that

909
00:33:52,640 --> 00:33:54,480
would

910
00:33:54,480 --> 00:33:55,840
otherwise

911
00:33:55,840 --> 00:33:58,640
be changing the client state

912
00:33:58,640 --> 00:34:00,320
and then the other thing that you want

913
00:34:00,320 --> 00:34:01,360
to do

914
00:34:01,360 --> 00:34:03,679
on the client side is to

915
00:34:03,679 --> 00:34:06,880
verify that origin name information

916
00:34:06,880 --> 00:34:09,040
to make sure that it matches and this

917
00:34:09,040 --> 00:34:11,199
again to the point that ted brought up

918
00:34:11,199 --> 00:34:12,399
is where

919
00:34:12,399 --> 00:34:14,560
if this is expanded to include multiple

920
00:34:14,560 --> 00:34:18,159
things it's some verification that

921
00:34:18,159 --> 00:34:19,918
what the challenge was bound to actually

922
00:34:19,918 --> 00:34:22,320
represents

923
00:34:22,320 --> 00:34:25,280
what you um the this the state you think

924
00:34:25,280 --> 00:34:26,719
you have with the server to make sure

925
00:34:26,719 --> 00:34:28,800
that you're not going to give a token to

926
00:34:28,800 --> 00:34:31,440
the wrong server

927
00:34:31,679 --> 00:34:35,639
all right next slide

928
00:34:38,320 --> 00:34:40,719
all right so

929
00:34:40,719 --> 00:34:42,399
based on this discussion it sounds like

930
00:34:42,399 --> 00:34:43,359
we have

931
00:34:43,359 --> 00:34:45,679
you know one issue where we want to

932
00:34:45,679 --> 00:34:47,760
kind of dive in a bit more to this

933
00:34:47,760 --> 00:34:49,440
origin name

934
00:34:49,440 --> 00:34:52,079
if other people see other changes that

935
00:34:52,079 --> 00:34:53,839
to the formats that would be useful that

936
00:34:53,839 --> 00:34:56,399
would be great to hear now

937
00:34:56,399 --> 00:34:58,240
um

938
00:34:58,240 --> 00:35:00,400
and other than that we plan to continue

939
00:35:00,400 --> 00:35:02,160
polishing the document and doing

940
00:35:02,160 --> 00:35:04,000
interrupt testing if people are

941
00:35:04,000 --> 00:35:06,240
interested in testing with this let us

942
00:35:06,240 --> 00:35:08,480
know

943
00:35:08,480 --> 00:35:11,880
any other questions

944
00:35:23,040 --> 00:35:25,839
okay any other

945
00:35:26,960 --> 00:35:30,000
feedback on

946
00:35:30,000 --> 00:35:34,280
either of these two core drafts

947
00:35:45,280 --> 00:35:46,480
all right

948
00:35:46,480 --> 00:35:48,880
all right

949
00:35:50,880 --> 00:35:52,640
chris are you presenting the next draft

950
00:35:52,640 --> 00:35:54,960
as well

951
00:35:55,280 --> 00:35:58,240
uh oh i'll share slides um tommy and i

952
00:35:58,240 --> 00:36:01,440
are gonna kind of do it together

953
00:36:01,440 --> 00:36:04,560
yeah we'll go back and forth

954
00:36:05,200 --> 00:36:07,119
all right

955
00:36:07,119 --> 00:36:08,240
so

956
00:36:08,240 --> 00:36:10,400
next we'll talk about

957
00:36:10,400 --> 00:36:14,880
a uh secondary issuance protocol

958
00:36:14,880 --> 00:36:17,760
so the main core issuance document talks

959
00:36:17,760 --> 00:36:19,119
about

960
00:36:19,119 --> 00:36:21,599
blind rsa blind signatures

961
00:36:21,599 --> 00:36:23,520
and oprf

962
00:36:23,520 --> 00:36:25,680
and these are just very very basic

963
00:36:25,680 --> 00:36:28,640
usages of those protocols

964
00:36:28,640 --> 00:36:31,040
but we have another issuance protocol

965
00:36:31,040 --> 00:36:32,640
that has been defined

966
00:36:32,640 --> 00:36:35,280
specifically to allow

967
00:36:35,280 --> 00:36:36,160
per

968
00:36:36,160 --> 00:36:38,000
origin rate limiting

969
00:36:38,000 --> 00:36:41,560
next slide please

970
00:36:42,000 --> 00:36:43,839
so rate limiting

971
00:36:43,839 --> 00:36:46,800
is a very very common part of fraud

972
00:36:46,800 --> 00:36:48,079
prevention

973
00:36:48,079 --> 00:36:50,240
and anonymous access

974
00:36:50,240 --> 00:36:54,000
across web and in apps

975
00:36:54,000 --> 00:36:56,400
and often it's something that does rely

976
00:36:56,400 --> 00:37:00,000
on tracking cookies or client ip address

977
00:37:00,000 --> 00:37:02,480
and so it's not a great thing for

978
00:37:02,480 --> 00:37:05,040
user privacy

979
00:37:05,040 --> 00:37:06,400
and

980
00:37:06,400 --> 00:37:08,560
just first to give some background on

981
00:37:08,560 --> 00:37:10,560
how this is commonly done

982
00:37:10,560 --> 00:37:12,720
um with something called token buckets

983
00:37:12,720 --> 00:37:14,480
uh chris is going to walk through some

984
00:37:14,480 --> 00:37:17,040
examples

985
00:37:20,240 --> 00:37:23,359
yeah um so uh token buckets or leaky

986
00:37:23,359 --> 00:37:26,079
buckets um you know choose whichever one

987
00:37:26,079 --> 00:37:28,320
you like uh using toca buckets here so i

988
00:37:28,320 --> 00:37:30,160
think it maps better to the analogy of

989
00:37:30,160 --> 00:37:31,520
uh

990
00:37:31,520 --> 00:37:34,000
uh the sort of the use case here

991
00:37:34,000 --> 00:37:36,560
um so like for as i guess a reminder or

992
00:37:36,560 --> 00:37:39,200
refresher for people who may not know um

993
00:37:39,200 --> 00:37:41,599
a token bucket is a sort of a just a

994
00:37:41,599 --> 00:37:43,040
process or an algorithm for sort of

995
00:37:43,040 --> 00:37:45,119
enforcing uh

996
00:37:45,119 --> 00:37:47,200
rate limits um

997
00:37:47,200 --> 00:37:48,079
uh

998
00:37:48,079 --> 00:37:49,599
and you can think of it as a like a

999
00:37:49,599 --> 00:37:52,800
composition of two independent processes

1000
00:37:52,800 --> 00:37:55,040
um one of which is a process for sort of

1001
00:37:55,040 --> 00:37:57,280
replenishing tokens in this bucket um

1002
00:37:57,280 --> 00:37:59,119
sort of like adds a new token to the

1003
00:37:59,119 --> 00:38:01,440
bucket at a fixed rate

1004
00:38:01,440 --> 00:38:04,240
um and the bucket has a particular size

1005
00:38:04,240 --> 00:38:06,640
or a capacity after which

1006
00:38:06,640 --> 00:38:07,920
if it's full you can't add any more

1007
00:38:07,920 --> 00:38:09,280
tokens

1008
00:38:09,280 --> 00:38:10,880
if it's empty

1009
00:38:10,880 --> 00:38:12,560
you can add the tokens

1010
00:38:12,560 --> 00:38:14,480
and then you have another process that

1011
00:38:14,480 --> 00:38:16,800
removes tokens from this bucket

1012
00:38:16,800 --> 00:38:19,359
and this uh this process that is uh

1013
00:38:19,359 --> 00:38:22,480
removing tokens is typically um

1014
00:38:22,480 --> 00:38:23,839
representative of something that wants

1015
00:38:23,839 --> 00:38:25,839
to like access a resource send a pack

1016
00:38:25,839 --> 00:38:28,240
out on the network or send an api call

1017
00:38:28,240 --> 00:38:30,560
or do whatever basically

1018
00:38:30,560 --> 00:38:35,200
um and the the the token bucket just uh

1019
00:38:35,200 --> 00:38:36,800
the internal check is basically you know

1020
00:38:36,800 --> 00:38:38,320
are there tokens available to service

1021
00:38:38,320 --> 00:38:40,000
this particular request

1022
00:38:40,000 --> 00:38:42,079
um if the answer is yes

1023
00:38:42,079 --> 00:38:44,079
as in uh that the number of tokens in

1024
00:38:44,079 --> 00:38:46,560
the bucket is not empty um

1025
00:38:46,560 --> 00:38:49,200
the the request is serviced um if it's

1026
00:38:49,200 --> 00:38:51,599
not it's dropped on the floor um

1027
00:38:51,599 --> 00:38:53,760
leaky buckets um

1028
00:38:53,760 --> 00:38:54,880
are

1029
00:38:54,880 --> 00:38:56,720
sort of the mirror image of this and

1030
00:38:56,720 --> 00:38:58,320
also commonly used to implement rate

1031
00:38:58,320 --> 00:39:00,560
limiting but as i said um

1032
00:39:00,560 --> 00:39:03,520
this is i think a simpler mental model

1033
00:39:03,520 --> 00:39:04,880
internally if you're to sort of open

1034
00:39:04,880 --> 00:39:06,240
this up

1035
00:39:06,240 --> 00:39:08,400
um uh

1036
00:39:08,400 --> 00:39:09,680
take a look at the sort of token

1037
00:39:09,680 --> 00:39:14,359
replenishing process first um

1038
00:39:14,400 --> 00:39:16,720
when a token bucket is replenished the

1039
00:39:16,720 --> 00:39:18,640
very first obvious thing is that the the

1040
00:39:18,640 --> 00:39:20,480
bucket that is being replenished has to

1041
00:39:20,480 --> 00:39:21,760
be identified

1042
00:39:21,760 --> 00:39:23,599
um so in this particular case you can

1043
00:39:23,599 --> 00:39:25,040
think of it like you know there's a hash

1044
00:39:25,040 --> 00:39:26,800
table inside and the hash table has a

1045
00:39:26,800 --> 00:39:28,560
particular index and

1046
00:39:28,560 --> 00:39:29,839
the value associated with that

1047
00:39:29,839 --> 00:39:31,280
particular index

1048
00:39:31,280 --> 00:39:32,720
maintains the count

1049
00:39:32,720 --> 00:39:34,079
so in this

1050
00:39:34,079 --> 00:39:37,119
particular slide here

1051
00:39:37,200 --> 00:39:38,560
the the

1052
00:39:38,560 --> 00:39:40,240
bucket with the

1053
00:39:40,240 --> 00:39:41,760
index one two five blah blah blah

1054
00:39:41,760 --> 00:39:42,640
whatever

1055
00:39:42,640 --> 00:39:45,520
um is incremented with uh t tokens are

1056
00:39:45,520 --> 00:39:48,480
replenished with t tokens um

1057
00:39:48,480 --> 00:39:49,280
uh

1058
00:39:49,280 --> 00:39:51,760
and uh previously where it had n now has

1059
00:39:51,760 --> 00:39:52,800
n plus t

1060
00:39:52,800 --> 00:39:55,119
pretty straightforward

1061
00:39:55,119 --> 00:39:57,440
on the redemption or the sorry the

1062
00:39:57,440 --> 00:39:59,839
resource request side um similarly the

1063
00:39:59,839 --> 00:40:03,280
bucket uh has to be identified um and uh

1064
00:40:03,280 --> 00:40:04,800
so that involves going into the hash

1065
00:40:04,800 --> 00:40:05,760
table

1066
00:40:05,760 --> 00:40:09,200
um and then depending on how many

1067
00:40:09,200 --> 00:40:10,880
uh tokens your particular request

1068
00:40:10,880 --> 00:40:13,200
corresponds to maybe it's like you know

1069
00:40:13,200 --> 00:40:15,760
if it's a packet size and bytes uh there

1070
00:40:15,760 --> 00:40:18,319
needs to be n tokens or whatever

1071
00:40:18,319 --> 00:40:19,440
um

1072
00:40:19,440 --> 00:40:20,880
here we're just saying that each request

1073
00:40:20,880 --> 00:40:22,400
counts as one token

1074
00:40:22,400 --> 00:40:23,440
um

1075
00:40:23,440 --> 00:40:25,760
the the the algorithm uh identifies the

1076
00:40:25,760 --> 00:40:26,880
bucket

1077
00:40:26,880 --> 00:40:29,839
decrements the the count by one um

1078
00:40:29,839 --> 00:40:31,440
and if it's uh greater than zero

1079
00:40:31,440 --> 00:40:33,520
surfaces if it's not it just and drops

1080
00:40:33,520 --> 00:40:34,880
it on the floor

1081
00:40:34,880 --> 00:40:35,760
um

1082
00:40:35,760 --> 00:40:39,599
and uh that's basically it uh the

1083
00:40:39,599 --> 00:40:42,720
it's pretty straightforward the the

1084
00:40:42,720 --> 00:40:44,079
you know you have to identify bucket and

1085
00:40:44,079 --> 00:40:46,000
either you increment increment tokens or

1086
00:40:46,000 --> 00:40:48,000
decrement tokens um

1087
00:40:48,000 --> 00:40:50,480
uh and uh act accordingly or service

1088
00:40:50,480 --> 00:40:53,119
requests accordingly

1089
00:40:53,119 --> 00:40:55,839
back to you tommy

1090
00:40:56,720 --> 00:40:58,720
all right thank you

1091
00:40:58,720 --> 00:41:00,880
so

1092
00:41:00,880 --> 00:41:03,119
that's how these schemes normally work

1093
00:41:03,119 --> 00:41:05,440
um so why is this interesting for

1094
00:41:05,440 --> 00:41:07,839
privacy pass

1095
00:41:07,839 --> 00:41:11,119
so specifically

1096
00:41:11,440 --> 00:41:14,160
using these rate limiting schemes

1097
00:41:14,160 --> 00:41:16,480
which are used for

1098
00:41:16,480 --> 00:41:18,640
both fraud prevention as well as things

1099
00:41:18,640 --> 00:41:21,119
like metered paywalls really break down

1100
00:41:21,119 --> 00:41:23,280
when the clients have

1101
00:41:23,280 --> 00:41:25,280
more privacy

1102
00:41:25,280 --> 00:41:26,800
because they end up sharing the rate

1103
00:41:26,800 --> 00:41:28,480
limiting buckets

1104
00:41:28,480 --> 00:41:30,240
this is because of

1105
00:41:30,240 --> 00:41:34,160
tor or proxies or vpns or just being on

1106
00:41:34,160 --> 00:41:37,599
a shared ip on a public network

1107
00:41:37,599 --> 00:41:40,800
and a basic privacy pass token

1108
00:41:40,800 --> 00:41:41,760
is

1109
00:41:41,760 --> 00:41:44,079
useful for the cases where i'm just

1110
00:41:44,079 --> 00:41:45,920
going to get

1111
00:41:45,920 --> 00:41:48,960
really gratuitous captchas

1112
00:41:48,960 --> 00:41:51,920
um but it's not always enough

1113
00:41:51,920 --> 00:41:52,960
um

1114
00:41:52,960 --> 00:41:55,119
both for some functional use cases like

1115
00:41:55,119 --> 00:41:57,119
the metered paywall

1116
00:41:57,119 --> 00:41:57,839
but

1117
00:41:57,839 --> 00:42:00,319
even for some of the just the captcha

1118
00:42:00,319 --> 00:42:02,960
prevention cases

1119
00:42:02,960 --> 00:42:05,520
so a basic privacy pass token

1120
00:42:05,520 --> 00:42:08,240
says that a device or a user passed some

1121
00:42:08,240 --> 00:42:09,359
check

1122
00:42:09,359 --> 00:42:11,040
but

1123
00:42:11,040 --> 00:42:14,240
it doesn't stop that device from

1124
00:42:14,240 --> 00:42:16,160
overwhelming

1125
00:42:16,160 --> 00:42:17,040
um

1126
00:42:17,040 --> 00:42:19,520
what the service would allow if

1127
00:42:19,520 --> 00:42:22,160
that service wants to have a pretty low

1128
00:42:22,160 --> 00:42:23,920
rate limit

1129
00:42:23,920 --> 00:42:26,240
so i could have

1130
00:42:26,240 --> 00:42:29,119
a bunch of legitimate devices that are

1131
00:42:29,119 --> 00:42:32,000
being used as a click farm or captcha

1132
00:42:32,000 --> 00:42:33,200
farm

1133
00:42:33,200 --> 00:42:35,599
or i'm just trying to get around

1134
00:42:35,599 --> 00:42:37,359
something like a metered paywall

1135
00:42:37,359 --> 00:42:38,960
and so

1136
00:42:38,960 --> 00:42:40,800
we have a concern that in many of these

1137
00:42:40,800 --> 00:42:43,599
cases we're still going to degenerate

1138
00:42:43,599 --> 00:42:45,440
to people being blocked even if they're

1139
00:42:45,440 --> 00:42:48,160
using basic privacy pass

1140
00:42:48,160 --> 00:42:50,720
next slide

1141
00:42:53,280 --> 00:42:56,640
so on the left we have our basic

1142
00:42:56,640 --> 00:43:00,000
tokens and these are about attesting

1143
00:43:00,000 --> 00:43:02,960
to a user device legitimacy that you

1144
00:43:02,960 --> 00:43:04,560
could do a captcha

1145
00:43:04,560 --> 00:43:05,839
etc

1146
00:43:05,839 --> 00:43:08,319
and it's good for replacing the captcha

1147
00:43:08,319 --> 00:43:10,880
to improve the confidence around a

1148
00:43:10,880 --> 00:43:14,000
specific user or device

1149
00:43:14,000 --> 00:43:17,119
and then the rate limited token variant

1150
00:43:17,119 --> 00:43:21,200
does that but it also is attesting that

1151
00:43:21,200 --> 00:43:24,480
your access rate for this origin

1152
00:43:24,480 --> 00:43:27,680
was below a certain threshold

1153
00:43:27,680 --> 00:43:32,000
and this um adds mitigations

1154
00:43:32,000 --> 00:43:33,440
doesn't completely solve but it adds a

1155
00:43:33,440 --> 00:43:36,319
lot of mitigations against devices being

1156
00:43:36,319 --> 00:43:39,359
used as a click farmer captcha farm

1157
00:43:39,359 --> 00:43:41,760
and it also allows you to work with

1158
00:43:41,760 --> 00:43:43,599
things like metered paywalls even

1159
00:43:43,599 --> 00:43:47,119
without giving away user privacy

1160
00:43:47,119 --> 00:43:49,680
next slide

1161
00:43:51,359 --> 00:43:52,839
so

1162
00:43:52,839 --> 00:43:56,160
the the rate limited token issuance

1163
00:43:56,160 --> 00:43:57,280
protocol

1164
00:43:57,280 --> 00:43:58,960
is extending

1165
00:43:58,960 --> 00:44:01,680
the basic issuance protocol that's used

1166
00:44:01,680 --> 00:44:04,000
for rsa blind signatures

1167
00:44:04,000 --> 00:44:06,560
it shares most of the same structure and

1168
00:44:06,560 --> 00:44:10,079
it essentially adds a bit at the end

1169
00:44:10,079 --> 00:44:13,200
that the attester and issuer

1170
00:44:13,200 --> 00:44:14,640
boxes

1171
00:44:14,640 --> 00:44:16,640
will use

1172
00:44:16,640 --> 00:44:19,520
and so this does rely on the attester

1173
00:44:19,520 --> 00:44:21,760
and issuer being separate which is not a

1174
00:44:21,760 --> 00:44:26,640
requirement for basic privacy passes

1175
00:44:26,720 --> 00:44:29,599
and in this model the tester which is

1176
00:44:29,599 --> 00:44:32,000
the thing that sees the client identity

1177
00:44:32,000 --> 00:44:34,319
maintains a counter

1178
00:44:34,319 --> 00:44:35,440
for

1179
00:44:35,440 --> 00:44:37,520
how many times a given client has

1180
00:44:37,520 --> 00:44:38,720
accessed

1181
00:44:38,720 --> 00:44:40,240
an anonymized

1182
00:44:40,240 --> 00:44:42,720
identifier for that origin

1183
00:44:42,720 --> 00:44:44,240
and so these attesters are trying to

1184
00:44:44,240 --> 00:44:47,200
learn a stable mapping between

1185
00:44:47,200 --> 00:44:49,200
the client and the origin

1186
00:44:49,200 --> 00:44:52,160
uh based on a per client see it's

1187
00:44:52,160 --> 00:44:54,400
anonymized using a per client secret and

1188
00:44:54,400 --> 00:44:57,200
a per origin secret so the tester cannot

1189
00:44:57,200 --> 00:44:59,040
learn what you're going to just that it

1190
00:44:59,040 --> 00:45:00,319
is a unique

1191
00:45:00,319 --> 00:45:01,760
thing

1192
00:45:01,760 --> 00:45:04,160
within a given time window

1193
00:45:04,160 --> 00:45:06,480
the issuer is responsible for

1194
00:45:06,480 --> 00:45:09,520
providing what the rate limit is

1195
00:45:09,520 --> 00:45:11,680
and telling the tester during the

1196
00:45:11,680 --> 00:45:13,119
issuance protocol

1197
00:45:13,119 --> 00:45:15,040
by the way

1198
00:45:15,040 --> 00:45:16,400
for this

1199
00:45:16,400 --> 00:45:17,680
for the thing that this client is

1200
00:45:17,680 --> 00:45:19,920
accessing they should only be allowed to

1201
00:45:19,920 --> 00:45:22,480
access it

1202
00:45:22,720 --> 00:45:23,680
uh

1203
00:45:23,680 --> 00:45:25,680
either you know let's say three times

1204
00:45:25,680 --> 00:45:27,200
per hour or

1205
00:45:27,200 --> 00:45:29,119
five times per month you know it could

1206
00:45:29,119 --> 00:45:30,079
be

1207
00:45:30,079 --> 00:45:34,000
a fairly wide range of rate limits

1208
00:45:34,000 --> 00:45:35,839
and the tester is the one responsible

1209
00:45:35,839 --> 00:45:38,400
for failing the request if that rate

1210
00:45:38,400 --> 00:45:40,160
limit is exceeded

1211
00:45:40,160 --> 00:45:42,720
next slide

1212
00:45:45,680 --> 00:45:47,680
um yeah and so the

1213
00:45:47,680 --> 00:45:49,440
the main interesting part here is how

1214
00:45:49,440 --> 00:45:50,319
you

1215
00:45:50,319 --> 00:45:53,440
do this without revealing to the tester

1216
00:45:53,440 --> 00:45:58,160
what the uh per origin information is

1217
00:45:58,160 --> 00:45:59,599
next slide and i think it's back to

1218
00:45:59,599 --> 00:46:02,160
chris now

1219
00:46:02,160 --> 00:46:03,920
yep

1220
00:46:03,920 --> 00:46:06,160
yeah thanks tommy um

1221
00:46:06,160 --> 00:46:07,760
right so as time you said the the main

1222
00:46:07,760 --> 00:46:08,880
challenge in the protocol is to

1223
00:46:08,880 --> 00:46:10,720
basically compute the stable mapping

1224
00:46:10,720 --> 00:46:11,760
because we want to do it in such a way

1225
00:46:11,760 --> 00:46:13,920
that the the sort of buck identifier is

1226
00:46:13,920 --> 00:46:16,800
private to the attester

1227
00:46:16,800 --> 00:46:18,880
in particular

1228
00:46:18,880 --> 00:46:21,200
private in the sense that it the tester

1229
00:46:21,200 --> 00:46:22,880
doesn't learn the specific origin for

1230
00:46:22,880 --> 00:46:25,200
which the bucket corresponds to

1231
00:46:25,200 --> 00:46:27,280
um but it does have assurances that it

1232
00:46:27,280 --> 00:46:29,680
is sort of the the same

1233
00:46:29,680 --> 00:46:32,160
origin for a given client over time uh

1234
00:46:32,160 --> 00:46:34,000
otherwise it's it's difficult to reason

1235
00:46:34,000 --> 00:46:35,760
about or difficult to say that this is

1236
00:46:35,760 --> 00:46:37,680
meaningful rate limiting on a per client

1237
00:46:37,680 --> 00:46:39,359
and per origin basis

1238
00:46:39,359 --> 00:46:40,400
um

1239
00:46:40,400 --> 00:46:42,640
uh so to do so sort of the the way the

1240
00:46:42,640 --> 00:46:45,040
rate limited issuance protocol works is

1241
00:46:45,040 --> 00:46:47,200
a part of it um is that it computes this

1242
00:46:47,200 --> 00:46:50,160
this the stable mapping which is um you

1243
00:46:50,160 --> 00:46:51,680
can think of it's just a deterministic

1244
00:46:51,680 --> 00:46:53,839
function between this client secret and

1245
00:46:53,839 --> 00:46:55,760
this origin secret

1246
00:46:55,760 --> 00:46:57,440
where the client has

1247
00:46:57,440 --> 00:46:59,599
and maintains the client secret

1248
00:46:59,599 --> 00:47:01,920
and the issuer has and maintains the

1249
00:47:01,920 --> 00:47:04,160
origin secret a tester has access to

1250
00:47:04,160 --> 00:47:06,079
neither and therefore can't compute the

1251
00:47:06,079 --> 00:47:08,480
mapping

1252
00:47:09,040 --> 00:47:12,000
and uh this mapping is basically uh

1253
00:47:12,000 --> 00:47:13,760
you can use it as an index into whatever

1254
00:47:13,760 --> 00:47:15,200
other data structure you'd like to use

1255
00:47:15,200 --> 00:47:17,760
for enforcing rate limits um so if you

1256
00:47:17,760 --> 00:47:20,240
think back on the uh the token bucket

1257
00:47:20,240 --> 00:47:22,319
example you would use it as the for

1258
00:47:22,319 --> 00:47:23,920
example the hash table index that would

1259
00:47:23,920 --> 00:47:26,960
use to store and associate your accounts

1260
00:47:26,960 --> 00:47:28,400
uh or your token accounts for that

1261
00:47:28,400 --> 00:47:30,319
particular uh

1262
00:47:30,319 --> 00:47:32,559
or client per origin

1263
00:47:32,559 --> 00:47:33,680
bucket

1264
00:47:33,680 --> 00:47:34,880
um

1265
00:47:34,880 --> 00:47:36,640
and so the flow would be the tester

1266
00:47:36,640 --> 00:47:38,400
computes the secret arc computes his

1267
00:47:38,400 --> 00:47:40,640
mapping looks up in this table

1268
00:47:40,640 --> 00:47:41,760
and then

1269
00:47:41,760 --> 00:47:43,040
basically applies the rate limiting

1270
00:47:43,040 --> 00:47:45,520
policy

1271
00:47:46,079 --> 00:47:47,520
and

1272
00:47:47,520 --> 00:47:49,119
if you were to map this to sort of the

1273
00:47:49,119 --> 00:47:51,119
flow the issuance flow between the

1274
00:47:51,119 --> 00:47:53,359
client and tester and the issuer

1275
00:47:53,359 --> 00:47:56,960
sort of hand waving massively over

1276
00:47:56,960 --> 00:47:59,040
sort of the underlying details in terms

1277
00:47:59,040 --> 00:48:01,119
of how this stable mapping is computed

1278
00:48:01,119 --> 00:48:04,720
reserve those details to the document

1279
00:48:05,200 --> 00:48:08,160
basically the the the tester's job is to

1280
00:48:08,160 --> 00:48:11,200
uh in in interacting uh in

1281
00:48:11,200 --> 00:48:12,559
completing this protocol between the

1282
00:48:12,559 --> 00:48:14,240
client and the issuer is to compute the

1283
00:48:14,240 --> 00:48:15,520
stable mapping

1284
00:48:15,520 --> 00:48:18,160
decrement account um or rather that

1285
00:48:18,160 --> 00:48:19,680
should say increment count you'll find

1286
00:48:19,680 --> 00:48:21,359
that the the slide is hilariously wrong

1287
00:48:21,359 --> 00:48:23,599
in terms of like the the algorithm but

1288
00:48:23,599 --> 00:48:25,520
like hopefully the idea is clear

1289
00:48:25,520 --> 00:48:27,119
um basically

1290
00:48:27,119 --> 00:48:28,640
compute the mapping

1291
00:48:28,640 --> 00:48:31,280
apply the the the algorithm um and

1292
00:48:31,280 --> 00:48:32,640
either eject

1293
00:48:32,640 --> 00:48:36,000
accept the request um and and forward

1294
00:48:36,000 --> 00:48:37,520
the token response back down to the

1295
00:48:37,520 --> 00:48:38,400
client

1296
00:48:38,400 --> 00:48:40,400
um or drop down the floor sending the

1297
00:48:40,400 --> 00:48:44,480
client down an appropriate error code um

1298
00:48:44,480 --> 00:48:45,520
and this

1299
00:48:45,520 --> 00:48:46,319
uh

1300
00:48:46,319 --> 00:48:47,599
you know

1301
00:48:47,599 --> 00:48:49,680
the the close reader will understand why

1302
00:48:49,680 --> 00:48:51,520
this is wrong uh in terms of like what

1303
00:48:51,520 --> 00:48:53,440
the what the check is actually doing

1304
00:48:53,440 --> 00:48:55,280
um

1305
00:48:55,280 --> 00:48:56,319
but i think

1306
00:48:56,319 --> 00:48:59,040
you should get the idea

1307
00:49:00,480 --> 00:49:01,760
um

1308
00:49:01,760 --> 00:49:03,920
so the i think that the the novelty is

1309
00:49:03,920 --> 00:49:05,440
that we build on the this new scheme

1310
00:49:05,440 --> 00:49:07,359
that we're presenting at cfrg next uh

1311
00:49:07,359 --> 00:49:08,319
for

1312
00:49:08,319 --> 00:49:11,520
uh computing these stable mappings um

1313
00:49:11,520 --> 00:49:14,160
uh in particular uh this uh what we call

1314
00:49:14,160 --> 00:49:16,960
a signature scheme with key blinding

1315
00:49:16,960 --> 00:49:19,440
it looks something like an opr

1316
00:49:19,440 --> 00:49:22,800
but it's not quite an opr

1317
00:49:22,800 --> 00:49:24,720
if you're interested in sort of

1318
00:49:24,720 --> 00:49:26,720
learning more i encourage you to take

1319
00:49:26,720 --> 00:49:28,640
pop into the next session and check it

1320
00:49:28,640 --> 00:49:29,680
out

1321
00:49:29,680 --> 00:49:32,000
as tommy said it does require a split

1322
00:49:32,000 --> 00:49:33,920
deployment for meaningful privacy in

1323
00:49:33,920 --> 00:49:35,520
particular because the issuer does need

1324
00:49:35,520 --> 00:49:36,559
to learn

1325
00:49:36,559 --> 00:49:38,720
the origin name in order to associate

1326
00:49:38,720 --> 00:49:41,359
and use sort of the right origin secret

1327
00:49:41,359 --> 00:49:43,440
for computing the stable mapping

1328
00:49:43,440 --> 00:49:46,559
and as a result uh the attester um

1329
00:49:46,559 --> 00:49:48,640
who cannot learn sort of per origin

1330
00:49:48,640 --> 00:49:51,760
information uh thinking back on what we

1331
00:49:51,760 --> 00:49:54,000
think of as meaningful privacy uh needs

1332
00:49:54,000 --> 00:49:57,040
to be a separate entity

1333
00:49:57,280 --> 00:50:00,400
uh there are uh today a couple different

1334
00:50:00,400 --> 00:50:01,839
operable implementations of this

1335
00:50:01,839 --> 00:50:05,680
particular variant um uh using the the

1336
00:50:05,680 --> 00:50:08,160
signature scheme with ecdsa

1337
00:50:08,160 --> 00:50:10,240
um previous incarnations of this draft

1338
00:50:10,240 --> 00:50:13,440
used eddsa for the crypto um but we've

1339
00:50:13,440 --> 00:50:15,760
since changed that we could bring it

1340
00:50:15,760 --> 00:50:17,280
back uh

1341
00:50:17,280 --> 00:50:18,559
i guess we're not particular in the type

1342
00:50:18,559 --> 00:50:20,880
of crypto here um and there is a

1343
00:50:20,880 --> 00:50:22,960
security analysis underway for sort of

1344
00:50:22,960 --> 00:50:24,240
the both the new underlying

1345
00:50:24,240 --> 00:50:26,559
cryptographic scheme as well as sort of

1346
00:50:26,559 --> 00:50:28,880
how it plugs into the the larger rate

1347
00:50:28,880 --> 00:50:30,800
limited issuance protocol and what the

1348
00:50:30,800 --> 00:50:34,240
resulting privacy properties are

1349
00:50:36,160 --> 00:50:38,640
so at this point um

1350
00:50:38,640 --> 00:50:40,400
as i said without going into sort of the

1351
00:50:40,400 --> 00:50:42,720
crypto details i think those are uh

1352
00:50:42,720 --> 00:50:44,319
perhaps more useful for offline

1353
00:50:44,319 --> 00:50:47,920
discussion or um you know

1354
00:50:47,920 --> 00:50:49,839
cfrg in particular

1355
00:50:49,839 --> 00:50:51,839
um we want to know uh if the working

1356
00:50:51,839 --> 00:50:53,040
group is interested in adopting this

1357
00:50:53,040 --> 00:50:55,440
draft and i will stop here and turn it

1358
00:50:55,440 --> 00:50:57,040
over to

1359
00:50:57,040 --> 00:50:58,400
joe and john

1360
00:50:58,400 --> 00:51:01,839
or joe and ben sorry

1361
00:51:03,040 --> 00:51:05,520
okay ben

1362
00:51:05,520 --> 00:51:08,319
hi uh this is just as individual i want

1363
00:51:08,319 --> 00:51:10,480
to understand a little bit more about

1364
00:51:10,480 --> 00:51:11,520
the

1365
00:51:11,520 --> 00:51:13,839
um about the proposal and use case so

1366
00:51:13,839 --> 00:51:15,119
let me

1367
00:51:15,119 --> 00:51:17,359
um let me ask why

1368
00:51:17,359 --> 00:51:20,000
can't we um why can't we do this with

1369
00:51:20,000 --> 00:51:23,280
the standard or previous privacy pass

1370
00:51:23,280 --> 00:51:24,480
construction

1371
00:51:24,480 --> 00:51:26,160
so for example

1372
00:51:26,160 --> 00:51:28,960
let's talk about the the rate limiting

1373
00:51:28,960 --> 00:51:30,640
paywall case

1374
00:51:30,640 --> 00:51:32,960
if i'm a magazine

1375
00:51:32,960 --> 00:51:37,119
i could act as both issuer and

1376
00:51:37,119 --> 00:51:40,559
uh and and validator

1377
00:51:40,559 --> 00:51:43,520
and users could make an account with my

1378
00:51:43,520 --> 00:51:44,960
um

1379
00:51:44,960 --> 00:51:46,160
with my

1380
00:51:46,160 --> 00:51:48,319
origin and then i would say

1381
00:51:48,319 --> 00:51:50,400
you know you have a free account so i'm

1382
00:51:50,400 --> 00:51:52,160
going to issue you

1383
00:51:52,160 --> 00:51:53,760
uh three tokens a month and then i'm

1384
00:51:53,760 --> 00:51:56,400
going to execute a redemption

1385
00:51:56,400 --> 00:52:00,160
on uh you know to to do a token spend

1386
00:52:00,160 --> 00:52:01,119
event

1387
00:52:01,119 --> 00:52:04,720
every time you attempt to view an

1388
00:52:04,720 --> 00:52:06,640
article and so you'll run out of tokens

1389
00:52:06,640 --> 00:52:08,720
then when you try to get more tokens

1390
00:52:08,720 --> 00:52:10,800
that you know i can i can trigger the

1391
00:52:10,800 --> 00:52:12,240
rate limit so

1392
00:52:12,240 --> 00:52:13,040
um

1393
00:52:13,040 --> 00:52:14,559
you know why

1394
00:52:14,559 --> 00:52:18,359
why isn't that the architecture

1395
00:52:24,800 --> 00:52:26,000
yeah that's fine

1396
00:52:26,000 --> 00:52:27,200
um

1397
00:52:27,200 --> 00:52:29,760
so you mean yes you're right that if i'm

1398
00:52:29,760 --> 00:52:32,800
willing to create an account

1399
00:52:32,800 --> 00:52:34,880
with the origin

1400
00:52:34,880 --> 00:52:37,119
and

1401
00:52:37,280 --> 00:52:38,880
you could definitely use it for that

1402
00:52:38,880 --> 00:52:41,200
case

1403
00:52:43,839 --> 00:52:46,000
this model is more for when you haven't

1404
00:52:46,000 --> 00:52:47,599
created an account because if i if i can

1405
00:52:47,599 --> 00:52:49,200
create an account

1406
00:52:49,200 --> 00:52:50,319
with

1407
00:52:50,319 --> 00:52:52,000
you know the new york times i can

1408
00:52:52,000 --> 00:52:54,079
already

1409
00:52:54,079 --> 00:52:57,440
read my articles and that's not an issue

1410
00:52:57,440 --> 00:52:59,119
i think the more interesting case here

1411
00:52:59,119 --> 00:53:01,280
is talking about

1412
00:53:01,280 --> 00:53:03,440
the cases where you're trying to rate

1413
00:53:03,440 --> 00:53:05,920
limit for the fraud prevention case

1414
00:53:05,920 --> 00:53:08,960
let's say the actual account creation

1415
00:53:08,960 --> 00:53:11,040
time right so if what i'm trying to do

1416
00:53:11,040 --> 00:53:12,839
is

1417
00:53:12,839 --> 00:53:15,839
prevent you know device farms from

1418
00:53:15,839 --> 00:53:19,359
creating a bunch of abusive accounts

1419
00:53:19,359 --> 00:53:21,599
that's a case where you know today they

1420
00:53:21,599 --> 00:53:22,480
may

1421
00:53:22,480 --> 00:53:25,280
use captcha plus

1422
00:53:25,280 --> 00:53:28,640
rate limiting on ip addresses etc

1423
00:53:28,640 --> 00:53:29,520
and

1424
00:53:29,520 --> 00:53:31,680
the basic token issuance there

1425
00:53:31,680 --> 00:53:34,400
isn't always going to be enough

1426
00:53:34,400 --> 00:53:36,400
because they that will still not give

1427
00:53:36,400 --> 00:53:38,480
you confidence that these

1428
00:53:38,480 --> 00:53:41,200
aren't abusive

1429
00:53:41,200 --> 00:53:43,839
devices

1430
00:53:44,240 --> 00:53:46,240
so it's it is it's for specifically for

1431
00:53:46,240 --> 00:53:48,640
the anonymous case

1432
00:53:48,640 --> 00:53:51,040
yes sorry i wasn't clear when i said an

1433
00:53:51,040 --> 00:53:53,520
account here uh i didn't mean uh i

1434
00:53:53,520 --> 00:53:56,240
didn't mean an account in the uh that is

1435
00:53:56,240 --> 00:53:57,920
in the origin

1436
00:53:57,920 --> 00:53:59,200
um

1437
00:53:59,200 --> 00:54:00,640
i mean uh

1438
00:54:00,640 --> 00:54:04,319
i mean an account that is uh that is not

1439
00:54:04,319 --> 00:54:06,400
linkable to the origins but it is in a

1440
00:54:06,400 --> 00:54:08,880
the account is in a separate origin

1441
00:54:08,880 --> 00:54:10,960
uh but

1442
00:54:10,960 --> 00:54:12,640
it is uh

1443
00:54:12,640 --> 00:54:14,240
but it is providing the tokens it is

1444
00:54:14,240 --> 00:54:17,920
acting as as issuer in in standard

1445
00:54:17,920 --> 00:54:19,839
yeah

1446
00:54:19,839 --> 00:54:20,960
okay

1447
00:54:20,960 --> 00:54:24,000
that's essentially

1448
00:54:24,000 --> 00:54:25,280
what

1449
00:54:25,280 --> 00:54:28,079
this is then um

1450
00:54:28,079 --> 00:54:29,440
but so

1451
00:54:29,440 --> 00:54:31,200
in that case if i have an account that

1452
00:54:31,200 --> 00:54:33,680
says oh you get to read articles or you

1453
00:54:33,680 --> 00:54:35,359
get to do this

1454
00:54:35,359 --> 00:54:37,119
um

1455
00:54:37,119 --> 00:54:39,520
that thing if it wants to rate limit to

1456
00:54:39,520 --> 00:54:43,119
you to say i will give you only three

1457
00:54:43,119 --> 00:54:46,480
right um it kind of needs to know

1458
00:54:46,480 --> 00:54:47,680
what

1459
00:54:47,680 --> 00:54:48,880
what those are

1460
00:54:48,880 --> 00:54:51,880
for

1461
00:54:53,119 --> 00:54:54,799
like unless you're setting up a new one

1462
00:54:54,799 --> 00:54:56,400
of those accounts

1463
00:54:56,400 --> 00:54:58,559
for every

1464
00:54:58,559 --> 00:55:01,440
service so like

1465
00:55:01,680 --> 00:55:03,119
do you think i have like a new

1466
00:55:03,119 --> 00:55:05,359
one-to-one mapping

1467
00:55:05,359 --> 00:55:09,040
of like some other rate limiting service

1468
00:55:09,040 --> 00:55:11,279
right

1469
00:55:11,680 --> 00:55:13,920
but i i think the issue then is at that

1470
00:55:13,920 --> 00:55:15,440
point

1471
00:55:15,440 --> 00:55:17,200
it it sounds like it would be fairly

1472
00:55:17,200 --> 00:55:20,720
easy to know

1473
00:55:20,720 --> 00:55:22,319
when i signed up for that service like

1474
00:55:22,319 --> 00:55:24,720
oh this is the service to give me tokens

1475
00:55:24,720 --> 00:55:25,680
for

1476
00:55:25,680 --> 00:55:27,839
the new york times and so that thing

1477
00:55:27,839 --> 00:55:31,200
does know when i am getting those

1478
00:55:31,200 --> 00:55:33,119
tommy you're saying that the the thing

1479
00:55:33,119 --> 00:55:34,880
that has the account the free account as

1480
00:55:34,880 --> 00:55:36,400
ben described it would then basically

1481
00:55:36,400 --> 00:55:38,319
learn the browsing history

1482
00:55:38,319 --> 00:55:40,880
of the client

1483
00:55:42,000 --> 00:55:44,480
i guess i guess you could get the tokens

1484
00:55:44,480 --> 00:55:46,960
earlier

1485
00:55:46,960 --> 00:55:48,960
still but but still like if it's

1486
00:55:48,960 --> 00:55:51,280
enforcing you're having this per origin

1487
00:55:51,280 --> 00:55:53,599
state

1488
00:55:53,599 --> 00:55:55,119
somewhere like essentially someone is

1489
00:55:55,119 --> 00:55:56,880
needing to keep track of

1490
00:55:56,880 --> 00:55:58,960
these are all of the

1491
00:55:58,960 --> 00:56:00,799
sites you want to

1492
00:56:00,799 --> 00:56:02,720
sign up for accounts on or all the sites

1493
00:56:02,720 --> 00:56:04,640
that you want to be able to

1494
00:56:04,640 --> 00:56:06,319
read articles on

1495
00:56:06,319 --> 00:56:08,000
and partly what i'm

1496
00:56:08,000 --> 00:56:09,599
looking for here is a way to take that

1497
00:56:09,599 --> 00:56:12,000
state and shard it out and push it into

1498
00:56:12,000 --> 00:56:14,799
an entity that is accountable and funded

1499
00:56:14,799 --> 00:56:15,760
by

1500
00:56:15,760 --> 00:56:16,799
the

1501
00:56:16,799 --> 00:56:19,119
um by the origin

1502
00:56:19,119 --> 00:56:21,839
as opposed to um having it all

1503
00:56:21,839 --> 00:56:23,760
essentially centralized in a single

1504
00:56:23,760 --> 00:56:26,000
attester which has to maintain this like

1505
00:56:26,000 --> 00:56:28,319
potentially unbounded amount of state

1506
00:56:28,319 --> 00:56:30,160
for like all of the different origins

1507
00:56:30,160 --> 00:56:33,920
that the user is potentially active on

1508
00:56:35,200 --> 00:56:38,480
okay um so okay um i mean stepping back

1509
00:56:38,480 --> 00:56:40,799
to the question at hand uh

1510
00:56:40,799 --> 00:56:43,680
i'll just say i um

1511
00:56:43,680 --> 00:56:44,799
you know i

1512
00:56:44,799 --> 00:56:47,599
my my feeling as individual here is is

1513
00:56:47,599 --> 00:56:48,400
that

1514
00:56:48,400 --> 00:56:50,000
um

1515
00:56:50,000 --> 00:56:52,559
i wish i i could see a little

1516
00:56:52,559 --> 00:56:54,400
i wish i were a little more confident

1517
00:56:54,400 --> 00:56:55,359
that

1518
00:56:55,359 --> 00:56:58,559
uh that this is the

1519
00:56:58,559 --> 00:57:01,599
simplest solution

1520
00:57:02,160 --> 00:57:04,559
in the in the broader architectural

1521
00:57:04,559 --> 00:57:07,559
context

1522
00:57:15,520 --> 00:57:17,839
uh tommy are you in the key okay so

1523
00:57:17,839 --> 00:57:22,359
jonna yeah that was just to respond

1524
00:57:28,480 --> 00:57:30,960
just wanted to quickly respond to ben's

1525
00:57:30,960 --> 00:57:33,920
comment then i i i think i would 100

1526
00:57:33,920 --> 00:57:36,000
agree with you uh that if there was

1527
00:57:36,000 --> 00:57:37,920
something simpler we should absolutely

1528
00:57:37,920 --> 00:57:39,440
do the simpler thing

1529
00:57:39,440 --> 00:57:41,119
and i would encourage

1530
00:57:41,119 --> 00:57:42,480
folks to

1531
00:57:42,480 --> 00:57:43,760
think about how this could be made

1532
00:57:43,760 --> 00:57:45,040
simpler

1533
00:57:45,040 --> 00:57:46,400
and share that

1534
00:57:46,400 --> 00:57:50,760
either on the list or in github

1535
00:57:54,720 --> 00:57:56,720
yeah i i just wanted to

1536
00:57:56,720 --> 00:57:58,400
go on that that

1537
00:57:58,400 --> 00:58:01,760
oh john are you done i'm sorry

1538
00:58:02,240 --> 00:58:05,520
yes i assume you're done thank you um

1539
00:58:05,520 --> 00:58:06,480
um

1540
00:58:06,480 --> 00:58:08,720
the the key challenge here um was in

1541
00:58:08,720 --> 00:58:11,200
that in trying to

1542
00:58:11,200 --> 00:58:12,960
uh

1543
00:58:12,960 --> 00:58:15,280
build in a mechanism for uh sort of

1544
00:58:15,280 --> 00:58:16,960
keeping the state

1545
00:58:16,960 --> 00:58:18,079
um

1546
00:58:18,079 --> 00:58:19,920
uh we did not want the

1547
00:58:19,920 --> 00:58:22,240
the thing maintaining the state to be

1548
00:58:22,240 --> 00:58:24,559
able to effectively reconstruct

1549
00:58:24,559 --> 00:58:25,760
um any

1550
00:58:25,760 --> 00:58:27,839
any like browsing information or any

1551
00:58:27,839 --> 00:58:30,079
sort of pre-origin information um about

1552
00:58:30,079 --> 00:58:31,200
the the

1553
00:58:31,200 --> 00:58:32,559
the thing that it's enforcing rate

1554
00:58:32,559 --> 00:58:34,000
limits for

1555
00:58:34,000 --> 00:58:35,200
um

1556
00:58:35,200 --> 00:58:38,160
uh indeed like earlier designs uh were a

1557
00:58:38,160 --> 00:58:41,359
lot simpler um uh and but they enabled

1558
00:58:41,359 --> 00:58:43,359
the attester um i don't know if it was

1559
00:58:43,359 --> 00:58:44,559
called the adjuster at that particular

1560
00:58:44,559 --> 00:58:46,799
point but they enabled the attester um

1561
00:58:46,799 --> 00:58:49,200
to learn that information

1562
00:58:49,200 --> 00:58:50,880
um

1563
00:58:50,880 --> 00:58:52,400
and

1564
00:58:52,400 --> 00:58:55,200
in in trying to address that uh this was

1565
00:58:55,200 --> 00:58:56,960
the this was not the first solution that

1566
00:58:56,960 --> 00:58:59,040
we came up with but is it i think it is

1567
00:58:59,040 --> 00:59:00,559
the one that has

1568
00:59:00,559 --> 00:59:03,599
um uh the desired functional properties

1569
00:59:03,599 --> 00:59:05,040
as well as the desired privacy

1570
00:59:05,040 --> 00:59:06,160
properties

1571
00:59:06,160 --> 00:59:07,040
um

1572
00:59:07,040 --> 00:59:08,559
and and just to

1573
00:59:08,559 --> 00:59:10,400
heavily plus one to what jonah said if

1574
00:59:10,400 --> 00:59:12,400
there is a simpler solution we would

1575
00:59:12,400 --> 00:59:13,760
love to see it

1576
00:59:13,760 --> 00:59:15,119
um

1577
00:59:15,119 --> 00:59:16,799
but the

1578
00:59:16,799 --> 00:59:18,960
the the the core challenge i think

1579
00:59:18,960 --> 00:59:22,240
remains the same um

1580
00:59:22,640 --> 00:59:24,799
so

1581
00:59:29,119 --> 00:59:31,599
okay i think we're just about out of

1582
00:59:31,599 --> 00:59:33,760
time

1583
00:59:33,760 --> 00:59:35,680
so i think we'll have to continue this

1584
00:59:35,680 --> 00:59:38,079
this discussion on the list and and

1585
00:59:38,079 --> 00:59:40,319
maybe we'll try to get an interim before

1586
00:59:40,319 --> 00:59:41,920
the next

1587
00:59:41,920 --> 00:59:44,960
ietf to discuss this and and some of the

1588
00:59:44,960 --> 00:59:47,119
consolidation issues and

1589
00:59:47,119 --> 00:59:49,760
other topics

1590
00:59:51,760 --> 00:59:53,440
all right thank you very much and for

1591
00:59:53,440 --> 00:59:55,520
folks in the room if you didn't check in

1592
00:59:55,520 --> 00:59:57,119
i think you might still be able to check

1593
00:59:57,119 --> 00:59:59,680
in uh i want to make sure everybody we

1594
00:59:59,680 --> 01:00:01,680
count everybody

1595
01:00:01,680 --> 01:00:04,919
thank you

1596
01:00:23,680 --> 01:00:25,760
these masks increase the concentration

1597
01:00:25,760 --> 01:00:29,319
of carbon dioxide

1598
01:00:29,920 --> 01:00:34,040
makes it a little bit a challenge

1599
01:01:20,559 --> 01:01:23,559
oh

1600
01:01:28,640 --> 01:01:33,160
thank you very much those in the room

1601
01:01:48,400 --> 01:01:51,400
uh

1602
01:01:55,119 --> 01:01:58,280
thank you

1603
01:02:24,640 --> 01:02:26,720
you

