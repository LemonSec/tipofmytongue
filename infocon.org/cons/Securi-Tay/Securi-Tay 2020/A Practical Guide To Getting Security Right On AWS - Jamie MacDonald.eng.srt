1
00:00:02,960 --> 00:00:05,439
um

2
00:00:03,600 --> 00:00:07,520
so welcome to doing security right on

3
00:00:05,440 --> 00:00:08,960
aws how not to end up as a caution

4
00:00:07,520 --> 00:00:11,120
retail on the register

5
00:00:08,960 --> 00:00:12,639
um so it's going to be a bit of a

6
00:00:11,120 --> 00:00:13,840
whirlwind tour for everything i think

7
00:00:12,639 --> 00:00:16,160
you need to know from kind of first

8
00:00:13,840 --> 00:00:17,759
setting up anyways account um

9
00:00:16,160 --> 00:00:19,760
securing it and then all the way through

10
00:00:17,760 --> 00:00:21,680
to trying to build a secure and

11
00:00:19,760 --> 00:00:22,640
resilient web app using all the tools

12
00:00:21,680 --> 00:00:26,160
that aws

13
00:00:22,640 --> 00:00:27,680
offers um so who am i and why do i think

14
00:00:26,160 --> 00:00:29,119
i'm vaguely qualified to talk to you

15
00:00:27,680 --> 00:00:32,399
about cloud security

16
00:00:29,119 --> 00:00:33,760
uh so i'm john mcdonald um for the past

17
00:00:32,399 --> 00:00:35,200
four years or so i've been working on

18
00:00:33,760 --> 00:00:36,480
infosec and specializing in cloud

19
00:00:35,200 --> 00:00:38,640
security

20
00:00:36,480 --> 00:00:39,680
and i started off at an edinburgh

21
00:00:38,640 --> 00:00:40,640
startup that some of you might have

22
00:00:39,680 --> 00:00:42,160
heard of

23
00:00:40,640 --> 00:00:44,079
uh called zone fox we made a cyber

24
00:00:42,160 --> 00:00:46,800
security product to help protect against

25
00:00:44,079 --> 00:00:48,399
insider threat so people um accidentally

26
00:00:46,800 --> 00:00:49,919
or maliciously taking data out of your

27
00:00:48,399 --> 00:00:52,239
business things like that

28
00:00:49,920 --> 00:00:54,000
um i was the lead for cyber security

29
00:00:52,239 --> 00:00:57,199
there across the whole business

30
00:00:54,000 --> 00:00:58,960
and i designed taking our application

31
00:00:57,199 --> 00:01:02,399
and turning it into an aws

32
00:00:58,960 --> 00:01:04,320
sas platform um then in 2018

33
00:01:02,399 --> 00:01:06,479
zone fox got bought by fortinet who are

34
00:01:04,319 --> 00:01:08,158
a big u.s cyber security company

35
00:01:06,479 --> 00:01:10,240
and they cover all sorts of areas

36
00:01:08,159 --> 00:01:12,799
firewalls endpoint protection

37
00:01:10,240 --> 00:01:14,399
things like that um and we got rebranded

38
00:01:12,799 --> 00:01:16,400
as 40 insight

39
00:01:14,400 --> 00:01:18,159
uh so now at fortinet i'm the head of

40
00:01:16,400 --> 00:01:19,759
security for 40 insight and

41
00:01:18,159 --> 00:01:21,280
i work on securing the software as we

42
00:01:19,759 --> 00:01:24,720
build it and also running it

43
00:01:21,280 --> 00:01:27,520
um on our cloud platform

44
00:01:24,720 --> 00:01:28,240
so what we're actually going to cover um

45
00:01:27,520 --> 00:01:29,600
first up

46
00:01:28,240 --> 00:01:31,039
um well there's three fairly

47
00:01:29,600 --> 00:01:32,960
equal-length sections that might be of

48
00:01:31,040 --> 00:01:34,960
interest to different people

49
00:01:32,960 --> 00:01:36,880
um so to start with how do you actually

50
00:01:34,960 --> 00:01:38,960
get started on with an aws environment

51
00:01:36,880 --> 00:01:40,880
um kind of for those of you who have not

52
00:01:38,960 --> 00:01:42,079
yet done anything with aws or you've got

53
00:01:40,880 --> 00:01:43,439
some basic stuff and you want to know

54
00:01:42,079 --> 00:01:44,960
how you should how you should be doing

55
00:01:43,439 --> 00:01:46,158
it and structuring it for real world

56
00:01:44,960 --> 00:01:48,479
usage

57
00:01:46,159 --> 00:01:50,399
and secondly what tools you should be

58
00:01:48,479 --> 00:01:52,240
using to actually secure the accounts

59
00:01:50,399 --> 00:01:54,320
and for kind of security engineers and

60
00:01:52,240 --> 00:01:55,280
people with an interest in securing the

61
00:01:54,320 --> 00:01:57,279
environment

62
00:01:55,280 --> 00:01:58,880
talking about the foundational services

63
00:01:57,280 --> 00:01:59,920
that we we need to know about or at

64
00:01:58,880 --> 00:02:01,119
least the ones that you need to know

65
00:01:59,920 --> 00:02:03,360
exist

66
00:02:01,119 --> 00:02:04,479
and then finally we're going to combine

67
00:02:03,360 --> 00:02:06,079
all that

68
00:02:04,479 --> 00:02:07,679
and talk about building a secure and

69
00:02:06,079 --> 00:02:09,199
resilient web app kind of for people

70
00:02:07,680 --> 00:02:10,560
like devs and security architects who

71
00:02:09,199 --> 00:02:12,480
are interested

72
00:02:10,560 --> 00:02:14,239
in building something in a cloud native

73
00:02:12,480 --> 00:02:15,679
way um

74
00:02:14,239 --> 00:02:17,120
and remembering at that point that

75
00:02:15,680 --> 00:02:18,480
security isn't just all about stopping

76
00:02:17,120 --> 00:02:19,440
the hacksaws and keeping your secrets

77
00:02:18,480 --> 00:02:22,079
and what other things you need to

78
00:02:19,440 --> 00:02:24,400
consider along the way

79
00:02:22,080 --> 00:02:27,040
so i'm assuming that most people here

80
00:02:24,400 --> 00:02:29,680
have no knowledge whatsoever about aws

81
00:02:27,040 --> 00:02:31,359
um so i'm going to use a few services

82
00:02:29,680 --> 00:02:31,920
and my examples are coming up so just in

83
00:02:31,360 --> 00:02:33,519
case

84
00:02:31,920 --> 00:02:35,119
um you're not aware of them i'll quickly

85
00:02:33,519 --> 00:02:38,959
explain what they are um

86
00:02:35,120 --> 00:02:40,959
ec2 the elastic compute cloud is the vm

87
00:02:38,959 --> 00:02:42,239
running service essentially for running

88
00:02:40,959 --> 00:02:43,840
virtual machines on a variety of

89
00:02:42,239 --> 00:02:47,680
hardware from anything up to

90
00:02:43,840 --> 00:02:49,519
hundreds of cores and terabytes of ram

91
00:02:47,680 --> 00:02:52,080
s3 is a simple storage service it's

92
00:02:49,519 --> 00:02:55,760
basically just fairly cheap and durable

93
00:02:52,080 --> 00:02:57,200
file storage in the cloud and then i am

94
00:02:55,760 --> 00:02:59,359
identity and access management which

95
00:02:57,200 --> 00:03:00,159
defines all of your permissions across

96
00:02:59,360 --> 00:03:01,680
the

97
00:03:00,159 --> 00:03:03,200
your accounts for users and the

98
00:03:01,680 --> 00:03:06,319
resources that you have

99
00:03:03,200 --> 00:03:06,720
running in them it's also worth knowing

100
00:03:06,319 --> 00:03:08,879
uh

101
00:03:06,720 --> 00:03:10,080
aws is split geographically into regions

102
00:03:08,879 --> 00:03:12,079
so there's 22 regions

103
00:03:10,080 --> 00:03:13,920
across the world and that you can

104
00:03:12,080 --> 00:03:15,760
provision your infrastructure into

105
00:03:13,920 --> 00:03:17,599
and generally you use the one nearest

106
00:03:15,760 --> 00:03:19,280
you or any specific one that you need to

107
00:03:17,599 --> 00:03:20,238
for compliance reasons or something like

108
00:03:19,280 --> 00:03:21,680
that

109
00:03:20,239 --> 00:03:23,519
and then each region is split into

110
00:03:21,680 --> 00:03:25,200
availability zones which are clusters of

111
00:03:23,519 --> 00:03:26,640
data centers that are close enough to

112
00:03:25,200 --> 00:03:27,518
each other they can have low latency

113
00:03:26,640 --> 00:03:29,518
links between them

114
00:03:27,519 --> 00:03:30,720
but far enough apart that the natural

115
00:03:29,519 --> 00:03:32,159
disaster or something isn't going to

116
00:03:30,720 --> 00:03:36,239
take out

117
00:03:32,159 --> 00:03:38,720
multiple ac's so aws

118
00:03:36,239 --> 00:03:39,440
um aws don't actually publish the

119
00:03:38,720 --> 00:03:41,599
location

120
00:03:39,440 --> 00:03:42,959
of their availability zones um but

121
00:03:41,599 --> 00:03:46,000
wikileaks do

122
00:03:42,959 --> 00:03:48,480
um so here is a mock-up

123
00:03:46,000 --> 00:03:49,519
um of the kind of example spread that

124
00:03:48,480 --> 00:03:50,879
you would have for a few different

125
00:03:49,519 --> 00:03:54,080
availability zones

126
00:03:50,879 --> 00:03:57,200
um around dublin in the ireland region

127
00:03:54,080 --> 00:03:58,720
and paying for stuff on aws is just

128
00:03:57,200 --> 00:04:00,079
based on the resources that you actually

129
00:03:58,720 --> 00:04:02,400
use so it's not like a kind of an

130
00:04:00,080 --> 00:04:04,480
upfront monthly subscription or anything

131
00:04:02,400 --> 00:04:05,519
um and it's generally fairly

132
00:04:04,480 --> 00:04:07,439
straightforward so

133
00:04:05,519 --> 00:04:09,120
storage is building gigabytes that you

134
00:04:07,439 --> 00:04:09,920
use each month compute would be billed

135
00:04:09,120 --> 00:04:11,680
as miniature

136
00:04:09,920 --> 00:04:14,399
minutes of usage that you have each

137
00:04:11,680 --> 00:04:15,519
month and it's all just pay as you go so

138
00:04:14,400 --> 00:04:16,639
you see how much you're spending as you

139
00:04:15,519 --> 00:04:18,239
go along

140
00:04:16,639 --> 00:04:19,759
um and if you do fancy getting started

141
00:04:18,238 --> 00:04:21,279
there's a 12 month free tier that kind

142
00:04:19,759 --> 00:04:22,960
of has some restrictions in it it's not

143
00:04:21,279 --> 00:04:25,119
just everything's free for a year

144
00:04:22,960 --> 00:04:26,638
and but at least gives you some

145
00:04:25,120 --> 00:04:29,840
resources to play around with for not

146
00:04:26,639 --> 00:04:29,840
much cash

147
00:04:30,400 --> 00:04:34,239
so the first section let's begin by

148
00:04:33,040 --> 00:04:36,000
actually designing the environment that

149
00:04:34,240 --> 00:04:38,400
we're going to build and getting started

150
00:04:36,000 --> 00:04:40,320
and you can see here to truly secure an

151
00:04:38,400 --> 00:04:42,320
aws account you must add more aws

152
00:04:40,320 --> 00:04:45,520
accounts which will make more sense

153
00:04:42,320 --> 00:04:46,880
as we as we go through um so the base

154
00:04:45,520 --> 00:04:47,280
level of knowledge i'm assuming as i've

155
00:04:46,880 --> 00:04:49,520
said

156
00:04:47,280 --> 00:04:50,479
is that you know nothing about aws and

157
00:04:49,520 --> 00:04:52,479
if you've done anything

158
00:04:50,479 --> 00:04:53,440
it's just set up an account and i'm not

159
00:04:52,479 --> 00:04:53,840
going to go through the steps for that

160
00:04:53,440 --> 00:04:56,080
because

161
00:04:53,840 --> 00:04:57,679
it's pretty straightforward and i don't

162
00:04:56,080 --> 00:04:59,840
think you need to walk through it

163
00:04:57,680 --> 00:05:00,800
so we've got an aws account we'll be

164
00:04:59,840 --> 00:05:03,359
your first of many

165
00:05:00,800 --> 00:05:04,800
we'll come to that um and you're logged

166
00:05:03,360 --> 00:05:05,680
in with what's known as the root user

167
00:05:04,800 --> 00:05:07,600
then

168
00:05:05,680 --> 00:05:09,199
so the root user is much like root on a

169
00:05:07,600 --> 00:05:10,639
linux machine it's a really highly

170
00:05:09,199 --> 00:05:12,080
privileged account you can do anything

171
00:05:10,639 --> 00:05:13,759
there's no restrictions

172
00:05:12,080 --> 00:05:15,440
including deleting all of your resources

173
00:05:13,759 --> 00:05:17,840
in the entire account

174
00:05:15,440 --> 00:05:18,960
um so obviously that makes a really high

175
00:05:17,840 --> 00:05:21,280
value account

176
00:05:18,960 --> 00:05:22,479
um we want to take steps to secure it

177
00:05:21,280 --> 00:05:24,080
and you're not going to want to use it

178
00:05:22,479 --> 00:05:25,669
just day to day for kind of your casual

179
00:05:24,080 --> 00:05:26,880
administration

180
00:05:25,670 --> 00:05:29,039
[Music]

181
00:05:26,880 --> 00:05:31,039
and as i said the first of many accounts

182
00:05:29,039 --> 00:05:32,639
thing it's worth just bearing in mind

183
00:05:31,039 --> 00:05:34,159
um or keeping in the back your head that

184
00:05:32,639 --> 00:05:36,639
you might want to end up

185
00:05:34,160 --> 00:05:37,280
with multiple accounts so for that

186
00:05:36,639 --> 00:05:38,800
reason

187
00:05:37,280 --> 00:05:40,719
it's worth making sure that the email

188
00:05:38,800 --> 00:05:42,320
account you use to sign up to aws

189
00:05:40,720 --> 00:05:44,240
is nice and secure because eventually

190
00:05:42,320 --> 00:05:46,719
that is going to be something that could

191
00:05:44,240 --> 00:05:47,600
let you into the entire uh entire setup

192
00:05:46,720 --> 00:05:50,800
that you build

193
00:05:47,600 --> 00:05:52,160
if that gets compromised so

194
00:05:50,800 --> 00:05:53,360
we're logged in with the root user we

195
00:05:52,160 --> 00:05:54,639
want to set things up so that we don't

196
00:05:53,360 --> 00:05:55,919
have to actually use it again because

197
00:05:54,639 --> 00:05:58,720
the best practice is to just

198
00:05:55,919 --> 00:05:59,198
stop using it basically so first things

199
00:05:58,720 --> 00:06:01,680
first

200
00:05:59,199 --> 00:06:03,520
aws generates access keys and secret

201
00:06:01,680 --> 00:06:05,199
keys for that root user

202
00:06:03,520 --> 00:06:06,400
which are kind of api keys you can use

203
00:06:05,199 --> 00:06:07,680
for command line tools or your

204
00:06:06,400 --> 00:06:09,440
application or whatever

205
00:06:07,680 --> 00:06:11,360
i'm running in that context of their

206
00:06:09,440 --> 00:06:12,160
master admin and so it's a pretty bad

207
00:06:11,360 --> 00:06:13,840
idea

208
00:06:12,160 --> 00:06:15,360
and so the first thing you need to do is

209
00:06:13,840 --> 00:06:17,039
delete those keys and

210
00:06:15,360 --> 00:06:18,240
it is an aws best practice the first

211
00:06:17,039 --> 00:06:19,280
thing to do is go and delete them i

212
00:06:18,240 --> 00:06:20,240
don't know why they put them there in

213
00:06:19,280 --> 00:06:22,000
the first place when the first thing

214
00:06:20,240 --> 00:06:24,880
you're supposed to do is delete them

215
00:06:22,000 --> 00:06:25,600
um and then once you've done that you

216
00:06:24,880 --> 00:06:28,719
want to turn

217
00:06:25,600 --> 00:06:30,720
on 2fa for that root account which aws

218
00:06:28,720 --> 00:06:33,759
call multi-factor authentication

219
00:06:30,720 --> 00:06:34,400
and which is really key for protecting

220
00:06:33,759 --> 00:06:36,319
um

221
00:06:34,400 --> 00:06:38,159
that kind of that master account so the

222
00:06:36,319 --> 00:06:39,680
best way to do this is with a hardware

223
00:06:38,160 --> 00:06:42,080
token like a ubikey

224
00:06:39,680 --> 00:06:43,520
um and literally keep it in a safe it's

225
00:06:42,080 --> 00:06:44,639
a really important credential that

226
00:06:43,520 --> 00:06:47,359
you're going to have to use

227
00:06:44,639 --> 00:06:48,319
um or if you're going to use a 2fa code

228
00:06:47,360 --> 00:06:49,759
generator app

229
00:06:48,319 --> 00:06:51,680
keep that little qr code that you get

230
00:06:49,759 --> 00:06:53,039
for it in a safe build a fireproof safe

231
00:06:51,680 --> 00:06:54,800
put in a bunker whatever

232
00:06:53,039 --> 00:06:55,840
um it's the most important set of

233
00:06:54,800 --> 00:06:57,280
credentials that you're going to have

234
00:06:55,840 --> 00:06:59,280
for your whole environment

235
00:06:57,280 --> 00:07:01,679
and so it's really important that you

236
00:06:59,280 --> 00:07:03,758
have them secured

237
00:07:01,680 --> 00:07:05,039
so if we know that we don't want to use

238
00:07:03,759 --> 00:07:06,080
the root user account

239
00:07:05,039 --> 00:07:08,560
what is it that we're supposed to use

240
00:07:06,080 --> 00:07:10,159
instead um we're going to create an

241
00:07:08,560 --> 00:07:11,120
admin user now that we can use for daily

242
00:07:10,160 --> 00:07:12,160
activity

243
00:07:11,120 --> 00:07:13,599
and to get start with that and

244
00:07:12,160 --> 00:07:14,240
understand that we need to know more

245
00:07:13,599 --> 00:07:18,319
about

246
00:07:14,240 --> 00:07:19,919
i am so i am is one of the foundational

247
00:07:18,319 --> 00:07:21,199
services for aws

248
00:07:19,919 --> 00:07:22,880
stands for identity and access

249
00:07:21,199 --> 00:07:24,800
management and basically defines what

250
00:07:22,880 --> 00:07:26,240
your users and resources can do

251
00:07:24,800 --> 00:07:28,479
and how they can interact with each

252
00:07:26,240 --> 00:07:30,479
other um it can get kind of as complex

253
00:07:28,479 --> 00:07:31,840
as you want it to be and so i'm going to

254
00:07:30,479 --> 00:07:33,359
try and just give a broad overview of

255
00:07:31,840 --> 00:07:35,039
all the key parts to give you an idea of

256
00:07:33,360 --> 00:07:37,520
how it can be used

257
00:07:35,039 --> 00:07:38,318
um it's important that you don't think

258
00:07:37,520 --> 00:07:42,080
of

259
00:07:38,319 --> 00:07:44,160
um users as just real people

260
00:07:42,080 --> 00:07:45,440
and but also the resources and services

261
00:07:44,160 --> 00:07:46,000
and how they will interact with each

262
00:07:45,440 --> 00:07:47,520
other

263
00:07:46,000 --> 00:07:48,720
um and it's also worth noting that it's

264
00:07:47,520 --> 00:07:50,479
free of charge so you don't need to

265
00:07:48,720 --> 00:07:51,919
skimp on having like a kind of good and

266
00:07:50,479 --> 00:07:53,599
secure permission set up

267
00:07:51,919 --> 00:07:55,680
just because you don't want to pay too

268
00:07:53,599 --> 00:07:57,680
much cash

269
00:07:55,680 --> 00:07:59,199
um so there's several key constructs

270
00:07:57,680 --> 00:08:00,400
that are used within im that you need to

271
00:07:59,199 --> 00:08:02,800
be familiar with

272
00:08:00,400 --> 00:08:04,159
um a user like an individual or an

273
00:08:02,800 --> 00:08:06,319
application that you're you're going to

274
00:08:04,160 --> 00:08:08,319
grant access to your resources

275
00:08:06,319 --> 00:08:09,360
um and groups a collection of users with

276
00:08:08,319 --> 00:08:11,360
the same permissions so it's fairly

277
00:08:09,360 --> 00:08:13,919
self-explanatory

278
00:08:11,360 --> 00:08:15,440
a policy where you actually define the

279
00:08:13,919 --> 00:08:16,960
permissions that you're going to use

280
00:08:15,440 --> 00:08:18,639
and i'll show an example of that in a

281
00:08:16,960 --> 00:08:21,280
second um

282
00:08:18,639 --> 00:08:23,280
and a rule which is again really

283
00:08:21,280 --> 00:08:25,359
important it's an aws construct that

284
00:08:23,280 --> 00:08:26,960
lets you give something running in aws

285
00:08:25,360 --> 00:08:29,680
like an ec2 instance

286
00:08:26,960 --> 00:08:30,560
um permission to do things to act on

287
00:08:29,680 --> 00:08:32,560
other resources

288
00:08:30,560 --> 00:08:33,679
without you having to manage access keys

289
00:08:32,559 --> 00:08:35,760
and secret keys just

290
00:08:33,679 --> 00:08:38,239
giving that responsibility to aws to do

291
00:08:35,760 --> 00:08:40,640
it for you

292
00:08:38,240 --> 00:08:41,760
so as we said the policies define the

293
00:08:40,640 --> 00:08:43,598
permissions that you're giving

294
00:08:41,760 --> 00:08:45,439
and are comprised of a bunch of

295
00:08:43,599 --> 00:08:47,040
different sections not all policies will

296
00:08:45,440 --> 00:08:48,720
have all these sections but all of them

297
00:08:47,040 --> 00:08:51,279
will have a selection of them

298
00:08:48,720 --> 00:08:52,720
so the key parts being a principle and

299
00:08:51,279 --> 00:08:54,640
just like who is doing this it's either

300
00:08:52,720 --> 00:08:55,680
going to be an iam user or a role most

301
00:08:54,640 --> 00:08:57,839
likely

302
00:08:55,680 --> 00:08:59,199
an action the thing that you're actually

303
00:08:57,839 --> 00:09:00,880
trying to do so that could be reading a

304
00:08:59,200 --> 00:09:03,200
file from s3 it could be launching a new

305
00:09:00,880 --> 00:09:05,920
ec2 instance something like that

306
00:09:03,200 --> 00:09:07,760
um the effect is quite powerful that you

307
00:09:05,920 --> 00:09:09,599
can both allow and deny things so you

308
00:09:07,760 --> 00:09:12,480
can build quite complex policies

309
00:09:09,600 --> 00:09:14,000
and to explicitly deny things in some

310
00:09:12,480 --> 00:09:15,040
occasions and allow and allow them in

311
00:09:14,000 --> 00:09:17,200
others

312
00:09:15,040 --> 00:09:18,719
the resource what thing you're actually

313
00:09:17,200 --> 00:09:20,560
acting on what's being affected so it

314
00:09:18,720 --> 00:09:21,680
might be a file an s3 a whole folder an

315
00:09:20,560 --> 00:09:25,040
s3

316
00:09:21,680 --> 00:09:27,359
or just like a specific ec2 instance um

317
00:09:25,040 --> 00:09:29,279
and finally a conditions clause that you

318
00:09:27,360 --> 00:09:29,760
can get real complicated with really

319
00:09:29,279 --> 00:09:33,120
quickly

320
00:09:29,760 --> 00:09:34,800
um to build really specific conditional

321
00:09:33,120 --> 00:09:35,519
policies that apply to just your use

322
00:09:34,800 --> 00:09:38,000
case

323
00:09:35,519 --> 00:09:38,800
and so maybe restricting a user's

324
00:09:38,000 --> 00:09:40,800
activities

325
00:09:38,800 --> 00:09:42,479
to only being from a particular ip

326
00:09:40,800 --> 00:09:43,920
address um

327
00:09:42,480 --> 00:09:46,320
or you could use tags which are like key

328
00:09:43,920 --> 00:09:48,719
value pairs that you assign to resources

329
00:09:46,320 --> 00:09:50,560
and to restrict your abilities to only

330
00:09:48,720 --> 00:09:52,080
be able to terminate instances that you

331
00:09:50,560 --> 00:09:55,279
personally have booted up

332
00:09:52,080 --> 00:09:56,240
um so understanding how the iam kind of

333
00:09:55,279 --> 00:09:57,439
stuff all works

334
00:09:56,240 --> 00:09:59,360
and how you build out policies that

335
00:09:57,440 --> 00:10:01,120
cover exactly what you're trying to do

336
00:09:59,360 --> 00:10:02,480
um is really useful if you're trying to

337
00:10:01,120 --> 00:10:03,920
build a secure environment so it's worth

338
00:10:02,480 --> 00:10:05,360
putting a little time up front into

339
00:10:03,920 --> 00:10:07,360
learning about

340
00:10:05,360 --> 00:10:09,120
so this is what i'm policy looks like

341
00:10:07,360 --> 00:10:11,360
it's a really straightforward example

342
00:10:09,120 --> 00:10:12,800
um so if you gave this to a user they

343
00:10:11,360 --> 00:10:13,839
would have permission to put new files

344
00:10:12,800 --> 00:10:15,359
into a bucket

345
00:10:13,839 --> 00:10:16,880
retrieve files out that bucket and then

346
00:10:15,360 --> 00:10:18,800
delete objects from that bucket

347
00:10:16,880 --> 00:10:20,640
as long as the bucket was the security

348
00:10:18,800 --> 00:10:23,279
bucket

349
00:10:20,640 --> 00:10:23,680
um so in an ideal world you would just

350
00:10:23,279 --> 00:10:26,480
give

351
00:10:23,680 --> 00:10:27,760
the permissions to someone they actually

352
00:10:26,480 --> 00:10:29,839
need to complete the task

353
00:10:27,760 --> 00:10:31,519
and so least privilege but working that

354
00:10:29,839 --> 00:10:34,320
out can actually be quite hard

355
00:10:31,519 --> 00:10:35,680
um you will find a lot of official aws

356
00:10:34,320 --> 00:10:37,600
tutorials that start by just giving an

357
00:10:35,680 --> 00:10:38,640
ec2 instance full admin privileges to do

358
00:10:37,600 --> 00:10:40,480
anything they want

359
00:10:38,640 --> 00:10:41,839
and while that's bad it's because it's

360
00:10:40,480 --> 00:10:42,800
really tricky to get right even for the

361
00:10:41,839 --> 00:10:44,720
experts

362
00:10:42,800 --> 00:10:45,920
um so by the end of the day you're

363
00:10:44,720 --> 00:10:47,839
trying to get as close to least

364
00:10:45,920 --> 00:10:51,120
privilege as you possibly can

365
00:10:47,839 --> 00:10:52,399
um so obviously by this point we can see

366
00:10:51,120 --> 00:10:54,240
that i am going to be a really powerful

367
00:10:52,399 --> 00:10:55,519
tool and it's going to be important

368
00:10:54,240 --> 00:10:57,440
but it kind of sucks if you're going to

369
00:10:55,519 --> 00:10:59,360
have to write json manually every time

370
00:10:57,440 --> 00:11:00,880
for everything that you're wanting to do

371
00:10:59,360 --> 00:11:03,120
and so this is where the managed

372
00:11:00,880 --> 00:11:04,640
policies come in so what these are

373
00:11:03,120 --> 00:11:06,320
are aws has come up with hundreds of

374
00:11:04,640 --> 00:11:07,760
predefined policies that cover

375
00:11:06,320 --> 00:11:10,000
common use cases that you might want to

376
00:11:07,760 --> 00:11:12,000
do so be that full admin access

377
00:11:10,000 --> 00:11:14,720
or the ability to have full control over

378
00:11:12,000 --> 00:11:17,839
ec2 instances read-only access to s3

379
00:11:14,720 --> 00:11:18,959
lots of kind of common use cases and

380
00:11:17,839 --> 00:11:21,839
so you can use them to help you get

381
00:11:18,959 --> 00:11:23,279
started and you can significantly reduce

382
00:11:21,839 --> 00:11:24,800
the permissions that you give to your

383
00:11:23,279 --> 00:11:26,560
users just by using these managed

384
00:11:24,800 --> 00:11:27,839
policies that already there for you

385
00:11:26,560 --> 00:11:30,160
and that can kind of boost your security

386
00:11:27,839 --> 00:11:31,519
a little bit without too much effort

387
00:11:30,160 --> 00:11:33,279
when you do start to want to get

388
00:11:31,519 --> 00:11:35,279
specific um

389
00:11:33,279 --> 00:11:36,480
the impolicy generator is a nice kind of

390
00:11:35,279 --> 00:11:37,680
gui tool that they have where you just

391
00:11:36,480 --> 00:11:38,560
have lots of tick boxes for all the

392
00:11:37,680 --> 00:11:41,120
permissions

393
00:11:38,560 --> 00:11:42,959
and it will help you build the json for

394
00:11:41,120 --> 00:11:43,279
you so let's talk a little bit more

395
00:11:42,959 --> 00:11:46,959
about

396
00:11:43,279 --> 00:11:48,480
roles so a kind of an odd but pretty

397
00:11:46,959 --> 00:11:49,040
accurate analogy is to think of an i am

398
00:11:48,480 --> 00:11:51,680
role

399
00:11:49,040 --> 00:11:52,560
like a hat that gives you special aws

400
00:11:51,680 --> 00:11:54,560
permissions

401
00:11:52,560 --> 00:11:56,239
um so a role will have a collection of

402
00:11:54,560 --> 00:11:56,959
policies like we've just been over that

403
00:11:56,240 --> 00:12:00,240
give you

404
00:11:56,959 --> 00:12:02,560
permission to do things um and then you

405
00:12:00,240 --> 00:12:03,839
or an aws service or resource assumes

406
00:12:02,560 --> 00:12:04,560
that role which is like you putting that

407
00:12:03,839 --> 00:12:05,760
hat on

408
00:12:04,560 --> 00:12:08,000
and suddenly you have all these

409
00:12:05,760 --> 00:12:10,000
permissions so if you gave

410
00:12:08,000 --> 00:12:12,160
an ec2 instance a role that had

411
00:12:10,000 --> 00:12:14,079
permission to read files from s3

412
00:12:12,160 --> 00:12:15,439
and then applications running on that

413
00:12:14,079 --> 00:12:16,319
instance would be able to read files

414
00:12:15,440 --> 00:12:19,040
from s3

415
00:12:16,320 --> 00:12:21,279
um without you having to write any code

416
00:12:19,040 --> 00:12:22,639
to do the authentication or manage

417
00:12:21,279 --> 00:12:25,360
the credentials the access keys and the

418
00:12:22,639 --> 00:12:26,639
secret keys um so they give you

419
00:12:25,360 --> 00:12:28,959
temporary credentials that are quite

420
00:12:26,639 --> 00:12:30,480
short-lived generally you can configure

421
00:12:28,959 --> 00:12:31,839
it between about 15 minutes and sort of

422
00:12:30,480 --> 00:12:35,760
36 hours

423
00:12:31,839 --> 00:12:37,440
um and after that period has elapsed aws

424
00:12:35,760 --> 00:12:39,120
rotates them for you and your app just

425
00:12:37,440 --> 00:12:41,120
requests a new set so even if those

426
00:12:39,120 --> 00:12:42,639
credentials do get compromised they'll

427
00:12:41,120 --> 00:12:43,680
be rotated pretty soon anyway so the

428
00:12:42,639 --> 00:12:46,800
impact isn't as

429
00:12:43,680 --> 00:12:49,040
significant um and most

430
00:12:46,800 --> 00:12:50,560
aws libraries or sdks that you might end

431
00:12:49,040 --> 00:12:53,120
up working with for your apps

432
00:12:50,560 --> 00:12:55,680
um they support these rules by default

433
00:12:53,120 --> 00:12:59,200
anyway with no configuration so

434
00:12:55,680 --> 00:13:00,000
if you don't supply explicit credentials

435
00:12:59,200 --> 00:13:01,440
to your app

436
00:13:00,000 --> 00:13:02,480
and then it will look in a row and it

437
00:13:01,440 --> 00:13:04,480
will pick up credentials from there

438
00:13:02,480 --> 00:13:06,240
without you having to do anything

439
00:13:04,480 --> 00:13:07,600
and you do work across accounts well if

440
00:13:06,240 --> 00:13:08,320
you've got a dev environment in a broad

441
00:13:07,600 --> 00:13:10,079
environment

442
00:13:08,320 --> 00:13:11,519
and you want to do work between the two

443
00:13:10,079 --> 00:13:14,800
of them

444
00:13:11,519 --> 00:13:16,240
um so let's take an example of an

445
00:13:14,800 --> 00:13:16,959
application that's running on an ec2

446
00:13:16,240 --> 00:13:20,000
instance

447
00:13:16,959 --> 00:13:22,160
and you want to access some files in s3

448
00:13:20,000 --> 00:13:24,399
so here we're not using roles instead

449
00:13:22,160 --> 00:13:26,079
we've got an access key and a secret key

450
00:13:24,399 --> 00:13:28,320
and it's configured somewhere on our

451
00:13:26,079 --> 00:13:29,839
server worst case you've like hard coded

452
00:13:28,320 --> 00:13:31,920
it into your actual app

453
00:13:29,839 --> 00:13:33,600
and hopefully they're kept more securely

454
00:13:31,920 --> 00:13:34,479
and like a config file or something like

455
00:13:33,600 --> 00:13:36,720
that

456
00:13:34,480 --> 00:13:38,399
um so what's going to happen here is

457
00:13:36,720 --> 00:13:40,079
your app takes those credentials and it

458
00:13:38,399 --> 00:13:41,680
will use them to authenticate an api

459
00:13:40,079 --> 00:13:44,000
call over to s3

460
00:13:41,680 --> 00:13:45,439
and s2 is going to be happy with that

461
00:13:44,000 --> 00:13:47,279
and it'll send your date back

462
00:13:45,440 --> 00:13:48,880
so that seems quite straightforward but

463
00:13:47,279 --> 00:13:50,959
we've had to come up with a way to store

464
00:13:48,880 --> 00:13:53,360
those keys securely and if

465
00:13:50,959 --> 00:13:54,638
we screw up and they do get compromised

466
00:13:53,360 --> 00:13:56,079
we're going to need to come back and

467
00:13:54,639 --> 00:13:58,240
either make changes to our app

468
00:13:56,079 --> 00:14:00,839
or changes to the infrastructure itself

469
00:13:58,240 --> 00:14:03,519
to to rotate those keys which kind of

470
00:14:00,839 --> 00:14:04,800
sucks so in this example

471
00:14:03,519 --> 00:14:06,160
we're going to use rules for it so it

472
00:14:04,800 --> 00:14:07,040
looks a little bit more complicated to

473
00:14:06,160 --> 00:14:09,439
start with

474
00:14:07,040 --> 00:14:11,040
um but actually the complexity instead

475
00:14:09,440 --> 00:14:13,600
of it being on us we've handed it over

476
00:14:11,040 --> 00:14:15,519
to aws to manage for us instead

477
00:14:13,600 --> 00:14:17,440
and so the instance that's running your

478
00:14:15,519 --> 00:14:18,720
app now uses its role

479
00:14:17,440 --> 00:14:20,959
to request a set of temporary

480
00:14:18,720 --> 00:14:22,959
credentials and then your application

481
00:14:20,959 --> 00:14:26,079
will use those temporary credentials

482
00:14:22,959 --> 00:14:27,760
to authenticate to s3 for you so

483
00:14:26,079 --> 00:14:29,439
bearing in mind these temporary keys get

484
00:14:27,760 --> 00:14:30,480
rotated really quickly maybe even every

485
00:14:29,440 --> 00:14:33,199
15 minutes

486
00:14:30,480 --> 00:14:34,720
um if they're somehow stolen it doesn't

487
00:14:33,199 --> 00:14:36,479
matter as much because the impact is

488
00:14:34,720 --> 00:14:38,079
reduced by the fact that aws rotate them

489
00:14:36,480 --> 00:14:40,320
all the time for you

490
00:14:38,079 --> 00:14:41,680
um so because of the simplicity of

491
00:14:40,320 --> 00:14:43,680
dealing with roles instead of

492
00:14:41,680 --> 00:14:44,800
the hard-coded credentials and you

493
00:14:43,680 --> 00:14:46,399
should be using them instead of

494
00:14:44,800 --> 00:14:48,399
the access keys and keys wherever you

495
00:14:46,399 --> 00:14:49,600
can so

496
00:14:48,399 --> 00:14:51,839
now that we've gone over a bit about

497
00:14:49,600 --> 00:14:53,120
rules let's give an example about why

498
00:14:51,839 --> 00:14:57,040
making them least privileged

499
00:14:53,120 --> 00:14:58,320
is more important so in this example

500
00:14:57,040 --> 00:15:00,959
kind of similar we've got an ec2

501
00:14:58,320 --> 00:15:03,279
instance it's trying to get files out s3

502
00:15:00,959 --> 00:15:04,399
um but in this case the ec2 instance has

503
00:15:03,279 --> 00:15:06,000
been compromised probably because we've

504
00:15:04,399 --> 00:15:08,959
left ssh open and it has a

505
00:15:06,000 --> 00:15:09,440
stupid default password or something um

506
00:15:08,959 --> 00:15:11,359
so

507
00:15:09,440 --> 00:15:13,120
we've given it a least privileged role

508
00:15:11,360 --> 00:15:16,639
um so it can access

509
00:15:13,120 --> 00:15:18,160
files from s3 and that's all it can do

510
00:15:16,639 --> 00:15:19,600
so if someone's compromised the instance

511
00:15:18,160 --> 00:15:20,399
they're using another command line

512
00:15:19,600 --> 00:15:22,160
that's on it

513
00:15:20,399 --> 00:15:23,440
to request some files out of s3 from

514
00:15:22,160 --> 00:15:25,040
that bucket that's going to work but

515
00:15:23,440 --> 00:15:26,240
that's okay because the instance already

516
00:15:25,040 --> 00:15:28,399
had permission to do that that's what

517
00:15:26,240 --> 00:15:31,440
we're intending the instance to do

518
00:15:28,399 --> 00:15:33,040
um but if they then try and use

519
00:15:31,440 --> 00:15:34,639
the credentials on that instance to spin

520
00:15:33,040 --> 00:15:36,160
up some uc2 instances

521
00:15:34,639 --> 00:15:37,279
then that api call is going to fail

522
00:15:36,160 --> 00:15:38,240
because they don't actually have the

523
00:15:37,279 --> 00:15:40,639
impermission

524
00:15:38,240 --> 00:15:41,519
to do that so let's now change the

525
00:15:40,639 --> 00:15:43,360
scenario a bit

526
00:15:41,519 --> 00:15:44,800
so the compromise instance has an i

527
00:15:43,360 --> 00:15:46,320
emerald that just grants it full admin

528
00:15:44,800 --> 00:15:48,079
access for everything

529
00:15:46,320 --> 00:15:49,759
and let's put ourselves in the shoes of

530
00:15:48,079 --> 00:15:50,719
an attacker who has compromised this

531
00:15:49,759 --> 00:15:53,920
instance

532
00:15:50,720 --> 00:15:54,320
so maybe the full admin access got added

533
00:15:53,920 --> 00:15:56,079
when

534
00:15:54,320 --> 00:15:57,519
devs were trying to debug an s3 issue

535
00:15:56,079 --> 00:15:59,279
and it just never got taken away

536
00:15:57,519 --> 00:16:00,959
and it's quite common it's the sort of

537
00:15:59,279 --> 00:16:02,240
thing it's easy to overlook

538
00:16:00,959 --> 00:16:04,399
so we're going to use a command line

539
00:16:02,240 --> 00:16:05,680
again request some files out of the s3

540
00:16:04,399 --> 00:16:07,519
bucket and that's going to work

541
00:16:05,680 --> 00:16:09,920
because the impermission lets them do

542
00:16:07,519 --> 00:16:11,600
that um

543
00:16:09,920 --> 00:16:13,199
but now we can also try and spin up some

544
00:16:11,600 --> 00:16:15,279
82 instances but that's also going to

545
00:16:13,199 --> 00:16:18,240
work because they've got full admin

546
00:16:15,279 --> 00:16:20,240
so your attacker might not care about

547
00:16:18,240 --> 00:16:21,839
being stealthy at this point and

548
00:16:20,240 --> 00:16:23,199
they've maybe taken a calculated guess

549
00:16:21,839 --> 00:16:24,560
if you don't manage to secure a single

550
00:16:23,199 --> 00:16:26,319
ec2 instance you maybe

551
00:16:24,560 --> 00:16:28,079
don't have extensive security monitoring

552
00:16:26,320 --> 00:16:29,199
in place and the first you're going to

553
00:16:28,079 --> 00:16:30,239
know about this is when you get your

554
00:16:29,199 --> 00:16:31,680
bill at the end of the month and it's

555
00:16:30,240 --> 00:16:33,759
like 10 grand

556
00:16:31,680 --> 00:16:35,599
um so bearing that in mind we're going

557
00:16:33,759 --> 00:16:38,399
to use the command line spin up

558
00:16:35,600 --> 00:16:39,759
47 massive new instances and because we

559
00:16:38,399 --> 00:16:40,800
have the lab men we're going to get them

560
00:16:39,759 --> 00:16:42,880
all to boot up

561
00:16:40,800 --> 00:16:44,399
from a boot drive that we're hosting in

562
00:16:42,880 --> 00:16:45,759
our account so as soon as they put up

563
00:16:44,399 --> 00:16:47,600
their start mining cryptocurrency and

564
00:16:45,759 --> 00:16:51,040
they're sending that over to us

565
00:16:47,600 --> 00:16:52,160
um but not our expense obviously uh

566
00:16:51,040 --> 00:16:54,319
but now we've got this nice little

567
00:16:52,160 --> 00:16:56,079
source of extra income and we don't want

568
00:16:54,320 --> 00:16:57,680
to lose it if somebody finds out the

569
00:16:56,079 --> 00:16:59,758
vulnerability in our original instance

570
00:16:57,680 --> 00:17:00,800
and closes that down

571
00:16:59,759 --> 00:17:02,880
so we're going to make a little

572
00:17:00,800 --> 00:17:04,639
insurance policy for ourselves and

573
00:17:02,880 --> 00:17:06,240
create a new iamb user so we can log

574
00:17:04,640 --> 00:17:08,079
into their console

575
00:17:06,240 --> 00:17:09,199
and do even more if we want to so it

576
00:17:08,079 --> 00:17:10,720
gives us a more kind of concrete

577
00:17:09,199 --> 00:17:12,640
foothold over the account

578
00:17:10,720 --> 00:17:13,839
um and at this point maybe we decided

579
00:17:12,640 --> 00:17:14,319
that we we don't want to make it too

580
00:17:13,839 --> 00:17:16,639
obvious

581
00:17:14,319 --> 00:17:18,159
um but because we have full admin we can

582
00:17:16,640 --> 00:17:19,360
list all the users that are already in

583
00:17:18,160 --> 00:17:20,640
their account and give it a really

584
00:17:19,359 --> 00:17:21,520
similar name so that when they're

585
00:17:20,640 --> 00:17:24,880
looking for stuff

586
00:17:21,520 --> 00:17:26,160
it just doesn't show up um so hopefully

587
00:17:24,880 --> 00:17:28,480
that's an example

588
00:17:26,160 --> 00:17:29,840
um of why it's really important to use

589
00:17:28,480 --> 00:17:31,840
least privileged stuff even for

590
00:17:29,840 --> 00:17:32,959
something as basic as just a web server

591
00:17:31,840 --> 00:17:34,559
and because

592
00:17:32,960 --> 00:17:36,400
you might be affected by it further down

593
00:17:34,559 --> 00:17:39,440
the line

594
00:17:36,400 --> 00:17:40,320
um so now we've had a kind of whirlwind

595
00:17:39,440 --> 00:17:42,080
overview into

596
00:17:40,320 --> 00:17:43,600
how to use i am which will hopefully

597
00:17:42,080 --> 00:17:45,199
begin to join up and make more sense as

598
00:17:43,600 --> 00:17:46,799
we go through the rest of the talk

599
00:17:45,200 --> 00:17:48,640
um we're going to cover this idea of

600
00:17:46,799 --> 00:17:50,160
multiple accounts so it's a weird

601
00:17:48,640 --> 00:17:51,760
concept all we've done is create our

602
00:17:50,160 --> 00:17:53,120
account we've not put anything in it yet

603
00:17:51,760 --> 00:17:54,240
we're already talking about adding more

604
00:17:53,120 --> 00:17:57,280
accounts

605
00:17:54,240 --> 00:18:00,720
and basically having multiple accounts

606
00:17:57,280 --> 00:18:02,879
lets you structure all your resources um

607
00:18:00,720 --> 00:18:04,320
in a way so for security it minimizes

608
00:18:02,880 --> 00:18:05,679
your blast radius

609
00:18:04,320 --> 00:18:07,360
and so in other words if you screw

610
00:18:05,679 --> 00:18:10,000
something up totally in dev

611
00:18:07,360 --> 00:18:11,199
and it's much less likely to impact

612
00:18:10,000 --> 00:18:11,760
stuff running in prod if you've got a

613
00:18:11,200 --> 00:18:14,640
whole new

614
00:18:11,760 --> 00:18:16,400
account for it um and similarly if

615
00:18:14,640 --> 00:18:17,840
resources one can get compromised

616
00:18:16,400 --> 00:18:20,080
it acts as a boundary to help you

617
00:18:17,840 --> 00:18:22,559
contain that compromise

618
00:18:20,080 --> 00:18:24,159
and then in a business context it's also

619
00:18:22,559 --> 00:18:24,799
helpful and much easier with multiple

620
00:18:24,160 --> 00:18:26,880
accounts

621
00:18:24,799 --> 00:18:28,080
to be able to easily split out costs for

622
00:18:26,880 --> 00:18:29,760
dev or prod

623
00:18:28,080 --> 00:18:30,879
and as well as any kind of supporting

624
00:18:29,760 --> 00:18:31,760
services you might be using like

625
00:18:30,880 --> 00:18:35,120
security or

626
00:18:31,760 --> 00:18:36,640
monitoring so there isn't really a wrong

627
00:18:35,120 --> 00:18:37,360
way to have multiple accounts which is

628
00:18:36,640 --> 00:18:38,960
nice

629
00:18:37,360 --> 00:18:42,240
the the structure just has to make sense

630
00:18:38,960 --> 00:18:43,360
for what it is that you are trying to do

631
00:18:42,240 --> 00:18:44,799
and you don't need to get it right first

632
00:18:43,360 --> 00:18:46,080
time you can keep adding your accounts

633
00:18:44,799 --> 00:18:47,280
for as long as you like as long as

634
00:18:46,080 --> 00:18:48,879
you've thought about

635
00:18:47,280 --> 00:18:50,559
um how it's going to work a little bit

636
00:18:48,880 --> 00:18:53,600
up front and you've designed it

637
00:18:50,559 --> 00:18:55,520
to be extensible so we're going to start

638
00:18:53,600 --> 00:18:56,879
with a basic one account environment

639
00:18:55,520 --> 00:18:58,960
we're going to use that for our user

640
00:18:56,880 --> 00:19:00,400
management our dev work all the hosting

641
00:18:58,960 --> 00:19:01,840
all the production stuff and also all

642
00:19:00,400 --> 00:19:02,720
our security monitoring and logging as

643
00:19:01,840 --> 00:19:06,000
well

644
00:19:02,720 --> 00:19:07,520
um but suddenly your app now has enough

645
00:19:06,000 --> 00:19:08,960
users that is critically important and

646
00:19:07,520 --> 00:19:10,320
you don't want your dev work to screw up

647
00:19:08,960 --> 00:19:12,000
its availability in prod

648
00:19:10,320 --> 00:19:13,280
so let's add another prod account and

649
00:19:12,000 --> 00:19:16,400
we'll pull out our production

650
00:19:13,280 --> 00:19:17,760
environments and stick them in that

651
00:19:16,400 --> 00:19:19,600
however now that it's started to become

652
00:19:17,760 --> 00:19:20,960
successful your investors are on your

653
00:19:19,600 --> 00:19:21,760
back about your running costs they're

654
00:19:20,960 --> 00:19:22,880
too high

655
00:19:21,760 --> 00:19:24,879
and you need to be able to give them

656
00:19:22,880 --> 00:19:26,720
up-to-date information about how much

657
00:19:24,880 --> 00:19:28,000
your prod stuff's costing versus how

658
00:19:26,720 --> 00:19:29,280
much you're spending on on the

659
00:19:28,000 --> 00:19:31,039
development of it

660
00:19:29,280 --> 00:19:33,840
and so let's pull the active development

661
00:19:31,039 --> 00:19:36,000
out to new account just for billing

662
00:19:33,840 --> 00:19:37,120
um and now that you're running a

663
00:19:36,000 --> 00:19:38,799
successful application

664
00:19:37,120 --> 00:19:40,879
you've decided now is the time you need

665
00:19:38,799 --> 00:19:42,879
to take security very seriously

666
00:19:40,880 --> 00:19:44,799
um so you want to avoid the scenario

667
00:19:42,880 --> 00:19:45,919
where compromising a dev or prod

668
00:19:44,799 --> 00:19:47,600
environment

669
00:19:45,919 --> 00:19:50,000
means that you lose access to the

670
00:19:47,600 --> 00:19:52,000
monitoring and logs for that environment

671
00:19:50,000 --> 00:19:53,760
and so we spin these out into another

672
00:19:52,000 --> 00:19:56,880
account that only the security team

673
00:19:53,760 --> 00:19:58,080
would have access to so how do we

674
00:19:56,880 --> 00:20:00,320
actually implement this

675
00:19:58,080 --> 00:20:02,158
um well a little while back aws

676
00:20:00,320 --> 00:20:03,918
introduced a tool specifically for

677
00:20:02,159 --> 00:20:05,280
managing a whole host of accounts and

678
00:20:03,919 --> 00:20:08,559
your organization that they've

679
00:20:05,280 --> 00:20:10,158
geniusly named aws organizations um

680
00:20:08,559 --> 00:20:12,240
you create an organization and from

681
00:20:10,159 --> 00:20:13,760
there and it's really straightforward to

682
00:20:12,240 --> 00:20:14,640
create new accounts and add them in and

683
00:20:13,760 --> 00:20:16,158
it just comes under the same

684
00:20:14,640 --> 00:20:18,640
consolidated kind of billing thing so

685
00:20:16,159 --> 00:20:20,159
it's really straightforward

686
00:20:18,640 --> 00:20:21,440
and at this point it's a good time to

687
00:20:20,159 --> 00:20:22,880
think about how you want your user

688
00:20:21,440 --> 00:20:24,320
management to work

689
00:20:22,880 --> 00:20:26,480
so the best practice way of doing this

690
00:20:24,320 --> 00:20:28,080
is with uh i am roles

691
00:20:26,480 --> 00:20:30,080
so you create roles in your accounts

692
00:20:28,080 --> 00:20:31,918
that have permission to to do the things

693
00:20:30,080 --> 00:20:34,320
that your users need to

694
00:20:31,919 --> 00:20:35,280
and then you log into your kind of main

695
00:20:34,320 --> 00:20:37,120
account with your

696
00:20:35,280 --> 00:20:38,799
imusers or your single sign-on provider

697
00:20:37,120 --> 00:20:40,799
that you've set up um

698
00:20:38,799 --> 00:20:42,080
and then the users assume roles in those

699
00:20:40,799 --> 00:20:42,799
child accounts and they can then carry

700
00:20:42,080 --> 00:20:44,559
out work

701
00:20:42,799 --> 00:20:46,080
in that context so you're probably going

702
00:20:44,559 --> 00:20:46,960
to end up with something that looks like

703
00:20:46,080 --> 00:20:48,799
that

704
00:20:46,960 --> 00:20:50,159
and so the design just needs to be

705
00:20:48,799 --> 00:20:51,520
something that works for you you can

706
00:20:50,159 --> 00:20:52,799
have as many accounts as you want it's

707
00:20:51,520 --> 00:20:54,720
not uncommon

708
00:20:52,799 --> 00:20:56,400
for large companies to end up with

709
00:20:54,720 --> 00:20:57,120
hundreds or thousands of accounts if you

710
00:20:56,400 --> 00:20:58,559
have

711
00:20:57,120 --> 00:21:00,479
loads of products and each one of them

712
00:20:58,559 --> 00:21:01,520
has a dev environment a qa environment a

713
00:21:00,480 --> 00:21:04,480
broad environment

714
00:21:01,520 --> 00:21:06,080
the number can balloon really quickly um

715
00:21:04,480 --> 00:21:08,080
but you also need to think about who can

716
00:21:06,080 --> 00:21:10,000
actually get access to what account

717
00:21:08,080 --> 00:21:11,120
um kind of in the whole least privilege

718
00:21:10,000 --> 00:21:12,799
thing

719
00:21:11,120 --> 00:21:14,639
so your master account is where the

720
00:21:12,799 --> 00:21:15,918
billing happens for for all of your sub

721
00:21:14,640 --> 00:21:17,760
accounts and you can get a breakdown of

722
00:21:15,919 --> 00:21:20,000
that and actually pay your bills

723
00:21:17,760 --> 00:21:21,360
and so we're going to give the finance

724
00:21:20,000 --> 00:21:22,960
team access to that one

725
00:21:21,360 --> 00:21:24,479
but they don't need to be able to manage

726
00:21:22,960 --> 00:21:26,000
the actual technical aspect of

727
00:21:24,480 --> 00:21:27,679
of the organization so we're going to

728
00:21:26,000 --> 00:21:29,520
restrict their impermissions just to

729
00:21:27,679 --> 00:21:30,960
their just to the billing stuff

730
00:21:29,520 --> 00:21:32,799
and then underneath that we can add

731
00:21:30,960 --> 00:21:34,960
child accounts and grant teams

732
00:21:32,799 --> 00:21:38,080
appropriate access to that based on

733
00:21:34,960 --> 00:21:38,080
based on their job role

734
00:21:40,799 --> 00:21:45,039
so now that we've gone over the idea of

735
00:21:42,960 --> 00:21:46,080
having multiple accounts

736
00:21:45,039 --> 00:21:48,720
we want to talk about how you will

737
00:21:46,080 --> 00:21:50,240
actually secure those accounts um

738
00:21:48,720 --> 00:21:52,400
and the things that you need to do to

739
00:21:50,240 --> 00:21:53,600
set them up

740
00:21:52,400 --> 00:21:55,039
so i'm going to go over some of the

741
00:21:53,600 --> 00:21:56,799
tools and services that you can use

742
00:21:55,039 --> 00:21:58,559
across kind of key security domains

743
00:21:56,799 --> 00:22:00,320
within aws the main ones

744
00:21:58,559 --> 00:22:01,918
logging monitoring encryption and a

745
00:22:00,320 --> 00:22:04,399
little bit of networking

746
00:22:01,919 --> 00:22:06,880
and touch on what features are worth

747
00:22:04,400 --> 00:22:08,720
turning on what services are worth using

748
00:22:06,880 --> 00:22:10,799
the best practices for some of them and

749
00:22:08,720 --> 00:22:12,000
then a couple of deep ish dives into

750
00:22:10,799 --> 00:22:15,280
some interesting parts of the tech

751
00:22:12,000 --> 00:22:16,559
to see how it actually works so before i

752
00:22:15,280 --> 00:22:17,918
begin go through all the services and

753
00:22:16,559 --> 00:22:19,200
the different security domains i want to

754
00:22:17,919 --> 00:22:20,799
touch on actually how

755
00:22:19,200 --> 00:22:22,960
you should do the implementation of the

756
00:22:20,799 --> 00:22:24,000
setup of this um

757
00:22:22,960 --> 00:22:25,919
we know we're probably going to end up

758
00:22:24,000 --> 00:22:28,000
with multiple accounts we know we may be

759
00:22:25,919 --> 00:22:29,600
well doing stuff across multiple regions

760
00:22:28,000 --> 00:22:31,280
so whatever configuration we have we

761
00:22:29,600 --> 00:22:33,039
want to make sure that it's easily

762
00:22:31,280 --> 00:22:34,320
repeatable into into all our different

763
00:22:33,039 --> 00:22:35,840
accounts and regions

764
00:22:34,320 --> 00:22:37,520
and and for this you're going to want to

765
00:22:35,840 --> 00:22:40,480
dive into infrastructure's code

766
00:22:37,520 --> 00:22:41,520
has anybody heard of that before okay a

767
00:22:40,480 --> 00:22:43,760
few people

768
00:22:41,520 --> 00:22:44,559
um so if you've not come across this

769
00:22:43,760 --> 00:22:46,158
concept before

770
00:22:44,559 --> 00:22:47,678
it basically means that you write up

771
00:22:46,159 --> 00:22:48,960
your kind of desired state

772
00:22:47,679 --> 00:22:50,880
for all of your resources and your

773
00:22:48,960 --> 00:22:52,480
accounts and then you have a tool that

774
00:22:50,880 --> 00:22:54,880
applies it to your accounts for you so

775
00:22:52,480 --> 00:22:57,120
there's quite a few benefits this um

776
00:22:54,880 --> 00:22:58,159
you can version control it so your

777
00:22:57,120 --> 00:22:59,678
infrastructure

778
00:22:58,159 --> 00:23:02,400
version for a specific version of your

779
00:22:59,679 --> 00:23:04,960
app can be and get alongside your app

780
00:23:02,400 --> 00:23:05,520
um and that means that people can review

781
00:23:04,960 --> 00:23:07,120
it

782
00:23:05,520 --> 00:23:08,720
and before you implement it and deploy

783
00:23:07,120 --> 00:23:09,678
stuff you can run security scanning

784
00:23:08,720 --> 00:23:11,600
tools on it

785
00:23:09,679 --> 00:23:13,760
and kind of like static analysis linting

786
00:23:11,600 --> 00:23:15,678
type things so you can pick up

787
00:23:13,760 --> 00:23:16,720
um where you've deviated from best

788
00:23:15,679 --> 00:23:18,320
practices or maybe you've

789
00:23:16,720 --> 00:23:20,480
unintentionally left ports open and

790
00:23:18,320 --> 00:23:22,240
security configurations things like that

791
00:23:20,480 --> 00:23:24,080
and it also means you can really quickly

792
00:23:22,240 --> 00:23:27,039
roll out that infrastructure

793
00:23:24,080 --> 00:23:28,799
across multiple regions or accounts so

794
00:23:27,039 --> 00:23:29,360
one example of a tool that you can use

795
00:23:28,799 --> 00:23:32,559
for this

796
00:23:29,360 --> 00:23:34,399
is cloud formation so aws make this um

797
00:23:32,559 --> 00:23:36,080
it's an interesting tool with worse than

798
00:23:34,400 --> 00:23:37,120
you would expect support for actual aws

799
00:23:36,080 --> 00:23:39,439
resources

800
00:23:37,120 --> 00:23:40,799
um and as long as you're not trying to

801
00:23:39,440 --> 00:23:42,000
do something really complicated you'll

802
00:23:40,799 --> 00:23:42,960
probably find that it covers your use

803
00:23:42,000 --> 00:23:44,880
case just fine

804
00:23:42,960 --> 00:23:46,400
you write it as yaml or json i'll show

805
00:23:44,880 --> 00:23:47,600
you what it looks like in a second

806
00:23:46,400 --> 00:23:48,320
and it's just worth bearing in mind if

807
00:23:47,600 --> 00:23:49,520
you're going to come up with something

808
00:23:48,320 --> 00:23:52,639
crazy complicated

809
00:23:49,520 --> 00:23:54,320
you might eventually outgrow it um so

810
00:23:52,640 --> 00:23:55,440
here is a little example of what it

811
00:23:54,320 --> 00:23:57,840
looks like

812
00:23:55,440 --> 00:23:59,279
so this is some yaml cloud formation and

813
00:23:57,840 --> 00:24:00,720
it's a really basic headset that deploys

814
00:23:59,279 --> 00:24:02,480
an ec2 instance

815
00:24:00,720 --> 00:24:03,679
so you specify the instance type which

816
00:24:02,480 --> 00:24:05,360
is kind of like the the hardware

817
00:24:03,679 --> 00:24:05,919
requirements your spec of the actual

818
00:24:05,360 --> 00:24:08,559
instance

819
00:24:05,919 --> 00:24:10,559
that you you're deploying and a key name

820
00:24:08,559 --> 00:24:13,760
for an ssh key that you're going to use

821
00:24:10,559 --> 00:24:15,279
to connect to it and an id

822
00:24:13,760 --> 00:24:17,760
of the image that you're going to use to

823
00:24:15,279 --> 00:24:18,799
boot this up from the aws marketplace

824
00:24:17,760 --> 00:24:21,840
which here is just

825
00:24:18,799 --> 00:24:23,760
a basic ubuntu uh image the next thing

826
00:24:21,840 --> 00:24:25,840
it deploys instant security group

827
00:24:23,760 --> 00:24:27,440
um it's kind of like a firewall think of

828
00:24:25,840 --> 00:24:29,439
it like that for for controlling what

829
00:24:27,440 --> 00:24:31,279
traffic will actually make it through

830
00:24:29,440 --> 00:24:33,360
to the instance itself so here we've

831
00:24:31,279 --> 00:24:35,760
allowed ssh traffic over

832
00:24:33,360 --> 00:24:39,039
portrait 2 and but only if it's coming

833
00:24:35,760 --> 00:24:41,279
from the source ip 1.2.3.4

834
00:24:39,039 --> 00:24:42,720
so writing this up as infrastructures

835
00:24:41,279 --> 00:24:44,080
code like this

836
00:24:42,720 --> 00:24:46,400
it saves us a bunch of clicks through

837
00:24:44,080 --> 00:24:48,320
the console to provision all this stuff

838
00:24:46,400 --> 00:24:49,520
the first time but the key comes from

839
00:24:48,320 --> 00:24:51,439
when you want to do it the second time

840
00:24:49,520 --> 00:24:53,679
or the third time at the 400th time

841
00:24:51,440 --> 00:24:55,440
um because you can reproduce this exact

842
00:24:53,679 --> 00:24:57,120
configuration really easily

843
00:24:55,440 --> 00:24:58,320
and somebody can review it before you

844
00:24:57,120 --> 00:25:00,000
deploy it as well to make sure that

845
00:24:58,320 --> 00:25:01,520
you've not done something crazy

846
00:25:00,000 --> 00:25:03,840
and so obviously there's a whole host of

847
00:25:01,520 --> 00:25:05,120
benefits to using infrastructure's code

848
00:25:03,840 --> 00:25:06,959
and you should really try to use it

849
00:25:05,120 --> 00:25:09,120
wherever you can

850
00:25:06,960 --> 00:25:10,000
an alternative that you might use it's a

851
00:25:09,120 --> 00:25:11,600
cloud information

852
00:25:10,000 --> 00:25:13,679
is a tool called terraform from

853
00:25:11,600 --> 00:25:15,039
hashicorp and

854
00:25:13,679 --> 00:25:16,400
it's a bit of a steeper learning curve

855
00:25:15,039 --> 00:25:17,760
than cloud formation and it's a little

856
00:25:16,400 --> 00:25:19,600
bit trickier to use

857
00:25:17,760 --> 00:25:21,279
but it has a much wider range of support

858
00:25:19,600 --> 00:25:22,639
for aws resources so if your design is

859
00:25:21,279 --> 00:25:24,000
going to be quite complicated

860
00:25:22,640 --> 00:25:25,760
you might be better off to start with

861
00:25:24,000 --> 00:25:28,240
that also

862
00:25:25,760 --> 00:25:29,679
it supports new aws services more

863
00:25:28,240 --> 00:25:30,880
quickly than cloudformation does

864
00:25:29,679 --> 00:25:33,279
and so if you know that you're going to

865
00:25:30,880 --> 00:25:34,880
be relying on

866
00:25:33,279 --> 00:25:36,000
new things that aws are putting out and

867
00:25:34,880 --> 00:25:36,960
you want to you want to iterate your

868
00:25:36,000 --> 00:25:38,240
things quite quickly

869
00:25:36,960 --> 00:25:40,240
terraform might be a better choice in

870
00:25:38,240 --> 00:25:41,760
there um

871
00:25:40,240 --> 00:25:43,120
i don't have an example for terraform

872
00:25:41,760 --> 00:25:44,400
it's not quite as readable and it's a

873
00:25:43,120 --> 00:25:45,520
bit too much to actually fit on one

874
00:25:44,400 --> 00:25:48,720
slide

875
00:25:45,520 --> 00:25:50,559
so on to the security domain stuff

876
00:25:48,720 --> 00:25:52,000
so at its at the absolute bare minimum

877
00:25:50,559 --> 00:25:52,879
the simplest thing you want to do

878
00:25:52,000 --> 00:25:55,440
is you're going to want to have some

879
00:25:52,880 --> 00:25:56,880
kind of audit trail and to

880
00:25:55,440 --> 00:25:59,039
to to give you an idea of what's

881
00:25:56,880 --> 00:26:00,240
actually going on in your aws account

882
00:25:59,039 --> 00:26:02,400
so the service you want for this is

883
00:26:00,240 --> 00:26:03,279
cloudtrail and that tracks everything

884
00:26:02,400 --> 00:26:06,000
that hits

885
00:26:03,279 --> 00:26:07,520
the aws api so it's not going to record

886
00:26:06,000 --> 00:26:09,360
things that are actually happening

887
00:26:07,520 --> 00:26:10,799
on your instances unless they're doing

888
00:26:09,360 --> 00:26:13,678
something that hits the

889
00:26:10,799 --> 00:26:14,720
aws api which is things like users doing

890
00:26:13,679 --> 00:26:17,039
it through the command line

891
00:26:14,720 --> 00:26:17,840
the web console or a python app that

892
00:26:17,039 --> 00:26:20,158
you're running

893
00:26:17,840 --> 00:26:23,199
that uses an aws sdk to actually

894
00:26:20,159 --> 00:26:26,320
interact with with your resources

895
00:26:23,200 --> 00:26:26,640
um so now it is enabled by default on

896
00:26:26,320 --> 00:26:28,399
all

897
00:26:26,640 --> 00:26:30,559
new accounts which is a relatively new

898
00:26:28,400 --> 00:26:31,440
thing and you get 90 days of history for

899
00:26:30,559 --> 00:26:32,639
free

900
00:26:31,440 --> 00:26:33,919
and but if you do want to keep your

901
00:26:32,640 --> 00:26:34,559
records for longer which you really

902
00:26:33,919 --> 00:26:36,400
should

903
00:26:34,559 --> 00:26:38,320
um you can configure it quite easily to

904
00:26:36,400 --> 00:26:40,159
save them into s3

905
00:26:38,320 --> 00:26:42,158
for you and you can see there's a little

906
00:26:40,159 --> 00:26:44,559
screenshot there it's really small

907
00:26:42,159 --> 00:26:45,760
um of the kind of data that you get

908
00:26:44,559 --> 00:26:48,000
recorded

909
00:26:45,760 --> 00:26:49,840
basically every api call that you make

910
00:26:48,000 --> 00:26:51,360
to aws will get recorded

911
00:26:49,840 --> 00:26:53,360
along with some kind of metadata around

912
00:26:51,360 --> 00:26:54,639
that like the the time of it the source

913
00:26:53,360 --> 00:26:56,719
ip that you've made it from

914
00:26:54,640 --> 00:26:58,159
and things like that so the best

915
00:26:56,720 --> 00:27:01,120
practices for that

916
00:26:58,159 --> 00:27:02,640
configure to log to an s3 bucket um

917
00:27:01,120 --> 00:27:04,320
ideally and if you've got a really

918
00:27:02,640 --> 00:27:05,840
sensitive environment especially

919
00:27:04,320 --> 00:27:07,600
take those logs and put them in a

920
00:27:05,840 --> 00:27:10,320
totally different account so even if

921
00:27:07,600 --> 00:27:11,360
the um even if the account that you're

922
00:27:10,320 --> 00:27:12,480
using gets compromised

923
00:27:11,360 --> 00:27:13,840
your logs are a completely different

924
00:27:12,480 --> 00:27:14,559
place you can see exactly what's going

925
00:27:13,840 --> 00:27:16,480
on

926
00:27:14,559 --> 00:27:17,678
um you're going to want to encrypt them

927
00:27:16,480 --> 00:27:18,399
as they're stored that's just the tick

928
00:27:17,679 --> 00:27:19,679
box

929
00:27:18,399 --> 00:27:22,399
and you're also going to want to enable

930
00:27:19,679 --> 00:27:24,159
a feature called log file validation

931
00:27:22,399 --> 00:27:26,000
and to ensure that if you do need these

932
00:27:24,159 --> 00:27:27,360
logs for an investigation later on

933
00:27:26,000 --> 00:27:29,360
you can verify for sure that they

934
00:27:27,360 --> 00:27:30,799
haven't been tampered with to remove or

935
00:27:29,360 --> 00:27:32,080
modify evidence of what's actually

936
00:27:30,799 --> 00:27:34,720
happening

937
00:27:32,080 --> 00:27:35,760
so this log file validation thing sounds

938
00:27:34,720 --> 00:27:37,039
kind of interesting how does that

939
00:27:35,760 --> 00:27:40,000
actually work

940
00:27:37,039 --> 00:27:42,158
uh so over time cloudtrail will deliver

941
00:27:40,000 --> 00:27:43,919
log files into your s3 bucket and every

942
00:27:42,159 --> 00:27:47,360
few minutes you get a new json file

943
00:27:43,919 --> 00:27:49,440
um with more logs as they deliver

944
00:27:47,360 --> 00:27:50,959
get delivered into your account aws

945
00:27:49,440 --> 00:27:52,320
keeps track of the hash of each of these

946
00:27:50,960 --> 00:27:53,679
files as they get delivered to your

947
00:27:52,320 --> 00:27:56,399
account

948
00:27:53,679 --> 00:27:58,320
and then every hour aws delivers what it

949
00:27:56,399 --> 00:27:59,760
calls a digest file

950
00:27:58,320 --> 00:28:01,439
to your account and what that is is a

951
00:27:59,760 --> 00:28:03,120
big list of references to all that

952
00:28:01,440 --> 00:28:06,399
errors log files and the hash

953
00:28:03,120 --> 00:28:08,959
of those files this digest file

954
00:28:06,399 --> 00:28:09,760
is signed by aws with a private key that

955
00:28:08,960 --> 00:28:11,840
they have

956
00:28:09,760 --> 00:28:13,520
so that means if any of the individual

957
00:28:11,840 --> 00:28:15,840
log files on the left

958
00:28:13,520 --> 00:28:17,039
get tampered whether modified the hash

959
00:28:15,840 --> 00:28:18,080
isn't going to match the one in the

960
00:28:17,039 --> 00:28:20,799
digest

961
00:28:18,080 --> 00:28:22,000
and if you try to modify the digest file

962
00:28:20,799 --> 00:28:22,879
then it won't pass its signature

963
00:28:22,000 --> 00:28:24,880
verification

964
00:28:22,880 --> 00:28:27,279
um so you can tell that something

965
00:28:24,880 --> 00:28:28,960
somewhere has has been modified

966
00:28:27,279 --> 00:28:31,120
another nice touch they have each new

967
00:28:28,960 --> 00:28:33,440
digest file that gets delivered

968
00:28:31,120 --> 00:28:34,719
contains the hash of the previous digest

969
00:28:33,440 --> 00:28:36,240
file so really quickly

970
00:28:34,720 --> 00:28:38,000
it becomes completely infeasible to

971
00:28:36,240 --> 00:28:43,120
actually tamper with those logs

972
00:28:38,000 --> 00:28:43,120
um in a way that you can't later verify

973
00:28:43,279 --> 00:28:45,919
uh moving on another logging and

974
00:28:45,039 --> 00:28:47,520
monitoring service that you're

975
00:28:45,919 --> 00:28:48,960
definitely going to want to turn on is

976
00:28:47,520 --> 00:28:50,960
guard duty

977
00:28:48,960 --> 00:28:52,159
so that performs uh can automatic

978
00:28:50,960 --> 00:28:53,520
inspection

979
00:28:52,159 --> 00:28:55,600
of what's happening in your cloud trail

980
00:28:53,520 --> 00:28:57,440
logs and also any network traffic that's

981
00:28:55,600 --> 00:29:00,320
flowing between your resources

982
00:28:57,440 --> 00:29:01,760
and it takes a few days for it to learn

983
00:29:00,320 --> 00:29:03,039
kind of what your usage and your traffic

984
00:29:01,760 --> 00:29:04,559
patterns look like

985
00:29:03,039 --> 00:29:05,840
and after that it can detect kind of

986
00:29:04,559 --> 00:29:07,440
anomalous events so don't match your

987
00:29:05,840 --> 00:29:09,918
usual activity for the account

988
00:29:07,440 --> 00:29:12,159
which could indicate something a miss on

989
00:29:09,919 --> 00:29:13,679
some of your resources

990
00:29:12,159 --> 00:29:15,440
so these are the finding types that

991
00:29:13,679 --> 00:29:17,840
guard you can spot which gives you an

992
00:29:15,440 --> 00:29:19,440
idea of the sort of genres of issue

993
00:29:17,840 --> 00:29:20,959
it can be used to find they keep

994
00:29:19,440 --> 00:29:22,559
expanding this list so it's quite up to

995
00:29:20,960 --> 00:29:24,399
date and relevant most of the time

996
00:29:22,559 --> 00:29:26,000
and it's pretty extensive so let's take

997
00:29:24,399 --> 00:29:27,279
a look at some concrete examples of

998
00:29:26,000 --> 00:29:30,880
actual findings

999
00:29:27,279 --> 00:29:33,440
um that you might have with this so

1000
00:29:30,880 --> 00:29:35,039
some of the examples got here an ec2

1001
00:29:33,440 --> 00:29:36,880
instance querying a domain name that's

1002
00:29:35,039 --> 00:29:37,679
associated with cryptocurrency related

1003
00:29:36,880 --> 00:29:40,559
activity

1004
00:29:37,679 --> 00:29:42,080
so the way that probably works um is

1005
00:29:40,559 --> 00:29:44,080
when you deploy an ec2 instance by

1006
00:29:42,080 --> 00:29:45,918
default it's going to use aws provided

1007
00:29:44,080 --> 00:29:46,559
dns servers in the subnet that you put

1008
00:29:45,919 --> 00:29:48,640
it in

1009
00:29:46,559 --> 00:29:49,600
and so aws can inspect that traffic you

1010
00:29:48,640 --> 00:29:52,000
can see where

1011
00:29:49,600 --> 00:29:53,520
um where your instances are calling out

1012
00:29:52,000 --> 00:29:55,600
to and flag that up to you if there's

1013
00:29:53,520 --> 00:29:56,879
anything malicious there

1014
00:29:55,600 --> 00:29:58,559
an api being called with root

1015
00:29:56,880 --> 00:29:59,760
credentials so remember to start we

1016
00:29:58,559 --> 00:30:01,440
wanted to make sure that we

1017
00:29:59,760 --> 00:30:02,879
really didn't use the root credentials

1018
00:30:01,440 --> 00:30:04,159
anywhere and

1019
00:30:02,880 --> 00:30:06,399
guard you it gives you a really easy way

1020
00:30:04,159 --> 00:30:08,799
to determine if someone is using them

1021
00:30:06,399 --> 00:30:11,039
uh when they shouldn't be an instance

1022
00:30:08,799 --> 00:30:12,960
generating a larger amounts of traffic

1023
00:30:11,039 --> 00:30:14,320
than normal so because there is a

1024
00:30:12,960 --> 00:30:16,559
machine learning component

1025
00:30:14,320 --> 00:30:18,480
to guard duty it can build a profile

1026
00:30:16,559 --> 00:30:20,240
over time of what sort of things

1027
00:30:18,480 --> 00:30:22,480
and what sort of activity your resources

1028
00:30:20,240 --> 00:30:24,159
generate and kind of build a normal

1029
00:30:22,480 --> 00:30:26,480
baseline so anything that deviates from

1030
00:30:24,159 --> 00:30:27,840
that it can alert you to as well

1031
00:30:26,480 --> 00:30:29,360
and then finally cloudtrail being

1032
00:30:27,840 --> 00:30:31,360
disabled so given that we know it's kind

1033
00:30:29,360 --> 00:30:33,439
of the main auditing tool

1034
00:30:31,360 --> 00:30:34,799
and it's really nice to get an alert

1035
00:30:33,440 --> 00:30:36,399
when that happens because there is

1036
00:30:34,799 --> 00:30:38,799
really unlikely to be a legitimate

1037
00:30:36,399 --> 00:30:40,479
reason for that being turned off

1038
00:30:38,799 --> 00:30:42,799
so if you are interested in this stuff

1039
00:30:40,480 --> 00:30:43,200
go and have a look at aws docs for guard

1040
00:30:42,799 --> 00:30:45,120
duty

1041
00:30:43,200 --> 00:30:46,240
publish a whole list of every single

1042
00:30:45,120 --> 00:30:48,000
finding

1043
00:30:46,240 --> 00:30:50,000
and that they can generate and it's a

1044
00:30:48,000 --> 00:30:51,840
really good way to get

1045
00:30:50,000 --> 00:30:53,679
an idea of what sort of issues can occur

1046
00:30:51,840 --> 00:30:54,799
in your accounts and from that you can

1047
00:30:53,679 --> 00:30:55,919
then start thinking about how you would

1048
00:30:54,799 --> 00:30:58,639
protect against

1049
00:30:55,919 --> 00:30:59,600
these sorts of issues and the first best

1050
00:30:58,640 --> 00:31:01,120
practice for guard you

1051
00:30:59,600 --> 00:31:03,279
is pretty straightforward just to turn

1052
00:31:01,120 --> 00:31:04,959
it on and

1053
00:31:03,279 --> 00:31:06,399
it is a paid for service but it runs a

1054
00:31:04,960 --> 00:31:07,600
free trial for the first month so you

1055
00:31:06,399 --> 00:31:09,039
can work out how much you're going to

1056
00:31:07,600 --> 00:31:10,399
end up spending on it

1057
00:31:09,039 --> 00:31:12,000
and it's not much it's generally kind of

1058
00:31:10,399 --> 00:31:12,959
single digit dollars even for a pretty

1059
00:31:12,000 --> 00:31:14,480
large account

1060
00:31:12,960 --> 00:31:15,919
um i don't know why they don't just make

1061
00:31:14,480 --> 00:31:19,120
it free and turn it on by default to be

1062
00:31:15,919 --> 00:31:20,960
honest because it is really useful um

1063
00:31:19,120 --> 00:31:22,399
next up true aws fashion they've

1064
00:31:20,960 --> 00:31:23,760
introduced terminology that they don't

1065
00:31:22,399 --> 00:31:26,399
really use anywhere else and that's the

1066
00:31:23,760 --> 00:31:27,760
concept of master and member accounts

1067
00:31:26,399 --> 00:31:29,600
so that basically means you can turn on

1068
00:31:27,760 --> 00:31:31,519
guard you in all of your accounts

1069
00:31:29,600 --> 00:31:33,120
and but you can nominate one as a master

1070
00:31:31,519 --> 00:31:34,240
and that can collate all of the guard

1071
00:31:33,120 --> 00:31:35,918
your elects across

1072
00:31:34,240 --> 00:31:37,519
all of your accounts for you so you only

1073
00:31:35,919 --> 00:31:39,360
have kind of one dashboard to see

1074
00:31:37,519 --> 00:31:41,600
all the things that are going terribly

1075
00:31:39,360 --> 00:31:44,080
wrong across all of your accounts

1076
00:31:41,600 --> 00:31:45,918
um and then also remember it's a

1077
00:31:44,080 --> 00:31:47,840
regional service so you do need to turn

1078
00:31:45,919 --> 00:31:49,039
it on for each region separately

1079
00:31:47,840 --> 00:31:51,279
and there's not much point in just

1080
00:31:49,039 --> 00:31:52,720
turning on in the regions that you use

1081
00:31:51,279 --> 00:31:54,159
because someone who has compromised your

1082
00:31:52,720 --> 00:31:55,360
account will be able to determine the

1083
00:31:54,159 --> 00:31:56,480
regions that you've got it turned on in

1084
00:31:55,360 --> 00:31:57,678
and then just do all their stuff in a

1085
00:31:56,480 --> 00:32:00,000
region that you're not using and you

1086
00:31:57,679 --> 00:32:02,880
don't have guard duty enabled for

1087
00:32:00,000 --> 00:32:03,440
um and a final one that is worth a

1088
00:32:02,880 --> 00:32:05,440
mention

1089
00:32:03,440 --> 00:32:07,200
and it's not actually an aws product

1090
00:32:05,440 --> 00:32:09,120
it's worth a look just based on how easy

1091
00:32:07,200 --> 00:32:10,080
it is to get it up and running in our

1092
00:32:09,120 --> 00:32:11,918
experience

1093
00:32:10,080 --> 00:32:13,840
um and it gets quite you can get quite

1094
00:32:11,919 --> 00:32:15,200
actionable results pretty quickly of it

1095
00:32:13,840 --> 00:32:18,240
is cloudsploit

1096
00:32:15,200 --> 00:32:20,080
and so that scans your resources and

1097
00:32:18,240 --> 00:32:21,279
generates a big list of findings for you

1098
00:32:20,080 --> 00:32:22,320
where you're deviating from best

1099
00:32:21,279 --> 00:32:24,640
practices

1100
00:32:22,320 --> 00:32:26,240
or you have things like open ports and

1101
00:32:24,640 --> 00:32:27,760
that could present a risk or

1102
00:32:26,240 --> 00:32:29,440
vulnerability for you

1103
00:32:27,760 --> 00:32:31,120
so the actual scanning engine itself is

1104
00:32:29,440 --> 00:32:31,919
open source you can set it up and run it

1105
00:32:31,120 --> 00:32:33,518
for free

1106
00:32:31,919 --> 00:32:35,039
and they've got a kind of paid for ui

1107
00:32:33,519 --> 00:32:36,399
that sits on top of it

1108
00:32:35,039 --> 00:32:38,000
and but if you're in a rush to get

1109
00:32:36,399 --> 00:32:39,600
something up and running really quickly

1110
00:32:38,000 --> 00:32:41,200
and you just need an idea of

1111
00:32:39,600 --> 00:32:44,559
what your what your space kind of looks

1112
00:32:41,200 --> 00:32:46,159
like and it is worth a look

1113
00:32:44,559 --> 00:32:47,360
so i want to touch on encryption now

1114
00:32:46,159 --> 00:32:48,640
that we've gone over some monitoring

1115
00:32:47,360 --> 00:32:50,158
stuff

1116
00:32:48,640 --> 00:32:51,679
everybody loves encryption apart from

1117
00:32:50,159 --> 00:32:53,600
the government um

1118
00:32:51,679 --> 00:32:55,679
but it's and we all know it's important

1119
00:32:53,600 --> 00:32:56,639
but it's also really easy to screw up

1120
00:32:55,679 --> 00:32:58,640
and

1121
00:32:56,640 --> 00:32:59,760
so in general aws gives you enough guard

1122
00:32:58,640 --> 00:33:01,519
rails and hand holding

1123
00:32:59,760 --> 00:33:03,039
that is easy to use and you can't really

1124
00:33:01,519 --> 00:33:05,039
screw it up for most services just you

1125
00:33:03,039 --> 00:33:09,039
kind of tick a box and it's done

1126
00:33:05,039 --> 00:33:11,200
and it also never costs anything extra

1127
00:33:09,039 --> 00:33:12,720
to turn it on so it's always worth doing

1128
00:33:11,200 --> 00:33:14,559
but having said that you can use some of

1129
00:33:12,720 --> 00:33:15,360
the more foundational tools that aws

1130
00:33:14,559 --> 00:33:17,760
give you

1131
00:33:15,360 --> 00:33:18,879
to build something that meets your more

1132
00:33:17,760 --> 00:33:20,640
complex requirements

1133
00:33:18,880 --> 00:33:22,399
and maybe for compliance reasons you've

1134
00:33:20,640 --> 00:33:24,799
got really sensitive data

1135
00:33:22,399 --> 00:33:26,399
um that you need to have encrypted in a

1136
00:33:24,799 --> 00:33:27,200
way where you can verify exactly how

1137
00:33:26,399 --> 00:33:28,719
everything works

1138
00:33:27,200 --> 00:33:30,320
and audit how the keys are used and

1139
00:33:28,720 --> 00:33:32,240
things like that

1140
00:33:30,320 --> 00:33:34,240
so the service you want for that is kms

1141
00:33:32,240 --> 00:33:36,000
the key management service

1142
00:33:34,240 --> 00:33:37,919
and this is a service just for creating

1143
00:33:36,000 --> 00:33:38,799
and managing keys but you then have much

1144
00:33:37,919 --> 00:33:40,399
more control

1145
00:33:38,799 --> 00:33:42,000
over them than the default keys that are

1146
00:33:40,399 --> 00:33:42,959
used when you just use the tick box

1147
00:33:42,000 --> 00:33:46,320
encryption

1148
00:33:42,960 --> 00:33:48,960
um so using this you can define

1149
00:33:46,320 --> 00:33:50,720
uh through i am who can manage the keys

1150
00:33:48,960 --> 00:33:54,000
and also who can use them

1151
00:33:50,720 --> 00:33:54,320
as separate things um so some services

1152
00:33:54,000 --> 00:33:56,240
like

1153
00:33:54,320 --> 00:33:57,678
s3 support this natively so you can

1154
00:33:56,240 --> 00:33:59,440
configure s3

1155
00:33:57,679 --> 00:34:01,760
to use these kms keys that you're

1156
00:33:59,440 --> 00:34:03,200
managing to do your encryption as your

1157
00:34:01,760 --> 00:34:04,960
as you upload files

1158
00:34:03,200 --> 00:34:06,320
and i'll see in a second how that can

1159
00:34:04,960 --> 00:34:07,200
provide a kind of additional layer of

1160
00:34:06,320 --> 00:34:09,759
protection

1161
00:34:07,200 --> 00:34:11,839
for your data and then finally there is

1162
00:34:09,760 --> 00:34:14,480
an aws encryption sdk

1163
00:34:11,839 --> 00:34:16,399
and a command line tool as well um which

1164
00:34:14,480 --> 00:34:18,960
is really good you can use it to provide

1165
00:34:16,399 --> 00:34:21,679
kind of provably quality encryption and

1166
00:34:18,960 --> 00:34:23,119
in your apps and whilst relying on kms

1167
00:34:21,679 --> 00:34:24,079
to manage your keys and do the back end

1168
00:34:23,119 --> 00:34:25,599
part for you

1169
00:34:24,079 --> 00:34:27,599
and that's one of the trickiest aspects

1170
00:34:25,599 --> 00:34:29,119
to do well um

1171
00:34:27,599 --> 00:34:30,320
in a way that's both secure and robust

1172
00:34:29,119 --> 00:34:31,760
so it's worth taking a look at that as

1173
00:34:30,320 --> 00:34:33,760
well

1174
00:34:31,760 --> 00:34:35,359
so here's a little quick example to

1175
00:34:33,760 --> 00:34:37,200
demonstrate how you can add additional

1176
00:34:35,359 --> 00:34:37,520
protection and security to data that

1177
00:34:37,199 --> 00:34:39,598
you're

1178
00:34:37,520 --> 00:34:41,040
storing in s3 and these sort of

1179
00:34:39,599 --> 00:34:42,879
techniques do apply to other services

1180
00:34:41,040 --> 00:34:43,918
but s3 is just a nice one to demonstrate

1181
00:34:42,879 --> 00:34:46,078
it with

1182
00:34:43,918 --> 00:34:47,520
so we know we can easily enable

1183
00:34:46,079 --> 00:34:49,040
encryption in s3

1184
00:34:47,520 --> 00:34:50,239
with just a tick box you tick box when

1185
00:34:49,040 --> 00:34:51,440
you're uploading your files or when

1186
00:34:50,239 --> 00:34:53,279
you're creating the bucket

1187
00:34:51,440 --> 00:34:54,480
and everything is encrypted at rest

1188
00:34:53,280 --> 00:34:56,000
right

1189
00:34:54,480 --> 00:34:57,599
but the issue with that is that aws is

1190
00:34:56,000 --> 00:34:59,680
actually too helpful with this

1191
00:34:57,599 --> 00:35:00,960
um so the encryption happens totally

1192
00:34:59,680 --> 00:35:02,000
transparently as long as you have

1193
00:35:00,960 --> 00:35:04,560
permission to read

1194
00:35:02,000 --> 00:35:06,160
these files from s3 aws will happily

1195
00:35:04,560 --> 00:35:07,040
just decrypt it for you and give you it

1196
00:35:06,160 --> 00:35:08,720
so

1197
00:35:07,040 --> 00:35:10,720
there's not a great deal of security

1198
00:35:08,720 --> 00:35:12,078
benefit to it other than protecting

1199
00:35:10,720 --> 00:35:14,319
against someone literally lifting a

1200
00:35:12,079 --> 00:35:17,520
drive out in aws data center

1201
00:35:14,320 --> 00:35:19,119
and which is fairly unlikely so

1202
00:35:17,520 --> 00:35:21,040
imagine a scenario where we want to

1203
00:35:19,119 --> 00:35:22,560
restrict kind of how the encryption

1204
00:35:21,040 --> 00:35:23,279
works we want some kind of control over

1205
00:35:22,560 --> 00:35:24,960
the keys

1206
00:35:23,280 --> 00:35:27,040
and the permissions for how things can

1207
00:35:24,960 --> 00:35:27,920
be done so that's where we want to use

1208
00:35:27,040 --> 00:35:30,160
kms

1209
00:35:27,920 --> 00:35:31,440
so we can create policies around who can

1210
00:35:30,160 --> 00:35:33,040
use the keys for encryption or

1211
00:35:31,440 --> 00:35:35,040
decryption or both

1212
00:35:33,040 --> 00:35:36,480
um and then at that point you need to

1213
00:35:35,040 --> 00:35:38,640
not only have permission

1214
00:35:36,480 --> 00:35:40,079
to use the s3 api you need to have

1215
00:35:38,640 --> 00:35:41,598
permission to read the file

1216
00:35:40,079 --> 00:35:43,359
but you also need to have the kms

1217
00:35:41,599 --> 00:35:44,240
permission to use the key it's it's

1218
00:35:43,359 --> 00:35:47,440
encrypted with

1219
00:35:44,240 --> 00:35:48,319
to actually decrypt that file um so if

1220
00:35:47,440 --> 00:35:49,680
for example

1221
00:35:48,320 --> 00:35:50,800
you have one team that's managing all

1222
00:35:49,680 --> 00:35:51,598
your storage stuff and your storage

1223
00:35:50,800 --> 00:35:53,040
permissions

1224
00:35:51,599 --> 00:35:54,720
and another team managing all your

1225
00:35:53,040 --> 00:35:55,440
encryption and your permissions around

1226
00:35:54,720 --> 00:35:57,359
keys

1227
00:35:55,440 --> 00:35:59,200
to accidentally leak that data or make

1228
00:35:57,359 --> 00:36:01,440
it available to the wrong people

1229
00:35:59,200 --> 00:36:02,799
both of those teams now need to screw up

1230
00:36:01,440 --> 00:36:05,119
um

1231
00:36:02,800 --> 00:36:07,200
it's also nice and auditable because if

1232
00:36:05,119 --> 00:36:10,240
as soon as you try and decrypt a file

1233
00:36:07,200 --> 00:36:12,319
an s3 that's encrypted with a kms key it

1234
00:36:10,240 --> 00:36:13,919
will go into cloudtrail that you have

1235
00:36:12,320 --> 00:36:16,000
tried to decrypt the file with that key

1236
00:36:13,920 --> 00:36:17,760
or you successfully decrypted a file

1237
00:36:16,000 --> 00:36:21,520
using that key

1238
00:36:17,760 --> 00:36:23,040
um so sticking with key management um

1239
00:36:21,520 --> 00:36:25,200
cloud hsm is a service that you're

1240
00:36:23,040 --> 00:36:27,520
probably never going to use um

1241
00:36:25,200 --> 00:36:29,359
but it's a great example of how the

1242
00:36:27,520 --> 00:36:30,640
cloud gives capabilities

1243
00:36:29,359 --> 00:36:32,000
um to people who never would have

1244
00:36:30,640 --> 00:36:33,200
previously been able to actually access

1245
00:36:32,000 --> 00:36:34,960
tools like this

1246
00:36:33,200 --> 00:36:36,560
so who's heard of hardware security

1247
00:36:34,960 --> 00:36:37,920
modules

1248
00:36:36,560 --> 00:36:40,960
more people than infrastructures code

1249
00:36:37,920 --> 00:36:42,640
okay security audience of course um

1250
00:36:40,960 --> 00:36:44,640
so it's a fairly niche device not that

1251
00:36:42,640 --> 00:36:46,560
niche apparently um

1252
00:36:44,640 --> 00:36:48,480
which many of you won't have heard of

1253
00:36:46,560 --> 00:36:51,119
disastrous um

1254
00:36:48,480 --> 00:36:52,000
but the idea behind that is that it's

1255
00:36:51,119 --> 00:36:53,599
just for

1256
00:36:52,000 --> 00:36:55,839
generating managing and storing

1257
00:36:53,599 --> 00:36:57,839
encryption keys and securely

1258
00:36:55,839 --> 00:36:59,119
and these are really high value keys

1259
00:36:57,839 --> 00:36:59,520
these are kind of the things used by

1260
00:36:59,119 --> 00:37:01,359
like

1261
00:36:59,520 --> 00:37:03,200
certificate authorities or card payment

1262
00:37:01,359 --> 00:37:04,640
bodies um

1263
00:37:03,200 --> 00:37:06,000
it's not a particularly affordable piece

1264
00:37:04,640 --> 00:37:07,520
of equipment you can't just buy one off

1265
00:37:06,000 --> 00:37:09,280
amazon and stick it in your home lab

1266
00:37:07,520 --> 00:37:11,280
they can be like twenty thousand dollars

1267
00:37:09,280 --> 00:37:13,839
to to buy or more

1268
00:37:11,280 --> 00:37:14,480
so when aws started offering an hsm in

1269
00:37:13,839 --> 00:37:16,480
the cloud

1270
00:37:14,480 --> 00:37:17,760
for a dollar ninety six an hour it was

1271
00:37:16,480 --> 00:37:20,000
incredible because suddenly

1272
00:37:17,760 --> 00:37:20,839
anybody who can afford a dollar ninety

1273
00:37:20,000 --> 00:37:23,599
six an hour

1274
00:37:20,839 --> 00:37:25,040
um can play around with it as long as

1275
00:37:23,599 --> 00:37:26,400
you can afford the five thousand dollar

1276
00:37:25,040 --> 00:37:28,079
setup fee that you get charged every

1277
00:37:26,400 --> 00:37:31,359
time you want to use one

1278
00:37:28,079 --> 00:37:33,280
um but quite recently they've got rid of

1279
00:37:31,359 --> 00:37:35,359
that and now it is just an hourly fee to

1280
00:37:33,280 --> 00:37:37,040
try a really spacious piece of equipment

1281
00:37:35,359 --> 00:37:38,000
and for most of us it's not something

1282
00:37:37,040 --> 00:37:39,680
that you're likely to just kind of

1283
00:37:38,000 --> 00:37:41,200
stumble across in your daily role

1284
00:37:39,680 --> 00:37:42,319
so while it is probably overkill for

1285
00:37:41,200 --> 00:37:43,680
most of the things that you'll be

1286
00:37:42,320 --> 00:37:44,960
needing to do unless you have really

1287
00:37:43,680 --> 00:37:47,598
specific and niche

1288
00:37:44,960 --> 00:37:49,040
compliance requirements or something um

1289
00:37:47,599 --> 00:37:50,720
you'll be fine to stick with kms but

1290
00:37:49,040 --> 00:37:51,839
it's worth having a look at cloudhsn

1291
00:37:50,720 --> 00:37:53,919
because you can play around with some

1292
00:37:51,839 --> 00:37:56,480
really cool stuff

1293
00:37:53,920 --> 00:37:57,760
so moving on to networking i'm just

1294
00:37:56,480 --> 00:37:59,520
going to touch on networking a little

1295
00:37:57,760 --> 00:38:01,440
bit because it's hard to present a full

1296
00:37:59,520 --> 00:38:02,640
overview of all aws networking in a

1297
00:38:01,440 --> 00:38:05,359
couple of slides

1298
00:38:02,640 --> 00:38:06,799
um but we i will touch on it in the in

1299
00:38:05,359 --> 00:38:09,040
the next section as well

1300
00:38:06,800 --> 00:38:10,480
so the fundamental service is vpc or

1301
00:38:09,040 --> 00:38:12,400
virtual private cloud

1302
00:38:10,480 --> 00:38:14,320
which encompasses all of your favorite

1303
00:38:12,400 --> 00:38:16,560
networking infrastructure like subnets

1304
00:38:14,320 --> 00:38:19,680
uh routing firewalls things like that

1305
00:38:16,560 --> 00:38:20,720
um and as with everything on aws you can

1306
00:38:19,680 --> 00:38:21,598
stick with the defaults and have a

1307
00:38:20,720 --> 00:38:23,040
pretty easy time

1308
00:38:21,599 --> 00:38:25,520
or you can get as really deep into

1309
00:38:23,040 --> 00:38:27,839
customizing it as you want

1310
00:38:25,520 --> 00:38:28,880
so to begin you're going to define your

1311
00:38:27,839 --> 00:38:31,839
network address space

1312
00:38:28,880 --> 00:38:33,040
in terms of like a cider block then add

1313
00:38:31,839 --> 00:38:34,720
in some subnets

1314
00:38:33,040 --> 00:38:36,079
to it so whatever submits you fancy

1315
00:38:34,720 --> 00:38:37,040
normally at least you'll have public

1316
00:38:36,079 --> 00:38:40,160
ones

1317
00:38:37,040 --> 00:38:41,040
for internet facing services and private

1318
00:38:40,160 --> 00:38:42,240
ones for

1319
00:38:41,040 --> 00:38:44,000
services that don't really have any

1320
00:38:42,240 --> 00:38:45,759
business being directly internet facing

1321
00:38:44,000 --> 00:38:48,480
like a database or something

1322
00:38:45,760 --> 00:38:49,680
then simply define some really simple

1323
00:38:48,480 --> 00:38:53,200
routing rules

1324
00:38:49,680 --> 00:38:53,839
and so in obviously business what this

1325
00:38:53,200 --> 00:38:56,640
design is

1326
00:38:53,839 --> 00:38:58,480
is meant to illustrate um is how quickly

1327
00:38:56,640 --> 00:39:00,720
your design can get out of hand

1328
00:38:58,480 --> 00:39:02,720
and how important is to keep track of

1329
00:39:00,720 --> 00:39:04,799
where all your traffic is going

1330
00:39:02,720 --> 00:39:06,879
and who actually has access to your

1331
00:39:04,800 --> 00:39:09,119
network or a presence on your network

1332
00:39:06,880 --> 00:39:10,560
and especially old contractors or

1333
00:39:09,119 --> 00:39:13,280
service providers that you you might

1334
00:39:10,560 --> 00:39:13,279
have forgotten about

1335
00:39:13,599 --> 00:39:16,880
and then once you've done all that you

1336
00:39:15,520 --> 00:39:20,240
spend the next four hours debugging why

1337
00:39:16,880 --> 00:39:20,240
you can't ssh into an instance

1338
00:39:21,359 --> 00:39:24,960
so final section and building a secure

1339
00:39:23,680 --> 00:39:26,640
and resilient web app

1340
00:39:24,960 --> 00:39:28,240
is about pawning off as much work as

1341
00:39:26,640 --> 00:39:29,359
possible to aws instead of doing it

1342
00:39:28,240 --> 00:39:31,200
yourself

1343
00:39:29,359 --> 00:39:33,440
um so there's a couple of important

1344
00:39:31,200 --> 00:39:34,879
concepts for this section

1345
00:39:33,440 --> 00:39:36,480
this is the first one it's a buzzworthy

1346
00:39:34,880 --> 00:39:37,200
name it's a great concept it's a phrase

1347
00:39:36,480 --> 00:39:40,560
that aws

1348
00:39:37,200 --> 00:39:42,078
love undifferentiated heavy lifting is

1349
00:39:40,560 --> 00:39:42,720
something you're having to do that's

1350
00:39:42,079 --> 00:39:44,480
taking up

1351
00:39:42,720 --> 00:39:45,598
your time but it's not differentiating

1352
00:39:44,480 --> 00:39:46,720
you from your competitors it's not

1353
00:39:45,599 --> 00:39:48,640
making you any money

1354
00:39:46,720 --> 00:39:50,319
so there's things like patching a fleet

1355
00:39:48,640 --> 00:39:51,839
of your ec2 instances

1356
00:39:50,320 --> 00:39:54,480
making sure your mysql cluster is

1357
00:39:51,839 --> 00:39:56,640
replicating and

1358
00:39:54,480 --> 00:39:58,160
and it's up uh or renewing ssl

1359
00:39:56,640 --> 00:39:59,520
certificates on a load balancer right

1360
00:39:58,160 --> 00:40:01,200
these things don't make you any money

1361
00:39:59,520 --> 00:40:02,960
they're not making you unique just have

1362
00:40:01,200 --> 00:40:06,240
someone else do them for you

1363
00:40:02,960 --> 00:40:08,400
um next up one of the core concepts of

1364
00:40:06,240 --> 00:40:10,000
infosec as a whole is the cia triad for

1365
00:40:08,400 --> 00:40:11,200
confidentiality integrity and

1366
00:40:10,000 --> 00:40:13,520
availability

1367
00:40:11,200 --> 00:40:14,960
so if you're not covering all of these

1368
00:40:13,520 --> 00:40:16,560
you're not truly providing

1369
00:40:14,960 --> 00:40:18,960
security to the people who are relying

1370
00:40:16,560 --> 00:40:20,560
on you to provide it and it might be

1371
00:40:18,960 --> 00:40:22,160
glamorous and exciting to be doing red

1372
00:40:20,560 --> 00:40:23,599
teaming and hunting for apts but it's

1373
00:40:22,160 --> 00:40:26,240
not all that it's about

1374
00:40:23,599 --> 00:40:27,440
um good architectures for applications

1375
00:40:26,240 --> 00:40:30,000
especially in the cloud

1376
00:40:27,440 --> 00:40:31,440
consider all of these aspects and

1377
00:40:30,000 --> 00:40:32,960
another way to put it is that it doesn't

1378
00:40:31,440 --> 00:40:35,440
matter if your data is

1379
00:40:32,960 --> 00:40:37,040
eas 256 encrypted if you've put it on

1380
00:40:35,440 --> 00:40:38,079
one hard disk and a data center that's

1381
00:40:37,040 --> 00:40:41,200
not on fire

1382
00:40:38,079 --> 00:40:42,560
and that doesn't matter it doesn't help

1383
00:40:41,200 --> 00:40:44,480
and i'm just going to keep mentioning

1384
00:40:42,560 --> 00:40:45,119
this use infrastructures code literally

1385
00:40:44,480 --> 00:40:47,920
all the time

1386
00:40:45,119 --> 00:40:49,040
wherever you can so the scenario that

1387
00:40:47,920 --> 00:40:50,800
we've got for this

1388
00:40:49,040 --> 00:40:53,200
is we're building a web app that lets

1389
00:40:50,800 --> 00:40:55,359
users upload and share images

1390
00:40:53,200 --> 00:40:56,319
we have a significant volume of users

1391
00:40:55,359 --> 00:40:57,520
that are using the app throughout the

1392
00:40:56,319 --> 00:40:59,359
day and random spikes

1393
00:40:57,520 --> 00:41:01,359
not really that predictable and they're

1394
00:40:59,359 --> 00:41:03,200
globally distributed as well

1395
00:41:01,359 --> 00:41:04,560
we know we are going to need large

1396
00:41:03,200 --> 00:41:05,118
volumes of data storage for keeping all

1397
00:41:04,560 --> 00:41:06,640
the images

1398
00:41:05,119 --> 00:41:08,400
and our app is split into two parts

1399
00:41:06,640 --> 00:41:10,400
there's an api that does your user

1400
00:41:08,400 --> 00:41:11,920
management you're uploading your sharing

1401
00:41:10,400 --> 00:41:13,760
and we know from the spec that it can

1402
00:41:11,920 --> 00:41:15,359
easily be containerized and then a

1403
00:41:13,760 --> 00:41:17,680
static html front end

1404
00:41:15,359 --> 00:41:19,440
that runs in the user's browser as well

1405
00:41:17,680 --> 00:41:20,560
so what's the worst possible solution

1406
00:41:19,440 --> 00:41:22,640
that we could come up with for this so

1407
00:41:20,560 --> 00:41:24,880
we'll start with this and then we'll see

1408
00:41:22,640 --> 00:41:26,560
how we can work to improve it so let's

1409
00:41:24,880 --> 00:41:27,680
start off with a single ec2 instance

1410
00:41:26,560 --> 00:41:29,440
running all of this

1411
00:41:27,680 --> 00:41:31,680
and a single availability zone in one

1412
00:41:29,440 --> 00:41:33,520
region and all of the data is stored on

1413
00:41:31,680 --> 00:41:34,319
one massive unencrypted disk attached to

1414
00:41:33,520 --> 00:41:35,680
this

1415
00:41:34,319 --> 00:41:37,599
and the same instance serves both the

1416
00:41:35,680 --> 00:41:39,359
front end and the api

1417
00:41:37,599 --> 00:41:41,920
so let's try and improve this bit by bit

1418
00:41:39,359 --> 00:41:42,560
and let's start off with the front end

1419
00:41:41,920 --> 00:41:44,640
because that's one of the more

1420
00:41:42,560 --> 00:41:45,440
straightforward things to solve so the

1421
00:41:44,640 --> 00:41:47,040
problems with that

1422
00:41:45,440 --> 00:41:48,560
it's not at all resilient to failure so

1423
00:41:47,040 --> 00:41:49,440
the easy to instantise the whole app

1424
00:41:48,560 --> 00:41:51,279
goes with it

1425
00:41:49,440 --> 00:41:52,880
it's a pretty poor experience for global

1426
00:41:51,280 --> 00:41:54,079
users because the further away they are

1427
00:41:52,880 --> 00:41:55,599
from the region you've deployed it

1428
00:41:54,079 --> 00:41:57,200
probably the slower it's going to be

1429
00:41:55,599 --> 00:41:58,880
and it's going to be really expensive to

1430
00:41:57,200 --> 00:42:00,399
run a large server that's not often

1431
00:41:58,880 --> 00:42:02,720
highly utilized

1432
00:42:00,400 --> 00:42:03,760
so if we know the content stack and we

1433
00:42:02,720 --> 00:42:04,399
know we've got loads of it let's keep it

1434
00:42:03,760 --> 00:42:05,760
on s3

1435
00:42:04,400 --> 00:42:07,760
it's third cheap and it's resilient to

1436
00:42:05,760 --> 00:42:10,000
failure as part of that price

1437
00:42:07,760 --> 00:42:11,920
um we also want to use cloudfront which

1438
00:42:10,000 --> 00:42:13,040
is amazon's content distribution network

1439
00:42:11,920 --> 00:42:14,960
which for those who don't know is

1440
00:42:13,040 --> 00:42:16,720
basically a massive globally distributed

1441
00:42:14,960 --> 00:42:18,160
cache um

1442
00:42:16,720 --> 00:42:20,078
that serves content across the world and

1443
00:42:18,160 --> 00:42:22,000
it will cache your content um at

1444
00:42:20,079 --> 00:42:22,400
locations nearest to where your users

1445
00:42:22,000 --> 00:42:24,800
actually

1446
00:42:22,400 --> 00:42:26,480
are and so now the globally distributed

1447
00:42:24,800 --> 00:42:28,160
users have a better experience we're not

1448
00:42:26,480 --> 00:42:30,480
managing any infrastructure

1449
00:42:28,160 --> 00:42:32,160
ourselves in terms of things like os

1450
00:42:30,480 --> 00:42:33,920
patching application updates

1451
00:42:32,160 --> 00:42:35,200
and we're saving money because they're

1452
00:42:33,920 --> 00:42:36,240
we're not using any compute when we

1453
00:42:35,200 --> 00:42:37,839
don't need to

1454
00:42:36,240 --> 00:42:39,200
and the caching that cloudfront gives us

1455
00:42:37,839 --> 00:42:41,119
means we'll save on bandwidth costs as

1456
00:42:39,200 --> 00:42:42,960
well

1457
00:42:41,119 --> 00:42:44,400
so where are we at now we've designed

1458
00:42:42,960 --> 00:42:45,440
the infrastructure to store the large

1459
00:42:44,400 --> 00:42:46,640
amount of data that we know we're going

1460
00:42:45,440 --> 00:42:48,240
to be dealing with

1461
00:42:46,640 --> 00:42:50,319
and we've improved the user experience

1462
00:42:48,240 --> 00:42:51,759
for our base so we now want to move on

1463
00:42:50,319 --> 00:42:53,279
to the actual compute and see what we

1464
00:42:51,760 --> 00:42:54,720
can do about that

1465
00:42:53,280 --> 00:42:56,480
so it has similar issues to the front

1466
00:42:54,720 --> 00:42:58,240
end single point of failure

1467
00:42:56,480 --> 00:42:59,839
and it's still going to be expensive for

1468
00:42:58,240 --> 00:43:01,520
us to run a big server that has to be

1469
00:42:59,839 --> 00:43:02,319
big enough for our largest peaks of

1470
00:43:01,520 --> 00:43:04,400
usage

1471
00:43:02,319 --> 00:43:05,359
um but for the rest of the time isn't

1472
00:43:04,400 --> 00:43:06,720
going to be doing that much other than

1473
00:43:05,359 --> 00:43:08,960
just burning money

1474
00:43:06,720 --> 00:43:10,799
uh maintaining this instance again a lot

1475
00:43:08,960 --> 00:43:12,480
of undifferentiated heavy lifting

1476
00:43:10,800 --> 00:43:14,079
patching is important but i don't want

1477
00:43:12,480 --> 00:43:17,839
to spend anything doing it

1478
00:43:14,079 --> 00:43:19,359
and and our specific server is also

1479
00:43:17,839 --> 00:43:20,078
configured quite insecurely so it's in a

1480
00:43:19,359 --> 00:43:21,920
public subnet

1481
00:43:20,079 --> 00:43:23,520
directly accessible from the internet

1482
00:43:21,920 --> 00:43:24,640
and the original engineer who set up

1483
00:43:23,520 --> 00:43:26,240
didn't really know that much about

1484
00:43:24,640 --> 00:43:27,598
firewall configuration so lots of things

1485
00:43:26,240 --> 00:43:30,560
are just publicly exposed

1486
00:43:27,599 --> 00:43:31,680
and it shouldn't be so a quick primer on

1487
00:43:30,560 --> 00:43:34,000
scaling

1488
00:43:31,680 --> 00:43:35,919
and before we delve into re-architecting

1489
00:43:34,000 --> 00:43:36,640
vertical scaling take your server make

1490
00:43:35,920 --> 00:43:38,480
it bigger

1491
00:43:36,640 --> 00:43:40,720
horizontal scaling take your server add

1492
00:43:38,480 --> 00:43:43,280
more of them um

1493
00:43:40,720 --> 00:43:44,799
so let's focus on resiliency first so

1494
00:43:43,280 --> 00:43:46,079
we're going to want more than one server

1495
00:43:44,800 --> 00:43:47,040
running our application that's fairly

1496
00:43:46,079 --> 00:43:48,640
obvious right

1497
00:43:47,040 --> 00:43:50,560
but as we add more is i'm just going to

1498
00:43:48,640 --> 00:43:52,400
increase the cost um

1499
00:43:50,560 --> 00:43:54,160
not necessarily so with effective load

1500
00:43:52,400 --> 00:43:55,040
balancing in a kind of a well-written

1501
00:43:54,160 --> 00:43:56,560
application

1502
00:43:55,040 --> 00:43:58,720
which we do have because i'm making up

1503
00:43:56,560 --> 00:44:00,880
the scenario uh we can add

1504
00:43:58,720 --> 00:44:02,399
this we can add resiliency but we can

1505
00:44:00,880 --> 00:44:04,319
keep the same cluster in some cases even

1506
00:44:02,400 --> 00:44:06,240
reduce it

1507
00:44:04,319 --> 00:44:08,240
so we know at least that it can easily

1508
00:44:06,240 --> 00:44:10,399
be containerized so we'll do that

1509
00:44:08,240 --> 00:44:12,399
um we need to build container images for

1510
00:44:10,400 --> 00:44:14,079
our app and the best practice here is to

1511
00:44:12,400 --> 00:44:15,680
try and make them as small as possible

1512
00:44:14,079 --> 00:44:17,280
so that they only contain the kind of

1513
00:44:15,680 --> 00:44:18,640
exact dependencies that you need for

1514
00:44:17,280 --> 00:44:20,240
running your application

1515
00:44:18,640 --> 00:44:22,640
so it's going to be dead easy to just

1516
00:44:20,240 --> 00:44:23,118
pick a regular ubuntu image off docker

1517
00:44:22,640 --> 00:44:24,480
hub

1518
00:44:23,119 --> 00:44:26,400
slap everything on top of that hope for

1519
00:44:24,480 --> 00:44:27,760
the best and

1520
00:44:26,400 --> 00:44:29,200
but that's going to be full of

1521
00:44:27,760 --> 00:44:31,040
vulnerable applications that your

1522
00:44:29,200 --> 00:44:31,919
application doesn't need and cvs that

1523
00:44:31,040 --> 00:44:33,440
are stacking up

1524
00:44:31,920 --> 00:44:34,800
making your whole application more

1525
00:44:33,440 --> 00:44:36,000
vulnerable but not actually adding

1526
00:44:34,800 --> 00:44:37,359
anything to your app

1527
00:44:36,000 --> 00:44:39,520
so instead try and start off with a

1528
00:44:37,359 --> 00:44:41,040
smaller distro like alpine linux and add

1529
00:44:39,520 --> 00:44:41,759
stuff onto that so you know exactly

1530
00:44:41,040 --> 00:44:44,400
what's in

1531
00:44:41,760 --> 00:44:45,839
your images once you've built the images

1532
00:44:44,400 --> 00:44:47,440
uh we're gonna need to store them in a

1533
00:44:45,839 --> 00:44:48,720
way that they can be deployed which is a

1534
00:44:47,440 --> 00:44:50,319
container registry

1535
00:44:48,720 --> 00:44:51,759
so we're going to use aws this one for

1536
00:44:50,319 --> 00:44:54,079
that as well the elastic container

1537
00:44:51,760 --> 00:44:55,119
registry ecr

1538
00:44:54,079 --> 00:44:56,640
that's what we're going to use it has

1539
00:44:55,119 --> 00:44:57,920
nice integration with all the other

1540
00:44:56,640 --> 00:44:59,839
container services

1541
00:44:57,920 --> 00:45:01,040
and free vulnerability scanning and we

1542
00:44:59,839 --> 00:45:02,720
can manage all the authentication

1543
00:45:01,040 --> 00:45:04,480
between our different pieces of our app

1544
00:45:02,720 --> 00:45:06,000
with iam rolls

1545
00:45:04,480 --> 00:45:08,000
so we're also going to need to pick a

1546
00:45:06,000 --> 00:45:09,520
way to actually run these containers

1547
00:45:08,000 --> 00:45:10,560
so we could just keep them on a big 82

1548
00:45:09,520 --> 00:45:12,000
instance that we've got it doesn't

1549
00:45:10,560 --> 00:45:14,480
really give us any benefit

1550
00:45:12,000 --> 00:45:16,800
um and in fact just adds another layer

1551
00:45:14,480 --> 00:45:18,560
for us to to manage the docker demon

1552
00:45:16,800 --> 00:45:19,920
and we could use kubernetes but since

1553
00:45:18,560 --> 00:45:21,599
this is a talk on

1554
00:45:19,920 --> 00:45:23,440
architecture and security and aws and

1555
00:45:21,599 --> 00:45:24,720
not endlessly screaming into the void

1556
00:45:23,440 --> 00:45:26,560
i'm going to skip over that because it's

1557
00:45:24,720 --> 00:45:29,359
just a little bit too complicated

1558
00:45:26,560 --> 00:45:31,119
um we could use ecs will you provision a

1559
00:45:29,359 --> 00:45:34,319
fleet of ec2 instances

1560
00:45:31,119 --> 00:45:35,760
um and then aws manage the orchestration

1561
00:45:34,319 --> 00:45:37,520
running all the containers across

1562
00:45:35,760 --> 00:45:38,800
across that for you but then you're

1563
00:45:37,520 --> 00:45:39,599
still gonna manage less updates and

1564
00:45:38,800 --> 00:45:41,200
everything like that that we're trying

1565
00:45:39,599 --> 00:45:43,119
to get away from

1566
00:45:41,200 --> 00:45:45,279
so finally we've got fargate which is

1567
00:45:43,119 --> 00:45:46,319
basically a fully managed container

1568
00:45:45,280 --> 00:45:48,000
platform

1569
00:45:46,319 --> 00:45:49,759
so you throw your container images at

1570
00:45:48,000 --> 00:45:50,480
aws along with the hardware spec that

1571
00:45:49,760 --> 00:45:52,480
you want to give them

1572
00:45:50,480 --> 00:45:53,839
and they just run them for you and

1573
00:45:52,480 --> 00:45:55,599
there's no underlying infrastructure to

1574
00:45:53,839 --> 00:45:56,319
manage and aws is responsible for the

1575
00:45:55,599 --> 00:45:58,079
security

1576
00:45:56,319 --> 00:45:59,839
of all the layers up until your docker

1577
00:45:58,079 --> 00:46:01,200
image your application which is about

1578
00:45:59,839 --> 00:46:04,319
you should be securing anyway

1579
00:46:01,200 --> 00:46:06,640
and so let's go for that one so an

1580
00:46:04,319 --> 00:46:08,480
app that is configured to run on fargate

1581
00:46:06,640 --> 00:46:10,160
uh uses what's called a service so the

1582
00:46:08,480 --> 00:46:11,520
service manages things like how many

1583
00:46:10,160 --> 00:46:13,040
containers you actually want deployed

1584
00:46:11,520 --> 00:46:14,720
where you want them placed

1585
00:46:13,040 --> 00:46:16,560
and we can configure this service to

1586
00:46:14,720 --> 00:46:17,279
deploy across multiple availability

1587
00:46:16,560 --> 00:46:19,440
zones

1588
00:46:17,280 --> 00:46:21,200
so that even if we lose a whole data

1589
00:46:19,440 --> 00:46:22,880
center fargate just spins up more

1590
00:46:21,200 --> 00:46:25,279
containers in the surviving availability

1591
00:46:22,880 --> 00:46:27,680
zones to to manage that load for us

1592
00:46:25,280 --> 00:46:29,599
um we also want to enable auto scaling

1593
00:46:27,680 --> 00:46:30,319
based on some kind of metric like cpu

1594
00:46:29,599 --> 00:46:32,240
usage

1595
00:46:30,319 --> 00:46:33,599
and that means we can run lots of really

1596
00:46:32,240 --> 00:46:35,759
small containers that scale really

1597
00:46:33,599 --> 00:46:38,240
granularly to cover our demand so

1598
00:46:35,760 --> 00:46:39,280
if you imagine um your user demand is a

1599
00:46:38,240 --> 00:46:41,598
big wiggly graph

1600
00:46:39,280 --> 00:46:43,040
over time um you want your server

1601
00:46:41,599 --> 00:46:44,720
capacity the resources that you're

1602
00:46:43,040 --> 00:46:45,520
deploying to hug that graph as closely

1603
00:46:44,720 --> 00:46:46,959
as possible

1604
00:46:45,520 --> 00:46:48,240
so you always have just the right amount

1605
00:46:46,960 --> 00:46:51,040
of compute provision to deal with your

1606
00:46:48,240 --> 00:46:52,479
load for for the best cost

1607
00:46:51,040 --> 00:46:54,079
and then finally we're going to want to

1608
00:46:52,480 --> 00:46:54,960
stick a load balancer in front of our

1609
00:46:54,079 --> 00:46:57,119
new api

1610
00:46:54,960 --> 00:46:59,040
and so load balancer will manage which

1611
00:46:57,119 --> 00:47:00,480
container serves your api requests

1612
00:46:59,040 --> 00:47:02,400
and help balance the load more evenly

1613
00:47:00,480 --> 00:47:03,760
across your infrastructure there's also

1614
00:47:02,400 --> 00:47:04,640
quite a few security benefits to using

1615
00:47:03,760 --> 00:47:06,400
them

1616
00:47:04,640 --> 00:47:09,680
so you can use them to automatically

1617
00:47:06,400 --> 00:47:11,520
deploy aws managed tls search

1618
00:47:09,680 --> 00:47:13,118
so aws handles the issuing and the

1619
00:47:11,520 --> 00:47:14,720
renewal for you it's more on

1620
00:47:13,119 --> 00:47:15,839
differentiated lifting that you're not

1621
00:47:14,720 --> 00:47:17,598
having to do

1622
00:47:15,839 --> 00:47:20,319
and it's very simple to configure on

1623
00:47:17,599 --> 00:47:20,800
them things like tls versions cipher

1624
00:47:20,319 --> 00:47:22,160
suites

1625
00:47:20,800 --> 00:47:23,920
it's much less error prone than you

1626
00:47:22,160 --> 00:47:25,839
manually going in and editing nginx

1627
00:47:23,920 --> 00:47:27,839
config files or something like that

1628
00:47:25,839 --> 00:47:28,960
and the load balancer becomes the actual

1629
00:47:27,839 --> 00:47:30,400
public facing

1630
00:47:28,960 --> 00:47:32,000
part of your application it's another

1631
00:47:30,400 --> 00:47:33,200
piece that aws is responsible for the

1632
00:47:32,000 --> 00:47:35,760
security of

1633
00:47:33,200 --> 00:47:37,200
um and that means you containers can

1634
00:47:35,760 --> 00:47:39,200
just live in a private subnet as i've

1635
00:47:37,200 --> 00:47:40,480
got here and with no direct internet

1636
00:47:39,200 --> 00:47:42,960
access because the alb

1637
00:47:40,480 --> 00:47:44,960
is kind of an intermediary for you and

1638
00:47:42,960 --> 00:47:47,200
that becomes the public facing

1639
00:47:44,960 --> 00:47:48,319
uh piece for you so this was the

1640
00:47:47,200 --> 00:47:50,240
original architecture

1641
00:47:48,319 --> 00:47:52,640
that we ended up with not resilient not

1642
00:47:50,240 --> 00:47:54,640
really scalable not really that secure

1643
00:47:52,640 --> 00:47:56,078
and then without a great deal of effort

1644
00:47:54,640 --> 00:47:57,440
we've moved it to something that looks

1645
00:47:56,079 --> 00:47:59,599
far more complicated

1646
00:47:57,440 --> 00:48:00,720
and but we actually have far less hand

1647
00:47:59,599 --> 00:48:01,680
than actually managing

1648
00:48:00,720 --> 00:48:04,078
and we've given a lot of the

1649
00:48:01,680 --> 00:48:06,720
responsibility over so the

1650
00:48:04,079 --> 00:48:07,920
static site is running entirely on

1651
00:48:06,720 --> 00:48:09,680
serverless infrastructure we're not

1652
00:48:07,920 --> 00:48:10,480
managing that at all aws are handling it

1653
00:48:09,680 --> 00:48:13,040
for us

1654
00:48:10,480 --> 00:48:14,240
uh and with the the api we've reduced

1655
00:48:13,040 --> 00:48:16,240
our attack surface to

1656
00:48:14,240 --> 00:48:18,160
just the publicly exposed load balancer

1657
00:48:16,240 --> 00:48:18,959
and we've got automated failover and

1658
00:48:18,160 --> 00:48:20,960
scaling

1659
00:48:18,960 --> 00:48:22,640
running for us so we're resilient to

1660
00:48:20,960 --> 00:48:23,599
failures we can withstand the loss of a

1661
00:48:22,640 --> 00:48:25,118
whole data center

1662
00:48:23,599 --> 00:48:26,800
it's a more cost effective deployment

1663
00:48:25,119 --> 00:48:29,599
because the infrastructure tracks

1664
00:48:26,800 --> 00:48:31,280
the actual server demand and we've

1665
00:48:29,599 --> 00:48:33,040
handed responsibility for the boring but

1666
00:48:31,280 --> 00:48:34,319
essential bits to aws

1667
00:48:33,040 --> 00:48:36,800
and reduce the attack surface a little

1668
00:48:34,319 --> 00:48:38,079
bit by only exposing a load balancer

1669
00:48:36,800 --> 00:48:41,200
instead of a whole bunch of random

1670
00:48:38,079 --> 00:48:43,280
administration ports so

1671
00:48:41,200 --> 00:48:44,720
the final words it's good to have some

1672
00:48:43,280 --> 00:48:45,920
idea what you're doing before you just

1673
00:48:44,720 --> 00:48:48,799
dive right in

1674
00:48:45,920 --> 00:48:50,319
um try and design with the cloud in mind

1675
00:48:48,800 --> 00:48:51,040
so don't just build the same thing you

1676
00:48:50,319 --> 00:48:52,558
build

1677
00:48:51,040 --> 00:48:54,319
in a regular data center environment

1678
00:48:52,559 --> 00:48:55,920
because you can build better things on

1679
00:48:54,319 --> 00:48:58,400
the cloud

1680
00:48:55,920 --> 00:48:59,680
and then finally security is important

1681
00:48:58,400 --> 00:49:01,280
you might always find yourself in an

1682
00:48:59,680 --> 00:49:02,799
environment that's supportive of that

1683
00:49:01,280 --> 00:49:04,000
um but you can always make sure that

1684
00:49:02,800 --> 00:49:04,720
you're at least trying to build the best

1685
00:49:04,000 --> 00:49:09,839
thing that you can

1686
00:49:04,720 --> 00:49:09,839
given your circumstances thanks very

1687
00:49:14,839 --> 00:49:18,400
much

1688
00:49:16,160 --> 00:49:19,279
uh just before i take any questions uh

1689
00:49:18,400 --> 00:49:21,680
i'm on twitter

1690
00:49:19,280 --> 00:49:23,040
at jgm software uh i'll publish these

1691
00:49:21,680 --> 00:49:24,799
slides for download um

1692
00:49:23,040 --> 00:49:26,240
after this there is a bunch of extra

1693
00:49:24,800 --> 00:49:27,440
slides at the end with kind of resources

1694
00:49:26,240 --> 00:49:28,558
and links that could be useful if you

1695
00:49:27,440 --> 00:49:29,440
want to look into any of this stuff

1696
00:49:28,559 --> 00:49:30,880
yourself

1697
00:49:29,440 --> 00:49:32,800
so if this has been of interest please

1698
00:49:30,880 --> 00:49:35,119
go and take a look send one of any

1699
00:49:32,800 --> 00:49:35,119
questions

1700
00:49:39,680 --> 00:49:45,839
cool that was easy okay thanks very much

