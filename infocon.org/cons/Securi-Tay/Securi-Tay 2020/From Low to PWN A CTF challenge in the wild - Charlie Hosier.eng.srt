1
00:00:03,439 --> 00:00:07,440
so yeah first off thank you for

2
00:00:05,200 --> 00:00:09,360
coming to see my talk uh from low to

3
00:00:07,440 --> 00:00:10,480
poem ctf challenge in the wild

4
00:00:09,360 --> 00:00:13,200
i'm going to be speaking about

5
00:00:10,480 --> 00:00:16,160
vulnerability i found in prestashop

6
00:00:13,200 --> 00:00:16,640
um and it was sort of kind of the steps

7
00:00:16,160 --> 00:00:19,119
of

8
00:00:16,640 --> 00:00:20,080
exploiting it were very sort of ctf like

9
00:00:19,119 --> 00:00:23,840
uh

10
00:00:20,080 --> 00:00:26,400
submit and and here i am um

11
00:00:23,840 --> 00:00:28,000
so the agenda i'm going to just go over

12
00:00:26,400 --> 00:00:30,799
a sort of introduction to what

13
00:00:28,000 --> 00:00:32,960
prestashop is the methodology i've used

14
00:00:30,800 --> 00:00:34,640
in order to find vulnerability

15
00:00:32,960 --> 00:00:36,160
it's sort of chaining two issues

16
00:00:34,640 --> 00:00:37,360
together so i'm going to first speak

17
00:00:36,160 --> 00:00:39,599
about the first issue

18
00:00:37,360 --> 00:00:41,200
and then the second issue the ctf

19
00:00:39,600 --> 00:00:43,680
likeness

20
00:00:41,200 --> 00:00:45,120
finally popping shells and a sort of

21
00:00:43,680 --> 00:00:48,640
disclosure timeline

22
00:00:45,120 --> 00:00:52,000
uh in regards to this vulnerability

23
00:00:48,640 --> 00:00:53,680
who am i um i'm a junior cyber security

24
00:00:52,000 --> 00:00:55,680
consultant at ncc group

25
00:00:53,680 --> 00:00:57,920
i'm a third-year edinburgh napier

26
00:00:55,680 --> 00:00:58,640
student and i'm on my sort of placement

27
00:00:57,920 --> 00:01:00,559
year

28
00:00:58,640 --> 00:01:02,320
uh i've also if you're at sophia's talk

29
00:01:00,559 --> 00:01:03,919
before she was the captain of team uk i

30
00:01:02,320 --> 00:01:06,560
was in that team as well

31
00:01:03,920 --> 00:01:07,360
um and i also won the cyber security

32
00:01:06,560 --> 00:01:10,000
master class

33
00:01:07,360 --> 00:01:12,479
in 2018 uh never spoke at a few

34
00:01:10,000 --> 00:01:15,920
conferences as well

35
00:01:12,479 --> 00:01:19,119
so first things first what is prestashop

36
00:01:15,920 --> 00:01:20,880
prestashop is an ecommerce platform

37
00:01:19,119 --> 00:01:22,320
on its website it says prestashop is an

38
00:01:20,880 --> 00:01:24,158
e-commerce software that allows you to

39
00:01:22,320 --> 00:01:26,080
easily create your online store

40
00:01:24,159 --> 00:01:27,840
it lets you develop business activity to

41
00:01:26,080 --> 00:01:29,439
generate maximum sales

42
00:01:27,840 --> 00:01:31,119
you'll be able to easily sell your

43
00:01:29,439 --> 00:01:33,199
products online from your website

44
00:01:31,119 --> 00:01:34,960
take advantages of features and modules

45
00:01:33,200 --> 00:01:36,960
with our ecommerce software

46
00:01:34,960 --> 00:01:38,399
it allows you to run a business online

47
00:01:36,960 --> 00:01:42,079
essentially it allows you to set up

48
00:01:38,400 --> 00:01:43,680
an online store and sell products

49
00:01:42,079 --> 00:01:45,360
it claims to have over a million

50
00:01:43,680 --> 00:01:46,640
community members a thousand

51
00:01:45,360 --> 00:01:48,880
contributors

52
00:01:46,640 --> 00:01:50,240
uh it's got some quite large partners

53
00:01:48,880 --> 00:01:51,839
and it also claims that there's three

54
00:01:50,240 --> 00:01:53,199
hundred thousand merchants so

55
00:01:51,840 --> 00:01:53,680
essentially three hundred thousand

56
00:01:53,200 --> 00:01:57,119
people

57
00:01:53,680 --> 00:02:00,399
using its software so

58
00:01:57,119 --> 00:02:01,439
that's prestashop in terms of what is

59
00:02:00,399 --> 00:02:04,240
it's an open source

60
00:02:01,439 --> 00:02:04,798
application so my methodology was first

61
00:02:04,240 --> 00:02:07,280
to do

62
00:02:04,799 --> 00:02:08,399
kind of an analysis of the source code

63
00:02:07,280 --> 00:02:10,160
and see if i can find any

64
00:02:08,399 --> 00:02:11,920
vulnerabilities through that

65
00:02:10,160 --> 00:02:13,440
then after that i went ahead and had a

66
00:02:11,920 --> 00:02:16,079
look at the sort of functionality

67
00:02:13,440 --> 00:02:17,920
of of the platform how it works what

68
00:02:16,080 --> 00:02:19,520
sort of things can you do

69
00:02:17,920 --> 00:02:20,839
and finally then have a look and

70
00:02:19,520 --> 00:02:23,360
actually see if i can find any

71
00:02:20,840 --> 00:02:27,120
vulnerabilities

72
00:02:23,360 --> 00:02:30,000
so the source code review or grep 101

73
00:02:27,120 --> 00:02:31,599
it's here it's written in php so i

74
00:02:30,000 --> 00:02:34,080
essentially just wrapped for

75
00:02:31,599 --> 00:02:34,840
these sort of calls unfortunately

76
00:02:34,080 --> 00:02:37,360
nothing

77
00:02:34,840 --> 00:02:37,920
returned when i was doing this so for

78
00:02:37,360 --> 00:02:39,440
example

79
00:02:37,920 --> 00:02:41,040
if you grab the system and you can see

80
00:02:39,440 --> 00:02:42,480
that it's running a system on some

81
00:02:41,040 --> 00:02:43,599
user-supplied input

82
00:02:42,480 --> 00:02:45,040
all of a sudden you've almost

83
00:02:43,599 --> 00:02:47,679
immediately got code execution

84
00:02:45,040 --> 00:02:50,799
vulnerability given what system does

85
00:02:47,680 --> 00:02:53,280
and when i do this sort of stuff

86
00:02:50,800 --> 00:02:54,319
i always tend to do regret for sort of

87
00:02:53,280 --> 00:02:57,360
csrf

88
00:02:54,319 --> 00:02:59,119
or xsrf and token things like this

89
00:02:57,360 --> 00:03:00,560
just to get an idea if the application

90
00:02:59,120 --> 00:03:02,400
is employing any kind of

91
00:03:00,560 --> 00:03:03,760
cross-site request for audrey middleware

92
00:03:02,400 --> 00:03:05,519
and if it's not then

93
00:03:03,760 --> 00:03:08,000
you almost immediately have a

94
00:03:05,519 --> 00:03:10,000
vulnerability as well

95
00:03:08,000 --> 00:03:11,120
uh so yeah so the software review didn't

96
00:03:10,000 --> 00:03:13,200
really return anything

97
00:03:11,120 --> 00:03:15,440
particularly interesting so then i moved

98
00:03:13,200 --> 00:03:18,079
on to having a look at the actual

99
00:03:15,440 --> 00:03:19,120
sort of the functionality and prestashop

100
00:03:18,080 --> 00:03:21,599
has a front end

101
00:03:19,120 --> 00:03:22,720
which is essentially you know your what

102
00:03:21,599 --> 00:03:25,040
your your start

103
00:03:22,720 --> 00:03:26,239
how people will add products to their

104
00:03:25,040 --> 00:03:27,599
basket and

105
00:03:26,239 --> 00:03:29,840
you know there's accounts and stuff like

106
00:03:27,599 --> 00:03:30,879
that it also has a back end

107
00:03:29,840 --> 00:03:33,040
and this is where i found the

108
00:03:30,879 --> 00:03:34,480
vulnerabilities it's in the back end

109
00:03:33,040 --> 00:03:36,159
so this is the administration of the

110
00:03:34,480 --> 00:03:38,480
start uh you can do

111
00:03:36,159 --> 00:03:39,200
lots of different things you know you

112
00:03:38,480 --> 00:03:41,440
can manage

113
00:03:39,200 --> 00:03:42,399
products you can set up shipping stuff

114
00:03:41,440 --> 00:03:45,359
like this

115
00:03:42,400 --> 00:03:47,040
that's all done through the back end

116
00:03:45,360 --> 00:03:49,280
within the back end

117
00:03:47,040 --> 00:03:51,280
there's lots of different user accounts

118
00:03:49,280 --> 00:03:53,920
now the defaults are super admin

119
00:03:51,280 --> 00:03:56,640
logistician translator and salesman and

120
00:03:53,920 --> 00:03:58,879
the accounts have different privileges

121
00:03:56,640 --> 00:04:00,399
the privileges of these users obviously

122
00:03:58,879 --> 00:04:02,079
super admin has

123
00:04:00,400 --> 00:04:03,599
a fair amount of privilege it has you

124
00:04:02,080 --> 00:04:06,080
know it can do everything

125
00:04:03,599 --> 00:04:07,679
the interesting ones on here uh database

126
00:04:06,080 --> 00:04:08,319
and modules i said that's what we're

127
00:04:07,680 --> 00:04:10,799
going to use

128
00:04:08,319 --> 00:04:12,399
later on in the talk um but yeah so

129
00:04:10,799 --> 00:04:16,160
that's some of the permissions that

130
00:04:12,400 --> 00:04:18,320
super admin has the logistician

131
00:04:16,160 --> 00:04:20,000
has you know less access it only has

132
00:04:18,320 --> 00:04:21,680
enough access to be able to perform

133
00:04:20,000 --> 00:04:24,479
its job and you actually have the

134
00:04:21,680 --> 00:04:27,520
ability to modify these permissions

135
00:04:24,479 --> 00:04:30,400
to suit your needs translator

136
00:04:27,520 --> 00:04:30,960
again you know it also has minimal

137
00:04:30,400 --> 00:04:33,280
position

138
00:04:30,960 --> 00:04:35,280
uh permissions based on what it needs to

139
00:04:33,280 --> 00:04:37,599
be able to do

140
00:04:35,280 --> 00:04:38,880
and salesman again you know its

141
00:04:37,600 --> 00:04:39,840
permissions are going to be more in the

142
00:04:38,880 --> 00:04:42,800
sales base

143
00:04:39,840 --> 00:04:44,080
side of the of the platform um so that's

144
00:04:42,800 --> 00:04:45,680
the sort of function a quick

145
00:04:44,080 --> 00:04:47,359
overview of functionality and you know

146
00:04:45,680 --> 00:04:48,720
the permissions and stuff

147
00:04:47,360 --> 00:04:50,720
so then it goes on to exploiting

148
00:04:48,720 --> 00:04:52,560
functionality so

149
00:04:50,720 --> 00:04:54,080
who can tell me that list of

150
00:04:52,560 --> 00:04:56,639
vulnerabilities what it is

151
00:04:54,080 --> 00:04:59,919
just shout it out as well awesome i'll

152
00:04:56,639 --> 00:05:02,720
buy you a drink at the free bar later

153
00:04:59,919 --> 00:05:03,440
um yeah so after i've had them go sort

154
00:05:02,720 --> 00:05:05,440
of and

155
00:05:03,440 --> 00:05:06,560
see what the application can do you can

156
00:05:05,440 --> 00:05:08,400
then start to target

157
00:05:06,560 --> 00:05:10,320
different parts of the app application

158
00:05:08,400 --> 00:05:11,840
where there's you know user input you

159
00:05:10,320 --> 00:05:14,080
start testing it for injections

160
00:05:11,840 --> 00:05:15,679
cross-site scripting etc

161
00:05:14,080 --> 00:05:17,840
and this is where i draw the attention

162
00:05:15,680 --> 00:05:19,360
to where the vulnerabilities sort of lie

163
00:05:17,840 --> 00:05:21,039
in this case they lie in the quick

164
00:05:19,360 --> 00:05:23,120
access toolbar

165
00:05:21,039 --> 00:05:24,639
so within the administrator platform you

166
00:05:23,120 --> 00:05:26,800
have a drop down on the top left

167
00:05:24,639 --> 00:05:28,639
which is called the quick access and

168
00:05:26,800 --> 00:05:30,320
within this there's just some hyperlinks

169
00:05:28,639 --> 00:05:33,360
which point you towards

170
00:05:30,320 --> 00:05:34,320
different parts of the platform there's

171
00:05:33,360 --> 00:05:37,120
also

172
00:05:34,320 --> 00:05:38,960
quick access in order to modify the

173
00:05:37,120 --> 00:05:39,520
quick access toolbar so at the bottom of

174
00:05:38,960 --> 00:05:41,680
the quick

175
00:05:39,520 --> 00:05:43,520
access toolbar there you've got remove

176
00:05:41,680 --> 00:05:44,639
from quick access and manage quick

177
00:05:43,520 --> 00:05:47,280
access

178
00:05:44,639 --> 00:05:47,919
uh so it you know it gives you a lot

179
00:05:47,280 --> 00:05:50,840
more

180
00:05:47,919 --> 00:05:52,320
so you can do a lot of things with this

181
00:05:50,840 --> 00:05:54,400
toolbar um

182
00:05:52,320 --> 00:05:56,319
obviously if you visit a page which is

183
00:05:54,400 --> 00:05:57,679
already on the quick access toolbar

184
00:05:56,319 --> 00:05:59,759
instead of being removed from quick

185
00:05:57,680 --> 00:06:01,039
access it turns into add to quick access

186
00:05:59,759 --> 00:06:01,680
and this is where the vulnerabilities

187
00:06:01,039 --> 00:06:03,520
are so

188
00:06:01,680 --> 00:06:05,120
the first vulnerability i found against

189
00:06:03,520 --> 00:06:06,318
this is a simple access control

190
00:06:05,120 --> 00:06:08,080
vulnerability

191
00:06:06,319 --> 00:06:09,520
vulnerability you could argue it's not

192
00:06:08,080 --> 00:06:10,639
necessarily a vulnerability it's not

193
00:06:09,520 --> 00:06:13,520
functionality

194
00:06:10,639 --> 00:06:14,560
but given as a lower level sort of

195
00:06:13,520 --> 00:06:16,479
administrator user

196
00:06:14,560 --> 00:06:18,000
salesman account something like that if

197
00:06:16,479 --> 00:06:20,318
you attempt to manage

198
00:06:18,000 --> 00:06:21,120
the quick access toolbar you get access

199
00:06:20,319 --> 00:06:23,120
denied

200
00:06:21,120 --> 00:06:25,039
however it still exists that if you use

201
00:06:23,120 --> 00:06:27,840
the quick access

202
00:06:25,039 --> 00:06:28,560
quick access then you can actually still

203
00:06:27,840 --> 00:06:31,359
modify

204
00:06:28,560 --> 00:06:34,560
the quick access toolbar and not only

205
00:06:31,360 --> 00:06:34,560
does it modify it for

206
00:06:35,199 --> 00:06:38,639
also modifies it for the super

207
00:06:36,720 --> 00:06:40,880
administrator account as well

208
00:06:38,639 --> 00:06:42,639
um so we can begin to sort of make

209
00:06:40,880 --> 00:06:43,759
changes to what the super admin can

210
00:06:42,639 --> 00:06:46,240
actually see

211
00:06:43,759 --> 00:06:48,720
um so in this case simply added orders

212
00:06:46,240 --> 00:06:50,720
to the quick access toolbar

213
00:06:48,720 --> 00:06:52,560
so obviously that's great but all you're

214
00:06:50,720 --> 00:06:56,000
doing is adding links to the shop

215
00:06:52,560 --> 00:06:58,880
onto this toolbar so then if we

216
00:06:56,000 --> 00:06:59,919
intercept the request you can see that

217
00:06:58,880 --> 00:07:01,919
all that's happening is

218
00:06:59,919 --> 00:07:03,758
the url is being passed with the url

219
00:07:01,919 --> 00:07:04,880
parameter so what would we change that

220
00:07:03,759 --> 00:07:08,479
to something like

221
00:07:04,880 --> 00:07:11,680
http example.com what will happen

222
00:07:08,479 --> 00:07:14,318
so when you submit that request you

223
00:07:11,680 --> 00:07:16,800
it posts it to the the server and

224
00:07:14,319 --> 00:07:18,639
something exciting happens

225
00:07:16,800 --> 00:07:20,000
this is where i introduce this sort of

226
00:07:18,639 --> 00:07:22,560
odd functionality

227
00:07:20,000 --> 00:07:23,759
which allows this vulnerability that i'm

228
00:07:22,560 --> 00:07:26,400
going to speak about

229
00:07:23,759 --> 00:07:28,000
so to happen if you make a modification

230
00:07:26,400 --> 00:07:29,758
to the quick access toolbar

231
00:07:28,000 --> 00:07:31,599
you can notice on the left that's after

232
00:07:29,759 --> 00:07:33,919
a modification the

233
00:07:31,599 --> 00:07:36,479
sort of the modified the quick access

234
00:07:33,919 --> 00:07:37,919
toolbar options disappear

235
00:07:36,479 --> 00:07:39,680
and on the right is just if you were to

236
00:07:37,919 --> 00:07:41,599
just visit the quick access toolbar

237
00:07:39,680 --> 00:07:44,000
without making a modification

238
00:07:41,599 --> 00:07:45,440
now what actually happens here is the

239
00:07:44,000 --> 00:07:47,759
hyperlink slightly change

240
00:07:45,440 --> 00:07:50,160
so the one on the left all of a sudden

241
00:07:47,759 --> 00:07:52,720
becomes http example.com

242
00:07:50,160 --> 00:07:53,599
while the one on the right is you know a

243
00:07:52,720 --> 00:07:55,199
link within

244
00:07:53,599 --> 00:07:57,280
prestashop itself which would just give

245
00:07:55,199 --> 00:07:59,039
a 404

246
00:07:57,280 --> 00:08:00,400
which caught my eye and i thought it's

247
00:07:59,039 --> 00:08:01,280
you know quite interesting why it's

248
00:08:00,400 --> 00:08:04,000
doing that

249
00:08:01,280 --> 00:08:06,559
but it also allows us to gain some kind

250
00:08:04,000 --> 00:08:06,560
of foothold

251
00:08:07,840 --> 00:08:11,359
so open redirect

252
00:08:11,599 --> 00:08:16,240
so this is just a demonstration of what

253
00:08:14,960 --> 00:08:18,479
i just spoke about

254
00:08:16,240 --> 00:08:19,280
so you go to the quick access toolbar

255
00:08:18,479 --> 00:08:21,199
and then

256
00:08:19,280 --> 00:08:22,960
in this instance i'm just deleting

257
00:08:21,199 --> 00:08:24,000
something from the quick access toolbar

258
00:08:22,960 --> 00:08:26,000
in order to sort of

259
00:08:24,000 --> 00:08:27,280
demonstrate that it's the modification

260
00:08:26,000 --> 00:08:29,360
has been made

261
00:08:27,280 --> 00:08:31,440
you then re visit the quick access

262
00:08:29,360 --> 00:08:34,560
toolbar again click on the modified link

263
00:08:31,440 --> 00:08:38,799
and we get taken to example.com

264
00:08:34,559 --> 00:08:40,000
um okay so what well the likelihood of

265
00:08:38,799 --> 00:08:42,559
it being exploited is really

266
00:08:40,000 --> 00:08:43,760
low it's really low severity and it

267
00:08:42,559 --> 00:08:45,680
requires some form of

268
00:08:43,760 --> 00:08:46,959
not necessarily social engineering but

269
00:08:45,680 --> 00:08:49,599
it does require

270
00:08:46,959 --> 00:08:50,239
you know some element of that admin has

271
00:08:49,600 --> 00:08:52,959
to

272
00:08:50,240 --> 00:08:53,360
do something in order for it to happen

273
00:08:52,959 --> 00:08:55,920
uh

274
00:08:53,360 --> 00:08:57,360
so in order to escalate this we can use

275
00:08:55,920 --> 00:08:59,760
uris

276
00:08:57,360 --> 00:09:00,720
so a uri is a uniform resource

277
00:08:59,760 --> 00:09:02,000
identifier

278
00:09:00,720 --> 00:09:04,160
it's a string of characters that

279
00:09:02,000 --> 00:09:05,040
unambiguously identifies a particular

280
00:09:04,160 --> 00:09:08,800
resource

281
00:09:05,040 --> 00:09:12,079
the most common ones are http https ftp

282
00:09:08,800 --> 00:09:14,160
my favorite is this one

283
00:09:12,080 --> 00:09:15,519
if you go to google chrome and put

284
00:09:14,160 --> 00:09:18,240
calculator in

285
00:09:15,519 --> 00:09:19,920
followed by just some random characters

286
00:09:18,240 --> 00:09:21,839
then it allows you to launch that

287
00:09:19,920 --> 00:09:23,360
calculator i think that's quite cool and

288
00:09:21,839 --> 00:09:24,800
there's been some interesting research

289
00:09:23,360 --> 00:09:26,560
into things like that because you cannot

290
00:09:24,800 --> 00:09:28,079
do the same thing with microsoft word

291
00:09:26,560 --> 00:09:28,800
and you can potentially load remote

292
00:09:28,080 --> 00:09:30,720
files

293
00:09:28,800 --> 00:09:31,920
uh which have macros in and stuff like

294
00:09:30,720 --> 00:09:34,480
that uh so it's

295
00:09:31,920 --> 00:09:35,279
that's quite interesting a uri that we

296
00:09:34,480 --> 00:09:38,800
can use

297
00:09:35,279 --> 00:09:41,519
in this instance is the javascript uri

298
00:09:38,800 --> 00:09:42,880
if you populate href with javascript

299
00:09:41,519 --> 00:09:44,720
alerts something like that

300
00:09:42,880 --> 00:09:47,120
when you click the href it will execute

301
00:09:44,720 --> 00:09:50,640
the javascript code

302
00:09:47,120 --> 00:09:52,959
as demonstrated here so

303
00:09:50,640 --> 00:09:54,560
if instead of putting http example we

304
00:09:52,959 --> 00:09:56,399
put the javascript uri

305
00:09:54,560 --> 00:09:58,239
when the hyperlink gets clicked it will

306
00:09:56,399 --> 00:10:00,560
now pop essentially it will run

307
00:09:58,240 --> 00:10:02,240
the javascript um so as long as the

308
00:10:00,560 --> 00:10:03,279
modification to the quick access toolbar

309
00:10:02,240 --> 00:10:05,519
has been made

310
00:10:03,279 --> 00:10:06,399
we can now have the ability to populate

311
00:10:05,519 --> 00:10:09,519
the href

312
00:10:06,399 --> 00:10:12,160
with this javascript uri

313
00:10:09,519 --> 00:10:13,120
and then upon clicking it we get alert

314
00:10:12,160 --> 00:10:15,839
zero

315
00:10:13,120 --> 00:10:16,560
um that's great but alert zero isn't

316
00:10:15,839 --> 00:10:19,360
exactly

317
00:10:16,560 --> 00:10:20,880
you know isn't interesting so we want to

318
00:10:19,360 --> 00:10:24,480
see if we can do some other stuff

319
00:10:20,880 --> 00:10:26,079
so alert xss this time if you were to

320
00:10:24,480 --> 00:10:27,120
modify the quick access toolbar with

321
00:10:26,079 --> 00:10:29,839
alert xss

322
00:10:27,120 --> 00:10:30,560
you get link field is invalid um which

323
00:10:29,839 --> 00:10:32,240
is a problem

324
00:10:30,560 --> 00:10:34,239
because it's not you know it's not going

325
00:10:32,240 --> 00:10:35,600
through

326
00:10:34,240 --> 00:10:38,160
this is because if we have a look on the

327
00:10:35,600 --> 00:10:41,519
back end there's different constraints

328
00:10:38,160 --> 00:10:43,199
uh although that array is

329
00:10:41,519 --> 00:10:45,279
part of the software it's not

330
00:10:43,200 --> 00:10:46,800
necessarily for this exact input

331
00:10:45,279 --> 00:10:48,399
however it does demonstrate that they're

332
00:10:46,800 --> 00:10:49,519
doing some kind of filtering for

333
00:10:48,399 --> 00:10:51,360
characters and i saw that

334
00:10:49,519 --> 00:10:52,959
i was like okay cool at least i have an

335
00:10:51,360 --> 00:10:54,640
idea of some of the characters which

336
00:10:52,959 --> 00:10:56,640
might be blacklisted

337
00:10:54,640 --> 00:10:58,560
i also then tested for the length and

338
00:10:56,640 --> 00:11:01,600
found that the maximum length that the

339
00:10:58,560 --> 00:11:03,359
url could be is 255 characters

340
00:11:01,600 --> 00:11:04,959
and because semicolon is blocked and

341
00:11:03,360 --> 00:11:07,200
we're using the javascript uri

342
00:11:04,959 --> 00:11:09,920
we can only really execute a single

343
00:11:07,200 --> 00:11:11,519
javascript command

344
00:11:09,920 --> 00:11:14,079
it's beginning to seem a little bit like

345
00:11:11,519 --> 00:11:15,440
a ctf we've got our constraints and

346
00:11:14,079 --> 00:11:18,079
we've got our target

347
00:11:15,440 --> 00:11:19,040
um and and and i was quite shocked by

348
00:11:18,079 --> 00:11:20,800
that i was like right

349
00:11:19,040 --> 00:11:23,279
this is a challenge i'm gonna see if we

350
00:11:20,800 --> 00:11:25,680
can i can get around it

351
00:11:23,279 --> 00:11:26,880
so when i approach a ctf i always like

352
00:11:25,680 --> 00:11:30,079
to plan

353
00:11:26,880 --> 00:11:31,760
strategy oh no come on

354
00:11:30,079 --> 00:11:33,120
strategy without tactics is the slowest

355
00:11:31,760 --> 00:11:34,880
route to victory tactics without

356
00:11:33,120 --> 00:11:36,399
strategies and noise before defeat sun

357
00:11:34,880 --> 00:11:37,040
zoo i thought putting a quote from sun

358
00:11:36,399 --> 00:11:38,910
tzu would

359
00:11:37,040 --> 00:11:41,040
make me seem a bit more

360
00:11:38,910 --> 00:11:43,680
[Music]

361
00:11:41,040 --> 00:11:45,040
um intellectual my plan well i know i

362
00:11:43,680 --> 00:11:46,719
want to be able to execute as much

363
00:11:45,040 --> 00:11:47,439
javascript as possible and you can do

364
00:11:46,720 --> 00:11:49,440
that using

365
00:11:47,440 --> 00:11:51,200
script source so if you load an external

366
00:11:49,440 --> 00:11:52,720
resource in using script source

367
00:11:51,200 --> 00:11:55,200
then you can essentially get arbitrary

368
00:11:52,720 --> 00:11:57,680
javascript execution

369
00:11:55,200 --> 00:11:58,320
i also know i can use document.write to

370
00:11:57,680 --> 00:12:00,560
write that

371
00:11:58,320 --> 00:12:01,519
to the dom uh and then it will load my

372
00:12:00,560 --> 00:12:03,119
my script in

373
00:12:01,519 --> 00:12:04,560
and that's i can do that through a

374
00:12:03,120 --> 00:12:06,000
single command so this command at the

375
00:12:04,560 --> 00:12:08,638
bottom is essentially

376
00:12:06,000 --> 00:12:09,680
ideally what i would want to be using

377
00:12:08,639 --> 00:12:12,000
but because of the

378
00:12:09,680 --> 00:12:13,920
character sort of blacklist and and the

379
00:12:12,000 --> 00:12:16,480
length i can't really do that

380
00:12:13,920 --> 00:12:17,760
um and also i've done cts in the past

381
00:12:16,480 --> 00:12:19,040
and i know that sometimes using

382
00:12:17,760 --> 00:12:20,959
character codes

383
00:12:19,040 --> 00:12:22,639
i can sometimes you know you can bypass

384
00:12:20,959 --> 00:12:25,199
certain things so the first thing i

385
00:12:22,639 --> 00:12:27,360
looked at was character codes

386
00:12:25,200 --> 00:12:28,240
and i looked at string dot from char

387
00:12:27,360 --> 00:12:30,480
code

388
00:12:28,240 --> 00:12:31,600
uh and i was like okay cool so you give

389
00:12:30,480 --> 00:12:34,800
it a character code

390
00:12:31,600 --> 00:12:35,839
and it returns you know um a string

391
00:12:34,800 --> 00:12:37,120
essentially

392
00:12:35,839 --> 00:12:39,279
and then i'll append all of them

393
00:12:37,120 --> 00:12:41,200
together and then i'll be able to

394
00:12:39,279 --> 00:12:42,880
execute my javascript payload however

395
00:12:41,200 --> 00:12:45,680
unfortunately the length is 1

396
00:12:42,880 --> 00:12:48,240
435 characters long which is a little

397
00:12:45,680 --> 00:12:51,839
bit over 255

398
00:12:48,240 --> 00:12:52,480
so that didn't work um the next thing i

399
00:12:51,839 --> 00:12:55,200
tried was

400
00:12:52,480 --> 00:12:56,880
okay well what about a for loop you can

401
00:12:55,200 --> 00:12:58,560
you know if you use a for loop normally

402
00:12:56,880 --> 00:13:00,240
so in this case we just want to

403
00:12:58,560 --> 00:13:01,680
print out one two three to the to the

404
00:13:00,240 --> 00:13:03,920
log uh

405
00:13:01,680 --> 00:13:05,680
and the for loop at the top looks like

406
00:13:03,920 --> 00:13:07,120
that however there's a lot of

407
00:13:05,680 --> 00:13:09,519
blacklisted characters in there

408
00:13:07,120 --> 00:13:11,839
you can actually loop over an array

409
00:13:09,519 --> 00:13:14,480
using far and then let value of

410
00:13:11,839 --> 00:13:15,279
and have your array and then in brackets

411
00:13:14,480 --> 00:13:18,639
you can then

412
00:13:15,279 --> 00:13:20,800
execute a command against that value

413
00:13:18,639 --> 00:13:22,320
so in this case the far left value of

414
00:13:20,800 --> 00:13:24,000
hotend 5051 because they're the

415
00:13:22,320 --> 00:13:26,079
character codes of one two three

416
00:13:24,000 --> 00:13:27,920
produces the same output as the above

417
00:13:26,079 --> 00:13:30,079
for loop except it's in a single command

418
00:13:27,920 --> 00:13:33,120
rather than multiple lines

419
00:13:30,079 --> 00:13:35,839
so i was like okay brilliant

420
00:13:33,120 --> 00:13:37,279
i'll you know i'll do it the link field

421
00:13:35,839 --> 00:13:38,959
is invalid

422
00:13:37,279 --> 00:13:40,800
right what's going on there then because

423
00:13:38,959 --> 00:13:43,359
the length of the of the string is

424
00:13:40,800 --> 00:13:43,839
actually you know 226 characters long so

425
00:13:43,360 --> 00:13:46,639
it should

426
00:13:43,839 --> 00:13:46,639
it should accept it

427
00:13:46,959 --> 00:13:50,239
so i was like hmm

428
00:13:50,639 --> 00:13:54,880
i knew at that point that it had to be a

429
00:13:53,440 --> 00:13:56,560
blacklisted character

430
00:13:54,880 --> 00:13:58,000
so i thought right well i'll revisit the

431
00:13:56,560 --> 00:13:59,119
characters and see which characters are

432
00:13:58,000 --> 00:14:00,959
actually blacklisted

433
00:13:59,120 --> 00:14:02,480
so a quick put it quickly through

434
00:14:00,959 --> 00:14:04,560
intruder give it

435
00:14:02,480 --> 00:14:06,079
the sort of string character set of all

436
00:14:04,560 --> 00:14:08,000
the you know symbols

437
00:14:06,079 --> 00:14:09,279
and then from that then pass out which

438
00:14:08,000 --> 00:14:11,040
ones have errors in

439
00:14:09,279 --> 00:14:12,639
and i was able to come up with a much

440
00:14:11,040 --> 00:14:14,800
more comprehensive list of

441
00:14:12,639 --> 00:14:16,000
blacklisted characters and it turns out

442
00:14:14,800 --> 00:14:17,839
that square brackets were

443
00:14:16,000 --> 00:14:20,000
within that so i can't use square

444
00:14:17,839 --> 00:14:21,040
brackets now i got thinking about well

445
00:14:20,000 --> 00:14:23,360
okay

446
00:14:21,040 --> 00:14:24,079
i can't use square brackets can i bypass

447
00:14:23,360 --> 00:14:27,199
the actual

448
00:14:24,079 --> 00:14:30,000
characters in a slightly different way

449
00:14:27,199 --> 00:14:32,800
sort of visit the basics again and

450
00:14:30,000 --> 00:14:35,440
that's where i introduced wrl encoding

451
00:14:32,800 --> 00:14:37,760
so when you url encoder character it

452
00:14:35,440 --> 00:14:40,639
will you know it treats it like 75b

453
00:14:37,760 --> 00:14:42,319
however attempting that you know it gave

454
00:14:40,639 --> 00:14:43,279
linkfield invalid because the server was

455
00:14:42,320 --> 00:14:46,320
doing the url d

456
00:14:43,279 --> 00:14:49,839
code when it was sent to the server

457
00:14:46,320 --> 00:14:51,839
however if you do a url you double url

458
00:14:49,839 --> 00:14:53,920
encode the value this is when you take

459
00:14:51,839 --> 00:14:56,880
the url encoded value and then url

460
00:14:53,920 --> 00:14:59,760
encode the percent sign essentially

461
00:14:56,880 --> 00:15:01,439
and submit that to the server it was it

462
00:14:59,760 --> 00:15:04,560
would be successful

463
00:15:01,440 --> 00:15:05,600
so at that point i was like okay well

464
00:15:04,560 --> 00:15:08,079
can that help me

465
00:15:05,600 --> 00:15:09,680
and it can and the reason is is because

466
00:15:08,079 --> 00:15:11,519
when you send this to the server that

467
00:15:09,680 --> 00:15:13,120
does a url decode once

468
00:15:11,519 --> 00:15:15,680
and then it saves you know what it gets

469
00:15:13,120 --> 00:15:18,160
so we'd give it 75 5b

470
00:15:15,680 --> 00:15:18,959
and it would then add percent 5b into

471
00:15:18,160 --> 00:15:20,719
the href

472
00:15:18,959 --> 00:15:23,359
and when you then click on the href the

473
00:15:20,720 --> 00:15:25,360
browser does another urld code

474
00:15:23,360 --> 00:15:26,880
therefore it actually then sees that as

475
00:15:25,360 --> 00:15:31,120
the character that we're trying to

476
00:15:26,880 --> 00:15:32,240
produce so my first solution was simply

477
00:15:31,120 --> 00:15:34,399
to url

478
00:15:32,240 --> 00:15:36,320
in code well wrl encode the square

479
00:15:34,399 --> 00:15:38,399
brackets of the previous soon

480
00:15:36,320 --> 00:15:40,399
and i got update successful and i have

481
00:15:38,399 --> 00:15:40,959
arbitrary javascript execution through

482
00:15:40,399 --> 00:15:42,639
it

483
00:15:40,959 --> 00:15:44,239
because i can write a script tag to the

484
00:15:42,639 --> 00:15:48,800
dom

485
00:15:44,240 --> 00:15:50,639
perfect a second solution i thought well

486
00:15:48,800 --> 00:15:52,560
what's stopping me not doing that for

487
00:15:50,639 --> 00:15:54,240
all blacklisted characters

488
00:15:52,560 --> 00:15:56,319
so these are the blacklisted characters

489
00:15:54,240 --> 00:15:57,440
with their wrl encoded value next to

490
00:15:56,320 --> 00:16:00,480
them

491
00:15:57,440 --> 00:16:00,880
i then put that into a payload and this

492
00:16:00,480 --> 00:16:02,880
is a

493
00:16:00,880 --> 00:16:04,079
internal ncc sort of cross-site script

494
00:16:02,880 --> 00:16:06,000
and proof of concept

495
00:16:04,079 --> 00:16:07,120
and i could i could pop whatever i

496
00:16:06,000 --> 00:16:10,000
wanted

497
00:16:07,120 --> 00:16:11,920
so that worked as well and then i wanted

498
00:16:10,000 --> 00:16:15,279
to see well

499
00:16:11,920 --> 00:16:15,279
is there any other solutions

500
00:16:16,320 --> 00:16:21,600
rtfm it turns out that

501
00:16:19,360 --> 00:16:23,360
string.from charcoaled you can actually

502
00:16:21,600 --> 00:16:25,440
pass it multiple values

503
00:16:23,360 --> 00:16:28,399
so if i just pass it the character codes

504
00:16:25,440 --> 00:16:29,199
like that in string.function65667 blah

505
00:16:28,399 --> 00:16:32,000
blah blah

506
00:16:29,199 --> 00:16:33,439
then that will actually equal abcdef so

507
00:16:32,000 --> 00:16:35,040
all along i could have just done it

508
00:16:33,440 --> 00:16:36,639
like this and then i wouldn't have had

509
00:16:35,040 --> 00:16:38,719
to actually do any

510
00:16:36,639 --> 00:16:40,399
url encoding of any sorts because the

511
00:16:38,720 --> 00:16:41,519
length still matches and i'm still able

512
00:16:40,399 --> 00:16:45,440
to get the altitude

513
00:16:41,519 --> 00:16:49,040
execution brilliant

514
00:16:45,440 --> 00:16:51,759
so i'm going to show you a quick demo of

515
00:16:49,040 --> 00:16:52,800
just getting a sort of cross-site

516
00:16:51,759 --> 00:16:57,279
scripting

517
00:16:52,800 --> 00:17:01,199
an alert so i'm just going to hit add

518
00:16:57,279 --> 00:17:01,199
add something to the quick access

519
00:17:02,839 --> 00:17:05,679
toolbar

520
00:17:04,240 --> 00:17:08,720
intercept the request so that i can

521
00:17:05,679 --> 00:17:08,720
place my uh

522
00:17:16,240 --> 00:17:19,839
forward the request

523
00:17:20,160 --> 00:17:24,559
and then upon now a modification to the

524
00:17:22,480 --> 00:17:27,760
quick access toolbar

525
00:17:24,559 --> 00:17:30,840
um it then primes our link because it

526
00:17:27,760 --> 00:17:32,000
sets it to a href and then we can

527
00:17:30,840 --> 00:17:33,918
execute

528
00:17:32,000 --> 00:17:37,360
and then we've got pop-up brilliant so

529
00:17:33,919 --> 00:17:38,720
we have now arbitrary execution

530
00:17:37,360 --> 00:17:40,639
if we combine that with the previous

531
00:17:38,720 --> 00:17:42,480
vulnerability where we can modify the

532
00:17:40,640 --> 00:17:44,960
quick access toolbar of the super admin

533
00:17:42,480 --> 00:17:46,559
we can now go from a salesman account

534
00:17:44,960 --> 00:17:48,880
and essentially estimate our privilege

535
00:17:46,559 --> 00:17:51,200
is through to super administrator

536
00:17:48,880 --> 00:17:53,280
uh which is ideal so now it comes on to

537
00:17:51,200 --> 00:17:54,240
well what can we do with that

538
00:17:53,280 --> 00:17:57,200
if we have a quick look at the

539
00:17:54,240 --> 00:17:59,360
administrator functionality

540
00:17:57,200 --> 00:18:01,200
the administrator has the ability to

541
00:17:59,360 --> 00:18:03,918
execute sql queries

542
00:18:01,200 --> 00:18:04,400
through an sql manager as an attacker

543
00:18:03,919 --> 00:18:07,679
that's

544
00:18:04,400 --> 00:18:08,320
kind of tempting so i had a look at how

545
00:18:07,679 --> 00:18:10,559
it works

546
00:18:08,320 --> 00:18:11,360
and you simply give it an sql query and

547
00:18:10,559 --> 00:18:13,678
then you make a

548
00:18:11,360 --> 00:18:15,280
request to a later page which then gives

549
00:18:13,679 --> 00:18:17,200
you the response in this case

550
00:18:15,280 --> 00:18:18,480
i tried to select all of the information

551
00:18:17,200 --> 00:18:21,280
from ps employees

552
00:18:18,480 --> 00:18:23,360
which would contain the passwords here

553
00:18:21,280 --> 00:18:24,160
you can see that under the password

554
00:18:23,360 --> 00:18:26,840
field

555
00:18:24,160 --> 00:18:28,240
it's redacted which is a little bit

556
00:18:26,840 --> 00:18:29,678
annoying

557
00:18:28,240 --> 00:18:31,120
and i thought to myself well why might

558
00:18:29,679 --> 00:18:32,240
it be doing that and then i thought well

559
00:18:31,120 --> 00:18:33,918
probably on the server it's doing the

560
00:18:32,240 --> 00:18:36,000
sql query it's getting the response it's

561
00:18:33,919 --> 00:18:38,080
seeing that the column passwd

562
00:18:36,000 --> 00:18:39,840
is you know is there and it's redacting

563
00:18:38,080 --> 00:18:42,000
all of the information

564
00:18:39,840 --> 00:18:43,039
so a simple bypass was simply to use the

565
00:18:42,000 --> 00:18:44,960
ads

566
00:18:43,039 --> 00:18:46,720
and change the name of the column that

567
00:18:44,960 --> 00:18:48,960
it returns to password extract and then

568
00:18:46,720 --> 00:18:52,480
i'm able to extract all of the hashes

569
00:18:48,960 --> 00:18:56,160
um so that was good automating that

570
00:18:52,480 --> 00:18:56,960
was difficult to an extent um having a

571
00:18:56,160 --> 00:18:59,280
look at the request

572
00:18:56,960 --> 00:19:00,320
made the first request the post request

573
00:18:59,280 --> 00:19:02,399
you can see that there's

574
00:19:00,320 --> 00:19:04,320
these tokens which we need to we need to

575
00:19:02,400 --> 00:19:06,480
somehow get

576
00:19:04,320 --> 00:19:08,399
the first token was relatively simple as

577
00:19:06,480 --> 00:19:09,679
it was saved as a variable in javascript

578
00:19:08,400 --> 00:19:11,679
that was already on the page

579
00:19:09,679 --> 00:19:13,120
so simply calling that the variable and

580
00:19:11,679 --> 00:19:16,400
then passing out the token

581
00:19:13,120 --> 00:19:18,639
you should get the token the other token

582
00:19:16,400 --> 00:19:19,440
was on another page so we do an ajax

583
00:19:18,640 --> 00:19:21,520
request

584
00:19:19,440 --> 00:19:22,480
to then get the source of that page and

585
00:19:21,520 --> 00:19:25,280
within a form

586
00:19:22,480 --> 00:19:28,320
on that page you can then use regex to

587
00:19:25,280 --> 00:19:28,320
take out that token

588
00:19:28,559 --> 00:19:32,720
so in order to exploit the sql sort of

589
00:19:31,039 --> 00:19:34,559
injection type thing

590
00:19:32,720 --> 00:19:37,919
a request is made and the payload is

591
00:19:34,559 --> 00:19:38,720
executed we then extract the first token

592
00:19:37,919 --> 00:19:43,200
um

593
00:19:38,720 --> 00:19:43,200
we then make a request to sql requests

594
00:19:43,840 --> 00:19:47,039
uh we then pass out the second

595
00:19:45,520 --> 00:19:48,720
cross-site requestology token

596
00:19:47,039 --> 00:19:50,640
we then make a post request with our

597
00:19:48,720 --> 00:19:52,960
query over to the server

598
00:19:50,640 --> 00:19:54,080
and then make a get request to sql

599
00:19:52,960 --> 00:19:55,840
requests again

600
00:19:54,080 --> 00:19:57,360
this time in order to pass out the query

601
00:19:55,840 --> 00:19:59,199
id and then

602
00:19:57,360 --> 00:20:00,799
we make a get request to the query id in

603
00:19:59,200 --> 00:20:01,440
order to get the response from the sql

604
00:20:00,799 --> 00:20:04,720
query

605
00:20:01,440 --> 00:20:07,760
and then we execute the result um

606
00:20:04,720 --> 00:20:10,799
i'll show you an example

607
00:20:07,760 --> 00:20:12,879
so here the

608
00:20:10,799 --> 00:20:15,440
we make a modification to the quick

609
00:20:12,880 --> 00:20:18,960
access toolbar again

610
00:20:15,440 --> 00:20:24,240
um and then

611
00:20:18,960 --> 00:20:24,240
now we execute this sort of this payload

612
00:20:24,799 --> 00:20:28,879
and the first thing we do is we get the

613
00:20:26,640 --> 00:20:30,559
first cross-site request audrey token

614
00:20:28,880 --> 00:20:32,080
we have the second cross cycle testology

615
00:20:30,559 --> 00:20:35,120
token

616
00:20:32,080 --> 00:20:37,439
we then extract the query id

617
00:20:35,120 --> 00:20:39,840
and then finally excel trade result in

618
00:20:37,440 --> 00:20:42,960
this case log in the passwords into the

619
00:20:39,840 --> 00:20:45,600
console you can see that the passwords

620
00:20:42,960 --> 00:20:45,600
have been locked

621
00:20:46,640 --> 00:20:51,200
so that's great but there's a few

622
00:20:48,559 --> 00:20:51,200
problems

623
00:20:55,120 --> 00:20:59,678
there's a few problems you only have the

624
00:20:57,280 --> 00:21:01,840
ability to execute one query at a time

625
00:20:59,679 --> 00:21:03,200
and the chance of exploiting this over

626
00:21:01,840 --> 00:21:06,000
multiple attempts is

627
00:21:03,200 --> 00:21:07,520
very slim uh and to an extent there's

628
00:21:06,000 --> 00:21:08,400
little indication if the query will

629
00:21:07,520 --> 00:21:09,600
succeed

630
00:21:08,400 --> 00:21:11,200
and you kind of need to know a little

631
00:21:09,600 --> 00:21:11,600
bit about the database before you can

632
00:21:11,200 --> 00:21:14,480
actually

633
00:21:11,600 --> 00:21:15,199
exploit that so i wanted to see what

634
00:21:14,480 --> 00:21:18,000
else there is

635
00:21:15,200 --> 00:21:19,360
so type in some ponyboat more than 3000

636
00:21:18,000 --> 00:21:21,200
prestashop modules exist

637
00:21:19,360 --> 00:21:22,799
to help you customize your online saw

638
00:21:21,200 --> 00:21:24,559
increase traffic improve conversion

639
00:21:22,799 --> 00:21:26,158
rates and build customer loyalty

640
00:21:24,559 --> 00:21:29,678
another super avenue permission is to

641
00:21:26,159 --> 00:21:31,600
manage the modules of the of the shop

642
00:21:29,679 --> 00:21:32,720
which means we can actually gain code

643
00:21:31,600 --> 00:21:35,120
execution

644
00:21:32,720 --> 00:21:37,120
if we upload our own module in this and

645
00:21:35,120 --> 00:21:38,959
the module format was a zip file which

646
00:21:37,120 --> 00:21:41,479
had a directory with the module name

647
00:21:38,960 --> 00:21:42,880
and in that there was an index and the

648
00:21:41,480 --> 00:21:45,120
modulename.php

649
00:21:42,880 --> 00:21:46,880
if we upload that then we're actually

650
00:21:45,120 --> 00:21:48,479
able by visiting

651
00:21:46,880 --> 00:21:50,080
the sort of module followed by the

652
00:21:48,480 --> 00:21:52,720
module name we can then

653
00:21:50,080 --> 00:21:54,879
uh get to index.php and in this case

654
00:21:52,720 --> 00:21:59,200
i've just uploaded some silly deface

655
00:21:54,880 --> 00:22:01,919
page but it's it's possible to do that

656
00:21:59,200 --> 00:22:02,960
so in order to automate that you the

657
00:22:01,919 --> 00:22:05,280
exercise is

658
00:22:02,960 --> 00:22:06,960
executed we extract the first token make

659
00:22:05,280 --> 00:22:08,559
a post request to import

660
00:22:06,960 --> 00:22:10,159
we then make a get request to the module

661
00:22:08,559 --> 00:22:12,799
followed by its name and we get a

662
00:22:10,159 --> 00:22:15,520
reverse shell back um

663
00:22:12,799 --> 00:22:17,120
so that's the in order to avoid encoding

664
00:22:15,520 --> 00:22:19,918
errors you just simply have to

665
00:22:17,120 --> 00:22:22,000
use a file object but i'm running out of

666
00:22:19,919 --> 00:22:24,880
time so we'll skip through that

667
00:22:22,000 --> 00:22:26,640
and then we can gain code execution so

668
00:22:24,880 --> 00:22:27,600
i'll show you the final demonstration of

669
00:22:26,640 --> 00:22:30,480
that

670
00:22:27,600 --> 00:22:31,439
um and talk through the sort of four tap

671
00:22:30,480 --> 00:22:34,320
chain

672
00:22:31,440 --> 00:22:35,200
so the initial so the salesman or a

673
00:22:34,320 --> 00:22:38,840
lower privilege

674
00:22:35,200 --> 00:22:41,840
administrator user logs onto the to the

675
00:22:38,840 --> 00:22:41,840
shop

676
00:22:42,000 --> 00:22:45,919
and then what they do is they're then

677
00:22:43,840 --> 00:22:46,879
going to add a link to the quick access

678
00:22:45,919 --> 00:22:51,840
toolbar

679
00:22:46,880 --> 00:22:55,200
uh so in this case it's just called xs

680
00:22:51,840 --> 00:22:57,039
rc poof proof concept we're going to

681
00:22:55,200 --> 00:23:01,280
intercept that response so that we can

682
00:22:57,039 --> 00:23:03,679
you know actually add change the url

683
00:23:01,280 --> 00:23:05,918
and then using what we learned before

684
00:23:03,679 --> 00:23:07,120
with the javascript uri and bypassing

685
00:23:05,919 --> 00:23:08,960
the characters

686
00:23:07,120 --> 00:23:11,520
blacklisted characters we'll put our

687
00:23:08,960 --> 00:23:13,440
script source in there

688
00:23:11,520 --> 00:23:15,360
then when it gets executed it will write

689
00:23:13,440 --> 00:23:16,640
to the dom at this point

690
00:23:15,360 --> 00:23:18,639
you can see that it's been added to the

691
00:23:16,640 --> 00:23:20,720
quick access toolbar so now

692
00:23:18,640 --> 00:23:22,640
the salesman account signs out and now

693
00:23:20,720 --> 00:23:24,400
i'll just switch over to a sort of cali

694
00:23:22,640 --> 00:23:24,880
instance so that i can demonstrate the

695
00:23:24,400 --> 00:23:27,840
shell

696
00:23:24,880 --> 00:23:27,840
getting connected back

697
00:23:31,280 --> 00:23:36,399
so here i'll just set up my listener

698
00:23:34,400 --> 00:23:37,600
of using that cap to just catch the

699
00:23:36,400 --> 00:23:39,120
reverse shell

700
00:23:37,600 --> 00:23:40,719
obviously if you if this is being

701
00:23:39,120 --> 00:23:42,320
exploited in the wild or whatever

702
00:23:40,720 --> 00:23:43,679
it wouldn't necessarily be on the same

703
00:23:42,320 --> 00:23:44,720
box but it's just for demonstration

704
00:23:43,679 --> 00:23:47,279
purposes

705
00:23:44,720 --> 00:23:49,120
um so at this point the super admin logs

706
00:23:47,279 --> 00:23:51,200
in so now we're looking at it from

707
00:23:49,120 --> 00:23:54,000
the super admins perspective the zooper

708
00:23:51,200 --> 00:23:54,000
admin would log in

709
00:23:58,320 --> 00:24:01,279
and then the zooper admin is then going

710
00:23:59,919 --> 00:24:02,640
to make a modification to the quick

711
00:24:01,279 --> 00:24:04,240
access toolbar

712
00:24:02,640 --> 00:24:06,799
which will then prime our sort of

713
00:24:04,240 --> 00:24:06,799
exploit

714
00:24:07,440 --> 00:24:11,440
so you can see it's successfully updated

715
00:24:09,919 --> 00:24:14,720
and then upon

716
00:24:11,440 --> 00:24:16,840
executing that we get over the shell

717
00:24:14,720 --> 00:24:20,320
back

718
00:24:16,840 --> 00:24:20,320
um yeah

719
00:24:20,720 --> 00:24:25,360
so the disclosure timeline it's quite

720
00:24:23,440 --> 00:24:27,840
shocked actually at how quick it got

721
00:24:25,360 --> 00:24:28,639
sort of fixed i reported it on the 7th

722
00:24:27,840 --> 00:24:30,480
of jan

723
00:24:28,640 --> 00:24:32,240
um an acknowledgement and pull request

724
00:24:30,480 --> 00:24:34,400
was made on the 7th

725
00:24:32,240 --> 00:24:36,320
a cv was assigned on the 9th and on the

726
00:24:34,400 --> 00:24:37,039
10th the it was merged into the main

727
00:24:36,320 --> 00:24:39,678
branch and

728
00:24:37,039 --> 00:24:40,879
fixed um so that's a three-day

729
00:24:39,679 --> 00:24:42,880
turnaround

730
00:24:40,880 --> 00:24:45,520
which is pretty pretty impressive i

731
00:24:42,880 --> 00:24:48,480
think for a vendor

732
00:24:45,520 --> 00:24:49,600
so just finally so reporting to my chair

733
00:24:48,480 --> 00:24:52,480
if your student

734
00:24:49,600 --> 00:24:52,879
don't be you know i i say you know do

735
00:24:52,480 --> 00:24:55,039
some

736
00:24:52,880 --> 00:24:57,760
open source sort of research sort of

737
00:24:55,039 --> 00:24:57,760
find you know

738
00:24:58,720 --> 00:25:01,679
find different things find

739
00:25:00,159 --> 00:25:02,080
vulnerabilities and don't be frightened

740
00:25:01,679 --> 00:25:03,840
of

741
00:25:02,080 --> 00:25:05,678
like reporting it the reporting process

742
00:25:03,840 --> 00:25:06,720
is relatively simple and if you go onto

743
00:25:05,679 --> 00:25:09,279
cv's

744
00:25:06,720 --> 00:25:11,039
website at mitra's website which is

745
00:25:09,279 --> 00:25:12,080
there then you can request these sort of

746
00:25:11,039 --> 00:25:14,640
cvs and stuff

747
00:25:12,080 --> 00:25:16,799
for the vulnerabilities that you find um

748
00:25:14,640 --> 00:25:18,240
and i think it should be encouraged

749
00:25:16,799 --> 00:25:20,158
any questions do i have time for

750
00:25:18,240 --> 00:25:21,919
questions yeah

751
00:25:20,159 --> 00:25:25,760
um yeah does anyone have any questions

752
00:25:21,919 --> 00:25:25,760
at the back yeah i love you

753
00:25:26,240 --> 00:25:33,279
um so so how long i was working on this

754
00:25:30,159 --> 00:25:33,279
um maybe

755
00:25:33,520 --> 00:25:36,960
maybe a week it took me a while to work

756
00:25:35,360 --> 00:25:40,158
out the bypasses

757
00:25:36,960 --> 00:25:42,080
um that was what took the time i'd say

758
00:25:40,159 --> 00:25:43,760
in terms of i wouldn't be able to give

759
00:25:42,080 --> 00:25:45,840
you an exact time frame but yeah

760
00:25:43,760 --> 00:25:47,039
like over the period of a week i'd

761
00:25:45,840 --> 00:25:49,840
revisit it

762
00:25:47,039 --> 00:25:51,039
um but as soon as i then was able to

763
00:25:49,840 --> 00:25:52,480
well as soon as i realized i could

764
00:25:51,039 --> 00:25:54,559
double url in code

765
00:25:52,480 --> 00:25:56,320
it was just a case of finding out you

766
00:25:54,559 --> 00:25:57,039
know automating the uploads and stuff

767
00:25:56,320 --> 00:25:59,039
like that and

768
00:25:57,039 --> 00:26:00,480
as soon as i've got that i was like oh

769
00:25:59,039 --> 00:26:02,080
is it possible to do these sort of

770
00:26:00,480 --> 00:26:02,640
things so then i had the motivation to

771
00:26:02,080 --> 00:26:05,120
do it

772
00:26:02,640 --> 00:26:06,080
that probably only took a day really um

773
00:26:05,120 --> 00:26:10,879
yeah

774
00:26:06,080 --> 00:26:12,639
um any other questions

775
00:26:10,880 --> 00:26:14,159
yeah how long did you spend on the

776
00:26:12,640 --> 00:26:15,600
bypass and how much did you kick

777
00:26:14,159 --> 00:26:17,120
yourself after figuring out you could

778
00:26:15,600 --> 00:26:19,840
just put in there

779
00:26:17,120 --> 00:26:20,639
yeah so yeah like say so about a week

780
00:26:19,840 --> 00:26:23,678
was spent

781
00:26:20,640 --> 00:26:25,760
trying to bypass and it

782
00:26:23,679 --> 00:26:27,679
it you know you learn from you learn

783
00:26:25,760 --> 00:26:29,120
from these mistakes um so always try the

784
00:26:27,679 --> 00:26:30,159
basics with these sort of things yeah

785
00:26:29,120 --> 00:26:33,520
absolutely

786
00:26:30,159 --> 00:26:38,320
uh any other questions no

787
00:26:33,520 --> 00:26:40,400
okay well thank you very much

788
00:26:38,320 --> 00:26:40,399
you

