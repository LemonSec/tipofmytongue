1
00:00:03,060 --> 00:00:11,200
hello<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> like to add that I had</font>

2
00:00:09,010 --> 00:00:13,780
this gift<font color="#CCCCCC"> in my presentation when I</font>

3
00:00:11,200 --> 00:00:16,540
wrote it<font color="#CCCCCC"> several months ago</font><font color="#E5E5E5"> not knowing</font>

4
00:00:13,780 --> 00:00:19,840
<font color="#CCCCCC">that I would be still quite drunk from</font>

5
00:00:16,540 --> 00:00:23,439
last night<font color="#E5E5E5"> so as some of</font><font color="#CCCCCC"> you who already</font>

6
00:00:19,840 --> 00:00:27,430
<font color="#CCCCCC">know me know</font><font color="#E5E5E5"> I used to work</font><font color="#CCCCCC"> for these</font>

7
00:00:23,439 --> 00:00:29,080
guys<font color="#CCCCCC"> ah</font><font color="#E5E5E5"> we got bought</font><font color="#CCCCCC"> by these guys</font><font color="#E5E5E5"> just</font>

8
00:00:27,430 --> 00:00:30,130
a lot<font color="#E5E5E5"> like working for these guys</font><font color="#CCCCCC"> except</font>

9
00:00:29,080 --> 00:00:34,559
sometimes<font color="#E5E5E5"> a bit more like this</font>

10
00:00:30,130 --> 00:00:38,500
I do sometimes<font color="#E5E5E5"> sleep in a Borg alcove</font>

11
00:00:34,559 --> 00:00:41,379
so aside from work<font color="#CCCCCC"> I do</font><font color="#E5E5E5"> other weird</font>

12
00:00:38,500 --> 00:00:45,160
things like things<font color="#E5E5E5"> with lasers</font><font color="#CCCCCC"> and</font>

13
00:00:41,379 --> 00:00:47,399
<font color="#CCCCCC">things with old computers I've</font><font color="#E5E5E5"> seen some</font>

14
00:00:45,160 --> 00:00:52,239
things<font color="#E5E5E5"> like that</font>

15
00:00:47,399 --> 00:00:54,460
so under Cisco we have this concept of

16
00:00:52,239 --> 00:00:56,559
service ownership<font color="#CCCCCC"> which is essentially</font>

17
00:00:54,460 --> 00:00:58,390
somebody<font color="#E5E5E5"> who is in</font><font color="#CCCCCC"> charge of</font><font color="#E5E5E5"> a</font>

18
00:00:56,559 --> 00:01:00,789
particular<font color="#CCCCCC"> service so I cover off the</font>

19
00:00:58,390 --> 00:01:02,469
primary<font color="#CCCCCC"> application</font><font color="#E5E5E5"> assessments but also</font>

20
00:01:00,789 --> 00:01:04,720
Hardware<font color="#E5E5E5"> reviews as on</font><font color="#CCCCCC"> Hodler</font>

21
00:01:02,469 --> 00:01:07,869
<font color="#E5E5E5">assessments and cryptography reviews</font>

22
00:01:04,720 --> 00:01:09,908
although I should point<font color="#CCCCCC"> out that</font><font color="#E5E5E5"> a big</font>

23
00:01:07,869 --> 00:01:10,930
heavy<font color="#E5E5E5"> windows in front of the binary</font>

24
00:01:09,909 --> 00:01:16,270
applications because I don't know

25
00:01:10,930 --> 00:01:18,420
about Linux<font color="#E5E5E5"> yeah I'm a windows monkey so</font>

26
00:01:16,270 --> 00:01:22,479
just keep that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind</font>

27
00:01:18,420 --> 00:01:26,140
so<font color="#E5E5E5"> it's service ownership involves a few</font>

28
00:01:22,479 --> 00:01:28,179
different<font color="#E5E5E5"> things it means that you write</font>

29
00:01:26,140 --> 00:01:30,189
the testing methodologies for<font color="#E5E5E5"> a</font>

30
00:01:28,180 --> 00:01:33,130
particular particular<font color="#E5E5E5"> types of</font>

31
00:01:30,189 --> 00:01:34,750
assessment any kind<font color="#CCCCCC"> of like</font><font color="#E5E5E5"> checklists</font>

32
00:01:33,130 --> 00:01:36,399
<font color="#E5E5E5">of things that people need</font><font color="#CCCCCC"> to go through</font>

33
00:01:34,750 --> 00:01:37,869
<font color="#E5E5E5">so for example if you were doing a web</font>

34
00:01:36,400 --> 00:01:40,509
app you would be wanting<font color="#CCCCCC"> to look for</font><font color="#E5E5E5"> I</font>

35
00:01:37,869 --> 00:01:42,100
<font color="#E5E5E5">know whether</font><font color="#CCCCCC"> it signed you out after a</font>

36
00:01:40,509 --> 00:01:45,549
particular<font color="#E5E5E5"> amount of inactivity whether</font>

37
00:01:42,100 --> 00:01:47,140
it you know there's a fuel<font color="#E5E5E5"> injection in</font>

38
00:01:45,549 --> 00:01:48,880
<font color="#CCCCCC">the</font><font color="#E5E5E5"> log in whether you</font><font color="#CCCCCC"> can just try and</font>

39
00:01:47,140 --> 00:01:50,619
<font color="#E5E5E5">just put blank</font><font color="#CCCCCC"> login</font><font color="#E5E5E5"> and password and</font>

40
00:01:48,880 --> 00:01:52,689
see if you go through<font color="#E5E5E5"> just silly things</font>

41
00:01:50,619 --> 00:01:54,899
<font color="#E5E5E5">that are in a</font><font color="#CCCCCC"> check list that's</font><font color="#E5E5E5"> the kind</font>

42
00:01:52,689 --> 00:01:57,970
of things<font color="#E5E5E5"> about end up writing</font>

43
00:01:54,899 --> 00:02:00,549
developing tools specific to doing

44
00:01:57,970 --> 00:02:03,039
<font color="#E5E5E5">particular types of work and doing</font>

45
00:02:00,549 --> 00:02:08,190
<font color="#E5E5E5">research which I tend to be doing more</font>

46
00:02:03,040 --> 00:02:10,599
<font color="#E5E5E5">of recently so the scope of this talk</font><font color="#CCCCCC"> is</font>

47
00:02:08,190 --> 00:02:13,540
some sort of general<font color="#E5E5E5"> tips and tricks</font>

48
00:02:10,598 --> 00:02:15,040
around binary applications the common

49
00:02:13,540 --> 00:02:16,459
vulnerability types that I tend<font color="#E5E5E5"> to run</font>

50
00:02:15,040 --> 00:02:20,358
into

51
00:02:16,459 --> 00:02:21,590
yeah why they<font color="#CCCCCC"> saw</font><font color="#E5E5E5"> how to find them</font>

52
00:02:20,359 --> 00:02:23,569
how to exploit them how<font color="#E5E5E5"> to fix them</font>

53
00:02:21,590 --> 00:02:24,950
<font color="#E5E5E5">because if you're gonna be doing pen</font>

54
00:02:23,569 --> 00:02:26,060
testing that last part<font color="#E5E5E5"> is really</font>

55
00:02:24,950 --> 00:02:30,379
important for when you write a report

56
00:02:26,060 --> 00:02:31,639
<font color="#CCCCCC">for</font><font color="#E5E5E5"> a client yeah safety</font><font color="#CCCCCC"> and cover your</font>

57
00:02:30,379 --> 00:02:34,429
<font color="#E5E5E5">ass</font>

58
00:02:31,639 --> 00:02:36,109
if you're running a<font color="#CCCCCC"> by nap location</font>

59
00:02:34,430 --> 00:02:37,340
that's given to<font color="#E5E5E5"> you by</font><font color="#CCCCCC"> a client you</font>

60
00:02:36,109 --> 00:02:39,859
don't know anything<font color="#E5E5E5"> about it</font><font color="#CCCCCC"> it's an</font>

61
00:02:37,340 --> 00:02:41,919
arbitrary<font color="#E5E5E5"> binary generally you do have</font>

62
00:02:39,859 --> 00:02:45,280
to install<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so insulating</font><font color="#E5E5E5"> the VM and</font>

63
00:02:41,919 --> 00:02:47,659
<font color="#CCCCCC">be</font><font color="#E5E5E5"> sensible with the</font><font color="#CCCCCC"> VM configuration</font>

64
00:02:45,280 --> 00:02:50,030
<font color="#CCCCCC">but that also means</font><font color="#E5E5E5"> that you</font><font color="#CCCCCC"> need to</font>

65
00:02:47,659 --> 00:02:52,370
<font color="#CCCCCC">protect the client data</font><font color="#E5E5E5"> so you can't</font>

66
00:02:50,030 --> 00:02:54,319
just<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know stick some application on</font>

67
00:02:52,370 --> 00:02:55,879
<font color="#CCCCCC">your host then</font><font color="#E5E5E5"> uninstall it</font><font color="#CCCCCC"> and hope</font>

68
00:02:54,319 --> 00:02:57,168
<font color="#CCCCCC">that all the files run away</font><font color="#E5E5E5"> at the end</font>

69
00:02:55,879 --> 00:03:00,230
of it and<font color="#E5E5E5"> then it turns</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> that you had</font>

70
00:02:57,169 --> 00:03:01,969
a<font color="#E5E5E5"> bunch of like production data that it</font>

71
00:03:00,230 --> 00:03:03,018
pulled from the database<font color="#E5E5E5"> in a cache on</font>

72
00:03:01,969 --> 00:03:04,418
your hard disk and<font color="#E5E5E5"> you've just been</font>

73
00:03:03,019 --> 00:03:06,319
wandering<font color="#CCCCCC"> around with it for</font><font color="#E5E5E5"> six months</font>

74
00:03:04,419 --> 00:03:08,510
<font color="#CCCCCC">client ain't gonna be too happy if</font><font color="#E5E5E5"> they</font>

75
00:03:06,319 --> 00:03:13,488
find out<font color="#CCCCCC"> about that and log what you're</font>

76
00:03:08,510 --> 00:03:15,948
doing<font color="#E5E5E5"> yeah like when you</font><font color="#CCCCCC"> do things why</font>

77
00:03:13,489 --> 00:03:18,169
you do them who you spoke to

78
00:03:15,949 --> 00:03:19,849
it's quite useful<font color="#E5E5E5"> to do that just</font>

79
00:03:18,169 --> 00:03:21,859
because<font color="#CCCCCC"> if there is ever a bond that's</font>

80
00:03:19,849 --> 00:03:23,689
that's just<font color="#E5E5E5"> good advice for any kind of</font>

81
00:03:21,859 --> 00:03:25,370
<font color="#E5E5E5">testing to</font><font color="#CCCCCC"> be honest and limiting the</font>

82
00:03:23,689 --> 00:03:29,659
scope as well<font color="#E5E5E5"> so try and cut things</font><font color="#CCCCCC"> down</font>

83
00:03:25,370 --> 00:03:32,150
to just not bloating everything out

84
00:03:29,659 --> 00:03:34,310
everywhere so what<font color="#E5E5E5"> are binary</font>

85
00:03:32,150 --> 00:03:36,560
applications basically<font color="#E5E5E5"> anything with one</font>

86
00:03:34,310 --> 00:03:38,829
of those file extensions yes<font color="#E5E5E5"> fine your</font>

87
00:03:36,560 --> 00:03:41,840
application dot XE<font color="#E5E5E5"> it goes to the moon</font>

88
00:03:38,829 --> 00:03:43,099
<font color="#CCCCCC">it's not a mobile</font><font color="#E5E5E5"> app they're the same</font>

89
00:03:41,840 --> 00:03:46,220
thing but<font color="#CCCCCC"> they're on different</font><font color="#E5E5E5"> platforms</font>

90
00:03:43,099 --> 00:03:48,018
<font color="#E5E5E5">therefore they're</font><font color="#CCCCCC"> different we don't</font>

91
00:03:46,220 --> 00:03:50,509
tend to<font color="#E5E5E5"> at least in Cisco we don't tend</font>

92
00:03:48,019 --> 00:03:52,639
to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> mobile apps as binary</font>

93
00:03:50,509 --> 00:03:54,018
applications<font color="#E5E5E5"> we do them separately</font>

94
00:03:52,639 --> 00:03:55,370
<font color="#CCCCCC">because there's a different ecosystem</font>

95
00:03:54,019 --> 00:03:56,449
and some of the signature security

96
00:03:55,370 --> 00:03:58,280
controls are different you've got things

97
00:03:56,449 --> 00:04:03,680
<font color="#E5E5E5">like</font><font color="#CCCCCC"> intents on</font><font color="#E5E5E5"> Android and</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> like</font>

98
00:03:58,280 --> 00:04:04,849
<font color="#CCCCCC">that which I have no idea about</font><font color="#E5E5E5"> 99.9% of</font>

99
00:04:03,680 --> 00:04:07,609
what we see is<font color="#E5E5E5"> windows</font><font color="#CCCCCC"> behind</font>

100
00:04:04,849 --> 00:04:09,168
applications occasionally we will get

101
00:04:07,609 --> 00:04:11,509
something scoped as a binary application

102
00:04:09,169 --> 00:04:13,159
that later turns out to be<font color="#E5E5E5"> an S 400</font>

103
00:04:11,509 --> 00:04:14,448
green screen application and<font color="#E5E5E5"> that's</font>

104
00:04:13,159 --> 00:04:16,539
great<font color="#E5E5E5"> when you turn up and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't</font>

105
00:04:14,449 --> 00:04:18,680
<font color="#E5E5E5">have the faintest clue about what it is</font>

106
00:04:16,539 --> 00:04:19,880
<font color="#E5E5E5">so yeah be</font><font color="#CCCCCC"> careful with that</font><font color="#E5E5E5"> because</font>

107
00:04:18,680 --> 00:04:21,789
<font color="#CCCCCC">people tell you</font><font color="#E5E5E5"> things are binary</font>

108
00:04:19,880 --> 00:04:24,110
applications when they're<font color="#CCCCCC"> perhaps not</font>

109
00:04:21,789 --> 00:04:27,469
what<font color="#E5E5E5"> you would</font><font color="#CCCCCC"> consider</font><font color="#E5E5E5"> to be a binder</font>

110
00:04:24,110 --> 00:04:28,729
application<font color="#CCCCCC"> but yeah 99.9% what we see</font>

111
00:04:27,469 --> 00:04:29,449
is<font color="#E5E5E5"> Windows we do some of the next stuff</font>

112
00:04:28,729 --> 00:04:32,770
some

113
00:04:29,449 --> 00:04:38,270
<font color="#E5E5E5">Mac OS so most of that tends to</font><font color="#CCCCCC"> be</font>

114
00:04:32,770 --> 00:04:39,710
<font color="#E5E5E5">cross-platform</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> that sits on these</font>

115
00:04:38,270 --> 00:04:40,938
cross-platform<font color="#E5E5E5"> frameworks</font><font color="#CCCCCC"> where you</font><font color="#E5E5E5"> bite</font>

116
00:04:39,710 --> 00:04:41,960
one application and<font color="#E5E5E5"> deploy it in three</font>

117
00:04:40,939 --> 00:04:44,240
places

118
00:04:41,960 --> 00:04:49,068
sometimes<font color="#CCCCCC"> it's drivers and things like</font>

119
00:04:44,240 --> 00:04:52,520
<font color="#E5E5E5">that yeah</font><font color="#CCCCCC"> client applications so they</font>

120
00:04:49,069 --> 00:04:54,139
could we just<font color="#E5E5E5"> standalone stuff</font><font color="#CCCCCC"> you know</font>

121
00:04:52,520 --> 00:04:57,650
think of<font color="#E5E5E5"> something like notepad there's</font>

122
00:04:54,139 --> 00:04:59,270
a binary application server applications

123
00:04:57,650 --> 00:05:01,188
<font color="#CCCCCC">obviously the</font><font color="#E5E5E5"> other side of this</font>

124
00:04:59,270 --> 00:05:05,299
<font color="#E5E5E5">sometimes we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> we are testing that</font>

125
00:05:01,189 --> 00:05:08,330
<font color="#E5E5E5">kind of stuff</font><font color="#CCCCCC"> things sometimes bond</font>

126
00:05:05,300 --> 00:05:10,339
applications are serving out<font color="#E5E5E5"> like some</font>

127
00:05:08,330 --> 00:05:12,498
sort of web service or something and

128
00:05:10,339 --> 00:05:14,839
then handling the<font color="#CCCCCC"> requests in</font><font color="#E5E5E5"> a specific</font>

129
00:05:12,499 --> 00:05:17,509
way rather<font color="#E5E5E5"> than having for example an</font>

130
00:05:14,839 --> 00:05:18,949
asp.net server<font color="#CCCCCC"> they actually write a</font>

131
00:05:17,509 --> 00:05:20,659
custom binding application that has a

132
00:05:18,949 --> 00:05:21,529
bunch<font color="#E5E5E5"> of stuff</font><font color="#CCCCCC"> in there and we would</font><font color="#E5E5E5"> be</font>

133
00:05:20,659 --> 00:05:23,509
testing that<font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> binary</font>

134
00:05:21,529 --> 00:05:26,180
<font color="#CCCCCC">applications</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> well and sometimes it's</font>

135
00:05:23,509 --> 00:05:28,189
browser hosted so unfortunately people

136
00:05:26,180 --> 00:05:29,839
still do things with Silverlight in 2018

137
00:05:28,189 --> 00:05:30,979
<font color="#E5E5E5">as I found out recently so if you follow</font>

138
00:05:29,839 --> 00:05:33,319
<font color="#E5E5E5">me on</font><font color="#CCCCCC"> Twitter</font><font color="#E5E5E5"> you will have seen me</font>

139
00:05:30,979 --> 00:05:35,089
being very<font color="#E5E5E5"> salty about the fact that I</font>

140
00:05:33,319 --> 00:05:38,089
had to<font color="#E5E5E5"> test a Silverlight application</font>

141
00:05:35,089 --> 00:05:39,919
because it's hateful<font color="#CCCCCC"> and it makes you</font>

142
00:05:38,089 --> 00:05:42,020
install very specific requirements<font color="#CCCCCC"> and</font>

143
00:05:39,919 --> 00:05:43,159
doesn't work on Windows 10 anymore<font color="#E5E5E5"> which</font>

144
00:05:42,020 --> 00:05:46,688
is<font color="#E5E5E5"> great consider this was a new</font>

145
00:05:43,159 --> 00:05:46,688
application<font color="#E5E5E5"> designed for customers</font>

146
00:05:47,080 --> 00:05:54,770
apparently customers that<font color="#CCCCCC"> only run IE</font><font color="#E5E5E5"> 11</font>

147
00:05:49,759 --> 00:05:56,979
and not<font color="#E5E5E5"> edge yeah so but also Java</font>

148
00:05:54,770 --> 00:05:58,909
applications<font color="#E5E5E5"> in the browser as well</font>

149
00:05:56,979 --> 00:06:01,610
unfortunately yes Java applets in<font color="#E5E5E5"> the</font>

150
00:05:58,909 --> 00:06:03,319
browser are also<font color="#E5E5E5"> still a thing and then</font>

151
00:06:01,610 --> 00:06:08,149
occasionally you get<font color="#E5E5E5"> all of the weird</font>

152
00:06:03,319 --> 00:06:10,610
stuff<font color="#E5E5E5"> like ActiveX and just they make me</font>

153
00:06:08,149 --> 00:06:12,979
<font color="#E5E5E5">sad</font><font color="#CCCCCC"> and the scope</font><font color="#E5E5E5"> does include</font>

154
00:06:10,610 --> 00:06:14,270
communications<font color="#E5E5E5"> if you're testing upon</font>

155
00:06:12,979 --> 00:06:15,649
<font color="#CCCCCC">application and it's talking to</font>

156
00:06:14,270 --> 00:06:19,279
<font color="#E5E5E5">something else those communications that</font>

157
00:06:15,649 --> 00:06:22,129
it does<font color="#E5E5E5"> are in scope now whether the</font>

158
00:06:19,279 --> 00:06:23,870
remote server is in scope depends on the

159
00:06:22,129 --> 00:06:25,550
particular<font color="#E5E5E5"> assessment and habits of the</font>

160
00:06:23,870 --> 00:06:27,159
scope that's been written<font color="#E5E5E5"> out if it's</font>

161
00:06:25,550 --> 00:06:29,330
not explicitly<font color="#E5E5E5"> in scope</font><font color="#CCCCCC"> it isn't in</font>

162
00:06:27,159 --> 00:06:30,709
scope<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> test the community what</font>

163
00:06:29,330 --> 00:06:32,599
happens with the communications<font color="#E5E5E5"> coming</font>

164
00:06:30,709 --> 00:06:36,649
into the application but not<font color="#E5E5E5"> going back</font>

165
00:06:32,599 --> 00:06:38,120
out<font color="#E5E5E5"> because a lot of the time a company</font>

166
00:06:36,649 --> 00:06:39,500
<font color="#CCCCCC">would be like</font><font color="#E5E5E5"> actually this is shared</font>

167
00:06:38,120 --> 00:06:40,909
<font color="#E5E5E5">across three different production</font>

168
00:06:39,500 --> 00:06:42,290
environments we'd rather you not<font color="#E5E5E5"> poke at</font>

169
00:06:40,909 --> 00:06:45,870
it

170
00:06:42,290 --> 00:06:47,910
so if you want to<font color="#E5E5E5"> learn how</font><font color="#CCCCCC"> to test</font>

171
00:06:45,870 --> 00:06:51,060
<font color="#E5E5E5">firing applications</font><font color="#CCCCCC"> unfortunately the</font>

172
00:06:47,910 --> 00:06:53,430
<font color="#E5E5E5">first two hurdles is learning how to</font>

173
00:06:51,060 --> 00:06:55,320
read c-sharp<font color="#E5E5E5"> and Java if you don't like</font>

174
00:06:53,430 --> 00:06:57,600
reading c-sharp<font color="#E5E5E5"> and Java</font><font color="#CCCCCC"> maybe this</font>

175
00:06:55,320 --> 00:07:00,090
isn't<font color="#E5E5E5"> for you because almost every</font>

176
00:06:57,600 --> 00:07:03,650
application<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I end up testing is C</font>

177
00:07:00,090 --> 00:07:07,109
sharp<font color="#CCCCCC"> or Java occasionally it's a</font>

178
00:07:03,650 --> 00:07:10,799
compiled language<font color="#CCCCCC"> compiled language</font>

179
00:07:07,110 --> 00:07:11,880
terrible term<font color="#E5E5E5"> it's you know something</font>

180
00:07:10,800 --> 00:07:15,000
<font color="#CCCCCC">that can pass to assembly for a</font>

181
00:07:11,880 --> 00:07:18,420
particular<font color="#E5E5E5"> machine so yeah unfortunately</font>

182
00:07:15,000 --> 00:07:21,840
<font color="#CCCCCC">C++ and C</font><font color="#E5E5E5"> and v b6 and</font><font color="#CCCCCC"> Delfy</font><font color="#E5E5E5"> and Pascal</font>

183
00:07:18,420 --> 00:07:24,150
<font color="#E5E5E5">are still around and occasionally very</font>

184
00:07:21,840 --> 00:07:25,799
very strange<font color="#E5E5E5"> other things that just like</font>

185
00:07:24,150 --> 00:07:28,140
what the<font color="#E5E5E5"> hell is this and</font><font color="#CCCCCC"> so yes you</font><font color="#E5E5E5"> do</font>

186
00:07:25,800 --> 00:07:32,640
unfortunately<font color="#CCCCCC"> also need to learn</font>

187
00:07:28,140 --> 00:07:35,159
assembly to some level not<font color="#CCCCCC"> always</font>

188
00:07:32,640 --> 00:07:37,140
<font color="#E5E5E5">because most things</font><font color="#CCCCCC"> are c-sharp and Java</font>

189
00:07:35,160 --> 00:07:39,870
<font color="#E5E5E5">so you can often get away with it but</font>

190
00:07:37,140 --> 00:07:40,830
yeah unfortunately<font color="#CCCCCC"> assembly is</font><font color="#E5E5E5"> also</font>

191
00:07:39,870 --> 00:07:43,320
something that you generally<font color="#CCCCCC"> have to</font>

192
00:07:40,830 --> 00:07:44,909
<font color="#E5E5E5">pick up but then again there are so many</font>

193
00:07:43,320 --> 00:07:46,980
<font color="#E5E5E5">good resources on that these days that</font>

194
00:07:44,910 --> 00:07:49,110
it's actually not that<font color="#E5E5E5"> hard if you</font>

195
00:07:46,980 --> 00:07:50,790
already know that<font color="#E5E5E5"> programming then it's</font>

196
00:07:49,110 --> 00:07:52,260
actually<font color="#CCCCCC"> not</font><font color="#E5E5E5"> as tricky</font><font color="#CCCCCC"> as it looks it</font>

197
00:07:50,790 --> 00:07:53,520
<font color="#CCCCCC">just looks really</font><font color="#E5E5E5"> horrible because you</font>

198
00:07:52,260 --> 00:07:55,170
look at<font color="#E5E5E5"> it and you're like what the hell</font>

199
00:07:53,520 --> 00:07:56,789
<font color="#E5E5E5">does any of this mean it does it doesn't</font>

200
00:07:55,170 --> 00:07:59,880
<font color="#E5E5E5">have any</font><font color="#CCCCCC"> like formatting</font><font color="#E5E5E5"> it just looks</font>

201
00:07:56,790 --> 00:08:01,410
awful<font color="#CCCCCC"> it's all procedural</font><font color="#E5E5E5"> but yeah it's</font>

202
00:07:59,880 --> 00:08:03,570
it's actually<font color="#CCCCCC"> not that</font><font color="#E5E5E5"> difficult once</font>

203
00:08:01,410 --> 00:08:04,740
you start looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and yeah getting</font>

204
00:08:03,570 --> 00:08:07,530
<font color="#E5E5E5">comfortable with a particular</font><font color="#CCCCCC"> toolset</font>

205
00:08:04,740 --> 00:08:09,540
that<font color="#CCCCCC"> you've chosen</font><font color="#E5E5E5"> the great thing about</font>

206
00:08:07,530 --> 00:08:11,640
<font color="#E5E5E5">but application testing is</font><font color="#CCCCCC"> that for</font>

207
00:08:09,540 --> 00:08:12,750
almost<font color="#E5E5E5"> any case that you've run</font><font color="#CCCCCC"> into</font>

208
00:08:11,640 --> 00:08:15,930
where you're like I wouldn't I would

209
00:08:12,750 --> 00:08:17,670
like to do<font color="#E5E5E5"> this you usually have like at</font>

210
00:08:15,930 --> 00:08:21,930
<font color="#CCCCCC">least two or three different tools that</font>

211
00:08:17,670 --> 00:08:23,430
<font color="#E5E5E5">you could pick I think at</font><font color="#CCCCCC"> some point</font><font color="#E5E5E5"> I</font>

212
00:08:21,930 --> 00:08:26,700
did<font color="#CCCCCC"> actually have I think</font><font color="#E5E5E5"> I moved to</font>

213
00:08:23,430 --> 00:08:28,200
slide around<font color="#E5E5E5"> so unfortunately my choice</font>

214
00:08:26,700 --> 00:08:34,830
of tools might be randomly<font color="#E5E5E5"> somewhere</font>

215
00:08:28,200 --> 00:08:36,179
<font color="#E5E5E5">else in here so I'm guessing most of you</font>

216
00:08:34,830 --> 00:08:38,669
<font color="#E5E5E5">are familiar with</font><font color="#CCCCCC"> the terms</font><font color="#E5E5E5"> black box</font>

217
00:08:36,179 --> 00:08:40,348
<font color="#E5E5E5">some white box test black box test is</font>

218
00:08:38,669 --> 00:08:41,819
<font color="#E5E5E5">here is the thing</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to</font>

219
00:08:40,349 --> 00:08:44,250
tell it tell<font color="#E5E5E5"> you anything</font><font color="#CCCCCC"> about it go</font>

220
00:08:41,820 --> 00:08:45,690
break it and a white box test is here's

221
00:08:44,250 --> 00:08:47,100
a thing here is all of<font color="#CCCCCC"> its source code</font>

222
00:08:45,690 --> 00:08:49,080
here is all<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> documentation here's</font>

223
00:08:47,100 --> 00:08:52,860
everything<font color="#CCCCCC"> that about how it works</font><font color="#E5E5E5"> go</font>

224
00:08:49,080 --> 00:08:55,380
<font color="#E5E5E5">dig around in it more often than not</font>

225
00:08:52,860 --> 00:08:57,449
<font color="#E5E5E5">actually these</font><font color="#CCCCCC"> days we're doing both</font>

226
00:08:55,380 --> 00:08:59,310
which is actually<font color="#CCCCCC"> quite good</font><font color="#E5E5E5"> because if</font>

227
00:08:57,449 --> 00:09:01,319
you<font color="#E5E5E5"> spend a lot of time if you're given</font>

228
00:08:59,310 --> 00:09:02,819
<font color="#CCCCCC">the code</font><font color="#E5E5E5"> you can spend a lot</font><font color="#CCCCCC"> of time go</font>

229
00:09:01,320 --> 00:09:04,529
<font color="#CCCCCC">through the</font><font color="#E5E5E5"> code and digging through it</font>

230
00:09:02,820 --> 00:09:08,910
and<font color="#E5E5E5"> trying to find vulnerabilities that</font>

231
00:09:04,529 --> 00:09:12,680
way and you might not necessarily think

232
00:09:08,910 --> 00:09:14,790
<font color="#CCCCCC">to try something that's really dumb that</font>

233
00:09:12,680 --> 00:09:16,170
you would have not thought about that

234
00:09:14,790 --> 00:09:17,759
<font color="#E5E5E5">you would have thought about if you were</font>

235
00:09:16,170 --> 00:09:18,899
just<font color="#E5E5E5"> sort of hammering away at a black</font>

236
00:09:17,759 --> 00:09:20,250
black box but<font color="#E5E5E5"> if you look at something</font>

237
00:09:18,899 --> 00:09:21,750
<font color="#CCCCCC">as a white box</font><font color="#E5E5E5"> you get an</font><font color="#CCCCCC"> understanding</font>

238
00:09:20,250 --> 00:09:24,810
for<font color="#CCCCCC"> how it fits</font><font color="#E5E5E5"> together and you can</font>

239
00:09:21,750 --> 00:09:26,639
often<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just human</font><font color="#E5E5E5"> nature to go oh</font>

240
00:09:24,810 --> 00:09:27,959
well that wouldn't<font color="#E5E5E5"> work because clearly</font>

241
00:09:26,639 --> 00:09:29,430
this piece of code<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and then you</font>

242
00:09:27,959 --> 00:09:31,138
could have missed<font color="#E5E5E5"> something so doing a</font>

243
00:09:29,430 --> 00:09:33,449
black box test and then a white box<font color="#E5E5E5"> test</font>

244
00:09:31,139 --> 00:09:36,569
<font color="#E5E5E5">is actually quite common these days</font><font color="#CCCCCC"> and</font>

245
00:09:33,449 --> 00:09:39,240
it just gets around<font color="#E5E5E5"> that like weird</font>

246
00:09:36,569 --> 00:09:41,310
thing<font color="#CCCCCC"> that everybody does which is just</font>

247
00:09:39,240 --> 00:09:45,750
getting stuck in a particular<font color="#E5E5E5"> mindset</font>

248
00:09:41,310 --> 00:09:47,569
about<font color="#E5E5E5"> something areas focus</font><font color="#CCCCCC"> right so</font>

249
00:09:45,750 --> 00:09:50,610
you're gonna test a binary application

250
00:09:47,569 --> 00:09:52,889
how do you<font color="#E5E5E5"> stop well you want to look at</font>

251
00:09:50,610 --> 00:09:55,649
all of<font color="#E5E5E5"> these things business</font><font color="#CCCCCC"> logic is</font>

252
00:09:52,889 --> 00:09:57,569
that<font color="#E5E5E5"> the big one</font><font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> go through or</font>

253
00:09:55,649 --> 00:09:58,949
app my<font color="#E5E5E5"> tools of the trade slide is on</font>

254
00:09:57,569 --> 00:10:00,599
the next one<font color="#CCCCCC"> I haven't moved it around</font>

255
00:09:58,949 --> 00:10:06,449
somewhere for some reason I<font color="#E5E5E5"> don't know</font>

256
00:10:00,600 --> 00:10:09,149
um yes<font color="#CCCCCC"> the business logic is the main</font>

257
00:10:06,449 --> 00:10:11,750
key if this is basically what does the

258
00:10:09,149 --> 00:10:15,269
application<font color="#CCCCCC"> do and why does it</font><font color="#E5E5E5"> do it</font>

259
00:10:11,750 --> 00:10:17,540
<font color="#E5E5E5">it's meant to</font><font color="#CCCCCC"> be enforcing or doing some</font>

260
00:10:15,269 --> 00:10:22,500
sort of fulfilling some sort of role

261
00:10:17,540 --> 00:10:24,060
within an<font color="#E5E5E5"> organization so yeah if it's</font>

262
00:10:22,500 --> 00:10:26,010
not<font color="#E5E5E5"> doing that then actually that's</font>

263
00:10:24,060 --> 00:10:30,060
often a security failure<font color="#E5E5E5"> because that</font>

264
00:10:26,010 --> 00:10:33,660
<font color="#E5E5E5">particular role might be who can get a</font>

265
00:10:30,060 --> 00:10:35,550
firearms license if<font color="#E5E5E5"> you can bypass the</font>

266
00:10:33,660 --> 00:10:37,790
the the normal restrictions of that

267
00:10:35,550 --> 00:10:40,620
<font color="#E5E5E5">that's a bad idea</font>

268
00:10:37,790 --> 00:10:42,569
so yeah<font color="#E5E5E5"> authentication and session</font>

269
00:10:40,620 --> 00:10:42,810
management<font color="#E5E5E5"> of course</font><font color="#CCCCCC"> we all know</font><font color="#E5E5E5"> what</font>

270
00:10:42,569 --> 00:10:45,209
that<font color="#E5E5E5"> is</font>

271
00:10:42,810 --> 00:10:49,649
logins<font color="#E5E5E5"> sessions</font><font color="#CCCCCC"> blah blah blah</font><font color="#E5E5E5"> network</font>

272
00:10:45,209 --> 00:10:50,969
communications<font color="#CCCCCC"> who's it talking</font><font color="#E5E5E5"> to why</font>

273
00:10:49,649 --> 00:10:52,490
is he talking to<font color="#E5E5E5"> them what data is going</font>

274
00:10:50,970 --> 00:10:54,420
over there how is<font color="#E5E5E5"> that data protected</font>

275
00:10:52,490 --> 00:10:58,350
what can you do if you mess with<font color="#E5E5E5"> that</font>

276
00:10:54,420 --> 00:11:01,529
data data at rest<font color="#E5E5E5"> does the application</font>

277
00:10:58,350 --> 00:11:04,529
<font color="#E5E5E5">store cache data does it do</font><font color="#CCCCCC"> that in a</font>

278
00:11:01,529 --> 00:11:06,600
safe way<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what's the</font><font color="#CCCCCC"> impact of the</font>

279
00:11:04,529 --> 00:11:08,819
system if you install this application

280
00:11:06,600 --> 00:11:12,929
<font color="#E5E5E5">does</font><font color="#CCCCCC"> it make your</font><font color="#E5E5E5"> app your</font>

281
00:11:08,819 --> 00:11:14,639
operating system less secure<font color="#CCCCCC"> and now my</font>

282
00:11:12,929 --> 00:11:16,978
out<font color="#E5E5E5"> of place slide which I accidentally</font>

283
00:11:14,639 --> 00:11:21,029
moved around<font color="#E5E5E5"> these are the tools that I</font>

284
00:11:16,979 --> 00:11:24,869
like why shark for<font color="#CCCCCC"> networking stuff</font><font color="#E5E5E5"> like</font>

285
00:11:21,029 --> 00:11:28,319
just<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> network tracers</font><font color="#E5E5E5"> burp suite</font>

286
00:11:24,869 --> 00:11:29,910
<font color="#E5E5E5">and zap probably a lot of you know off</font>

287
00:11:28,319 --> 00:11:31,169
because of web application testing<font color="#E5E5E5"> it</font>

288
00:11:29,910 --> 00:11:32,639
turns out it's also<font color="#E5E5E5"> really useful</font><font color="#CCCCCC"> for</font>

289
00:11:31,169 --> 00:11:34,199
<font color="#E5E5E5">binary applications because if you can</font>

290
00:11:32,639 --> 00:11:36,509
route<font color="#CCCCCC"> it through traffic through there</font>

291
00:11:34,199 --> 00:11:38,669
<font color="#E5E5E5">in its HTTP traffic it's just like</font>

292
00:11:36,509 --> 00:11:41,160
working<font color="#CCCCCC"> with a regular web application I</font>

293
00:11:38,669 --> 00:11:44,459
kind<font color="#CCCCCC"> of pay for</font><font color="#E5E5E5"> doing the same thing but</font>

294
00:11:41,160 --> 00:11:47,549
with binary data<font color="#CCCCCC"> some of you will have</font>

295
00:11:44,459 --> 00:11:48,689
<font color="#E5E5E5">heard of echo Mirage</font><font color="#CCCCCC"> canapes like the</font>

296
00:11:47,549 --> 00:11:49,978
better version<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> coma Mirage</font>

297
00:11:48,689 --> 00:11:52,829
because<font color="#E5E5E5"> like a mirage is old and doesn't</font>

298
00:11:49,979 --> 00:11:54,509
<font color="#E5E5E5">work anymore</font><font color="#CCCCCC"> just be compiled as a</font>

299
00:11:52,829 --> 00:11:59,878
<font color="#E5E5E5">toolbar telluric that's</font><font color="#CCCCCC"> fernette</font>

300
00:11:54,509 --> 00:12:01,829
<font color="#CCCCCC">disassembler net decompiling should</font>

301
00:11:59,879 --> 00:12:03,989
point out that if none of<font color="#E5E5E5"> you have if</font>

302
00:12:01,829 --> 00:12:05,669
any<font color="#E5E5E5"> of you have never</font><font color="#CCCCCC"> decompiled</font><font color="#E5E5E5"> doc net</font>

303
00:12:03,989 --> 00:12:08,249
application before<font color="#E5E5E5"> the</font><font color="#CCCCCC"> decompilers</font><font color="#E5E5E5"> are</font>

304
00:12:05,669 --> 00:12:10,139
now so good that when you<font color="#CCCCCC"> d compile an</font>

305
00:12:08,249 --> 00:12:12,929
application a lot of the times you<font color="#CCCCCC"> can</font>

306
00:12:10,139 --> 00:12:14,489
<font color="#CCCCCC">actually export a project file load</font><font color="#E5E5E5"> that</font>

307
00:12:12,929 --> 00:12:17,149
back up in<font color="#CCCCCC"> Visual Studio</font><font color="#E5E5E5"> and the D</font>

308
00:12:14,489 --> 00:12:19,229
<font color="#CCCCCC">compile code will recompile and</font><font color="#E5E5E5"> work</font>

309
00:12:17,149 --> 00:12:22,859
it's<font color="#E5E5E5"> that good</font>

310
00:12:19,229 --> 00:12:28,529
JD<font color="#CCCCCC"> GUI for doing java</font><font color="#E5E5E5"> IDR is interactive</font>

311
00:12:22,859 --> 00:12:30,119
this is<font color="#CCCCCC"> Delfy something so if you come</font>

312
00:12:28,529 --> 00:12:31,439
against the<font color="#CCCCCC"> Delfy app that's quite</font>

313
00:12:30,119 --> 00:12:32,970
useful<font color="#CCCCCC"> because it dumps like loads of</font>

314
00:12:31,439 --> 00:12:37,399
<font color="#E5E5E5">the class structure and stuff out either</font>

315
00:12:32,970 --> 00:12:43,529
<font color="#CCCCCC">in</font><font color="#E5E5E5"> binary ninja for doing disassembly</font>

316
00:12:37,399 --> 00:12:48,439
debugger<font color="#CCCCCC"> why</font><font color="#E5E5E5"> write that there</font><font color="#CCCCCC"> a debugger</font>

317
00:12:43,529 --> 00:12:51,299
of some sort<font color="#E5E5E5"> I imagine</font><font color="#CCCCCC"> I like x64 dbg</font>

318
00:12:48,439 --> 00:12:53,189
<font color="#CCCCCC">Ali is also pretty good</font><font color="#E5E5E5"> for a whole</font>

319
00:12:51,299 --> 00:12:56,220
bunch<font color="#CCCCCC"> of them also vigeous to do is</font>

320
00:12:53,189 --> 00:12:59,309
<font color="#CCCCCC">actually quite good for it api monitor</font>

321
00:12:56,220 --> 00:13:00,899
that's<font color="#E5E5E5"> a tool by</font><font color="#CCCCCC"> Roja tab that</font><font color="#E5E5E5"> allows</font>

322
00:12:59,309 --> 00:13:02,549
you<font color="#CCCCCC"> to see all the API calls that are</font>

323
00:13:00,899 --> 00:13:05,159
being done<font color="#CCCCCC"> by a process</font><font color="#E5E5E5"> that's super</font>

324
00:13:02,549 --> 00:13:08,789
<font color="#CCCCCC">useful CF</font><font color="#E5E5E5"> Explorer which is basically</font>

325
00:13:05,159 --> 00:13:09,659
just a PE image editor and<font color="#E5E5E5"> PE ID which</font>

326
00:13:08,789 --> 00:13:11,759
is<font color="#CCCCCC"> good because</font><font color="#E5E5E5"> if you get something</font>

327
00:13:09,659 --> 00:13:14,309
<font color="#E5E5E5">that's packed which sometimes does</font>

328
00:13:11,759 --> 00:13:15,119
happen<font color="#E5E5E5"> it'll tell you what Packer was</font>

329
00:13:14,309 --> 00:13:17,669
used<font color="#E5E5E5"> and things</font><font color="#CCCCCC"> like that</font>

330
00:13:15,119 --> 00:13:19,470
it's all it also will tell you which

331
00:13:17,669 --> 00:13:21,209
version of<font color="#E5E5E5"> the Microsoft Visual C</font>

332
00:13:19,470 --> 00:13:22,160
runtime it was compiled against if it

333
00:13:21,209 --> 00:13:26,270
was

334
00:13:22,160 --> 00:13:27,350
which is quite<font color="#E5E5E5"> nice as well so if you've</font>

335
00:13:26,270 --> 00:13:29,270
<font color="#E5E5E5">got</font><font color="#CCCCCC"> stuff that's talking</font><font color="#E5E5E5"> over the</font>

336
00:13:27,350 --> 00:13:34,130
<font color="#CCCCCC">network</font><font color="#E5E5E5"> you want to be able to proxy the</font>

337
00:13:29,270 --> 00:13:35,810
network<font color="#E5E5E5"> traffic with a web application</font>

338
00:13:34,130 --> 00:13:37,220
that's generally<font color="#E5E5E5"> really easy because</font>

339
00:13:35,810 --> 00:13:38,089
your browser allows you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just go hey</font>

340
00:13:37,220 --> 00:13:40,700
let's<font color="#CCCCCC"> just put that through this</font>

341
00:13:38,090 --> 00:13:41,870
property<font color="#CCCCCC"> not</font><font color="#E5E5E5"> always so</font><font color="#CCCCCC"> easy with the</font>

342
00:13:40,700 --> 00:13:44,180
<font color="#E5E5E5">binary application because sometimes it</font>

343
00:13:41,870 --> 00:13:45,680
doesn't wanna play ball<font color="#CCCCCC"> sometimes in the</font>

344
00:13:44,180 --> 00:13:47,270
<font color="#E5E5E5">configuration files for the application</font>

345
00:13:45,680 --> 00:13:48,560
or<font color="#E5E5E5"> just in the applications</font>

346
00:13:47,270 --> 00:13:50,660
configuration it will<font color="#E5E5E5"> allow you to</font>

347
00:13:48,560 --> 00:13:51,229
<font color="#E5E5E5">specify a proxy if that ever happens</font>

348
00:13:50,660 --> 00:13:52,819
<font color="#CCCCCC">hooray</font>

349
00:13:51,230 --> 00:13:55,610
because it saves you a lot<font color="#CCCCCC"> of messing</font>

350
00:13:52,820 --> 00:13:57,440
around<font color="#CCCCCC"> you can also set up your hosts</font>

351
00:13:55,610 --> 00:13:59,570
file<font color="#E5E5E5"> so if you know it's talking to a</font>

352
00:13:57,440 --> 00:14:01,430
particular domain<font color="#CCCCCC"> you can set up your</font>

353
00:13:59,570 --> 00:14:03,710
<font color="#CCCCCC">host file to change the</font><font color="#E5E5E5"> IP of that</font>

354
00:14:01,430 --> 00:14:05,780
domain to<font color="#CCCCCC"> localhost and</font><font color="#E5E5E5"> then you run a</font>

355
00:14:03,710 --> 00:14:07,370
transparent listener unlike burp or

356
00:14:05,780 --> 00:14:10,730
something and just<font color="#CCCCCC"> pass it through and</font>

357
00:14:07,370 --> 00:14:12,080
out<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> use the system proxy the</font>

358
00:14:10,730 --> 00:14:14,750
number of times that<font color="#E5E5E5"> an application</font>

359
00:14:12,080 --> 00:14:18,500
<font color="#E5E5E5">actually respects the system proxy hmm</font><font color="#CCCCCC"> I</font>

360
00:14:14,750 --> 00:14:19,610
would say somewhere<font color="#E5E5E5"> around on and then</font>

361
00:14:18,500 --> 00:14:23,060
you've got the the difference between

362
00:14:19,610 --> 00:14:24,440
<font color="#CCCCCC">Sox and transparent properties</font><font color="#E5E5E5"> if the</font>

363
00:14:23,060 --> 00:14:27,469
application does actually<font color="#E5E5E5"> support a</font>

364
00:14:24,440 --> 00:14:30,380
proxy being set then<font color="#E5E5E5"> you can set up a</font>

365
00:14:27,470 --> 00:14:31,610
socks proxy usually if it doesn't then

366
00:14:30,380 --> 00:14:34,340
<font color="#CCCCCC">you have to use a</font><font color="#E5E5E5"> transparent proxy</font>

367
00:14:31,610 --> 00:14:36,500
which basically the<font color="#CCCCCC"> idea is you</font><font color="#E5E5E5"> set up a</font>

368
00:14:34,340 --> 00:14:39,530
<font color="#E5E5E5">proxy that listens on a particular port</font>

369
00:14:36,500 --> 00:14:42,680
<font color="#E5E5E5">you mess with your hosts file or even</font>

370
00:14:39,530 --> 00:14:44,199
edit<font color="#CCCCCC"> the application</font><font color="#E5E5E5"> itself to change</font>

371
00:14:42,680 --> 00:14:47,689
the domain<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's trying to talk to</font>

372
00:14:44,200 --> 00:14:50,300
to go<font color="#E5E5E5"> back into to go back to localhost</font>

373
00:14:47,690 --> 00:14:53,630
<font color="#E5E5E5">it then the application then connects to</font>

374
00:14:50,300 --> 00:14:55,670
that that<font color="#E5E5E5"> proxy on that port and then it</font>

375
00:14:53,630 --> 00:14:57,790
transparently<font color="#E5E5E5"> forwards that out to the</font>

376
00:14:55,670 --> 00:14:59,930
originally original endpoint

377
00:14:57,790 --> 00:15:02,209
<font color="#E5E5E5">unfortunately that can be quite a rigid</font>

378
00:14:59,930 --> 00:15:11,089
and<font color="#CCCCCC"> time-consuming thing to set up and</font>

379
00:15:02,210 --> 00:15:12,950
it's<font color="#E5E5E5"> kind of annoying so languages that</font>

380
00:15:11,090 --> 00:15:17,720
<font color="#CCCCCC">I tend</font><font color="#E5E5E5"> to see</font><font color="#CCCCCC"> see shops</font><font color="#E5E5E5"> definitely the</font>

381
00:15:12,950 --> 00:15:20,780
top<font color="#E5E5E5"> Java following shortly behind vb.net</font>

382
00:15:17,720 --> 00:15:23,600
following<font color="#CCCCCC"> shortly behind</font><font color="#E5E5E5"> that wrap rapid</font>

383
00:15:20,780 --> 00:15:26,990
application development languages that

384
00:15:23,600 --> 00:15:29,810
just everybody's using<font color="#E5E5E5"> these days you</font>

385
00:15:26,990 --> 00:15:34,040
know<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> from banks</font><font color="#E5E5E5"> to trading</font>

386
00:15:29,810 --> 00:15:35,969
companies to governments to<font color="#E5E5E5"> like ERP</font>

387
00:15:34,040 --> 00:15:38,399
software everything<font color="#E5E5E5"> just</font>

388
00:15:35,970 --> 00:15:40,199
<font color="#E5E5E5">is generally now these days written in</font>

389
00:15:38,399 --> 00:15:43,019
c-sharp Java or vim you don't know it's

390
00:15:40,199 --> 00:15:45,569
it's<font color="#E5E5E5"> really common</font><font color="#CCCCCC"> C++ follows shortly</font>

391
00:15:43,019 --> 00:15:48,360
behind<font color="#E5E5E5"> that unfortunately Delphian vb6</font>

392
00:15:45,569 --> 00:15:49,560
and<font color="#CCCCCC"> pb5 are still being either they're</font>

393
00:15:48,360 --> 00:15:56,759
still<font color="#E5E5E5"> being written or they're just</font>

394
00:15:49,560 --> 00:16:02,628
<font color="#CCCCCC">still around just Kovan only go away</font>

395
00:15:56,759 --> 00:16:05,490
<font color="#E5E5E5">clipping I don't know why</font><font color="#CCCCCC"> put mine there</font>

396
00:16:02,629 --> 00:16:07,949
<font color="#E5E5E5">um yeah so c-sharp and Java</font><font color="#CCCCCC"> easily</font>

397
00:16:05,490 --> 00:16:11,790
<font color="#CCCCCC">decompile</font><font color="#E5E5E5"> vb.net easily to compile the</font>

398
00:16:07,949 --> 00:16:13,050
same thing with<font color="#CCCCCC"> c shop and vb.net in</font>

399
00:16:11,790 --> 00:16:16,589
case any of you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> unaware</font>

400
00:16:13,050 --> 00:16:18,779
<font color="#CCCCCC">both of those are</font><font color="#E5E5E5"> front-end languages</font>

401
00:16:16,589 --> 00:16:21,360
that compile to an intermediate language

402
00:16:18,779 --> 00:16:24,120
called CIL or<font color="#CCCCCC"> MS il which is the old</font>

403
00:16:21,360 --> 00:16:27,000
term and then<font color="#E5E5E5"> they</font><font color="#CCCCCC"> won on the.net</font>

404
00:16:24,120 --> 00:16:28,560
framework and dotnet runtime<font color="#CCCCCC"> they are</font>

405
00:16:27,000 --> 00:16:31,110
actually<font color="#CCCCCC"> almost interchangeable you can</font>

406
00:16:28,560 --> 00:16:33,449
make them work with<font color="#E5E5E5"> each other very</font>

407
00:16:31,110 --> 00:16:36,300
<font color="#E5E5E5">easily and you</font><font color="#CCCCCC"> can decompile one and</font>

408
00:16:33,449 --> 00:16:38,399
then turn<font color="#E5E5E5"> it into</font><font color="#CCCCCC"> a c shop and then</font>

409
00:16:36,300 --> 00:16:41,309
recompile it the c-sharp<font color="#E5E5E5"> it's kind</font><font color="#CCCCCC"> of</font>

410
00:16:38,399 --> 00:16:43,470
with<font color="#CCCCCC"> java</font><font color="#E5E5E5"> again easily be compared</font>

411
00:16:41,309 --> 00:16:46,680
<font color="#CCCCCC">because that's a jet language with an</font>

412
00:16:43,470 --> 00:16:48,689
<font color="#E5E5E5">intermediate language as well</font><font color="#CCCCCC"> C++</font><font color="#E5E5E5"> yeah</font>

413
00:16:46,680 --> 00:16:50,729
it's assembly<font color="#E5E5E5"> and generally you don't</font>

414
00:16:48,689 --> 00:16:52,889
<font color="#CCCCCC">get much out of it</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> than like if</font>

415
00:16:50,730 --> 00:16:54,930
they left in the original names like the

416
00:16:52,889 --> 00:16:57,470
mangled names of functions and stuff

417
00:16:54,930 --> 00:16:59,790
<font color="#E5E5E5">especially if they're doing like exports</font>

418
00:16:57,470 --> 00:17:01,430
<font color="#CCCCCC">you get a bit</font><font color="#E5E5E5"> of metadata there but</font>

419
00:16:59,790 --> 00:17:07,470
almost nothing it's mostly just assembly

420
00:17:01,430 --> 00:17:09,990
<font color="#E5E5E5">same as C</font><font color="#CCCCCC"> Delfy and</font><font color="#E5E5E5"> vb v and v b6</font><font color="#CCCCCC"> you do</font>

421
00:17:07,470 --> 00:17:11,789
get some<font color="#E5E5E5"> metadata in there and there are</font>

422
00:17:09,990 --> 00:17:15,199
specific<font color="#E5E5E5"> tools to pull that data out</font><font color="#CCCCCC"> and</font>

423
00:17:11,789 --> 00:17:16,919
<font color="#E5E5E5">make things a little bit easier sorry</font>

424
00:17:15,199 --> 00:17:24,299
now<font color="#E5E5E5"> that I've still giving you an</font>

425
00:17:16,919 --> 00:17:26,900
overview business logic<font color="#E5E5E5"> failures user</font>

426
00:17:24,299 --> 00:17:28,980
access controls business<font color="#E5E5E5"> processes</font>

427
00:17:26,900 --> 00:17:31,140
regulatory requirements or the sort of

428
00:17:28,980 --> 00:17:35,429
<font color="#E5E5E5">the high level things that fit under</font>

429
00:17:31,140 --> 00:17:39,600
<font color="#CCCCCC">less so for example should this user be</font>

430
00:17:35,429 --> 00:17:42,120
able to access this or let's say for

431
00:17:39,600 --> 00:17:44,340
<font color="#CCCCCC">example</font><font color="#E5E5E5"> let's say you've got</font><font color="#CCCCCC"> an</font>

432
00:17:42,120 --> 00:17:46,360
application<font color="#E5E5E5"> that handles financial</font>

433
00:17:44,340 --> 00:17:49,990
transactions<font color="#E5E5E5"> for a bank</font>

434
00:17:46,360 --> 00:17:51,820
and the policy is<font color="#CCCCCC"> that the court this is</font>

435
00:17:49,990 --> 00:17:53,680
<font color="#E5E5E5">being</font><font color="#CCCCCC"> used by call center workers and</font>

436
00:17:51,820 --> 00:17:54,820
the call<font color="#E5E5E5"> center worker can log into an</font>

437
00:17:53,680 --> 00:17:56,770
account<font color="#CCCCCC"> and be like right I'm going</font><font color="#E5E5E5"> to</font>

438
00:17:54,820 --> 00:17:58,629
<font color="#E5E5E5">make this transfer if the transfer is</font>

439
00:17:56,770 --> 00:18:00,850
above<font color="#E5E5E5"> ten thousand pounds there is a</font>

440
00:17:58,630 --> 00:18:02,320
<font color="#CCCCCC">specific set of</font><font color="#E5E5E5"> logic in there that</font>

441
00:18:00,850 --> 00:18:04,719
record for<font color="#E5E5E5"> anti fraud logic and</font>

442
00:18:02,320 --> 00:18:07,149
anti-money laundering logic where that

443
00:18:04,720 --> 00:18:09,040
transaction has<font color="#CCCCCC"> to be elevated to a</font>

444
00:18:07,150 --> 00:18:11,440
supervisor who can then approve it<font color="#E5E5E5"> and</font>

445
00:18:09,040 --> 00:18:13,300
<font color="#E5E5E5">then it goes away that's a that's a</font>

446
00:18:11,440 --> 00:18:15,100
piece<font color="#CCCCCC"> of business</font><font color="#E5E5E5"> logic if you can get</font>

447
00:18:13,300 --> 00:18:17,050
<font color="#E5E5E5">around that such that a call center</font>

448
00:18:15,100 --> 00:18:18,310
worker can make a transaction<font color="#E5E5E5"> that's</font>

449
00:18:17,050 --> 00:18:20,790
<font color="#E5E5E5">more than ten thousand pounds without</font>

450
00:18:18,310 --> 00:18:23,889
having to go through<font color="#CCCCCC"> this</font><font color="#E5E5E5"> supervisory</font>

451
00:18:20,790 --> 00:18:25,480
approval process that's a violation<font color="#E5E5E5"> of</font>

452
00:18:23,890 --> 00:18:29,800
<font color="#E5E5E5">the business process and it's a and that</font>

453
00:18:25,480 --> 00:18:31,390
is classed as a security<font color="#E5E5E5"> issue that's</font>

454
00:18:29,800 --> 00:18:33,520
actually one of the biggest<font color="#E5E5E5"> things that</font>

455
00:18:31,390 --> 00:18:35,440
<font color="#E5E5E5">we come up against in any application is</font>

456
00:18:33,520 --> 00:18:37,470
it essentially doesn't enforce the

457
00:18:35,440 --> 00:18:39,280
process that<font color="#E5E5E5"> it was intended to enforce</font>

458
00:18:37,470 --> 00:18:42,310
and then also the regulatory

459
00:18:39,280 --> 00:18:45,399
<font color="#CCCCCC">requirements</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> in that</font>

460
00:18:42,310 --> 00:18:46,240
<font color="#CCCCCC">example that I</font><font color="#E5E5E5"> gave the anti money</font>

461
00:18:45,400 --> 00:18:48,730
laundering

462
00:18:46,240 --> 00:18:53,890
<font color="#E5E5E5">thing is a regulatory requirement also</font>

463
00:18:48,730 --> 00:18:55,750
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> the law I think</font><font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> in</font>

464
00:18:53,890 --> 00:18:58,510
basically things not a<font color="#CCCCCC"> deering to those</font>

465
00:18:55,750 --> 00:19:02,050
<font color="#E5E5E5">regulatory requirements again can come</font>

466
00:18:58,510 --> 00:19:05,290
<font color="#CCCCCC">off as a</font><font color="#E5E5E5"> security issue so in order to</font>

467
00:19:02,050 --> 00:19:08,020
find these business logic flaws<font color="#E5E5E5"> you just</font>

468
00:19:05,290 --> 00:19:10,750
use the application you modify traffic

469
00:19:08,020 --> 00:19:12,220
to do silly things<font color="#E5E5E5"> you might want</font><font color="#CCCCCC"> to</font>

470
00:19:10,750 --> 00:19:14,320
modify<font color="#CCCCCC"> the application to do things it</font>

471
00:19:12,220 --> 00:19:16,150
<font color="#E5E5E5">shouldn't if things are being enforced</font>

472
00:19:14,320 --> 00:19:17,710
on the<font color="#E5E5E5"> client side but not</font><font color="#CCCCCC"> on the server</font>

473
00:19:16,150 --> 00:19:18,970
<font color="#E5E5E5">side you might be able</font><font color="#CCCCCC"> to do some silly</font>

474
00:19:17,710 --> 00:19:20,470
<font color="#E5E5E5">things there that comes on to a</font>

475
00:19:18,970 --> 00:19:24,310
different<font color="#CCCCCC"> phone ability</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> we'll talk</font>

476
00:19:20,470 --> 00:19:27,060
about<font color="#E5E5E5"> in a little bit but yeah sending</font>

477
00:19:24,310 --> 00:19:29,700
direct<font color="#E5E5E5"> requests and things like that</font>

478
00:19:27,060 --> 00:19:32,200
essentially<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> for</font>

479
00:19:29,700 --> 00:19:34,090
<font color="#E5E5E5">processors</font><font color="#CCCCCC"> that should normally be</font>

480
00:19:32,200 --> 00:19:35,770
followed and whether you can skip over

481
00:19:34,090 --> 00:19:41,500
<font color="#E5E5E5">certain parts of it so there might be</font>

482
00:19:35,770 --> 00:19:44,560
for<font color="#CCCCCC"> example a specific end point that</font>

483
00:19:41,500 --> 00:19:49,120
that's<font color="#E5E5E5"> used to</font><font color="#CCCCCC"> make a transfer but the</font>

484
00:19:44,560 --> 00:19:50,710
client side<font color="#E5E5E5"> flags up that it needs to</font><font color="#CCCCCC"> be</font>

485
00:19:49,120 --> 00:19:52,629
escalated and<font color="#E5E5E5"> says</font><font color="#CCCCCC"> oh escalate this</font>

486
00:19:50,710 --> 00:19:54,340
<font color="#E5E5E5">transaction sends off this request</font><font color="#CCCCCC"> of a</font>

487
00:19:52,630 --> 00:19:56,160
server to escalate the transaction<font color="#E5E5E5"> what</font>

488
00:19:54,340 --> 00:19:58,810
happens if you just<font color="#E5E5E5"> submit the transfer</font>

489
00:19:56,160 --> 00:19:59,880
<font color="#E5E5E5">well sometimes you can bypass things</font>

490
00:19:58,810 --> 00:20:02,500
like that

491
00:19:59,880 --> 00:20:08,410
<font color="#CCCCCC">how do you fix it it's specific to</font><font color="#E5E5E5"> the</font>

492
00:20:02,500 --> 00:20:10,000
individual<font color="#E5E5E5"> books it's</font><font color="#CCCCCC"> the problem is</font>

493
00:20:08,410 --> 00:20:12,430
that you<font color="#E5E5E5"> essentially have</font><font color="#CCCCCC"> to understand</font>

494
00:20:10,000 --> 00:20:14,590
the<font color="#CCCCCC"> application in order</font><font color="#E5E5E5"> to do this in</font>

495
00:20:12,430 --> 00:20:17,140
<font color="#E5E5E5">order to give advice about how to fix</font>

496
00:20:14,590 --> 00:20:18,310
things<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> general what you would do</font>

497
00:20:17,140 --> 00:20:20,290
is you would sit<font color="#E5E5E5"> and look at the user</font>

498
00:20:18,310 --> 00:20:22,060
<font color="#CCCCCC">manual you would speak to your client</font>

499
00:20:20,290 --> 00:20:23,770
contact and work out how<font color="#E5E5E5"> things are</font>

500
00:20:22,060 --> 00:20:25,810
meant to fit<font color="#E5E5E5"> together</font><font color="#CCCCCC"> and if they're not</font>

501
00:20:23,770 --> 00:20:27,520
<font color="#E5E5E5">fitting together</font><font color="#CCCCCC"> like that you've got</font><font color="#E5E5E5"> to</font>

502
00:20:25,810 --> 00:20:29,230
<font color="#E5E5E5">think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> how they can fix this so</font>

503
00:20:27,520 --> 00:20:32,340
that<font color="#CCCCCC"> might be a technical recommendation</font>

504
00:20:29,230 --> 00:20:34,750
of you need<font color="#E5E5E5"> to ensure that this workflow</font>

505
00:20:32,340 --> 00:20:36,280
<font color="#CCCCCC">that</font><font color="#E5E5E5"> this secondary part of the workflow</font>

506
00:20:34,750 --> 00:20:39,490
<font color="#CCCCCC">can't be</font><font color="#E5E5E5"> done before the first</font><font color="#CCCCCC"> part is</font>

507
00:20:36,280 --> 00:20:41,410
done<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> secure</font>

508
00:20:39,490 --> 00:20:42,520
development<font color="#CCCCCC"> life cycle does help to an</font>

509
00:20:41,410 --> 00:20:45,490
<font color="#E5E5E5">extend with this because it makes</font>

510
00:20:42,520 --> 00:20:48,520
developers<font color="#E5E5E5"> think about security at each</font>

511
00:20:45,490 --> 00:20:52,710
step<font color="#E5E5E5"> and how things are being enforced</font>

512
00:20:48,520 --> 00:20:54,879
<font color="#E5E5E5">and the last one is a question because</font>

513
00:20:52,710 --> 00:20:57,370
<font color="#E5E5E5">unfortunately despite</font><font color="#CCCCCC"> giving this advice</font>

514
00:20:54,880 --> 00:20:58,690
<font color="#E5E5E5">quite a lot it never seems to happen</font><font color="#CCCCCC"> but</font>

515
00:20:57,370 --> 00:20:59,199
build security<font color="#CCCCCC"> into designs</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

516
00:20:58,690 --> 00:21:01,360
ground up

517
00:20:59,200 --> 00:21:03,670
when you're architecting an application

518
00:21:01,360 --> 00:21:07,870
and you're in<font color="#E5E5E5"> this the initial design</font>

519
00:21:03,670 --> 00:21:08,920
phase<font color="#E5E5E5"> build</font><font color="#CCCCCC"> security in right there but</font>

520
00:21:07,870 --> 00:21:11,439
<font color="#CCCCCC">unfortunately that's not</font><font color="#E5E5E5"> very useful</font>

521
00:21:08,920 --> 00:21:14,620
advice to give<font color="#CCCCCC"> to a client</font><font color="#E5E5E5"> when they've</font>

522
00:21:11,440 --> 00:21:18,400
already<font color="#E5E5E5"> written the application so bug</font>

523
00:21:14,620 --> 00:21:22,239
number<font color="#CCCCCC"> two architectural failures</font><font color="#E5E5E5"> so</font>

524
00:21:18,400 --> 00:21:23,830
these are fun these are things like<font color="#E5E5E5"> find</font>

525
00:21:22,240 --> 00:21:27,220
side enforcement if it's security<font color="#CCCCCC"> so</font>

526
00:21:23,830 --> 00:21:28,750
stuff that the client makes you do that

527
00:21:27,220 --> 00:21:31,000
the server<font color="#E5E5E5"> doesn't make you do so if you</font>

528
00:21:28,750 --> 00:21:33,460
modify the client or just don't<font color="#E5E5E5"> use the</font>

529
00:21:31,000 --> 00:21:35,880
<font color="#CCCCCC">client and you can just</font><font color="#E5E5E5"> make it do all</font>

530
00:21:33,460 --> 00:21:38,650
the<font color="#E5E5E5"> things applications where the</font>

531
00:21:35,880 --> 00:21:40,390
communications model is it talks to a

532
00:21:38,650 --> 00:21:42,370
sequel server<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> no server</font>

533
00:21:40,390 --> 00:21:44,410
back-end is just a sequel server<font color="#CCCCCC"> and if</font>

534
00:21:42,370 --> 00:21:47,530
you are a user you<font color="#CCCCCC"> have all of the</font>

535
00:21:44,410 --> 00:21:49,450
access that that sequel user has and

536
00:21:47,530 --> 00:21:51,370
<font color="#CCCCCC">that usually</font><font color="#E5E5E5"> means that you cannot</font>

537
00:21:49,450 --> 00:21:54,250
possibly enforce any kind<font color="#CCCCCC"> of business</font>

538
00:21:51,370 --> 00:21:56,860
logic<font color="#CCCCCC"> unless you're</font><font color="#E5E5E5"> using like prepared</font>

539
00:21:54,250 --> 00:21:58,560
statements in a really clever way<font color="#CCCCCC"> and</font>

540
00:21:56,860 --> 00:22:00,820
very<font color="#E5E5E5"> heavily locking things down</font>

541
00:21:58,560 --> 00:22:04,899
generally any application you see that

542
00:22:00,820 --> 00:22:07,990
directly talks out<font color="#E5E5E5"> to like sequel</font><font color="#CCCCCC"> is a</font>

543
00:22:04,900 --> 00:22:10,900
bad idea<font color="#CCCCCC"> because</font><font color="#E5E5E5"> they're the the the the</font>

544
00:22:07,990 --> 00:22:11,740
the way of enforcing<font color="#E5E5E5"> the security</font><font color="#CCCCCC"> model</font>

545
00:22:10,900 --> 00:22:13,929
<font color="#E5E5E5">just ends up</font>

546
00:22:11,740 --> 00:22:15,809
almost impossible<font color="#CCCCCC"> because you can just</font>

547
00:22:13,929 --> 00:22:18,429
modify anything<font color="#E5E5E5"> that you have access to</font>

548
00:22:15,809 --> 00:22:21,460
<font color="#E5E5E5">and insufficient authorization</font>

549
00:22:18,429 --> 00:22:26,740
capabilities so situations where for

550
00:22:21,460 --> 00:22:29,470
<font color="#CCCCCC">example you've</font><font color="#E5E5E5"> got a single single web</font>

551
00:22:26,740 --> 00:22:31,630
service<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a lot of things consuming</font>

552
00:22:29,470 --> 00:22:33,940
this<font color="#E5E5E5"> web service and they all</font>

553
00:22:31,630 --> 00:22:36,220
essentially operate under the<font color="#E5E5E5"> same level</font>

554
00:22:33,940 --> 00:22:38,289
of authorized<font color="#CCCCCC"> date</font><font color="#E5E5E5"> the same privileges</font>

555
00:22:36,220 --> 00:22:40,140
<font color="#E5E5E5">because the web service doesn't know</font>

556
00:22:38,289 --> 00:22:43,120
who's<font color="#CCCCCC"> talking to at any point in time I</font>

557
00:22:40,140 --> 00:22:46,690
did I wanted<font color="#CCCCCC"> to test for a financial</font>

558
00:22:43,120 --> 00:22:49,779
organization where they had a<font color="#CCCCCC"> website on</font>

559
00:22:46,690 --> 00:22:51,399
<font color="#E5E5E5">the internet which just did like basic</font><font color="#CCCCCC"> I</font>

560
00:22:49,779 --> 00:22:53,559
think was like<font color="#CCCCCC"> a loan application check</font>

561
00:22:51,399 --> 00:22:55,389
or<font color="#E5E5E5"> something</font><font color="#CCCCCC"> something very simple</font><font color="#E5E5E5"> it's</font>

562
00:22:53,559 --> 00:22:56,950
<font color="#CCCCCC">like you could put in a an application</font>

563
00:22:55,390 --> 00:22:59,980
<font color="#CCCCCC">ID</font><font color="#E5E5E5"> and it would tell you the</font><font color="#CCCCCC"> status of</font>

564
00:22:56,950 --> 00:23:01,630
<font color="#E5E5E5">the application that</font><font color="#CCCCCC"> was talking to a</font>

565
00:22:59,980 --> 00:23:03,399
web service<font color="#CCCCCC"> that</font><font color="#E5E5E5"> web service was also</font>

566
00:23:01,630 --> 00:23:06,669
talking<font color="#E5E5E5"> to their call center software</font>

567
00:23:03,399 --> 00:23:08,529
<font color="#E5E5E5">which was allowing people to</font><font color="#CCCCCC"> actually</font>

568
00:23:06,669 --> 00:23:10,960
proceed<font color="#E5E5E5"> through processes it was also</font>

569
00:23:08,529 --> 00:23:12,490
<font color="#CCCCCC">talking back to the accreditors but the</font>

570
00:23:10,960 --> 00:23:15,549
web service had no idea which of<font color="#E5E5E5"> these</font>

571
00:23:12,490 --> 00:23:17,380
<font color="#CCCCCC">endpoints was who so everybody had every</font>

572
00:23:15,549 --> 00:23:19,149
possible<font color="#E5E5E5"> privilege so it meant that if</font>

573
00:23:17,380 --> 00:23:21,520
<font color="#E5E5E5">you pop the web application you can then</font>

574
00:23:19,149 --> 00:23:25,350
do refunds of<font color="#E5E5E5"> 10 grand</font><font color="#CCCCCC"> to your account</font>

575
00:23:21,520 --> 00:23:27,340
<font color="#CCCCCC">with no problem</font><font color="#E5E5E5"> because it didn't know</font>

576
00:23:25,350 --> 00:23:29,260
who you<font color="#CCCCCC"> were</font>

577
00:23:27,340 --> 00:23:31,980
it thought everybody had<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same sort</font>

578
00:23:29,260 --> 00:23:35,320
<font color="#E5E5E5">of authorization so the lack of</font>

579
00:23:31,980 --> 00:23:36,970
<font color="#E5E5E5">implementation of</font><font color="#CCCCCC"> that kind of</font><font color="#E5E5E5"> authoring</font>

580
00:23:35,320 --> 00:23:38,559
authorization granularity and

581
00:23:36,970 --> 00:23:40,450
understanding identity and things like

582
00:23:38,559 --> 00:23:45,490
<font color="#E5E5E5">that</font><font color="#CCCCCC"> if that's</font><font color="#E5E5E5"> missing everything quite</font>

583
00:23:40,450 --> 00:23:50,070
quite difficult yeah so you can't trust

584
00:23:45,490 --> 00:23:52,270
the client even<font color="#CCCCCC"> if you're in a sort of</font>

585
00:23:50,070 --> 00:23:55,480
business environment<font color="#E5E5E5"> with lockdown</font>

586
00:23:52,270 --> 00:23:57,908
laptops<font color="#E5E5E5"> eventually given enough time</font>

587
00:23:55,480 --> 00:24:00,039
<font color="#E5E5E5">with physical access to the</font><font color="#CCCCCC"> machine</font>

588
00:23:57,909 --> 00:24:01,899
somebody will work out how<font color="#E5E5E5"> to pop it</font><font color="#CCCCCC"> you</font>

589
00:24:00,039 --> 00:24:03,460
<font color="#CCCCCC">will</font><font color="#E5E5E5"> have an update</font><font color="#CCCCCC"> to the operating</font>

590
00:24:01,899 --> 00:24:05,080
system<font color="#CCCCCC"> that breaks</font><font color="#E5E5E5"> a piece of group</font>

591
00:24:03,460 --> 00:24:07,899
<font color="#CCCCCC">policy and somebody will get around</font>

592
00:24:05,080 --> 00:24:09,129
something<font color="#E5E5E5"> it's it's always possible</font><font color="#CCCCCC"> you</font>

593
00:24:07,899 --> 00:24:12,820
can mess with the client you<font color="#E5E5E5"> could just</font>

594
00:24:09,130 --> 00:24:15,899
<font color="#E5E5E5">not use the client so here's a fun case</font>

595
00:24:12,820 --> 00:24:18,450
study does anybody remember<font color="#E5E5E5"> this game</font>

596
00:24:15,899 --> 00:24:20,830
hands up<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> remember in maplestory I</font>

597
00:24:18,450 --> 00:24:23,980
found the Nerds<font color="#CCCCCC"> great</font>

598
00:24:20,830 --> 00:24:27,040
maplestory it was this game the

599
00:24:23,980 --> 00:24:33,250
it was like an early<font color="#CCCCCC"> side-scroller</font>

600
00:24:27,040 --> 00:24:35,760
MMO thing<font color="#CCCCCC"> there's a lot of fun but it</font>

601
00:24:33,250 --> 00:24:37,660
had this problem which was<font color="#E5E5E5"> that</font>

602
00:24:35,760 --> 00:24:40,960
literally<font color="#E5E5E5"> everything was being done</font><font color="#CCCCCC"> on</font>

603
00:24:37,660 --> 00:24:43,090
the<font color="#CCCCCC"> client-side</font><font color="#E5E5E5"> your health</font><font color="#CCCCCC"> we're</font>

604
00:24:40,960 --> 00:24:48,250
<font color="#CCCCCC">monsters were things</font><font color="#E5E5E5"> like that so you</font>

605
00:24:43,090 --> 00:24:50,168
could<font color="#E5E5E5"> get these hacks</font><font color="#CCCCCC"> god</font><font color="#E5E5E5"> mode all these</font>

606
00:24:48,250 --> 00:24:53,590
fun things<font color="#E5E5E5"> my favorite one is</font><font color="#CCCCCC"> this thing</font>

607
00:24:50,169 --> 00:24:55,660
called vac what factors is it transports

608
00:24:53,590 --> 00:24:59,350
all the monsters<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> map to your</font>

609
00:24:55,660 --> 00:25:00,730
<font color="#E5E5E5">position back is fantastic it also does</font>

610
00:24:59,350 --> 00:25:05,139
it with<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the treasure and things</font>

611
00:25:00,730 --> 00:25:07,000
like<font color="#E5E5E5"> that because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> yeah all</font><font color="#CCCCCC"> of the</font>

612
00:25:05,140 --> 00:25:10,710
and<font color="#E5E5E5"> this was a multiplayer game</font><font color="#CCCCCC"> and</font>

613
00:25:07,000 --> 00:25:12,700
<font color="#E5E5E5">because the of the way that the</font>

614
00:25:10,710 --> 00:25:15,820
<font color="#E5E5E5">application was architectured from the</font>

615
00:25:12,700 --> 00:25:17,770
ground up<font color="#CCCCCC"> though the way it worked</font><font color="#E5E5E5"> it</font>

616
00:25:15,820 --> 00:25:21,010
was impossible for<font color="#CCCCCC"> the server to</font><font color="#E5E5E5"> verify</font>

617
00:25:17,770 --> 00:25:22,720
that<font color="#E5E5E5"> anybody's state was the one true</font>

618
00:25:21,010 --> 00:25:25,090
state of<font color="#CCCCCC"> the application so you could</font>

619
00:25:22,720 --> 00:25:26,620
just<font color="#E5E5E5"> have things happen that weren't</font>

620
00:25:25,090 --> 00:25:28,299
<font color="#E5E5E5">happening on the server</font><font color="#CCCCCC"> but you were</font>

621
00:25:26,620 --> 00:25:29,469
<font color="#E5E5E5">still getting the benefits of them so</font>

622
00:25:28,299 --> 00:25:31,270
you could move all<font color="#CCCCCC"> of the monsters to</font>

623
00:25:29,470 --> 00:25:33,490
your position and<font color="#CCCCCC"> then kill</font><font color="#E5E5E5"> them because</font>

624
00:25:31,270 --> 00:25:36,510
<font color="#E5E5E5">you've now got</font><font color="#CCCCCC"> god</font><font color="#E5E5E5"> mode and everything</font>

625
00:25:33,490 --> 00:25:38,919
you do<font color="#CCCCCC"> just like a critical attack</font><font color="#E5E5E5"> hit</font>

626
00:25:36,510 --> 00:25:40,030
<font color="#E5E5E5">then all</font><font color="#CCCCCC"> of the treasure spawns directly</font>

627
00:25:38,919 --> 00:25:42,100
on top<font color="#CCCCCC"> of you after you've killed them</font>

628
00:25:40,030 --> 00:25:43,660
<font color="#E5E5E5">and you get all of</font><font color="#CCCCCC"> the level</font><font color="#E5E5E5"> you level</font>

629
00:25:42,100 --> 00:25:45,820
up you get<font color="#E5E5E5"> all the XP</font><font color="#CCCCCC"> you get all the</font>

630
00:25:43,660 --> 00:25:48,850
<font color="#CCCCCC">the cache I</font><font color="#E5E5E5"> don't even remember it's so</font>

631
00:25:45,820 --> 00:25:51,250
long<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> that I played this</font><font color="#E5E5E5"> game but</font>

632
00:25:48,850 --> 00:25:53,649
<font color="#E5E5E5">yeah like there's still forums where</font>

633
00:25:51,250 --> 00:25:55,900
<font color="#CCCCCC">people are building</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> for this</font><font color="#E5E5E5"> it</font>

634
00:25:53,650 --> 00:25:57,940
was just<font color="#CCCCCC"> a poorly designed game</font><font color="#E5E5E5"> and</font>

635
00:25:55,900 --> 00:26:00,460
that's kind of<font color="#E5E5E5"> thing also exists in</font>

636
00:25:57,940 --> 00:26:03,309
business applications<font color="#E5E5E5"> the idea that</font>

637
00:26:00,460 --> 00:26:07,020
things are<font color="#E5E5E5"> the security model relies</font>

638
00:26:03,309 --> 00:26:09,490
upon<font color="#E5E5E5"> the client being left alone</font><font color="#CCCCCC"> and</font>

639
00:26:07,020 --> 00:26:14,080
<font color="#E5E5E5">generally you can't rely</font><font color="#CCCCCC"> on the client</font>

640
00:26:09,490 --> 00:26:16,270
<font color="#CCCCCC">being left alone</font><font color="#E5E5E5"> so finding them look at</font>

641
00:26:14,080 --> 00:26:17,439
the architecture<font color="#CCCCCC"> I mean how do you</font><font color="#E5E5E5"> find</font>

642
00:26:16,270 --> 00:26:20,379
an architectural vulnerability<font color="#E5E5E5"> look at</font>

643
00:26:17,440 --> 00:26:22,059
the<font color="#CCCCCC"> architecture but the</font><font color="#E5E5E5"> topology but if</font>

644
00:26:20,380 --> 00:26:24,250
you find<font color="#E5E5E5"> things like sequel queries in</font>

645
00:26:22,059 --> 00:26:26,440
network traffic<font color="#E5E5E5"> or if it's connecting to</font>

646
00:26:24,250 --> 00:26:28,360
<font color="#CCCCCC">a sequel port</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> keep in mind that it</font>

647
00:26:26,440 --> 00:26:31,480
might<font color="#E5E5E5"> not be sequel might be Redis might</font>

648
00:26:28,360 --> 00:26:33,340
be MongoDB<font color="#E5E5E5"> might be something cloud</font>

649
00:26:31,480 --> 00:26:38,080
related<font color="#E5E5E5"> Paco can probably tell you about</font>

650
00:26:33,340 --> 00:26:40,168
that<font color="#E5E5E5"> yeah exposed funk</font>

651
00:26:38,080 --> 00:26:42,668
in a<font color="#CCCCCC"> whistle so if you're talking</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a</font>

652
00:26:40,169 --> 00:26:46,090
web service<font color="#E5E5E5"> endpoint</font><font color="#CCCCCC"> it might have a</font>

653
00:26:42,669 --> 00:26:49,269
WSDL file was the file which<font color="#CCCCCC"> defines the</font>

654
00:26:46,090 --> 00:26:51,100
end point they are fantastically<font color="#E5E5E5"> useless</font>

655
00:26:49,269 --> 00:26:53,980
pieces<font color="#CCCCCC"> of information if you actually</font>

656
00:26:51,100 --> 00:26:55,899
want to do a web service test because

657
00:26:53,980 --> 00:26:57,279
often they're like oh do you have<font color="#E5E5E5"> any</font>

658
00:26:55,899 --> 00:26:59,289
documentation<font color="#CCCCCC"> for this oh yeah we've got</font>

659
00:26:57,279 --> 00:27:01,299
the wisdom file<font color="#E5E5E5"> great because all that</font>

660
00:26:59,289 --> 00:27:03,820
tells you is<font color="#CCCCCC"> the name of</font><font color="#E5E5E5"> the function</font>

661
00:27:01,299 --> 00:27:05,529
<font color="#E5E5E5">and the types of the parameters but no</font>

662
00:27:03,820 --> 00:27:07,750
names for the parameters or anything

663
00:27:05,529 --> 00:27:09,130
<font color="#E5E5E5">else it's it's a so useless and if you</font>

664
00:27:07,750 --> 00:27:10,840
need any<font color="#E5E5E5"> kind of special IDs or anything</font>

665
00:27:09,130 --> 00:27:12,580
<font color="#E5E5E5">it takes a long time to stop messing</font>

666
00:27:10,840 --> 00:27:14,139
with them<font color="#E5E5E5"> however looking for exposed</font>

667
00:27:12,580 --> 00:27:15,939
functions in the<font color="#E5E5E5"> Bristol or looking at</font>

668
00:27:14,139 --> 00:27:17,799
how the binary application might talk<font color="#CCCCCC"> to</font>

669
00:27:15,940 --> 00:27:19,710
it<font color="#E5E5E5"> or even</font><font color="#CCCCCC"> other applications using that</font>

670
00:27:17,799 --> 00:27:22,269
same<font color="#CCCCCC"> endpoint how they might do</font><font color="#E5E5E5"> things</font>

671
00:27:19,710 --> 00:27:24,010
adding that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> together</font><font color="#E5E5E5"> might give you</font>

672
00:27:22,269 --> 00:27:25,450
a<font color="#E5E5E5"> good idea of</font><font color="#CCCCCC"> some ways that</font><font color="#E5E5E5"> you could</font>

673
00:27:24,010 --> 00:27:26,860
<font color="#E5E5E5">get around business processes and</font><font color="#CCCCCC"> things</font>

674
00:27:25,450 --> 00:27:29,649
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that and find some architectural</font>

675
00:27:26,860 --> 00:27:32,168
failures in the way that things are

676
00:27:29,649 --> 00:27:34,989
exposed and of course reverse

677
00:27:32,169 --> 00:27:36,970
engineering<font color="#E5E5E5"> and code review that's the</font>

678
00:27:34,990 --> 00:27:40,740
long boring work<font color="#E5E5E5"> but you can find some</font>

679
00:27:36,970 --> 00:27:44,799
cool<font color="#E5E5E5"> stuff from it exploiting them</font>

680
00:27:40,740 --> 00:27:47,830
modify the client if it's<font color="#CCCCCC"> dotnet</font><font color="#E5E5E5"> if</font>

681
00:27:44,799 --> 00:27:50,710
you're using telluric just decompile

682
00:27:47,830 --> 00:27:53,110
there's a<font color="#E5E5E5"> plugin for plugin called</font>

683
00:27:50,710 --> 00:27:56,440
reflexil which allows you<font color="#E5E5E5"> to arbitrarily</font>

684
00:27:53,110 --> 00:27:58,809
modify the code of any method and change

685
00:27:56,440 --> 00:28:00,149
<font color="#E5E5E5">whether fields are like public or</font>

686
00:27:58,809 --> 00:28:02,490
private or anything so<font color="#E5E5E5"> you can stop</font>

687
00:28:00,149 --> 00:28:05,139
messing with the client in that<font color="#E5E5E5"> way</font>

688
00:28:02,490 --> 00:28:07,269
<font color="#E5E5E5">modify the traffic so stick</font><font color="#CCCCCC"> canopy or</font>

689
00:28:05,139 --> 00:28:09,428
burp or zap or whatever in between it

690
00:28:07,269 --> 00:28:10,630
<font color="#CCCCCC">and as the</font><font color="#E5E5E5"> traffic comes through modify</font>

691
00:28:09,429 --> 00:28:12,010
the traffic in a certain way and<font color="#CCCCCC"> set it</font>

692
00:28:10,630 --> 00:28:13,000
out<font color="#E5E5E5"> you can always write</font><font color="#CCCCCC"> python scripts</font>

693
00:28:12,010 --> 00:28:16,389
and<font color="#CCCCCC"> things like that</font><font color="#E5E5E5"> for that that's</font>

694
00:28:13,000 --> 00:28:19,000
<font color="#CCCCCC">quite</font><font color="#E5E5E5"> honestly</font><font color="#CCCCCC"> directly connect to the</font>

695
00:28:16,389 --> 00:28:20,469
sequel instance<font color="#CCCCCC"> if it's got a if you've</font>

696
00:28:19,000 --> 00:28:22,870
got an<font color="#CCCCCC"> application that directly talks</font>

697
00:28:20,470 --> 00:28:24,610
to sequel you've got the connection

698
00:28:22,870 --> 00:28:26,379
string somewhere<font color="#E5E5E5"> in there take that</font>

699
00:28:24,610 --> 00:28:29,408
directly<font color="#E5E5E5"> commit to the sequel database</font>

700
00:28:26,380 --> 00:28:31,240
browse around<font color="#E5E5E5"> so what you can find and</font>

701
00:28:29,409 --> 00:28:33,909
<font color="#E5E5E5">user queries not intended</font><font color="#CCCCCC"> for you so if</font>

702
00:28:31,240 --> 00:28:35,590
you've got exposed function<font color="#CCCCCC"> are on a web</font>

703
00:28:33,909 --> 00:28:37,950
service you can<font color="#E5E5E5"> start messing with that</font>

704
00:28:35,590 --> 00:28:37,949
as well

705
00:28:40,330 --> 00:28:47,039
fixing them kind of hard<font color="#CCCCCC"> generally the</font>

706
00:28:45,100 --> 00:28:50,769
problem<font color="#E5E5E5"> ends up being that if the</font>

707
00:28:47,039 --> 00:28:52,690
<font color="#E5E5E5">application is architectural</font><font color="#CCCCCC"> e broken</font>

708
00:28:50,769 --> 00:28:54,909
you've already architected and<font color="#E5E5E5"> written</font>

709
00:28:52,690 --> 00:28:57,309
the application<font color="#E5E5E5"> really</font><font color="#CCCCCC"> hard to sort of</font>

710
00:28:54,909 --> 00:28:58,690
<font color="#CCCCCC">jerry-rigged security back into it at</font>

711
00:28:57,309 --> 00:29:00,279
the end<font color="#E5E5E5"> reactor</font><font color="#CCCCCC"> we architecting the</font>

712
00:28:58,690 --> 00:29:04,029
application is<font color="#E5E5E5"> not something</font><font color="#CCCCCC"> that a</font>

713
00:29:00,279 --> 00:29:05,740
client<font color="#E5E5E5"> ever wants to hear</font><font color="#CCCCCC"> and generally</font>

714
00:29:04,029 --> 00:29:06,850
it highlights the need<font color="#E5E5E5"> for security at</font>

715
00:29:05,740 --> 00:29:10,630
the development phases<font color="#E5E5E5"> and the design</font>

716
00:29:06,850 --> 00:29:12,219
phases<font color="#E5E5E5"> it's an unfortunate situation for</font>

717
00:29:10,630 --> 00:29:13,870
a client to<font color="#CCCCCC"> be in if you if you find</font>

718
00:29:12,220 --> 00:29:16,029
that their application is from the

719
00:29:13,870 --> 00:29:18,820
ground<font color="#CCCCCC"> up just essentially</font><font color="#E5E5E5"> broken from a</font>

720
00:29:16,029 --> 00:29:21,669
security<font color="#E5E5E5"> perspective the only way around</font>

721
00:29:18,820 --> 00:29:23,260
<font color="#CCCCCC">it</font><font color="#E5E5E5"> is for example if you've got this</font>

722
00:29:21,669 --> 00:29:25,000
<font color="#E5E5E5">concept if you if you're missing it if</font>

723
00:29:23,260 --> 00:29:27,129
it's an issue like you're missing<font color="#E5E5E5"> the</font>

724
00:29:25,000 --> 00:29:29,470
concept of<font color="#E5E5E5"> authorization you can add</font>

725
00:29:27,130 --> 00:29:32,590
that in through for<font color="#CCCCCC"> example having</font>

726
00:29:29,470 --> 00:29:35,139
unique<font color="#E5E5E5"> client certificates for each each</font>

727
00:29:32,590 --> 00:29:36,549
service that then talks in and then you

728
00:29:35,139 --> 00:29:38,019
can work<font color="#E5E5E5"> out which</font><font color="#CCCCCC"> one is</font><font color="#E5E5E5"> which based on</font>

729
00:29:36,549 --> 00:29:39,309
<font color="#CCCCCC">those client services so you</font><font color="#E5E5E5"> can add it</font>

730
00:29:38,019 --> 00:29:40,720
that<font color="#E5E5E5"> in at that level but if it's</font>

731
00:29:39,309 --> 00:29:42,360
something<font color="#CCCCCC"> like it talks to a sequel</font>

732
00:29:40,720 --> 00:29:46,990
database as the full application

733
00:29:42,360 --> 00:29:49,479
<font color="#CCCCCC">communications</font><font color="#E5E5E5"> communications design you</font>

734
00:29:46,990 --> 00:29:52,570
can't really fix that<font color="#CCCCCC"> very</font><font color="#E5E5E5"> well the only</font>

735
00:29:49,480 --> 00:29:55,299
way to get around<font color="#E5E5E5"> it sometimes</font><font color="#CCCCCC"> is to put</font>

736
00:29:52,570 --> 00:29:58,149
<font color="#CCCCCC">everything in some kind</font><font color="#E5E5E5"> of like VDI</font>

737
00:29:55,299 --> 00:30:02,379
instance or something<font color="#E5E5E5"> like that so</font>

738
00:29:58,149 --> 00:30:05,260
<font color="#CCCCCC">things like Citrix XenApp</font><font color="#E5E5E5"> and XenDesktop</font>

739
00:30:02,380 --> 00:30:06,610
idea being that when you go<font color="#E5E5E5"> to connect</font>

740
00:30:05,260 --> 00:30:07,899
<font color="#E5E5E5">to an application instead of the</font>

741
00:30:06,610 --> 00:30:09,760
application being<font color="#E5E5E5"> installed on your box</font>

742
00:30:07,899 --> 00:30:11,739
is<font color="#E5E5E5"> actually installed on a remote box</font>

743
00:30:09,760 --> 00:30:14,350
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you all sort of are DP'd</font><font color="#E5E5E5"> into sort</font>

744
00:30:11,740 --> 00:30:17,380
of so it gets you away<font color="#E5E5E5"> from being able</font>

745
00:30:14,350 --> 00:30:20,769
to<font color="#E5E5E5"> mess with the allocation sometimes if</font>

746
00:30:17,380 --> 00:30:23,230
you do it right<font color="#E5E5E5"> unfortunately they don't</font>

747
00:30:20,769 --> 00:30:25,409
always configure<font color="#E5E5E5"> that correctly but it</font>

748
00:30:23,230 --> 00:30:30,399
<font color="#E5E5E5">isn't optional</font>

749
00:30:25,409 --> 00:30:34,149
so<font color="#CCCCCC"> man-in-the-middle or cat in the</font>

750
00:30:30,399 --> 00:30:39,518
<font color="#E5E5E5">middle</font><font color="#CCCCCC"> I don't know you can tell that</font><font color="#E5E5E5"> I</font>

751
00:30:34,149 --> 00:30:41,049
like cats and<font color="#E5E5E5"> swear</font><font color="#CCCCCC"> tracker</font><font color="#E5E5E5"> so yeah</font><font color="#CCCCCC"> man</font>

752
00:30:39,519 --> 00:30:43,409
<font color="#E5E5E5">in the middling things you probably</font>

753
00:30:41,049 --> 00:30:45,668
<font color="#E5E5E5">already know what</font><font color="#CCCCCC"> that means essentially</font>

754
00:30:43,409 --> 00:30:48,370
you've<font color="#E5E5E5"> got some network traffic</font><font color="#CCCCCC"> get in</font>

755
00:30:45,669 --> 00:30:51,460
the middle<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it mess with it see what</font>

756
00:30:48,370 --> 00:30:53,649
it<font color="#CCCCCC"> does so missing an insufficient</font>

757
00:30:51,460 --> 00:30:54,279
<font color="#CCCCCC">Transport Security</font><font color="#E5E5E5"> is an incredibly</font>

758
00:30:53,649 --> 00:30:57,488
common

759
00:30:54,279 --> 00:31:00,309
vulnerability that we run into you know

760
00:30:57,489 --> 00:31:03,849
something's talking to some<font color="#E5E5E5"> service on</font>

761
00:31:00,309 --> 00:31:06,099
some port somewhere it might be HTTP

762
00:31:03,849 --> 00:31:07,840
traffic<font color="#E5E5E5"> it might be some random binary</font>

763
00:31:06,099 --> 00:31:10,989
protocol that they<font color="#E5E5E5"> came up with</font><font color="#CCCCCC"> it could</font>

764
00:31:07,840 --> 00:31:13,320
be anything<font color="#CCCCCC"> and they're just</font><font color="#E5E5E5"> not putting</font>

765
00:31:10,989 --> 00:31:16,779
<font color="#E5E5E5">any form of</font><font color="#CCCCCC"> encryption</font><font color="#E5E5E5"> or authentication</font>

766
00:31:13,320 --> 00:31:20,590
or thecase integrity checking<font color="#E5E5E5"> and things</font>

767
00:31:16,779 --> 00:31:23,440
like<font color="#CCCCCC"> that on there</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> if it</font><font color="#E5E5E5"> uses SSL and</font>

768
00:31:20,590 --> 00:31:27,099
TLS<font color="#E5E5E5"> the application</font><font color="#CCCCCC"> just decides not</font><font color="#E5E5E5"> to</font>

769
00:31:23,440 --> 00:31:28,479
check<font color="#CCCCCC"> the certificate so you can just go</font>

770
00:31:27,099 --> 00:31:30,549
in<font color="#E5E5E5"> and just put your self signed</font>

771
00:31:28,479 --> 00:31:33,009
certificate<font color="#CCCCCC"> in there and it just</font><font color="#E5E5E5"> accepts</font>

772
00:31:30,549 --> 00:31:35,289
it and so it<font color="#E5E5E5"> might as well</font><font color="#CCCCCC"> not have TLS</font>

773
00:31:33,009 --> 00:31:37,179
from the perspective<font color="#E5E5E5"> of a man in the</font>

774
00:31:35,289 --> 00:31:41,469
<font color="#E5E5E5">middle attack and then homebrew crypto</font>

775
00:31:37,179 --> 00:31:44,200
because devs love<font color="#E5E5E5"> homebrew crypto yeah</font>

776
00:31:41,469 --> 00:31:46,029
like static strings in an<font color="#CCCCCC"> application</font>

777
00:31:44,200 --> 00:31:48,429
that they going get<font color="#E5E5E5"> ex-ored with every</font>

778
00:31:46,029 --> 00:31:52,299
packet repeatedly<font color="#E5E5E5"> and it's so trivial to</font>

779
00:31:48,429 --> 00:31:55,479
break once you know how it<font color="#E5E5E5"> works</font><font color="#CCCCCC"> or yeah</font>

780
00:31:52,299 --> 00:31:57,580
they'll use<font color="#CCCCCC"> AES</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> they'll like</font><font color="#E5E5E5"> H</font><font color="#CCCCCC"> Mac</font>

781
00:31:55,479 --> 00:31:59,259
every packet but then the keys for<font color="#CCCCCC"> that</font>

782
00:31:57,580 --> 00:32:01,210
<font color="#E5E5E5">are static and just in the binary</font>

783
00:31:59,259 --> 00:32:03,149
application so it's like well now I know

784
00:32:01,210 --> 00:32:05,440
them<font color="#E5E5E5"> you have no security</font>

785
00:32:03,149 --> 00:32:10,049
<font color="#CCCCCC">yeah missing authenticity authenticity</font>

786
00:32:05,440 --> 00:32:12,279
<font color="#E5E5E5">records as well so a lot of the time in</font>

787
00:32:10,049 --> 00:32:13,960
homebrew crypto stuff<font color="#E5E5E5"> that people set up</font>

788
00:32:12,279 --> 00:32:17,320
for<font color="#CCCCCC"> a particular protocol</font><font color="#E5E5E5"> they'll do</font>

789
00:32:13,960 --> 00:32:19,690
<font color="#E5E5E5">something like they use AES</font><font color="#CCCCCC"> although use</font>

790
00:32:17,320 --> 00:32:21,070
rc4<font color="#E5E5E5"> or they use something like</font><font color="#CCCCCC"> that but</font>

791
00:32:19,690 --> 00:32:23,070
<font color="#CCCCCC">they won't actually authenticate the</font>

792
00:32:21,070 --> 00:32:24,549
traffic they just encrypt<font color="#E5E5E5"> it</font>

793
00:32:23,070 --> 00:32:26,139
unfortunately<font color="#E5E5E5"> due to things like</font>

794
00:32:24,549 --> 00:32:28,869
malleability attacks<font color="#CCCCCC"> what you can</font>

795
00:32:26,139 --> 00:32:30,849
<font color="#CCCCCC">actually do is if you know what some of</font>

796
00:32:28,869 --> 00:32:32,918
the<font color="#E5E5E5"> plaintext is you can then actually</font>

797
00:32:30,849 --> 00:32:36,489
<font color="#E5E5E5">flip the bits of the plaintext so it</font>

798
00:32:32,919 --> 00:32:38,619
makes<font color="#E5E5E5"> it send other things over</font><font color="#CCCCCC"> you can</font>

799
00:32:36,489 --> 00:32:42,339
do things<font color="#CCCCCC"> like say for example you know</font>

800
00:32:38,619 --> 00:32:45,218
that<font color="#CCCCCC"> there's a I don't know some some</font>

801
00:32:42,339 --> 00:32:46,960
field and it's like admin<font color="#CCCCCC"> 0 that's been</font>

802
00:32:45,219 --> 00:32:50,529
encrypted<font color="#E5E5E5"> well if you know where the</font>

803
00:32:46,960 --> 00:32:53,259
<font color="#CCCCCC">zero is you can</font><font color="#E5E5E5"> just flip the bit to</font><font color="#CCCCCC"> be</font>

804
00:32:50,529 --> 00:32:54,999
a<font color="#CCCCCC"> 1 the encryption only provides</font>

805
00:32:53,259 --> 00:32:57,820
confidentiality<font color="#E5E5E5"> it doesn't provide</font>

806
00:32:54,999 --> 00:32:59,619
authenticity or integrity<font color="#E5E5E5"> so if there's</font>

807
00:32:57,820 --> 00:33:03,158
no authenticity record you can just

808
00:32:59,619 --> 00:33:04,570
start<font color="#CCCCCC"> messing with data so</font><font color="#E5E5E5"> finding</font><font color="#CCCCCC"> well</font>

809
00:33:03,159 --> 00:33:08,230
<font color="#E5E5E5">in the middle problems yeah look at the</font>

810
00:33:04,570 --> 00:33:09,678
<font color="#CCCCCC">traffic like fairly obvious</font>

811
00:33:08,230 --> 00:33:11,110
reverse-engineer the code<font color="#E5E5E5"> and then</font>

812
00:33:09,679 --> 00:33:12,799
actually man-in-the-middle it

813
00:33:11,110 --> 00:33:17,419
<font color="#CCCCCC">reverse-engineer the code is actually</font>

814
00:33:12,799 --> 00:33:18,170
<font color="#E5E5E5">optional but it's just useful</font><font color="#CCCCCC"> man in the</font>

815
00:33:17,420 --> 00:33:20,540
<font color="#E5E5E5">middle</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> traffic</font>

816
00:33:18,170 --> 00:33:23,390
see what's coming<font color="#E5E5E5"> through mess around</font>

817
00:33:20,540 --> 00:33:26,330
with<font color="#E5E5E5"> it</font><font color="#CCCCCC"> see what happens again burp</font>

818
00:33:23,390 --> 00:33:28,220
suite or zap so<font color="#E5E5E5"> HTTP stuff kind of</font><font color="#CCCCCC"> pay I</font>

819
00:33:26,330 --> 00:33:30,169
like for binary stuff there are other

820
00:33:28,220 --> 00:33:32,780
options<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> write your own little</font>

821
00:33:30,170 --> 00:33:34,820
<font color="#E5E5E5">Python scripts and things</font><font color="#CCCCCC"> like that</font>

822
00:33:32,780 --> 00:33:37,670
and then just work out what happens when

823
00:33:34,820 --> 00:33:39,409
<font color="#E5E5E5">you mess with things and also just look</font>

824
00:33:37,670 --> 00:33:41,120
at what's in there<font color="#E5E5E5"> sometimes there can</font>

825
00:33:39,410 --> 00:33:44,150
<font color="#CCCCCC">be highly sensitive information</font><font color="#E5E5E5"> has been</font>

826
00:33:41,120 --> 00:33:47,209
transferred<font color="#CCCCCC"> over the network either not</font>

827
00:33:44,150 --> 00:33:48,980
protected or weakly protected and then

828
00:33:47,210 --> 00:33:51,110
somebody who's sniffing that traffic<font color="#E5E5E5"> can</font>

829
00:33:48,980 --> 00:33:55,120
then see see all that<font color="#E5E5E5"> stuff or extract</font>

830
00:33:51,110 --> 00:33:58,000
it for TLS certification stuff<font color="#CCCCCC"> I</font>

831
00:33:55,120 --> 00:34:04,340
apologize that that looks really<font color="#E5E5E5"> weird</font>

832
00:33:58,000 --> 00:34:06,049
so finding bad<font color="#E5E5E5"> TLS validation in c-sharp</font>

833
00:34:04,340 --> 00:34:07,790
the best thing to look for is just the

834
00:34:06,049 --> 00:34:10,820
word server certificate validation

835
00:34:07,790 --> 00:34:12,590
callback which is essentially<font color="#E5E5E5"> a global</font>

836
00:34:10,820 --> 00:34:14,179
thing for the application using<font color="#CCCCCC"> this</font>

837
00:34:12,590 --> 00:34:15,919
<font color="#E5E5E5">thing called service point manager where</font>

838
00:34:14,179 --> 00:34:19,429
<font color="#E5E5E5">you set a callback</font><font color="#CCCCCC"> for every time it</font>

839
00:34:15,918 --> 00:34:22,879
tries<font color="#E5E5E5"> to do a web connection out to</font>

840
00:34:19,429 --> 00:34:26,060
somewhere<font color="#E5E5E5"> that's HTTP it calls this</font>

841
00:34:22,879 --> 00:34:27,739
function<font color="#E5E5E5"> and no end of times I will find</font>

842
00:34:26,060 --> 00:34:30,409
<font color="#E5E5E5">that it is</font><font color="#CCCCCC"> set to this function that</font>

843
00:34:27,739 --> 00:34:32,089
where it just says return<font color="#E5E5E5"> true which is</font>

844
00:34:30,409 --> 00:34:35,179
basically accept<font color="#E5E5E5"> anything it could be</font>

845
00:34:32,090 --> 00:34:37,490
expired<font color="#E5E5E5"> it could be a code signing</font>

846
00:34:35,179 --> 00:34:38,330
<font color="#E5E5E5">certificate rather than a web</font>

847
00:34:37,489 --> 00:34:40,520
certificate

848
00:34:38,330 --> 00:34:42,290
it could be<font color="#E5E5E5"> self signed it could be</font>

849
00:34:40,520 --> 00:34:44,570
anything it could be<font color="#CCCCCC"> completely in fact</font>

850
00:34:42,290 --> 00:34:45,590
<font color="#E5E5E5">and it just accepts it because it</font><font color="#CCCCCC"> just</font>

851
00:34:44,570 --> 00:34:47,750
says<font color="#CCCCCC"> oh yeah that's fine</font>

852
00:34:45,590 --> 00:34:49,580
return true and<font color="#CCCCCC"> sometimes you'll see</font>

853
00:34:47,750 --> 00:34:51,409
<font color="#CCCCCC">people doing clever things like pinning</font>

854
00:34:49,580 --> 00:34:53,330
in<font color="#E5E5E5"> there well then what they'll do is</font>

855
00:34:51,409 --> 00:34:56,840
they'll they'll pin then they'll forget

856
00:34:53,330 --> 00:34:58,369
<font color="#E5E5E5">to call the parent</font><font color="#CCCCCC"> callback so they only</font>

857
00:34:56,840 --> 00:35:00,890
<font color="#E5E5E5">do the pinning check they don't do any</font>

858
00:34:58,369 --> 00:35:03,410
of the check<font color="#CCCCCC"> so that's always</font><font color="#E5E5E5"> quite</font>

859
00:35:00,890 --> 00:35:06,618
funny the pinning check is always<font color="#CCCCCC"> about</font>

860
00:35:03,410 --> 00:35:08,330
<font color="#E5E5E5">very often not based on like a</font>

861
00:35:06,619 --> 00:35:10,369
certificate<font color="#E5E5E5"> fingerprint it's more often</font>

862
00:35:08,330 --> 00:35:13,910
than not something like<font color="#E5E5E5"> is the issuer</font>

863
00:35:10,369 --> 00:35:15,650
<font color="#E5E5E5">this string which</font><font color="#CCCCCC"> is utterly</font><font color="#E5E5E5"> trivial to</font>

864
00:35:13,910 --> 00:35:17,629
bypass just by self signing your own

865
00:35:15,650 --> 00:35:20,030
cert with the same string it's just not

866
00:35:17,630 --> 00:35:20,829
got the validation chain but<font color="#E5E5E5"> as long as</font>

867
00:35:20,030 --> 00:35:23,979
<font color="#CCCCCC">that's</font>

868
00:35:20,829 --> 00:35:27,249
broken then you can<font color="#CCCCCC"> just get</font><font color="#E5E5E5"> past it</font><font color="#CCCCCC"> um</font>

869
00:35:23,979 --> 00:35:30,189
<font color="#E5E5E5">Java as usual Java makes it really long</font>

870
00:35:27,249 --> 00:35:32,288
and difficult to read<font color="#CCCCCC"> I don't see the</font>

871
00:35:30,190 --> 00:35:33,900
word<font color="#CCCCCC"> factory</font><font color="#E5E5E5"> on there though so</font><font color="#CCCCCC"> it can't</font>

872
00:35:32,289 --> 00:35:36,670
be<font color="#E5E5E5"> real Java code</font>

873
00:35:33,900 --> 00:35:38,109
so while<font color="#E5E5E5"> this looks quite complicated</font><font color="#CCCCCC"> oh</font>

874
00:35:36,670 --> 00:35:41,109
it does have the word<font color="#E5E5E5"> Factory good oh</font>

875
00:35:38,109 --> 00:35:44,019
<font color="#E5E5E5">yes good get socket factory so there we</font>

876
00:35:41,109 --> 00:35:48,098
go<font color="#E5E5E5"> and that's how we know</font><font color="#CCCCCC"> it's Java</font><font color="#E5E5E5"> so</font>

877
00:35:44,019 --> 00:35:53,529
the way<font color="#CCCCCC"> that Java does it is you you set</font>

878
00:35:48,099 --> 00:35:57,969
up a yeah this trust manager thing<font color="#CCCCCC"> where</font>

879
00:35:53,529 --> 00:36:00,400
it's sort of<font color="#E5E5E5"> sub classing the default</font>

880
00:35:57,969 --> 00:36:03,279
<font color="#E5E5E5">trust manager and allows you to just</font>

881
00:36:00,400 --> 00:36:05,589
return certain things<font color="#E5E5E5"> so the idea the</font>

882
00:36:03,279 --> 00:36:08,380
<font color="#E5E5E5">way that Java works is it doesn't</font><font color="#CCCCCC"> return</font>

883
00:36:05,589 --> 00:36:10,299
<font color="#E5E5E5">true or false it does</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> or throws</font>

884
00:36:08,380 --> 00:36:12,969
an exception<font color="#CCCCCC"> if it does nothing</font>

885
00:36:10,299 --> 00:36:14,859
that's<font color="#CCCCCC"> an excepted certificate</font><font color="#E5E5E5"> if it</font>

886
00:36:12,969 --> 00:36:15,880
<font color="#E5E5E5">throws an exception</font><font color="#CCCCCC"> there was an</font>

887
00:36:14,859 --> 00:36:18,308
<font color="#CCCCCC">exception there was something wrong with</font>

888
00:36:15,880 --> 00:36:20,079
<font color="#CCCCCC">a certificate so the way that Java works</font>

889
00:36:18,309 --> 00:36:21,700
is you do<font color="#E5E5E5"> all this rubbish down at the</font>

890
00:36:20,079 --> 00:36:27,599
bottom<font color="#E5E5E5"> and you're essentially assigning</font>

891
00:36:21,700 --> 00:36:31,558
this<font color="#E5E5E5"> trust all certs</font><font color="#CCCCCC"> trust manager to</font>

892
00:36:27,599 --> 00:36:36,219
<font color="#E5E5E5">the</font><font color="#CCCCCC"> SSL context and then when you do</font><font color="#E5E5E5"> a</font>

893
00:36:31,559 --> 00:36:37,959
HTTP request<font color="#E5E5E5"> it then check it basically</font>

894
00:36:36,219 --> 00:36:41,229
calls<font color="#CCCCCC"> into these</font><font color="#E5E5E5"> methods inside this</font>

895
00:36:37,959 --> 00:36:43,328
trust manager so it says get accepted

896
00:36:41,229 --> 00:36:45,459
<font color="#CCCCCC">issuers</font><font color="#E5E5E5"> so are there any accepted</font>

897
00:36:43,329 --> 00:36:48,880
issuers<font color="#CCCCCC"> that you need you need to be</font>

898
00:36:45,459 --> 00:36:50,529
like restricted to check the client

899
00:36:48,880 --> 00:36:52,329
check client<font color="#CCCCCC"> truster to check server</font>

900
00:36:50,529 --> 00:36:54,160
cluster trusted so if it's a client<font color="#CCCCCC"> if</font>

901
00:36:52,329 --> 00:36:57,239
here<font color="#E5E5E5"> or a service service certificate</font>

902
00:36:54,160 --> 00:36:59,618
those get called as they both do nothing

903
00:36:57,239 --> 00:37:03,009
<font color="#E5E5E5">they accept everything so it's the same</font>

904
00:36:59,619 --> 00:37:06,009
vulnerability again it's just<font color="#CCCCCC"> harder to</font>

905
00:37:03,009 --> 00:37:07,359
<font color="#E5E5E5">read and if you and again if you're</font>

906
00:37:06,009 --> 00:37:09,910
<font color="#CCCCCC">looking for this</font><font color="#E5E5E5"> kind of vulnerability</font>

907
00:37:07,359 --> 00:37:13,328
<font color="#E5E5E5">you</font><font color="#CCCCCC"> either you want to look for like one</font>

908
00:37:09,910 --> 00:37:17,469
of<font color="#E5E5E5"> these obvious strings like</font><font color="#CCCCCC"> x.509</font>

909
00:37:13,329 --> 00:37:21,130
<font color="#E5E5E5">trust map and Trust manager or what's</font>

910
00:37:17,469 --> 00:37:23,349
<font color="#CCCCCC">the</font><font color="#E5E5E5"> other one</font><font color="#CCCCCC"> but there's a thing</font>

911
00:37:21,130 --> 00:37:25,329
somewhere<font color="#E5E5E5"> around here that I can</font><font color="#CCCCCC"> see</font>

912
00:37:23,349 --> 00:37:28,209
where<font color="#E5E5E5"> is it</font>

913
00:37:25,329 --> 00:37:29,579
yeah set default hostname verifier is

914
00:37:28,209 --> 00:37:32,229
<font color="#CCCCCC">the other ones that</font><font color="#E5E5E5"> you should look for</font>

915
00:37:29,579 --> 00:37:34,270
<font color="#E5E5E5">and more often than not anything</font><font color="#CCCCCC"> that</font>

916
00:37:32,229 --> 00:37:37,330
<font color="#CCCCCC">anybody does with any</font><font color="#E5E5E5"> of these is</font>

917
00:37:34,270 --> 00:37:41,560
probably vulnerable<font color="#CCCCCC"> they have some use</font>

918
00:37:37,330 --> 00:37:44,650
<font color="#CCCCCC">for example saying</font><font color="#E5E5E5"> I will only accept</font><font color="#CCCCCC"> a</font>

919
00:37:41,560 --> 00:37:46,390
certificate<font color="#CCCCCC"> if it has the the service</font>

920
00:37:44,650 --> 00:37:48,700
certificate if it has this exact

921
00:37:46,390 --> 00:37:52,359
fingerprint<font color="#E5E5E5"> so you can pin</font><font color="#CCCCCC"> it down</font><font color="#E5E5E5"> to a</font>

922
00:37:48,700 --> 00:37:53,649
very<font color="#CCCCCC"> specific certificate</font><font color="#E5E5E5"> which is quite</font>

923
00:37:52,360 --> 00:37:54,910
useful<font color="#E5E5E5"> and really good security if they</font>

924
00:37:53,650 --> 00:37:56,470
actually<font color="#E5E5E5"> do it but</font><font color="#CCCCCC"> unfortunately most</font>

925
00:37:54,910 --> 00:38:00,810
people<font color="#E5E5E5"> do it the other</font><font color="#CCCCCC"> way and just say</font>

926
00:37:56,470 --> 00:38:04,330
I<font color="#CCCCCC"> accept everything fixing them use TLS</font>

927
00:38:00,810 --> 00:38:07,110
<font color="#E5E5E5">enforce certificate checking which is</font>

928
00:38:04,330 --> 00:38:10,960
not hard because you do nothing by not

929
00:38:07,110 --> 00:38:11,619
<font color="#CCCCCC">subclassing or setting a callback</font><font color="#E5E5E5"> it</font>

930
00:38:10,960 --> 00:38:13,990
just works

931
00:38:11,619 --> 00:38:16,290
it<font color="#E5E5E5"> uses the system system default</font>

932
00:38:13,990 --> 00:38:18,580
validation routines and<font color="#E5E5E5"> it just works</font><font color="#CCCCCC"> so</font>

933
00:38:16,290 --> 00:38:20,170
<font color="#E5E5E5">the solution is to do less</font><font color="#CCCCCC"> than they're</font>

934
00:38:18,580 --> 00:38:22,150
already<font color="#CCCCCC"> doing if it's if it's</font><font color="#E5E5E5"> a</font>

935
00:38:20,170 --> 00:38:24,070
vulnerable system<font color="#CCCCCC"> and then of course</font>

936
00:38:22,150 --> 00:38:27,610
<font color="#E5E5E5">certificate pinning if you want to add</font>

937
00:38:24,070 --> 00:38:33,280
<font color="#E5E5E5">that in if you trust</font><font color="#CCCCCC"> yourself to do it</font>

938
00:38:27,610 --> 00:38:34,570
sensibly this is probably one of my

939
00:38:33,280 --> 00:38:43,210
favorite<font color="#E5E5E5"> gifts on the Internet</font>

940
00:38:34,570 --> 00:38:44,950
that's so good<font color="#E5E5E5"> yeah it's even better</font>

941
00:38:43,210 --> 00:38:47,710
when it's got<font color="#E5E5E5"> the shooting stars music</font>

942
00:38:44,950 --> 00:38:50,439
over the top<font color="#CCCCCC"> of it and socially I</font>

943
00:38:47,710 --> 00:38:52,869
couldn't get<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> so handling</font>

944
00:38:50,440 --> 00:38:54,220
untrusted data<font color="#E5E5E5"> this is a just a lot like</font>

945
00:38:52,869 --> 00:38:55,780
web application testing it's just a

946
00:38:54,220 --> 00:38:58,930
binary application instead so you're

947
00:38:55,780 --> 00:39:02,340
sticking weird sequel strings<font color="#E5E5E5"> LDAP</font>

948
00:38:58,930 --> 00:39:07,089
strings in there and seeing<font color="#E5E5E5"> what happens</font>

949
00:39:02,340 --> 00:39:08,410
<font color="#E5E5E5">the</font><font color="#CCCCCC"> yeah look mal forming packets</font><font color="#E5E5E5"> if</font>

950
00:39:07,090 --> 00:39:09,730
<font color="#E5E5E5">you're having them come in over the</font>

951
00:39:08,410 --> 00:39:12,700
<font color="#E5E5E5">network just</font><font color="#CCCCCC"> like mess with them</font>

952
00:39:09,730 --> 00:39:14,200
randomly<font color="#E5E5E5"> and see what happens if you</font><font color="#CCCCCC"> can</font>

953
00:39:12,700 --> 00:39:17,200
reverse<font color="#CCCCCC"> engineer the packet format and</font>

954
00:39:14,200 --> 00:39:19,029
it's got some like I<font color="#CCCCCC"> know like a number</font>

955
00:39:17,200 --> 00:39:22,029
<font color="#E5E5E5">of</font><font color="#CCCCCC"> Records and it's like for</font><font color="#E5E5E5"> changes to</font>

956
00:39:19,030 --> 00:39:23,890
like<font color="#CCCCCC"> 6</font><font color="#E5E5E5"> million</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> see what happens</font>

957
00:39:22,030 --> 00:39:25,810
you get memory corruption bugs and then

958
00:39:23,890 --> 00:39:27,779
you get<font color="#E5E5E5"> all of the remote code execution</font>

959
00:39:25,810 --> 00:39:31,119
<font color="#CCCCCC">tonnage</font>

960
00:39:27,780 --> 00:39:33,130
<font color="#E5E5E5">yeah dots for higher zip bombs yes this</font>

961
00:39:31,119 --> 00:39:35,170
is<font color="#E5E5E5"> still a thing</font><font color="#CCCCCC"> there are still</font>

962
00:39:33,130 --> 00:39:38,800
applications that<font color="#E5E5E5"> accept like zip files</font>

963
00:39:35,170 --> 00:39:41,950
over a<font color="#E5E5E5"> network and then unzip them which</font>

964
00:39:38,800 --> 00:39:43,300
can have amusing consequences and then

965
00:39:41,950 --> 00:39:44,660
attacks on<font color="#CCCCCC"> D serialization which I'll</font>

966
00:39:43,300 --> 00:39:46,010
talk about in<font color="#E5E5E5"> a minute</font>

967
00:39:44,660 --> 00:39:48,040
they are a great<font color="#E5E5E5"> way to get remote code</font>

968
00:39:46,010 --> 00:39:48,040
execution

969
00:39:48,470 --> 00:39:55,040
so finding exporting sequel injection

970
00:39:50,860 --> 00:39:57,230
<font color="#CCCCCC">read a</font><font color="#E5E5E5"> web app book like if you've</font>

971
00:39:55,040 --> 00:39:59,360
exploited<font color="#E5E5E5"> sequel injection on a web app</font>

972
00:39:57,230 --> 00:40:02,450
you can<font color="#E5E5E5"> do it on a binary up</font><font color="#CCCCCC"> it's the</font>

973
00:39:59,360 --> 00:40:04,000
<font color="#CCCCCC">same</font><font color="#E5E5E5"> look at the code see if they're</font>

974
00:40:02,450 --> 00:40:06,200
doing<font color="#E5E5E5"> silly things</font><font color="#CCCCCC"> with sequel</font>

975
00:40:04,000 --> 00:40:07,670
<font color="#E5E5E5">particularly server-side applications</font>

976
00:40:06,200 --> 00:40:09,439
<font color="#E5E5E5">it just needs</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use your</font><font color="#CCCCCC"> export</font>

977
00:40:07,670 --> 00:40:14,450
techniques you can more often than not

978
00:40:09,440 --> 00:40:17,690
use<font color="#E5E5E5"> what's the name</font><font color="#CCCCCC"> of the tool</font><font color="#E5E5E5"> sequel</font>

979
00:40:14,450 --> 00:40:19,100
map<font color="#CCCCCC"> as long</font><font color="#E5E5E5"> as it's not</font><font color="#CCCCCC"> like a weird</font>

980
00:40:17,690 --> 00:40:21,710
binary protocol<font color="#E5E5E5"> which makes it kind of</font>

981
00:40:19,100 --> 00:40:23,180
harder<font color="#E5E5E5"> but yeah</font><font color="#CCCCCC"> a lot of the time</font><font color="#E5E5E5"> just</font>

982
00:40:21,710 --> 00:40:25,670
finding<font color="#E5E5E5"> things is put the silly cat a</font>

983
00:40:23,180 --> 00:40:26,870
<font color="#CCCCCC">pup that</font><font color="#E5E5E5"> put the sequel characters every</font>

984
00:40:25,670 --> 00:40:28,550
what the ones that<font color="#CCCCCC"> everybody knows the</font>

985
00:40:26,870 --> 00:40:30,529
signal injection characters the quotes

986
00:40:28,550 --> 00:40:34,520
and all of the silly ones in every field

987
00:40:30,530 --> 00:40:36,140
<font color="#E5E5E5">and see what happens and if it breaks it</font>

988
00:40:34,520 --> 00:40:42,620
<font color="#E5E5E5">maybe got a good idea</font><font color="#CCCCCC"> what's</font><font color="#E5E5E5"> happening</font>

989
00:40:36,140 --> 00:40:44,330
<font color="#CCCCCC">there passing bugs</font><font color="#E5E5E5"> so first of the</font>

990
00:40:42,620 --> 00:40:45,740
parser<font color="#E5E5E5"> if you've got some data that's</font>

991
00:40:44,330 --> 00:40:49,910
<font color="#E5E5E5">coming in say</font><font color="#CCCCCC"> for example it might be</font>

992
00:40:45,740 --> 00:40:52,129
<font color="#E5E5E5">Jason might be XML for XML enjoy hating</font>

993
00:40:49,910 --> 00:40:54,580
your life while you're testing it<font color="#E5E5E5"> if</font>

994
00:40:52,130 --> 00:40:56,870
it's you<font color="#CCCCCC"> know something weird</font><font color="#E5E5E5"> in binary</font>

995
00:40:54,580 --> 00:40:59,779
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> script some attacks do something</font>

996
00:40:56,870 --> 00:41:01,940
with Python<font color="#E5E5E5"> use some existing file pack</font>

997
00:40:59,780 --> 00:41:03,860
<font color="#E5E5E5">a file or packet format forces there are</font>

998
00:41:01,940 --> 00:41:04,970
some really good<font color="#CCCCCC"> ones for network packet</font>

999
00:41:03,860 --> 00:41:07,490
stuff and there are some really good

1000
00:41:04,970 --> 00:41:10,450
ones<font color="#E5E5E5"> for file stuff where you can take a</font>

1001
00:41:07,490 --> 00:41:13,970
you can<font color="#E5E5E5"> write like a</font><font color="#CCCCCC"> yeah mall</font><font color="#E5E5E5"> camel</font>

1002
00:41:10,450 --> 00:41:15,529
<font color="#E5E5E5">file format spec pass it to the fuzzer</font>

1003
00:41:13,970 --> 00:41:20,089
<font color="#E5E5E5">and it generates a whole bunch of files</font>

1004
00:41:15,530 --> 00:41:21,620
<font color="#E5E5E5">based on that spec and then you can load</font>

1005
00:41:20,090 --> 00:41:22,850
those files into<font color="#E5E5E5"> the application and see</font>

1006
00:41:21,620 --> 00:41:24,830
what happens<font color="#E5E5E5"> and sometimes you'll get a</font>

1007
00:41:22,850 --> 00:41:26,540
crash and that crash might give you like

1008
00:41:24,830 --> 00:41:29,900
code execution or it might<font color="#CCCCCC"> just give you</font>

1009
00:41:26,540 --> 00:41:31,730
something<font color="#CCCCCC"> maybe interesting</font><font color="#E5E5E5"> that's</font>

1010
00:41:29,900 --> 00:41:34,130
useful<font color="#E5E5E5"> for cases where for example</font>

1011
00:41:31,730 --> 00:41:37,160
somebody's loading a file off a USB

1012
00:41:34,130 --> 00:41:39,680
<font color="#CCCCCC">stick or something I think</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> it</font>

1013
00:41:37,160 --> 00:41:41,410
<font color="#E5E5E5">might have been the same one the same</font>

1014
00:41:39,680 --> 00:41:44,359
application<font color="#CCCCCC"> same</font><font color="#E5E5E5"> financial application</font>

1015
00:41:41,410 --> 00:41:46,970
that was doing<font color="#E5E5E5"> the weird web service</font>

1016
00:41:44,360 --> 00:41:49,460
thing<font color="#E5E5E5"> their application also had a thing</font>

1017
00:41:46,970 --> 00:41:52,660
where<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> take a mortgage</font>

1018
00:41:49,460 --> 00:41:55,119
application file which<font color="#E5E5E5"> was like a</font>

1019
00:41:52,660 --> 00:41:58,450
if you had somebody<font color="#E5E5E5"> from that company go</font>

1020
00:41:55,119 --> 00:42:00,010
out to meet you<font color="#E5E5E5"> and you know have a</font>

1021
00:41:58,450 --> 00:42:01,118
meeting with you<font color="#E5E5E5"> what they would do is</font>

1022
00:42:00,010 --> 00:42:03,069
they would fill<font color="#E5E5E5"> out your application</font>

1023
00:42:01,119 --> 00:42:04,780
<font color="#E5E5E5">details in this application and then</font>

1024
00:42:03,069 --> 00:42:07,390
export but if they didn't have network

1025
00:42:04,780 --> 00:42:10,299
<font color="#E5E5E5">access like</font><font color="#CCCCCC"> if you know</font><font color="#E5E5E5"> this was on a</font>

1026
00:42:07,390 --> 00:42:12,609
laptop<font color="#CCCCCC"> somewhere without Wi-Fi they</font>

1027
00:42:10,299 --> 00:42:14,049
could<font color="#E5E5E5"> then export that file then when</font>

1028
00:42:12,609 --> 00:42:15,670
they<font color="#E5E5E5"> get back to the office</font><font color="#CCCCCC"> load that</font>

1029
00:42:14,049 --> 00:42:17,200
file back in or just<font color="#CCCCCC"> email it</font><font color="#E5E5E5"> off when</font>

1030
00:42:15,670 --> 00:42:18,640
they get access<font color="#CCCCCC"> and somebody else can</font><font color="#E5E5E5"> go</font>

1031
00:42:17,200 --> 00:42:20,680
and go<font color="#CCCCCC"> and carry on messing with</font><font color="#E5E5E5"> it</font>

1032
00:42:18,640 --> 00:42:22,808
loading that file in it turns out that

1033
00:42:20,680 --> 00:42:24,250
there was a bunch<font color="#CCCCCC"> of ways that you could</font>

1034
00:42:22,809 --> 00:42:26,829
mess with<font color="#CCCCCC"> that file and</font><font color="#E5E5E5"> get like a</font>

1035
00:42:24,250 --> 00:42:28,780
memory corruption<font color="#E5E5E5"> when it</font><font color="#CCCCCC"> loaded</font><font color="#E5E5E5"> it back</font>

1036
00:42:26,829 --> 00:42:30,670
in I think one of them<font color="#E5E5E5"> was also a zip</font>

1037
00:42:28,780 --> 00:42:33,039
format which again you could do silly

1038
00:42:30,670 --> 00:42:35,890
<font color="#CCCCCC">things like zip dos where you would open</font>

1039
00:42:33,039 --> 00:42:37,890
<font color="#E5E5E5">a one kilobyte zip extract it and it</font>

1040
00:42:35,890 --> 00:42:40,359
takes<font color="#CCCCCC"> up one terabyte on your disk</font>

1041
00:42:37,890 --> 00:42:42,578
that's<font color="#CCCCCC"> always</font><font color="#E5E5E5"> fun</font><font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> get</font>

1042
00:42:40,359 --> 00:42:45,339
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> AFL</font><font color="#E5E5E5"> which I don't know when</font>

1043
00:42:42,579 --> 00:42:46,869
you've heard<font color="#E5E5E5"> of but it's like a common</font>

1044
00:42:45,339 --> 00:42:48,549
for Zynga library thing but that gets

1045
00:42:46,869 --> 00:42:49,539
compiled into<font color="#E5E5E5"> the code so if you don't</font>

1046
00:42:48,549 --> 00:42:51,009
have<font color="#E5E5E5"> the source code in the build</font>

1047
00:42:49,539 --> 00:42:52,750
<font color="#CCCCCC">environment you can't really get</font><font color="#E5E5E5"> AFL on</font>

1048
00:42:51,010 --> 00:42:53,859
there it's<font color="#CCCCCC"> very rare that</font><font color="#E5E5E5"> I'm in a</font>

1049
00:42:52,750 --> 00:42:56,349
<font color="#CCCCCC">situation where I actually get to</font><font color="#E5E5E5"> use</font>

1050
00:42:53,859 --> 00:42:58,598
AFL<font color="#CCCCCC"> but if you do use that</font><font color="#E5E5E5"> or something</font>

1051
00:42:56,349 --> 00:43:00,309
<font color="#E5E5E5">like it</font><font color="#CCCCCC"> that's quite useful</font><font color="#E5E5E5"> again look</font>

1052
00:42:58,599 --> 00:43:02,650
at the code<font color="#CCCCCC"> seems to</font><font color="#E5E5E5"> be why say every</font>

1053
00:43:00,309 --> 00:43:05,440
time<font color="#E5E5E5"> but yeah look at the code</font>

1054
00:43:02,650 --> 00:43:06,910
see what see how particular things are

1055
00:43:05,440 --> 00:43:09,329
<font color="#E5E5E5">being</font><font color="#CCCCCC"> handled and think about how you</font>

1056
00:43:06,910 --> 00:43:11,828
might go<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get around particular checks</font>

1057
00:43:09,329 --> 00:43:13,960
there's no end of<font color="#E5E5E5"> times when it'll be</font>

1058
00:43:11,829 --> 00:43:17,170
like looking<font color="#E5E5E5"> for integer overflows or</font>

1059
00:43:13,960 --> 00:43:18,880
something and now check<font color="#CCCCCC"> for one the</font>

1060
00:43:17,170 --> 00:43:20,920
check that they've got is<font color="#CCCCCC"> actually</font>

1061
00:43:18,880 --> 00:43:22,390
<font color="#E5E5E5">broken and you get around it and cause</font>

1062
00:43:20,920 --> 00:43:25,960
all sorts of mayhem in the memory

1063
00:43:22,390 --> 00:43:27,848
not so much in<font color="#E5E5E5"> c-sharp or</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> because</font>

1064
00:43:25,960 --> 00:43:31,450
<font color="#E5E5E5">they've managed so they don't tend to</font>

1065
00:43:27,849 --> 00:43:35,589
fall into memory corruption bugs<font color="#E5E5E5"> but</font>

1066
00:43:31,450 --> 00:43:37,808
again did<font color="#E5E5E5"> what was a useful yeah</font>

1067
00:43:35,589 --> 00:43:39,430
just like about<font color="#CCCCCC"> this so</font><font color="#E5E5E5"> anytime</font><font color="#CCCCCC"> your</font>

1068
00:43:37,809 --> 00:43:43,920
application takes her dotnet or a zip<font color="#E5E5E5"> or</font>

1069
00:43:39,430 --> 00:43:45,848
whatever<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just create these crazy</font>

1070
00:43:43,920 --> 00:43:48,880
<font color="#E5E5E5">zip files</font><font color="#CCCCCC"> they're like a</font><font color="#E5E5E5"> couple of</font>

1071
00:43:45,849 --> 00:43:50,410
<font color="#E5E5E5">kilobytes but when you expand them</font><font color="#CCCCCC"> it</font>

1072
00:43:48,880 --> 00:43:53,020
<font color="#E5E5E5">essentially expands to just ludicrous</font>

1073
00:43:50,410 --> 00:43:54,788
amounts of data<font color="#CCCCCC"> and then just if you can</font>

1074
00:43:53,020 --> 00:43:56,890
do that<font color="#E5E5E5"> on a server and</font><font color="#CCCCCC"> your goal</font><font color="#E5E5E5"> is to</font>

1075
00:43:54,789 --> 00:43:57,940
<font color="#CCCCCC">dos the server</font><font color="#E5E5E5"> it's a good way to</font><font color="#CCCCCC"> dos it</font>

1076
00:43:56,890 --> 00:44:00,609
<font color="#CCCCCC">because if it's</font><font color="#E5E5E5"> ran out of disk space</font>

1077
00:43:57,940 --> 00:44:02,140
then<font color="#E5E5E5"> it can't write logs and then you</font>

1078
00:44:00,609 --> 00:44:03,520
get<font color="#E5E5E5"> an exception in the log Handler and</font>

1079
00:44:02,140 --> 00:44:05,710
<font color="#E5E5E5">then the whole application falls over</font>

1080
00:44:03,520 --> 00:44:06,040
and because nobody<font color="#E5E5E5"> expects that</font><font color="#CCCCCC"> the log</font>

1081
00:44:05,710 --> 00:44:09,370
hand

1082
00:44:06,040 --> 00:44:10,660
won't go<font color="#E5E5E5"> to</font><font color="#CCCCCC"> write out so often the error</font>

1083
00:44:09,370 --> 00:44:12,640
handling is<font color="#E5E5E5"> really bad there because</font>

1084
00:44:10,660 --> 00:44:14,350
<font color="#CCCCCC">often the error handling is the log the</font>

1085
00:44:12,640 --> 00:44:16,629
wrong writer failed to write I'm now

1086
00:44:14,350 --> 00:44:20,290
going to<font color="#E5E5E5"> write a log of that error to</font>

1087
00:44:16,630 --> 00:44:22,300
the<font color="#E5E5E5"> log file guess what happens</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> case</font>

1088
00:44:20,290 --> 00:44:24,880
<font color="#E5E5E5">an exception so why is the exception to</font>

1089
00:44:22,300 --> 00:44:27,190
the<font color="#E5E5E5"> hook file</font><font color="#CCCCCC"> like rice no exception</font><font color="#E5E5E5"> so</font>

1090
00:44:24,880 --> 00:44:28,870
yeah it<font color="#CCCCCC"> just falls over and yeah you can</font>

1091
00:44:27,190 --> 00:44:33,670
<font color="#E5E5E5">sometimes do that over HTTP sometimes</font>

1092
00:44:28,870 --> 00:44:37,089
those things<font color="#E5E5E5"> where you could like you</font>

1093
00:44:33,670 --> 00:44:40,660
can use like a web service endpoint<font color="#CCCCCC"> to</font>

1094
00:44:37,090 --> 00:44:44,410
upload a file<font color="#E5E5E5"> and knock over so</font><font color="#CCCCCC"> Saudi</font>

1095
00:44:40,660 --> 00:44:45,520
serialization attacks<font color="#E5E5E5"> these are fun</font><font color="#CCCCCC"> I'm</font>

1096
00:44:44,410 --> 00:44:46,750
<font color="#E5E5E5">not really going to them in massive</font>

1097
00:44:45,520 --> 00:44:48,960
detail<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> I actually gave a talk on</font>

1098
00:44:46,750 --> 00:44:52,480
them at<font color="#E5E5E5"> some point</font>

1099
00:44:48,960 --> 00:44:56,200
but essentially<font color="#CCCCCC"> Dussehra serialization</font>

1100
00:44:52,480 --> 00:44:58,930
is you take an instance of<font color="#E5E5E5"> an</font><font color="#CCCCCC"> object in</font>

1101
00:44:56,200 --> 00:45:02,589
a in a language<font color="#E5E5E5"> like C sharp or Java and</font>

1102
00:44:58,930 --> 00:45:04,450
also PHP<font color="#E5E5E5"> and you turn it into some piece</font>

1103
00:45:02,590 --> 00:45:05,890
of<font color="#CCCCCC"> data</font><font color="#E5E5E5"> that you can ship somewhere and</font>

1104
00:45:04,450 --> 00:45:07,779
then on the other<font color="#E5E5E5"> end they</font><font color="#CCCCCC"> can take that</font>

1105
00:45:05,890 --> 00:45:10,270
<font color="#E5E5E5">data and turn it back</font><font color="#CCCCCC"> into an object so</font>

1106
00:45:07,780 --> 00:45:12,940
let's say you've got a dictionary<font color="#E5E5E5"> object</font>

1107
00:45:10,270 --> 00:45:14,110
that's full of strings or<font color="#E5E5E5"> let's just</font>

1108
00:45:12,940 --> 00:45:16,510
let's say a list object was full of

1109
00:45:14,110 --> 00:45:19,840
strings<font color="#CCCCCC"> you can then</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> that object</font>

1110
00:45:16,510 --> 00:45:22,420
<font color="#CCCCCC">turn it into a big blob of data this</font>

1111
00:45:19,840 --> 00:45:25,000
<font color="#E5E5E5">might be</font><font color="#CCCCCC"> binary data might be</font><font color="#E5E5E5"> Jason body</font>

1112
00:45:22,420 --> 00:45:26,290
XML anything<font color="#E5E5E5"> and then at the other end</font>

1113
00:45:25,000 --> 00:45:30,670
<font color="#CCCCCC">it goes whoop</font><font color="#E5E5E5"> and then turns it back</font>

1114
00:45:26,290 --> 00:45:33,640
into a running<font color="#E5E5E5"> object this is also</font>

1115
00:45:30,670 --> 00:45:36,280
possible for like classes<font color="#CCCCCC"> so let's say</font>

1116
00:45:33,640 --> 00:45:38,350
<font color="#CCCCCC">for example you've got</font><font color="#E5E5E5"> a customer class</font>

1117
00:45:36,280 --> 00:45:40,540
<font color="#E5E5E5">you get an instance of that customer it</font>

1118
00:45:38,350 --> 00:45:43,110
turns that into<font color="#E5E5E5"> a binary blob of data or</font>

1119
00:45:40,540 --> 00:45:46,420
some JSON and then<font color="#CCCCCC"> turns it back into</font>

1120
00:45:43,110 --> 00:45:49,420
<font color="#E5E5E5">this customer object</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the rent that</font>

1121
00:45:46,420 --> 00:45:52,620
you<font color="#E5E5E5"> can then do work on as if the same</font>

1122
00:45:49,420 --> 00:45:55,870
object existed in<font color="#CCCCCC"> both places</font>

1123
00:45:52,620 --> 00:45:58,810
<font color="#CCCCCC">unfortunately it turns out that</font><font color="#E5E5E5"> that's</font>

1124
00:45:55,870 --> 00:46:01,450
kind of fraught with danger<font color="#CCCCCC"> because if</font>

1125
00:45:58,810 --> 00:46:02,970
you then pass that<font color="#CCCCCC"> over an untrusted</font>

1126
00:46:01,450 --> 00:46:05,020
<font color="#CCCCCC">Channel</font><font color="#E5E5E5"> and then you mess with</font><font color="#CCCCCC"> that data</font>

1127
00:46:02,970 --> 00:46:06,520
<font color="#E5E5E5">well for a start you might be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

1128
00:46:05,020 --> 00:46:08,500
mess with things<font color="#CCCCCC"> that had business logic</font>

1129
00:46:06,520 --> 00:46:09,610
requirements around<font color="#E5E5E5"> them that's kind of</font>

1130
00:46:08,500 --> 00:46:11,170
<font color="#CCCCCC">the</font><font color="#E5E5E5"> boring side</font><font color="#CCCCCC"> of things what you can</font>

1131
00:46:09,610 --> 00:46:13,150
do instead is you can just change which

1132
00:46:11,170 --> 00:46:14,980
type it was so<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of a customer</font>

1133
00:46:13,150 --> 00:46:16,360
<font color="#CCCCCC">object</font><font color="#E5E5E5"> you've got</font><font color="#CCCCCC"> then some other weird</font>

1134
00:46:14,980 --> 00:46:19,240
type that when you do serialize it<font color="#E5E5E5"> at</font>

1135
00:46:16,360 --> 00:46:20,590
the other end<font color="#E5E5E5"> does something nasty</font>

1136
00:46:19,240 --> 00:46:23,560
I won't<font color="#E5E5E5"> go into it too</font><font color="#CCCCCC"> much but</font>

1137
00:46:20,590 --> 00:46:25,180
<font color="#CCCCCC">essentially yes Acker replaces the</font><font color="#E5E5E5"> the</font>

1138
00:46:23,560 --> 00:46:29,340
genuine content with something sketchy

1139
00:46:25,180 --> 00:46:32,680
<font color="#E5E5E5">and the side effect of the object being</font>

1140
00:46:29,340 --> 00:46:34,360
either created or destroyed<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> far</font>

1141
00:46:32,680 --> 00:46:38,350
end<font color="#E5E5E5"> actually can lead to remote code</font>

1142
00:46:34,360 --> 00:46:41,320
execution<font color="#E5E5E5"> so here's a quick</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> this</font>

1143
00:46:38,350 --> 00:46:43,690
<font color="#E5E5E5">is from</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> shop</font><font color="#CCCCCC"> so use this thing called</font>

1144
00:46:41,320 --> 00:46:45,970
a binary<font color="#CCCCCC"> for matter</font><font color="#E5E5E5"> that's basically a</font>

1145
00:46:43,690 --> 00:46:49,540
thing that crater that serialize and

1146
00:46:45,970 --> 00:46:51,549
deserialize<font color="#E5E5E5"> as objects so you take some</font>

1147
00:46:49,540 --> 00:46:52,900
packet from<font color="#CCCCCC"> a client's so that let's</font><font color="#E5E5E5"> say</font>

1148
00:46:51,550 --> 00:46:55,480
for example<font color="#CCCCCC"> it's taking</font><font color="#E5E5E5"> this packet off</font>

1149
00:46:52,900 --> 00:46:58,480
the network<font color="#E5E5E5"> puts it in this byte packet</font>

1150
00:46:55,480 --> 00:47:02,200
variable and then it<font color="#CCCCCC"> destabilizes the</font>

1151
00:46:58,480 --> 00:47:04,870
packet into this food packet type into

1152
00:47:02,200 --> 00:47:06,279
this<font color="#E5E5E5"> variable foo so this is this</font><font color="#CCCCCC"> caste</font>

1153
00:47:04,870 --> 00:47:07,569
here which because this generates an

1154
00:47:06,280 --> 00:47:11,460
object and then<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to assign</font><font color="#CCCCCC"> it to</font>

1155
00:47:07,570 --> 00:47:13,750
the left the left-hand side there now

1156
00:47:11,460 --> 00:47:17,470
<font color="#E5E5E5">the</font><font color="#CCCCCC"> vulnerability there is not</font>

1157
00:47:13,750 --> 00:47:21,370
immediately obvious however<font color="#E5E5E5"> this is what</font>

1158
00:47:17,470 --> 00:47:22,839
really gets generated<font color="#E5E5E5"> so you've got this</font>

1159
00:47:21,370 --> 00:47:25,390
binary formatter<font color="#CCCCCC"> you get this binary</font>

1160
00:47:22,840 --> 00:47:27,880
packet such<font color="#E5E5E5"> a bunch of bunch of data now</font>

1161
00:47:25,390 --> 00:47:31,180
what really happens is that<font color="#E5E5E5"> caste is</font>

1162
00:47:27,880 --> 00:47:32,410
then actually split out<font color="#CCCCCC"> the evil object</font>

1163
00:47:31,180 --> 00:47:36,819
gets put onto the heap of<font color="#CCCCCC"> the</font>

1164
00:47:32,410 --> 00:47:39,609
application then they try to<font color="#E5E5E5"> cast this</font>

1165
00:47:36,820 --> 00:47:40,600
evil object<font color="#E5E5E5"> to food packet now evil</font>

1166
00:47:39,610 --> 00:47:41,740
objects and food packet are two

1167
00:47:40,600 --> 00:47:42,970
different<font color="#CCCCCC"> things so</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> is</font>

1168
00:47:41,740 --> 00:47:45,279
apples<font color="#E5E5E5"> to oranges I'm not going to do</font>

1169
00:47:42,970 --> 00:47:48,819
that so it throws<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cat a typecasting</font>

1170
00:47:45,280 --> 00:47:51,490
exception<font color="#CCCCCC"> so this temporary variable</font>

1171
00:47:48,820 --> 00:47:53,740
<font color="#CCCCCC">that's on the heap now goes out of</font><font color="#E5E5E5"> scope</font>

1172
00:47:51,490 --> 00:47:57,640
<font color="#CCCCCC">because the</font><font color="#E5E5E5"> exception causes it to jump</font>

1173
00:47:53,740 --> 00:47:58,870
<font color="#E5E5E5">out</font><font color="#CCCCCC"> of scope it leaves the method the</font>

1174
00:47:57,640 --> 00:48:01,000
temporary<font color="#CCCCCC"> variable is now out of scope</font>

1175
00:47:58,870 --> 00:48:01,810
so the garbage collector finalizes<font color="#CCCCCC"> it</font>

1176
00:48:01,000 --> 00:48:03,550
<font color="#E5E5E5">now if there's something in the</font>

1177
00:48:01,810 --> 00:48:06,940
<font color="#E5E5E5">finalization logic that causes remote</font>

1178
00:48:03,550 --> 00:48:10,090
code execution<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example there</font><font color="#CCCCCC"> are</font>

1179
00:48:06,940 --> 00:48:12,460
some things to<font color="#E5E5E5"> do with scripting</font>

1180
00:48:10,090 --> 00:48:13,930
environments<font color="#E5E5E5"> some classes in</font><font color="#CCCCCC"> the.net</font>

1181
00:48:12,460 --> 00:48:15,370
<font color="#E5E5E5">framework to do scripting environments</font>

1182
00:48:13,930 --> 00:48:16,870
that<font color="#E5E5E5"> when you tear them down</font><font color="#CCCCCC"> you can</font>

1183
00:48:15,370 --> 00:48:18,220
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> teardown script and you can</font>

1184
00:48:16,870 --> 00:48:20,470
actually<font color="#E5E5E5"> pass that inside of the object</font>

1185
00:48:18,220 --> 00:48:22,419
<font color="#CCCCCC">so that when it comes through and the</font>

1186
00:48:20,470 --> 00:48:22,990
application goes<font color="#E5E5E5"> that's not what I was</font>

1187
00:48:22,420 --> 00:48:24,820
<font color="#CCCCCC">expecting</font>

1188
00:48:22,990 --> 00:48:26,979
gets rid<font color="#E5E5E5"> of the object and then the</font>

1189
00:48:24,820 --> 00:48:28,210
object<font color="#E5E5E5"> runs it runs</font><font color="#CCCCCC"> its finalization and</font>

1190
00:48:26,980 --> 00:48:32,800
script and that<font color="#E5E5E5"> finalization script gets</font>

1191
00:48:28,210 --> 00:48:37,900
<font color="#E5E5E5">you</font><font color="#CCCCCC"> a see so finding</font>

1192
00:48:32,800 --> 00:48:40,960
the<font color="#E5E5E5"> serialization bugs</font><font color="#CCCCCC"> oh and don't</font>

1193
00:48:37,900 --> 00:48:43,800
<font color="#E5E5E5">think that</font><font color="#CCCCCC"> this has</font><font color="#E5E5E5"> to be done manually</font>

1194
00:48:40,960 --> 00:48:46,720
<font color="#E5E5E5">I'll explain why in a minute</font>

1195
00:48:43,800 --> 00:48:48,550
yeah finding them<font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> look for</font>

1196
00:48:46,720 --> 00:48:51,370
data<font color="#E5E5E5"> from an</font><font color="#CCCCCC"> untrusted</font><font color="#E5E5E5"> zone for example</font>

1197
00:48:48,550 --> 00:48:52,540
a<font color="#E5E5E5"> network but also files files that the</font>

1198
00:48:51,370 --> 00:48:54,880
user<font color="#E5E5E5"> might be given over email or</font>

1199
00:48:52,540 --> 00:48:56,740
<font color="#CCCCCC">something like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really common</font>

1200
00:48:54,880 --> 00:48:58,810
in packet<font color="#E5E5E5"> parsing in Java and say shop</font>

1201
00:48:56,740 --> 00:49:03,759
to find<font color="#E5E5E5"> these things you trace the</font>

1202
00:48:58,810 --> 00:49:05,710
function calls from where data comes<font color="#E5E5E5"> in</font>

1203
00:49:03,760 --> 00:49:09,190
from a packet<font color="#CCCCCC"> to some sort of</font><font color="#E5E5E5"> D</font>

1204
00:49:05,710 --> 00:49:11,010
serialization call and then<font color="#E5E5E5"> verify that</font>

1205
00:49:09,190 --> 00:49:13,360
you can send<font color="#E5E5E5"> untrusted data there and</font>

1206
00:49:11,010 --> 00:49:17,770
once<font color="#E5E5E5"> you verified that</font><font color="#CCCCCC"> you know that</font>

1207
00:49:13,360 --> 00:49:20,020
you've<font color="#E5E5E5"> got a bug in c-sharp if they use</font>

1208
00:49:17,770 --> 00:49:22,440
<font color="#E5E5E5">any of these there are probably some</font>

1209
00:49:20,020 --> 00:49:26,410
more as well<font color="#CCCCCC"> to deserialize</font>

1210
00:49:22,440 --> 00:49:29,320
trusted user input<font color="#E5E5E5"> you can get</font><font color="#CCCCCC"> RT it's</font>

1211
00:49:26,410 --> 00:49:32,109
actually not that hard<font color="#CCCCCC"> I've been in Java</font>

1212
00:49:29,320 --> 00:49:34,750
you've got a object input stream and XML

1213
00:49:32,110 --> 00:49:37,300
encoder<font color="#E5E5E5"> they can subclass those to do</font>

1214
00:49:34,750 --> 00:49:40,890
some decode stuff but yeah if they're

1215
00:49:37,300 --> 00:49:43,180
<font color="#CCCCCC">using those again you can get OC and</font>

1216
00:49:40,890 --> 00:49:45,670
there's lots<font color="#CCCCCC"> of third-party libraries</font>

1217
00:49:43,180 --> 00:49:47,379
that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that with as well</font><font color="#CCCCCC"> these</font>

1218
00:49:45,670 --> 00:49:50,950
<font color="#E5E5E5">two tools are fantastic because you can</font>

1219
00:49:47,380 --> 00:49:53,400
<font color="#CCCCCC">just generate</font><font color="#E5E5E5"> the payload</font><font color="#CCCCCC"> that gets you</font>

1220
00:49:50,950 --> 00:49:55,839
<font color="#CCCCCC">a shell or runs a command on a on a box</font>

1221
00:49:53,400 --> 00:49:58,600
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> just send that and then it</font><font color="#E5E5E5"> just</font>

1222
00:49:55,840 --> 00:50:03,310
works<font color="#E5E5E5"> it's super simple so you got one</font>

1223
00:49:58,600 --> 00:50:07,029
for Java<font color="#E5E5E5"> and one for dotnet so yeah go</font>

1224
00:50:03,310 --> 00:50:10,360
check<font color="#CCCCCC"> this out and fixing</font><font color="#E5E5E5"> them now in</font>

1225
00:50:07,030 --> 00:50:15,330
dotnet or a really<font color="#E5E5E5"> short time okay</font><font color="#CCCCCC"> iNDOT</font>

1226
00:50:10,360 --> 00:50:20,860
net binders are essentially a way<font color="#CCCCCC"> of</font>

1227
00:50:15,330 --> 00:50:23,529
taking in the writing of function like a

1228
00:50:20,860 --> 00:50:25,270
callback function<font color="#CCCCCC"> that checks whether</font>

1229
00:50:23,530 --> 00:50:29,430
was actually<font color="#CCCCCC"> a you have to write class</font>

1230
00:50:25,270 --> 00:50:33,070
but it checks<font color="#CCCCCC"> whether the</font><font color="#E5E5E5"> type that's</font>

1231
00:50:29,430 --> 00:50:34,330
trying to be loaded can be<font color="#E5E5E5"> loaded so it</font>

1232
00:50:33,070 --> 00:50:36,910
sort of says<font color="#E5E5E5"> I would like to create an</font>

1233
00:50:34,330 --> 00:50:38,290
object of this type and the binder has

1234
00:50:36,910 --> 00:50:40,180
an<font color="#CCCCCC"> opportunity</font><font color="#E5E5E5"> to say no</font><font color="#CCCCCC"> you're not</font>

1235
00:50:38,290 --> 00:50:42,730
going to do that so you<font color="#E5E5E5"> can restrict the</font>

1236
00:50:40,180 --> 00:50:45,220
types that<font color="#E5E5E5"> are coming in</font><font color="#CCCCCC"> it is a little</font>

1237
00:50:42,730 --> 00:50:46,369
tricky<font color="#CCCCCC"> to implement but it's actually</font>

1238
00:50:45,220 --> 00:50:50,899
<font color="#E5E5E5">quite useful</font>

1239
00:50:46,369 --> 00:50:52,609
and<font color="#CCCCCC"> it's about the only way to fix D</font>

1240
00:50:50,900 --> 00:50:54,289
serialization<font color="#E5E5E5"> books short of writing</font>

1241
00:50:52,609 --> 00:50:55,939
<font color="#E5E5E5">your own deserialize</font><font color="#CCCCCC"> er that only</font><font color="#E5E5E5"> works</font>

1242
00:50:54,289 --> 00:50:57,979
for<font color="#CCCCCC"> your</font><font color="#E5E5E5"> particular types of class which</font>

1243
00:50:55,939 --> 00:50:59,299
is a lot<font color="#E5E5E5"> of headache</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> gets rid of a</font>

1244
00:50:57,979 --> 00:51:02,180
<font color="#E5E5E5">lot of the reason that people use</font>

1245
00:50:59,299 --> 00:51:03,410
serialization<font color="#E5E5E5"> Java same thing but it's</font>

1246
00:51:02,180 --> 00:51:08,749
just<font color="#CCCCCC"> suppressing the object input stream</font>

1247
00:51:03,410 --> 00:51:10,910
<font color="#CCCCCC">to use the resolved class method so when</font>

1248
00:51:08,749 --> 00:51:12,049
<font color="#E5E5E5">it's it calls back when you go to D</font>

1249
00:51:10,910 --> 00:51:13,640
<font color="#E5E5E5">sterilize something it calls this</font>

1250
00:51:12,049 --> 00:51:15,739
resolved class method and<font color="#CCCCCC"> your resolved</font>

1251
00:51:13,640 --> 00:51:17,538
class method can say no I'm not<font color="#E5E5E5"> going to</font>

1252
00:51:15,739 --> 00:51:19,099
resolve<font color="#E5E5E5"> that class because</font><font color="#CCCCCC"> it's not</font>

1253
00:51:17,539 --> 00:51:22,519
<font color="#E5E5E5">within my whitelisted trust list of</font>

1254
00:51:19,099 --> 00:51:27,489
things that I'm gonna take<font color="#CCCCCC"> a pot</font><font color="#E5E5E5"> and the</font>

1255
00:51:22,519 --> 00:51:30,348
last one yeah I did say<font color="#E5E5E5"> like swear</font><font color="#CCCCCC"> track</font>

1256
00:51:27,489 --> 00:51:33,769
<font color="#E5E5E5">so Windows objects so there are actually</font>

1257
00:51:30,349 --> 00:51:38,019
<font color="#E5E5E5">three</font><font color="#CCCCCC"> NetID</font><font color="#E5E5E5"> three namespaces in in</font>

1258
00:51:33,769 --> 00:51:39,828
windows files registry<font color="#E5E5E5"> and objects</font><font color="#CCCCCC"> I</font>

1259
00:51:38,019 --> 00:51:41,180
imagine a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> you as you were growing</font>

1260
00:51:39,829 --> 00:51:43,009
up<font color="#E5E5E5"> thought files with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing</font>

1261
00:51:41,180 --> 00:51:45,979
that existed<font color="#E5E5E5"> and didn't know about the</font>

1262
00:51:43,009 --> 00:51:48,170
registry<font color="#E5E5E5"> and were like huh</font><font color="#CCCCCC"> where is this</font>

1263
00:51:45,979 --> 00:51:49,129
conflict<font color="#E5E5E5"> thing stored for this game that</font>

1264
00:51:48,170 --> 00:51:50,449
I'm playing<font color="#E5E5E5"> and then you realize that</font>

1265
00:51:49,130 --> 00:51:51,589
the registry existing you're like oh wow

1266
00:51:50,449 --> 00:51:53,319
this<font color="#E5E5E5"> is this whole</font><font color="#CCCCCC"> other thing</font><font color="#E5E5E5"> and</font>

1267
00:51:51,589 --> 00:51:57,769
there's also another<font color="#E5E5E5"> one called objects</font>

1268
00:51:53,319 --> 00:52:00,349
<font color="#CCCCCC">so things</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> driver's devices events</font>

1269
00:51:57,769 --> 00:52:02,508
<font color="#E5E5E5">mutexes semaphores</font><font color="#CCCCCC"> Bowl all get put</font><font color="#E5E5E5"> into</font>

1270
00:52:00,349 --> 00:52:05,029
this object namespace

1271
00:52:02,509 --> 00:52:06,170
what named ones do<font color="#CCCCCC"> non named ones you</font>

1272
00:52:05,029 --> 00:52:07,759
can get<font color="#CCCCCC"> a handle to them but they</font><font color="#E5E5E5"> don't</font>

1273
00:52:06,170 --> 00:52:09,049
exist<font color="#E5E5E5"> in the namespace there's a tool</font>

1274
00:52:07,759 --> 00:52:11,029
<font color="#E5E5E5">called when objects from sysinternals</font>

1275
00:52:09,049 --> 00:52:12,529
<font color="#E5E5E5">that lets you browse them and by default</font>

1276
00:52:11,029 --> 00:52:15,559
<font color="#E5E5E5">they're insecure if you create them so</font>

1277
00:52:12,529 --> 00:52:18,619
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is what when objects like and this</font>

1278
00:52:15,559 --> 00:52:20,900
<font color="#CCCCCC">is what the the object namespace looks</font>

1279
00:52:18,619 --> 00:52:23,390
like you got<font color="#E5E5E5"> all these objects so you've</font>

1280
00:52:20,900 --> 00:52:27,019
got events mutexes jobs timers sections

1281
00:52:23,390 --> 00:52:30,229
sections are like<font color="#CCCCCC"> mapped Maps memory</font>

1282
00:52:27,019 --> 00:52:32,448
mapped files or mapped memory loss

1283
00:52:30,229 --> 00:52:35,899
shared memory<font color="#E5E5E5"> if you're familiar with</font>

1284
00:52:32,449 --> 00:52:40,640
those<font color="#CCCCCC"> terms</font><font color="#E5E5E5"> in Linux the permissions</font>

1285
00:52:35,900 --> 00:52:41,989
model is quite<font color="#E5E5E5"> funny</font><font color="#CCCCCC"> so just</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> back</font>

1286
00:52:40,640 --> 00:52:44,029
one<font color="#E5E5E5"> you see at the top you've got this</font>

1287
00:52:41,989 --> 00:52:47,269
like backslash in the folders<font color="#CCCCCC"> and then</font>

1288
00:52:44,029 --> 00:52:50,769
everything comes<font color="#CCCCCC"> down from there so API</font>

1289
00:52:47,269 --> 00:52:53,029
is allow you to<font color="#E5E5E5"> pass a ACL</font><font color="#CCCCCC"> a security</font>

1290
00:52:50,769 --> 00:52:56,508
context<font color="#E5E5E5"> it's called security security</font>

1291
00:52:53,029 --> 00:52:59,869
interviews so an API like create mutex

1292
00:52:56,509 --> 00:53:00,890
<font color="#E5E5E5">or create</font>

1293
00:52:59,869 --> 00:53:02,869
forget<font color="#CCCCCC"> all the ones</font><font color="#E5E5E5"> with a book</font><font color="#CCCCCC"> yeah</font>

1294
00:53:00,890 --> 00:53:05,629
create semaphore or things<font color="#E5E5E5"> like that if</font>

1295
00:53:02,869 --> 00:53:07,400
you pass<font color="#CCCCCC"> a null it just gives it no ACL</font>

1296
00:53:05,630 --> 00:53:13,099
which means that<font color="#E5E5E5"> everybody can access it</font>

1297
00:53:07,400 --> 00:53:16,880
<font color="#E5E5E5">if the parent directory doesn't have a a</font>

1298
00:53:13,099 --> 00:53:18,440
CL that is<font color="#E5E5E5"> inheritable the ACLs are</font>

1299
00:53:16,880 --> 00:53:20,539
inherited down that tree<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> Brut</font>

1300
00:53:18,440 --> 00:53:22,400
ACL is null

1301
00:53:20,539 --> 00:53:23,809
there is no ACL<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Enola yell means</font>

1302
00:53:22,400 --> 00:53:26,480
<font color="#E5E5E5">anyway anybody on the system can access</font>

1303
00:53:23,809 --> 00:53:29,470
it<font color="#CCCCCC"> so by</font><font color="#E5E5E5"> default if</font><font color="#CCCCCC"> you create a mutex</font>

1304
00:53:26,480 --> 00:53:31,400
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a name and you</font><font color="#E5E5E5"> don't give</font><font color="#CCCCCC"> it an ACL</font>

1305
00:53:29,470 --> 00:53:33,348
<font color="#CCCCCC">everybody on the system can access it</font>

1306
00:53:31,400 --> 00:53:35,210
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is quite</font><font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> a privilege</font>

1307
00:53:33,349 --> 00:53:36,289
escalation particularly if drivers<font color="#E5E5E5"> are</font>

1308
00:53:35,210 --> 00:53:38,359
<font color="#CCCCCC">doing this kind of thing because</font><font color="#E5E5E5"> you can</font>

1309
00:53:36,289 --> 00:53:39,589
then<font color="#E5E5E5"> stop messing with for example if</font>

1310
00:53:38,359 --> 00:53:42,109
it's got<font color="#CCCCCC"> a shared</font><font color="#E5E5E5"> memory from a driver</font>

1311
00:53:39,589 --> 00:53:44,170
to<font color="#E5E5E5"> user mode you can stop messing around</font>

1312
00:53:42,109 --> 00:53:46,609
<font color="#E5E5E5">things like that or if the driver itself</font>

1313
00:53:44,170 --> 00:53:49,309
doesn't<font color="#E5E5E5"> have an appropriate ACL on its</font>

1314
00:53:46,609 --> 00:53:51,380
driver object you can start calling<font color="#CCCCCC"> IO</font>

1315
00:53:49,309 --> 00:53:52,819
controls into the driver<font color="#E5E5E5"> which might do</font>

1316
00:53:51,380 --> 00:53:54,380
things<font color="#E5E5E5"> in the kernel that you shouldn't</font>

1317
00:53:52,819 --> 00:53:59,329
<font color="#E5E5E5">have the privilege to do if anybody</font>

1318
00:53:54,380 --> 00:54:01,450
<font color="#CCCCCC">remembers the</font><font color="#E5E5E5"> Asus UEFI update driver</font>

1319
00:53:59,329 --> 00:54:03,769
<font color="#E5E5E5">bug that was</font><font color="#CCCCCC"> around about a year ago</font>

1320
00:54:01,450 --> 00:54:06,859
<font color="#CCCCCC">that</font><font color="#E5E5E5"> allowed you to map all kernel</font>

1321
00:54:03,769 --> 00:54:09,379
memory that's how that<font color="#E5E5E5"> worked</font><font color="#CCCCCC"> I actually</font>

1322
00:54:06,859 --> 00:54:10,910
found it<font color="#E5E5E5"> before the guy who reported it</font>

1323
00:54:09,380 --> 00:54:12,079
found it but<font color="#E5E5E5"> then he managed</font><font color="#CCCCCC"> to get</font>

1324
00:54:10,910 --> 00:54:14,660
through the<font color="#E5E5E5"> disclosure process faster</font>

1325
00:54:12,079 --> 00:54:20,839
than me because<font color="#E5E5E5"> it took a sus two and a</font>

1326
00:54:14,660 --> 00:54:21,980
half years to<font color="#E5E5E5"> get through mine yeah</font>

1327
00:54:20,839 --> 00:54:24,109
finding the<font color="#E5E5E5"> weak object permissions</font>

1328
00:54:21,980 --> 00:54:25,670
process<font color="#E5E5E5"> explorers handles view is great</font>

1329
00:54:24,109 --> 00:54:29,538
<font color="#CCCCCC">because you</font><font color="#E5E5E5"> can see what objects a</font>

1330
00:54:25,670 --> 00:54:30,589
particular process has handles to which

1331
00:54:29,539 --> 00:54:32,180
great if you're targeting a<font color="#CCCCCC"> particular</font>

1332
00:54:30,589 --> 00:54:33,288
application<font color="#CCCCCC"> you can use win knobs to</font>

1333
00:54:32,180 --> 00:54:35,779
then go through and<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at them a bit</font>

1334
00:54:33,289 --> 00:54:39,140
<font color="#CCCCCC">more you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> right-click on any</font><font color="#E5E5E5"> of those</font>

1335
00:54:35,779 --> 00:54:40,489
objects<font color="#E5E5E5"> in</font><font color="#CCCCCC"> WA knobs and then click</font>

1336
00:54:39,140 --> 00:54:43,129
properties<font color="#E5E5E5"> and even see all the security</font>

1337
00:54:40,489 --> 00:54:44,450
controls if any often<font color="#E5E5E5"> it's null which</font>

1338
00:54:43,130 --> 00:54:46,339
means you could<font color="#E5E5E5"> mess with them you can</font>

1339
00:54:44,450 --> 00:54:47,899
also use API monitoring to<font color="#CCCCCC"> see what</font>

1340
00:54:46,339 --> 00:54:51,109
what's been called<font color="#E5E5E5"> and what's being</font>

1341
00:54:47,900 --> 00:54:52,519
created when you<font color="#E5E5E5"> exploit them the</font>

1342
00:54:51,109 --> 00:54:54,589
exploitation<font color="#E5E5E5"> is local</font><font color="#CCCCCC"> you there's no</font>

1343
00:54:52,519 --> 00:54:57,589
network<font color="#E5E5E5"> access to this stuff</font><font color="#CCCCCC"> so local</font>

1344
00:54:54,589 --> 00:54:58,788
probe<font color="#E5E5E5"> ask at best but cross user is</font>

1345
00:54:57,589 --> 00:55:01,788
quite interesting on<font color="#CCCCCC"> multi tenant</font>

1346
00:54:58,789 --> 00:55:03,739
<font color="#E5E5E5">systems</font><font color="#CCCCCC"> I have found stuff that that and</font>

1347
00:55:01,789 --> 00:55:06,680
multi tenant systems do sort<font color="#E5E5E5"> of exist</font>

1348
00:55:03,739 --> 00:55:08,390
sometimes<font color="#E5E5E5"> like on the desktop model it's</font>

1349
00:55:06,680 --> 00:55:09,890
total nonsense<font color="#CCCCCC"> any vulnerability</font><font color="#E5E5E5"> that</font>

1350
00:55:08,390 --> 00:55:12,670
anybody reports there's multi tenant for

1351
00:55:09,890 --> 00:55:14,200
<font color="#CCCCCC">DES</font><font color="#E5E5E5"> like Windows desktop users is just</font>

1352
00:55:12,670 --> 00:55:17,470
since because nobody's ever logged into

1353
00:55:14,200 --> 00:55:19,000
<font color="#E5E5E5">it that concurrently</font><font color="#CCCCCC"> but sometimes you</font>

1354
00:55:17,470 --> 00:55:20,319
can run<font color="#CCCCCC"> into cases whether it's quite</font>

1355
00:55:19,000 --> 00:55:23,369
<font color="#CCCCCC">useful and shared memory is</font><font color="#E5E5E5"> often</font>

1356
00:55:20,319 --> 00:55:26,380
interesting<font color="#CCCCCC"> so quick case</font><font color="#E5E5E5"> early</font>

1357
00:55:23,369 --> 00:55:27,309
application<font color="#CCCCCC"> visualization yeah sorry</font>

1358
00:55:26,380 --> 00:55:29,700
running<font color="#E5E5E5"> late</font>

1359
00:55:27,309 --> 00:55:33,210
application virtualization software

1360
00:55:29,700 --> 00:55:36,970
<font color="#CCCCCC">might be one that</font><font color="#E5E5E5"> I mentioned</font><font color="#CCCCCC"> earlier</font>

1361
00:55:33,210 --> 00:55:38,650
<font color="#CCCCCC">has a thing where applications</font><font color="#E5E5E5"> in</font>

1362
00:55:36,970 --> 00:55:42,700
applications<font color="#E5E5E5"> that are running in this</font>

1363
00:55:38,650 --> 00:55:46,480
virtualized desktop<font color="#E5E5E5"> perhaps over more</font>

1364
00:55:42,700 --> 00:55:49,118
<font color="#E5E5E5">poor desktop instances share a specific</font>

1365
00:55:46,480 --> 00:55:51,369
set of memory<font color="#CCCCCC"> so there's basically</font><font color="#E5E5E5"> every</font>

1366
00:55:49,119 --> 00:55:56,040
process has this<font color="#E5E5E5"> Maps this piece of</font>

1367
00:55:51,369 --> 00:55:59,380
shared process<font color="#E5E5E5"> because it's loading a</font>

1368
00:55:56,040 --> 00:56:01,450
it's loading like a particular<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> for</font>

1369
00:55:59,380 --> 00:56:03,309
doing some stuff that allows<font color="#E5E5E5"> you to copy</font>

1370
00:56:01,450 --> 00:56:04,419
<font color="#E5E5E5">paste it in and out so in and out of the</font>

1371
00:56:03,309 --> 00:56:06,250
virtualized environment and things like

1372
00:56:04,420 --> 00:56:10,720
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but the memory</font><font color="#CCCCCC"> itself is not</font>

1373
00:56:06,250 --> 00:56:12,579
protected because the<font color="#CCCCCC"> dacl</font><font color="#E5E5E5"> is no but it</font>

1374
00:56:10,720 --> 00:56:14,709
injects<font color="#CCCCCC"> into every this this thing is</font>

1375
00:56:12,579 --> 00:56:16,150
injected into every process on the

1376
00:56:14,710 --> 00:56:19,450
system including ones<font color="#CCCCCC"> that run</font><font color="#E5E5E5"> a system</font>

1377
00:56:16,150 --> 00:56:21,579
and the memory<font color="#E5E5E5"> contains a</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> to the</font>

1378
00:56:19,450 --> 00:56:24,299
path<font color="#E5E5E5"> to the binary that needs to</font><font color="#CCCCCC"> be</font>

1379
00:56:21,579 --> 00:56:27,099
injected<font color="#CCCCCC"> so if you</font><font color="#E5E5E5"> just change the path</font>

1380
00:56:24,299 --> 00:56:28,390
every process on the system loads this

1381
00:56:27,099 --> 00:56:31,000
binary<font color="#CCCCCC"> which gets you immediate</font>

1382
00:56:28,390 --> 00:56:34,480
professed system although if you point a

1383
00:56:31,000 --> 00:56:35,880
non-existent<font color="#E5E5E5"> DLL the error handling case</font>

1384
00:56:34,480 --> 00:56:38,140
in<font color="#E5E5E5"> this was just to continue trying</font>

1385
00:56:35,880 --> 00:56:39,990
which means that every single<font color="#CCCCCC"> process</font><font color="#E5E5E5"> on</font>

1386
00:56:38,140 --> 00:56:42,700
the<font color="#CCCCCC"> Box</font><font color="#E5E5E5"> suddenly goes into a spin loop</font>

1387
00:56:39,990 --> 00:56:45,098
which hoses the entire instance and

1388
00:56:42,700 --> 00:56:47,020
means<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> only way</font><font color="#E5E5E5"> to kill all the</font>

1389
00:56:45,099 --> 00:56:51,339
<font color="#CCCCCC">instances</font><font color="#E5E5E5"> is to reboot the</font>

1390
00:56:47,020 --> 00:56:55,780
<font color="#E5E5E5">virtualization server which was I found</font>

1391
00:56:51,339 --> 00:56:59,190
that<font color="#E5E5E5"> by accident</font><font color="#CCCCCC"> we copied any</font>

1392
00:56:55,780 --> 00:57:04,180
permissions cases 32 Sophos<font color="#E5E5E5"> antivirus</font>

1393
00:56:59,190 --> 00:57:05,380
<font color="#E5E5E5">had this issue where you could the there</font>

1394
00:57:04,180 --> 00:57:08,230
was a bunch of<font color="#E5E5E5"> mutexes that were run by</font>

1395
00:57:05,380 --> 00:57:09,849
<font color="#E5E5E5">the scanning drivers but they were not</font>

1396
00:57:08,230 --> 00:57:11,619
protected<font color="#CCCCCC"> you could lock you could</font>

1397
00:57:09,849 --> 00:57:12,700
acquire all the mutexes<font color="#CCCCCC"> all of the</font>

1398
00:57:11,619 --> 00:57:14,230
threat the scanning threads<font color="#E5E5E5"> would then</font>

1399
00:57:12,700 --> 00:57:16,779
stop and you could basically<font color="#E5E5E5"> just halt</font>

1400
00:57:14,230 --> 00:57:19,329
the<font color="#CCCCCC"> a/v scanning which meant that</font><font color="#E5E5E5"> you</font>

1401
00:57:16,780 --> 00:57:21,160
got<font color="#E5E5E5"> eventually</font><font color="#CCCCCC"> what happens is it sees</font>

1402
00:57:19,329 --> 00:57:22,990
it as a the OS sees it as a kernel

1403
00:57:21,160 --> 00:57:24,950
thread<font color="#E5E5E5"> hanging and then</font><font color="#CCCCCC"> BSOD is the box</font>

1404
00:57:22,990 --> 00:57:26,569
<font color="#E5E5E5">within the time between that which</font>

1405
00:57:24,950 --> 00:57:28,609
like I think like<font color="#E5E5E5"> 15 seconds</font><font color="#CCCCCC"> or</font>

1406
00:57:26,570 --> 00:57:30,380
something<font color="#CCCCCC"> you can essentially do what</font>

1407
00:57:28,609 --> 00:57:34,578
<font color="#E5E5E5">anything you like and the</font><font color="#CCCCCC"> AV can't stop</font>

1408
00:57:30,380 --> 00:57:37,400
you it's quite fun so fixing them<font color="#E5E5E5"> pass</font>

1409
00:57:34,579 --> 00:57:39,500
an ACL to any of the api's when you're

1410
00:57:37,400 --> 00:57:42,829
creating<font color="#E5E5E5"> mutexes drivers or anything</font>

1411
00:57:39,500 --> 00:57:44,470
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can copy them directly</font>

1412
00:57:42,829 --> 00:57:46,520
from your process if you want<font color="#E5E5E5"> the same</font>

1413
00:57:44,470 --> 00:57:48,348
<font color="#E5E5E5">ACL as what your</font><font color="#CCCCCC"> processes and</font><font color="#E5E5E5"> running</font>

1414
00:57:46,520 --> 00:57:50,660
out or you can generate them manually

1415
00:57:48,349 --> 00:57:52,579
<font color="#E5E5E5">there are eight cars do that so in</font>

1416
00:57:50,660 --> 00:57:54,618
conclusion<font color="#E5E5E5"> binary applications are</font>

1417
00:57:52,579 --> 00:57:56,990
challenging<font color="#CCCCCC"> but also</font><font color="#E5E5E5"> fun there's a lots</font>

1418
00:57:54,619 --> 00:57:58,910
of cool<font color="#CCCCCC"> things you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> find my top five</font>

1419
00:57:56,990 --> 00:58:00,828
here is definitely<font color="#E5E5E5"> subjective</font><font color="#CCCCCC"> this is</font>

1420
00:57:58,910 --> 00:58:02,359
based on my<font color="#CCCCCC"> experience of testing behind</font>

1421
00:58:00,829 --> 00:58:04,150
applications<font color="#E5E5E5"> what somebody else does is</font>

1422
00:58:02,359 --> 00:58:06,380
in a different sort of<font color="#E5E5E5"> industry vertical</font>

1423
00:58:04,150 --> 00:58:09,230
what they're playing with is<font color="#E5E5E5"> probably</font>

1424
00:58:06,380 --> 00:58:11,000
<font color="#E5E5E5">different if you can test a web</font>

1425
00:58:09,230 --> 00:58:13,369
application<font color="#CCCCCC"> you can probably test upon</font>

1426
00:58:11,000 --> 00:58:15,650
your<font color="#CCCCCC"> application it's like the approach</font>

1427
00:58:13,369 --> 00:58:17,599
is largely<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> different</font>

1428
00:58:15,650 --> 00:58:19,820
tooling and different<font color="#E5E5E5"> technologies that</font>

1429
00:58:17,599 --> 00:58:21,470
you're<font color="#E5E5E5"> playing with so it's you know and</font>

1430
00:58:19,820 --> 00:58:22,670
you<font color="#E5E5E5"> don't need to</font><font color="#CCCCCC"> be elite sport dev you</font>

1431
00:58:21,470 --> 00:58:25,490
don't need to be able to<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> build</font>

1432
00:58:22,670 --> 00:58:27,560
<font color="#CCCCCC">rock chains and bypass</font><font color="#E5E5E5"> SLR that stuff</font>

1433
00:58:25,490 --> 00:58:28,910
<font color="#E5E5E5">almost never happens I never look at</font>

1434
00:58:27,560 --> 00:58:30,859
<font color="#CCCCCC">meta</font><font color="#E5E5E5"> I think I</font><font color="#CCCCCC"> don't I</font><font color="#E5E5E5"> think I've used</font>

1435
00:58:28,910 --> 00:58:34,790
<font color="#CCCCCC">Metasploit like twice in my</font><font color="#E5E5E5"> entire</font>

1436
00:58:30,859 --> 00:58:36,799
<font color="#E5E5E5">career</font><font color="#CCCCCC"> so yeah you don't</font><font color="#E5E5E5"> need to be an</font>

1437
00:58:34,790 --> 00:58:39,710
<font color="#E5E5E5">early exploit dev you can learn this</font>

1438
00:58:36,800 --> 00:58:42,570
<font color="#E5E5E5">stuff quite quickly and there we go</font>

1439
00:58:39,710 --> 00:58:45,679
<font color="#E5E5E5">thank you any questions</font>

1440
00:58:42,570 --> 00:58:45,679
[Applause]

