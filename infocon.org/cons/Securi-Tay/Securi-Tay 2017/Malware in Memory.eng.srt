1
00:00:02,540 --> 00:00:09,450
everything's working<font color="#CCCCCC"> alright so thanks</font>

2
00:00:06,270 --> 00:00:11,010
for coming<font color="#E5E5E5"> along</font><font color="#CCCCCC"> I'm just going to be</font>

3
00:00:09,450 --> 00:00:14,299
introducing some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the work I've been</font>

4
00:00:11,010 --> 00:00:18,270
<font color="#E5E5E5">doing for my dissertation on looking at</font>

5
00:00:14,299 --> 00:00:22,740
<font color="#CCCCCC">Windows memory and how we can use memory</font>

6
00:00:18,270 --> 00:00:26,609
forensics techniques to try and find and

7
00:00:22,740 --> 00:00:28,589
fix malware infections<font color="#CCCCCC"> fairly early on a</font>

8
00:00:26,609 --> 00:00:31,320
<font color="#E5E5E5">bit earlier on than you might otherwise</font>

9
00:00:28,590 --> 00:00:33,120
<font color="#E5E5E5">be able to we're also it's also gonna be</font>

10
00:00:31,320 --> 00:00:35,010
<font color="#E5E5E5">looking at file</font><font color="#CCCCCC"> this malware where you</font>

11
00:00:33,120 --> 00:00:38,030
might not have many other ways of

12
00:00:35,010 --> 00:00:40,290
finding<font color="#E5E5E5"> it besides behavioral analysis</font>

13
00:00:38,030 --> 00:00:42,450
<font color="#CCCCCC">so yeah that's the title</font><font color="#E5E5E5"> of my</font>

14
00:00:40,290 --> 00:00:43,469
dissertation<font color="#CCCCCC"> if any wants to chat to me</font>

15
00:00:42,450 --> 00:00:44,640
about it afterwards I'd be<font color="#CCCCCC"> very</font>

16
00:00:43,469 --> 00:00:47,969
<font color="#CCCCCC">interested</font><font color="#E5E5E5"> in hearing</font><font color="#CCCCCC"> from anyone</font><font color="#E5E5E5"> who's</font>

17
00:00:44,640 --> 00:00:49,829
got industry experience of this<font color="#E5E5E5"> this</font>

18
00:00:47,969 --> 00:00:51,629
talk itself is<font color="#E5E5E5"> going a fairly high level</font>

19
00:00:49,829 --> 00:00:55,500
<font color="#CCCCCC">into overview I've tried not to</font><font color="#E5E5E5"> make it</font>

20
00:00:51,629 --> 00:00:58,320
sort<font color="#E5E5E5"> of going</font><font color="#CCCCCC"> in-depth with Windows</font>

21
00:00:55,500 --> 00:01:00,059
debug and code<font color="#E5E5E5"> for it so it's just a</font>

22
00:00:58,320 --> 00:01:01,230
fairly<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> overview of these</font>

23
00:01:00,059 --> 00:01:03,449
things so we're looking<font color="#E5E5E5"> at what's the</font>

24
00:01:01,230 --> 00:01:05,908
point of all this<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> of introduction</font>

25
00:01:03,449 --> 00:01:07,970
<font color="#CCCCCC">to Windows memory management</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

26
00:01:05,909 --> 00:01:10,350
looking<font color="#E5E5E5"> at some</font><font color="#CCCCCC"> methods for</font><font color="#E5E5E5"> locating</font>

27
00:01:07,970 --> 00:01:12,869
relevant stuff within<font color="#E5E5E5"> a computer's</font>

28
00:01:10,350 --> 00:01:15,600
memory space so starting over what the

29
00:01:12,869 --> 00:01:19,850
point<font color="#E5E5E5"> I mean that's the primary</font><font color="#CCCCCC"> thing is</font>

30
00:01:15,600 --> 00:01:23,158
<font color="#E5E5E5">the file</font><font color="#CCCCCC"> list malware is up and coming</font>

31
00:01:19,850 --> 00:01:25,470
<font color="#CCCCCC">over the last three two or</font><font color="#E5E5E5"> three years</font>

32
00:01:23,159 --> 00:01:26,970
<font color="#E5E5E5">you've seen quite a increase in what we</font>

33
00:01:25,470 --> 00:01:28,470
call file the smell where I'll go<font color="#CCCCCC"> over</font>

34
00:01:26,970 --> 00:01:31,408
<font color="#CCCCCC">that in</font><font color="#E5E5E5"> a more detail in a minute</font>

35
00:01:28,470 --> 00:01:33,240
if you're not<font color="#E5E5E5"> sure what that is</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font>

36
00:01:31,409 --> 00:01:37,979
time<font color="#CCCCCC"> to see malware which is only</font>

37
00:01:33,240 --> 00:01:41,548
existing in memory and this this<font color="#CCCCCC"> is a</font>

38
00:01:37,979 --> 00:01:45,149
graph<font color="#E5E5E5"> from a report by carbon black in</font>

39
00:01:41,549 --> 00:01:46,170
<font color="#CCCCCC">22nd</font><font color="#E5E5E5"> of 2016 now I'm a great</font><font color="#CCCCCC"> believer</font>

40
00:01:45,149 --> 00:01:47,670
<font color="#E5E5E5">when you can prove</font><font color="#CCCCCC"> anything with</font>

41
00:01:46,170 --> 00:01:50,880
statistics but I think it's useful<font color="#CCCCCC"> craft</font>

42
00:01:47,670 --> 00:01:53,880
anyway looking at percentage by month<font color="#E5E5E5"> of</font>

43
00:01:50,880 --> 00:01:56,908
<font color="#E5E5E5">none malware PowerShell and</font><font color="#CCCCCC"> WMI or</font>

44
00:01:53,880 --> 00:02:00,449
<font color="#E5E5E5">Windows Media and memory instrumentation</font>

45
00:01:56,909 --> 00:02:02,250
management instrumentation attacks that

46
00:02:00,450 --> 00:02:04,170
they that<font color="#E5E5E5"> their customers experience in</font>

47
00:02:02,250 --> 00:02:05,939
<font color="#CCCCCC">twenty twenty sixteen and you see at the</font>

48
00:02:04,170 --> 00:02:07,439
<font color="#E5E5E5">start of the year from around about</font>

49
00:02:05,939 --> 00:02:09,119
<font color="#CCCCCC">three</font><font color="#E5E5E5"> percent it jumped to twelve</font>

50
00:02:07,439 --> 00:02:13,069
<font color="#E5E5E5">percent almost immediately and it's been</font>

51
00:02:09,119 --> 00:02:13,069
<font color="#E5E5E5">sort of trending upwards since</font>

52
00:02:14,860 --> 00:02:19,730
so yeah this benefits<font color="#E5E5E5"> your file this</font>

53
00:02:18,440 --> 00:02:21,590
<font color="#CCCCCC">malware but</font><font color="#E5E5E5"> it also does</font><font color="#CCCCCC"> have</font>

54
00:02:19,730 --> 00:02:25,190
applications in<font color="#E5E5E5"> your normal anti-malware</font>

55
00:02:21,590 --> 00:02:27,650
procedures you can use it to bypass<font color="#CCCCCC"> a</font>

56
00:02:25,190 --> 00:02:29,329
<font color="#E5E5E5">code obfuscation code encryption if</font>

57
00:02:27,650 --> 00:02:30,770
<font color="#E5E5E5">you're pale if</font><font color="#CCCCCC"> you're malware payloads</font>

58
00:02:29,330 --> 00:02:32,120
encrypted it's only encrypted when it's

59
00:02:30,770 --> 00:02:34,190
on the<font color="#E5E5E5"> disk it's not encrypted when it's</font>

60
00:02:32,120 --> 00:02:35,750
being<font color="#CCCCCC"> run</font><font color="#E5E5E5"> because that doesn't</font><font color="#CCCCCC"> work so</font>

61
00:02:34,190 --> 00:02:37,370
<font color="#CCCCCC">you can still you can pull and</font><font color="#E5E5E5"> I have</font>

62
00:02:35,750 --> 00:02:39,710
used<font color="#E5E5E5"> that once or twice of just</font><font color="#CCCCCC"> running</font>

63
00:02:37,370 --> 00:02:41,750
things then using recall to pull the

64
00:02:39,710 --> 00:02:44,390
running malware and suddenly<font color="#E5E5E5"> it's</font>

65
00:02:41,750 --> 00:02:46,160
reverse engineering<font color="#CCCCCC"> at all</font>

66
00:02:44,390 --> 00:02:48,739
you also don't have<font color="#E5E5E5"> much reliance on the</font>

67
00:02:46,160 --> 00:02:51,530
OS you're not using API calls to<font color="#CCCCCC"> get</font>

68
00:02:48,740 --> 00:02:53,150
fetch your stuff<font color="#E5E5E5"> from the registry</font>

69
00:02:51,530 --> 00:02:56,240
you're not using API calls<font color="#E5E5E5"> to fetch</font>

70
00:02:53,150 --> 00:02:58,180
<font color="#E5E5E5">files so you're not</font><font color="#CCCCCC"> relying</font><font color="#E5E5E5"> on anything</font>

71
00:02:56,240 --> 00:03:03,110
<font color="#E5E5E5">that could be subverted by rootkit</font>

72
00:02:58,180 --> 00:03:06,710
<font color="#E5E5E5">hooking API calls and so on so what is</font>

73
00:03:03,110 --> 00:03:08,120
file this malware<font color="#E5E5E5"> it's basically malware</font>

74
00:03:06,710 --> 00:03:09,890
which doesn't<font color="#E5E5E5"> exist on disk it's</font>

75
00:03:08,120 --> 00:03:12,520
something where it<font color="#E5E5E5"> doesn't draw any</font>

76
00:03:09,890 --> 00:03:16,488
files to the backing hard drive at all

77
00:03:12,520 --> 00:03:19,010
<font color="#CCCCCC">in theory they're the term</font><font color="#E5E5E5"> I think it's</font>

78
00:03:16,489 --> 00:03:20,150
a little bit misused at times to<font color="#CCCCCC"> refers</font>

79
00:03:19,010 --> 00:03:23,450
<font color="#CCCCCC">to</font><font color="#E5E5E5"> things which really just</font><font color="#CCCCCC"> do a very</font>

80
00:03:20,150 --> 00:03:25,700
<font color="#CCCCCC">good job</font><font color="#E5E5E5"> of hiding themselves</font><font color="#CCCCCC"> but it's</font>

81
00:03:23,450 --> 00:03:27,260
also called memory only malware or for

82
00:03:25,700 --> 00:03:31,250
some reason<font color="#CCCCCC"> I have no idea why that they</font>

83
00:03:27,260 --> 00:03:33,620
came<font color="#E5E5E5"> up this one none malware it mostly</font>

84
00:03:31,250 --> 00:03:35,420
refers to registry based<font color="#E5E5E5"> where their</font>

85
00:03:33,620 --> 00:03:38,870
persistence mechanism uses the registry

86
00:03:35,420 --> 00:03:42,339
rather than files because of that it

87
00:03:38,870 --> 00:03:44,989
relies on<font color="#CCCCCC"> Windows functions like the</font>

88
00:03:42,340 --> 00:03:47,950
management instrumentation<font color="#E5E5E5"> and Windows</font>

89
00:03:44,989 --> 00:03:51,410
PowerShell<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually run any commands</font>

90
00:03:47,950 --> 00:03:55,399
there's a huge<font color="#E5E5E5"> amount of power in those</font>

91
00:03:51,410 --> 00:03:58,370
as you'll see shortly<font color="#CCCCCC"> so let's have a</font>

92
00:03:55,400 --> 00:04:03,620
look<font color="#CCCCCC"> at a couple of</font><font color="#E5E5E5"> examples of virus</font>

93
00:03:58,370 --> 00:04:05,720
malware power lips<font color="#E5E5E5"> was one of the sort</font>

94
00:04:03,620 --> 00:04:07,190
<font color="#CCCCCC">of for learners of it</font><font color="#E5E5E5"> and probably not</font>

95
00:04:05,720 --> 00:04:10,609
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the first that actually</font>

96
00:04:07,190 --> 00:04:13,700
was like widely successful<font color="#E5E5E5"> it was a</font>

97
00:04:10,610 --> 00:04:15,830
<font color="#E5E5E5">follow up</font><font color="#CCCCCC"> to a piece of</font><font color="#E5E5E5"> malware that</font><font color="#CCCCCC"> had</font>

98
00:04:13,700 --> 00:04:17,390
been around for<font color="#CCCCCC"> a while</font><font color="#E5E5E5"> but it went</font><font color="#CCCCCC"> file</font>

99
00:04:15,830 --> 00:04:19,760
<font color="#CCCCCC">this in 2014</font>

100
00:04:17,390 --> 00:04:22,310
switching<font color="#E5E5E5"> from using it's your standard</font>

101
00:04:19,760 --> 00:04:24,169
rootkit dropping files on the disk and

102
00:04:22,310 --> 00:04:25,250
<font color="#E5E5E5">then hooking calls to hide them and stop</font>

103
00:04:24,169 --> 00:04:27,229
the OS or

104
00:04:25,250 --> 00:04:30,650
the user discovering them to<font color="#E5E5E5"> actually</font>

105
00:04:27,230 --> 00:04:33,230
just being a registry<font color="#CCCCCC"> base</font><font color="#E5E5E5"> to that it</font>

106
00:04:30,650 --> 00:04:36,950
has a persistence mechanism which relies

107
00:04:33,230 --> 00:04:39,860
on a second process it injects into<font color="#E5E5E5"> an</font>

108
00:04:36,950 --> 00:04:42,890
existing<font color="#E5E5E5"> process</font><font color="#CCCCCC"> it entire thread it</font>

109
00:04:39,860 --> 00:04:45,320
injects<font color="#E5E5E5"> introducing process which</font><font color="#CCCCCC"> it</font>

110
00:04:42,890 --> 00:04:47,270
<font color="#CCCCCC">calls the watchdog's thread and that</font>

111
00:04:45,320 --> 00:04:49,520
basically<font color="#CCCCCC"> just loops constantly</font><font color="#E5E5E5"> making</font>

112
00:04:47,270 --> 00:04:52,250
<font color="#CCCCCC">sure that it's registry keys</font><font color="#E5E5E5"> exist</font>

113
00:04:49,520 --> 00:04:54,740
haven't been altered<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it also messes</font>

114
00:04:52,250 --> 00:04:56,690
<font color="#CCCCCC">around with</font><font color="#E5E5E5"> the access permissions in</font>

115
00:04:54,740 --> 00:04:59,419
the registry<font color="#CCCCCC"> so that a normal user can</font>

116
00:04:56,690 --> 00:05:04,010
even see those keys<font color="#CCCCCC"> are there</font><font color="#E5E5E5"> or read</font>

117
00:04:59,419 --> 00:05:06,380
them and<font color="#E5E5E5"> it also uses special characters</font>

118
00:05:04,010 --> 00:05:07,730
in<font color="#CCCCCC"> the register key</font><font color="#E5E5E5"> seems stupid but it</font>

119
00:05:06,380 --> 00:05:09,469
<font color="#E5E5E5">uses special characters in the registry</font>

120
00:05:07,730 --> 00:05:11,540
key<font color="#CCCCCC"> which actually stops it being</font>

121
00:05:09,470 --> 00:05:13,550
detected<font color="#E5E5E5"> by an awful lot of automated</font>

122
00:05:11,540 --> 00:05:14,240
<font color="#E5E5E5">tools and so</font><font color="#CCCCCC"> on that</font><font color="#E5E5E5"> you might use in</font>

123
00:05:13,550 --> 00:05:16,610
analysis

124
00:05:14,240 --> 00:05:20,510
they just don't detect<font color="#E5E5E5"> the names of them</font>

125
00:05:16,610 --> 00:05:24,140
<font color="#E5E5E5">it</font><font color="#CCCCCC"> uses a program</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> runs 30 to run</font>

126
00:05:20,510 --> 00:05:26,810
<font color="#E5E5E5">dll 32</font><font color="#CCCCCC"> DXE which is just a</font><font color="#E5E5E5"> Windows API</font>

127
00:05:24,140 --> 00:05:29,450
or Windows program to run and load

128
00:05:26,810 --> 00:05:33,770
modules so<font color="#E5E5E5"> you can run that to load your</font>

129
00:05:29,450 --> 00:05:36,020
<font color="#E5E5E5">own dll's and so on I don't</font><font color="#CCCCCC"> know how</font>

130
00:05:33,770 --> 00:05:38,900
<font color="#E5E5E5">clear that is at the back but</font><font color="#CCCCCC"> that is</font>

131
00:05:36,020 --> 00:05:42,650
taken from a report on the malware<font color="#E5E5E5"> by I</font>

132
00:05:38,900 --> 00:05:46,489
<font color="#E5E5E5">think so fast this one was and you can</font>

133
00:05:42,650 --> 00:05:49,760
see it's got two registry<font color="#E5E5E5"> keys</font><font color="#CCCCCC"> colored</font>

134
00:05:46,490 --> 00:05:53,750
the first one is the main command<font color="#E5E5E5"> which</font>

135
00:05:49,760 --> 00:05:56,750
runs<font color="#CCCCCC"> JavaScript code javis that's a</font>

136
00:05:53,750 --> 00:05:58,160
surprisingly common<font color="#E5E5E5"> theme by the way you</font>

137
00:05:56,750 --> 00:06:02,000
might not<font color="#E5E5E5"> expect</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> to be used</font>

138
00:05:58,160 --> 00:06:03,470
in<font color="#CCCCCC"> both</font><font color="#E5E5E5"> malware running in you in your</font>

139
00:06:02,000 --> 00:06:05,810
registry but that is<font color="#E5E5E5"> actually</font>

140
00:06:03,470 --> 00:06:08,960
surprisingly common to see<font color="#E5E5E5"> ones</font><font color="#CCCCCC"> ones</font><font color="#E5E5E5"> DLL</font>

141
00:06:05,810 --> 00:06:11,000
32 using<font color="#CCCCCC"> JavaScript code it runs</font>

142
00:06:08,960 --> 00:06:14,780
something<font color="#E5E5E5"> which will get that second key</font>

143
00:06:11,000 --> 00:06:19,970
the a key<font color="#E5E5E5"> which is a encrypted or</font>

144
00:06:14,780 --> 00:06:21,559
encoded<font color="#CCCCCC"> PowerShell payload which can</font>

145
00:06:19,970 --> 00:06:24,680
<font color="#E5E5E5">then which contains that watchdog</font>

146
00:06:21,560 --> 00:06:26,630
process to<font color="#E5E5E5"> protect its registry keys and</font>

147
00:06:24,680 --> 00:06:31,010
<font color="#E5E5E5">make sure it can persist beyond computer</font>

148
00:06:26,630 --> 00:06:34,130
restarts phase or phase<font color="#CCCCCC"> BOTS is another</font>

149
00:06:31,010 --> 00:06:36,650
example<font color="#CCCCCC"> again it was a sort of mutation</font>

150
00:06:34,130 --> 00:06:37,420
<font color="#E5E5E5">of an old piece of soft on all virus</font>

151
00:06:36,650 --> 00:06:39,750
calls<font color="#CCCCCC"> so</font>

152
00:06:37,420 --> 00:06:43,110
<font color="#CCCCCC">revolt which was</font><font color="#E5E5E5"> that old rootkit again</font>

153
00:06:39,750 --> 00:06:46,150
<font color="#CCCCCC">that solar bot was a fairly widespread</font>

154
00:06:43,110 --> 00:06:49,270
piece of malware back in 2012-13 I

155
00:06:46,150 --> 00:06:51,849
believe this one was<font color="#E5E5E5"> slightly different</font>

156
00:06:49,270 --> 00:06:54,669
<font color="#CCCCCC">in that it didn't been it</font><font color="#E5E5E5"> capabilities</font>

157
00:06:51,850 --> 00:06:59,950
<font color="#E5E5E5">when it switched it added fireless so it</font>

158
00:06:54,670 --> 00:07:02,380
would at one time<font color="#CCCCCC"> I think I at one time</font>

159
00:06:59,950 --> 00:07:05,820
<font color="#E5E5E5">it would look at whether</font><font color="#CCCCCC"> or not</font><font color="#E5E5E5"> power</font>

160
00:07:02,380 --> 00:07:05,820
<font color="#E5E5E5">shells installed and whether or not</font>

161
00:07:06,420 --> 00:07:12,280
dotnet<font color="#CCCCCC"> 3.5 I'm running on the host</font>

162
00:07:09,490 --> 00:07:14,230
machine<font color="#CCCCCC"> if they are</font><font color="#E5E5E5"> then it'll go file</font>

163
00:07:12,280 --> 00:07:16,479
<font color="#E5E5E5">this</font><font color="#CCCCCC"> to drop registry keys and use</font>

164
00:07:14,230 --> 00:07:18,160
PowerShell to carry out its functions<font color="#E5E5E5"> if</font>

165
00:07:16,480 --> 00:07:19,420
they're not<font color="#E5E5E5"> available</font><font color="#CCCCCC"> then it just</font>

166
00:07:18,160 --> 00:07:21,820
switches<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to its old rootkit</font>

167
00:07:19,420 --> 00:07:23,650
functionality and<font color="#E5E5E5"> install drops its</font>

168
00:07:21,820 --> 00:07:26,830
files<font color="#E5E5E5"> onto the disk and installs hooks</font>

169
00:07:23,650 --> 00:07:28,810
to hide them again as I say it is

170
00:07:26,830 --> 00:07:31,570
heavily reliant in PowerShell<font color="#CCCCCC"> and this</font>

171
00:07:28,810 --> 00:07:34,360
one included a module loader<font color="#E5E5E5"> so the</font>

172
00:07:31,570 --> 00:07:37,659
malware<font color="#E5E5E5"> author could customize the</font>

173
00:07:34,360 --> 00:07:40,090
malware<font color="#CCCCCC"> in 6u again just like the last</font>

174
00:07:37,660 --> 00:07:42,340
<font color="#E5E5E5">one the registry key these are the</font>

175
00:07:40,090 --> 00:07:47,700
registry keys for<font color="#E5E5E5"> it this one uses three</font>

176
00:07:42,340 --> 00:07:52,510
the are<font color="#E5E5E5"> seeing code of 34 are your</font>

177
00:07:47,700 --> 00:07:55,630
payloads<font color="#E5E5E5"> just encoded for 32 and 64-bit</font>

178
00:07:52,510 --> 00:07:57,130
machines<font color="#E5E5E5"> and then there's a JavaScript</font>

179
00:07:55,630 --> 00:07:59,590
key<font color="#CCCCCC"> which actually has</font><font color="#E5E5E5"> the PowerShell</font>

180
00:07:57,130 --> 00:08:03,370
script to decrypt<font color="#E5E5E5"> and execute the</font>

181
00:07:59,590 --> 00:08:05,200
payloads<font color="#E5E5E5"> this also had encrypted command</font>

182
00:08:03,370 --> 00:08:07,390
and control<font color="#E5E5E5"> as part just in that one</font>

183
00:08:05,200 --> 00:08:09,039
<font color="#CCCCCC">note</font><font color="#E5E5E5"> the commands included there it was</font>

184
00:08:07,390 --> 00:08:14,260
able<font color="#E5E5E5"> to carry out encrypted command and</font>

185
00:08:09,040 --> 00:08:15,610
control and<font color="#E5E5E5"> customized modules the</font><font color="#CCCCCC"> DNC</font>

186
00:08:14,260 --> 00:08:16,630
hack I couldn't really go<font color="#CCCCCC"> pass without</font>

187
00:08:15,610 --> 00:08:19,030
mentioning something about<font color="#E5E5E5"> this without</font>

188
00:08:16,630 --> 00:08:22,500
<font color="#E5E5E5">getting</font><font color="#CCCCCC"> into the politics</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the mess</font>

189
00:08:19,030 --> 00:08:26,169
around this there are<font color="#E5E5E5"> supposedly two</font>

190
00:08:22,500 --> 00:08:31,840
actors acting<font color="#E5E5E5"> completely independently</font>

191
00:08:26,170 --> 00:08:33,640
<font color="#E5E5E5">cozy bare and fancy bare cozy bear seems</font>

192
00:08:31,840 --> 00:08:36,339
to<font color="#E5E5E5"> have used a PowerShell backdoor</font>

193
00:08:33,640 --> 00:08:38,140
<font color="#E5E5E5">gaining persistence through the the</font>

194
00:08:36,340 --> 00:08:39,880
<font color="#E5E5E5">management instrumentation again which</font>

195
00:08:38,140 --> 00:08:42,580
are<font color="#E5E5E5"> just a series of tools</font><font color="#CCCCCC"> windows</font>

196
00:08:39,880 --> 00:08:45,820
exposes to<font color="#E5E5E5"> allow scripting of management</font>

197
00:08:42,580 --> 00:08:47,290
tasks basically<font color="#E5E5E5"> there's the actual</font>

198
00:08:45,820 --> 00:08:48,470
<font color="#E5E5E5">PowerShell command the CrowdStrike</font>

199
00:08:47,290 --> 00:08:51,560
pulled out

200
00:08:48,470 --> 00:08:53,570
<font color="#E5E5E5">for</font><font color="#CCCCCC"> cozy</font><font color="#E5E5E5"> bear and again I've shortened</font>

201
00:08:51,560 --> 00:08:56,390
the encoded command that goes on for

202
00:08:53,570 --> 00:08:59,060
<font color="#CCCCCC">several hundred lines</font><font color="#E5E5E5"> it's a huge huge</font>

203
00:08:56,390 --> 00:09:01,189
command but the depth<font color="#E5E5E5"> for one line</font>

204
00:08:59,060 --> 00:09:05,780
command that the depth of control that

205
00:09:01,190 --> 00:09:07,970
that gave us is quite impressive<font color="#CCCCCC"> fancy</font>

206
00:09:05,780 --> 00:09:09,800
bear again<font color="#E5E5E5"> slightly different tactic but</font>

207
00:09:07,970 --> 00:09:11,840
the same kind<font color="#CCCCCC"> of thing</font><font color="#E5E5E5"> you see again one</font>

208
00:09:09,800 --> 00:09:16,310
<font color="#CCCCCC">dll's thirty two appearing here loading</font>

209
00:09:11,840 --> 00:09:18,680
his own custom<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> so what can</font><font color="#CCCCCC"> we look</font>

210
00:09:16,310 --> 00:09:20,959
based on that what can we look for in

211
00:09:18,680 --> 00:09:24,650
memory<font color="#E5E5E5"> that might actually be</font><font color="#CCCCCC"> valid to</font>

212
00:09:20,960 --> 00:09:29,150
<font color="#CCCCCC">us</font><font color="#E5E5E5"> first of all you've got the registry</font>

213
00:09:24,650 --> 00:09:32,870
keys obviously you've got permissions<font color="#CCCCCC"> as</font>

214
00:09:29,150 --> 00:09:34,970
I mentioned with<font color="#CCCCCC"> the power licks</font><font color="#E5E5E5"> it</font>

215
00:09:32,870 --> 00:09:36,140
messes up with messes with the registry

216
00:09:34,970 --> 00:09:38,600
permissions to try and make them harder

217
00:09:36,140 --> 00:09:40,939
to<font color="#E5E5E5"> find so if you start if you can find</font>

218
00:09:38,600 --> 00:09:42,740
keys that<font color="#E5E5E5"> have weird</font><font color="#CCCCCC"> permission tokens</font>

219
00:09:40,940 --> 00:09:46,040
on them<font color="#E5E5E5"> with security tokens then you</font>

220
00:09:42,740 --> 00:09:49,520
can start you've got<font color="#CCCCCC"> to start for</font>

221
00:09:46,040 --> 00:09:51,530
something suspicious threads if we're

222
00:09:49,520 --> 00:09:54,439
<font color="#CCCCCC">looking at system processes and they've</font>

223
00:09:51,530 --> 00:09:57,110
got threads that shouldn't be there<font color="#E5E5E5"> or</font>

224
00:09:54,440 --> 00:10:00,160
threads which<font color="#CCCCCC"> are sort</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> hidden</font><font color="#E5E5E5"> from</font>

225
00:09:57,110 --> 00:10:02,510
your<font color="#CCCCCC"> end-users then again you've got</font>

226
00:10:00,160 --> 00:10:05,600
<font color="#E5E5E5">something suspicious to start picking</font>

227
00:10:02,510 --> 00:10:07,790
<font color="#E5E5E5">out you can extend those a little</font><font color="#CCCCCC"> bit</font>

228
00:10:05,600 --> 00:10:09,740
<font color="#CCCCCC">and this is</font><font color="#E5E5E5"> just what I can come</font><font color="#CCCCCC"> up with</font>

229
00:10:07,790 --> 00:10:12,490
<font color="#CCCCCC">but</font><font color="#E5E5E5"> might</font><font color="#CCCCCC"> be missing a few things but</font>

230
00:10:09,740 --> 00:10:14,810
you can also extend these to include

231
00:10:12,490 --> 00:10:16,310
<font color="#E5E5E5">JavaScript and you</font><font color="#CCCCCC"> shouldn't this</font>

232
00:10:14,810 --> 00:10:17,780
shouldn't<font color="#CCCCCC"> be many cases that I can think</font>

233
00:10:16,310 --> 00:10:20,479
of where you have<font color="#CCCCCC"> JavaScript in the</font>

234
00:10:17,780 --> 00:10:22,850
<font color="#E5E5E5">PowerShell command legitimately maybe a</font>

235
00:10:20,480 --> 00:10:24,230
stand to be corrected<font color="#E5E5E5"> on that one you</font>

236
00:10:22,850 --> 00:10:27,170
can look for commonly exposed<font color="#E5E5E5"> to be</font>

237
00:10:24,230 --> 00:10:28,880
<font color="#CCCCCC">exceeds</font><font color="#E5E5E5"> you're going to hit a lot</font><font color="#CCCCCC"> of</font>

238
00:10:27,170 --> 00:10:31,520
<font color="#E5E5E5">false</font><font color="#CCCCCC"> positives</font><font color="#E5E5E5"> of that because they're</font>

239
00:10:28,880 --> 00:10:33,220
there for<font color="#CCCCCC"> a purpose and</font><font color="#E5E5E5"> they're used but</font>

240
00:10:31,520 --> 00:10:35,840
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> maybe be a start</font>

241
00:10:33,220 --> 00:10:38,060
you<font color="#E5E5E5"> can look for oddities and legitimate</font>

242
00:10:35,840 --> 00:10:44,390
processes so you've got<font color="#E5E5E5"> known strings</font>

243
00:10:38,060 --> 00:10:49,160
you've draw permissions parents<font color="#CCCCCC"> I thread</font>

244
00:10:44,390 --> 00:10:51,050
as parent<font color="#E5E5E5"> processors and so on again</font>

245
00:10:49,160 --> 00:10:54,160
it's the<font color="#CCCCCC"> same kind</font><font color="#E5E5E5"> of thing as you</font><font color="#CCCCCC"> would</font>

246
00:10:51,050 --> 00:10:57,560
<font color="#E5E5E5">look at in normal malware analysis but</font>

247
00:10:54,160 --> 00:10:59,030
you've got a<font color="#E5E5E5"> higher level of access</font><font color="#CCCCCC"> than</font>

248
00:10:57,560 --> 00:11:01,180
<font color="#E5E5E5">you do if you're relying on the Windows</font>

249
00:10:59,030 --> 00:11:03,280
operating system

250
00:11:01,180 --> 00:11:04,719
<font color="#E5E5E5">keywords as well to bring weird of</font>

251
00:11:03,280 --> 00:11:07,170
searching through memory you can search

252
00:11:04,720 --> 00:11:10,690
for<font color="#E5E5E5"> anything you like</font>

253
00:11:07,170 --> 00:11:16,209
so just move on to looking at<font color="#CCCCCC"> Windows</font>

254
00:11:10,690 --> 00:11:19,690
memory<font color="#E5E5E5"> in general so I'm going</font><font color="#CCCCCC"> to be</font>

255
00:11:16,210 --> 00:11:21,820
looking<font color="#CCCCCC"> at in this mainly Windows memory</font>

256
00:11:19,690 --> 00:11:24,430
<font color="#CCCCCC">cell for the operating system rather</font>

257
00:11:21,820 --> 00:11:27,250
than<font color="#E5E5E5"> user land so when you're looking at</font>

258
00:11:24,430 --> 00:11:31,180
memory<font color="#E5E5E5"> access you</font><font color="#CCCCCC"> have the ring</font><font color="#E5E5E5"> system</font>

259
00:11:27,250 --> 00:11:32,830
ring<font color="#CCCCCC"> wandering 3 ring 0 doing 3 think</font>

260
00:11:31,180 --> 00:11:34,510
I've got<font color="#CCCCCC"> the slider around</font><font color="#E5E5E5"> ring 0 is the</font>

261
00:11:32,830 --> 00:11:36,340
most privileged doing<font color="#E5E5E5"> 3 is the</font><font color="#CCCCCC"> least</font>

262
00:11:34,510 --> 00:11:40,960
although<font color="#CCCCCC"> a stand to be I</font><font color="#E5E5E5"> think I might</font>

263
00:11:36,340 --> 00:11:43,840
be<font color="#CCCCCC"> wrong in though at rings</font><font color="#E5E5E5"> 0 you have</font>

264
00:11:40,960 --> 00:11:48,100
kernel<font color="#CCCCCC"> level access your you can access</font>

265
00:11:43,840 --> 00:11:49,690
the kernel memory pools<font color="#E5E5E5"> and at ring 3</font>

266
00:11:48,100 --> 00:11:52,750
you can<font color="#E5E5E5"> access to user level but you</font>

267
00:11:49,690 --> 00:11:55,420
cannot<font color="#E5E5E5"> modify or read stuff that is</font>

268
00:11:52,750 --> 00:11:57,340
within that ring 0 kernel pool so what

269
00:11:55,420 --> 00:11:59,620
I'm looking<font color="#CCCCCC"> at here is the kernel</font><font color="#E5E5E5"> I'm</font>

270
00:11:57,340 --> 00:12:02,320
<font color="#E5E5E5">interested in what is</font><font color="#CCCCCC"> Windows storing</font>

271
00:11:59,620 --> 00:12:06,460
not what is the<font color="#E5E5E5"> user storing because</font>

272
00:12:02,320 --> 00:12:08,020
this is slightly<font color="#CCCCCC"> more usable there's</font>

273
00:12:06,460 --> 00:12:10,750
slightly<font color="#E5E5E5"> less obstructions</font><font color="#CCCCCC"> to getting</font>

274
00:12:08,020 --> 00:12:13,390
information<font color="#CCCCCC"> from this so when you first</font>

275
00:12:10,750 --> 00:12:14,860
<font color="#E5E5E5">start</font><font color="#CCCCCC"> up windows</font><font color="#E5E5E5"> you are</font><font color="#CCCCCC"> the memory</font>

276
00:12:13,390 --> 00:12:17,470
manager allocates<font color="#CCCCCC"> to</font><font color="#E5E5E5"> pools</font>

277
00:12:14,860 --> 00:12:19,660
simplifies things a little<font color="#E5E5E5"> bit nan page</font>

278
00:12:17,470 --> 00:12:21,400
<font color="#CCCCCC">and paged the non-paid</font><font color="#E5E5E5"> they're fairly</font>

279
00:12:19,660 --> 00:12:23,980
<font color="#E5E5E5">self-explanatory the</font><font color="#CCCCCC"> nan paged pool will</font>

280
00:12:21,400 --> 00:12:26,770
always be in memory<font color="#CCCCCC"> it's never switch</font>

281
00:12:23,980 --> 00:12:30,040
never moved out it's used for<font color="#E5E5E5"> critical</font>

282
00:12:26,770 --> 00:12:30,640
things like drivers and some aspects<font color="#E5E5E5"> of</font>

283
00:12:30,040 --> 00:12:34,180
<font color="#E5E5E5">the kernel</font>

284
00:12:30,640 --> 00:12:37,449
the paged pool again<font color="#E5E5E5"> works in by default</font>

285
00:12:34,180 --> 00:12:38,979
<font color="#CCCCCC">4 kilobyte page</font><font color="#E5E5E5"> memory pages and they</font>

286
00:12:37,450 --> 00:12:41,350
can be switched out to the backing<font color="#E5E5E5"> disk</font>

287
00:12:38,980 --> 00:12:43,030
<font color="#E5E5E5">as memory demands so if they're not used</font>

288
00:12:41,350 --> 00:12:43,390
<font color="#CCCCCC">for a while and memory starts running</font>

289
00:12:43,030 --> 00:12:46,209
out

290
00:12:43,390 --> 00:12:48,460
then<font color="#E5E5E5"> it was page sections of this out to</font>

291
00:12:46,210 --> 00:12:49,870
the<font color="#CCCCCC"> backing storage they technically</font>

292
00:12:48,460 --> 00:12:54,690
<font color="#CCCCCC">counters</font><font color="#E5E5E5"> to a memory they can</font><font color="#CCCCCC"> be pulled</font>

293
00:12:49,870 --> 00:12:54,690
<font color="#E5E5E5">back but they're not available on Van I</font>

294
00:12:56,070 --> 00:13:02,950
<font color="#E5E5E5">add to</font><font color="#CCCCCC"> it to improvement for</font><font color="#E5E5E5"> performance</font>

295
00:12:59,980 --> 00:13:05,850
purposes<font color="#E5E5E5"> single processor systems</font>

296
00:13:02,950 --> 00:13:08,140
generally<font color="#E5E5E5"> have three page spools and</font>

297
00:13:05,850 --> 00:13:10,450
<font color="#E5E5E5">multi processors pretty much everything</font>

298
00:13:08,140 --> 00:13:12,080
we have now<font color="#E5E5E5"> will have</font><font color="#CCCCCC"> five that's</font>

299
00:13:10,450 --> 00:13:14,000
according to<font color="#CCCCCC"> MSDN</font>

300
00:13:12,080 --> 00:13:19,750
as far as<font color="#E5E5E5"> I know that's relevant to</font>

301
00:13:14,000 --> 00:13:23,170
<font color="#E5E5E5">Windows</font><font color="#CCCCCC"> 10 so executive objects are</font>

302
00:13:19,750 --> 00:13:29,840
basically object but in kernel memory

303
00:13:23,170 --> 00:13:32,390
<font color="#E5E5E5">they're objects</font><font color="#CCCCCC"> like int</font><font color="#E5E5E5"> file handles</font>

304
00:13:29,840 --> 00:13:37,580
<font color="#E5E5E5">pretty much anything</font><font color="#CCCCCC"> that you'd normally</font>

305
00:13:32,390 --> 00:13:39,949
have<font color="#E5E5E5"> in a program but they are managed</font>

306
00:13:37,580 --> 00:13:42,290
by<font color="#CCCCCC"> the windows memory manager</font><font color="#E5E5E5"> so they're</font>

307
00:13:39,950 --> 00:13:44,390
all the windows object manager sorry<font color="#E5E5E5"> so</font>

308
00:13:42,290 --> 00:13:48,890
they are given special<font color="#E5E5E5"> headers within</font>

309
00:13:44,390 --> 00:13:51,500
the kernel pools<font color="#CCCCCC"> to allow Windows to</font>

310
00:13:48,890 --> 00:13:52,490
<font color="#E5E5E5">manage to</font><font color="#CCCCCC"> handle them more easily so</font>

311
00:13:51,500 --> 00:13:53,870
they have extra headers that<font color="#E5E5E5"> you</font>

312
00:13:52,490 --> 00:13:55,640
normally<font color="#CCCCCC"> have which makes</font><font color="#E5E5E5"> them useful</font>

313
00:13:53,870 --> 00:13:58,910
<font color="#CCCCCC">I've listed a few</font><font color="#E5E5E5"> types that you might</font>

314
00:13:55,640 --> 00:14:01,939
<font color="#E5E5E5">find there which are useful they're</font>

315
00:13:58,910 --> 00:14:05,600
fairly self-explanatory token is your s

316
00:14:01,940 --> 00:14:08,920
ID or security ID token<font color="#E5E5E5"> key is registry</font>

317
00:14:05,600 --> 00:14:11,960
keys that<font color="#E5E5E5"> are open in memory</font><font color="#CCCCCC"> Mutants</font>

318
00:14:08,920 --> 00:14:15,380
<font color="#CCCCCC">need to let you select mutual exclusions</font>

319
00:14:11,960 --> 00:14:16,670
<font color="#CCCCCC">or mutexes I think the other ones are</font>

320
00:14:15,380 --> 00:14:18,560
fairly<font color="#E5E5E5"> self-explanatory</font>

321
00:14:16,670 --> 00:14:20,839
the thing about executive objects is

322
00:14:18,560 --> 00:14:22,819
they always<font color="#E5E5E5"> have an object</font><font color="#CCCCCC"> header I</font>

323
00:14:20,840 --> 00:14:25,490
actually miss one out here they<font color="#E5E5E5"> always</font>

324
00:14:22,820 --> 00:14:27,320
have a pool header<font color="#CCCCCC"> an object header and</font>

325
00:14:25,490 --> 00:14:29,240
then optional headers depending<font color="#CCCCCC"> off</font><font color="#E5E5E5"> the</font>

326
00:14:27,320 --> 00:14:32,780
kind<font color="#E5E5E5"> of object they</font><font color="#CCCCCC"> are so you've got a</font>

327
00:14:29,240 --> 00:14:35,870
nice set structure<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> can be</font>

328
00:14:32,780 --> 00:14:37,069
<font color="#E5E5E5">looking for to try</font><font color="#CCCCCC"> and pull file</font><font color="#E5E5E5"> I'll go</font>

329
00:14:35,870 --> 00:14:43,280
into<font color="#E5E5E5"> bit more detail on those in a</font>

330
00:14:37,070 --> 00:14:46,910
minute when<font color="#E5E5E5"> you or when a driver say</font>

331
00:14:43,280 --> 00:14:51,020
tries to allocate memory<font color="#E5E5E5"> in the kernel</font>

332
00:14:46,910 --> 00:14:55,610
pools<font color="#E5E5E5"> it's hot or doesn't have to but it</font>

333
00:14:51,020 --> 00:14:57,949
should assign a pool tag<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are just</font>

334
00:14:55,610 --> 00:15:00,770
<font color="#CCCCCC">four byte values</font><font color="#E5E5E5"> which go into part of</font>

335
00:14:57,950 --> 00:15:04,520
<font color="#E5E5E5">the pool header very first thing you</font>

336
00:15:00,770 --> 00:15:07,819
<font color="#E5E5E5">find on any object they</font><font color="#CCCCCC"> are meant to</font>

337
00:15:04,520 --> 00:15:11,449
define the caller<font color="#E5E5E5"> so they're a debugging</font>

338
00:15:07,820 --> 00:15:13,550
tool to<font color="#CCCCCC"> enable you to trace</font><font color="#E5E5E5"> any issue</font>

339
00:15:11,450 --> 00:15:14,870
back<font color="#CCCCCC"> to the calling process</font><font color="#E5E5E5"> so if you're</font>

340
00:15:13,550 --> 00:15:16,699
<font color="#CCCCCC">getting memory a memory leak for</font>

341
00:15:14,870 --> 00:15:19,100
instance the idea<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that you can find</font>

342
00:15:16,700 --> 00:15:20,900
<font color="#E5E5E5">what</font><font color="#CCCCCC"> is causing it</font><font color="#E5E5E5"> and trace the</font>

343
00:15:19,100 --> 00:15:22,400
allocation that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the problem and trace</font>

344
00:15:20,900 --> 00:15:24,420
<font color="#E5E5E5">it back to the calling process and try</font>

345
00:15:22,400 --> 00:15:28,649
and use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> for debugging</font><font color="#CCCCCC"> purposes</font>

346
00:15:24,420 --> 00:15:30,149
<font color="#E5E5E5">as such they're not critical</font><font color="#CCCCCC"> they can be</font>

347
00:15:28,649 --> 00:15:32,760
altered<font color="#CCCCCC"> they can be</font><font color="#E5E5E5"> changed they can be</font>

348
00:15:30,149 --> 00:15:34,529
misused<font color="#CCCCCC"> most commonly just</font><font color="#E5E5E5"> misuse</font><font color="#CCCCCC"> they</font>

349
00:15:32,760 --> 00:15:37,139
don't even<font color="#E5E5E5"> have to be allocated but</font>

350
00:15:34,529 --> 00:15:38,959
they're<font color="#E5E5E5"> they're generally used by most</font>

351
00:15:37,139 --> 00:15:46,230
systems and a quite a good

352
00:15:38,959 --> 00:15:48,029
<font color="#E5E5E5">classification tool so here</font><font color="#CCCCCC"> on when you</font>

353
00:15:46,230 --> 00:15:52,440
install the Windows debugging tools or

354
00:15:48,029 --> 00:15:53,459
windbg<font color="#E5E5E5"> you get a tool tag txt file</font><font color="#CCCCCC"> in</font>

355
00:15:52,440 --> 00:15:54,899
the install<font color="#E5E5E5"> directory which just shows</font>

356
00:15:53,459 --> 00:15:57,510
<font color="#E5E5E5">all the pool tags that are being used by</font>

357
00:15:54,899 --> 00:15:59,160
<font color="#CCCCCC">your system so I just put a quick</font>

358
00:15:57,510 --> 00:16:01,529
screenshot of the one from<font color="#CCCCCC"> my</font><font color="#E5E5E5"> laptop</font>

359
00:15:59,160 --> 00:16:04,410
<font color="#CCCCCC">this is an example you can</font><font color="#E5E5E5"> see for</font>

360
00:16:01,529 --> 00:16:05,519
instance<font color="#E5E5E5"> Nvidia uses</font><font color="#CCCCCC"> multiple tags and</font>

361
00:16:04,410 --> 00:16:10,139
the<font color="#E5E5E5"> latus attached to give us on for a</font>

362
00:16:05,519 --> 00:16:12,360
long way up above<font color="#E5E5E5"> so it's not bound to a</font>

363
00:16:10,139 --> 00:16:14,940
manufacturer it's not bound<font color="#E5E5E5"> to a vendor</font>

364
00:16:12,360 --> 00:16:16,649
it's just a classification thing it's a

365
00:16:14,940 --> 00:16:19,110
debugging<font color="#CCCCCC"> tool so if you were looking at</font>

366
00:16:16,649 --> 00:16:20,790
any<font color="#CCCCCC"> aspects of a different certain</font>

367
00:16:19,110 --> 00:16:22,769
aspect of the Nvidia driver when you're

368
00:16:20,790 --> 00:16:25,980
trying<font color="#E5E5E5"> to debug you can trace it</font><font color="#CCCCCC"> down to</font>

369
00:16:22,769 --> 00:16:27,930
quite a narrow tool but they can be

370
00:16:25,980 --> 00:16:31,890
useful<font color="#CCCCCC"> for other things</font><font color="#E5E5E5"> too as we will</font>

371
00:16:27,930 --> 00:16:34,260
go<font color="#CCCCCC"> over the whole picture changes a bit</font>

372
00:16:31,890 --> 00:16:37,890
when you start looking<font color="#CCCCCC"> at big pools a</font>

373
00:16:34,260 --> 00:16:41,220
big is slightly odd<font color="#E5E5E5"> because it's only</font>

374
00:16:37,890 --> 00:16:42,480
four kilobytes<font color="#CCCCCC"> and so in modern</font>

375
00:16:41,220 --> 00:16:47,490
operating<font color="#E5E5E5"> systems that</font><font color="#CCCCCC"> covers quite a</font>

376
00:16:42,480 --> 00:16:50,670
bit again<font color="#E5E5E5"> four kilobytes</font><font color="#CCCCCC"> as a page in</font>

377
00:16:47,490 --> 00:16:53,279
memory<font color="#E5E5E5"> so anything over one single page</font>

378
00:16:50,670 --> 00:16:55,199
will<font color="#CCCCCC"> be allocated out</font><font color="#E5E5E5"> of the big page</font>

379
00:16:53,279 --> 00:17:01,380
<font color="#E5E5E5">pool rather than your normal kernel</font>

380
00:16:55,199 --> 00:17:04,139
pools<font color="#CCCCCC"> that just means it's intended for</font>

381
00:17:01,380 --> 00:17:06,299
<font color="#E5E5E5">speed and efficiency</font><font color="#CCCCCC"> so the operating</font>

382
00:17:04,140 --> 00:17:10,160
systems not trying to track<font color="#CCCCCC"> multiple</font>

383
00:17:06,299 --> 00:17:12,480
tables or storing similar into<font color="#CCCCCC"> the data</font>

384
00:17:10,160 --> 00:17:15,480
<font color="#CCCCCC">the difference with this which</font><font color="#E5E5E5"> makes it</font>

385
00:17:12,480 --> 00:17:17,130
harder<font color="#CCCCCC"> for our purposes</font><font color="#E5E5E5"> is you lose</font><font color="#CCCCCC"> the</font>

386
00:17:15,480 --> 00:17:20,099
<font color="#CCCCCC">pool headers which have the pool tags in</font>

387
00:17:17,130 --> 00:17:21,780
them allocations are managed within

388
00:17:20,099 --> 00:17:23,639
separate<font color="#E5E5E5"> trap</font><font color="#CCCCCC"> table so on the</font><font color="#E5E5E5"> Left</font>

389
00:17:21,780 --> 00:17:25,260
you've got a normal allocation we have

390
00:17:23,640 --> 00:17:26,819
your pool header<font color="#CCCCCC"> you'd then have it</font>

391
00:17:25,260 --> 00:17:29,910
within that allocation<font color="#E5E5E5"> object header</font>

392
00:17:26,819 --> 00:17:31,980
<font color="#E5E5E5">optional headers data whereas you lose</font>

393
00:17:29,910 --> 00:17:34,350
that<font color="#CCCCCC"> if you become if it</font><font color="#E5E5E5"> becomes big</font>

394
00:17:31,980 --> 00:17:36,840
pools<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> losers or some information</font>

395
00:17:34,350 --> 00:17:42,299
<font color="#CCCCCC">and makes it a little</font><font color="#E5E5E5"> bit harder</font><font color="#CCCCCC"> to</font>

396
00:17:36,840 --> 00:17:43,799
out now come<font color="#E5E5E5"> back round</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> object</font>

397
00:17:42,299 --> 00:17:47,429
headers which in hindsight<font color="#E5E5E5"> I should</font>

398
00:17:43,799 --> 00:17:50,340
possibly<font color="#E5E5E5"> done a little bit earlier these</font>

399
00:17:47,429 --> 00:17:52,470
are the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> proceed every allocation</font>

400
00:17:50,340 --> 00:17:54,720
<font color="#E5E5E5">they haven't it's quite a large</font>

401
00:17:52,470 --> 00:17:56,759
structure<font color="#E5E5E5"> but the key members</font><font color="#CCCCCC"> are</font>

402
00:17:54,720 --> 00:18:00,179
highlighted<font color="#E5E5E5"> they're the ones</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can</font>

403
00:17:56,759 --> 00:18:01,320
most use<font color="#CCCCCC"> pointer count references how</font>

404
00:18:00,179 --> 00:18:04,879
many times<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> being</font>

405
00:18:01,320 --> 00:18:09,418
referenced<font color="#E5E5E5"> by anything on the machine</font><font color="#CCCCCC"> so</font>

406
00:18:04,879 --> 00:18:12,090
<font color="#E5E5E5">anything that has addresses into this</font>

407
00:18:09,419 --> 00:18:14,309
<font color="#E5E5E5">library or</font><font color="#CCCCCC"> dll or whatever a reference</font>

408
00:18:12,090 --> 00:18:16,320
<font color="#CCCCCC">their</font><font color="#E5E5E5"> handle count similarly anything</font>

409
00:18:14,309 --> 00:18:18,720
that which has an open handle to this

410
00:18:16,320 --> 00:18:21,720
file<font color="#CCCCCC"> anything that has the file or key</font>

411
00:18:18,720 --> 00:18:24,119
open or wants to<font color="#E5E5E5"> write to it</font><font color="#CCCCCC"> that will</font>

412
00:18:21,720 --> 00:18:25,980
<font color="#E5E5E5">be stored that</font><font color="#CCCCCC"> affect</font><font color="#E5E5E5"> that handle count</font>

413
00:18:24,119 --> 00:18:27,449
<font color="#E5E5E5">affects whether or not something will be</font>

414
00:18:25,980 --> 00:18:31,289
paged out if there are still open

415
00:18:27,450 --> 00:18:33,299
handles to some data then it's on then

416
00:18:31,289 --> 00:18:40,350
it'll be unlikely<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be paged out</font><font color="#E5E5E5"> of</font>

417
00:18:33,299 --> 00:18:42,950
memory<font color="#CCCCCC"> or deleted as with a lot of this</font>

418
00:18:40,350 --> 00:18:45,840
I'm<font color="#E5E5E5"> trying to keep</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> sort of</font>

419
00:18:42,950 --> 00:18:48,029
understandable on<font color="#E5E5E5"> slides but these tend</font>

420
00:18:45,840 --> 00:18:52,049
to<font color="#E5E5E5"> go</font><font color="#CCCCCC"> down a hierarchy</font><font color="#E5E5E5"> so type index is</font>

421
00:18:48,029 --> 00:18:54,720
an index into another array of different

422
00:18:52,049 --> 00:18:56,690
<font color="#E5E5E5">data types which you then follow down</font>

423
00:18:54,720 --> 00:18:58,889
the tree until<font color="#E5E5E5"> you get to your</font><font color="#CCCCCC"> actual</font>

424
00:18:56,690 --> 00:19:00,720
reference<font color="#E5E5E5"> of what type of</font><font color="#CCCCCC"> object it is</font>

425
00:18:58,889 --> 00:19:01,799
there are a couple<font color="#E5E5E5"> of tables in between</font>

426
00:19:00,720 --> 00:19:02,450
and that's<font color="#E5E5E5"> true of quite a few of these</font>

427
00:19:01,799 --> 00:19:04,200
kind of<font color="#E5E5E5"> things</font>

428
00:19:02,450 --> 00:19:07,379
unfortunately it makes it quite<font color="#CCCCCC"> a lot</font>

429
00:19:04,200 --> 00:19:09,210
harder to step through them<font color="#CCCCCC"> info</font><font color="#E5E5E5"> mask</font>

430
00:19:07,379 --> 00:19:10,980
<font color="#CCCCCC">tells is the interestings it tells you</font>

431
00:19:09,210 --> 00:19:13,139
exactly which optional<font color="#CCCCCC"> headers should be</font>

432
00:19:10,980 --> 00:19:15,090
present so<font color="#CCCCCC"> we can if we find an object</font>

433
00:19:13,139 --> 00:19:16,769
header you<font color="#CCCCCC"> can read the info</font><font color="#E5E5E5"> mask and</font>

434
00:19:15,090 --> 00:19:18,299
know exactly which headers you should

435
00:19:16,769 --> 00:19:21,049
expect<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find after it and which ones</font>

436
00:19:18,299 --> 00:19:23,639
you<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to be passing and then security</font>

437
00:19:21,049 --> 00:19:25,940
as useful<font color="#E5E5E5"> for</font><font color="#CCCCCC"> finding out what access</font>

438
00:19:23,639 --> 00:19:30,959
rights and who was responsible<font color="#CCCCCC"> for</font>

439
00:19:25,940 --> 00:19:34,950
<font color="#E5E5E5">allocating this object processes follow</font>

440
00:19:30,960 --> 00:19:37,700
<font color="#CCCCCC">a similar pattern</font><font color="#E5E5E5"> you've got an a</font>

441
00:19:34,950 --> 00:19:40,019
structure the<font color="#E5E5E5"> e process structure</font>

442
00:19:37,700 --> 00:19:41,340
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> diagram defining it there</font>

443
00:19:40,019 --> 00:19:45,659
<font color="#E5E5E5">that's looking</font><font color="#CCCCCC"> out of the art of</font><font color="#E5E5E5"> memory</font>

444
00:19:41,340 --> 00:19:47,129
forensics you can see the<font color="#E5E5E5"> process</font>

445
00:19:45,659 --> 00:19:48,539
actually includes quite<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of stuff</font>

446
00:19:47,129 --> 00:19:49,919
you've got<font color="#CCCCCC"> your handle tables to</font>

447
00:19:48,539 --> 00:19:52,110
anything it's trying to load

448
00:19:49,920 --> 00:19:55,280
files<font color="#CCCCCC"> it's trying to load</font><font color="#E5E5E5"> you've got</font>

449
00:19:52,110 --> 00:19:59,070
your threads which<font color="#E5E5E5"> are useful for us</font>

450
00:19:55,280 --> 00:20:01,620
<font color="#E5E5E5">loaded</font><font color="#CCCCCC"> modules again</font><font color="#E5E5E5"> your dll's</font><font color="#CCCCCC"> which</font>

451
00:19:59,070 --> 00:20:05,040
the process is<font color="#CCCCCC"> making use of and your</font>

452
00:20:01,620 --> 00:20:07,919
<font color="#E5E5E5">security IDs and so on these structures</font>

453
00:20:05,040 --> 00:20:10,649
<font color="#E5E5E5">are linked to all other processes on the</font>

454
00:20:07,920 --> 00:20:12,660
computer so when you look<font color="#E5E5E5"> at your task</font>

455
00:20:10,650 --> 00:20:14,430
manager process listing what that is

456
00:20:12,660 --> 00:20:19,410
doing is find<font color="#E5E5E5"> it is going to the kernel</font>

457
00:20:14,430 --> 00:20:21,540
debugging<font color="#E5E5E5"> set</font><font color="#CCCCCC"> beta block picking</font><font color="#E5E5E5"> out the</font>

458
00:20:19,410 --> 00:20:23,730
<font color="#E5E5E5">address for the first process structure</font>

459
00:20:21,540 --> 00:20:25,710
going<font color="#CCCCCC"> to that structure reading the</font>

460
00:20:23,730 --> 00:20:29,400
relevant information<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> pulling</font>

461
00:20:25,710 --> 00:20:31,560
out of<font color="#CCCCCC"> that you process the F link value</font>

462
00:20:29,400 --> 00:20:33,560
<font color="#E5E5E5">to point to the</font><font color="#CCCCCC"> next from says</font><font color="#E5E5E5"> structure</font>

463
00:20:31,560 --> 00:20:35,760
and so on<font color="#CCCCCC"> and just</font><font color="#E5E5E5"> goes down the list</font>

464
00:20:33,560 --> 00:20:38,010
enumerate in every process<font color="#E5E5E5"> and showing</font>

465
00:20:35,760 --> 00:20:39,930
them on the<font color="#E5E5E5"> screen so you've got this</font>

466
00:20:38,010 --> 00:20:41,400
doubly linked<font color="#E5E5E5"> list there's</font><font color="#CCCCCC"> an F link for</font>

467
00:20:39,930 --> 00:20:43,140
the next one and<font color="#E5E5E5"> a B link for the</font>

468
00:20:41,400 --> 00:20:51,420
preview<font color="#E5E5E5"> and a B link for the previous</font>

469
00:20:43,140 --> 00:20:54,510
process myself<font color="#E5E5E5"> there</font><font color="#CCCCCC"> the problem with</font>

470
00:20:51,420 --> 00:20:57,090
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that those anything in a header</font>

471
00:20:54,510 --> 00:20:58,680
is editable and the efteling can be

472
00:20:57,090 --> 00:21:02,730
<font color="#E5E5E5">linked values again aren't critical to</font>

473
00:20:58,680 --> 00:21:06,540
process actually running so<font color="#E5E5E5"> that is fine</font>

474
00:21:02,730 --> 00:21:09,420
<font color="#CCCCCC">for</font><font color="#E5E5E5"> nice quick your task manager kind of</font>

475
00:21:06,540 --> 00:21:12,240
view of processes but<font color="#E5E5E5"> it is possible to</font>

476
00:21:09,420 --> 00:21:15,210
hide anything<font color="#CCCCCC"> from that</font><font color="#E5E5E5"> if the link is</font>

477
00:21:12,240 --> 00:21:16,830
<font color="#E5E5E5">broken and an F link passes over one</font>

478
00:21:15,210 --> 00:21:18,150
process it won't pay any attention to

479
00:21:16,830 --> 00:21:20,129
<font color="#E5E5E5">the fact</font><font color="#CCCCCC"> that that process</font><font color="#E5E5E5"> is there</font>

480
00:21:18,150 --> 00:21:21,450
which<font color="#E5E5E5"> is one advantage</font><font color="#CCCCCC"> of memory</font>

481
00:21:20,130 --> 00:21:25,070
scanning in that we're<font color="#E5E5E5"> just looking for</font>

482
00:21:21,450 --> 00:21:27,450
headers we're looking for signatures<font color="#E5E5E5"> of</font>

483
00:21:25,070 --> 00:21:32,129
process rather than<font color="#E5E5E5"> relying on the</font>

484
00:21:27,450 --> 00:21:33,930
<font color="#E5E5E5">windows API</font><font color="#CCCCCC"> is to find</font><font color="#E5E5E5"> them for us say</font>

485
00:21:32,130 --> 00:21:37,710
the simplest way<font color="#CCCCCC"> of finding</font><font color="#E5E5E5"> these is</font>

486
00:21:33,930 --> 00:21:39,150
<font color="#CCCCCC">just scanning</font><font color="#E5E5E5"> for a process headers but</font>

487
00:21:37,710 --> 00:21:41,310
you've also got<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> alternate</font>

488
00:21:39,150 --> 00:21:43,920
process<font color="#E5E5E5"> listings down there you can scan</font>

489
00:21:41,310 --> 00:21:46,919
for threads<font color="#E5E5E5"> instead of headers and then</font>

490
00:21:43,920 --> 00:21:49,380
work backwards<font color="#E5E5E5"> to their parent which can</font>

491
00:21:46,920 --> 00:21:51,450
be a<font color="#CCCCCC"> useful sort of double-check aspect</font>

492
00:21:49,380 --> 00:21:54,090
or you've got<font color="#E5E5E5"> a handle tables</font><font color="#CCCCCC"> there the</font>

493
00:21:51,450 --> 00:21:57,390
OS keeps track of open handles<font color="#E5E5E5"> on the</font>

494
00:21:54,090 --> 00:22:00,360
system in a<font color="#E5E5E5"> few places I think we see</font>

495
00:21:57,390 --> 00:22:01,790
SRS SDXC module<font color="#CCCCCC"> keeps track of</font><font color="#E5E5E5"> one</font>

496
00:22:00,360 --> 00:22:04,860
<font color="#CCCCCC">account and what it stands for</font>

497
00:22:01,790 --> 00:22:07,649
and you can enumerate<font color="#E5E5E5"> those to see what</font>

498
00:22:04,860 --> 00:22:08,939
files<font color="#E5E5E5"> are open owned by what processes</font>

499
00:22:07,650 --> 00:22:11,850
and sort of<font color="#E5E5E5"> work back that way as well</font>

500
00:22:08,940 --> 00:22:16,010
<font color="#E5E5E5">which can</font><font color="#CCCCCC"> be slightly more reliable than</font>

501
00:22:11,850 --> 00:22:18,389
your basic ethnic be<font color="#E5E5E5"> link doubling list</font>

502
00:22:16,010 --> 00:22:20,100
so following<font color="#E5E5E5"> on from that you've got</font>

503
00:22:18,390 --> 00:22:24,690
your threads which are just<font color="#E5E5E5"> one step</font>

504
00:22:20,100 --> 00:22:26,939
down<font color="#E5E5E5"> each each of those sort of thread</font>

505
00:22:24,690 --> 00:22:30,780
sections on the right will<font color="#CCCCCC"> be a pointer</font>

506
00:22:26,940 --> 00:22:33,690
to<font color="#E5E5E5"> an e thread process or the thread</font>

507
00:22:30,780 --> 00:22:35,280
object<font color="#E5E5E5"> so again same kind of thing as</font>

508
00:22:33,690 --> 00:22:38,280
processes you<font color="#CCCCCC"> can just scan for the</font>

509
00:22:35,280 --> 00:22:40,889
thread<font color="#E5E5E5"> header it has set patterns and</font>

510
00:22:38,280 --> 00:22:44,270
then trace back to<font color="#E5E5E5"> the parent process</font>

511
00:22:40,890 --> 00:22:44,270
<font color="#E5E5E5">you want</font><font color="#CCCCCC"> to try and find out</font><font color="#E5E5E5"> ownership</font>

512
00:22:45,080 --> 00:22:50,189
you can also or<font color="#CCCCCC"> you can go</font><font color="#E5E5E5"> the other way</font>

513
00:22:48,390 --> 00:22:51,120
<font color="#E5E5E5">around</font><font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> locate threads by and</font>

514
00:22:50,190 --> 00:22:55,500
you're waiting everything that belongs

515
00:22:51,120 --> 00:22:59,699
to<font color="#E5E5E5"> the process this this kind of thing</font>

516
00:22:55,500 --> 00:23:01,410
could be useful<font color="#CCCCCC"> say for malware example</font>

517
00:22:59,700 --> 00:23:07,740
which like that one<font color="#E5E5E5"> of the watchdog</font>

518
00:23:01,410 --> 00:23:09,900
<font color="#E5E5E5">power yeah</font><font color="#CCCCCC"> palettes</font><font color="#E5E5E5"> that one injects</font><font color="#CCCCCC"> up</font>

519
00:23:07,740 --> 00:23:12,330
thread into an<font color="#E5E5E5"> existing process</font><font color="#CCCCCC"> I think</font>

520
00:23:09,900 --> 00:23:14,910
<font color="#CCCCCC">that one uses a system</font><font color="#E5E5E5"> process so if</font>

521
00:23:12,330 --> 00:23:16,199
you've<font color="#E5E5E5"> got a mysterious thread running</font>

522
00:23:14,910 --> 00:23:19,170
<font color="#CCCCCC">under system which shouldn't be there</font>

523
00:23:16,200 --> 00:23:20,730
<font color="#CCCCCC">then you've</font><font color="#E5E5E5"> got again a clue</font><font color="#CCCCCC"> that</font>

524
00:23:19,170 --> 00:23:23,040
something malicious was going on there

525
00:23:20,730 --> 00:23:26,610
<font color="#E5E5E5">was some interesting work carried out a</font>

526
00:23:23,040 --> 00:23:30,060
few years<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> looking at signatures for</font>

527
00:23:26,610 --> 00:23:32,939
machines how can we do how can<font color="#E5E5E5"> we use</font>

528
00:23:30,060 --> 00:23:35,010
memory data to perform malware analysis

529
00:23:32,940 --> 00:23:37,800
<font color="#E5E5E5">but quickly</font><font color="#CCCCCC"> because that's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> only the</font>

530
00:23:35,010 --> 00:23:40,650
one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the problems of this and what</font>

531
00:23:37,800 --> 00:23:43,470
they were doing<font color="#CCCCCC"> was</font><font color="#E5E5E5"> basically stopping</font>

532
00:23:40,650 --> 00:23:45,150
processes until the<font color="#E5E5E5"> computer crashed so</font>

533
00:23:43,470 --> 00:23:47,310
they were they would stop<font color="#CCCCCC"> to assess if</font>

534
00:23:45,150 --> 00:23:48,210
it wasn't<font color="#E5E5E5"> critical then fine if the</font>

535
00:23:47,310 --> 00:23:49,320
computer crashed

536
00:23:48,210 --> 00:23:52,230
they were classifying as a critical

537
00:23:49,320 --> 00:23:53,879
process<font color="#E5E5E5"> and storing data about it and</font>

538
00:23:52,230 --> 00:23:58,290
what<font color="#E5E5E5"> they did through that was build up</font>

539
00:23:53,880 --> 00:24:00,300
a signature<font color="#E5E5E5"> of the most valuable of what</font>

540
00:23:58,290 --> 00:24:03,270
the system needs<font color="#CCCCCC"> to run and they could</font>

541
00:24:00,300 --> 00:24:04,610
then<font color="#CCCCCC"> use that to basically do signature</font>

542
00:24:03,270 --> 00:24:06,629
checking against the contents<font color="#E5E5E5"> of memory</font>

543
00:24:04,610 --> 00:24:11,500
<font color="#E5E5E5">and that turned out</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be quite</font>

544
00:24:06,630 --> 00:24:14,710
<font color="#E5E5E5">effective from what I saw</font><font color="#CCCCCC"> quite complex</font>

545
00:24:11,500 --> 00:24:17,170
but they<font color="#E5E5E5"> seemed quite effective so let's</font>

546
00:24:14,710 --> 00:24:18,910
see this<font color="#E5E5E5"> is a basic form of that you can</font>

547
00:24:17,170 --> 00:24:21,520
look at what<font color="#E5E5E5"> sort of signature should</font>

548
00:24:18,910 --> 00:24:24,910
the system<font color="#CCCCCC"> protests have</font><font color="#E5E5E5"> why are the</font>

549
00:24:21,520 --> 00:24:26,620
three extra threads<font color="#CCCCCC"> again memory</font>

550
00:24:24,910 --> 00:24:28,810
forensics memory analysis can<font color="#E5E5E5"> be useful</font>

551
00:24:26,620 --> 00:24:30,340
here because<font color="#CCCCCC"> as I say you</font><font color="#E5E5E5"> don't</font>

552
00:24:28,810 --> 00:24:33,190
necessarily<font color="#CCCCCC"> have</font><font color="#E5E5E5"> you can't necessarily</font>

553
00:24:30,340 --> 00:24:37,419
trust the<font color="#CCCCCC"> Windows systems for finding</font>

554
00:24:33,190 --> 00:24:40,270
these things<font color="#CCCCCC"> itself so the register</font><font color="#E5E5E5"> the</font>

555
00:24:37,420 --> 00:24:43,930
registry side of things<font color="#E5E5E5"> is slightly more</font>

556
00:24:40,270 --> 00:24:45,190
complex<font color="#E5E5E5"> than the others as usual when</font>

557
00:24:43,930 --> 00:24:49,480
you try and<font color="#CCCCCC"> look at the</font><font color="#E5E5E5"> data structures</font>

558
00:24:45,190 --> 00:24:51,100
for registry<font color="#E5E5E5"> they it does have the</font>

559
00:24:49,480 --> 00:24:52,630
advantage from<font color="#E5E5E5"> our point from this point</font>

560
00:24:51,100 --> 00:24:55,270
of<font color="#CCCCCC"> view that</font><font color="#E5E5E5"> it's always handled by the</font>

561
00:24:52,630 --> 00:24:58,150
OS if you write a driver that opens a

562
00:24:55,270 --> 00:25:00,730
registry key<font color="#E5E5E5"> you make a</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> to the</font>

563
00:24:58,150 --> 00:25:04,660
OS<font color="#E5E5E5"> to open the key and it will be opened</font>

564
00:25:00,730 --> 00:25:06,190
<font color="#E5E5E5">within the kernel space and you will</font>

565
00:25:04,660 --> 00:25:08,560
have a<font color="#E5E5E5"> reference to</font><font color="#CCCCCC"> it if</font><font color="#E5E5E5"> you're in user</font>

566
00:25:06,190 --> 00:25:10,660
<font color="#E5E5E5">mode</font><font color="#CCCCCC"> and so on so it's always handled by</font>

567
00:25:08,560 --> 00:25:13,510
the same memory management object<font color="#E5E5E5"> a</font>

568
00:25:10,660 --> 00:25:14,410
component in<font color="#E5E5E5"> the Windows kernel so</font>

569
00:25:13,510 --> 00:25:16,120
you've got<font color="#CCCCCC"> the little out you've got</font>

570
00:25:14,410 --> 00:25:18,010
reliable tool tags you're not relying on

571
00:25:16,120 --> 00:25:20,830
a<font color="#CCCCCC"> third-party developer to actually used</font>

572
00:25:18,010 --> 00:25:25,840
the correct<font color="#CCCCCC"> four byte tag when they're</font>

573
00:25:20,830 --> 00:25:27,550
writing<font color="#E5E5E5"> these things the problem</font><font color="#CCCCCC"> you do</font>

574
00:25:25,840 --> 00:25:31,060
have is<font color="#CCCCCC"> that registry keys are not</font>

575
00:25:27,550 --> 00:25:34,600
<font color="#CCCCCC">always used very common very</font><font color="#E5E5E5"> often so</font>

576
00:25:31,060 --> 00:25:37,990
you<font color="#CCCCCC"> can find that</font><font color="#E5E5E5"> you get a very broken</font>

577
00:25:34,600 --> 00:25:39,790
<font color="#E5E5E5">image of the registry from memory when</font>

578
00:25:37,990 --> 00:25:41,800
you open a key the whole registry is not

579
00:25:39,790 --> 00:25:44,260
copied into<font color="#E5E5E5"> memory and or just</font><font color="#CCCCCC"> the one</font>

580
00:25:41,800 --> 00:25:47,940
key<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want used it just copies the</font>

581
00:25:44,260 --> 00:25:52,210
<font color="#E5E5E5">hive</font><font color="#CCCCCC"> that you're accessing the for the</font>

582
00:25:47,940 --> 00:25:55,150
parent<font color="#E5E5E5"> block of the registry</font><font color="#CCCCCC"> that you're</font>

583
00:25:52,210 --> 00:25:56,890
accessing<font color="#CCCCCC"> so it doesn't give a very</font>

584
00:25:55,150 --> 00:25:58,450
<font color="#E5E5E5">complete picture all the time but this</font>

585
00:25:56,890 --> 00:25:59,680
<font color="#E5E5E5">can still be if you get lucky there can</font>

586
00:25:58,450 --> 00:26:02,620
<font color="#CCCCCC">be a huge amount of information</font><font color="#E5E5E5"> there</font>

587
00:25:59,680 --> 00:26:05,080
all out<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to find</font>

588
00:26:02,620 --> 00:26:07,360
registry hives<font color="#E5E5E5"> again you can pull</font><font color="#CCCCCC"> around</font>

589
00:26:05,080 --> 00:26:11,710
<font color="#E5E5E5">you can scan your memory pools for the</font>

590
00:26:07,360 --> 00:26:13,719
<font color="#CCCCCC">tags you then have</font><font color="#E5E5E5"> to check</font><font color="#CCCCCC"> that it's</font>

591
00:26:11,710 --> 00:26:17,380
valid<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you can get leftover hives</font>

592
00:26:13,720 --> 00:26:18,820
which are no longer up-to-date<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

593
00:26:17,380 --> 00:26:22,060
to check<font color="#CCCCCC"> its valid using the signature</font>

594
00:26:18,820 --> 00:26:24,850
<font color="#E5E5E5">remember which is part of the header</font><font color="#CCCCCC"> and</font>

595
00:26:22,060 --> 00:26:27,970
then you can use the hive list which

596
00:26:24,850 --> 00:26:29,500
another array within the header to try

597
00:26:27,970 --> 00:26:31,450
and locate<font color="#E5E5E5"> all other hives that might be</font>

598
00:26:29,500 --> 00:26:33,520
<font color="#E5E5E5">that might be in memory so you can if</font>

599
00:26:31,450 --> 00:26:37,000
you find one<font color="#CCCCCC"> you can extrapolate</font><font color="#E5E5E5"> to what</font>

600
00:26:33,520 --> 00:26:39,190
all current hives<font color="#E5E5E5"> but as I say it can be</font>

601
00:26:37,000 --> 00:26:41,350
quite a broken<font color="#CCCCCC"> picture and experimenting</font>

602
00:26:39,190 --> 00:26:43,600
with this<font color="#E5E5E5"> has been quite tricky compared</font>

603
00:26:41,350 --> 00:26:47,669
to some of<font color="#E5E5E5"> the other things</font><font color="#CCCCCC"> so just as</font>

604
00:26:43,600 --> 00:26:50,709
an overview<font color="#CCCCCC"> it follows quite when</font>

605
00:26:47,670 --> 00:26:58,150
concept you've got the<font color="#E5E5E5"> hive bins which</font>

606
00:26:50,710 --> 00:27:01,210
store<font color="#E5E5E5"> actual block of registry data and</font>

607
00:26:58,150 --> 00:27:03,490
then each of<font color="#E5E5E5"> those groups broken down</font>

608
00:27:01,210 --> 00:27:06,310
into<font color="#E5E5E5"> the key value pairs that</font><font color="#CCCCCC"> you'll</font>

609
00:27:03,490 --> 00:27:07,690
actually<font color="#E5E5E5"> see so you've got pointers to</font>

610
00:27:06,310 --> 00:27:12,159
another<font color="#CCCCCC"> table which actually contains</font>

611
00:27:07,690 --> 00:27:15,160
data going<font color="#CCCCCC"> back to the last</font><font color="#E5E5E5"> one this</font><font color="#CCCCCC"> cm</font>

612
00:27:12,160 --> 00:27:18,250
hive structure is the<font color="#CCCCCC"> letter M covers</font>

613
00:27:15,160 --> 00:27:19,390
<font color="#CCCCCC">the left hand while the a chive covers</font>

614
00:27:18,250 --> 00:27:20,530
the right hand side<font color="#CCCCCC"> so they're the two</font>

615
00:27:19,390 --> 00:27:23,800
different structures<font color="#CCCCCC"> which link to each</font>

616
00:27:20,530 --> 00:27:26,740
other<font color="#E5E5E5"> and represent register registry</font>

617
00:27:23,800 --> 00:27:28,870
and yeah<font color="#E5E5E5"> registry operations are always</font>

618
00:27:26,740 --> 00:27:31,990
carried out by the configuration manager

619
00:27:28,870 --> 00:27:34,780
this handles all aspects of registry

620
00:27:31,990 --> 00:27:35,860
open operations and address translation

621
00:27:34,780 --> 00:27:37,870
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is how that's handled separately</font>

622
00:27:35,860 --> 00:27:42,939
from the normal address<font color="#E5E5E5"> translation that</font>

623
00:27:37,870 --> 00:27:44,979
you'd see in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> OS so how do</font><font color="#E5E5E5"> we find</font>

624
00:27:42,940 --> 00:27:47,670
any of this<font color="#CCCCCC"> well first thing you need</font><font color="#E5E5E5"> is</font>

625
00:27:44,980 --> 00:27:52,030
basically<font color="#E5E5E5"> kernel level</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> to enemy</font>

626
00:27:47,670 --> 00:27:54,460
<font color="#CCCCCC">if you are</font><font color="#E5E5E5"> just trying to read this with</font>

627
00:27:52,030 --> 00:27:56,530
<font color="#CCCCCC">a Python script</font><font color="#E5E5E5"> then you're going</font><font color="#CCCCCC"> to</font>

628
00:27:54,460 --> 00:27:58,780
<font color="#E5E5E5">find the a</font><font color="#CCCCCC"> you in user mode</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> ring</font><font color="#E5E5E5"> 3</font>

629
00:27:56,530 --> 00:28:01,149
and you don't have<font color="#CCCCCC"> access to</font><font color="#E5E5E5"> anything</font>

630
00:27:58,780 --> 00:28:05,050
other than<font color="#E5E5E5"> your address space</font><font color="#CCCCCC"> the for</font>

631
00:28:01,150 --> 00:28:09,580
that<font color="#E5E5E5"> program so you need a kernel driver</font>

632
00:28:05,050 --> 00:28:14,110
basically<font color="#CCCCCC"> I use</font><font color="#E5E5E5"> wimpy men by the recall</font>

633
00:28:09,580 --> 00:28:16,030
<font color="#CCCCCC">guys</font><font color="#E5E5E5"> as a sign driver you can also you</font>

634
00:28:14,110 --> 00:28:18,010
<font color="#E5E5E5">can get around it to an extent using</font>

635
00:28:16,030 --> 00:28:20,920
<font color="#CCCCCC">windows api</font><font color="#E5E5E5"> is you can get a surprising</font>

636
00:28:18,010 --> 00:28:24,220
<font color="#CCCCCC">meta</font><font color="#E5E5E5"> information by going to the winner</font>

637
00:28:20,920 --> 00:28:26,700
of api's rather than to memory<font color="#E5E5E5"> but as</font><font color="#CCCCCC"> i</font>

638
00:28:24,220 --> 00:28:29,980
<font color="#CCCCCC">mentioned</font><font color="#E5E5E5"> before you get a lot of issues</font>

639
00:28:26,700 --> 00:28:32,320
we're looking at malware<font color="#CCCCCC"> you you know</font>

640
00:28:29,980 --> 00:28:33,970
you put any fall foul of the<font color="#E5E5E5"> actual anti</font>

641
00:28:32,320 --> 00:28:36,520
forensics techniques<font color="#E5E5E5"> which we're trying</font>

642
00:28:33,970 --> 00:28:37,440
to avoid so you can get some value out

643
00:28:36,520 --> 00:28:40,080
of<font color="#E5E5E5"> it but it's not</font>

644
00:28:37,440 --> 00:28:42,720
that useful so<font color="#E5E5E5"> pool scaling is the most</font>

645
00:28:40,080 --> 00:28:44,039
<font color="#CCCCCC">obvious one pool scanning is just what</font>

646
00:28:42,720 --> 00:28:46,950
it<font color="#E5E5E5"> sounds</font><font color="#CCCCCC"> like you've got those memory</font>

647
00:28:44,039 --> 00:28:51,000
pools that allocated from address range

648
00:28:46,950 --> 00:28:52,470
<font color="#CCCCCC">0 to 20,000 and you just scan through it</font>

649
00:28:51,000 --> 00:28:54,509
as though it's raw data<font color="#CCCCCC"> you</font><font color="#E5E5E5"> read it out</font>

650
00:28:52,470 --> 00:28:56,549
<font color="#E5E5E5">scan through it and</font><font color="#CCCCCC"> parse</font><font color="#E5E5E5"> it</font>

651
00:28:54,509 --> 00:28:58,500
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> looking for whatever you're</font>

652
00:28:56,549 --> 00:29:02,850
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to find pool tags header tags</font>

653
00:28:58,500 --> 00:29:06,269
whatever<font color="#E5E5E5"> yeah it does doesn't</font><font color="#CCCCCC"> mention it</font>

654
00:29:02,850 --> 00:29:08,279
has the advantage that<font color="#CCCCCC"> it bypasses a lot</font>

655
00:29:06,269 --> 00:29:09,360
of anti forensics techniques<font color="#E5E5E5"> and you can</font>

656
00:29:08,279 --> 00:29:11,070
search for<font color="#E5E5E5"> anything you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> I mean you</font>

657
00:29:09,360 --> 00:29:11,820
can just<font color="#CCCCCC"> type in a string and search the</font>

658
00:29:11,070 --> 00:29:15,289
memory for<font color="#E5E5E5"> it</font>

659
00:29:11,820 --> 00:29:22,408
which is helpful<font color="#E5E5E5"> and confusing at times</font>

660
00:29:15,289 --> 00:29:27,240
<font color="#E5E5E5">the cons are this big on</font><font color="#CCCCCC"> this and I'm</font>

661
00:29:22,409 --> 00:29:30,919
finding generally the<font color="#E5E5E5"> non page pool can</font>

662
00:29:27,240 --> 00:29:33,659
<font color="#E5E5E5">be several gigabytes or larger and</font>

663
00:29:30,919 --> 00:29:36,779
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> basically trying to read several</font>

664
00:29:33,659 --> 00:29:39,539
gigabyte file<font color="#CCCCCC"> parse it and</font><font color="#E5E5E5"> deal with it</font>

665
00:29:36,779 --> 00:29:40,919
in a reasonable<font color="#CCCCCC"> length of</font><font color="#E5E5E5"> time so my</font>

666
00:29:39,539 --> 00:29:42,629
<font color="#E5E5E5">project was aimed with my dissertation</font>

667
00:29:40,919 --> 00:29:45,570
project originally<font color="#E5E5E5"> was aimed at trying</font>

668
00:29:42,629 --> 00:29:47,399
<font color="#E5E5E5">to create</font><font color="#CCCCCC"> a tool for dynamic analysis</font>

669
00:29:45,570 --> 00:29:49,889
<font color="#E5E5E5">for malware</font><font color="#CCCCCC"> and I've had to sort</font><font color="#E5E5E5"> of</font>

670
00:29:47,399 --> 00:29:51,600
scrap the<font color="#CCCCCC"> idea because using</font><font color="#E5E5E5"> pool</font>

671
00:29:49,889 --> 00:29:53,100
scanning<font color="#E5E5E5"> I'm not able to do it in a</font>

672
00:29:51,600 --> 00:29:54,389
reasonable<font color="#CCCCCC"> length of</font><font color="#E5E5E5"> time if you're</font>

673
00:29:53,100 --> 00:29:55,980
trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at malware you need it to</font>

674
00:29:54,389 --> 00:29:57,299
<font color="#E5E5E5">be checking every</font><font color="#CCCCCC"> sort of few seconds</font>

675
00:29:55,980 --> 00:29:59,490
where it's taking<font color="#CCCCCC"> ten minutes for me to</font>

676
00:29:57,299 --> 00:30:01,769
<font color="#E5E5E5">get</font><font color="#CCCCCC"> a run through memory so it does have</font>

677
00:29:59,490 --> 00:30:04,620
<font color="#CCCCCC">problems</font><font color="#E5E5E5"> with that but for forensics</font>

678
00:30:01,769 --> 00:30:08,129
points of view<font color="#E5E5E5"> it works well for live</font>

679
00:30:04,620 --> 00:30:11,820
analysis not so much so it puts all the

680
00:30:08,129 --> 00:30:13,469
weight of parsing and analysis<font color="#CCCCCC"> onto the</font>

681
00:30:11,820 --> 00:30:14,668
person<font color="#E5E5E5"> doing the scanning or the person</font>

682
00:30:13,470 --> 00:30:16,799
writing the scanner as well

683
00:30:14,669 --> 00:30:20,899
you've got no help from the OS you just

684
00:30:16,799 --> 00:30:24,899
<font color="#E5E5E5">put a block of data a SLR is in effect</font>

685
00:30:20,899 --> 00:30:28,500
<font color="#CCCCCC">you've</font><font color="#E5E5E5"> you've</font><font color="#CCCCCC"> got paging and so on see</font>

686
00:30:24,899 --> 00:30:30,750
you<font color="#E5E5E5"> all the weight of understanding what</font>

687
00:30:28,500 --> 00:30:31,980
is<font color="#E5E5E5"> going on falls on you rather than</font>

688
00:30:30,750 --> 00:30:35,220
help it getting<font color="#E5E5E5"> any help from the</font>

689
00:30:31,980 --> 00:30:36,330
operating<font color="#CCCCCC"> system there's also a large</font>

690
00:30:35,220 --> 00:30:38,179
chance of false positives<font color="#E5E5E5"> due to</font>

691
00:30:36,330 --> 00:30:40,139
scanning the text

692
00:30:38,179 --> 00:30:43,139
<font color="#E5E5E5">chances are that those tags are going to</font>

693
00:30:40,139 --> 00:30:47,330
appear accidentally anyway we'll cover

694
00:30:43,139 --> 00:30:47,330
how<font color="#CCCCCC"> you can try and which you</font><font color="#E5E5E5"> sir</font><font color="#CCCCCC"> laser</font>

695
00:30:48,210 --> 00:30:52,290
Tagg scannings extension of pool tag

696
00:30:50,429 --> 00:30:53,450
where you're looking<font color="#CCCCCC"> for the pool</font>

697
00:30:52,290 --> 00:30:56,399
<font color="#E5E5E5">scanning</font><font color="#CCCCCC"> we looking for</font><font color="#E5E5E5"> the pool tags</font>

698
00:30:53,450 --> 00:30:58,260
<font color="#CCCCCC">again as I mentioned not always reliable</font>

699
00:30:56,400 --> 00:31:00,000
and<font color="#CCCCCC"> not always</font><font color="#E5E5E5"> there they can</font><font color="#CCCCCC"> very</font>

700
00:30:58,260 --> 00:31:02,520
regularly<font color="#E5E5E5"> so you have to keep your</font>

701
00:31:00,000 --> 00:31:05,429
scanner up-to-date and they can be

702
00:31:02,520 --> 00:31:06,809
manipulated<font color="#E5E5E5"> maliciously you can set you</font>

703
00:31:05,429 --> 00:31:09,750
<font color="#CCCCCC">can choose what</font><font color="#E5E5E5"> you want your tag to be</font>

704
00:31:06,809 --> 00:31:12,540
when you ask for<font color="#E5E5E5"> an allocation within</font>

705
00:31:09,750 --> 00:31:15,510
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Colonel pools sink this functions X</font>

706
00:31:12,540 --> 00:31:20,250
allocate with tag<font color="#E5E5E5"> and the tag</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> a</font>

707
00:31:15,510 --> 00:31:22,410
required parameter<font color="#CCCCCC"> so you can just leave</font>

708
00:31:20,250 --> 00:31:24,780
them<font color="#E5E5E5"> empty</font><font color="#CCCCCC"> and as I</font><font color="#E5E5E5"> mentioned large</font>

709
00:31:22,410 --> 00:31:26,280
allocations don't have<font color="#E5E5E5"> pool tags so as</font>

710
00:31:24,780 --> 00:31:28,580
soon<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you hit</font><font color="#E5E5E5"> anything over than pages</font>

711
00:31:26,280 --> 00:31:30,510
of anything over than<font color="#E5E5E5"> four kilobyte</font>

712
00:31:28,580 --> 00:31:33,419
allocations this goes out<font color="#E5E5E5"> the window</font>

713
00:31:30,510 --> 00:31:36,330
<font color="#E5E5E5">anyway it does have uses</font><font color="#CCCCCC"> for certain</font>

714
00:31:33,420 --> 00:31:38,700
<font color="#CCCCCC">scenarios</font><font color="#E5E5E5"> how can you reduce false</font>

715
00:31:36,330 --> 00:31:42,330
positives<font color="#E5E5E5"> basically the answer to that</font>

716
00:31:38,700 --> 00:31:44,520
<font color="#E5E5E5">is use as much data as you can with the</font>

717
00:31:42,330 --> 00:31:46,379
object headers and so on you have<font color="#CCCCCC"> got a</font>

718
00:31:44,520 --> 00:31:47,970
nice big rigid structure where<font color="#E5E5E5"> you can</font>

719
00:31:46,380 --> 00:31:50,940
<font color="#E5E5E5">say fairly safely what you should be</font>

720
00:31:47,970 --> 00:31:53,610
able to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> at byte or offset</font><font color="#E5E5E5"> for</font>

721
00:31:50,940 --> 00:31:55,470
offset<font color="#CCCCCC"> eight and so</font><font color="#E5E5E5"> on so once you find</font>

722
00:31:53,610 --> 00:31:57,719
<font color="#E5E5E5">that first pool tag or that first header</font>

723
00:31:55,470 --> 00:31:59,250
the key you have<font color="#E5E5E5"> to then start working</font>

724
00:31:57,720 --> 00:32:01,260
<font color="#E5E5E5">your way</font><font color="#CCCCCC"> down that</font><font color="#E5E5E5"> list</font><font color="#CCCCCC"> and try and</font>

725
00:31:59,250 --> 00:32:02,580
check well is this an object is<font color="#E5E5E5"> that</font>

726
00:32:01,260 --> 00:32:04,110
field where it should<font color="#E5E5E5"> be as that feel</font>

727
00:32:02,580 --> 00:32:06,330
where<font color="#E5E5E5"> it should</font><font color="#CCCCCC"> be and try and pulling</font>

728
00:32:04,110 --> 00:32:11,909
as much<font color="#CCCCCC"> information as you can</font><font color="#E5E5E5"> to take</font>

729
00:32:06,330 --> 00:32:16,800
that out<font color="#CCCCCC"> and reduce that uncertainty you</font>

730
00:32:11,910 --> 00:32:19,500
can make use of<font color="#CCCCCC"> thrashing tables for</font>

731
00:32:16,800 --> 00:32:21,889
instance the page allocate the page

732
00:32:19,500 --> 00:32:25,350
allocations<font color="#E5E5E5"> are tracked by</font><font color="#CCCCCC"> the</font>

733
00:32:21,890 --> 00:32:26,790
management<font color="#E5E5E5"> module and in stored in</font>

734
00:32:25,350 --> 00:32:30,719
tables if you can<font color="#E5E5E5"> find if you can locate</font>

735
00:32:26,790 --> 00:32:33,809
<font color="#E5E5E5">those and some of them are fairly</font>

736
00:32:30,720 --> 00:32:37,020
<font color="#E5E5E5">reliably located in the kernel address</font>

737
00:32:33,809 --> 00:32:39,570
space they can<font color="#E5E5E5"> serve as a reference to</font>

738
00:32:37,020 --> 00:32:41,280
work to get<font color="#CCCCCC"> you started and</font><font color="#E5E5E5"> as a double</font>

739
00:32:39,570 --> 00:32:45,389
check<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're trying to find things</font>

740
00:32:41,280 --> 00:32:47,070
so is this one meant to<font color="#CCCCCC"> be there</font><font color="#E5E5E5"> you can</font>

741
00:32:45,390 --> 00:32:48,660
use it to get you to the first process

742
00:32:47,070 --> 00:32:50,510
to then start<font color="#CCCCCC"> following links from</font><font color="#E5E5E5"> there</font>

743
00:32:48,660 --> 00:32:54,570
and so on so they<font color="#E5E5E5"> can be quite a useful</font>

744
00:32:50,510 --> 00:32:58,129
reference<font color="#E5E5E5"> and just follow pointers if</font>

745
00:32:54,570 --> 00:33:00,050
you've found one already<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> 100%</font>

746
00:32:58,130 --> 00:33:02,990
<font color="#E5E5E5">structure that you're looking for</font>

747
00:33:00,050 --> 00:33:04,070
then use the<font color="#E5E5E5"> information in</font><font color="#CCCCCC"> that you can</font>

748
00:33:02,990 --> 00:33:05,930
follow<font color="#E5E5E5"> links from at your follow</font>

749
00:33:04,070 --> 00:33:09,560
pointers<font color="#CCCCCC"> and pull out more information</font>

750
00:33:05,930 --> 00:33:11,900
from that<font color="#E5E5E5"> the key is</font><font color="#CCCCCC"> just try and</font><font color="#E5E5E5"> get</font>

751
00:33:09,560 --> 00:33:13,399
the context<font color="#CCCCCC"> you in as I say with</font><font color="#E5E5E5"> pool</font>

752
00:33:11,900 --> 00:33:15,920
scanning it doesn't give you much help

753
00:33:13,400 --> 00:33:19,520
<font color="#E5E5E5">but you just got to try and work out</font>

754
00:33:15,920 --> 00:33:23,590
yourself<font color="#CCCCCC"> what context</font><font color="#E5E5E5"> you in and try and</font>

755
00:33:19,520 --> 00:33:25,580
<font color="#E5E5E5">pull that mess of</font><font color="#CCCCCC"> hex into some kind</font><font color="#E5E5E5"> of</font>

756
00:33:23,590 --> 00:33:32,360
mess of bytes into<font color="#E5E5E5"> some kind of</font>

757
00:33:25,580 --> 00:33:35,480
understandable format<font color="#CCCCCC"> so just stir in</font>

758
00:33:32,360 --> 00:33:37,699
towards the<font color="#E5E5E5"> end the major issue ignoring</font>

759
00:33:35,480 --> 00:33:39,050
one looked at with pool scanning and so

760
00:33:37,700 --> 00:33:42,680
on what are the issues<font color="#E5E5E5"> with running live</font>

761
00:33:39,050 --> 00:33:44,690
analysis<font color="#CCCCCC"> as I mentioned forensics is a</font>

762
00:33:42,680 --> 00:33:46,040
very different tool you<font color="#CCCCCC"> have a very</font>

763
00:33:44,690 --> 00:33:47,750
<font color="#E5E5E5">different population you don't have to</font>

764
00:33:46,040 --> 00:33:49,460
worry<font color="#E5E5E5"> about the fact that you're</font><font color="#CCCCCC"> running</font>

765
00:33:47,750 --> 00:33:50,810
on the machine<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're testing</font>

766
00:33:49,460 --> 00:33:52,730
you'd have to<font color="#E5E5E5"> worry about memory</font>

767
00:33:50,810 --> 00:33:55,040
changing whilst you're working on it

768
00:33:52,730 --> 00:33:57,320
which<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> problem here for</font><font color="#CCCCCC"> instance if</font>

769
00:33:55,040 --> 00:33:58,610
you're trying<font color="#E5E5E5"> to follow pointers down</font>

770
00:33:57,320 --> 00:34:00,290
the line by the<font color="#E5E5E5"> time you at the end of</font>

771
00:33:58,610 --> 00:34:03,439
the line<font color="#CCCCCC"> that bit coding page had a</font>

772
00:34:00,290 --> 00:34:05,480
memory so you do have<font color="#E5E5E5"> risks while you're</font>

773
00:34:03,440 --> 00:34:07,179
running<font color="#E5E5E5"> it live on a machine so if you</font>

774
00:34:05,480 --> 00:34:09,889
don't use<font color="#CCCCCC"> it you lose it</font>

775
00:34:07,179 --> 00:34:11,660
<font color="#CCCCCC">paging means that paging and the fact</font>

776
00:34:09,889 --> 00:34:13,668
it's volatile<font color="#E5E5E5"> means that if something is</font>

777
00:34:11,659 --> 00:34:19,600
<font color="#CCCCCC">not being used</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> is finished then it's</font>

778
00:34:13,668 --> 00:34:21,710
moved<font color="#E5E5E5"> so it's not a constant environment</font>

779
00:34:19,600 --> 00:34:23,600
<font color="#CCCCCC">running the</font><font color="#E5E5E5"> very act of running analysis</font>

780
00:34:21,710 --> 00:34:25,880
changes what you're looking at you're

781
00:34:23,600 --> 00:34:28,429
running a program<font color="#E5E5E5"> on the machine you're</font>

782
00:34:25,880 --> 00:34:29,840
<font color="#E5E5E5">investigating and that's causing stuff</font>

783
00:34:28,429 --> 00:34:32,300
to be loaded into memory it's causing

784
00:34:29,840 --> 00:34:34,820
paging to take place so<font color="#CCCCCC"> just a very</font>

785
00:34:32,300 --> 00:34:36,740
active analysis can change stuff<font color="#E5E5E5"> and of</font>

786
00:34:34,820 --> 00:34:39,380
course job performance impact<font color="#E5E5E5"> as I say</font>

787
00:34:36,739 --> 00:34:43,850
with<font color="#CCCCCC"> my basic</font><font color="#E5E5E5"> attempts at doing this</font>

788
00:34:39,380 --> 00:34:46,700
<font color="#E5E5E5">with Python and wimpy mem</font><font color="#CCCCCC"> I'm taking 10</font>

789
00:34:43,850 --> 00:34:49,909
up<font color="#E5E5E5"> to 10</font><font color="#CCCCCC"> minutes to make a run and it's</font>

790
00:34:46,699 --> 00:34:51,649
while eating<font color="#E5E5E5"> up like 90% of my ability</font>

791
00:34:49,909 --> 00:34:54,109
to write<font color="#E5E5E5"> and memory so it's fairly</font>

792
00:34:51,650 --> 00:34:55,668
performance intensive so what I'm

793
00:34:54,110 --> 00:34:59,150
currently<font color="#E5E5E5"> working on for the</font>

794
00:34:55,668 --> 00:35:00,759
dissertation<font color="#CCCCCC"> side</font><font color="#E5E5E5"> of things is how to</font>

795
00:34:59,150 --> 00:35:04,450
reduce<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and how to make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> practical</font>

796
00:35:00,760 --> 00:35:08,360
<font color="#E5E5E5">in in the real world so if anyone has</font>

797
00:35:04,450 --> 00:35:10,040
experience or advice on that I'd love<font color="#CCCCCC"> to</font>

798
00:35:08,360 --> 00:35:13,940
hear<font color="#E5E5E5"> from you</font>

799
00:35:10,040 --> 00:35:15,830
so that brings<font color="#E5E5E5"> me</font><font color="#CCCCCC"> to the end I don't</font>

800
00:35:13,940 --> 00:35:18,680
<font color="#E5E5E5">think I'd anything else to cover so does</font>

801
00:35:15,830 --> 00:35:23,900
<font color="#E5E5E5">anyone have any questions or</font><font color="#CCCCCC"> advice or</font>

802
00:35:18,680 --> 00:35:25,640
<font color="#E5E5E5">anything okay well I'll be</font><font color="#CCCCCC"> at the pub</font>

803
00:35:23,900 --> 00:35:28,270
later<font color="#E5E5E5"> and you can catch me on Twitter if</font>

804
00:35:25,640 --> 00:35:28,270
anyone wants to talk

