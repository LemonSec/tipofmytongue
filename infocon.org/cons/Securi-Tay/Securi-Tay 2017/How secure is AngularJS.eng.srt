1
00:00:07,570 --> 00:00:14,960
<font color="#E5E5E5">all right good morning everyone</font>

2
00:00:10,660 --> 00:00:17,420
so few words about Who I am<font color="#CCCCCC"> so I'm</font>

3
00:00:14,960 --> 00:00:18,770
<font color="#CCCCCC">concerning epic Giro dmitrieva I don't</font>

4
00:00:17,420 --> 00:00:20,270
know<font color="#E5E5E5"> somewhere in between just three</font>

5
00:00:18,770 --> 00:00:23,448
simply changed my last name<font color="#CCCCCC"> self I'm</font>

6
00:00:20,270 --> 00:00:26,810
still finally figuring out<font color="#E5E5E5"> principal</font>

7
00:00:23,449 --> 00:00:28,010
consultant at synopsis previously<font color="#CCCCCC"> a</font>

8
00:00:26,810 --> 00:00:29,959
company known as<font color="#E5E5E5"> digital we were</font>

9
00:00:28,010 --> 00:00:32,510
<font color="#E5E5E5">acquired a few months ago so again</font>

10
00:00:29,960 --> 00:00:34,489
that's<font color="#E5E5E5"> kind of a new name I've been in</font>

11
00:00:32,509 --> 00:00:37,690
application security<font color="#E5E5E5"> for</font><font color="#CCCCCC"> over seven</font>

12
00:00:34,489 --> 00:00:41,900
<font color="#CCCCCC">years where I started as an</font><font color="#E5E5E5"> intern and</font>

13
00:00:37,690 --> 00:00:44,360
now<font color="#E5E5E5"> I'm principal consultant</font><font color="#CCCCCC"> before that</font>

14
00:00:41,900 --> 00:00:46,940
I was a developer<font color="#CCCCCC"> and in technology</font>

15
00:00:44,360 --> 00:00:49,519
<font color="#CCCCCC">called flash that existed seven years</font>

16
00:00:46,940 --> 00:00:53,330
<font color="#E5E5E5">ago it's kind of still exist but</font><font color="#CCCCCC"> not</font>

17
00:00:49,519 --> 00:00:56,089
really<font color="#CCCCCC"> a Java developer before that and</font>

18
00:00:53,330 --> 00:00:58,849
I do speak at conferences quite often

19
00:00:56,089 --> 00:01:01,940
and security conferences such as are

20
00:00:58,850 --> 00:01:04,489
saying abstract you<font color="#E5E5E5"> I spoken</font>

21
00:01:01,940 --> 00:01:07,310
besides London a few<font color="#E5E5E5"> years ago and some</font>

22
00:01:04,489 --> 00:01:10,310
other American<font color="#E5E5E5"> conferences</font><font color="#CCCCCC"> you can</font>

23
00:01:07,310 --> 00:01:12,140
<font color="#CCCCCC">follow me on</font><font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> I admit Reva where</font>

24
00:01:10,310 --> 00:01:13,700
this is my professional account<font color="#CCCCCC"> so</font>

25
00:01:12,140 --> 00:01:16,910
they're<font color="#E5E5E5"> not gonna be you know pictures</font>

26
00:01:13,700 --> 00:01:17,690
<font color="#CCCCCC">of food or something like that and in my</font>

27
00:01:16,910 --> 00:01:19,399
real life

28
00:01:17,690 --> 00:01:24,350
I do ballroom<font color="#E5E5E5"> dancing</font><font color="#CCCCCC"> so that's my</font>

29
00:01:19,400 --> 00:01:27,260
passion and love so today we will<font color="#E5E5E5"> be</font>

30
00:01:24,350 --> 00:01:29,780
talking about<font color="#E5E5E5"> angularjs because in the</font>

31
00:01:27,260 --> 00:01:31,970
past couple of years I was really really

32
00:01:29,780 --> 00:01:35,480
interested<font color="#CCCCCC"> in JavaScript technologies</font>

33
00:01:31,970 --> 00:01:38,150
and so one of the<font color="#E5E5E5"> main and one of the</font>

34
00:01:35,480 --> 00:01:41,720
most popular clients<font color="#E5E5E5"> at frameworks in</font>

35
00:01:38,150 --> 00:01:44,390
<font color="#CCCCCC">Goju so looking at the vulnerabilities</font>

36
00:01:41,720 --> 00:01:46,310
how secure it is how vulnerable it<font color="#E5E5E5"> is</font>

37
00:01:44,390 --> 00:01:49,310
what can go wrong when you're usually

38
00:01:46,310 --> 00:01:51,710
using<font color="#E5E5E5"> angular so that's what are we</font>

39
00:01:49,310 --> 00:01:57,159
gonna talk about<font color="#E5E5E5"> today</font><font color="#CCCCCC"> we'll give you a</font>

40
00:01:51,710 --> 00:02:00,440
quick intro and then we will talk about

41
00:01:57,159 --> 00:02:04,010
what a how angular relates to<font color="#E5E5E5"> or wass</font>

42
00:02:00,440 --> 00:02:06,830
top<font color="#CCCCCC"> ten we'll talk about the</font><font color="#E5E5E5"> security</font>

43
00:02:04,010 --> 00:02:09,769
controls<font color="#E5E5E5"> that are built into angular by</font>

44
00:02:06,830 --> 00:02:11,810
default and<font color="#CCCCCC"> out-of-the-box</font><font color="#E5E5E5"> how you can</font>

45
00:02:09,769 --> 00:02:14,450
enable some of<font color="#E5E5E5"> them or disable some</font><font color="#CCCCCC"> of</font>

46
00:02:11,810 --> 00:02:17,450
them as a developer<font color="#E5E5E5"> and then we'll talk</font>

47
00:02:14,450 --> 00:02:19,310
about<font color="#E5E5E5"> the security issues that are</font>

48
00:02:17,450 --> 00:02:21,079
unfortunately<font color="#E5E5E5"> still present</font><font color="#CCCCCC"> in the</font>

49
00:02:19,310 --> 00:02:22,700
like what<font color="#E5E5E5"> what are the</font><font color="#CCCCCC"> vulnerabilities</font>

50
00:02:21,080 --> 00:02:24,709
what are the zero days what are<font color="#E5E5E5"> the</font>

51
00:02:22,700 --> 00:02:27,170
<font color="#CCCCCC">mistakes that developers can make to</font>

52
00:02:24,709 --> 00:02:29,420
make<font color="#E5E5E5"> you up locations vulnerable</font><font color="#CCCCCC"> and</font>

53
00:02:27,170 --> 00:02:32,380
then I will show you demos of some<font color="#E5E5E5"> of</font>

54
00:02:29,420 --> 00:02:38,839
the<font color="#CCCCCC"> vowels that we'll be</font><font color="#E5E5E5"> talking about</font>

55
00:02:32,380 --> 00:02:40,340
so anybody heard of angular awesome<font color="#E5E5E5"> then</font>

56
00:02:38,840 --> 00:02:44,090
I don't need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give an intro you guys</font>

57
00:02:40,340 --> 00:02:47,630
gonna<font color="#CCCCCC"> give</font><font color="#E5E5E5"> me an intro and since we</font><font color="#CCCCCC"> are</font>

58
00:02:44,090 --> 00:02:50,860
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> university</font><font color="#E5E5E5"> how do teachers</font>

59
00:02:47,630 --> 00:02:54,410
<font color="#E5E5E5">usually start a class with a pop quiz</font>

60
00:02:50,860 --> 00:02:56,989
so I<font color="#E5E5E5"> have some questions for</font><font color="#CCCCCC"> you guys</font>

61
00:02:54,410 --> 00:03:00,549
<font color="#E5E5E5">I'm gonna be throwing candy candy</font>

62
00:02:56,989 --> 00:03:02,750
contains peanuts so if you're allergic

63
00:03:00,549 --> 00:03:04,670
<font color="#E5E5E5">don't catch it give it to somebody else</font>

64
00:03:02,750 --> 00:03:09,849
don't touch it but if you if<font color="#CCCCCC"> you're not</font>

65
00:03:04,670 --> 00:03:09,849
<font color="#E5E5E5">then good so what is angularjs</font>

66
00:03:14,950 --> 00:03:21,018
application framework for the web<font color="#CCCCCC"> all</font>

67
00:03:17,750 --> 00:03:25,540
right anything<font color="#E5E5E5"> else</font><font color="#CCCCCC"> about angular what</font>

68
00:03:21,019 --> 00:03:29,060
kind of application framework<font color="#E5E5E5"> okay okay</font>

69
00:03:25,540 --> 00:03:30,590
<font color="#CCCCCC">knowing so it's a</font><font color="#E5E5E5"> front-end and as I</font>

70
00:03:29,060 --> 00:03:34,190
said<font color="#CCCCCC"> it is JavaScript right so it's</font>

71
00:03:30,590 --> 00:03:37,549
<font color="#CCCCCC">front and application framework open</font>

72
00:03:34,190 --> 00:03:45,980
source<font color="#E5E5E5"> all right what is the current</font>

73
00:03:37,549 --> 00:03:49,310
<font color="#CCCCCC">version of angularjs if you give this</font>

74
00:03:45,980 --> 00:03:58,220
<font color="#E5E5E5">answer to a teacher and a quiz three but</font>

75
00:03:49,310 --> 00:04:02,389
four but just maybe<font color="#E5E5E5"> two okay okay</font>

76
00:03:58,220 --> 00:04:05,560
so this<font color="#E5E5E5"> cards this is this is pretty</font>

77
00:04:02,389 --> 00:04:08,989
hard<font color="#CCCCCC"> question so these are some</font><font color="#E5E5E5"> more so</font>

78
00:04:05,560 --> 00:04:10,910
<font color="#E5E5E5">angularjs</font><font color="#CCCCCC"> I was released</font><font color="#E5E5E5"> I don't know a</font>

79
00:04:08,989 --> 00:04:14,209
few<font color="#E5E5E5"> years ago right and it was you know</font>

80
00:04:10,910 --> 00:04:17,630
had versions like 11.2 etcetera till 1.6

81
00:04:14,209 --> 00:04:19,760
and then they decided<font color="#E5E5E5"> to completely</font>

82
00:04:17,630 --> 00:04:21,529
rewrite the framework and now the new

83
00:04:19,760 --> 00:04:23,450
version<font color="#CCCCCC"> is called angular actually</font><font color="#E5E5E5"> like</font>

84
00:04:21,529 --> 00:04:26,570
without the GS or angular<font color="#E5E5E5"> that IO is the</font>

85
00:04:23,450 --> 00:04:28,940
website<font color="#E5E5E5"> and they did release version</font><font color="#CCCCCC"> 2</font>

86
00:04:26,570 --> 00:04:32,390
so correct<font color="#CCCCCC"> and then they decided</font><font color="#E5E5E5"> to skip</font>

87
00:04:28,940 --> 00:04:33,080
<font color="#E5E5E5">version 3</font><font color="#CCCCCC"> for some naming reasons naming</font>

88
00:04:32,390 --> 00:04:36,020
convention

89
00:04:33,080 --> 00:04:38,719
and yes version<font color="#CCCCCC"> 4 is supposed to</font><font color="#E5E5E5"> be</font>

90
00:04:36,020 --> 00:04:42,789
<font color="#E5E5E5">released in March first on March 1st</font><font color="#CCCCCC"> so</font>

91
00:04:38,720 --> 00:04:45,229
<font color="#CCCCCC">like next week</font><font color="#E5E5E5"> almost</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so yeah</font>

92
00:04:42,789 --> 00:04:48,318
that's where<font color="#E5E5E5"> we are and they are not</font>

93
00:04:45,229 --> 00:04:51,349
backwards compatible<font color="#CCCCCC"> that's one</font><font color="#E5E5E5"> of the</font>

94
00:04:48,319 --> 00:04:54,190
biggest pains of developers<font color="#CCCCCC"> so what is</font>

95
00:04:51,349 --> 00:05:00,409
the software<font color="#E5E5E5"> design pattern that is</font>

96
00:04:54,190 --> 00:05:06,409
angularjs uses anybody else<font color="#CCCCCC"> yep MVC what</font>

97
00:05:00,409 --> 00:05:11,030
is<font color="#CCCCCC"> it</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> sea view controller</font><font color="#E5E5E5"> I'm gonna</font>

98
00:05:06,409 --> 00:05:12,650
throw a candy<font color="#CCCCCC"> I need to work on my arm</font>

99
00:05:11,030 --> 00:05:15,710
muscles but yes they're working<font color="#CCCCCC"> just</font>

100
00:05:12,650 --> 00:05:20,929
<font color="#E5E5E5">downstairs get them all right so MVC</font>

101
00:05:15,710 --> 00:05:22,878
Model View<font color="#E5E5E5"> controller the pattern has</font>

102
00:05:20,930 --> 00:05:25,280
been<font color="#E5E5E5"> around for years</font><font color="#CCCCCC"> right it's not</font>

103
00:05:22,879 --> 00:05:29,150
something<font color="#CCCCCC"> new that angular invented that</font>

104
00:05:25,280 --> 00:05:32,210
<font color="#E5E5E5">seperates model the data in angular case</font>

105
00:05:29,150 --> 00:05:34,580
that's your<font color="#CCCCCC"> scope object the view or</font><font color="#E5E5E5"> the</font>

106
00:05:32,210 --> 00:05:36,409
template the HTML the representation<font color="#E5E5E5"> of</font>

107
00:05:34,580 --> 00:05:39,560
the<font color="#E5E5E5"> data and then the controller is</font><font color="#CCCCCC"> the</font>

108
00:05:36,409 --> 00:05:42,110
code what angular did differently<font color="#E5E5E5"> is</font>

109
00:05:39,560 --> 00:05:44,029
<font color="#E5E5E5">that all</font><font color="#CCCCCC"> of this is now on the</font><font color="#E5E5E5"> client</font>

110
00:05:42,110 --> 00:05:46,370
<font color="#E5E5E5">side</font><font color="#CCCCCC"> like if you think of traditional</font>

111
00:05:44,029 --> 00:05:47,930
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> Java or.net applications you</font>

112
00:05:46,370 --> 00:05:50,120
have your<font color="#E5E5E5"> server-side code you</font><font color="#CCCCCC"> have your</font>

113
00:05:47,930 --> 00:05:53,599
templates which are<font color="#CCCCCC"> usually some sort of</font>

114
00:05:50,120 --> 00:05:55,279
<font color="#E5E5E5">you know HTML</font><font color="#CCCCCC"> files GSP is whatever and</font>

115
00:05:53,599 --> 00:05:57,169
then your<font color="#E5E5E5"> model is the</font><font color="#CCCCCC"> database so the</font>

116
00:05:55,279 --> 00:05:59,870
controller and the<font color="#E5E5E5"> model are usually on</font>

117
00:05:57,169 --> 00:06:03,318
the server side<font color="#E5E5E5"> where angular puts all</font>

118
00:05:59,870 --> 00:06:06,379
<font color="#E5E5E5">of this</font><font color="#CCCCCC"> onto the client side so that's</font>

119
00:06:03,319 --> 00:06:14,779
<font color="#E5E5E5">different and they also call it so</font><font color="#CCCCCC"> MVC</font>

120
00:06:06,379 --> 00:06:16,909
or<font color="#CCCCCC"> M V V Delta VC an MV VM view model so</font>

121
00:06:14,779 --> 00:06:19,219
<font color="#E5E5E5">Model View and then not a controller but</font>

122
00:06:16,909 --> 00:06:23,779
<font color="#CCCCCC">a view model it's kind</font><font color="#E5E5E5"> of an enhanced</font>

123
00:06:19,219 --> 00:06:26,750
view or<font color="#E5E5E5"> mvw which is like Model View</font>

124
00:06:23,779 --> 00:06:29,629
<font color="#E5E5E5">whatever so your controller you</font><font color="#CCCCCC"> can</font>

125
00:06:26,750 --> 00:06:32,060
write code<font color="#E5E5E5"> in whatever way you want as</font>

126
00:06:29,629 --> 00:06:34,460
long<font color="#CCCCCC"> as</font><font color="#E5E5E5"> you but you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> limited to have</font>

127
00:06:32,060 --> 00:06:37,370
the model which is the<font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> scope</font>

128
00:06:34,460 --> 00:06:41,839
<font color="#CCCCCC">object and the view which are the</font>

129
00:06:37,370 --> 00:06:44,089
angular templates and then all<font color="#CCCCCC"> of that</font>

130
00:06:41,839 --> 00:06:45,380
on<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> side interacts with the</font>

131
00:06:44,089 --> 00:06:45,980
server side<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so that's kind of</font>

132
00:06:45,380 --> 00:06:48,080
and

133
00:06:45,980 --> 00:06:55,250
<font color="#E5E5E5">they're here who invented and who</font>

134
00:06:48,080 --> 00:07:02,359
maintains angular<font color="#CCCCCC"> Google Google</font>

135
00:06:55,250 --> 00:07:05,710
maintains<font color="#E5E5E5"> angular that's true</font><font color="#CCCCCC"> this</font>

136
00:07:02,360 --> 00:07:10,100
audience is not good for<font color="#E5E5E5"> throwing candy</font>

137
00:07:05,710 --> 00:07:12,169
<font color="#CCCCCC">yes so invented by mishko Heverly I'm</font>

138
00:07:10,100 --> 00:07:14,900
like<font color="#E5E5E5"> afraid to butcher</font><font color="#CCCCCC"> his name the</font>

139
00:07:12,170 --> 00:07:17,510
<font color="#CCCCCC">Polish researcher then he</font><font color="#E5E5E5"> open-source it</font>

140
00:07:14,900 --> 00:07:20,030
and he has Google supports it maintains

141
00:07:17,510 --> 00:07:23,360
<font color="#E5E5E5">that these days which is a game why</font>

142
00:07:20,030 --> 00:07:26,390
angular<font color="#E5E5E5"> is so popular is because a lot</font>

143
00:07:23,360 --> 00:07:29,240
<font color="#CCCCCC">of</font><font color="#E5E5E5"> companies in</font><font color="#CCCCCC"> the industry are not</font>

144
00:07:26,390 --> 00:07:31,340
afraid<font color="#E5E5E5"> to move to angular because they</font>

145
00:07:29,240 --> 00:07:33,830
know it's gonna be<font color="#E5E5E5"> around for a while</font>

146
00:07:31,340 --> 00:07:36,169
<font color="#E5E5E5">right</font><font color="#CCCCCC"> will I mean if you follow</font>

147
00:07:33,830 --> 00:07:38,270
JavaScript world<font color="#CCCCCC"> there is a new</font>

148
00:07:36,170 --> 00:07:39,440
framework<font color="#E5E5E5"> every couple of weeks and then</font>

149
00:07:38,270 --> 00:07:40,700
<font color="#E5E5E5">like three months later everybody</font>

150
00:07:39,440 --> 00:07:42,440
forgets<font color="#E5E5E5"> about this framework and then</font>

151
00:07:40,700 --> 00:07:44,360
there's a new framework<font color="#CCCCCC"> so if you're a</font>

152
00:07:42,440 --> 00:07:46,790
big business<font color="#E5E5E5"> and you want to rewrite</font><font color="#CCCCCC"> all</font>

153
00:07:44,360 --> 00:07:48,680
your apps<font color="#E5E5E5"> in this new framework</font><font color="#CCCCCC"> you kind</font>

154
00:07:46,790 --> 00:07:50,690
of want to be sure<font color="#CCCCCC"> that it's gonna be</font>

155
00:07:48,680 --> 00:07:52,310
there<font color="#E5E5E5"> that somebody's gonna be fixing</font>

156
00:07:50,690 --> 00:07:55,280
those vulnerabilities<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> gonna</font>

157
00:07:52,310 --> 00:07:57,500
<font color="#E5E5E5">be talking about right</font><font color="#CCCCCC"> so maybe</font><font color="#E5E5E5"> this is</font>

158
00:07:55,280 --> 00:08:00,530
important<font color="#CCCCCC"> what are the benefits of</font>

159
00:07:57,500 --> 00:08:04,300
angular why do people choose<font color="#CCCCCC"> it except</font>

160
00:08:00,530 --> 00:08:04,299
<font color="#E5E5E5">for you</font><font color="#CCCCCC"> know okay my attained by Google</font>

161
00:08:05,620 --> 00:08:11,770
developers venerable<font color="#E5E5E5"> I mean from</font>

162
00:08:08,210 --> 00:08:22,280
<font color="#CCCCCC">developer side from security side from</font>

163
00:08:11,770 --> 00:08:24,380
operations so being able to write

164
00:08:22,280 --> 00:08:26,000
everything in<font color="#E5E5E5"> JavaScript that</font><font color="#CCCCCC"> you have</font>

165
00:08:24,380 --> 00:08:27,650
JavaScript on the client and JavaScript

166
00:08:26,000 --> 00:08:29,060
on the server<font color="#CCCCCC"> well if you</font><font color="#E5E5E5"> take another</font>

167
00:08:27,650 --> 00:08:33,409
framework<font color="#E5E5E5"> that's also front-end</font>

168
00:08:29,060 --> 00:08:36,020
JavaScript framework that like this

169
00:08:33,409 --> 00:08:38,120
<font color="#E5E5E5">doesn't change anything right so</font><font color="#CCCCCC"> that's</font>

170
00:08:36,020 --> 00:08:39,890
that's<font color="#E5E5E5"> a benefit of the</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> if you</font>

171
00:08:38,120 --> 00:08:41,900
choose<font color="#CCCCCC"> JavaScript for</font><font color="#E5E5E5"> the server side</font>

172
00:08:39,890 --> 00:08:45,410
then yes you are all<font color="#E5E5E5"> full stack</font>

173
00:08:41,900 --> 00:08:46,819
JavaScript and it's kind of easier but

174
00:08:45,410 --> 00:08:49,180
anything<font color="#E5E5E5"> else that angular specifically</font>

175
00:08:46,820 --> 00:08:49,180
gives you

176
00:08:55,240 --> 00:09:02,209
so data binding<font color="#CCCCCC"> two-way data-binding</font>

177
00:08:59,959 --> 00:09:03,560
<font color="#CCCCCC">out-of-the-box</font><font color="#E5E5E5"> right again like you can</font>

178
00:09:02,209 --> 00:09:05,209
<font color="#E5E5E5">create data binding with other</font>

179
00:09:03,560 --> 00:09:05,719
<font color="#E5E5E5">frameworks but with angular just it's</font>

180
00:09:05,209 --> 00:09:09,649
there

181
00:09:05,720 --> 00:09:11,660
which means you change the data in the

182
00:09:09,649 --> 00:09:14,959
view at automatically updates on the on

183
00:09:11,660 --> 00:09:16,850
the<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> and in the in the</font>

184
00:09:14,959 --> 00:09:18,560
you change the data in the model<font color="#E5E5E5"> it</font>

185
00:09:16,850 --> 00:09:20,300
<font color="#CCCCCC">automatically this in the view you</font>

186
00:09:18,560 --> 00:09:21,800
change the data in the view as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> user</font>

187
00:09:20,300 --> 00:09:23,839
entering something<font color="#E5E5E5"> it automatically</font>

188
00:09:21,800 --> 00:09:25,699
<font color="#E5E5E5">updates the model so that's</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> single</font>

189
00:09:23,839 --> 00:09:26,829
<font color="#CCCCCC">page applications</font><font color="#E5E5E5"> yep and what else</font><font color="#CCCCCC"> you</font>

190
00:09:25,700 --> 00:09:30,610
<font color="#E5E5E5">said</font>

191
00:09:26,829 --> 00:09:42,769
our dependency injection how is<font color="#E5E5E5"> that a</font>

192
00:09:30,610 --> 00:09:44,180
benefit mm-hmm right so you can inject

193
00:09:42,769 --> 00:09:45,980
your dependencies and when we say

194
00:09:44,180 --> 00:09:48,620
<font color="#E5E5E5">dependence is usually other plugins are</font>

195
00:09:45,980 --> 00:09:50,329
the modules that<font color="#E5E5E5"> give functionality into</font>

196
00:09:48,620 --> 00:09:53,300
your controller like when you need them

197
00:09:50,329 --> 00:09:56,120
<font color="#E5E5E5">right you don't need to collect all</font><font color="#CCCCCC"> the</font>

198
00:09:53,300 --> 00:09:58,130
<font color="#E5E5E5">data all the dependencies all the</font>

199
00:09:56,120 --> 00:10:00,200
libraries and then write the code we can

200
00:09:58,130 --> 00:10:03,620
you<font color="#E5E5E5"> can inject them on the fly</font><font color="#CCCCCC"> which</font>

201
00:10:00,200 --> 00:10:08,870
also makes angular fast<font color="#E5E5E5"> all right did</font>

202
00:10:03,620 --> 00:10:11,149
you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> another testable</font><font color="#CCCCCC"> yes</font>

203
00:10:08,870 --> 00:10:12,890
testability is definitely I'm not<font color="#CCCCCC"> gonna</font>

204
00:10:11,149 --> 00:10:15,020
throw<font color="#E5E5E5"> candy but you yes seriously</font>

205
00:10:12,890 --> 00:10:19,160
<font color="#E5E5E5">because I'm gonna leave them here you</font>

206
00:10:15,020 --> 00:10:22,640
can come back and pick them up yes<font color="#E5E5E5"> so</font>

207
00:10:19,160 --> 00:10:25,069
it's super fast<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> very easy to test</font>

208
00:10:22,640 --> 00:10:27,079
<font color="#E5E5E5">so that</font><font color="#CCCCCC"> and especially for</font><font color="#E5E5E5"> the</font>

209
00:10:25,070 --> 00:10:28,850
client-side framework that is pretty new

210
00:10:27,079 --> 00:10:31,819
the testability was usually you know

211
00:10:28,850 --> 00:10:34,240
pain of existence for developers<font color="#E5E5E5"> so yeah</font>

212
00:10:31,820 --> 00:10:38,899
performance is another really<font color="#E5E5E5"> big one</font>

213
00:10:34,240 --> 00:10:40,100
all right<font color="#CCCCCC"> so if a new RJ essence on the</font>

214
00:10:38,899 --> 00:10:50,839
front end what do we have<font color="#E5E5E5"> on the back</font>

215
00:10:40,100 --> 00:10:53,839
end<font color="#E5E5E5"> no GS anything else</font><font color="#CCCCCC"> okay you can be</font>

216
00:10:50,839 --> 00:10:58,550
<font color="#CCCCCC">sir Ellis what else yeah lambda on the</font>

217
00:10:53,839 --> 00:10:59,990
<font color="#E5E5E5">back end PHP you can have whatever it</font>

218
00:10:58,550 --> 00:11:02,089
doesn't<font color="#E5E5E5"> matter</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> you can have your</font>

219
00:10:59,990 --> 00:11:04,459
old Java you<font color="#CCCCCC"> can have your PHP</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

220
00:11:02,089 --> 00:11:05,510
have Python you can be server list<font color="#E5E5E5"> it</font>

221
00:11:04,459 --> 00:11:08,420
<font color="#E5E5E5">doesn't matter right</font>

222
00:11:05,510 --> 00:11:10,400
front end<font color="#E5E5E5"> as long as</font><font color="#CCCCCC"> whatever is on your</font>

223
00:11:08,420 --> 00:11:12,920
server side is talking<font color="#CCCCCC"> web</font><font color="#E5E5E5"> services</font>

224
00:11:10,400 --> 00:11:15,069
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> all you need</font><font color="#E5E5E5"> right the rest rest</font>

225
00:11:12,920 --> 00:11:18,829
api that<font color="#E5E5E5"> that's all you need</font>

226
00:11:15,070 --> 00:11:23,390
all right what<font color="#CCCCCC"> are the popular</font><font color="#E5E5E5"> types of</font>

227
00:11:18,830 --> 00:11:25,430
applications<font color="#E5E5E5"> and a paradigm or</font>

228
00:11:23,390 --> 00:11:29,720
applications that<font color="#CCCCCC"> we can build with</font>

229
00:11:25,430 --> 00:11:32,239
angular yeah what's this PA<font color="#CCCCCC"> have you</font>

230
00:11:29,720 --> 00:11:37,520
<font color="#CCCCCC">mentioned</font><font color="#E5E5E5"> so what's what's good about</font>

231
00:11:32,240 --> 00:11:39,710
<font color="#CCCCCC">syrup</font><font color="#E5E5E5"> HSV's yes so you don't refresh the</font>

232
00:11:37,520 --> 00:11:41,120
page<font color="#E5E5E5"> every time you don't like reload</font>

233
00:11:39,710 --> 00:11:43,370
the<font color="#CCCCCC"> whole page every time you refresh</font>

234
00:11:41,120 --> 00:11:45,290
<font color="#CCCCCC">the data so you use Ajax you refresh</font>

235
00:11:43,370 --> 00:11:47,870
<font color="#E5E5E5">just like parts of the page and for the</font>

236
00:11:45,290 --> 00:11:50,630
user it looks like a like<font color="#E5E5E5"> desktop</font>

237
00:11:47,870 --> 00:11:54,800
application right so nothing nothing

238
00:11:50,630 --> 00:11:58,370
really<font color="#E5E5E5"> cool alright so I have answers</font>

239
00:11:54,800 --> 00:12:02,660
<font color="#E5E5E5">here just in</font><font color="#CCCCCC"> case I think we pretty much</font>

240
00:11:58,370 --> 00:12:04,040
hit all the points<font color="#CCCCCC"> yeah like if we</font><font color="#E5E5E5"> talk</font>

241
00:12:02,660 --> 00:12:06,020
about<font color="#E5E5E5"> the benefits one thing we didn't</font>

242
00:12:04,040 --> 00:12:07,880
mention<font color="#E5E5E5"> is convenient</font><font color="#CCCCCC"> since high in how</font>

243
00:12:06,020 --> 00:12:11,090
you manipulate the<font color="#CCCCCC"> Dom right the view</font>

244
00:12:07,880 --> 00:12:16,450
that<font color="#E5E5E5"> that that's</font><font color="#CCCCCC"> also much easier</font><font color="#E5E5E5"> with</font>

245
00:12:11,090 --> 00:12:19,640
the framework<font color="#E5E5E5"> but</font><font color="#CCCCCC"> good so what is</font><font color="#E5E5E5"> almost</font>

246
00:12:16,450 --> 00:12:27,710
what is a wasp<font color="#E5E5E5"> anybody heard in the last</font>

247
00:12:19,640 --> 00:12:29,480
<font color="#E5E5E5">pair huh yeah project yes open open</font><font color="#CCCCCC"> web</font>

248
00:12:27,710 --> 00:12:31,300
application security project<font color="#E5E5E5"> and what is</font>

249
00:12:29,480 --> 00:12:39,710
the top<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> list that they come up with</font>

250
00:12:31,300 --> 00:12:42,469
every<font color="#E5E5E5"> couple years the list of most</font>

251
00:12:39,710 --> 00:12:44,300
<font color="#E5E5E5">common security I would</font><font color="#CCCCCC"> say</font>

252
00:12:42,470 --> 00:12:46,370
vulnerabilities not the threats right

253
00:12:44,300 --> 00:12:48,530
because<font color="#CCCCCC"> wrath is slightly different</font>

254
00:12:46,370 --> 00:12:52,780
yes<font color="#E5E5E5"> it's a list of most</font><font color="#CCCCCC"> common</font><font color="#E5E5E5"> and they</font>

255
00:12:48,530 --> 00:12:55,459
get the data from vendors who do

256
00:12:52,780 --> 00:12:59,300
<font color="#CCCCCC">penetration testing and code analysis</font>

257
00:12:55,460 --> 00:13:01,970
right so and yes it's<font color="#E5E5E5"> not the</font><font color="#CCCCCC"> ones that</font>

258
00:12:59,300 --> 00:13:03,770
<font color="#E5E5E5">are more dangerous again it's most</font>

259
00:13:01,970 --> 00:13:07,540
common so that's kind of important to

260
00:13:03,770 --> 00:13:10,880
understand so I would like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> compare</font>

261
00:13:07,540 --> 00:13:12,680
<font color="#E5E5E5">angular like how it applies to the</font><font color="#CCCCCC"> awasa</font>

262
00:13:10,880 --> 00:13:16,040
top<font color="#CCCCCC"> ten list and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a list</font><font color="#E5E5E5"> from</font>

263
00:13:12,680 --> 00:13:18,949
2013 which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the latest which is crazy</font>

264
00:13:16,040 --> 00:13:22,779
<font color="#E5E5E5">because we are in 2017 but</font><font color="#CCCCCC"> they are kind</font>

265
00:13:18,950 --> 00:13:29,149
don't know<font color="#CCCCCC"> what updating lists because</font>

266
00:13:22,779 --> 00:13:31,070
<font color="#E5E5E5">I've seen courses in the industry that</font>

267
00:13:29,149 --> 00:13:35,240
<font color="#E5E5E5">say you know what's top</font><font color="#CCCCCC"> ten for angular</font>

268
00:13:31,070 --> 00:13:38,120
or talks<font color="#CCCCCC"> and I'm thinking this</font><font color="#E5E5E5"> is a</font>

269
00:13:35,240 --> 00:13:39,920
client-side framework<font color="#CCCCCC"> it</font><font color="#E5E5E5"> cannot have all</font>

270
00:13:38,120 --> 00:13:42,709
the worst of ten vulnerabilities like

271
00:13:39,920 --> 00:13:44,660
this is just wrong<font color="#CCCCCC"> but let's let's look</font>

272
00:13:42,709 --> 00:13:48,199
<font color="#E5E5E5">at each of them and see</font><font color="#CCCCCC"> if it actually</font>

273
00:13:44,660 --> 00:13:51,680
<font color="#E5E5E5">applies so the first one and it was is</font>

274
00:13:48,199 --> 00:13:55,579
injection<font color="#CCCCCC"> and</font><font color="#E5E5E5"> usually when we</font><font color="#CCCCCC"> talk about</font>

275
00:13:51,680 --> 00:13:57,649
injections we talk about<font color="#E5E5E5"> a single</font>

276
00:13:55,579 --> 00:14:00,439
injection command injection<font color="#CCCCCC"> LDAP</font>

277
00:13:57,649 --> 00:14:02,600
injection right like in<font color="#E5E5E5"> the first talk</font>

278
00:14:00,440 --> 00:14:04,730
that when we talked about the<font color="#E5E5E5"> ADEs you</font>

279
00:14:02,600 --> 00:14:06,440
can also instead of sending your

280
00:14:04,730 --> 00:14:07,850
password you<font color="#CCCCCC"> can send some OSHA's</font>

281
00:14:06,440 --> 00:14:10,670
characters which are<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> actually</font>

282
00:14:07,850 --> 00:14:22,420
<font color="#CCCCCC">change your</font><font color="#E5E5E5"> LDAP query and have an</font>

283
00:14:10,670 --> 00:14:25,459
injection<font color="#E5E5E5"> does that apply to angular why</font>

284
00:14:22,420 --> 00:14:27,260
<font color="#E5E5E5">template injection right so</font><font color="#CCCCCC"> that that's</font>

285
00:14:25,459 --> 00:14:29,119
good<font color="#E5E5E5"> so because we</font><font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> a database</font>

286
00:14:27,260 --> 00:14:31,730
<font color="#E5E5E5">on the client</font><font color="#CCCCCC"> side so sequel injection</font>

287
00:14:29,120 --> 00:14:33,079
doesn't really work command injection is

288
00:14:31,730 --> 00:14:35,810
coming<font color="#E5E5E5"> like a usual operating system</font>

289
00:14:33,079 --> 00:14:39,739
command<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> in the browser so</font><font color="#CCCCCC"> doesn't</font>

290
00:14:35,810 --> 00:14:41,959
<font color="#E5E5E5">really work LDAP obviously not but</font>

291
00:14:39,740 --> 00:14:44,269
template inject an injection is one type

292
00:14:41,959 --> 00:14:45,560
that<font color="#E5E5E5"> angular has and we'll we'll have</font><font color="#CCCCCC"> a</font>

293
00:14:44,269 --> 00:14:47,329
slide<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that we'll look at some</font>

294
00:14:45,560 --> 00:14:49,369
<font color="#CCCCCC">examples</font>

295
00:14:47,329 --> 00:14:53,390
broken authentication and session

296
00:14:49,370 --> 00:14:58,790
management<font color="#E5E5E5"> so like bypassing you know</font>

297
00:14:53,390 --> 00:15:01,100
<font color="#E5E5E5">login pages does it apply to a client</font>

298
00:14:58,790 --> 00:15:04,819
side app to the client<font color="#E5E5E5"> side part of</font>

299
00:15:01,100 --> 00:15:06,740
<font color="#E5E5E5">there huh it shouldn't where do you</font>

300
00:15:04,819 --> 00:15:09,019
check<font color="#E5E5E5"> if the password</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> correct</font>

301
00:15:06,740 --> 00:15:10,100
<font color="#E5E5E5">password</font><font color="#CCCCCC"> on the server right</font><font color="#E5E5E5"> you</font>

302
00:15:09,019 --> 00:15:11,779
shouldn't<font color="#E5E5E5"> be checking her head on the</font>

303
00:15:10,100 --> 00:15:14,920
client because<font color="#CCCCCC"> then it's definitely</font>

304
00:15:11,779 --> 00:15:19,010
possible<font color="#CCCCCC"> so that doesn't really apply</font>

305
00:15:14,920 --> 00:15:21,349
<font color="#E5E5E5">cross-site scripting yes</font><font color="#CCCCCC"> like that's the</font>

306
00:15:19,010 --> 00:15:23,480
one big I mean we're talking<font color="#CCCCCC"> JavaScript</font>

307
00:15:21,350 --> 00:15:25,940
we're talking<font color="#E5E5E5"> client-side so obviously</font>

308
00:15:23,480 --> 00:15:27,319
all<font color="#E5E5E5"> the injections here into</font><font color="#CCCCCC"> JavaScript</font>

309
00:15:25,940 --> 00:15:29,089
are gonna end up<font color="#E5E5E5"> with cross-site</font>

310
00:15:27,319 --> 00:15:32,089
scripting<font color="#E5E5E5"> well not all of it like</font><font color="#CCCCCC"> that</font>

311
00:15:29,089 --> 00:15:46,339
most common one<font color="#E5E5E5"> insecure direct object</font>

312
00:15:32,089 --> 00:15:48,620
reference<font color="#E5E5E5"> what is that so</font>

313
00:15:46,339 --> 00:15:50,209
you're accessing objects directly<font color="#E5E5E5"> in the</font>

314
00:15:48,620 --> 00:15:51,019
database<font color="#CCCCCC"> instead of</font><font color="#E5E5E5"> going through a</font>

315
00:15:50,209 --> 00:15:54,339
<font color="#E5E5E5">getter a setter</font>

316
00:15:51,019 --> 00:15:59,120
I mean you are accessing them anyways

317
00:15:54,339 --> 00:16:00,529
<font color="#E5E5E5">what it says</font><font color="#CCCCCC"> direct object reference</font><font color="#E5E5E5"> the</font>

318
00:15:59,120 --> 00:16:03,800
<font color="#CCCCCC">reference</font><font color="#E5E5E5"> is kind of the key word here</font>

319
00:16:00,529 --> 00:16:06,980
is that if you<font color="#E5E5E5"> access an object directly</font>

320
00:16:03,800 --> 00:16:09,649
<font color="#CCCCCC">by an ID</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is used in the database</font>

321
00:16:06,980 --> 00:16:13,459
<font color="#CCCCCC">for example why this is dangerous is</font>

322
00:16:09,649 --> 00:16:16,100
<font color="#CCCCCC">because if</font><font color="#E5E5E5"> I know this is the ID of my</font>

323
00:16:13,459 --> 00:16:17,989
bank account<font color="#CCCCCC"> right that's the one</font><font color="#E5E5E5"> that's</font>

324
00:16:16,100 --> 00:16:20,329
used in the database and then<font color="#E5E5E5"> I can</font>

325
00:16:17,990 --> 00:16:22,399
somehow find<font color="#E5E5E5"> out what's your</font><font color="#CCCCCC"> the idea of</font>

326
00:16:20,329 --> 00:16:24,170
your bank account then I just switch the

327
00:16:22,399 --> 00:16:26,569
<font color="#E5E5E5">IDs and</font><font color="#CCCCCC"> I have access to</font><font color="#E5E5E5"> your bank</font>

328
00:16:24,170 --> 00:16:29,240
account<font color="#CCCCCC"> right</font><font color="#E5E5E5"> instead there should be</font>

329
00:16:26,569 --> 00:16:30,469
some sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> mapping where it shows me</font>

330
00:16:29,240 --> 00:16:31,759
on the website<font color="#CCCCCC"> you know this is your</font>

331
00:16:30,470 --> 00:16:33,679
account number<font color="#E5E5E5"> but it's not the same</font>

332
00:16:31,759 --> 00:16:36,139
<font color="#E5E5E5">number that's</font><font color="#CCCCCC"> used in the database there</font>

333
00:16:33,679 --> 00:16:42,379
should<font color="#E5E5E5"> be mapping so does</font><font color="#CCCCCC"> that apply</font><font color="#E5E5E5"> to</font>

334
00:16:36,139 --> 00:16:45,259
your front-end framework again<font color="#E5E5E5"> checking</font>

335
00:16:42,379 --> 00:16:46,519
that is on the<font color="#CCCCCC"> server-side</font><font color="#E5E5E5"> right you can</font>

336
00:16:45,259 --> 00:16:48,110
change the<font color="#CCCCCC"> IDs on the client-side but</font>

337
00:16:46,519 --> 00:16:50,360
like the protection<font color="#CCCCCC"> should</font><font color="#E5E5E5"> be on the</font>

338
00:16:48,110 --> 00:16:52,759
<font color="#CCCCCC">service</font><font color="#E5E5E5"> side</font><font color="#CCCCCC"> should be in your</font><font color="#E5E5E5"> Java code</font>

339
00:16:50,360 --> 00:16:57,019
into<font color="#CCCCCC"> your in</font><font color="#E5E5E5"> your PHP code so that's not</font>

340
00:16:52,759 --> 00:17:00,199
really<font color="#E5E5E5"> security Mis configuration yes</font>

341
00:16:57,019 --> 00:17:02,029
it's a framework<font color="#CCCCCC"> it has features but you</font>

342
00:17:00,199 --> 00:17:03,290
can turn on and turn off<font color="#E5E5E5"> if you turn</font>

343
00:17:02,029 --> 00:17:06,069
them like security features off

344
00:17:03,290 --> 00:17:09,709
<font color="#CCCCCC">obviously you're gonna be broken</font>

345
00:17:06,069 --> 00:17:13,250
sensitive data exposure that's usually

346
00:17:09,709 --> 00:17:15,350
when we you know<font color="#E5E5E5"> save those account</font>

347
00:17:13,250 --> 00:17:17,959
numbers for example<font color="#E5E5E5"> display</font><font color="#CCCCCC"> them on</font><font color="#E5E5E5"> the</font>

348
00:17:15,349 --> 00:17:19,458
<font color="#CCCCCC">client-side or you know</font><font color="#E5E5E5"> I think credit</font>

349
00:17:17,959 --> 00:17:23,510
<font color="#CCCCCC">card numbers display them</font><font color="#E5E5E5"> on the client</font>

350
00:17:19,459 --> 00:17:25,010
<font color="#E5E5E5">side so on one</font><font color="#CCCCCC"> hand with the web page I</font>

351
00:17:23,510 --> 00:17:26,599
mean you have to display those<font color="#E5E5E5"> things</font>

352
00:17:25,010 --> 00:17:28,789
for the user if the<font color="#CCCCCC"> user wants to see</font>

353
00:17:26,599 --> 00:17:31,070
their account number<font color="#E5E5E5"> they have to see</font>

354
00:17:28,789 --> 00:17:33,470
the<font color="#E5E5E5"> account number but what you</font>

355
00:17:31,070 --> 00:17:37,840
shouldn't<font color="#CCCCCC"> be doing</font><font color="#E5E5E5"> is storing these</font>

356
00:17:33,470 --> 00:17:40,850
things on the client side<font color="#CCCCCC"> and so angular</font>

357
00:17:37,840 --> 00:17:43,000
<font color="#CCCCCC">gives you kind of a wrapper around the</font>

358
00:17:40,850 --> 00:17:51,070
object that's called local storage and

359
00:17:43,000 --> 00:17:53,380
script<font color="#E5E5E5"> what does local search do keep</font>

360
00:17:51,070 --> 00:17:56,439
stuff in the browser<font color="#CCCCCC"> even when you log</font>

361
00:17:53,380 --> 00:17:59,110
off<font color="#CCCCCC"> the</font><font color="#E5E5E5"> application so that's the</font>

362
00:17:56,440 --> 00:18:00,850
important kind<font color="#E5E5E5"> of hard right</font><font color="#CCCCCC"> there like</font>

363
00:17:59,110 --> 00:18:02,800
in other places where<font color="#CCCCCC"> you</font><font color="#E5E5E5"> store in just</font>

364
00:18:00,850 --> 00:18:04,060
the memory of the browser<font color="#E5E5E5"> you log off</font>

365
00:18:02,800 --> 00:18:06,730
you close your<font color="#E5E5E5"> browser</font><font color="#CCCCCC"> you close your</font>

366
00:18:04,060 --> 00:18:08,260
<font color="#E5E5E5">computer data is gone</font><font color="#CCCCCC"> it's fine</font><font color="#E5E5E5"> with the</font>

367
00:18:06,730 --> 00:18:10,750
local storage<font color="#CCCCCC"> it's gonna be there</font>

368
00:18:08,260 --> 00:18:13,030
<font color="#E5E5E5">persistent forever so if anybody else</font>

369
00:18:10,750 --> 00:18:16,770
uses the<font color="#E5E5E5"> same computer they can</font><font color="#CCCCCC"> get data</font>

370
00:18:13,030 --> 00:18:19,800
and<font color="#E5E5E5"> it can can get that information</font>

371
00:18:16,770 --> 00:18:24,280
missing function level access controls

372
00:18:19,800 --> 00:18:28,780
easy<font color="#CCCCCC"> a year to say authorization does</font>

373
00:18:24,280 --> 00:18:38,290
<font color="#E5E5E5">that apply to from that what is a</font>

374
00:18:28,780 --> 00:18:40,629
<font color="#E5E5E5">Thursday</font><font color="#CCCCCC"> ssin compared to education yeah</font>

375
00:18:38,290 --> 00:18:42,340
authorization<font color="#CCCCCC"> is authentications you</font>

376
00:18:40,630 --> 00:18:43,600
<font color="#E5E5E5">offer your authorization is what you can</font>

377
00:18:42,340 --> 00:18:46,419
do what<font color="#E5E5E5"> is</font><font color="#CCCCCC"> your role what are your</font>

378
00:18:43,600 --> 00:18:47,550
rights<font color="#CCCCCC"> so do we check the rights on the</font>

379
00:18:46,420 --> 00:18:50,910
<font color="#E5E5E5">client side</font>

380
00:18:47,550 --> 00:18:54,070
we should not<font color="#E5E5E5"> right so in this case</font>

381
00:18:50,910 --> 00:18:56,410
<font color="#CCCCCC">Connor</font><font color="#E5E5E5"> I mean if you do authorization on</font>

382
00:18:54,070 --> 00:18:58,659
the client side<font color="#CCCCCC"> in angular</font><font color="#E5E5E5"> that's a</font>

383
00:18:56,410 --> 00:19:02,020
problem<font color="#E5E5E5"> so you shouldn't be doing</font><font color="#CCCCCC"> that</font>

384
00:18:58,660 --> 00:19:04,090
<font color="#E5E5E5">but it's funny if you look up on like</font>

385
00:19:02,020 --> 00:19:05,560
Stack Overflow<font color="#E5E5E5"> angular</font><font color="#CCCCCC"> ization there are</font>

386
00:19:04,090 --> 00:19:09,250
articles that<font color="#E5E5E5"> will tell you how to do</font>

387
00:19:05,560 --> 00:19:11,440
<font color="#E5E5E5">that</font><font color="#CCCCCC"> and somewhere</font><font color="#E5E5E5"> in the you know</font><font color="#CCCCCC"> fine</font>

388
00:19:09,250 --> 00:19:13,510
print<font color="#E5E5E5"> on the bottom they're gonna say oh</font>

389
00:19:11,440 --> 00:19:17,220
and<font color="#E5E5E5"> by the way you should</font><font color="#CCCCCC"> also validate</font>

390
00:19:13,510 --> 00:19:19,450
that on the server<font color="#E5E5E5"> but if</font><font color="#CCCCCC"> you if your</font>

391
00:19:17,220 --> 00:19:21,820
regular developer you copy and paste

392
00:19:19,450 --> 00:19:23,650
stuff<font color="#E5E5E5"> from over Stack Overflow</font><font color="#CCCCCC"> it's</font>

393
00:19:21,820 --> 00:19:25,149
gonna mean<font color="#CCCCCC"> that you're</font><font color="#E5E5E5"> gonna check all</font>

394
00:19:23,650 --> 00:19:27,120
<font color="#CCCCCC">of it with</font><font color="#E5E5E5"> your rights on the client</font>

395
00:19:25,150 --> 00:19:30,580
<font color="#E5E5E5">side and that's gonna be a problem</font>

396
00:19:27,120 --> 00:19:34,719
outer circle<font color="#E5E5E5"> all right</font>

397
00:19:30,580 --> 00:19:37,360
what is<font color="#CCCCCC"> CSR</font><font color="#E5E5E5"> cross-site request forgery</font>

398
00:19:34,720 --> 00:19:41,710
<font color="#E5E5E5">forgery so</font><font color="#CCCCCC"> another vulnerability where</font>

399
00:19:37,360 --> 00:19:43,770
you can trick a<font color="#CCCCCC"> user into submitting</font><font color="#E5E5E5"> a</font>

400
00:19:41,710 --> 00:19:48,010
request<font color="#E5E5E5"> that they didn't want to submit</font>

401
00:19:43,770 --> 00:19:52,870
and thus kind of<font color="#CCCCCC"> caused havoc so for</font>

402
00:19:48,010 --> 00:19:54,760
example I log<font color="#CCCCCC"> in to my</font><font color="#E5E5E5"> Facebook and then</font>

403
00:19:52,870 --> 00:19:56,439
somebody sends<font color="#CCCCCC"> me an email and says hey</font>

404
00:19:54,760 --> 00:19:58,120
look at this<font color="#CCCCCC"> video funny cats</font>

405
00:19:56,440 --> 00:20:00,040
and I click on<font color="#E5E5E5"> this link</font><font color="#CCCCCC"> that I don't</font>

406
00:19:58,120 --> 00:20:01,959
know you know actually where it goes and

407
00:20:00,040 --> 00:20:04,720
I look at the video<font color="#E5E5E5"> funny cats I'm gonna</font>

408
00:20:01,960 --> 00:20:06,760
go back to my<font color="#CCCCCC"> Facebook</font><font color="#E5E5E5"> and they posted</font>

409
00:20:04,720 --> 00:20:09,850
something<font color="#E5E5E5"> under my</font><font color="#CCCCCC"> account right somehow</font>

410
00:20:06,760 --> 00:20:12,100
<font color="#E5E5E5">stuff got posted or my picture got</font>

411
00:20:09,850 --> 00:20:13,750
updated<font color="#CCCCCC"> or you know and if it wasn't a</font>

412
00:20:12,100 --> 00:20:16,780
<font color="#CCCCCC">Facebook it</font><font color="#E5E5E5"> was like a banking side then</font>

413
00:20:13,750 --> 00:20:20,050
of course you can do much more harm so

414
00:20:16,780 --> 00:20:23,379
angular actually<font color="#E5E5E5"> provides some</font>

415
00:20:20,050 --> 00:20:26,230
protection<font color="#CCCCCC"> from</font><font color="#E5E5E5"> Caesar again which</font>

416
00:20:23,380 --> 00:20:28,210
should be in confluence<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the server</font>

417
00:20:26,230 --> 00:20:29,710
part<font color="#E5E5E5"> of the implementation right you can</font>

418
00:20:28,210 --> 00:20:31,930
also you should also check<font color="#CCCCCC"> that stuff on</font>

419
00:20:29,710 --> 00:20:34,420
the<font color="#E5E5E5"> server side components with known</font>

420
00:20:31,930 --> 00:20:36,850
vulnerabilities yes

421
00:20:34,420 --> 00:20:38,530
so because<font color="#E5E5E5"> angular is an open source</font>

422
00:20:36,850 --> 00:20:40,929
framework<font color="#E5E5E5"> and there are all the plugins</font>

423
00:20:38,530 --> 00:20:43,420
<font color="#E5E5E5">if a plugin that you</font><font color="#CCCCCC"> are using has a</font>

424
00:20:40,930 --> 00:20:44,830
problem<font color="#CCCCCC"> and you include</font><font color="#E5E5E5"> it when your</font>

425
00:20:43,420 --> 00:20:48,240
<font color="#CCCCCC">application has</font><font color="#E5E5E5"> a problem so that's</font>

426
00:20:44,830 --> 00:20:51,399
definitely an<font color="#CCCCCC"> issue and then unvalidated</font>

427
00:20:48,240 --> 00:20:54,000
<font color="#E5E5E5">redirects and forwards what is what is</font>

428
00:20:51,400 --> 00:20:54,000
what<font color="#CCCCCC"> is that</font>

429
00:20:56,040 --> 00:21:05,290
what's the redirect you're sending a

430
00:21:02,920 --> 00:21:07,660
user from one website<font color="#E5E5E5"> to another website</font>

431
00:21:05,290 --> 00:21:09,909
<font color="#E5E5E5">right so basically you're</font><font color="#CCCCCC"> you're</font>

432
00:21:07,660 --> 00:21:13,870
<font color="#E5E5E5">creating a link that starts with your</font>

433
00:21:09,910 --> 00:21:16,480
you know<font color="#CCCCCC"> Albert a</font><font color="#E5E5E5"> University dot edu and</font>

434
00:21:13,870 --> 00:21:19,030
then there<font color="#E5E5E5"> are some parameters but then</font>

435
00:21:16,480 --> 00:21:22,450
when the user<font color="#E5E5E5"> clicks on</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the user is</font>

436
00:21:19,030 --> 00:21:25,060
actually redirected to<font color="#E5E5E5"> some malicious</font>

437
00:21:22,450 --> 00:21:27,130
<font color="#CCCCCC">website and so those</font><font color="#E5E5E5"> are using the</font>

438
00:21:25,060 --> 00:21:28,030
phishing attacks right when somebody

439
00:21:27,130 --> 00:21:30,340
<font color="#CCCCCC">sends you</font><font color="#E5E5E5"> an email</font>

440
00:21:28,030 --> 00:21:32,830
it looks like the link starts with the

441
00:21:30,340 --> 00:21:35,320
domain<font color="#E5E5E5"> that you trust but because there</font>

442
00:21:32,830 --> 00:21:36,669
is problem in the code<font color="#E5E5E5"> when you click</font><font color="#CCCCCC"> on</font>

443
00:21:35,320 --> 00:21:38,050
<font color="#E5E5E5">it you actually get</font><font color="#CCCCCC"> redirected somewhere</font>

444
00:21:36,670 --> 00:21:39,970
<font color="#E5E5E5">else and then you don't check you</font><font color="#CCCCCC"> know a</font>

445
00:21:38,050 --> 00:21:41,770
<font color="#E5E5E5">usual user wouldn't check the URL</font><font color="#CCCCCC"> all</font>

446
00:21:39,970 --> 00:21:44,110
the time and they end<font color="#CCCCCC"> up</font><font color="#E5E5E5"> on a</font><font color="#CCCCCC"> different</font>

447
00:21:41,770 --> 00:21:46,240
website<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they're you know</font><font color="#E5E5E5"> asked to</font>

448
00:21:44,110 --> 00:21:48,550
provide<font color="#E5E5E5"> their credentials or something</font>

449
00:21:46,240 --> 00:21:52,960
else<font color="#E5E5E5"> and you can do that on the</font><font color="#CCCCCC"> client</font>

450
00:21:48,550 --> 00:21:54,159
side<font color="#E5E5E5"> so yes so that applies so these are</font>

451
00:21:52,960 --> 00:21:55,870
kind<font color="#CCCCCC"> of the things that you will talk</font>

452
00:21:54,160 --> 00:21:58,240
about when you think about angular

453
00:21:55,870 --> 00:22:01,659
security<font color="#E5E5E5"> you know the other what things</font>

454
00:21:58,240 --> 00:22:01,990
don't<font color="#CCCCCC"> really apply</font><font color="#E5E5E5"> so that's good</font><font color="#CCCCCC"> to</font>

455
00:22:01,660 --> 00:22:05,590
know

456
00:22:01,990 --> 00:22:08,350
so let's look<font color="#E5E5E5"> at the security things</font>

457
00:22:05,590 --> 00:22:10,059
that are built into angular<font color="#CCCCCC"> out</font><font color="#E5E5E5"> of the</font>

458
00:22:08,350 --> 00:22:12,129
<font color="#E5E5E5">box</font>

459
00:22:10,059 --> 00:22:14,918
and those are the things<font color="#E5E5E5"> that make</font>

460
00:22:12,129 --> 00:22:17,408
angular really really cool<font color="#E5E5E5"> really good</font>

461
00:22:14,919 --> 00:22:20,559
<font color="#E5E5E5">so one thing is they have built-in</font>

462
00:22:17,409 --> 00:22:24,340
<font color="#E5E5E5">output encoding contextually aware</font>

463
00:22:20,559 --> 00:22:26,168
output encoding<font color="#E5E5E5"> and strict contextual</font>

464
00:22:24,340 --> 00:22:30,399
escaping<font color="#E5E5E5"> so those are two different</font>

465
00:22:26,169 --> 00:22:33,129
<font color="#E5E5E5">things</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> default when you display some</font>

466
00:22:30,399 --> 00:22:36,248
data on the page<font color="#E5E5E5"> depending on if this</font>

467
00:22:33,129 --> 00:22:38,349
<font color="#E5E5E5">data is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be inside your HTML</font><font color="#CCCCCC"> or</font>

468
00:22:36,249 --> 00:22:41,259
if it's gonna be<font color="#E5E5E5"> in a URL or if it's</font>

469
00:22:38,349 --> 00:22:44,109
<font color="#E5E5E5">gonna be in the your CSS for example</font>

470
00:22:41,259 --> 00:22:46,899
<font color="#E5E5E5">angular will understand the context</font>

471
00:22:44,109 --> 00:22:50,320
<font color="#E5E5E5">where the data is and it's gonna</font><font color="#CCCCCC"> encode</font>

472
00:22:46,899 --> 00:22:54,968
<font color="#CCCCCC">it in the right context</font><font color="#E5E5E5"> so here for</font>

473
00:22:50,320 --> 00:22:57,218
example we<font color="#CCCCCC"> are outputting something into</font>

474
00:22:54,969 --> 00:22:59,499
the<font color="#E5E5E5"> paragraph tag into the P right and</font>

475
00:22:57,219 --> 00:23:02,279
we have our<font color="#E5E5E5"> you know go to take our</font>

476
00:22:59,499 --> 00:23:04,929
controller<font color="#E5E5E5"> HTML controller dot HTM</font>

477
00:23:02,279 --> 00:23:08,109
variable and stick<font color="#E5E5E5"> whatever is there</font>

478
00:23:04,929 --> 00:23:11,589
into the page<font color="#E5E5E5"> so we're not applying any</font>

479
00:23:08,109 --> 00:23:13,119
function<font color="#E5E5E5"> that says escape HTML and code</font>

480
00:23:11,589 --> 00:23:15,039
HTML<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would what you would do in</font>

481
00:23:13,119 --> 00:23:17,619
your<font color="#E5E5E5"> like traditional</font><font color="#CCCCCC"> java</font><font color="#E5E5E5"> applications</font>

482
00:23:15,039 --> 00:23:21,009
here angular will do this work<font color="#CCCCCC"> for you</font>

483
00:23:17,619 --> 00:23:23,589
and we'll end up<font color="#E5E5E5"> with the so if this</font>

484
00:23:21,009 --> 00:23:27,399
code<font color="#E5E5E5"> if this</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> had some HTML</font>

485
00:23:23,589 --> 00:23:29,289
characters it would encode them and put

486
00:23:27,399 --> 00:23:31,449
you<font color="#E5E5E5"> know less</font><font color="#CCCCCC"> than greater than</font><font color="#E5E5E5"> the end</font>

487
00:23:29,289 --> 00:23:33,700
of your<font color="#E5E5E5"> angle brackets encode all the</font>

488
00:23:31,450 --> 00:23:37,029
malicious characters<font color="#E5E5E5"> so in this case in</font>

489
00:23:33,700 --> 00:23:38,950
the result the HTML characters are<font color="#E5E5E5"> not</font>

490
00:23:37,029 --> 00:23:41,710
going to be executed<font color="#E5E5E5"> by the browser</font><font color="#CCCCCC"> so</font>

491
00:23:38,950 --> 00:23:45,129
there's not<font color="#E5E5E5"> going to be any attack so</font>

492
00:23:41,710 --> 00:23:50,440
that's<font color="#CCCCCC"> great</font><font color="#E5E5E5"> then the second one is the</font>

493
00:23:45,129 --> 00:23:55,029
<font color="#CCCCCC">strip contextual escaping the encoding</font>

494
00:23:50,440 --> 00:23:57,729
is good<font color="#E5E5E5"> but your user will see the HTML</font>

495
00:23:55,029 --> 00:24:00,940
<font color="#E5E5E5">tags on the page</font><font color="#CCCCCC"> so from the</font><font color="#E5E5E5"> usability</font>

496
00:23:57,729 --> 00:24:02,529
perspective<font color="#E5E5E5"> that's not good</font><font color="#CCCCCC"> that's just</font>

497
00:24:00,940 --> 00:24:04,419
you know<font color="#E5E5E5"> now that's usable sort of</font>

498
00:24:02,529 --> 00:24:05,710
having a<font color="#E5E5E5"> user name it's gonna see you</font>

499
00:24:04,419 --> 00:24:08,320
know and you'll break it

500
00:24:05,710 --> 00:24:11,109
<font color="#E5E5E5">I for example</font><font color="#CCCCCC"> and then the angle bracket</font>

501
00:24:08,320 --> 00:24:11,589
<font color="#E5E5E5">close</font><font color="#CCCCCC"> eye</font><font color="#E5E5E5"> etcetera and that's</font><font color="#CCCCCC"> not what</font>

502
00:24:11,109 --> 00:24:14,080
we want

503
00:24:11,589 --> 00:24:16,690
sometimes as developers have<font color="#CCCCCC"> specialist</font>

504
00:24:14,080 --> 00:24:19,478
designers<font color="#E5E5E5"> we want to apply some you know</font>

505
00:24:16,690 --> 00:24:22,720
<font color="#CCCCCC">bonds some italics some bold some put in</font>

506
00:24:19,479 --> 00:24:23,530
some<font color="#E5E5E5"> images but we don't want to let the</font>

507
00:24:22,720 --> 00:24:25,630
attacker put in

508
00:24:23,530 --> 00:24:28,870
any JavaScript<font color="#E5E5E5"> in there</font><font color="#CCCCCC"> right anything</font>

509
00:24:25,630 --> 00:24:32,020
<font color="#E5E5E5">malicious so what angular will do for</font>

510
00:24:28,870 --> 00:24:34,449
you<font color="#CCCCCC"> if will</font><font color="#E5E5E5"> automatically strip all the</font>

511
00:24:32,020 --> 00:24:36,340
<font color="#E5E5E5">bad stuff and leave all</font><font color="#CCCCCC"> the good</font><font color="#E5E5E5"> stuff</font>

512
00:24:34,450 --> 00:24:39,130
in there<font color="#E5E5E5"> and this is done with</font><font color="#CCCCCC"> the</font>

513
00:24:36,340 --> 00:24:41,620
<font color="#CCCCCC">strict contextual escaping</font><font color="#E5E5E5"> so again</font>

514
00:24:39,130 --> 00:24:44,140
based on the context<font color="#E5E5E5"> it's gonna well</font>

515
00:24:41,620 --> 00:24:49,270
they call it<font color="#E5E5E5"> escaping but it's basically</font>

516
00:24:44,140 --> 00:24:52,960
<font color="#E5E5E5">stripping or sanitizing your</font><font color="#CCCCCC"> input it is</font>

517
00:24:49,270 --> 00:24:54,190
enabled<font color="#E5E5E5"> from version 1.2 of angular</font><font color="#CCCCCC"> and</font>

518
00:24:52,960 --> 00:24:55,660
<font color="#E5E5E5">higher hopefully you're not gonna use</font>

519
00:24:54,190 --> 00:24:58,330
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> you know lower than</font><font color="#E5E5E5"> that it</font>

520
00:24:55,660 --> 00:25:01,750
didn't<font color="#E5E5E5"> exist before that</font><font color="#CCCCCC"> you have to</font>

521
00:24:58,330 --> 00:25:03,730
include module<font color="#E5E5E5"> ng</font><font color="#CCCCCC"> sanitized</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to be</font>

522
00:25:01,750 --> 00:25:05,770
used if<font color="#E5E5E5"> you don't you're gonna see an</font>

523
00:25:03,730 --> 00:25:08,050
error message<font color="#E5E5E5"> in your console so again</font>

524
00:25:05,770 --> 00:25:09,970
like it's<font color="#E5E5E5"> not that if you don't include</font>

525
00:25:08,050 --> 00:25:12,639
it<font color="#E5E5E5"> your your code</font><font color="#CCCCCC"> just won't work</font><font color="#E5E5E5"> so</font>

526
00:25:09,970 --> 00:25:16,500
<font color="#CCCCCC">most</font><font color="#E5E5E5"> likely you will include it</font><font color="#CCCCCC"> you can</font>

527
00:25:12,640 --> 00:25:20,200
turn<font color="#E5E5E5"> it off manually you can do in your</font>

528
00:25:16,500 --> 00:25:24,820
<font color="#CCCCCC">config of the application</font><font color="#E5E5E5"> SC provider</font>

529
00:25:20,200 --> 00:25:27,430
enabled<font color="#CCCCCC"> sets to false</font><font color="#E5E5E5"> which is then dumb</font>

530
00:25:24,820 --> 00:25:28,899
because<font color="#E5E5E5"> this is a really good protection</font>

531
00:25:27,430 --> 00:25:32,530
<font color="#E5E5E5">and if you are doing</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> something like</font>

532
00:25:28,900 --> 00:25:34,780
<font color="#CCCCCC">that then something is wrong or if you</font>

533
00:25:32,530 --> 00:25:36,879
have to turn<font color="#E5E5E5"> it off you</font><font color="#CCCCCC"> can turn it off</font>

534
00:25:34,780 --> 00:25:39,910
with the<font color="#E5E5E5"> SCE</font>

535
00:25:36,880 --> 00:25:41,860
<font color="#E5E5E5">trust as or</font><font color="#CCCCCC"> a trust as HTML function and</font>

536
00:25:39,910 --> 00:25:44,080
you will turn<font color="#E5E5E5"> it this protection</font><font color="#CCCCCC"> off for</font>

537
00:25:41,860 --> 00:25:46,060
one specific field<font color="#CCCCCC"> if you have this</font><font color="#E5E5E5"> one</font>

538
00:25:44,080 --> 00:25:49,590
field where you<font color="#CCCCCC"> have to inject something</font>

539
00:25:46,060 --> 00:25:53,169
<font color="#E5E5E5">that angular</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> otherwise filter out</font>

540
00:25:49,590 --> 00:25:56,050
you can<font color="#CCCCCC"> use that but you better be sure</font>

541
00:25:53,170 --> 00:25:58,270
that whatever you're inserting<font color="#CCCCCC"> is you</font>

542
00:25:56,050 --> 00:26:00,399
trust that<font color="#E5E5E5"> code it's not affected by an</font>

543
00:25:58,270 --> 00:26:02,170
attacker because<font color="#E5E5E5"> otherwise somebody can</font>

544
00:26:00,400 --> 00:26:03,820
inject some malicious JavaScript and

545
00:26:02,170 --> 00:26:15,190
again cause<font color="#E5E5E5"> their cross-site scripting</font>

546
00:26:03,820 --> 00:26:18,550
<font color="#E5E5E5">there all right the next protection that</font>

547
00:26:15,190 --> 00:26:21,550
angular gives us out of the box<font color="#CCCCCC"> my</font>

548
00:26:18,550 --> 00:26:23,919
<font color="#CCCCCC">battery's</font><font color="#E5E5E5"> dead is content security</font>

549
00:26:21,550 --> 00:26:29,230
policy<font color="#E5E5E5"> anybody heard of</font><font color="#CCCCCC"> funding</font><font color="#E5E5E5"> security</font>

550
00:26:23,920 --> 00:26:30,670
policy<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> maybe it kind of</font><font color="#CCCCCC"> alright</font>

551
00:26:29,230 --> 00:26:34,270
content security policy can I'm gonna

552
00:26:30,670 --> 00:26:37,090
<font color="#E5E5E5">give really quick demo</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can read</font>

553
00:26:34,270 --> 00:26:39,220
about<font color="#E5E5E5"> it later but</font>

554
00:26:37,090 --> 00:26:41,290
<font color="#E5E5E5">it is a new way of protecting your</font>

555
00:26:39,220 --> 00:26:43,930
applications from cross-site scripting

556
00:26:41,290 --> 00:26:45,340
<font color="#CCCCCC">the good thing about angular</font><font color="#E5E5E5"> that it</font>

557
00:26:43,930 --> 00:26:47,920
comes<font color="#E5E5E5"> with this protection out of the</font>

558
00:26:45,340 --> 00:26:52,000
box<font color="#E5E5E5"> where a lot of other</font><font color="#CCCCCC"> frameworks do</font>

559
00:26:47,920 --> 00:26:55,390
not support<font color="#E5E5E5"> it and the way it works is</font>

560
00:26:52,000 --> 00:26:57,190
that<font color="#E5E5E5"> one of kind of a couple dangerous</font>

561
00:26:55,390 --> 00:27:00,220
places<font color="#E5E5E5"> with the client-side JavaScript</font>

562
00:26:57,190 --> 00:27:01,990
<font color="#CCCCCC">is one is inline scripts when your</font>

563
00:27:00,220 --> 00:27:03,370
attackers can inject some JavaScript

564
00:27:01,990 --> 00:27:06,700
<font color="#E5E5E5">instead of you know putting your</font><font color="#CCCCCC"> user</font>

565
00:27:03,370 --> 00:27:12,790
<font color="#CCCCCC">name in there</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> to is using an</font>

566
00:27:06,700 --> 00:27:17,230
eval function because evil is evil<font color="#E5E5E5"> never</font>

567
00:27:12,790 --> 00:27:19,360
never use<font color="#E5E5E5"> evil if you are evaluating a</font>

568
00:27:17,230 --> 00:27:23,170
user code in the evil that means you're

569
00:27:19,360 --> 00:27:25,780
basically<font color="#E5E5E5"> executing user code on like</font><font color="#CCCCCC"> as</font>

570
00:27:23,170 --> 00:27:30,400
your code<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you completely trust that</font>

571
00:27:25,780 --> 00:27:33,430
user<font color="#E5E5E5"> or that attacker</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> you and the</font>

572
00:27:30,400 --> 00:27:36,400
way<font color="#E5E5E5"> Engler works is that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can turn</font>

573
00:27:33,430 --> 00:27:37,860
off evil<font color="#E5E5E5"> inside the framework the</font>

574
00:27:36,400 --> 00:27:42,310
problem with<font color="#E5E5E5"> other</font><font color="#CCCCCC"> frameworks like</font>

575
00:27:37,860 --> 00:27:44,080
<font color="#E5E5E5">jQuery for example they rely on eval so</font>

576
00:27:42,310 --> 00:27:47,320
if you turn it off your application is

577
00:27:44,080 --> 00:27:49,210
<font color="#E5E5E5">going to break with angular you can turn</font>

578
00:27:47,320 --> 00:27:52,270
<font color="#E5E5E5">it off it's gonna make your application</font>

579
00:27:49,210 --> 00:27:54,850
slower<font color="#E5E5E5"> so you have</font><font color="#CCCCCC"> sometimes you have to</font>

580
00:27:52,270 --> 00:27:57,670
<font color="#E5E5E5">take the risk</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> you say well</font><font color="#CCCCCC"> I</font>

581
00:27:54,850 --> 00:27:59,350
cannot allow<font color="#E5E5E5"> a 30% delay on my</font>

582
00:27:57,670 --> 00:28:02,190
application because<font color="#E5E5E5"> it's already so big</font>

583
00:27:59,350 --> 00:28:05,350
<font color="#E5E5E5">and 30% really like slows things down</font>

584
00:28:02,190 --> 00:28:08,350
then you just you<font color="#CCCCCC"> just</font><font color="#E5E5E5"> have to use eval</font>

585
00:28:05,350 --> 00:28:10,409
and that's fine you<font color="#CCCCCC"> can do that but if</font>

586
00:28:08,350 --> 00:28:14,350
you if your application<font color="#E5E5E5"> is</font><font color="#CCCCCC"> well-written</font>

587
00:28:10,410 --> 00:28:16,270
<font color="#CCCCCC">you can turn it</font><font color="#E5E5E5"> off so so by default if</font>

588
00:28:14,350 --> 00:28:19,149
you<font color="#CCCCCC"> don't provide anything</font><font color="#E5E5E5"> about the CSP</font>

589
00:28:16,270 --> 00:28:23,860
in<font color="#E5E5E5"> when you start your angular app you</font>

590
00:28:19,150 --> 00:28:26,860
just<font color="#E5E5E5"> do body</font><font color="#CCCCCC"> ng app it will it will</font>

591
00:28:23,860 --> 00:28:28,689
check if eval is allowed by your<font color="#E5E5E5"> policy</font>

592
00:28:26,860 --> 00:28:31,000
<font color="#E5E5E5">then it's gonna use it if it's not</font>

593
00:28:28,690 --> 00:28:32,890
allowed<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> gonna use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and it's</font>

594
00:28:31,000 --> 00:28:37,300
going<font color="#E5E5E5"> to be slightly slower</font><font color="#CCCCCC"> and slightly</font>

595
00:28:32,890 --> 00:28:39,760
more secure<font color="#E5E5E5"> the other thing you can set</font>

596
00:28:37,300 --> 00:28:41,950
here is<font color="#E5E5E5"> inline</font><font color="#CCCCCC"> Styles so</font><font color="#E5E5E5"> we talked about</font>

597
00:28:39,760 --> 00:28:44,379
inline scripts<font color="#CCCCCC"> and they are super</font>

598
00:28:41,950 --> 00:28:46,870
<font color="#E5E5E5">dangerous you can also have</font><font color="#CCCCCC"> your Styles</font>

599
00:28:44,380 --> 00:28:49,900
<font color="#E5E5E5">your CSS either in line or in a separate</font>

600
00:28:46,870 --> 00:28:50,929
file<font color="#E5E5E5"> having them inline</font><font color="#CCCCCC"> although they</font>

601
00:28:49,900 --> 00:28:53,540
<font color="#E5E5E5">are</font><font color="#CCCCCC"> CC</font><font color="#E5E5E5"> style</font>

602
00:28:50,930 --> 00:28:55,700
they shouldn't be dangerous<font color="#CCCCCC"> but they're</font>

603
00:28:53,540 --> 00:28:57,530
actually<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> occult</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> list</font>

604
00:28:55,700 --> 00:29:00,350
attack so they have some links here

605
00:28:57,530 --> 00:29:04,700
<font color="#E5E5E5">Mario</font><font color="#CCCCCC"> Heydrich wrote an amazing paper</font>

606
00:29:00,350 --> 00:29:06,800
about<font color="#CCCCCC"> it so they may be</font><font color="#E5E5E5"> dangerous</font><font color="#CCCCCC"> so you</font>

607
00:29:04,700 --> 00:29:09,740
may want to<font color="#E5E5E5"> turn it off again</font><font color="#CCCCCC"> that only</font>

608
00:29:06,800 --> 00:29:11,480
<font color="#E5E5E5">affects your presentation your style so</font>

609
00:29:09,740 --> 00:29:14,000
depending<font color="#E5E5E5"> on how you're</font><font color="#CCCCCC"> doing your</font>

610
00:29:11,480 --> 00:29:15,890
<font color="#CCCCCC">design you might totally do</font><font color="#E5E5E5"> without</font>

611
00:29:14,000 --> 00:29:18,260
those inline<font color="#E5E5E5"> Styles you</font><font color="#CCCCCC"> can just put all</font>

612
00:29:15,890 --> 00:29:20,360
your<font color="#CCCCCC"> CSS into a</font><font color="#E5E5E5"> file and you'll be fine</font>

613
00:29:18,260 --> 00:29:22,160
with that<font color="#CCCCCC"> and so here</font><font color="#E5E5E5"> are the different</font>

614
00:29:20,360 --> 00:29:24,379
configurations that<font color="#CCCCCC"> you can do with</font>

615
00:29:22,160 --> 00:29:26,360
angular<font color="#E5E5E5"> you can like turn off eval or</font>

616
00:29:24,380 --> 00:29:28,490
turn on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> styles on turn of the styles</font>

617
00:29:26,360 --> 00:29:35,270
and<font color="#E5E5E5"> turn on eval depending on what you</font>

618
00:29:28,490 --> 00:29:39,500
<font color="#E5E5E5">need as a developer the other protection</font>

619
00:29:35,270 --> 00:29:41,570
or kind<font color="#E5E5E5"> of protection</font><font color="#CCCCCC"> that angular gives</font>

620
00:29:39,500 --> 00:29:44,120
if you you<font color="#CCCCCC"> revive angular they'll say</font><font color="#E5E5E5"> oh</font>

621
00:29:41,570 --> 00:29:47,120
there is the sandbox bypass<font color="#CCCCCC"> or there is</font>

622
00:29:44,120 --> 00:29:50,270
the<font color="#E5E5E5"> stem box thing so angular versions</font>

623
00:29:47,120 --> 00:29:52,639
from<font color="#E5E5E5"> one till one point six all had</font>

624
00:29:50,270 --> 00:29:55,460
<font color="#E5E5E5">something that was called a sandbox that</font>

625
00:29:52,640 --> 00:29:57,680
basically said<font color="#E5E5E5"> JavaScript that you're</font>

626
00:29:55,460 --> 00:30:00,260
running<font color="#CCCCCC"> in</font><font color="#E5E5E5"> your angular app is executed</font>

627
00:29:57,680 --> 00:30:02,420
on<font color="#CCCCCC"> the scope object on the specific</font>

628
00:30:00,260 --> 00:30:05,480
<font color="#CCCCCC">built-in object and not on the whole Dom</font>

629
00:30:02,420 --> 00:30:08,930
not on the whole model<font color="#CCCCCC"> of your</font>

630
00:30:05,480 --> 00:30:11,690
application which the idea was<font color="#CCCCCC"> to just</font>

631
00:30:08,930 --> 00:30:14,120
<font color="#E5E5E5">separate your view and your controller</font>

632
00:30:11,690 --> 00:30:16,340
<font color="#E5E5E5">but it kind of worked as a security</font>

633
00:30:14,120 --> 00:30:19,070
protection because you couldn't just do

634
00:30:16,340 --> 00:30:21,320
an alert if you do you know<font color="#E5E5E5"> script</font>

635
00:30:19,070 --> 00:30:23,300
script alert what angular<font color="#E5E5E5"> is actually</font>

636
00:30:21,320 --> 00:30:25,909
<font color="#E5E5E5">gonna do is gonna call the scope object</font>

637
00:30:23,300 --> 00:30:28,669
<font color="#E5E5E5">and then tragical alert on a scope</font>

638
00:30:25,910 --> 00:30:30,320
<font color="#CCCCCC">object which doesn't exist and it's not</font>

639
00:30:28,670 --> 00:30:32,090
gonna work<font color="#CCCCCC"> so a lot of attacks</font><font color="#E5E5E5"> a lot of</font>

640
00:30:30,320 --> 00:30:36,350
traditional attacks wouldn't work here

641
00:30:32,090 --> 00:30:38,330
but every<font color="#CCCCCC"> version from you know one</font>

642
00:30:36,350 --> 00:30:40,730
point<font color="#E5E5E5"> zero to one point five point</font>

643
00:30:38,330 --> 00:30:44,659
<font color="#CCCCCC">whatever</font><font color="#E5E5E5"> the last one one point five</font>

644
00:30:40,730 --> 00:30:47,000
point<font color="#CCCCCC"> eight</font><font color="#E5E5E5"> had a</font><font color="#CCCCCC"> Sun</font><font color="#E5E5E5"> sandbox escape so</font>

645
00:30:44,660 --> 00:30:50,750
the<font color="#CCCCCC"> sandbox was</font><font color="#E5E5E5"> not written well enough</font>

646
00:30:47,000 --> 00:30:53,600
and<font color="#CCCCCC"> everywhere every</font><font color="#E5E5E5"> next version they</font>

647
00:30:50,750 --> 00:30:55,310
tried to<font color="#E5E5E5"> patch that escape protect</font>

648
00:30:53,600 --> 00:30:57,919
little<font color="#E5E5E5"> bit more and they were still</font>

649
00:30:55,310 --> 00:31:00,560
saying that<font color="#E5E5E5"> the sandbox is not a</font>

650
00:30:57,920 --> 00:31:01,220
<font color="#E5E5E5">security measure so if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> find an</font>

651
00:31:00,560 --> 00:31:04,450
escape

652
00:31:01,220 --> 00:31:06,769
it's not a<font color="#CCCCCC"> zero-day vulnerability</font><font color="#E5E5E5"> which</font>

653
00:31:04,450 --> 00:31:08,539
it's kind of funny like well we don't

654
00:31:06,769 --> 00:31:11,419
<font color="#CCCCCC">really</font><font color="#E5E5E5"> have problems in our code because</font>

655
00:31:08,539 --> 00:31:13,820
it's not meant<font color="#E5E5E5"> to be protecting you it's</font>

656
00:31:11,419 --> 00:31:19,460
<font color="#CCCCCC">just the features</font><font color="#E5E5E5"> it's not a bug it's a</font>

657
00:31:13,820 --> 00:31:22,039
feature<font color="#E5E5E5"> and you can go and like to look</font>

658
00:31:19,460 --> 00:31:23,869
up the exploits there<font color="#E5E5E5"> opens you know</font>

659
00:31:22,039 --> 00:31:27,649
<font color="#E5E5E5">they're there no and just look up</font>

660
00:31:23,869 --> 00:31:29,359
angular sandbox<font color="#E5E5E5"> escapes and you just you</font>

661
00:31:27,649 --> 00:31:34,639
know<font color="#E5E5E5"> copy paste the code and it works</font>

662
00:31:29,359 --> 00:31:36,559
right nothing crazy about it so like one

663
00:31:34,639 --> 00:31:39,049
example payload it looks pretty crazy a

664
00:31:36,559 --> 00:31:40,668
<font color="#CCCCCC">coal constructor dot prototype</font><font color="#E5E5E5"> and Chara</font>

665
00:31:39,049 --> 00:31:43,729
and<font color="#CCCCCC"> all these functions and specific</font>

666
00:31:40,669 --> 00:31:46,879
order<font color="#E5E5E5"> but it works in at the end it pops</font>

667
00:31:43,729 --> 00:31:49,609
up the<font color="#CCCCCC"> oregon</font><font color="#E5E5E5"> alert box and we'll see an</font>

668
00:31:46,879 --> 00:31:51,889
example<font color="#CCCCCC"> here</font><font color="#E5E5E5"> but then finally</font><font color="#CCCCCC"> at angle</font>

669
00:31:49,609 --> 00:31:54,139
one point angular<font color="#CCCCCC"> 1.6</font><font color="#E5E5E5"> they said</font><font color="#CCCCCC"> alright</font>

670
00:31:51,889 --> 00:31:56,289
we're gonna remove the<font color="#E5E5E5"> sandbox we don't</font>

671
00:31:54,139 --> 00:32:01,369
have it<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not a protection</font>

672
00:31:56,289 --> 00:32:05,809
here<font color="#CCCCCC"> okay forget about it</font><font color="#E5E5E5"> so there is</font><font color="#CCCCCC"> no</font>

673
00:32:01,369 --> 00:32:08,389
<font color="#E5E5E5">sandbox really and then the last feature</font>

674
00:32:05,809 --> 00:32:11,168
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> built into angular by default is</font>

675
00:32:08,389 --> 00:32:14,988
the<font color="#E5E5E5"> protection from</font><font color="#CCCCCC"> that caesar that</font>

676
00:32:11,169 --> 00:32:17,840
<font color="#E5E5E5">cross-site request forgery so the way it</font>

677
00:32:14,989 --> 00:32:20,539
works<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> when a user submits a</font>

678
00:32:17,840 --> 00:32:22,099
request for example<font color="#E5E5E5"> i want to transfer</font>

679
00:32:20,539 --> 00:32:24,769
money money from one account to another

680
00:32:22,099 --> 00:32:27,019
account<font color="#E5E5E5"> right the server needs to know</font>

681
00:32:24,769 --> 00:32:30,080
that<font color="#CCCCCC"> this request actually came was</font>

682
00:32:27,019 --> 00:32:32,840
initiated from me from<font color="#E5E5E5"> from the user</font><font color="#CCCCCC"> now</font>

683
00:32:30,080 --> 00:32:35,029
<font color="#E5E5E5">that just came from my browser and has</font>

684
00:32:32,840 --> 00:32:37,039
my cookie but that<font color="#CCCCCC"> i actually went into</font>

685
00:32:35,029 --> 00:32:39,499
<font color="#CCCCCC">the application</font><font color="#E5E5E5"> selected the two</font>

686
00:32:37,039 --> 00:32:41,979
accounts<font color="#CCCCCC"> them you know the number and i</font>

687
00:32:39,499 --> 00:32:44,629
am the one<font color="#CCCCCC"> who said who clicked submit</font>

688
00:32:41,979 --> 00:32:48,200
<font color="#CCCCCC">because if i am logged into my account</font>

689
00:32:44,629 --> 00:32:49,998
<font color="#CCCCCC">and at the same time</font><font color="#E5E5E5"> i'm clicking on</font>

690
00:32:48,200 --> 00:32:53,840
some malicious link that<font color="#E5E5E5"> came in the</font>

691
00:32:49,999 --> 00:32:56,119
email<font color="#E5E5E5"> the another website that is open</font>

692
00:32:53,840 --> 00:32:59,418
in a different tab can actually send a

693
00:32:56,119 --> 00:33:00,918
post request<font color="#E5E5E5"> to my bank account and have</font>

694
00:32:59,419 --> 00:33:05,330
all the same information<font color="#E5E5E5"> you know the</font>

695
00:33:00,919 --> 00:33:08,090
from account<font color="#E5E5E5"> to account amount confirm</font>

696
00:33:05,330 --> 00:33:11,359
and my browser will attach my cookie

697
00:33:08,090 --> 00:33:13,129
automatically so to the server<font color="#E5E5E5"> to the</font>

698
00:33:11,359 --> 00:33:14,810
bank is going<font color="#E5E5E5"> to look like</font><font color="#CCCCCC"> i am the</font><font color="#E5E5E5"> one</font>

699
00:33:13,129 --> 00:33:19,459
<font color="#CCCCCC">who's done the</font><font color="#E5E5E5"> request so that's how</font>

700
00:33:14,810 --> 00:33:22,070
<font color="#CCCCCC">Scizor works right to protect from that</font>

701
00:33:19,460 --> 00:33:24,710
what applications do is on the server

702
00:33:22,070 --> 00:33:27,800
they generate a special token<font color="#E5E5E5"> that the</font>

703
00:33:24,710 --> 00:33:29,360
<font color="#E5E5E5">attacker cannot read and then with each</font>

704
00:33:27,800 --> 00:33:31,490
request<font color="#E5E5E5"> you send this token that's</font>

705
00:33:29,360 --> 00:33:34,520
<font color="#E5E5E5">unique to this to my session right now</font>

706
00:33:31,490 --> 00:33:36,740
<font color="#E5E5E5">and they validate this token and is like</font>

707
00:33:34,520 --> 00:33:39,440
<font color="#CCCCCC">okay well that actually came from</font><font color="#E5E5E5"> you</font>

708
00:33:36,740 --> 00:33:42,460
because the attacker couldn't guess that

709
00:33:39,440 --> 00:33:46,880
token<font color="#E5E5E5"> right it should be alone enough so</font>

710
00:33:42,460 --> 00:33:49,730
what angular gives you for free is if

711
00:33:46,880 --> 00:33:52,930
your server side creates this token<font color="#E5E5E5"> and</font>

712
00:33:49,730 --> 00:33:56,270
sends it<font color="#E5E5E5"> to the client</font><font color="#CCCCCC"> side as a cookie</font>

713
00:33:52,930 --> 00:33:57,620
angular will take the cookie and<font color="#E5E5E5"> it</font>

714
00:33:56,270 --> 00:34:03,020
should be named in a specific way

715
00:33:57,620 --> 00:34:05,540
accessor<font color="#CCCCCC"> f token right</font><font color="#E5E5E5"> a header to your</font>

716
00:34:03,020 --> 00:34:08,000
request<font color="#CCCCCC"> and so then you have</font><font color="#E5E5E5"> the same</font>

717
00:34:05,540 --> 00:34:10,790
token in the cookie and in the HTTP

718
00:34:08,000 --> 00:34:14,060
header and submit all of<font color="#E5E5E5"> that to the</font>

719
00:34:10,790 --> 00:34:16,550
server side<font color="#E5E5E5"> so then the server side will</font>

720
00:34:14,060 --> 00:34:19,159
check if<font color="#E5E5E5"> the header matches the cookie</font>

721
00:34:16,550 --> 00:34:21,530
<font color="#E5E5E5">and if they match that means the request</font>

722
00:34:19,159 --> 00:34:24,350
came from<font color="#E5E5E5"> legitimate user the request</font>

723
00:34:21,530 --> 00:34:28,159
can go through if it's just the cookie

724
00:34:24,350 --> 00:34:29,899
<font color="#E5E5E5">because if it was a malicious request</font>

725
00:34:28,159 --> 00:34:32,929
then the cookie will be<font color="#CCCCCC"> always attached</font>

726
00:34:29,899 --> 00:34:34,819
automatically by your browser<font color="#E5E5E5"> but the</font>

727
00:34:32,929 --> 00:34:37,220
Mulligan<font color="#E5E5E5"> the malicious attacker cannot</font>

728
00:34:34,820 --> 00:34:40,730
read the cookie and cannot write the

729
00:34:37,219 --> 00:34:42,649
request the HTTP header<font color="#E5E5E5"> to your request</font>

730
00:34:40,730 --> 00:34:44,360
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of the limitations of like how</font>

731
00:34:42,649 --> 00:34:48,409
browsers work<font color="#CCCCCC"> we</font><font color="#E5E5E5"> could because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

732
00:34:44,360 --> 00:34:50,600
same origin<font color="#CCCCCC"> policy</font><font color="#E5E5E5"> but again this</font>

733
00:34:48,409 --> 00:34:52,640
validation<font color="#E5E5E5"> if this</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> token is still</font>

734
00:34:50,600 --> 00:34:55,179
match should happen<font color="#E5E5E5"> on the server side</font>

735
00:34:52,639 --> 00:34:57,620
so<font color="#E5E5E5"> that's why when I talked</font><font color="#CCCCCC"> about</font>

736
00:34:55,179 --> 00:34:59,930
cross-site<font color="#CCCCCC"> request forgery I put a</font>

737
00:34:57,620 --> 00:35:02,420
question mark<font color="#E5E5E5"> right so angular helps you</font>

738
00:34:59,930 --> 00:35:03,950
to protect from it but<font color="#E5E5E5"> it doesn't do all</font>

739
00:35:02,420 --> 00:35:06,800
the work you still<font color="#E5E5E5"> have to do the final</font>

740
00:35:03,950 --> 00:35:08,660
part on the<font color="#E5E5E5"> server side yourself that</font>

741
00:35:06,800 --> 00:35:10,630
<font color="#E5E5E5">comparison and the generation of the</font>

742
00:35:08,660 --> 00:35:14,870
tokens and<font color="#E5E5E5"> the comparison of the tokens</font>

743
00:35:10,630 --> 00:35:17,000
<font color="#E5E5E5">and again I have some links</font><font color="#CCCCCC"> that explain</font>

744
00:35:14,870 --> 00:35:21,380
these things and more details for<font color="#E5E5E5"> you to</font>

745
00:35:17,000 --> 00:35:27,510
understand so so far<font color="#CCCCCC"> looks like</font>

746
00:35:21,380 --> 00:35:29,640
<font color="#E5E5E5">everything you know that</font>

747
00:35:27,510 --> 00:35:31,530
every angle<font color="#CCCCCC"> is</font><font color="#E5E5E5"> pretty secure</font><font color="#CCCCCC"> right but</font>

748
00:35:29,640 --> 00:35:36,410
there are<font color="#E5E5E5"> still problems with the</font>

749
00:35:31,530 --> 00:35:38,880
framework<font color="#E5E5E5"> so for example there are</font>

750
00:35:36,410 --> 00:35:41,549
<font color="#CCCCCC">dharmic</font><font color="#E5E5E5"> success so cross-site scripting</font>

751
00:35:38,880 --> 00:35:43,650
or XSS and there is<font color="#E5E5E5"> kind of new version</font>

752
00:35:41,550 --> 00:35:44,940
<font color="#E5E5E5">of cross-site scripting well it's been</font>

753
00:35:43,650 --> 00:35:45,840
around for<font color="#E5E5E5"> five years so I guess it's</font>

754
00:35:44,940 --> 00:35:48,060
not<font color="#E5E5E5"> new</font><font color="#CCCCCC"> anymore</font>

755
00:35:45,840 --> 00:35:50,910
<font color="#CCCCCC">we're called Dom base the</font><font color="#E5E5E5"> DOM</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

756
00:35:48,060 --> 00:35:53,490
document object<font color="#CCCCCC"> model</font><font color="#E5E5E5"> the model of</font><font color="#CCCCCC"> your</font>

757
00:35:50,910 --> 00:35:55,020
data in the<font color="#E5E5E5"> browser</font><font color="#CCCCCC"> so it only</font><font color="#E5E5E5"> has to do</font>

758
00:35:53,490 --> 00:35:56,819
with<font color="#E5E5E5"> the data in the browser not in the</font>

759
00:35:55,020 --> 00:35:58,380
<font color="#CCCCCC">server-side and of course because</font>

760
00:35:56,820 --> 00:36:00,390
angular<font color="#E5E5E5"> is all client</font><font color="#CCCCCC"> science or</font>

761
00:35:58,380 --> 00:36:03,480
<font color="#CCCCCC">front-end</font><font color="#E5E5E5"> that's where the injections</font>

762
00:36:00,390 --> 00:36:06,509
happen so let's look at how this can

763
00:36:03,480 --> 00:36:09,300
<font color="#CCCCCC">happen so one is we already talked about</font>

764
00:36:06,510 --> 00:36:12,450
it<font color="#CCCCCC"> the trust</font><font color="#E5E5E5"> as HTML I mean if you say</font>

765
00:36:09,300 --> 00:36:14,270
that you trust this input<font color="#E5E5E5"> that's coming</font>

766
00:36:12,450 --> 00:36:17,939
from the user and the input is<font color="#E5E5E5"> actually</font>

767
00:36:14,270 --> 00:36:19,800
untrusted<font color="#E5E5E5"> I'm gonna unvalidated then you</font>

768
00:36:17,940 --> 00:36:22,290
may<font color="#E5E5E5"> have an</font><font color="#CCCCCC"> injection in your</font><font color="#E5E5E5"> code but</font>

769
00:36:19,800 --> 00:36:24,480
<font color="#E5E5E5">this is because of the way the function</font>

770
00:36:22,290 --> 00:36:26,250
<font color="#E5E5E5">is called like you are the developer you</font>

771
00:36:24,480 --> 00:36:30,350
say I'm trusting this<font color="#E5E5E5"> data if this data</font>

772
00:36:26,250 --> 00:36:30,350
is bad then that's<font color="#E5E5E5"> your problem</font><font color="#CCCCCC"> then</font>

773
00:36:30,770 --> 00:36:37,109
<font color="#CCCCCC">another example is</font><font color="#E5E5E5"> angular has a built</font>

774
00:36:34,410 --> 00:36:39,810
<font color="#E5E5E5">in module called angular element and</font>

775
00:36:37,109 --> 00:36:42,569
it's basically does the<font color="#CCCCCC"> same things as</font>

776
00:36:39,810 --> 00:36:45,060
jQuery<font color="#E5E5E5"> does so allows you again to</font>

777
00:36:42,570 --> 00:36:48,450
manipulate<font color="#E5E5E5"> your elements your your Dom</font>

778
00:36:45,060 --> 00:36:51,029
tree and some of the functions<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that</font>

779
00:36:48,450 --> 00:36:56,879
module<font color="#E5E5E5"> are vulnerable</font><font color="#CCCCCC"> to injections</font><font color="#E5E5E5"> so</font>

780
00:36:51,030 --> 00:37:02,040
for<font color="#E5E5E5"> example the the function after after</font>

781
00:36:56,880 --> 00:37:04,770
<font color="#CCCCCC">in</font><font color="#E5E5E5"> before so in this case we have user</font>

782
00:37:02,040 --> 00:37:08,759
input right into this<font color="#CCCCCC"> element element</font>

783
00:37:04,770 --> 00:37:13,500
<font color="#E5E5E5">after input and then in our angular code</font>

784
00:37:08,760 --> 00:37:17,780
<font color="#E5E5E5">what we do is we take the value of</font><font color="#CCCCCC"> that</font>

785
00:37:13,500 --> 00:37:21,390
<font color="#E5E5E5">input here scope after input and then we</font>

786
00:37:17,780 --> 00:37:23,250
<font color="#E5E5E5">go</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the tree we find the you know</font>

787
00:37:21,390 --> 00:37:27,150
take our element document<font color="#CCCCCC"> zero so that's</font>

788
00:37:23,250 --> 00:37:30,450
<font color="#E5E5E5">our main document and then we find the</font>

789
00:37:27,150 --> 00:37:32,550
element<font color="#E5E5E5"> that has an ID of test div and</font>

790
00:37:30,450 --> 00:37:35,220
this is this div element here and

791
00:37:32,550 --> 00:37:36,690
<font color="#CCCCCC">instead of this name we are replacing it</font>

792
00:37:35,220 --> 00:37:39,419
<font color="#E5E5E5">we're</font>

793
00:37:36,690 --> 00:37:41,790
but we're trying to<font color="#CCCCCC"> put the element</font><font color="#E5E5E5"> the</font>

794
00:37:39,420 --> 00:37:46,560
value<font color="#CCCCCC"> of the input that</font><font color="#E5E5E5"> we received from</font>

795
00:37:41,790 --> 00:37:48,690
the<font color="#E5E5E5"> user after</font><font color="#CCCCCC"> that element so element</font>

796
00:37:46,560 --> 00:37:50,520
that after is going to actually<font color="#E5E5E5"> inject</font>

797
00:37:48,690 --> 00:37:54,359
another element into your<font color="#E5E5E5"> page and</font>

798
00:37:50,520 --> 00:37:58,589
modify<font color="#CCCCCC"> your Dom so in this case if the</font>

799
00:37:54,359 --> 00:38:01,140
value<font color="#CCCCCC"> of after submit was not officer</font>

800
00:37:58,589 --> 00:38:03,359
after input will not<font color="#CCCCCC"> validate it you can</font>

801
00:38:01,140 --> 00:38:06,029
inject whatever<font color="#E5E5E5"> you can inject script</font>

802
00:38:03,359 --> 00:38:08,910
you can<font color="#E5E5E5"> inject another like iframe and</font>

803
00:38:06,030 --> 00:38:12,599
so you can cause<font color="#CCCCCC"> an injection by this</font>

804
00:38:08,910 --> 00:38:14,629
way and in this<font color="#E5E5E5"> way so ideally that</font>

805
00:38:12,599 --> 00:38:17,579
should be sanitized<font color="#E5E5E5"> with ng sanitized</font>

806
00:38:14,630 --> 00:38:20,310
<font color="#E5E5E5">but it's not like that's kind of where</font>

807
00:38:17,579 --> 00:38:22,589
<font color="#E5E5E5">the problem is you can call ng</font><font color="#CCCCCC"> sanitized</font>

808
00:38:20,310 --> 00:38:25,828
the the sanitized function of the ng

809
00:38:22,589 --> 00:38:28,078
<font color="#CCCCCC">sanitized module manual and then that's</font>

810
00:38:25,829 --> 00:38:31,079
<font color="#E5E5E5">how</font><font color="#CCCCCC"> you fix this problem but out of</font><font color="#E5E5E5"> the</font>

811
00:38:28,079 --> 00:38:40,950
box<font color="#CCCCCC"> angular doesn't</font><font color="#E5E5E5"> do that I don't know</font>

812
00:38:31,079 --> 00:38:43,140
why<font color="#E5E5E5"> for some reason so if we don't</font>

813
00:38:40,950 --> 00:38:46,020
sanitize that's what we get if<font color="#CCCCCC"> we try to</font>

814
00:38:43,140 --> 00:38:48,509
<font color="#E5E5E5">inject</font><font color="#CCCCCC"> something like element</font><font color="#E5E5E5"> P with on</font>

815
00:38:46,020 --> 00:38:51,599
mouse-over event and then on this<font color="#E5E5E5"> event</font>

816
00:38:48,510 --> 00:38:54,380
we pop up<font color="#CCCCCC"> an alert box it's going to</font>

817
00:38:51,599 --> 00:38:54,380
show us an error message

818
00:39:06,859 --> 00:39:12,328
the next vulnerability is again<font color="#E5E5E5"> the</font>

819
00:39:10,799 --> 00:39:14,609
other ones that<font color="#E5E5E5"> I will be talking about</font>

820
00:39:12,329 --> 00:39:17,279
<font color="#E5E5E5">are not inside the angular itself it's</font>

821
00:39:14,609 --> 00:39:19,980
pretty<font color="#E5E5E5"> well written</font><font color="#CCCCCC"> overall but inside</font>

822
00:39:17,279 --> 00:39:22,230
the frame<font color="#E5E5E5"> inside the plugins or modules</font>

823
00:39:19,980 --> 00:39:23,789
that you can<font color="#E5E5E5"> include so for example you</font>

824
00:39:22,230 --> 00:39:26,430
want to<font color="#CCCCCC"> include the module that's called</font>

825
00:39:23,789 --> 00:39:28,349
<font color="#E5E5E5">angular</font><font color="#CCCCCC"> translate</font><font color="#E5E5E5"> what it does it</font><font color="#CCCCCC"> allows</font>

826
00:39:26,430 --> 00:39:30,299
you to<font color="#E5E5E5"> do the internationalization</font><font color="#CCCCCC"> of</font>

827
00:39:28,349 --> 00:39:32,549
your website so<font color="#CCCCCC"> you can have a map that</font>

828
00:39:30,299 --> 00:39:35,369
<font color="#E5E5E5">has different values and different</font>

829
00:39:32,549 --> 00:39:37,230
languages for<font color="#CCCCCC"> the same parameter</font><font color="#E5E5E5"> so for</font>

830
00:39:35,369 --> 00:39:38,730
<font color="#E5E5E5">example like</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> hello right you can put</font>

831
00:39:37,230 --> 00:39:40,710
the word hello in different languages

832
00:39:38,730 --> 00:39:43,670
and then by switching the language your

833
00:39:40,710 --> 00:39:49,799
whole page changes the the<font color="#CCCCCC"> way it looks</font>

834
00:39:43,670 --> 00:39:53,700
<font color="#E5E5E5">but that module will so it will include</font>

835
00:39:49,799 --> 00:39:55,529
<font color="#E5E5E5">some of</font><font color="#CCCCCC"> the built in text that you're</font>

836
00:39:53,700 --> 00:39:58,799
providing so for example hello and how

837
00:39:55,529 --> 00:40:00,930
long refriger<font color="#CCCCCC"> 'men plus the text that</font>

838
00:39:58,799 --> 00:40:04,109
<font color="#E5E5E5">you</font><font color="#CCCCCC"> input right so here</font><font color="#E5E5E5"> we can want to</font>

839
00:40:00,930 --> 00:40:08,308
<font color="#E5E5E5">say hello you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> user John so that</font>

840
00:40:04,109 --> 00:40:10,529
text<font color="#E5E5E5"> that you input will</font><font color="#CCCCCC"> be validated</font><font color="#E5E5E5"> if</font>

841
00:40:08,309 --> 00:40:13,079
you said the sanitization call<font color="#E5E5E5"> the</font>

842
00:40:10,529 --> 00:40:14,490
simdization strategy<font color="#E5E5E5"> but if you didn't</font>

843
00:40:13,079 --> 00:40:15,809
then it's<font color="#E5E5E5"> not going to be validated</font>

844
00:40:14,490 --> 00:40:18,479
<font color="#E5E5E5">again it's going to take something</font><font color="#CCCCCC"> from</font>

845
00:40:15,809 --> 00:40:20,339
<font color="#E5E5E5">the user the user logs in you ask what</font>

846
00:40:18,480 --> 00:40:21,660
<font color="#E5E5E5">is your</font><font color="#CCCCCC"> name and</font><font color="#E5E5E5"> instead of putting the</font>

847
00:40:20,339 --> 00:40:24,000
name the user gonna send you some

848
00:40:21,660 --> 00:40:27,839
JavaScript<font color="#CCCCCC"> if you then</font><font color="#E5E5E5"> don't validate it</font>

849
00:40:24,000 --> 00:40:31,049
it's gonna be<font color="#E5E5E5"> injected by default the</font>

850
00:40:27,839 --> 00:40:33,538
strategy is no so it's<font color="#E5E5E5"> not gonna escape</font>

851
00:40:31,049 --> 00:40:36,839
<font color="#E5E5E5">or validate it by default</font><font color="#CCCCCC"> and also if</font>

852
00:40:33,539 --> 00:40:39,539
you do say<font color="#E5E5E5"> translation translates into</font>

853
00:40:36,839 --> 00:40:40,890
zation dot use strategy<font color="#CCCCCC"> empty</font><font color="#E5E5E5"> and you</font>

854
00:40:39,539 --> 00:40:42,539
<font color="#E5E5E5">know send anything you again you're</font>

855
00:40:40,890 --> 00:40:44,788
setting it to null<font color="#CCCCCC"> so then you're</font><font color="#E5E5E5"> gonna</font>

856
00:40:42,539 --> 00:40:47,730
end<font color="#CCCCCC"> up with a problem</font><font color="#E5E5E5"> but if you do set</font>

857
00:40:44,789 --> 00:40:49,829
<font color="#CCCCCC">it to</font><font color="#E5E5E5"> something good like escape or</font>

858
00:40:47,730 --> 00:40:53,089
sanitize<font color="#CCCCCC"> it's gonna do these</font><font color="#E5E5E5"> things so</font>

859
00:40:49,829 --> 00:40:56,190
<font color="#CCCCCC">again</font><font color="#E5E5E5"> kind of this module is not</font>

860
00:40:53,089 --> 00:40:58,200
vulnerable<font color="#E5E5E5"> by itself it's</font><font color="#CCCCCC"> only if you</font>

861
00:40:56,190 --> 00:41:03,660
didn't configure<font color="#E5E5E5"> it correctly then it's</font>

862
00:40:58,200 --> 00:41:05,730
gonna<font color="#E5E5E5"> have an issue all right so yeah</font>

863
00:41:03,660 --> 00:41:09,328
<font color="#CCCCCC">same thing you know who will</font><font color="#E5E5E5"> we're</font>

864
00:41:05,730 --> 00:41:16,890
trying to inject something instead<font color="#CCCCCC"> of</font>

865
00:41:09,329 --> 00:41:19,589
<font color="#E5E5E5">the name here</font><font color="#CCCCCC"> so sort of the name I'm</font>

866
00:41:16,890 --> 00:41:21,900
just<font color="#CCCCCC"> a ball bub say saying Bob script</font>

867
00:41:19,589 --> 00:41:28,049
alert<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> XSS and</font>

868
00:41:21,900 --> 00:41:30,449
<font color="#E5E5E5">the screen is not pop up another</font><font color="#CCCCCC"> example</font>

869
00:41:28,049 --> 00:41:34,079
is<font color="#E5E5E5"> text angular which is another module</font>

870
00:41:30,449 --> 00:41:36,989
<font color="#CCCCCC">it's a what you see what</font><font color="#E5E5E5"> you get</font><font color="#CCCCCC"> text</font>

871
00:41:34,079 --> 00:41:38,789
<font color="#E5E5E5">editor right so same kind of same</font><font color="#CCCCCC"> thing</font>

872
00:41:36,989 --> 00:41:41,219
if<font color="#CCCCCC"> you're using this module you're</font>

873
00:41:38,789 --> 00:41:43,349
inputting the text and in the text<font color="#E5E5E5"> if</font>

874
00:41:41,219 --> 00:41:45,239
you<font color="#E5E5E5"> are injecting some JavaScript and</font>

875
00:41:43,349 --> 00:41:48,209
<font color="#E5E5E5">then you want to preview the page that</font>

876
00:41:45,239 --> 00:41:50,999
<font color="#E5E5E5">you are trying to you know create the</font>

877
00:41:48,209 --> 00:41:54,239
<font color="#E5E5E5">script is going to execute unfortunately</font>

878
00:41:50,999 --> 00:41:56,549
<font color="#E5E5E5">for in this case you cannot fix it it's</font>

879
00:41:54,239 --> 00:41:59,459
just well unless you rewrite<font color="#E5E5E5"> the whole</font>

880
00:41:56,549 --> 00:42:01,019
<font color="#E5E5E5">plugin</font><font color="#CCCCCC"> but that's the vulnerability in</font>

881
00:41:59,459 --> 00:42:03,660
<font color="#E5E5E5">the plug-in</font><font color="#CCCCCC"> itself there is</font><font color="#E5E5E5"> no way to</font>

882
00:42:01,019 --> 00:42:05,459
say<font color="#E5E5E5"> to set some sort of</font><font color="#CCCCCC"> Santa's Asian</font>

883
00:42:03,660 --> 00:42:08,729
strategy or something like<font color="#E5E5E5"> that</font>

884
00:42:05,459 --> 00:42:10,078
it's basically we see that our clients

885
00:42:08,729 --> 00:42:12,299
<font color="#E5E5E5">are using that we would recommend them</font>

886
00:42:10,079 --> 00:42:14,489
<font color="#E5E5E5">to use a different</font><font color="#CCCCCC"> plug-in instead there</font>

887
00:42:12,299 --> 00:42:17,069
<font color="#CCCCCC">is a ng wig and</font><font color="#E5E5E5"> there are a couple other</font>

888
00:42:14,489 --> 00:42:21,559
text editors that<font color="#E5E5E5"> can be used instead</font>

889
00:42:17,069 --> 00:42:25,439
used instead but usually for any module

890
00:42:21,559 --> 00:42:26,880
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> plug-in you can check if it</font>

891
00:42:25,439 --> 00:42:28,439
<font color="#CCCCCC">has any vulnerabilities when you go and</font>

892
00:42:26,880 --> 00:42:30,539
github and<font color="#E5E5E5"> you look at the issues</font><font color="#CCCCCC"> and</font>

893
00:42:28,439 --> 00:42:32,069
<font color="#E5E5E5">you just</font><font color="#CCCCCC"> google and see you know are</font>

894
00:42:30,539 --> 00:42:36,959
there<font color="#E5E5E5"> any problems with this module that</font>

895
00:42:32,069 --> 00:42:41,699
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use and another</font><font color="#CCCCCC"> example is</font>

896
00:42:36,959 --> 00:42:44,308
a type<font color="#E5E5E5"> of head plug-in again not angular</font>

897
00:42:41,699 --> 00:42:47,880
itself<font color="#CCCCCC"> but a</font><font color="#E5E5E5"> third-party</font><font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> it's</font>

898
00:42:44,309 --> 00:42:49,289
used for<font color="#E5E5E5"> like when you're typing your</font>

899
00:42:47,880 --> 00:42:51,959
search<font color="#CCCCCC"> and Google you know how it comes</font>

900
00:42:49,289 --> 00:42:53,670
<font color="#E5E5E5">up with the suggestions as you're typing</font>

901
00:42:51,959 --> 00:42:59,129
so that's what the type<font color="#CCCCCC"> of head plug-in</font>

902
00:42:53,670 --> 00:43:02,939
does<font color="#E5E5E5"> so it takes an array of elements in</font>

903
00:42:59,130 --> 00:43:05,519
this case we call it<font color="#E5E5E5"> searchers and then</font>

904
00:43:02,939 --> 00:43:08,339
when you add this plug-in<font color="#E5E5E5"> you say you</font>

905
00:43:05,519 --> 00:43:10,919
know show me<font color="#E5E5E5"> elements in that in this</font>

906
00:43:08,339 --> 00:43:13,439
searches array right as you is<font color="#E5E5E5"> you're</font>

907
00:43:10,920 --> 00:43:16,529
typing<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna populate</font><font color="#CCCCCC"> that</font>

908
00:43:13,439 --> 00:43:20,160
<font color="#CCCCCC">drop-down</font><font color="#E5E5E5"> under</font><font color="#CCCCCC"> your search field</font><font color="#E5E5E5"> so if</font>

909
00:43:16,529 --> 00:43:22,199
you don't validate<font color="#E5E5E5"> if you're taking the</font>

910
00:43:20,160 --> 00:43:24,479
the values for<font color="#E5E5E5"> these searchers from the</font>

911
00:43:22,199 --> 00:43:27,150
attacker<font color="#E5E5E5"> or for</font><font color="#CCCCCC"> example from the URL if</font>

912
00:43:24,479 --> 00:43:30,209
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> sending them in the URL to this</font>

913
00:43:27,150 --> 00:43:30,950
page because<font color="#E5E5E5"> the the searches will</font><font color="#CCCCCC"> be</font>

914
00:43:30,209 --> 00:43:32,839
different

915
00:43:30,950 --> 00:43:35,029
on what the<font color="#E5E5E5"> user is searching for right</font>

916
00:43:32,839 --> 00:43:36,828
<font color="#E5E5E5">so you may have a huge list on the</font>

917
00:43:35,030 --> 00:43:38,990
<font color="#CCCCCC">server side and</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> dynamically</font>

918
00:43:36,829 --> 00:43:41,780
<font color="#CCCCCC">update them so that your pages you know</font>

919
00:43:38,990 --> 00:43:44,569
without refreshes or fresh shows you all

920
00:43:41,780 --> 00:43:46,790
<font color="#E5E5E5">these different searches so if they're</font>

921
00:43:44,570 --> 00:43:48,859
not validated<font color="#E5E5E5"> they may have</font>

922
00:43:46,790 --> 00:43:52,119
<font color="#CCCCCC">vulnerabilities let's look at the demo</font>

923
00:43:48,859 --> 00:43:52,119
<font color="#E5E5E5">for this one actually</font>

924
00:44:05,790 --> 00:44:13,720
so in this case I have a search box<font color="#E5E5E5"> and</font>

925
00:44:10,619 --> 00:44:17,200
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> that I'm actually</font><font color="#E5E5E5"> sending</font>

926
00:44:13,720 --> 00:44:18,609
some parameters here<font color="#E5E5E5"> in the URL so after</font>

927
00:44:17,200 --> 00:44:21,430
the question mark<font color="#CCCCCC"> and instead</font><font color="#E5E5E5"> of sending</font>

928
00:44:18,609 --> 00:44:24,220
<font color="#E5E5E5">the kind of normal</font><font color="#CCCCCC"> value for the search</font>

929
00:44:21,430 --> 00:44:28,078
I'm sending some JavaScript for<font color="#E5E5E5"> sure so</font>

930
00:44:24,220 --> 00:44:28,078
what's going to happen<font color="#CCCCCC"> if I start typing</font>

931
00:45:05,480 --> 00:45:11,220
so the<font color="#CCCCCC"> job done and</font><font color="#E5E5E5"> if I'm so what what</font>

932
00:45:09,269 --> 00:45:15,508
do I<font color="#E5E5E5"> need to do to have the JavaScript</font>

933
00:45:11,220 --> 00:45:18,209
<font color="#E5E5E5">executed based on the</font><font color="#CCCCCC"> URL if you can see</font>

934
00:45:15,509 --> 00:45:20,369
what I'm<font color="#E5E5E5"> sending to the Earl</font><font color="#CCCCCC"> mouse-over</font>

935
00:45:18,210 --> 00:45:22,440
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> event</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm using is on</font>

936
00:45:20,369 --> 00:45:24,660
mouse-over<font color="#CCCCCC"> if I'm not mousing over</font>

937
00:45:22,440 --> 00:45:28,410
nothing happens<font color="#CCCCCC"> right but if I mouse</font>

938
00:45:24,660 --> 00:45:30,118
over here<font color="#CCCCCC"> the</font><font color="#E5E5E5"> JavaScript that the the</font>

939
00:45:28,410 --> 00:45:32,670
handler that<font color="#CCCCCC"> I wrote is actually you</font>

940
00:45:30,119 --> 00:45:34,890
know show this alert message so that's

941
00:45:32,670 --> 00:45:37,200
what happened<font color="#E5E5E5"> so all of the examples</font>

942
00:45:34,890 --> 00:45:38,999
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we use for cross-site scripting we</font>

943
00:45:37,200 --> 00:45:40,799
just pop up a simple alert box<font color="#E5E5E5"> but</font>

944
00:45:38,999 --> 00:45:43,649
<font color="#E5E5E5">obviously you can do more malicious</font>

945
00:45:40,799 --> 00:45:46,489
<font color="#E5E5E5">things instead</font><font color="#CCCCCC"> of you know now just not</font>

946
00:45:43,650 --> 00:45:46,489
<font color="#E5E5E5">just an alert box</font>

947
00:46:03,510 --> 00:46:14,050
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> next one is the template</font>

948
00:46:11,410 --> 00:46:16,598
injection<font color="#E5E5E5"> template injection is</font>

949
00:46:14,050 --> 00:46:22,750
something very very specific for angular

950
00:46:16,599 --> 00:46:25,450
<font color="#E5E5E5">and not just for angular but for</font>

951
00:46:22,750 --> 00:46:29,410
applications that<font color="#E5E5E5"> use templates on</font><font color="#CCCCCC"> the</font>

952
00:46:25,450 --> 00:46:31,118
server side and on the client<font color="#CCCCCC"> side</font><font color="#E5E5E5"> again</font>

953
00:46:29,410 --> 00:46:33,730
<font color="#E5E5E5">a template is you know when you have</font>

954
00:46:31,119 --> 00:46:37,839
your<font color="#E5E5E5"> HTML text and then in in your HTML</font>

955
00:46:33,730 --> 00:46:41,020
you have some some way of putting server

956
00:46:37,839 --> 00:46:43,000
data or the dynamic<font color="#E5E5E5"> data into that HTML</font>

957
00:46:41,020 --> 00:46:46,150
before<font color="#CCCCCC"> you are displaying it to the user</font>

958
00:46:43,000 --> 00:46:48,339
<font color="#E5E5E5">right</font><font color="#CCCCCC"> if you are using a server-side</font>

959
00:46:46,150 --> 00:46:50,260
template that's<font color="#E5E5E5"> what we were doing</font><font color="#CCCCCC"> for</font>

960
00:46:48,339 --> 00:46:52,859
years before<font color="#E5E5E5"> angular existed right and</font>

961
00:46:50,260 --> 00:46:55,960
if<font color="#CCCCCC"> you are using for example JSP is</font><font color="#E5E5E5"> in</font>

962
00:46:52,859 --> 00:46:58,000
<font color="#CCCCCC">java</font><font color="#E5E5E5"> smart in PHP and</font><font color="#CCCCCC"> like there's a ton</font>

963
00:46:55,960 --> 00:47:00,160
<font color="#CCCCCC">of different templates</font><font color="#E5E5E5"> then you generate</font>

964
00:46:58,000 --> 00:47:01,260
<font color="#CCCCCC">HTML pages on the server and then you</font>

965
00:47:00,160 --> 00:47:03,879
<font color="#CCCCCC">display them</font>

966
00:47:01,260 --> 00:47:05,859
sometimes<font color="#E5E5E5"> what developers want</font><font color="#CCCCCC"> to do is</font>

967
00:47:03,880 --> 00:47:07,599
<font color="#CCCCCC">they</font><font color="#E5E5E5"> want to combine the server-side</font>

968
00:47:05,859 --> 00:47:09,759
templates and the client-side<font color="#E5E5E5"> templates</font>

969
00:47:07,599 --> 00:47:12,250
<font color="#E5E5E5">and the client side would be angular so</font>

970
00:47:09,760 --> 00:47:14,680
for example inside your JSP page<font color="#E5E5E5"> you're</font>

971
00:47:12,250 --> 00:47:16,960
gonna<font color="#E5E5E5"> have a section a div</font><font color="#CCCCCC"> that actually</font>

972
00:47:14,680 --> 00:47:19,060
has an angular template in<font color="#E5E5E5"> unison some</font>

973
00:47:16,960 --> 00:47:23,050
<font color="#E5E5E5">angular code and that will be rendered</font>

974
00:47:19,060 --> 00:47:24,730
<font color="#CCCCCC">by the angular engine in the browser</font><font color="#E5E5E5"> so</font>

975
00:47:23,050 --> 00:47:26,680
there<font color="#E5E5E5"> are kind</font><font color="#CCCCCC"> of two rendering stages</font>

976
00:47:24,730 --> 00:47:28,329
first on the server side<font color="#E5E5E5"> then you</font>

977
00:47:26,680 --> 00:47:30,368
generate this template send it<font color="#E5E5E5"> to the</font>

978
00:47:28,329 --> 00:47:34,119
<font color="#CCCCCC">client</font><font color="#E5E5E5"> side rendering the client side</font>

979
00:47:30,369 --> 00:47:38,349
and then you display to the user the

980
00:47:34,119 --> 00:47:41,200
problem here is that the server side

981
00:47:38,349 --> 00:47:42,940
templates<font color="#E5E5E5"> they usually protect you from</font>

982
00:47:41,200 --> 00:47:45,189
cross-site scripting because they don't

983
00:47:42,940 --> 00:47:47,170
<font color="#E5E5E5">allow the malicious characters like</font>

984
00:47:45,190 --> 00:47:49,359
angle<font color="#E5E5E5"> break it's like double quotes like</font>

985
00:47:47,170 --> 00:47:53,109
single quotes and<font color="#CCCCCC"> you check everything</font>

986
00:47:49,359 --> 00:47:55,779
<font color="#E5E5E5">is like</font><font color="#CCCCCC"> alright looks good but what is</font>

987
00:47:53,109 --> 00:47:58,900
this special character that angular<font color="#E5E5E5"> uses</font>

988
00:47:55,780 --> 00:48:00,849
for the<font color="#CCCCCC"> angular expressions that will</font>

989
00:47:58,900 --> 00:48:03,280
curly brace<font color="#E5E5E5"> this way as a teacher I</font><font color="#CCCCCC"> have</font>

990
00:48:00,849 --> 00:48:04,450
all the<font color="#E5E5E5"> answers on the slides usually if</font>

991
00:48:03,280 --> 00:48:06,490
there<font color="#E5E5E5"> is a question</font><font color="#CCCCCC"> the answer is</font><font color="#E5E5E5"> on the</font>

992
00:48:04,450 --> 00:48:08,589
slide<font color="#E5E5E5"> right so the double curly braces</font>

993
00:48:06,490 --> 00:48:11,229
<font color="#E5E5E5">are not considered</font><font color="#CCCCCC"> to be dangerous well</font>

994
00:48:08,589 --> 00:48:12,700
they were not<font color="#E5E5E5"> before but now you can</font>

995
00:48:11,230 --> 00:48:13,960
inject something<font color="#E5E5E5"> with the double curly</font>

996
00:48:12,700 --> 00:48:16,629
braces and

997
00:48:13,960 --> 00:48:18,640
when you have angular engine rendering

998
00:48:16,630 --> 00:48:22,569
on<font color="#E5E5E5"> the client-side they're gonna treat</font>

999
00:48:18,640 --> 00:48:25,328
those statements as commands<font color="#E5E5E5"> and execute</font>

1000
00:48:22,569 --> 00:48:28,480
them they are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be executed as</font>

1001
00:48:25,329 --> 00:48:32,069
angular<font color="#E5E5E5"> expressions not as JavaScript</font>

1002
00:48:28,480 --> 00:48:35,440
<font color="#E5E5E5">right but still you can do a lot of harm</font>

1003
00:48:32,069 --> 00:48:38,558
<font color="#E5E5E5">so again what happens is you have server</font>

1004
00:48:35,440 --> 00:48:40,329
side and client side<font color="#CCCCCC"> you have the server</font>

1005
00:48:38,559 --> 00:48:42,430
side template engine and have you

1006
00:48:40,329 --> 00:48:45,609
client-side template engine<font color="#E5E5E5"> on the</font>

1007
00:48:42,430 --> 00:48:51,399
server side<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have your template</font><font color="#E5E5E5"> you</font>

1008
00:48:45,609 --> 00:48:53,440
<font color="#E5E5E5">have your user input you clean your user</font>

1009
00:48:51,400 --> 00:48:54,880
input<font color="#E5E5E5"> right sanitize it you make sure</font>

1010
00:48:53,440 --> 00:48:57,790
there are no angle brackets there's no

1011
00:48:54,880 --> 00:49:00,160
JavaScript<font color="#CCCCCC"> inject it</font><font color="#E5E5E5"> and then you send</font>

1012
00:48:57,790 --> 00:49:01,630
it<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> client side but then maybe</font>

1013
00:49:00,160 --> 00:49:04,089
there is something injected with<font color="#CCCCCC"> the</font>

1014
00:49:01,630 --> 00:49:07,390
double curly braces<font color="#E5E5E5"> which is an angular</font>

1015
00:49:04,089 --> 00:49:10,390
command and then the angular engine

1016
00:49:07,390 --> 00:49:12,460
renders the template and then you know

1017
00:49:10,390 --> 00:49:14,200
displays to the<font color="#E5E5E5"> user and if it had some</font>

1018
00:49:12,460 --> 00:49:18,940
malicious commands<font color="#E5E5E5"> then it's</font><font color="#CCCCCC"> gonna</font>

1019
00:49:14,200 --> 00:49:24,669
<font color="#E5E5E5">execute that as well how</font><font color="#CCCCCC"> dangerous will</font>

1020
00:49:18,940 --> 00:49:27,040
that be like<font color="#CCCCCC"> we said it was like it's</font>

1021
00:49:24,670 --> 00:49:28,900
<font color="#E5E5E5">not really JavaScript injection it's it</font>

1022
00:49:27,040 --> 00:49:36,130
is a good template injection so you can

1023
00:49:28,900 --> 00:49:38,290
only do something that<font color="#E5E5E5"> angular does can</font>

1024
00:49:36,130 --> 00:49:44,079
<font color="#CCCCCC">you manipulate the</font><font color="#E5E5E5"> Dom with angular</font>

1025
00:49:38,290 --> 00:49:47,500
expressions what<font color="#CCCCCC"> do those think so we</font>

1026
00:49:44,079 --> 00:49:49,480
said that angular<font color="#E5E5E5"> separates send</font><font color="#CCCCCC"> boxes</font>

1027
00:49:47,500 --> 00:49:50,799
your Dom right you can only do what

1028
00:49:49,480 --> 00:49:53,079
angle allows you to do you cannot

1029
00:49:50,799 --> 00:49:54,460
directly<font color="#E5E5E5"> manipulate the Dom which is</font>

1030
00:49:53,079 --> 00:49:56,760
when you can manipulate the Dom<font color="#E5E5E5"> that's</font>

1031
00:49:54,460 --> 00:50:03,599
like<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> really a problem</font>

1032
00:49:56,760 --> 00:50:03,599
so are you protected with the sandbox

1033
00:50:06,690 --> 00:50:11,609
there is an escape<font color="#CCCCCC"> exactly so yes the</font>

1034
00:50:09,809 --> 00:50:13,259
sandbox is there<font color="#E5E5E5"> but in every version</font>

1035
00:50:11,609 --> 00:50:15,390
there's either an escape order then

1036
00:50:13,259 --> 00:50:18,420
there's no<font color="#E5E5E5"> Sun box like in</font><font color="#CCCCCC"> angular 2</font><font color="#E5E5E5"> a</font>

1037
00:50:15,390 --> 00:50:21,450
<font color="#E5E5E5">version</font><font color="#CCCCCC"> - right so yes you're not really</font>

1038
00:50:18,420 --> 00:50:25,609
<font color="#E5E5E5">for Texas good somebody was paying</font>

1039
00:50:21,450 --> 00:50:29,299
<font color="#CCCCCC">attention now let's look at</font><font color="#E5E5E5"> another demo</font>

1040
00:50:25,609 --> 00:50:29,299
how<font color="#E5E5E5"> that actually works</font>

1041
00:50:47,609 --> 00:50:54,640
<font color="#E5E5E5">all right so this is a vulnerable by</font>

1042
00:50:52,450 --> 00:50:57,160
design application one of the apps that

1043
00:50:54,640 --> 00:50:58,808
we're using in<font color="#E5E5E5"> our training so it is an</font>

1044
00:50:57,160 --> 00:51:00,308
angular<font color="#CCCCCC"> application so it has</font><font color="#E5E5E5"> like a</font>

1045
00:50:58,809 --> 00:51:03,099
list of bookmarks that<font color="#E5E5E5"> you can create</font>

1046
00:51:00,309 --> 00:51:06,190
and we can search through this<font color="#CCCCCC"> bookmark</font>

1047
00:51:03,099 --> 00:51:08,079
so if we search for<font color="#CCCCCC"> now user test</font>

1048
00:51:06,190 --> 00:51:10,450
<font color="#E5E5E5">created something and we can see there</font>

1049
00:51:08,079 --> 00:51:14,529
<font color="#E5E5E5">is a bookmark</font><font color="#CCCCCC"> alright so that search box</font>

1050
00:51:10,450 --> 00:51:16,058
is a user input<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the other</font><font color="#E5E5E5"> thing we</font>

1051
00:51:14,529 --> 00:51:20,799
<font color="#E5E5E5">can see is that whatever I'm typing in</font>

1052
00:51:16,059 --> 00:51:24,220
the search will then end up<font color="#CCCCCC"> in the in</font>

1053
00:51:20,799 --> 00:51:26,529
the URL<font color="#E5E5E5"> right and that's usually the key</font>

1054
00:51:24,220 --> 00:51:28,149
for<font color="#E5E5E5"> us like as a pen tester you want to</font>

1055
00:51:26,529 --> 00:51:31,359
exploit that<font color="#E5E5E5"> because you can send this</font>

1056
00:51:28,150 --> 00:51:34,059
URL<font color="#E5E5E5"> to anybody because you cannot trick</font>

1057
00:51:31,359 --> 00:51:36,220
<font color="#E5E5E5">your friend to put something into the</font>

1058
00:51:34,059 --> 00:51:38,289
search<font color="#E5E5E5"> box I</font><font color="#CCCCCC"> mean with some</font><font color="#E5E5E5"> social</font>

1059
00:51:36,220 --> 00:51:39,910
engineering you<font color="#E5E5E5"> maybe can but the link</font>

1060
00:51:38,289 --> 00:51:40,839
<font color="#E5E5E5">is very easy you just email and say hey</font>

1061
00:51:39,910 --> 00:51:44,710
<font color="#CCCCCC">look at this</font>

1062
00:51:40,839 --> 00:51:47,739
funny video<font color="#E5E5E5"> or something so what can</font><font color="#CCCCCC"> we</font>

1063
00:51:44,710 --> 00:51:50,440
do so I want to see if it actually

1064
00:51:47,739 --> 00:51:52,180
<font color="#CCCCCC">executes some</font><font color="#E5E5E5"> angular expressions</font><font color="#CCCCCC"> so I'm</font>

1065
00:51:50,440 --> 00:51:54,099
gonna send an angular expression so I'm

1066
00:51:52,180 --> 00:51:57,730
<font color="#E5E5E5">gonna do you know two curly braces</font><font color="#CCCCCC"> and I</font>

1067
00:51:54,099 --> 00:52:02,650
say you know<font color="#E5E5E5"> two plus</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and search for</font>

1068
00:51:57,730 --> 00:52:05,319
that well<font color="#E5E5E5"> look what we can see is</font><font color="#CCCCCC"> that</font>

1069
00:52:02,650 --> 00:52:06,819
we're actually searching for<font color="#CCCCCC"> three right</font>

1070
00:52:05,319 --> 00:52:09,730
<font color="#E5E5E5">which gives</font><font color="#CCCCCC"> us an</font><font color="#E5E5E5"> indication that</font>

1071
00:52:06,819 --> 00:52:11,288
angular executed the two plus one<font color="#E5E5E5"> so</font>

1072
00:52:09,730 --> 00:52:12,970
that's one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the things that angular</font>

1073
00:52:11,289 --> 00:52:16,420
expressions can do they<font color="#CCCCCC"> can do a simple</font>

1074
00:52:12,970 --> 00:52:18,359
<font color="#E5E5E5">mathematical</font><font color="#CCCCCC"> expression</font><font color="#E5E5E5"> okay so there is</font>

1075
00:52:16,420 --> 00:52:23,289
an<font color="#E5E5E5"> injection so how can we exploit it</font>

1076
00:52:18,359 --> 00:52:24,700
well without before first we're not

1077
00:52:23,289 --> 00:52:26,710
<font color="#CCCCCC">gonna break out of the sandbox</font><font color="#E5E5E5"> right</font>

1078
00:52:24,700 --> 00:52:28,749
first we're gonna do something malicious

1079
00:52:26,710 --> 00:52:30,670
<font color="#E5E5E5">that we can do with the angular itself</font>

1080
00:52:28,749 --> 00:52:33,788
<font color="#E5E5E5">so we know there is</font><font color="#CCCCCC"> some client-side</font>

1081
00:52:30,670 --> 00:52:36,069
code here<font color="#E5E5E5"> again if you were an attacker</font>

1082
00:52:33,789 --> 00:52:37,390
<font color="#E5E5E5">you</font><font color="#CCCCCC"> would just like open up the</font>

1083
00:52:36,069 --> 00:52:39,549
<font color="#CCCCCC">JavaScript here because it's on the</font>

1084
00:52:37,390 --> 00:52:41,109
<font color="#CCCCCC">client-side</font><font color="#E5E5E5"> and look at the code what</font>

1085
00:52:39,549 --> 00:52:44,680
they're actually doing<font color="#E5E5E5"> and try to</font>

1086
00:52:41,109 --> 00:52:46,538
exploit the logic so<font color="#CCCCCC"> I know already in</font>

1087
00:52:44,680 --> 00:52:49,989
this application<font color="#CCCCCC"> that there is an object</font>

1088
00:52:46,539 --> 00:52:53,999
<font color="#E5E5E5">called user so what I'm gonna do is I'm</font>

1089
00:52:49,989 --> 00:52:53,999
just gonna send<font color="#E5E5E5"> user equals undefined</font>

1090
00:52:55,319 --> 00:52:59,850
and

1091
00:52:57,100 --> 00:53:03,730
I was logged in as user test test<font color="#CCCCCC"> and</font>

1092
00:52:59,850 --> 00:53:05,680
<font color="#CCCCCC">now I'm not logged in at all now there</font>

1093
00:53:03,730 --> 00:53:08,200
is a<font color="#CCCCCC"> sign-in button</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> signup button</font>

1094
00:53:05,680 --> 00:53:11,799
<font color="#CCCCCC">there's no data</font><font color="#E5E5E5"> because suddenly it</font>

1095
00:53:08,200 --> 00:53:14,680
logged me out<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I said user is</font>

1096
00:53:11,800 --> 00:53:17,230
undefined<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> this browser</font><font color="#CCCCCC"> in this</font>

1097
00:53:14,680 --> 00:53:19,620
session<font color="#CCCCCC"> now the user is undefined</font>

1098
00:53:17,230 --> 00:53:21,790
so here's an attack<font color="#E5E5E5"> right it's not</font>

1099
00:53:19,620 --> 00:53:23,500
<font color="#E5E5E5">horrible but</font><font color="#CCCCCC"> it's kind of an</font>

1100
00:53:21,790 --> 00:53:27,759
inconvenience<font color="#CCCCCC"> while I have to log</font><font color="#E5E5E5"> in</font>

1101
00:53:23,500 --> 00:53:30,430
again<font color="#CCCCCC"> maybe the way to like what an</font>

1102
00:53:27,760 --> 00:53:35,710
attacker would<font color="#CCCCCC"> really do is exploit that</font>

1103
00:53:30,430 --> 00:53:38,080
and then also send a link in the like in

1104
00:53:35,710 --> 00:53:39,970
<font color="#E5E5E5">the email it will be something like you</font>

1105
00:53:38,080 --> 00:53:42,670
know click on this link to<font color="#CCCCCC"> check your</font>

1106
00:53:39,970 --> 00:53:44,980
user profile<font color="#CCCCCC"> if you're not</font><font color="#E5E5E5"> able to</font><font color="#CCCCCC"> log</font>

1107
00:53:42,670 --> 00:53:46,840
in click<font color="#E5E5E5"> on this link and you know</font>

1108
00:53:44,980 --> 00:53:48,730
provide a username and<font color="#CCCCCC"> password and then</font>

1109
00:53:46,840 --> 00:53:50,380
<font color="#CCCCCC">the second link will actually not</font><font color="#E5E5E5"> be to</font>

1110
00:53:48,730 --> 00:53:52,750
your<font color="#E5E5E5"> website but will be to the attacker</font>

1111
00:53:50,380 --> 00:53:53,890
website<font color="#E5E5E5"> but we should going to look</font><font color="#CCCCCC"> just</font>

1112
00:53:52,750 --> 00:53:55,300
<font color="#E5E5E5">like your website and then</font><font color="#CCCCCC"> you're</font>

1113
00:53:53,890 --> 00:53:59,920
providing<font color="#CCCCCC"> username</font><font color="#E5E5E5"> across to somebody</font>

1114
00:53:55,300 --> 00:54:02,740
<font color="#E5E5E5">else like a double step phishing the</font>

1115
00:53:59,920 --> 00:54:05,350
<font color="#E5E5E5">interesting thing though is that if i</font>

1116
00:54:02,740 --> 00:54:09,370
refresh<font color="#E5E5E5"> the</font><font color="#CCCCCC"> page</font><font color="#E5E5E5"> completely if</font><font color="#CCCCCC"> I do at</font>

1117
00:54:05,350 --> 00:54:11,230
<font color="#CCCCCC">5:00 and reload</font><font color="#E5E5E5"> everything from the from</font>

1118
00:54:09,370 --> 00:54:14,290
the server<font color="#E5E5E5"> on the server I'm still</font>

1119
00:54:11,230 --> 00:54:18,580
logged in so when it refreshes<font color="#E5E5E5"> I'm back</font>

1120
00:54:14,290 --> 00:54:20,890
into my test test you know<font color="#E5E5E5"> profile and I</font>

1121
00:54:18,580 --> 00:54:23,440
can<font color="#E5E5E5"> go</font><font color="#CCCCCC"> back and I</font><font color="#E5E5E5"> can see you know my</font>

1122
00:54:20,890 --> 00:54:25,990
user here my profile here<font color="#CCCCCC"> I can go back</font>

1123
00:54:23,440 --> 00:54:33,940
to bookmarks so it's only<font color="#CCCCCC"> client-side</font>

1124
00:54:25,990 --> 00:54:36,819
<font color="#E5E5E5">attack can I delete</font><font color="#CCCCCC"> my session</font><font color="#E5E5E5"> you can</font>

1125
00:54:33,940 --> 00:54:40,750
delete<font color="#CCCCCC"> your session on the client but</font>

1126
00:54:36,820 --> 00:54:41,920
<font color="#E5E5E5">not on the server</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so well to do it</font>

1127
00:54:40,750 --> 00:54:43,810
your session you<font color="#E5E5E5"> would have to do with</font>

1128
00:54:41,920 --> 00:54:47,190
your session<font color="#E5E5E5"> cookie right assuming that</font>

1129
00:54:43,810 --> 00:54:50,320
you're using cookies so<font color="#E5E5E5"> a couple things</font>

1130
00:54:47,190 --> 00:54:52,060
<font color="#CCCCCC">you first to access the cookie object</font>

1131
00:54:50,320 --> 00:54:54,250
you will have to break<font color="#E5E5E5"> out of the</font>

1132
00:54:52,060 --> 00:54:55,810
sandbox<font color="#E5E5E5"> so you'll have to</font><font color="#CCCCCC"> use one of</font>

1133
00:54:54,250 --> 00:54:58,270
<font color="#E5E5E5">those you know sandbox escapes and then</font>

1134
00:54:55,810 --> 00:55:01,900
just say cookie equals<font color="#E5E5E5"> empty string and</font>

1135
00:54:58,270 --> 00:55:04,750
<font color="#E5E5E5">then you lost your cookie and for this</font>

1136
00:55:01,900 --> 00:55:07,420
your cookie has to be not protected from

1137
00:55:04,750 --> 00:55:09,520
<font color="#E5E5E5">the HTTP on not have the HTTP only flag</font>

1138
00:55:07,420 --> 00:55:10,700
because usually<font color="#E5E5E5"> where I command to set</font>

1139
00:55:09,520 --> 00:55:12,230
this flag

1140
00:55:10,700 --> 00:55:15,169
then you cannot<font color="#E5E5E5"> manipulate this cookie</font>

1141
00:55:12,230 --> 00:55:18,560
with it with JavaScript<font color="#E5E5E5"> but if both</font>

1142
00:55:15,170 --> 00:55:20,810
these<font color="#CCCCCC"> conditions</font><font color="#E5E5E5"> work then yes that's</font>

1143
00:55:18,560 --> 00:55:25,810
<font color="#CCCCCC">possible but again in this case</font><font color="#E5E5E5"> you</font>

1144
00:55:20,810 --> 00:55:28,099
diluted the cookie<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the browser so</font>

1145
00:55:25,810 --> 00:55:33,140
yeah so you will you<font color="#E5E5E5"> will force the user</font>

1146
00:55:28,099 --> 00:55:36,020
to<font color="#CCCCCC"> log in again</font><font color="#E5E5E5"> because even if you see</font>

1147
00:55:33,140 --> 00:55:39,020
if you do it<font color="#E5E5E5"> five and you load</font><font color="#CCCCCC"> the page</font>

1148
00:55:36,020 --> 00:55:40,849
<font color="#CCCCCC">completely from you know if not cache</font>

1149
00:55:39,020 --> 00:55:42,470
<font color="#CCCCCC">but completely</font><font color="#E5E5E5"> from the server actually</font>

1150
00:55:40,849 --> 00:55:44,480
<font color="#CCCCCC">the server will send</font><font color="#E5E5E5"> you the cookie</font>

1151
00:55:42,470 --> 00:55:46,430
<font color="#CCCCCC">again because the</font><font color="#E5E5E5"> it still exists</font><font color="#CCCCCC"> on the</font>

1152
00:55:44,480 --> 00:55:47,750
server<font color="#E5E5E5"> side because the session on the</font>

1153
00:55:46,430 --> 00:55:51,200
service<font color="#E5E5E5"> that hasn't been has not been</font>

1154
00:55:47,750 --> 00:55:54,920
closed<font color="#E5E5E5"> so yeah so you can kind of log</font><font color="#CCCCCC"> it</font>

1155
00:55:51,200 --> 00:55:57,980
off temporarily<font color="#CCCCCC"> but</font><font color="#E5E5E5"> now that we know</font>

1156
00:55:54,920 --> 00:56:00,079
<font color="#CCCCCC">that</font><font color="#E5E5E5"> there are sandbox protection so if</font>

1157
00:55:57,980 --> 00:56:04,070
we try to do<font color="#E5E5E5"> something like alert it's</font>

1158
00:56:00,079 --> 00:56:09,200
another example<font color="#E5E5E5"> you</font><font color="#CCCCCC"> alert one for</font>

1159
00:56:04,070 --> 00:56:11,270
<font color="#CCCCCC">example it's not going</font><font color="#E5E5E5"> to do anything</font>

1160
00:56:09,200 --> 00:56:13,819
right<font color="#E5E5E5"> because what it's trying to do is</font>

1161
00:56:11,270 --> 00:56:16,400
to execute alert on the scope<font color="#CCCCCC"> object</font>

1162
00:56:13,820 --> 00:56:19,910
which is a<font color="#E5E5E5"> built in angular object but</font>

1163
00:56:16,400 --> 00:56:25,220
if we use<font color="#CCCCCC"> one of those</font><font color="#E5E5E5"> bypasses that are</font>

1164
00:56:19,910 --> 00:56:27,618
<font color="#E5E5E5">well-known that I had on the slides then</font>

1165
00:56:25,220 --> 00:56:30,230
we're actually able to<font color="#CCCCCC"> manipulate</font><font color="#E5E5E5"> the</font>

1166
00:56:27,619 --> 00:56:32,750
<font color="#E5E5E5">Dom itself and now we have the error</font>

1167
00:56:30,230 --> 00:56:35,150
message pop<font color="#CCCCCC"> up and so if we can do alert</font>

1168
00:56:32,750 --> 00:56:37,310
<font color="#E5E5E5">in this case then</font><font color="#CCCCCC"> we can do document</font>

1169
00:56:35,150 --> 00:56:45,849
that cookie equals<font color="#E5E5E5"> empty and like remove</font>

1170
00:56:37,310 --> 00:56:49,700
the cooking all right so that's

1171
00:56:45,849 --> 00:56:53,230
basically brings us to the<font color="#CCCCCC"> end and gosh</font>

1172
00:56:49,700 --> 00:56:57,020
I did run to the whole hour thank<font color="#E5E5E5"> you</font>

1173
00:56:53,230 --> 00:56:59,839
so he is angular good framework what I

1174
00:56:57,020 --> 00:57:01,430
think yeah usually<font color="#CCCCCC"> I get a questions</font>

1175
00:56:59,839 --> 00:57:03,170
like okay<font color="#CCCCCC"> well if it's so broken why</font>

1176
00:57:01,430 --> 00:57:04,640
should why<font color="#CCCCCC"> should we use it but it's</font>

1177
00:57:03,170 --> 00:57:06,410
<font color="#CCCCCC">actually pretty</font><font color="#E5E5E5"> good it's pretty secure</font>

1178
00:57:04,640 --> 00:57:08,690
again<font color="#E5E5E5"> the vulnerabilities that</font><font color="#CCCCCC"> I</font>

1179
00:57:06,410 --> 00:57:11,450
<font color="#CCCCCC">demonstrated are mostly in the</font><font color="#E5E5E5"> plugins</font>

1180
00:57:08,690 --> 00:57:14,990
<font color="#CCCCCC">so if you're using</font><font color="#E5E5E5"> plugins check first</font>

1181
00:57:11,450 --> 00:57:17,328
<font color="#E5E5E5">how broken they are right now</font><font color="#CCCCCC"> or like do</font>

1182
00:57:14,990 --> 00:57:19,729
they<font color="#E5E5E5"> have any problems and if they don't</font>

1183
00:57:17,329 --> 00:57:21,560
then you're good<font color="#E5E5E5"> if you're separating</font>

1184
00:57:19,730 --> 00:57:22,640
<font color="#E5E5E5">your templates and you're not combining</font>

1185
00:57:21,560 --> 00:57:25,130
the server side<font color="#E5E5E5"> and the</font>

1186
00:57:22,640 --> 00:57:27,049
<font color="#E5E5E5">templates you're good</font><font color="#CCCCCC"> and you do get a</font>

1187
00:57:25,130 --> 00:57:29,150
lot of benefits you<font color="#E5E5E5"> know it's it's fast</font>

1188
00:57:27,049 --> 00:57:32,480
it's<font color="#E5E5E5"> testable it's it's pretty awesome</font>

1189
00:57:29,150 --> 00:57:49,430
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we have like one more</font><font color="#CCCCCC"> minute for</font>

1190
00:57:32,480 --> 00:57:51,529
questions<font color="#E5E5E5"> yeah yeah yeah so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> question</font>

1191
00:57:49,430 --> 00:57:52,879
is if you're<font color="#E5E5E5"> running node the server the</font>

1192
00:57:51,529 --> 00:57:55,220
<font color="#CCCCCC">Java on the server side and you are</font>

1193
00:57:52,880 --> 00:57:56,630
using<font color="#E5E5E5"> plugins and dependencies one</font>

1194
00:57:55,220 --> 00:57:58,038
<font color="#E5E5E5">plug-in one dip will depend on another</font>

1195
00:57:56,630 --> 00:57:59,960
<font color="#CCCCCC">plug-in that will depend on</font><font color="#E5E5E5"> another</font>

1196
00:57:58,039 --> 00:58:02,299
<font color="#CCCCCC">plug-in</font><font color="#E5E5E5"> and then you may have a</font>

1197
00:57:59,960 --> 00:58:04,579
situation<font color="#E5E5E5"> where you are</font><font color="#CCCCCC"> bringing some</font>

1198
00:58:02,299 --> 00:58:07,279
vulnerable code into<font color="#E5E5E5"> your app that you</font>

1199
00:58:04,579 --> 00:58:09,529
don't<font color="#E5E5E5"> even know right in angular because</font>

1200
00:58:07,279 --> 00:58:12,440
the dependency tree is not as deep

1201
00:58:09,529 --> 00:58:14,690
usually the plugins may have like<font color="#E5E5E5"> maybe</font>

1202
00:58:12,440 --> 00:58:17,119
one or two dependencies<font color="#CCCCCC"> so they</font><font color="#E5E5E5"> don't</font>

1203
00:58:14,690 --> 00:58:18,890
have you know<font color="#E5E5E5"> 25 dependencies down so</font>

1204
00:58:17,119 --> 00:58:20,569
you<font color="#E5E5E5"> know a little bit better</font><font color="#CCCCCC"> what you</font>

1205
00:58:18,890 --> 00:58:22,848
<font color="#CCCCCC">are including but I think that's because</font>

1206
00:58:20,569 --> 00:58:25,609
because angular<font color="#E5E5E5"> is newer and it's</font>

1207
00:58:22,849 --> 00:58:29,470
smaller so<font color="#CCCCCC"> is if it grows bigger than</font>

1208
00:58:25,609 --> 00:58:29,470
you may end up with<font color="#CCCCCC"> the same problem</font>

1209
00:58:47,319 --> 00:58:57,049
yeah<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> question was node again</font><font color="#CCCCCC"> a</font>

1210
00:58:55,009 --> 00:58:59,630
few<font color="#CCCCCC"> years</font><font color="#E5E5E5"> and node because it's the path</font>

1211
00:58:57,049 --> 00:59:02,390
the<font color="#E5E5E5"> the platform has been used for a</font>

1212
00:58:59,630 --> 00:59:03,920
<font color="#CCCCCC">long time and there</font><font color="#E5E5E5"> lot of packages they</font>

1213
00:59:02,390 --> 00:59:06,230
have something<font color="#E5E5E5"> that's called NS peanut</font>

1214
00:59:03,920 --> 00:59:07,309
and<font color="#CCCCCC"> no security</font><font color="#E5E5E5"> project that audits all</font>

1215
00:59:06,230 --> 00:59:09,500
the<font color="#CCCCCC"> plugins and</font><font color="#E5E5E5"> if there is a</font>

1216
00:59:07,309 --> 00:59:11,269
vulnerability<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can you know go</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> NSP</font>

1217
00:59:09,500 --> 00:59:14,509
<font color="#E5E5E5">dot-com</font><font color="#CCCCCC"> and look them up</font><font color="#E5E5E5"> is there</font>

1218
00:59:11,269 --> 00:59:17,118
anything like that<font color="#E5E5E5"> for angular no the</font>

1219
00:59:14,509 --> 00:59:19,970
answer is no it is created<font color="#E5E5E5"> by Google so</font>

1220
00:59:17,119 --> 00:59:22,420
there as far<font color="#E5E5E5"> as I know there</font><font color="#CCCCCC"> isn't any</font>

1221
00:59:19,970 --> 00:59:25,970
like one location<font color="#CCCCCC"> there are a</font><font color="#E5E5E5"> couple</font>

1222
00:59:22,420 --> 00:59:27,680
blog posts<font color="#CCCCCC"> and like</font><font color="#E5E5E5"> websites that try</font>

1223
00:59:25,970 --> 00:59:30,019
just individual people<font color="#E5E5E5"> try to collect</font>

1224
00:59:27,680 --> 00:59:32,118
this information<font color="#CCCCCC"> but</font><font color="#E5E5E5"> usually if you</font><font color="#CCCCCC"> just</font>

1225
00:59:30,019 --> 00:59:33,870
use a<font color="#E5E5E5"> plug-in</font><font color="#CCCCCC"> you have to go to github</font>

1226
00:59:32,119 --> 00:59:35,220
you go to issues and<font color="#E5E5E5"> you can</font>

1227
00:59:33,870 --> 00:59:37,080
<font color="#E5E5E5">search through issues and see if there</font>

1228
00:59:35,220 --> 00:59:39,200
<font color="#CCCCCC">are</font><font color="#E5E5E5"> any security</font><font color="#CCCCCC"> issues yeah</font>

1229
00:59:37,080 --> 00:59:51,540
<font color="#E5E5E5">unfortunately</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have it</font><font color="#CCCCCC"> like that</font>

1230
00:59:39,200 --> 00:59:53,310
<font color="#CCCCCC">yep yes</font><font color="#E5E5E5"> question is can you</font><font color="#CCCCCC"> use the</font>

1231
00:59:51,540 --> 00:59:56,130
<font color="#E5E5E5">breakout the sandbox breakout</font><font color="#CCCCCC"> that we</font>

1232
00:59:53,310 --> 00:59:58,710
showed to defeat the cross-site request

1233
00:59:56,130 --> 01:00:00,690
forgery<font color="#CCCCCC"> cookie mechanism absolutely</font>

1234
00:59:58,710 --> 01:00:02,910
so one thing<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to remember with a</font>

1235
01:00:00,690 --> 01:00:04,800
cross-site request forgery<font color="#CCCCCC"> is that if</font>

1236
01:00:02,910 --> 01:00:06,529
you have a cross-site scripting and

1237
01:00:04,800 --> 01:00:09,120
that's your cross-site scripting

1238
01:00:06,530 --> 01:00:11,250
nothing is going<font color="#E5E5E5"> to protect you so</font>

1239
01:00:09,120 --> 01:00:13,220
because basically the way cross-site

1240
01:00:11,250 --> 01:00:17,190
request forgery protects you is it says

1241
01:00:13,220 --> 01:00:18,990
yes you have<font color="#E5E5E5"> the cookie but you have to</font>

1242
01:00:17,190 --> 01:00:21,270
be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> the JavaScript on the</font>

1243
01:00:18,990 --> 01:00:22,680
client<font color="#CCCCCC"> side</font><font color="#E5E5E5"> to read this cookie and</font><font color="#CCCCCC"> to</font>

1244
01:00:21,270 --> 01:00:24,390
create<font color="#E5E5E5"> this header and send it to</font><font color="#CCCCCC"> the</font>

1245
01:00:22,680 --> 01:00:28,109
server<font color="#CCCCCC"> and if you have address with</font>

1246
01:00:24,390 --> 01:00:30,420
<font color="#CCCCCC">injection</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> absolutely yes</font>

1247
01:00:28,110 --> 01:00:32,940
so the first if you<font color="#E5E5E5"> like if you</font><font color="#CCCCCC"> are a</font>

1248
01:00:30,420 --> 01:00:34,230
developer<font color="#CCCCCC"> and you get a report from you</font>

1249
01:00:32,940 --> 01:00:36,330
know some<font color="#CCCCCC"> third party company that</font>

1250
01:00:34,230 --> 01:00:37,830
<font color="#E5E5E5">contestant</font><font color="#CCCCCC"> you app and says hey you</font><font color="#E5E5E5"> have</font>

1251
01:00:36,330 --> 01:00:40,740
<font color="#CCCCCC">a cross-site scripting</font><font color="#E5E5E5"> and you have a</font>

1252
01:00:37,830 --> 01:00:43,370
Caesar<font color="#E5E5E5"> first thing you</font><font color="#CCCCCC"> cheat you fix its</font>

1253
01:00:40,740 --> 01:00:51,689
cross-site scripting<font color="#E5E5E5"> good question</font>

1254
01:00:43,370 --> 01:00:53,819
any other questions yep<font color="#CCCCCC"> I know the</font>

1255
01:00:51,690 --> 01:00:55,500
question was if<font color="#CCCCCC"> the app</font><font color="#E5E5E5"> vulnerable by</font>

1256
01:00:53,820 --> 01:00:57,590
design was open<font color="#E5E5E5"> source no unfortunately</font>

1257
01:00:55,500 --> 01:00:59,520
this is<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> use in our</font>

1258
01:00:57,590 --> 01:01:01,350
<font color="#E5E5E5">instructor-led training which is a</font>

1259
01:00:59,520 --> 01:01:05,100
<font color="#E5E5E5">service we provide as a company so it's</font>

1260
01:01:01,350 --> 01:01:07,529
our IP but yeah thank you<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> I'm</font>

1261
01:01:05,100 --> 01:01:09,330
not<font color="#E5E5E5"> gonna restrain you guys from going</font>

1262
01:01:07,530 --> 01:01:10,940
<font color="#E5E5E5">and having lunch</font><font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much for</font>

1263
01:01:09,330 --> 01:01:14,940
<font color="#E5E5E5">your attention</font>

1264
01:01:10,940 --> 01:01:14,940
[Applause]

