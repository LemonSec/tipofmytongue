1
00:00:02,210 --> 00:00:07,350
hello<font color="#E5E5E5"> cool it's working and so hey</font>

2
00:00:05,339 --> 00:00:09,870
everyone cheers for coming<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you all</font>

3
00:00:07,350 --> 00:00:11,730
enjoyed the<font color="#E5E5E5"> lunch and</font><font color="#CCCCCC"> chews for this</font>

4
00:00:09,870 --> 00:00:15,540
<font color="#E5E5E5">security</font><font color="#CCCCCC"> advice for sorting out</font><font color="#E5E5E5"> for us</font>

5
00:00:11,730 --> 00:00:17,630
<font color="#E5E5E5">and so yeah</font><font color="#CCCCCC"> is will</font><font color="#E5E5E5"> and we're going to</font>

6
00:00:15,540 --> 00:00:19,710
be<font color="#CCCCCC"> talking about attach detection and</font>

7
00:00:17,630 --> 00:00:21,689
specifically kind<font color="#CCCCCC"> of looking at</font>

8
00:00:19,710 --> 00:00:24,060
different<font color="#E5E5E5"> attacks and detecting them in</font>

9
00:00:21,689 --> 00:00:30,420
the<font color="#CCCCCC"> wild and kind of</font><font color="#E5E5E5"> covering the</font>

10
00:00:24,060 --> 00:00:33,480
concepts are<font color="#E5E5E5"> frightening so we are free</font>

11
00:00:30,420 --> 00:00:35,430
hunters from<font color="#E5E5E5"> concepts by MWR and I'll</font>

12
00:00:33,480 --> 00:00:38,430
come on to<font color="#E5E5E5"> what that</font><font color="#CCCCCC"> is in just</font><font color="#E5E5E5"> a second</font>

13
00:00:35,430 --> 00:00:40,500
<font color="#E5E5E5">and but specifically in our day job we</font>

14
00:00:38,430 --> 00:00:42,719
kind of<font color="#E5E5E5"> cover the area of kind of</font>

15
00:00:40,500 --> 00:00:45,590
<font color="#E5E5E5">searching</font><font color="#CCCCCC"> for different bad stuff across</font>

16
00:00:42,719 --> 00:00:48,840
our clients to<font color="#CCCCCC"> stay</font><font color="#E5E5E5"> its day to day</font><font color="#CCCCCC"> and</font>

17
00:00:45,590 --> 00:00:51,300
now to kind<font color="#E5E5E5"> of do that there's very much</font>

18
00:00:48,840 --> 00:00:53,129
<font color="#E5E5E5">a focus on understanding</font><font color="#CCCCCC"> how attackers</font>

19
00:00:51,300 --> 00:00:57,030
work and so understanding the offensive

20
00:00:53,129 --> 00:00:58,739
attackers mindset so we do lots<font color="#CCCCCC"> of</font>

21
00:00:57,030 --> 00:01:00,420
research into the different<font color="#CCCCCC"> latest</font>

22
00:00:58,739 --> 00:01:01,980
attack trends that are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> maybe</font>

23
00:01:00,420 --> 00:01:04,640
profess<font color="#CCCCCC"> that different malware samples</font>

24
00:01:01,980 --> 00:01:07,259
are using and attackers are implementing

25
00:01:04,640 --> 00:01:10,860
different exploits or<font color="#E5E5E5"> malware samples</font>

26
00:01:07,260 --> 00:01:12,510
that have been<font color="#CCCCCC"> seen in</font><font color="#E5E5E5"> the wild</font><font color="#CCCCCC"> and but</font>

27
00:01:10,860 --> 00:01:15,570
as part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that we have to look at</font>

28
00:01:12,510 --> 00:01:17,520
detecting and all kinds of different new

29
00:01:15,570 --> 00:01:19,258
techniques that<font color="#E5E5E5"> attackers are always</font>

30
00:01:17,520 --> 00:01:21,630
coming up<font color="#E5E5E5"> with and so we're constantly</font>

31
00:01:19,259 --> 00:01:24,869
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the lookout for developing new</font>

32
00:01:21,630 --> 00:01:29,880
techniques<font color="#CCCCCC"> and the result</font><font color="#E5E5E5"> of that will</font>

33
00:01:24,869 --> 00:01:33,539
<font color="#CCCCCC">be the output of this talk today so what</font>

34
00:01:29,880 --> 00:01:36,390
exactly is free hunting<font color="#E5E5E5"> when we think</font>

35
00:01:33,540 --> 00:01:38,460
<font color="#E5E5E5">from an offensive perspective and we've</font>

36
00:01:36,390 --> 00:01:41,610
kind<font color="#E5E5E5"> of got two different realms so</font>

37
00:01:38,460 --> 00:01:43,770
you've got automation and manual<font color="#E5E5E5"> now</font>

38
00:01:41,610 --> 00:01:46,380
when you ask anyone<font color="#E5E5E5"> what</font><font color="#CCCCCC"> they kind of</font>

39
00:01:43,770 --> 00:01:48,060
want<font color="#CCCCCC"> to do in InfoSec if they want</font><font color="#E5E5E5"> to go</font>

40
00:01:46,380 --> 00:01:50,339
into offensive<font color="#E5E5E5"> security typically you</font>

41
00:01:48,060 --> 00:01:52,380
<font color="#E5E5E5">want to be a pen tester who would want</font>

42
00:01:50,340 --> 00:01:54,119
to<font color="#E5E5E5"> sit and do</font><font color="#CCCCCC"> Vaughn</font><font color="#E5E5E5"> scanning</font><font color="#CCCCCC"> clicking</font>

43
00:01:52,380 --> 00:01:57,539
the<font color="#E5E5E5"> Run button</font><font color="#CCCCCC"> a necess and in output a</font>

44
00:01:54,119 --> 00:01:59,820
report and and so you<font color="#CCCCCC"> know that manual</font>

45
00:01:57,540 --> 00:02:01,200
part<font color="#E5E5E5"> of offensive</font><font color="#CCCCCC"> security is much more</font>

46
00:01:59,820 --> 00:02:03,750
interesting<font color="#CCCCCC"> it's what people are aspire</font>

47
00:02:01,200 --> 00:02:07,290
to do and yet when you<font color="#CCCCCC"> look</font><font color="#E5E5E5"> from the</font>

48
00:02:03,750 --> 00:02:10,348
defensive perspective we commonly focus

49
00:02:07,290 --> 00:02:12,989
a lot more<font color="#CCCCCC"> so on a driven detection and</font>

50
00:02:10,348 --> 00:02:13,709
which is primarily automation based and

51
00:02:12,989 --> 00:02:16,320
so

52
00:02:13,710 --> 00:02:18,330
you know<font color="#CCCCCC"> this common</font><font color="#E5E5E5"> common fit whereby</font>

53
00:02:16,320 --> 00:02:21,090
people<font color="#CCCCCC"> don't work</font><font color="#E5E5E5"> in defensive security</font>

54
00:02:18,330 --> 00:02:23,100
and<font color="#CCCCCC"> given it's a lot more automation</font>

55
00:02:21,090 --> 00:02:25,200
focused<font color="#E5E5E5"> you can understand why you know</font>

56
00:02:23,100 --> 00:02:28,410
why would people want<font color="#CCCCCC"> to do this kind of</font>

57
00:02:25,200 --> 00:02:31,560
more<font color="#E5E5E5"> boring job and that kind of doesn't</font>

58
00:02:28,410 --> 00:02:34,770
<font color="#E5E5E5">typically involve skill from a people</font>

59
00:02:31,560 --> 00:02:37,560
perspective<font color="#CCCCCC"> and so when we look at</font>

60
00:02:34,770 --> 00:02:40,130
<font color="#E5E5E5">defensive security and we kind of focus</font>

61
00:02:37,560 --> 00:02:43,200
much more on the<font color="#CCCCCC"> concept our fronting</font>

62
00:02:40,130 --> 00:02:45,210
<font color="#E5E5E5">and so for hunting is this manual</font>

63
00:02:43,200 --> 00:02:47,179
process whereby<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> constantly</font>

64
00:02:45,210 --> 00:02:49,620
<font color="#CCCCCC">searching for</font><font color="#E5E5E5"> the latest attacks and</font>

65
00:02:47,180 --> 00:02:52,320
driving that back into<font color="#CCCCCC"> our</font><font color="#E5E5E5"> alert room</font>

66
00:02:49,620 --> 00:02:54,450
and detection<font color="#CCCCCC"> and so if you</font><font color="#E5E5E5"> imagine that</font>

67
00:02:52,320 --> 00:02:57,269
<font color="#CCCCCC">a new attack comes out</font><font color="#E5E5E5"> then maybe you</font>

68
00:02:54,450 --> 00:02:59,549
couldn't detect beforehand<font color="#E5E5E5"> we drive that</font>

69
00:02:57,270 --> 00:03:01,650
<font color="#E5E5E5">back into</font><font color="#CCCCCC"> our lipid detection and then</font>

70
00:02:59,550 --> 00:03:03,000
<font color="#E5E5E5">we can continue</font><font color="#CCCCCC"> hunting</font><font color="#E5E5E5"> knowing that the</font>

71
00:03:01,650 --> 00:03:06,870
<font color="#E5E5E5">automation will pick up things</font><font color="#CCCCCC"> that</font>

72
00:03:03,000 --> 00:03:10,140
we've seen<font color="#E5E5E5"> in the past</font><font color="#CCCCCC"> and so kind of to</font>

73
00:03:06,870 --> 00:03:12,960
put<font color="#CCCCCC"> that into perspective</font><font color="#E5E5E5"> if we look at</font>

74
00:03:10,140 --> 00:03:15,089
<font color="#CCCCCC">different for</font><font color="#E5E5E5"> actors at the bottom we've</font>

75
00:03:12,960 --> 00:03:17,310
got<font color="#E5E5E5"> our common script kiddies</font><font color="#CCCCCC"> that we</font>

76
00:03:15,090 --> 00:03:20,250
might see day<font color="#E5E5E5"> to day</font><font color="#CCCCCC"> and at</font><font color="#E5E5E5"> the top</font>

77
00:03:17,310 --> 00:03:21,780
maybe are<font color="#E5E5E5"> more sophisticated apts and so</font>

78
00:03:20,250 --> 00:03:24,300
these<font color="#E5E5E5"> guys are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to vary massively</font>

79
00:03:21,780 --> 00:03:27,630
<font color="#E5E5E5">in terms of sophistication and technical</font>

80
00:03:24,300 --> 00:03:29,910
capability and now kind<font color="#E5E5E5"> of looking back</font>

81
00:03:27,630 --> 00:03:31,620
<font color="#E5E5E5">to the previous slide</font><font color="#CCCCCC"> the automation is</font>

82
00:03:29,910 --> 00:03:33,630
very much<font color="#E5E5E5"> focused on picking up these</font>

83
00:03:31,620 --> 00:03:37,200
low sophisticated attackers that

84
00:03:33,630 --> 00:03:38,880
commodity malware and script kiddies so

85
00:03:37,200 --> 00:03:41,190
if we can automate as much of that<font color="#E5E5E5"> as</font>

86
00:03:38,880 --> 00:03:43,769
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> we can then begin to</font><font color="#CCCCCC"> focus much</font>

87
00:03:41,190 --> 00:03:45,630
<font color="#E5E5E5">more on</font><font color="#CCCCCC"> da beauties and</font><font color="#E5E5E5"> a more organized</font>

88
00:03:43,770 --> 00:03:49,170
crime are more sophisticated attackers

89
00:03:45,630 --> 00:03:50,910
and<font color="#E5E5E5"> pick them up and so the output of</font>

90
00:03:49,170 --> 00:03:52,950
today's<font color="#CCCCCC"> tart will really be</font><font color="#E5E5E5"> looking at</font>

91
00:03:50,910 --> 00:03:55,170
<font color="#E5E5E5">different techniques and that we can do</font>

92
00:03:52,950 --> 00:03:56,929
whereby<font color="#CCCCCC"> were proactively hunting for</font>

93
00:03:55,170 --> 00:03:59,910
<font color="#E5E5E5">these types of attackers</font>

94
00:03:56,930 --> 00:04:01,920
so a quick run-through of the agenda for

95
00:03:59,910 --> 00:04:04,799
today<font color="#E5E5E5"> we're going to cover some</font><font color="#CCCCCC"> of the</font>

96
00:04:01,920 --> 00:04:07,589
concepts of attack detection and<font color="#CCCCCC"> we'll</font>

97
00:04:04,800 --> 00:04:08,250
then do a run-through of some quite

98
00:04:07,590 --> 00:04:10,500
simple

99
00:04:08,250 --> 00:04:14,060
when there's always concepts<font color="#E5E5E5"> and in the</font>

100
00:04:10,500 --> 00:04:16,140
principle of code<font color="#E5E5E5"> injection</font><font color="#CCCCCC"> and second</font>

101
00:04:14,060 --> 00:04:18,540
then we'll be looking at<font color="#CCCCCC"> two kind of</font>

102
00:04:16,140 --> 00:04:20,519
example case studies<font color="#E5E5E5"> and the temperature</font>

103
00:04:18,540 --> 00:04:23,070
<font color="#CCCCCC">and</font><font color="#E5E5E5"> level strike</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually how you</font>

104
00:04:20,519 --> 00:04:24,719
can detect<font color="#E5E5E5"> those in memory and then from</font>

105
00:04:23,070 --> 00:04:26,700
there we'll be<font color="#E5E5E5"> kind of covering the</font>

106
00:04:24,720 --> 00:04:27,720
concept of implementing memory<font color="#E5E5E5"> forensics</font>

107
00:04:26,700 --> 00:04:29,729
scale

108
00:04:27,720 --> 00:04:36,050
how that<font color="#CCCCCC"> can be</font><font color="#E5E5E5"> achieved and the</font>

109
00:04:29,730 --> 00:04:39,690
benefits<font color="#E5E5E5"> of doing so why is that K</font><font color="#CCCCCC"> yeah</font>

110
00:04:36,050 --> 00:04:42,330
<font color="#E5E5E5">so at</font><font color="#CCCCCC"> counter Sept we as</font><font color="#E5E5E5"> matt said we</font>

111
00:04:39,690 --> 00:04:46,260
<font color="#CCCCCC">specialized in detecting</font><font color="#E5E5E5"> advanced</font>

112
00:04:42,330 --> 00:04:48,300
malware<font color="#E5E5E5"> across customers estate and we</font>

113
00:04:46,260 --> 00:04:51,390
<font color="#E5E5E5">primarily do this from from three data</font>

114
00:04:48,300 --> 00:04:53,640
sources<font color="#E5E5E5"> so we have our host</font><font color="#CCCCCC"> base agents</font>

115
00:04:51,390 --> 00:04:55,349
and this is our own endpoint<font color="#E5E5E5"> detection</font>

116
00:04:53,640 --> 00:04:57,599
and response tool that we roll out

117
00:04:55,350 --> 00:05:00,780
<font color="#CCCCCC">across on every host</font><font color="#E5E5E5"> in our customers</font>

118
00:04:57,600 --> 00:05:01,950
<font color="#CCCCCC">network we also have a</font><font color="#E5E5E5"> network analysis</font>

119
00:05:00,780 --> 00:05:03,840
<font color="#CCCCCC">and then we have log analysis and we</font>

120
00:05:01,950 --> 00:05:10,320
combine these all<font color="#CCCCCC"> together</font><font color="#E5E5E5"> to detect</font>

121
00:05:03,840 --> 00:05:12,419
threats in terms of our EDR<font color="#E5E5E5"> tool we we</font>

122
00:05:10,320 --> 00:05:14,430
query route<font color="#E5E5E5"> various sources of</font>

123
00:05:12,420 --> 00:05:17,100
information<font color="#E5E5E5"> to</font><font color="#CCCCCC"> try and look for the kind</font>

124
00:05:14,430 --> 00:05:19,470
<font color="#E5E5E5">of things that now would commonly do</font><font color="#CCCCCC"> so</font>

125
00:05:17,100 --> 00:05:22,800
these can contain<font color="#E5E5E5"> persistent artifacts</font>

126
00:05:19,470 --> 00:05:23,760
<font color="#CCCCCC">post execution</font><font color="#E5E5E5"> in memory attacks which</font>

127
00:05:22,800 --> 00:05:27,840
traditionally take the form<font color="#CCCCCC"> of code</font>

128
00:05:23,760 --> 00:05:29,700
injection and then<font color="#CCCCCC"> network artifacts for</font>

129
00:05:27,840 --> 00:05:33,210
this talk we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> primarily going to</font>

130
00:05:29,700 --> 00:05:35,610
focus on<font color="#E5E5E5"> memory analysis and the reason</font>

131
00:05:33,210 --> 00:05:38,150
this is because so traditional attack

132
00:05:35,610 --> 00:05:41,430
<font color="#E5E5E5">sorry traditional malware detection</font>

133
00:05:38,150 --> 00:05:43,080
<font color="#E5E5E5">tends to</font><font color="#CCCCCC"> focus on essentially trying</font><font color="#E5E5E5"> to</font>

134
00:05:41,430 --> 00:05:46,470
detect<font color="#E5E5E5"> some malicious executables on</font>

135
00:05:43,080 --> 00:05:48,780
disk<font color="#E5E5E5"> and for a while now</font><font color="#CCCCCC"> for actors have</font>

136
00:05:46,470 --> 00:05:51,660
sort<font color="#E5E5E5"> of shifted to reside in memory</font>

137
00:05:48,780 --> 00:05:53,010
essentially<font color="#E5E5E5"> so they avoid writing</font><font color="#CCCCCC"> to</font>

138
00:05:51,660 --> 00:05:59,640
disk<font color="#CCCCCC"> wherever they can</font>

139
00:05:53,010 --> 00:06:00,479
and metalloids meterpreter is a really

140
00:05:59,640 --> 00:06:04,020
good example<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> and they've been</font>

141
00:06:00,479 --> 00:06:05,729
<font color="#CCCCCC">using sort</font><font color="#E5E5E5"> of techniques to stay</font>

142
00:06:04,020 --> 00:06:08,370
resident in memory<font color="#E5E5E5"> for over a decade now</font>

143
00:06:05,729 --> 00:06:10,979
<font color="#E5E5E5">and the interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is that these</font>

144
00:06:08,370 --> 00:06:13,290
these techniques still have a an air of

145
00:06:10,979 --> 00:06:14,729
<font color="#E5E5E5">being advanced</font><font color="#CCCCCC"> they're stealthy you can</font>

146
00:06:13,290 --> 00:06:16,020
go to a lot of<font color="#E5E5E5"> these all these common</font>

147
00:06:14,729 --> 00:06:17,070
attack Framework tools you can go to

148
00:06:16,020 --> 00:06:19,440
their github<font color="#E5E5E5"> and they're like oh we're</font>

149
00:06:17,070 --> 00:06:21,870
memory<font color="#CCCCCC"> maquettes injection stuff like</font>

150
00:06:19,440 --> 00:06:23,850
that so this talk is aimed at

151
00:06:21,870 --> 00:06:25,500
understanding<font color="#E5E5E5"> how those</font><font color="#CCCCCC"> in-memory</font>

152
00:06:23,850 --> 00:06:29,040
<font color="#CCCCCC">attacks and those code injection attacks</font>

153
00:06:25,500 --> 00:06:31,620
work<font color="#E5E5E5"> how you can detect them</font><font color="#CCCCCC"> and then</font>

154
00:06:29,040 --> 00:06:33,510
how you<font color="#CCCCCC"> can do this at scale</font><font color="#E5E5E5"> one thing I</font>

155
00:06:31,620 --> 00:06:35,250
<font color="#CCCCCC">should add here is we've we</font><font color="#E5E5E5"> chosen</font>

156
00:06:33,510 --> 00:06:37,020
deliberately<font color="#E5E5E5"> chose to focus on covert</font>

157
00:06:35,250 --> 00:06:38,970
strike and meterpreter<font color="#CCCCCC"> because they're</font>

158
00:06:37,020 --> 00:06:40,680
open<font color="#CCCCCC"> sore oh you can get trial version</font>

159
00:06:38,970 --> 00:06:41,920
<font color="#E5E5E5">of</font><font color="#CCCCCC"> pebble strike but they're easy to</font>

160
00:06:40,680 --> 00:06:44,080
test

161
00:06:41,920 --> 00:06:47,830
plenty<font color="#E5E5E5"> of malware uses these techniques</font>

162
00:06:44,080 --> 00:06:49,270
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> can find all sorts of unknown</font>

163
00:06:47,830 --> 00:06:50,650
<font color="#E5E5E5">stuff in the world that we utilize these</font>

164
00:06:49,270 --> 00:06:53,320
<font color="#E5E5E5">things so they're generic detection</font>

165
00:06:50,650 --> 00:06:54,609
techniques that<font color="#E5E5E5"> can find all</font><font color="#CCCCCC"> sorts</font><font color="#E5E5E5"> one</font>

166
00:06:53,320 --> 00:06:56,080
<font color="#E5E5E5">caveat as well we are talking</font>

167
00:06:54,610 --> 00:06:57,700
specifically about user land in this

168
00:06:56,080 --> 00:07:02,229
talk<font color="#E5E5E5"> nothing we're going to mention</font>

169
00:06:57,700 --> 00:07:03,460
won't have anything to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel so I'm</font>

170
00:07:02,230 --> 00:07:05,320
just<font color="#E5E5E5"> gonna give a quick</font><font color="#CCCCCC"> overview of</font><font color="#E5E5E5"> some</font>

171
00:07:03,460 --> 00:07:07,210
very basic<font color="#E5E5E5"> windows internal stuff and</font>

172
00:07:05,320 --> 00:07:10,030
then give an outline<font color="#E5E5E5"> of these kind of</font>

173
00:07:07,210 --> 00:07:13,930
code injection<font color="#E5E5E5"> techniques so starting</font>

174
00:07:10,030 --> 00:07:15,700
<font color="#E5E5E5">very very simply so any user application</font>

175
00:07:13,930 --> 00:07:17,890
that you run in Windows will tend<font color="#CCCCCC"> to run</font>

176
00:07:15,700 --> 00:07:19,719
as a Windows process and this will

177
00:07:17,890 --> 00:07:22,419
always<font color="#E5E5E5"> consist of at least five things</font>

178
00:07:19,720 --> 00:07:24,700
so you'll have at the very<font color="#CCCCCC"> least so</font>

179
00:07:22,420 --> 00:07:25,930
you'll have<font color="#E5E5E5"> your your executable program</font>

180
00:07:24,700 --> 00:07:29,110
which will<font color="#E5E5E5"> consist of the actual code</font>

181
00:07:25,930 --> 00:07:31,000
data resources what<font color="#E5E5E5"> it needs to run this</font>

182
00:07:29,110 --> 00:07:33,340
is then<font color="#CCCCCC"> given its own</font><font color="#E5E5E5"> private memory</font>

183
00:07:31,000 --> 00:07:34,960
address<font color="#CCCCCC"> space into</font><font color="#E5E5E5"> which it normally</font>

184
00:07:33,340 --> 00:07:38,409
would map any runtime<font color="#E5E5E5"> library so it</font>

185
00:07:34,960 --> 00:07:40,060
needs to use<font color="#CCCCCC"> to function properly now in</font>

186
00:07:38,410 --> 00:07:43,590
Windows these are referred to<font color="#E5E5E5"> as</font>

187
00:07:40,060 --> 00:07:46,060
<font color="#CCCCCC">dynamically linked libraries or dll's</font>

188
00:07:43,590 --> 00:07:47,530
<font color="#E5E5E5">every process would also have at least</font>

189
00:07:46,060 --> 00:07:49,390
one thread<font color="#E5E5E5"> of execution so in this</font>

190
00:07:47,530 --> 00:07:51,789
context<font color="#CCCCCC"> so it's a very</font><font color="#E5E5E5"> simple example</font>

191
00:07:49,390 --> 00:07:53,380
<font color="#E5E5E5">but you would maybe expect one thread</font><font color="#CCCCCC"> of</font>

192
00:07:51,790 --> 00:07:55,660
execution to maybe start at the main

193
00:07:53,380 --> 00:07:59,710
entry point of notepad.exe<font color="#CCCCCC"> that</font><font color="#E5E5E5"> maybe</font>

194
00:07:55,660 --> 00:08:02,560
<font color="#E5E5E5">with all you see and lastly every</font>

195
00:07:59,710 --> 00:08:04,719
<font color="#CCCCCC">process will have an access token or</font>

196
00:08:02,560 --> 00:08:06,130
security context so this will dictate

197
00:08:04,720 --> 00:08:09,240
its permissions and its privileges so

198
00:08:06,130 --> 00:08:09,240
what it can<font color="#E5E5E5"> and can't do</font>

199
00:08:12,540 --> 00:08:17,830
so if say<font color="#E5E5E5"> notepad</font><font color="#CCCCCC"> or XE it actually</font>

200
00:08:16,720 --> 00:08:19,900
<font color="#E5E5E5">wants</font><font color="#CCCCCC"> to interact</font><font color="#E5E5E5"> with the operating</font>

201
00:08:17,830 --> 00:08:21,159
system<font color="#CCCCCC"> in any way then Windows</font><font color="#E5E5E5"> will</font>

202
00:08:19,900 --> 00:08:23,859
allow you to<font color="#E5E5E5"> do this through the windows</font>

203
00:08:21,160 --> 00:08:26,290
API<font color="#E5E5E5"> and this is implemented through a</font>

204
00:08:23,860 --> 00:08:27,820
series of cordial else basically<font color="#E5E5E5"> so if</font>

205
00:08:26,290 --> 00:08:28,780
your notepad<font color="#CCCCCC"> you can load these</font><font color="#E5E5E5"> D levels</font>

206
00:08:27,820 --> 00:08:30,550
into your process<font color="#CCCCCC"> and you can start</font>

207
00:08:28,780 --> 00:08:31,989
calling<font color="#E5E5E5"> functions and through doing this</font>

208
00:08:30,550 --> 00:08:34,180
you<font color="#E5E5E5"> can interpret the registry you can</font>

209
00:08:31,990 --> 00:08:35,589
check the file system<font color="#E5E5E5"> you can start</font>

210
00:08:34,179 --> 00:08:39,848
network connections and you can manage

211
00:08:35,589 --> 00:08:42,310
<font color="#E5E5E5">memory now</font><font color="#CCCCCC"> Windows is a very powerful</font>

212
00:08:39,849 --> 00:08:44,080
operating system it's it's<font color="#E5E5E5"> very flexible</font>

213
00:08:42,309 --> 00:08:46,420
<font color="#E5E5E5">and it's particularly flexible when it</font>

214
00:08:44,080 --> 00:08:48,790
comes to<font color="#E5E5E5"> manipulating process of a</font>

215
00:08:46,420 --> 00:08:52,709
remote so manipulating the memory<font color="#CCCCCC"> of a</font>

216
00:08:48,790 --> 00:08:55,030
remote process so if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> maybe a</font>

217
00:08:52,710 --> 00:08:56,260
malicious software author<font color="#E5E5E5"> there's a</font>

218
00:08:55,030 --> 00:09:00,880
<font color="#CCCCCC">or flexibility</font><font color="#E5E5E5"> in terms of what you can</font>

219
00:08:56,260 --> 00:09:03,700
<font color="#CCCCCC">do</font><font color="#E5E5E5"> so it's a very simple example in this</font>

220
00:09:00,880 --> 00:09:05,470
case it is<font color="#E5E5E5"> almost trivial</font><font color="#CCCCCC"> barring that</font>

221
00:09:03,700 --> 00:09:08,130
<font color="#CCCCCC">you have the right permissions</font><font color="#E5E5E5"> so that</font>

222
00:09:05,470 --> 00:09:10,060
that<font color="#CCCCCC"> dictates your access token to</font>

223
00:09:08,130 --> 00:09:12,160
simply read and write<font color="#CCCCCC"> from another</font>

224
00:09:10,060 --> 00:09:14,079
processor memory space so you can obtain

225
00:09:12,160 --> 00:09:17,350
a handle which is<font color="#E5E5E5"> just</font><font color="#CCCCCC"> like a unique</font>

226
00:09:14,080 --> 00:09:18,550
identifier<font color="#CCCCCC"> with open process and then</font>

227
00:09:17,350 --> 00:09:21,310
<font color="#E5E5E5">you can read and write from a specific</font>

228
00:09:18,550 --> 00:09:23,620
<font color="#E5E5E5">memory address a trivial example</font><font color="#CCCCCC"> but say</font>

229
00:09:21,310 --> 00:09:25,780
you're playing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> game on</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> PC</font><font color="#E5E5E5"> if you</font>

230
00:09:23,620 --> 00:09:26,740
<font color="#CCCCCC">can find the integer in memory that</font>

231
00:09:25,780 --> 00:09:28,900
stores your<font color="#E5E5E5"> health</font>

232
00:09:26,740 --> 00:09:30,760
it is<font color="#CCCCCC"> said it's very trivial just to</font>

233
00:09:28,900 --> 00:09:35,260
change<font color="#E5E5E5"> that to a million and you're very</font>

234
00:09:30,760 --> 00:09:40,120
<font color="#E5E5E5">hard to kill all of sudden similarly</font>

235
00:09:35,260 --> 00:09:42,160
similarly<font color="#E5E5E5"> if you say want to write to an</font>

236
00:09:40,120 --> 00:09:43,690
<font color="#CCCCCC">era of</font><font color="#E5E5E5"> memory that's read only you can</font>

237
00:09:42,160 --> 00:09:45,610
<font color="#E5E5E5">use virtual protect X which will make it</font>

238
00:09:43,690 --> 00:09:47,620
writable you can make your change<font color="#E5E5E5"> and</font>

239
00:09:45,610 --> 00:09:49,330
<font color="#E5E5E5">then change it back and so the pros your</font>

240
00:09:47,620 --> 00:09:50,290
victim process will have no<font color="#E5E5E5"> idea any of</font>

241
00:09:49,330 --> 00:09:52,870
<font color="#E5E5E5">this has happened</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

242
00:09:50,290 --> 00:09:55,930
<font color="#E5E5E5">traditionally</font><font color="#CCCCCC"> a help sort</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> other AV</font>

243
00:09:52,870 --> 00:09:57,490
contemporary stuff<font color="#E5E5E5"> and the last two so</font>

244
00:09:55,930 --> 00:10:01,000
<font color="#CCCCCC">five and six so these are the kind of</font>

245
00:09:57,490 --> 00:10:02,500
the real guts of code<font color="#CCCCCC"> ejection so you</font>

246
00:10:01,000 --> 00:10:03,670
can<font color="#CCCCCC"> allocate memory and then you can</font>

247
00:10:02,500 --> 00:10:05,560
create<font color="#E5E5E5"> actual new threads of execution</font>

248
00:10:03,670 --> 00:10:06,699
<font color="#CCCCCC">and you can see with the ability to</font>

249
00:10:05,560 --> 00:10:12,670
write you can<font color="#CCCCCC"> actually start putting</font>

250
00:10:06,700 --> 00:10:14,980
code and execute<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so code execution so</font>

251
00:10:12,670 --> 00:10:16,839
very simply at a very high<font color="#E5E5E5"> level it is</font>

252
00:10:14,980 --> 00:10:18,070
basically you're<font color="#E5E5E5"> just putting code into</font>

253
00:10:16,840 --> 00:10:20,980
another<font color="#CCCCCC"> process and you're getting it to</font>

254
00:10:18,070 --> 00:10:22,780
run there are two<font color="#CCCCCC"> reasons</font><font color="#E5E5E5"> why you would</font>

255
00:10:20,980 --> 00:10:25,780
want<font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> from sort of a malicious</font>

256
00:10:22,780 --> 00:10:27,550
software perspective<font color="#E5E5E5"> the first is is if</font>

257
00:10:25,780 --> 00:10:29,670
that process<font color="#CCCCCC"> memory has stuff that</font>

258
00:10:27,550 --> 00:10:32,229
you're particularly<font color="#CCCCCC"> interested</font><font color="#E5E5E5"> in then</font>

259
00:10:29,670 --> 00:10:33,849
there's only so much you<font color="#CCCCCC"> can do remotely</font>

260
00:10:32,230 --> 00:10:36,550
it's far easier<font color="#CCCCCC"> to inject</font><font color="#E5E5E5"> your code in</font>

261
00:10:33,850 --> 00:10:39,250
so<font color="#E5E5E5"> for instance banking</font><font color="#CCCCCC"> malware banking</font>

262
00:10:36,550 --> 00:10:40,599
Trojans<font color="#E5E5E5"> tend to be very interested in</font>

263
00:10:39,250 --> 00:10:42,040
browsers<font color="#CCCCCC"> because that's where your</font>

264
00:10:40,600 --> 00:10:44,230
credentials<font color="#E5E5E5"> are store when you go to</font>

265
00:10:42,040 --> 00:10:46,780
your<font color="#E5E5E5"> private web app or</font><font color="#CCCCCC"> whatever use</font>

266
00:10:44,230 --> 00:10:48,730
your<font color="#E5E5E5"> private banking web app</font><font color="#CCCCCC"> so what it</font>

267
00:10:46,780 --> 00:10:50,860
<font color="#E5E5E5">would tend to do is inject code</font><font color="#CCCCCC"> and then</font>

268
00:10:48,730 --> 00:10:52,090
from<font color="#CCCCCC"> here it has access to that</font><font color="#E5E5E5"> whole</font>

269
00:10:50,860 --> 00:10:53,830
memory space so it can<font color="#E5E5E5"> start stealing</font>

270
00:10:52,090 --> 00:10:56,020
<font color="#E5E5E5">passwords</font><font color="#CCCCCC"> it can also start hooking</font>

271
00:10:53,830 --> 00:10:58,120
<font color="#E5E5E5">function so when your browser starts</font>

272
00:10:56,020 --> 00:10:59,350
<font color="#E5E5E5">calling like SSL certs and things like</font>

273
00:10:58,120 --> 00:11:01,150
<font color="#CCCCCC">that it can</font><font color="#E5E5E5"> actually hook it intervene</font>

274
00:10:59,350 --> 00:11:03,670
everything<font color="#E5E5E5"> and it almost take complete</font>

275
00:11:01,150 --> 00:11:05,949
<font color="#E5E5E5">control of</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> process this way the</font>

276
00:11:03,670 --> 00:11:07,639
second kind<font color="#E5E5E5"> of sense in which this is</font>

277
00:11:05,950 --> 00:11:10,440
useful<font color="#CCCCCC"> here</font>

278
00:11:07,639 --> 00:11:12,600
almost parasitical so you're using the

279
00:11:10,440 --> 00:11:14,730
your victim process as almost like a

280
00:11:12,600 --> 00:11:16,050
host container<font color="#E5E5E5"> so you're sitting</font><font color="#CCCCCC"> there</font>

281
00:11:14,730 --> 00:11:18,180
silently in the background<font color="#E5E5E5"> doing what</font>

282
00:11:16,050 --> 00:11:19,500
you want and it's<font color="#CCCCCC"> just running as usual</font>

283
00:11:18,180 --> 00:11:21,120
<font color="#CCCCCC">and to the victim it's transparent</font>

284
00:11:19,500 --> 00:11:22,380
<font color="#CCCCCC">you're using your computer you can't see</font>

285
00:11:21,120 --> 00:11:24,120
anything<font color="#CCCCCC"> happened so</font><font color="#E5E5E5"> there's no weird</font>

286
00:11:22,380 --> 00:11:25,589
process<font color="#CCCCCC"> or anything</font><font color="#E5E5E5"> and it's very much</font>

287
00:11:24,120 --> 00:11:28,350
in this way that tools like meterpreter

288
00:11:25,589 --> 00:11:32,310
<font color="#E5E5E5">Kobach's try it work I'm just going to</font>

289
00:11:28,350 --> 00:11:33,839
<font color="#E5E5E5">go</font><font color="#CCCCCC"> over very</font><font color="#E5E5E5"> very briefly three</font>

290
00:11:32,310 --> 00:11:37,859
techniques that<font color="#E5E5E5"> will largely be focusing</font>

291
00:11:33,839 --> 00:11:39,300
on<font color="#CCCCCC"> so shell code injection</font><font color="#E5E5E5"> standard DLL</font>

292
00:11:37,860 --> 00:11:49,889
injection and then reflective loading

293
00:11:39,300 --> 00:11:54,329
DLL injection so<font color="#CCCCCC"> shokhin injection is</font>

294
00:11:49,889 --> 00:11:56,759
actually relatively<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

295
00:11:54,329 --> 00:11:59,040
basically<font color="#E5E5E5"> like this so</font><font color="#CCCCCC"> again we</font><font color="#E5E5E5"> obtain a</font>

296
00:11:56,759 --> 00:12:00,540
handle to a process we'd then that

297
00:11:59,040 --> 00:12:02,459
<font color="#E5E5E5">essentially allocate a block of memory</font>

298
00:12:00,540 --> 00:12:04,800
that's the right size<font color="#E5E5E5"> for a shellcode</font>

299
00:12:02,459 --> 00:12:06,180
<font color="#E5E5E5">we then write</font><font color="#CCCCCC"> a shellcode to it and then</font>

300
00:12:04,800 --> 00:12:10,439
we just start<font color="#CCCCCC"> reading this at the start</font>

301
00:12:06,180 --> 00:12:14,099
<font color="#CCCCCC">of it and it</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> go oh and the</font>

302
00:12:10,440 --> 00:12:15,389
main thing<font color="#CCCCCC"> to note is that because</font><font color="#E5E5E5"> of</font>

303
00:12:14,100 --> 00:12:17,339
what you're doing so you're writing<font color="#E5E5E5"> and</font>

304
00:12:15,389 --> 00:12:18,899
executing something<font color="#E5E5E5"> you're going to</font><font color="#CCCCCC"> use</font>

305
00:12:17,339 --> 00:12:20,160
page missions<font color="#E5E5E5"> there execute and read</font>

306
00:12:18,899 --> 00:12:21,329
<font color="#E5E5E5">write and this is very important when it</font>

307
00:12:20,160 --> 00:12:25,230
<font color="#E5E5E5">comes to actually detecting some of this</font>

308
00:12:21,329 --> 00:12:28,260
stuff<font color="#E5E5E5"> so here is a little bit of code</font>

309
00:12:25,230 --> 00:12:29,459
<font color="#CCCCCC">about just to as a proof of</font><font color="#E5E5E5"> concept to</font>

310
00:12:28,260 --> 00:12:32,399
kind of<font color="#E5E5E5"> get the idea</font><font color="#CCCCCC"> about what</font><font color="#E5E5E5"> you can</font>

311
00:12:29,459 --> 00:12:34,018
do with this stuff so all this program

312
00:12:32,399 --> 00:12:36,990
does is<font color="#CCCCCC"> it will attempt to</font><font color="#E5E5E5"> inject some</font>

313
00:12:34,019 --> 00:12:38,790
<font color="#CCCCCC">shellcode into notepad</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> XC and it</font>

314
00:12:36,990 --> 00:12:40,769
follows exactly the<font color="#CCCCCC"> same process</font><font color="#E5E5E5"> I just</font>

315
00:12:38,790 --> 00:12:42,750
<font color="#CCCCCC">said so it</font><font color="#E5E5E5"> obtained a handle allocate</font>

316
00:12:40,769 --> 00:12:45,029
memory<font color="#E5E5E5"> write the shellcode</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> start</font>

317
00:12:42,750 --> 00:12:47,130
threading the<font color="#E5E5E5"> at the start I said this</font>

318
00:12:45,029 --> 00:12:48,600
<font color="#E5E5E5">will just form PowerShell so if we look</font>

319
00:12:47,130 --> 00:12:54,089
in<font color="#E5E5E5"> forest Explorer</font><font color="#CCCCCC"> we can see no</font>

320
00:12:48,600 --> 00:12:55,740
personal special the main negative<font color="#CCCCCC"> with</font>

321
00:12:54,089 --> 00:12:58,139
shellcode<font color="#E5E5E5"> is it's</font><font color="#CCCCCC"> very complicated to</font>

322
00:12:55,740 --> 00:12:59,699
<font color="#CCCCCC">write very advanced difficult functions</font>

323
00:12:58,139 --> 00:13:02,279
<font color="#E5E5E5">in position independent code</font>

324
00:12:59,699 --> 00:13:05,459
so traditionally<font color="#E5E5E5"> things like meterpreter</font>

325
00:13:02,279 --> 00:13:07,949
<font color="#E5E5E5">or</font><font color="#CCCCCC"> Cobra start speaking the</font><font color="#E5E5E5"> wrote in C</font>

326
00:13:05,459 --> 00:13:10,500
or<font color="#E5E5E5"> C++ and implemented as a</font><font color="#CCCCCC"> dll so you</font>

327
00:13:07,949 --> 00:13:12,180
get for more functionality that way but

328
00:13:10,500 --> 00:13:15,360
<font color="#E5E5E5">shell code is still so very useful as</font>

329
00:13:12,180 --> 00:13:17,910
being a<font color="#CCCCCC"> stager stub so stages work by</font>

330
00:13:15,360 --> 00:13:19,380
essentially retrieving a larger<font color="#E5E5E5"> payload</font>

331
00:13:17,910 --> 00:13:21,510
and then running it<font color="#E5E5E5"> basically that's all</font>

332
00:13:19,380 --> 00:13:23,770
they do

333
00:13:21,510 --> 00:13:27,130
so moving on<font color="#CCCCCC"> to our second example so</font>

334
00:13:23,770 --> 00:13:29,800
this is standard<font color="#E5E5E5"> DLL injection so this</font>

335
00:13:27,130 --> 00:13:32,080
kind of abuses<font color="#E5E5E5"> a legitimate Windows</font>

336
00:13:29,800 --> 00:13:36,430
function which is the the load<font color="#CCCCCC"> library</font>

337
00:13:32,080 --> 00:13:38,830
function so load<font color="#CCCCCC"> library is windows</font>

338
00:13:36,430 --> 00:13:40,959
native<font color="#E5E5E5"> method of load loading</font><font color="#CCCCCC"> tier</font>

339
00:13:38,830 --> 00:13:43,990
levels at runtime<font color="#CCCCCC"> so you know if your</font>

340
00:13:40,960 --> 00:13:45,580
notepad or<font color="#CCCCCC"> XE suddenly needs to</font><font color="#E5E5E5"> access</font>

341
00:13:43,990 --> 00:13:48,610
some function from<font color="#CCCCCC"> a DLL on your hard</font>

342
00:13:45,580 --> 00:13:51,240
disk<font color="#E5E5E5"> it can call load library and as an</font>

343
00:13:48,610 --> 00:13:53,230
argument<font color="#E5E5E5"> pass the path that DLL and disk</font>

344
00:13:51,240 --> 00:13:55,540
<font color="#E5E5E5">load library will then retrieve</font><font color="#CCCCCC"> from</font>

345
00:13:53,230 --> 00:13:56,530
disk<font color="#CCCCCC"> war</font><font color="#E5E5E5"> into memory basically so it's</font>

346
00:13:55,540 --> 00:13:58,180
functional so it's got all<font color="#CCCCCC"> its</font>

347
00:13:56,530 --> 00:14:00,189
dependencies<font color="#E5E5E5"> resolved so you can start</font>

348
00:13:58,180 --> 00:14:01,510
calling functions and it's transparent

349
00:14:00,190 --> 00:14:03,730
<font color="#E5E5E5">to the user</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know your</font><font color="#CCCCCC"> program just</font>

350
00:14:01,510 --> 00:14:06,040
carries on<font color="#E5E5E5"> working and so standard</font>

351
00:14:03,730 --> 00:14:09,930
<font color="#CCCCCC">dearly</font><font color="#E5E5E5"> DLL injection abuses this to</font>

352
00:14:06,040 --> 00:14:13,480
force the program<font color="#E5E5E5"> so loaded the</font><font color="#CCCCCC"> alow</font><font color="#E5E5E5"> so</font>

353
00:14:09,930 --> 00:14:15,130
again<font color="#E5E5E5"> same pattern again obtain a handle</font>

354
00:14:13,480 --> 00:14:17,410
<font color="#CCCCCC">we'd allocate memory</font>

355
00:14:15,130 --> 00:14:19,180
this time however<font color="#E5E5E5"> all we're doing is</font>

356
00:14:17,410 --> 00:14:23,069
writing our path to<font color="#CCCCCC"> our</font><font color="#E5E5E5"> DLL which is</font>

357
00:14:19,180 --> 00:14:26,560
hilariously called C temp<font color="#E5E5E5"> evil or DLL</font>

358
00:14:23,070 --> 00:14:28,420
what we then do is we<font color="#E5E5E5"> create</font><font color="#CCCCCC"> a we create</font>

359
00:14:26,560 --> 00:14:30,790
a new<font color="#E5E5E5"> thread and all we do is</font><font color="#CCCCCC"> just point</font>

360
00:14:28,420 --> 00:14:33,939
it at load library<font color="#E5E5E5"> and process B and we</font>

361
00:14:30,790 --> 00:14:36,010
passed as an argument that<font color="#E5E5E5"> that path and</font>

362
00:14:33,940 --> 00:14:38,560
this new thread will then call load

363
00:14:36,010 --> 00:14:40,030
<font color="#CCCCCC">library</font><font color="#E5E5E5"> give that dll and this process</font>

364
00:14:38,560 --> 00:14:44,229
<font color="#CCCCCC">is forced to load it</font><font color="#E5E5E5"> and your code</font>

365
00:14:40,030 --> 00:14:45,939
running so the key point to check<font color="#CCCCCC"> for</font>

366
00:14:44,230 --> 00:14:48,190
<font color="#E5E5E5">this and again if you're looking for</font>

367
00:14:45,940 --> 00:14:49,870
things<font color="#E5E5E5"> like this the DLL has to be on</font>

368
00:14:48,190 --> 00:14:53,230
disk which from a forensics point of

369
00:14:49,870 --> 00:14:56,560
view is<font color="#CCCCCC"> not ideal and because you're</font>

370
00:14:53,230 --> 00:14:58,420
using the<font color="#CCCCCC"> Windows loader process so</font>

371
00:14:56,560 --> 00:15:00,609
every process keep such a<font color="#E5E5E5"> list of all</font>

372
00:14:58,420 --> 00:15:02,110
the<font color="#E5E5E5"> modules that are loaded it you will</font>

373
00:15:00,610 --> 00:15:03,400
register<font color="#E5E5E5"> this DLL so if you go in</font>

374
00:15:02,110 --> 00:15:05,140
<font color="#CCCCCC">process Explorer</font><font color="#E5E5E5"> and you look at the DLL</font>

375
00:15:03,400 --> 00:15:08,410
<font color="#CCCCCC">that you'll see it present</font><font color="#E5E5E5"> so to the</font>

376
00:15:05,140 --> 00:15:11,080
user you<font color="#CCCCCC"> can still find</font><font color="#E5E5E5"> this stuff so</font>

377
00:15:08,410 --> 00:15:14,170
the last is considered the stealthiest

378
00:15:11,080 --> 00:15:16,720
<font color="#E5E5E5">option and it's actually a very</font><font color="#CCCCCC"> very</font>

379
00:15:14,170 --> 00:15:19,240
cool and<font color="#CCCCCC"> very very</font><font color="#E5E5E5"> clever technique so</font>

380
00:15:16,720 --> 00:15:21,970
reflective loading essentially it will

381
00:15:19,240 --> 00:15:23,500
employ a custom DLL loader<font color="#E5E5E5"> to avoid</font>

382
00:15:21,970 --> 00:15:26,260
<font color="#E5E5E5">writing anything to disk and you can</font>

383
00:15:23,500 --> 00:15:27,940
inject it directly into memory<font color="#E5E5E5"> and when</font>

384
00:15:26,260 --> 00:15:29,350
I say custom DLL loader the best way to

385
00:15:27,940 --> 00:15:31,480
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this is it's</font><font color="#CCCCCC"> exactly the</font>

386
00:15:29,350 --> 00:15:33,160
same<font color="#E5E5E5"> as load</font><font color="#CCCCCC"> library but the one</font>

387
00:15:31,480 --> 00:15:35,570
exception<font color="#E5E5E5"> is that it will load a DLL</font>

388
00:15:33,160 --> 00:15:36,709
<font color="#E5E5E5">just from an area</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> say again</font>

389
00:15:35,570 --> 00:15:38,780
you don't have to write anything from

390
00:15:36,710 --> 00:15:42,230
disk which forensically<font color="#E5E5E5"> is far more</font>

391
00:15:38,780 --> 00:15:44,089
<font color="#CCCCCC">preferable for</font><font color="#E5E5E5"> an attacker and</font><font color="#CCCCCC"> this is</font>

392
00:15:42,230 --> 00:15:46,820
used by<font color="#CCCCCC"> meta Sports meterpreter payload</font>

393
00:15:44,090 --> 00:15:48,950
for over a decade and has largely been

394
00:15:46,820 --> 00:15:50,840
kind of undetected and<font color="#CCCCCC"> seem</font><font color="#E5E5E5"> very</font>

395
00:15:48,950 --> 00:15:53,480
stealthy<font color="#E5E5E5"> and is implemented by</font><font color="#CCCCCC"> Kobach's</font>

396
00:15:50,840 --> 00:15:55,280
<font color="#CCCCCC">tracks beacon payload and it's based on</font>

397
00:15:53,480 --> 00:15:58,730
<font color="#E5E5E5">a very clever man Steven fuse technique</font>

398
00:15:55,280 --> 00:16:01,329
and<font color="#E5E5E5"> I'll check out his github page so</font>

399
00:15:58,730 --> 00:16:03,350
how do you actually<font color="#E5E5E5"> do</font><font color="#CCCCCC"> this functionally</font>

400
00:16:01,330 --> 00:16:05,420
<font color="#CCCCCC">so you know if you're a red team how</font>

401
00:16:03,350 --> 00:16:06,380
would you<font color="#CCCCCC"> actually make your own</font><font color="#E5E5E5"> the</font>

402
00:16:05,420 --> 00:16:10,750
first thing you need<font color="#E5E5E5"> to do is actually</font>

403
00:16:06,380 --> 00:16:13,580
<font color="#E5E5E5">compile a DLL with this loader function</font>

404
00:16:10,750 --> 00:16:15,110
<font color="#CCCCCC">and again that load of function exactly</font>

405
00:16:13,580 --> 00:16:18,490
<font color="#CCCCCC">the same as load library but it will</font>

406
00:16:15,110 --> 00:16:18,490
load a<font color="#E5E5E5"> DLL that's resident in memory</font>

407
00:16:21,940 --> 00:16:26,330
this in<font color="#E5E5E5"> itself you've just got a DLL now</font>

408
00:16:24,470 --> 00:16:27,500
you've got a file<font color="#E5E5E5"> it doesn't do anything</font>

409
00:16:26,330 --> 00:16:30,530
you can put it in memory<font color="#E5E5E5"> but it won't</font>

410
00:16:27,500 --> 00:16:31,910
<font color="#E5E5E5">actually run</font><font color="#CCCCCC"> so what Metasploit does is</font>

411
00:16:30,530 --> 00:16:33,290
it<font color="#CCCCCC"> actually just over writes the start</font>

412
00:16:31,910 --> 00:16:35,060
of the file with a very small<font color="#CCCCCC"> program</font>

413
00:16:33,290 --> 00:16:36,920
and that program will essentially<font color="#E5E5E5"> call</font>

414
00:16:35,060 --> 00:16:38,390
that function<font color="#E5E5E5"> so it's the idea is it's a</font>

415
00:16:36,920 --> 00:16:39,740
self bootstrapping<font color="#CCCCCC"> Kota</font><font color="#E5E5E5"> it's kind of</font>

416
00:16:38,390 --> 00:16:41,390
self sustainable so you can<font color="#E5E5E5"> just put it</font>

417
00:16:39,740 --> 00:16:43,190
<font color="#E5E5E5">in there and it will run how</font>

418
00:16:41,390 --> 00:16:45,080
specifically this<font color="#CCCCCC"> is done is is you</font>

419
00:16:43,190 --> 00:16:48,710
actually patch the<font color="#E5E5E5"> DOS header of a</font><font color="#CCCCCC"> pea</font>

420
00:16:45,080 --> 00:16:51,620
file and so this is a chronica<font color="#CCCCCC"> MWR so</font>

421
00:16:48,710 --> 00:16:54,650
fuzzy<font color="#CCCCCC"> tech from his blog post</font><font color="#E5E5E5"> so all</font>

422
00:16:51,620 --> 00:16:56,300
this shows is<font color="#E5E5E5"> the start of a pea</font>

423
00:16:54,650 --> 00:16:59,360
executable file so<font color="#E5E5E5"> d levels and</font>

424
00:16:56,300 --> 00:17:01,579
executables<font color="#CCCCCC"> of both p32 files and the</font>

425
00:16:59,360 --> 00:17:03,560
key thing here is<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see for D 5 a</font>

426
00:17:01,580 --> 00:17:05,390
so<font color="#E5E5E5"> they're magic bytes so that's how you</font>

427
00:17:03,560 --> 00:17:08,448
tell you you're dealing with a P 32

428
00:17:05,390 --> 00:17:10,130
executable file<font color="#CCCCCC"> the rest</font><font color="#E5E5E5"> of these are</font>

429
00:17:08,449 --> 00:17:12,589
very<font color="#CCCCCC"> complicated but that's</font><font color="#E5E5E5"> the key</font>

430
00:17:10,130 --> 00:17:14,990
<font color="#CCCCCC">thing to take</font><font color="#E5E5E5"> away and so all it does is</font>

431
00:17:12,589 --> 00:17:16,520
just<font color="#E5E5E5"> directly overwrite the start of</font>

432
00:17:14,990 --> 00:17:19,010
this so<font color="#E5E5E5"> don't worry too</font><font color="#CCCCCC"> much about the</font>

433
00:17:16,520 --> 00:17:20,209
assembly<font color="#CCCCCC"> on the left</font><font color="#E5E5E5"> the key thing</font><font color="#CCCCCC"> is</font>

434
00:17:19,010 --> 00:17:22,689
<font color="#CCCCCC">that you can see on the top</font><font color="#E5E5E5"> right you</font>

435
00:17:20,209 --> 00:17:25,310
can<font color="#E5E5E5"> see those magic bytes that embed and</font>

436
00:17:22,689 --> 00:17:28,339
loosely what this code does<font color="#E5E5E5"> is</font><font color="#CCCCCC"> it works</font>

437
00:17:25,310 --> 00:17:30,139
out where it is<font color="#E5E5E5"> in memory so it can get</font>

438
00:17:28,339 --> 00:17:32,000
<font color="#E5E5E5">the offset to call that function and</font>

439
00:17:30,140 --> 00:17:33,800
again<font color="#CCCCCC"> that</font><font color="#E5E5E5"> loader function is just like</font>

440
00:17:32,000 --> 00:17:35,260
load<font color="#CCCCCC"> library but it reside it will call</font>

441
00:17:33,800 --> 00:17:38,629
<font color="#E5E5E5">something from an area of</font><font color="#CCCCCC"> memory and</font>

442
00:17:35,260 --> 00:17:39,950
then the final stage<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> formalize the</font>

443
00:17:38,630 --> 00:17:41,510
<font color="#E5E5E5">windows loading process you have to</font>

444
00:17:39,950 --> 00:17:43,550
<font color="#E5E5E5">invoke dear</font><font color="#CCCCCC"> lo mein</font><font color="#E5E5E5"> so that she just</font>

445
00:17:41,510 --> 00:17:48,559
attaches the DLL and that's<font color="#E5E5E5"> that's all</font>

446
00:17:43,550 --> 00:17:49,490
it<font color="#E5E5E5"> does so yeah and then</font>

447
00:17:48,559 --> 00:17:52,039
so the<font color="#E5E5E5"> last things you would normally</font>

448
00:17:49,490 --> 00:17:53,330
<font color="#CCCCCC">use as I said before a stager that would</font>

449
00:17:52,039 --> 00:17:57,320
actually retrieve<font color="#E5E5E5"> this payload and</font>

450
00:17:53,330 --> 00:17:59,029
execute it<font color="#E5E5E5"> so just in summary again very</font>

451
00:17:57,320 --> 00:18:01,249
<font color="#E5E5E5">simple we're</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> we obtain a handle we</font>

452
00:17:59,029 --> 00:18:04,460
allocate memory<font color="#E5E5E5"> this time we copy the</font>

453
00:18:01,249 --> 00:18:06,230
entire file into<font color="#CCCCCC"> memory at which stage</font>

454
00:18:04,460 --> 00:18:07,759
we then<font color="#CCCCCC"> just pass</font><font color="#E5E5E5"> execution to the</font>

455
00:18:06,230 --> 00:18:10,039
<font color="#E5E5E5">header which we've overwritten that very</font>

456
00:18:07,759 --> 00:18:12,230
small program that<font color="#CCCCCC"> program</font><font color="#E5E5E5"> will load</font>

457
00:18:10,039 --> 00:18:13,399
into<font color="#CCCCCC"> memory and you're on</font><font color="#E5E5E5"> your way your</font>

458
00:18:12,230 --> 00:18:15,559
<font color="#CCCCCC">DL has been injected</font>

459
00:18:13,399 --> 00:18:18,289
you've got code execution<font color="#E5E5E5"> and no one can</font>

460
00:18:15,559 --> 00:18:22,009
<font color="#E5E5E5">find you and so the key thing about this</font>

461
00:18:18,289 --> 00:18:24,289
<font color="#E5E5E5">is you don't have to write the disk the</font>

462
00:18:22,009 --> 00:18:26,299
<font color="#E5E5E5">DLL</font><font color="#CCCCCC"> star</font><font color="#E5E5E5"> is injected it's directly</font>

463
00:18:24,289 --> 00:18:28,309
injection to memory<font color="#E5E5E5"> and if any of you at</font>

464
00:18:26,299 --> 00:18:30,139
the<font color="#E5E5E5"> last talk there was um there's an</font>

465
00:18:28,309 --> 00:18:32,210
example of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> powershell with an encoded</font>

466
00:18:30,139 --> 00:18:34,490
command so what<font color="#E5E5E5"> that encoded come on</font>

467
00:18:32,210 --> 00:18:36,830
basically<font color="#E5E5E5"> was he's a stager</font><font color="#CCCCCC"> that would</font>

468
00:18:34,490 --> 00:18:38,330
get a deal out and then inject<font color="#E5E5E5"> into</font>

469
00:18:36,830 --> 00:18:39,980
memory<font color="#E5E5E5"> straightaway so that's kind of an</font>

470
00:18:38,330 --> 00:18:42,559
an example<font color="#CCCCCC"> of this kind of technique in</font>

471
00:18:39,980 --> 00:18:44,869
practice<font color="#E5E5E5"> and again because</font><font color="#CCCCCC"> you're not</font>

472
00:18:42,559 --> 00:18:49,360
<font color="#CCCCCC">using the Windows</font><font color="#E5E5E5"> loader process the DLL</font>

473
00:18:44,869 --> 00:18:51,889
is not registered<font color="#E5E5E5"> so having explained</font>

474
00:18:49,360 --> 00:18:53,479
the kind<font color="#E5E5E5"> of code injection in memory</font>

475
00:18:51,889 --> 00:18:55,248
attacks<font color="#CCCCCC"> we're gonna do a bit</font><font color="#E5E5E5"> of a case</font>

476
00:18:53,480 --> 00:18:57,200
study<font color="#CCCCCC"> now about actually Metasploit so</font>

477
00:18:55,249 --> 00:19:01,369
walk through how an attack<font color="#E5E5E5"> happens and</font>

478
00:18:57,200 --> 00:19:03,499
how<font color="#E5E5E5"> it works very briefly so</font><font color="#CCCCCC"> Metasploit</font>

479
00:19:01,369 --> 00:19:05,809
is a<font color="#E5E5E5"> well-known and long-standing</font>

480
00:19:03,499 --> 00:19:08,749
penetration testing framework<font color="#E5E5E5"> it's got</font>

481
00:19:05,809 --> 00:19:09,580
hundreds of known exploits<font color="#E5E5E5"> for you know</font>

482
00:19:08,749 --> 00:19:13,460
vulnerable apps

483
00:19:09,580 --> 00:19:15,408
<font color="#E5E5E5">it's got auxiliary modules and it has</font>

484
00:19:13,460 --> 00:19:21,080
you<font color="#CCCCCC"> know full functionality</font><font color="#E5E5E5"> for</font>

485
00:19:15,409 --> 00:19:23,509
generating different<font color="#E5E5E5"> payloads and as I</font>

486
00:19:21,080 --> 00:19:25,850
said<font color="#CCCCCC"> before so meterpreter is the</font>

487
00:19:23,509 --> 00:19:27,470
default payload used by<font color="#CCCCCC"> Metasploit and</font>

488
00:19:25,850 --> 00:19:29,509
<font color="#E5E5E5">it's yeah for nearly a decade</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> be</font>

489
00:19:27,470 --> 00:19:31,490
been seen<font color="#E5E5E5"> as stealthy and it resides</font>

490
00:19:29,509 --> 00:19:34,639
entirely<font color="#E5E5E5"> in memory and can be migrated</font>

491
00:19:31,490 --> 00:19:36,379
between processes<font color="#E5E5E5"> and it can never never</font>

492
00:19:34,639 --> 00:19:38,418
write to disk which again is ideal from

493
00:19:36,379 --> 00:19:40,039
<font color="#E5E5E5">a forensics perspective the key thing is</font>

494
00:19:38,419 --> 00:19:41,179
<font color="#E5E5E5">this implement is</font><font color="#CCCCCC"> the reflective DLL so</font>

495
00:19:40,039 --> 00:19:42,830
everything I<font color="#CCCCCC"> just said that's how it</font>

496
00:19:41,179 --> 00:19:44,149
works so when you get your<font color="#CCCCCC"> session</font>

497
00:19:42,830 --> 00:19:46,668
<font color="#E5E5E5">that's that's essentially what</font><font color="#CCCCCC"> you're</font>

498
00:19:44,149 --> 00:19:49,248
<font color="#CCCCCC">doing but</font><font color="#E5E5E5"> we'll go into that now</font><font color="#CCCCCC"> you can</font>

499
00:19:46,669 --> 00:19:51,289
also load modules at runtime which again

500
00:19:49,249 --> 00:19:57,110
so you can load mimic at still<font color="#E5E5E5"> plaintext</font>

501
00:19:51,289 --> 00:19:59,980
credentials and you never touch this so

502
00:19:57,110 --> 00:20:02,100
in this kind<font color="#E5E5E5"> of case study</font><font color="#CCCCCC"> I've got a</font>

503
00:19:59,980 --> 00:20:05,280
unwitting user who has<font color="#CCCCCC"> just</font>

504
00:20:02,100 --> 00:20:07,620
<font color="#CCCCCC">is a very</font><font color="#E5E5E5"> important voice and this may</font>

505
00:20:05,280 --> 00:20:09,600
<font color="#E5E5E5">be you know deliver advice a spear</font>

506
00:20:07,620 --> 00:20:11,189
phishing campaign<font color="#E5E5E5"> and in my experience</font>

507
00:20:09,600 --> 00:20:14,370
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> the most kind of common threat</font>

508
00:20:11,190 --> 00:20:17,160
to enterprises now<font color="#E5E5E5"> most</font><font color="#CCCCCC"> attack</font><font color="#E5E5E5"> by threat</font>

509
00:20:14,370 --> 00:20:20,010
access<font color="#CCCCCC"> wall will</font><font color="#E5E5E5"> go for client-side</font>

510
00:20:17,160 --> 00:20:21,900
attacks<font color="#E5E5E5"> and so the user is about to</font>

511
00:20:20,010 --> 00:20:23,910
enable content<font color="#E5E5E5"> where it's on my</font>

512
00:20:21,900 --> 00:20:25,530
<font color="#CCCCCC">Metasploit</font><font color="#E5E5E5"> handler I'm just listening on</font>

513
00:20:23,910 --> 00:20:27,210
the wire waiting<font color="#E5E5E5"> for a connect back the</font>

514
00:20:25,530 --> 00:20:29,220
key thing is I've<font color="#CCCCCC"> used a reverse TCP</font>

515
00:20:27,210 --> 00:20:30,750
<font color="#CCCCCC">stager</font><font color="#E5E5E5"> and again this is a very small</font>

516
00:20:29,220 --> 00:20:34,200
stub<font color="#CCCCCC"> that would give a bigger payload</font>

517
00:20:30,750 --> 00:20:35,789
and run it so what actually<font color="#CCCCCC"> happens when</font>

518
00:20:34,200 --> 00:20:37,440
<font color="#E5E5E5">I mean say you're a victim of these</font>

519
00:20:35,789 --> 00:20:40,710
attacks like when you press enable

520
00:20:37,440 --> 00:20:42,090
<font color="#CCCCCC">content well</font><font color="#E5E5E5"> the attacker gets gets code</font>

521
00:20:40,710 --> 00:20:45,659
execution which is always<font color="#CCCCCC"> Gimli</font><font color="#E5E5E5"> pretty</font>

522
00:20:42,090 --> 00:20:47,580
bad what<font color="#E5E5E5"> you're stager will do the first</font>

523
00:20:45,659 --> 00:20:50,309
thing we do is<font color="#E5E5E5"> just simply initiate a</font>

524
00:20:47,580 --> 00:20:52,559
TCP<font color="#CCCCCC"> connection back to</font><font color="#E5E5E5"> the handler your</font>

525
00:20:50,309 --> 00:20:53,908
handler is listening<font color="#E5E5E5"> on the wire so</font><font color="#CCCCCC"> it</font>

526
00:20:52,559 --> 00:20:55,770
will send<font color="#E5E5E5"> the size of the incoming</font>

527
00:20:53,909 --> 00:20:57,690
payload and all your stage does is<font color="#E5E5E5"> just</font>

528
00:20:55,770 --> 00:20:59,639
blindly allocate memory<font color="#E5E5E5"> and this would</font>

529
00:20:57,690 --> 00:21:01,409
be in the the<font color="#E5E5E5"> host</font><font color="#CCCCCC"> processor the gyro</font>

530
00:20:59,640 --> 00:21:03,240
you're still in Microsoft Word at this

531
00:21:01,409 --> 00:21:04,320
stage<font color="#E5E5E5"> and again it would be page execute</font>

532
00:21:03,240 --> 00:21:10,020
read write<font color="#E5E5E5"> because you're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> execute</font>

533
00:21:04,320 --> 00:21:13,110
code on<font color="#CCCCCC"> it what happens now is so the</font>

534
00:21:10,020 --> 00:21:15,690
main<font color="#CCCCCC"> DLL the meterpreter</font><font color="#E5E5E5"> is included is</font>

535
00:21:13,110 --> 00:21:17,340
called net serve dot<font color="#E5E5E5"> DLL so</font><font color="#CCCCCC"> Metasploit</font>

536
00:21:15,690 --> 00:21:19,559
will find this<font color="#CCCCCC"> on disk</font>

537
00:21:17,340 --> 00:21:21,539
<font color="#CCCCCC">it'll</font><font color="#E5E5E5"> package it up it will dynamically</font>

538
00:21:19,559 --> 00:21:23,490
write that<font color="#E5E5E5"> little program the self</font>

539
00:21:21,539 --> 00:21:24,990
bootstrapping code that makes<font color="#E5E5E5"> it good to</font>

540
00:21:23,490 --> 00:21:26,760
go and<font color="#E5E5E5"> it will send it</font><font color="#CCCCCC"> over the wire</font><font color="#E5E5E5"> and</font>

541
00:21:24,990 --> 00:21:29,370
your stage are just simply<font color="#E5E5E5"> just copies</font>

542
00:21:26,760 --> 00:21:31,200
this to memory<font color="#CCCCCC"> the key thing</font><font color="#E5E5E5"> is that at</font>

543
00:21:29,370 --> 00:21:32,549
<font color="#E5E5E5">this stage and code box right works the</font>

544
00:21:31,200 --> 00:21:34,440
same way you're sending stuff in

545
00:21:32,549 --> 00:21:36,240
<font color="#CCCCCC">plaintext</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> snortin bros will just</font>

546
00:21:34,440 --> 00:21:40,919
see an<font color="#E5E5E5"> X cube or file go over the wire</font>

547
00:21:36,240 --> 00:21:43,080
which<font color="#CCCCCC"> is fairly obvious and bad what</font>

548
00:21:40,919 --> 00:21:44,640
happens then is as I said<font color="#E5E5E5"> before the</font>

549
00:21:43,080 --> 00:21:46,470
<font color="#CCCCCC">staging we just passed execution</font><font color="#E5E5E5"> for</font>

550
00:21:44,640 --> 00:21:48,240
that small program<font color="#E5E5E5"> which loads it up</font>

551
00:21:46,470 --> 00:21:50,370
gets it running<font color="#E5E5E5"> and at this stage</font><font color="#CCCCCC"> you</font>

552
00:21:48,240 --> 00:21:52,280
<font color="#CCCCCC">pass control</font><font color="#E5E5E5"> to meterpreter</font><font color="#CCCCCC"> and you get</font>

553
00:21:50,370 --> 00:21:54,510
<font color="#E5E5E5">your session so you've got your shell</font>

554
00:21:52,280 --> 00:21:56,070
boom

555
00:21:54,510 --> 00:21:57,480
one other thing one boring point you

556
00:21:56,070 --> 00:21:59,189
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> sends to</font><font color="#E5E5E5"> other deal else but</font>

557
00:21:57,480 --> 00:22:02,929
<font color="#CCCCCC">matt</font><font color="#E5E5E5"> will talk about</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> later that the</font>

558
00:21:59,190 --> 00:22:02,929
key thing<font color="#CCCCCC"> is you</font><font color="#E5E5E5"> feel like</font><font color="#CCCCCC"> this guy</font>

559
00:22:15,320 --> 00:22:18,800
we can let<font color="#CCCCCC"> it go</font><font color="#E5E5E5"> again</font>

560
00:22:24,710 --> 00:22:31,320
let's head<font color="#E5E5E5"> on yeah okay cool</font><font color="#CCCCCC"> so um how</font>

561
00:22:28,590 --> 00:22:33,870
do we<font color="#E5E5E5"> detect and this so Wells covered</font>

562
00:22:31,320 --> 00:22:35,909
the kind<font color="#E5E5E5"> of concepts and but how can you</font>

563
00:22:33,870 --> 00:22:39,300
<font color="#E5E5E5">actually go about detecting and the</font>

564
00:22:35,910 --> 00:22:41,910
presence of the temperature in memory so

565
00:22:39,300 --> 00:22:46,590
as<font color="#CCCCCC"> we'll kind of covered and there's</font>

566
00:22:41,910 --> 00:22:47,730
this presence of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> fret so every process</font>

567
00:22:46,590 --> 00:22:50,070
<font color="#CCCCCC">the presence will have to have a thread</font>

568
00:22:47,730 --> 00:22:52,110
when we inject our<font color="#E5E5E5"> stager</font><font color="#CCCCCC"> there has to</font>

569
00:22:50,070 --> 00:22:54,720
<font color="#CCCCCC">be a thread for that to</font><font color="#E5E5E5"> actually execute</font>

570
00:22:52,110 --> 00:22:57,719
<font color="#E5E5E5">so using memory forensics we can</font>

571
00:22:54,720 --> 00:22:59,940
<font color="#CCCCCC">actually go about searching</font><font color="#E5E5E5"> for that so</font>

572
00:22:57,720 --> 00:23:03,000
if we<font color="#CCCCCC"> dig into meterpreter run it in</font>

573
00:22:59,940 --> 00:23:05,400
memory<font color="#E5E5E5"> and we can kind of have a look</font>

574
00:23:03,000 --> 00:23:07,590
<font color="#E5E5E5">and we use an example to kind of see</font>

575
00:23:05,400 --> 00:23:10,050
what<font color="#E5E5E5"> the thread will look like here I've</font>

576
00:23:07,590 --> 00:23:11,760
<font color="#E5E5E5">got two examples</font><font color="#CCCCCC"> so if we imagine we've</font>

577
00:23:10,050 --> 00:23:14,159
got<font color="#E5E5E5"> a temperature session</font><font color="#CCCCCC"> written</font><font color="#E5E5E5"> words</font>

578
00:23:11,760 --> 00:23:16,350
<font color="#E5E5E5">and to make things nice plain and simple</font>

579
00:23:14,160 --> 00:23:18,780
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> spawn to notepad processes</font>

580
00:23:16,350 --> 00:23:21,689
<font color="#E5E5E5">and then inject into the second one</font>

581
00:23:18,780 --> 00:23:24,570
so this is<font color="#E5E5E5"> just a screenshot press</font>

582
00:23:21,690 --> 00:23:27,000
attack F on the left is<font color="#E5E5E5"> notepad running</font>

583
00:23:24,570 --> 00:23:29,010
with one<font color="#E5E5E5"> credit execution on the</font><font color="#CCCCCC"> right</font>

584
00:23:27,000 --> 00:23:30,930
is no<font color="#E5E5E5"> running with two</font><font color="#CCCCCC"> threads of</font>

585
00:23:29,010 --> 00:23:32,430
execution<font color="#CCCCCC"> and one</font><font color="#E5E5E5"> of the right is the</font>

586
00:23:30,930 --> 00:23:35,730
one<font color="#CCCCCC"> we're with now injected amateur</font>

587
00:23:32,430 --> 00:23:37,380
procession into<font color="#E5E5E5"> and interesting to point</font>

588
00:23:35,730 --> 00:23:40,500
out on the<font color="#E5E5E5"> right it's highlighted in</font><font color="#CCCCCC"> red</font>

589
00:23:37,380 --> 00:23:42,840
<font color="#E5E5E5">these start address and</font><font color="#CCCCCC"> choses zero zero</font>

590
00:23:40,500 --> 00:23:44,490
<font color="#E5E5E5">and that's because</font><font color="#CCCCCC"> process hackers tried</font>

591
00:23:42,840 --> 00:23:46,530
to work out<font color="#E5E5E5"> on the numerator where they</font>

592
00:23:44,490 --> 00:23:47,970
start address<font color="#E5E5E5"> at that fred</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> except</font>

593
00:23:46,530 --> 00:23:49,950
because we've<font color="#E5E5E5"> injected it into memory</font>

594
00:23:47,970 --> 00:23:52,230
<font color="#CCCCCC">there's no actual</font><font color="#E5E5E5"> page permissions and</font>

595
00:23:49,950 --> 00:23:53,400
page allocation for that and so<font color="#E5E5E5"> price is</font>

596
00:23:52,230 --> 00:23:56,790
<font color="#E5E5E5">half</font><font color="#CCCCCC"> that doesn't really know where</font><font color="#E5E5E5"> it</font>

597
00:23:53,400 --> 00:23:58,320
is and so just<font color="#E5E5E5"> defaults to zero but we</font>

598
00:23:56,790 --> 00:24:00,270
can get the absolute start address out

599
00:23:58,320 --> 00:24:03,659
which is fourteen forty thousand and

600
00:24:00,270 --> 00:24:05,820
actually take a look<font color="#CCCCCC"> at that</font><font color="#E5E5E5"> so if we</font>

601
00:24:03,660 --> 00:24:08,130
even attach this process running<font color="#E5E5E5"> in</font>

602
00:24:05,820 --> 00:24:10,379
memory<font color="#E5E5E5"> or perform a precious memory</font>

603
00:24:08,130 --> 00:24:12,030
don't we can have a look at the

604
00:24:10,380 --> 00:24:14,700
permissions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> some of the</font><font color="#E5E5E5"> information</font>

605
00:24:12,030 --> 00:24:18,110
<font color="#E5E5E5">about that region if for be forty</font>

606
00:24:14,700 --> 00:24:21,149
<font color="#E5E5E5">thousand</font><font color="#CCCCCC"> in particular to know we've got</font>

607
00:24:18,110 --> 00:24:24,418
<font color="#E5E5E5">like this region the usage and</font>

608
00:24:21,149 --> 00:24:26,459
as noted<font color="#E5E5E5"> by windbg</font><font color="#CCCCCC"> is unknown</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> the</font>

609
00:24:24,419 --> 00:24:30,119
process<font color="#E5E5E5"> itself does it have a</font><font color="#CCCCCC"> file</font>

610
00:24:26,460 --> 00:24:32,849
mapping and linking back to<font color="#E5E5E5"> this page or</font>

611
00:24:30,119 --> 00:24:34,769
any module or any kind<font color="#E5E5E5"> of allocation</font><font color="#CCCCCC"> so</font>

612
00:24:32,849 --> 00:24:36,269
that<font color="#E5E5E5"> shouldn't really shouldn't really</font>

613
00:24:34,769 --> 00:24:38,460
be there unless<font color="#E5E5E5"> it's not being used for</font>

614
00:24:36,269 --> 00:24:42,419
<font color="#E5E5E5">any particular reason</font><font color="#CCCCCC"> and we've got a</font>

615
00:24:38,460 --> 00:24:45,119
size of<font color="#CCCCCC"> 936 Kay and the</font><font color="#E5E5E5"> patron missions</font>

616
00:24:42,419 --> 00:24:46,529
<font color="#E5E5E5">are</font><font color="#CCCCCC"> page X cubed right and as well noted</font>

617
00:24:45,119 --> 00:24:48,988
<font color="#E5E5E5">earlier that's really important because</font>

618
00:24:46,529 --> 00:24:50,609
<font color="#E5E5E5">that allows us to write and to</font><font color="#CCCCCC"> this</font>

619
00:24:48,989 --> 00:24:52,769
region of<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> to actually write</font><font color="#CCCCCC"> a</font>

620
00:24:50,609 --> 00:24:53,629
<font color="#CCCCCC">Southeast Asia</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> then to execute</font>

621
00:24:52,769 --> 00:24:57,509
<font color="#E5E5E5">it</font>

622
00:24:53,629 --> 00:24:59,869
<font color="#E5E5E5">so if we view the contents just</font><font color="#CCCCCC"> raw</font><font color="#E5E5E5"> in</font>

623
00:24:57,509 --> 00:25:02,249
memory at this<font color="#E5E5E5"> page region and</font>

624
00:24:59,869 --> 00:25:03,478
<font color="#E5E5E5">potentially looks like shellcode and if</font>

625
00:25:02,249 --> 00:25:05,820
you've seen<font color="#E5E5E5"> plenty of</font><font color="#CCCCCC"> shelf heading</font>

626
00:25:03,479 --> 00:25:08,700
memory and<font color="#CCCCCC"> but one of the</font><font color="#E5E5E5"> giveaways any</font>

627
00:25:05,820 --> 00:25:11,668
<font color="#CCCCCC">keno viewers might noticed the ws2 of</font>

628
00:25:08,700 --> 00:25:13,409
the score of 32 which is<font color="#E5E5E5"> potentially a</font>

629
00:25:11,669 --> 00:25:16,950
reference to the<font color="#E5E5E5"> win some might</font><font color="#CCCCCC"> be deal</font>

630
00:25:13,409 --> 00:25:19,139
out<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> actually just take this</font>

631
00:25:16,950 --> 00:25:20,849
raw shell code that's in memory<font color="#E5E5E5"> and drop</font>

632
00:25:19,139 --> 00:25:23,699
it<font color="#E5E5E5"> into Ida and actually kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> take a</font>

633
00:25:20,849 --> 00:25:25,408
look at what<font color="#CCCCCC"> that is going on</font><font color="#E5E5E5"> so I've</font>

634
00:25:23,700 --> 00:25:27,779
added some comments<font color="#CCCCCC"> to kind of give</font><font color="#E5E5E5"> you</font>

635
00:25:25,409 --> 00:25:30,210
an idea as to what potentially is

636
00:25:27,779 --> 00:25:32,909
happening here and the goal<font color="#CCCCCC"> is just not</font>

637
00:25:30,210 --> 00:25:35,099
to try<font color="#E5E5E5"> and reverse this and if you</font>

638
00:25:32,909 --> 00:25:37,289
wanted to<font color="#E5E5E5"> you could do a full analysis</font>

639
00:25:35,099 --> 00:25:39,330
and from our perspective<font color="#CCCCCC"> I'm a friend</font>

640
00:25:37,289 --> 00:25:41,339
irrespective<font color="#E5E5E5"> as we don't want to spend</font>

641
00:25:39,330 --> 00:25:43,439
four<font color="#CCCCCC"> hours trying</font><font color="#E5E5E5"> to reverse and the</font>

642
00:25:41,339 --> 00:25:45,269
temperature<font color="#E5E5E5"> shellcode</font><font color="#CCCCCC"> we just want to</font>

643
00:25:43,440 --> 00:25:47,999
<font color="#E5E5E5">kind of get a quick easy idea of what</font>

644
00:25:45,269 --> 00:25:50,070
stuff<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> on so we've got reference</font>

645
00:25:47,999 --> 00:25:52,559
to<font color="#E5E5E5"> double yes two minutes</font><font color="#CCCCCC"> cool for you</font>

646
00:25:50,070 --> 00:25:55,019
<font color="#E5E5E5">too so that's the windsock library for</font>

647
00:25:52,559 --> 00:25:57,178
<font color="#CCCCCC">windows</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that provides sockets</font>

648
00:25:55,019 --> 00:25:59,399
capability for<font color="#CCCCCC"> Windows so core</font>

649
00:25:57,179 --> 00:26:01,349
networking<font color="#CCCCCC"> Club sanity</font><font color="#E5E5E5"> and then we've</font>

650
00:25:59,399 --> 00:26:03,839
<font color="#E5E5E5">got your call to load</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> within</font>

651
00:26:01,349 --> 00:26:06,359
<font color="#CCCCCC">Carol 32 and midsize we'll mentioned</font>

652
00:26:03,839 --> 00:26:09,059
earlier that's the ability<font color="#CCCCCC"> to actually</font>

653
00:26:06,359 --> 00:26:12,269
<font color="#E5E5E5">loads and in this case</font><font color="#CCCCCC"> WS to fit two</font>

654
00:26:09,059 --> 00:26:14,158
into memory<font color="#CCCCCC"> now we've got</font><font color="#E5E5E5"> two Bs a</font><font color="#CCCCCC"> start</font>

655
00:26:12,269 --> 00:26:17,369
<font color="#CCCCCC">up which is</font><font color="#E5E5E5"> how you initiate Windows</font>

656
00:26:14,159 --> 00:26:19,649
sockets<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then some</font><font color="#E5E5E5"> hex encoded</font><font color="#CCCCCC"> its IP</font>

657
00:26:17,369 --> 00:26:21,869
<font color="#E5E5E5">port so you</font><font color="#CCCCCC"> know straight out and then</font>

658
00:26:19,649 --> 00:26:23,488
we've paused the plaintext IP and port

659
00:26:21,869 --> 00:26:26,009
<font color="#E5E5E5">this shell coach stager is pretty good</font>

660
00:26:23,489 --> 00:26:29,519
<font color="#CCCCCC">at</font><font color="#E5E5E5"> connecting and then the initial</font>

661
00:26:26,009 --> 00:26:32,669
connects and a lip looking<font color="#CCCCCC"> a little</font>

662
00:26:29,519 --> 00:26:34,770
further down<font color="#E5E5E5"> we can see a</font><font color="#CCCCCC"> receive call</font>

663
00:26:32,669 --> 00:26:36,420
at<font color="#E5E5E5"> virtual</font><font color="#CCCCCC"> Allah</font><font color="#E5E5E5"> and then</font>

664
00:26:34,770 --> 00:26:38,610
<font color="#CCCCCC">is kind of</font><font color="#E5E5E5"> looked at</font><font color="#CCCCCC"> there receives and</font>

665
00:26:36,420 --> 00:26:40,440
some data and kind<font color="#CCCCCC"> of putting</font><font color="#E5E5E5"> two and</font>

666
00:26:38,610 --> 00:26:42,240
two together<font color="#CCCCCC"> it kind of looks</font><font color="#E5E5E5"> like we're</font>

667
00:26:40,440 --> 00:26:45,480
<font color="#E5E5E5">gonna receive some data and</font><font color="#CCCCCC"> then load it</font>

668
00:26:42,240 --> 00:26:48,270
<font color="#E5E5E5">into memory and so kind</font><font color="#CCCCCC"> of mapping is</font>

669
00:26:45,480 --> 00:26:49,950
back to what<font color="#CCCCCC"> we'll shows and we've got</font>

670
00:26:48,270 --> 00:26:51,210
you know<font color="#CCCCCC"> our victim with the the stage</font>

671
00:26:49,950 --> 00:26:55,080
of running it's going to connect back<font color="#E5E5E5"> to</font>

672
00:26:51,210 --> 00:26:57,120
the<font color="#E5E5E5"> attacker</font><font color="#CCCCCC"> and then generates create</font>

673
00:26:55,080 --> 00:26:59,939
regional memory page get read write and

674
00:26:57,120 --> 00:27:02,129
<font color="#CCCCCC">writes and our deal island</font><font color="#E5E5E5"> we can kind</font>

675
00:26:59,940 --> 00:27:03,720
of link back you know the IP<font color="#E5E5E5"> address and</font>

676
00:27:02,130 --> 00:27:05,730
<font color="#E5E5E5">the</font><font color="#CCCCCC"> port</font><font color="#E5E5E5"> we're going to connect to and</font>

677
00:27:03,720 --> 00:27:07,770
<font color="#E5E5E5">got to connect the</font><font color="#CCCCCC"> received and actually</font>

678
00:27:05,730 --> 00:27:10,680
the Virtual Earth and the receives<font color="#E5E5E5"> that</font>

679
00:27:07,770 --> 00:27:12,930
and so it kind of looks like<font color="#E5E5E5"> this is</font>

680
00:27:10,680 --> 00:27:16,680
potentially a motivator<font color="#E5E5E5"> and payload that</font>

681
00:27:12,930 --> 00:27:18,330
<font color="#CCCCCC">we've got written in memory</font><font color="#E5E5E5"> so kind of</font>

682
00:27:16,680 --> 00:27:20,130
<font color="#E5E5E5">just to sum that up from a hunter</font>

683
00:27:18,330 --> 00:27:22,139
<font color="#CCCCCC">chalice perspective and we've got this</font>

684
00:27:20,130 --> 00:27:24,270
injected<font color="#E5E5E5"> bread that we've picked up and</font>

685
00:27:22,140 --> 00:27:25,890
there's no page mapping or any

686
00:27:24,270 --> 00:27:29,040
<font color="#CCCCCC">associated modules with this region</font>

687
00:27:25,890 --> 00:27:31,260
memory and it's also<font color="#E5E5E5"> Baptist</font><font color="#CCCCCC"> page</font>

688
00:27:29,040 --> 00:27:32,970
<font color="#CCCCCC">executed</font><font color="#E5E5E5"> rights which is typically what</font>

689
00:27:31,260 --> 00:27:36,780
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> find it's cutable code map</font><font color="#CCCCCC"> test</font>

690
00:27:32,970 --> 00:27:39,350
<font color="#E5E5E5">and we've got the looks like it's a</font>

691
00:27:36,780 --> 00:27:41,730
shell code for a meterpreter<font color="#E5E5E5"> payload and</font>

692
00:27:39,350 --> 00:27:45,139
we've got plain<font color="#CCCCCC"> text tightly imports</font>

693
00:27:41,730 --> 00:27:49,050
with not a huge<font color="#CCCCCC"> amount of effort</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> far</font>

694
00:27:45,140 --> 00:27:51,030
<font color="#E5E5E5">so we've got our fret which is running</font>

695
00:27:49,050 --> 00:27:53,250
as<font color="#CCCCCC"> our stage' or we now need to load in</font>

696
00:27:51,030 --> 00:27:54,930
<font color="#CCCCCC">the dl hours of</font><font color="#E5E5E5"> will explained and so</font>

697
00:27:53,250 --> 00:27:57,330
these<font color="#E5E5E5"> are typically</font><font color="#CCCCCC"> reflect be</font><font color="#E5E5E5"> loaded in</font>

698
00:27:54,930 --> 00:27:58,380
in the case of<font color="#CCCCCC"> meterpreter</font><font color="#E5E5E5"> so if you</font>

699
00:27:57,330 --> 00:28:00,629
happen<font color="#CCCCCC"> to know what</font><font color="#E5E5E5"> you're looking for</font>

700
00:27:58,380 --> 00:28:03,570
you can<font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> find the regions</font><font color="#CCCCCC"> whether</font>

701
00:28:00,630 --> 00:28:07,260
<font color="#CCCCCC">you just clip this up</font><font color="#E5E5E5"> and all have any</font>

702
00:28:03,570 --> 00:28:09,929
<font color="#CCCCCC">particular looking for the page</font><font color="#E5E5E5"> mappings</font>

703
00:28:07,260 --> 00:28:13,920
<font color="#E5E5E5">and we've got three regions here that</font>

704
00:28:09,930 --> 00:28:15,360
are all allocated as not being unknown

705
00:28:13,920 --> 00:28:17,610
regions we don't quite<font color="#E5E5E5"> know</font><font color="#CCCCCC"> what that</font>

706
00:28:15,360 --> 00:28:19,439
<font color="#CCCCCC">map into</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> i'll pay to execute we'd</font>

707
00:28:17,610 --> 00:28:20,969
rights and if you were to actually<font color="#E5E5E5"> love</font>

708
00:28:19,440 --> 00:28:24,030
<font color="#CCCCCC">these you'd be able to see the content</font>

709
00:28:20,970 --> 00:28:26,880
<font color="#CCCCCC">of the dear house but a common way that</font>

710
00:28:24,030 --> 00:28:29,250
you alternatively could use to<font color="#E5E5E5"> find the</font>

711
00:28:26,880 --> 00:28:31,410
presence of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> objective delouse</font><font color="#E5E5E5"> and</font>

712
00:28:29,250 --> 00:28:34,470
it's<font color="#E5E5E5"> something like one volatilities</font>

713
00:28:31,410 --> 00:28:36,900
<font color="#CCCCCC">Malphite and so if we</font><font color="#E5E5E5"> would take</font><font color="#CCCCCC"> a full</font>

714
00:28:34,470 --> 00:28:38,310
memory<font color="#E5E5E5"> dump of an infected machine we</font>

715
00:28:36,900 --> 00:28:39,960
could<font color="#CCCCCC"> run mal</font><font color="#E5E5E5"> finds</font><font color="#CCCCCC"> and it would</font>

716
00:28:38,310 --> 00:28:42,240
actually<font color="#E5E5E5"> find the presence of these</font>

717
00:28:39,960 --> 00:28:44,190
injected<font color="#E5E5E5"> delouse and there's a link</font>

718
00:28:42,240 --> 00:28:47,790
there<font color="#E5E5E5"> just to the quantity foundation</font>

719
00:28:44,190 --> 00:28:48,640
that<font color="#E5E5E5"> websites so that would look</font><font color="#CCCCCC"> like</font>

720
00:28:47,790 --> 00:28:50,860
<font color="#E5E5E5">this</font><font color="#CCCCCC"> we've</font>

721
00:28:48,640 --> 00:28:52,810
three regions of memory<font color="#E5E5E5"> we can see the</font>

722
00:28:50,860 --> 00:28:55,389
presence of the<font color="#CCCCCC"> M's</font><font color="#E5E5E5"> that header and as</font>

723
00:28:52,810 --> 00:29:00,960
well<font color="#E5E5E5"> say that's indicative of</font><font color="#CCCCCC"> AP 482</font>

724
00:28:55,390 --> 00:29:04,480
file and in<font color="#E5E5E5"> memory a nice little</font>

725
00:29:00,960 --> 00:29:07,420
additional<font color="#CCCCCC"> plugin for volatility is the</font>

726
00:29:04,480 --> 00:29:09,490
volatility PS info plugin<font color="#E5E5E5"> which is</font>

727
00:29:07,420 --> 00:29:11,770
<font color="#E5E5E5">actually really</font><font color="#CCCCCC"> quite</font><font color="#E5E5E5"> neat it shows you</font>

728
00:29:09,490 --> 00:29:14,560
that we've<font color="#E5E5E5"> got P files found at those</font>

729
00:29:11,770 --> 00:29:17,110
memory regions and<font color="#E5E5E5"> also picks up on a</font>

730
00:29:14,560 --> 00:29:20,320
<font color="#CCCCCC">patek our thread that we initially</font><font color="#E5E5E5"> found</font>

731
00:29:17,110 --> 00:29:23,860
originally and so to<font color="#E5E5E5"> kind of sum that up</font>

732
00:29:20,320 --> 00:29:26,590
<font color="#E5E5E5">we have our you know the way the</font>

733
00:29:23,860 --> 00:29:29,169
Metasploit works is we're injecting 3d

734
00:29:26,590 --> 00:29:31,300
allows as as well noted and we've picked

735
00:29:29,170 --> 00:29:33,370
those three<font color="#E5E5E5"> memory regions up and if you</font>

736
00:29:31,300 --> 00:29:34,780
compare<font color="#E5E5E5"> the sizes they roughly match</font>

737
00:29:33,370 --> 00:29:37,270
they're a little bit different<font color="#E5E5E5"> given</font>

738
00:29:34,780 --> 00:29:39,010
<font color="#E5E5E5">they're injected into memory and we've</font>

739
00:29:37,270 --> 00:29:40,810
got the<font color="#CCCCCC"> time set the</font><font color="#E5E5E5"> presence of net</font>

740
00:29:39,010 --> 00:29:43,480
serve which<font color="#E5E5E5"> is kind of the default</font><font color="#CCCCCC"> with</font>

741
00:29:40,810 --> 00:29:46,300
<font color="#CCCCCC">different service and that's required</font><font color="#E5E5E5"> to</font>

742
00:29:43,480 --> 00:29:48,700
get the<font color="#CCCCCC"> core SSL connection back to the</font>

743
00:29:46,300 --> 00:29:50,860
to<font color="#E5E5E5"> the attacker at which point the</font>

744
00:29:48,700 --> 00:29:53,020
standard API and the<font color="#E5E5E5"> probe</font><font color="#CCCCCC"> DLL will then</font>

745
00:29:50,860 --> 00:29:57,790
be<font color="#CCCCCC"> injected into memory to kind of give</font>

746
00:29:53,020 --> 00:30:00,460
us the<font color="#E5E5E5"> additional functionality if we</font>

747
00:29:57,790 --> 00:30:02,620
were to dump these regions<font color="#E5E5E5"> of memory out</font>

748
00:30:00,460 --> 00:30:05,260
and then upload<font color="#E5E5E5"> them to virustotal</font><font color="#CCCCCC"> and</font>

749
00:30:02,620 --> 00:30:07,389
bearing in mind<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> Metasploit has</font>

750
00:30:05,260 --> 00:30:09,790
been around for<font color="#CCCCCC"> 10 plus years and the</font>

751
00:30:07,390 --> 00:30:12,520
<font color="#CCCCCC">stator in the case that I used died II</font>

752
00:30:09,790 --> 00:30:15,490
<font color="#E5E5E5">hit of 5 at 52 I'm virustotal</font>

753
00:30:12,520 --> 00:30:18,520
and<font color="#E5E5E5"> the 5av engines on the</font><font color="#CCCCCC"> right are all</font>

754
00:30:15,490 --> 00:30:20,500
<font color="#CCCCCC">using bits vendors AV</font><font color="#E5E5E5"> engine and in 2017</font>

755
00:30:18,520 --> 00:30:23,500
it's not great<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> a V zone you've</font>

756
00:30:20,500 --> 00:30:25,980
<font color="#CCCCCC">detected there one</font><font color="#E5E5E5"> AV out of the coin</font>

757
00:30:23,500 --> 00:30:28,840
vendors<font color="#CCCCCC"> it's only detects in the stage'</font>

758
00:30:25,980 --> 00:30:30,610
and at that point<font color="#E5E5E5"> the stage will then</font>

759
00:30:28,840 --> 00:30:32,620
transfer all<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> allows</font>

760
00:30:30,610 --> 00:30:35,020
across the wire<font color="#CCCCCC"> and straight into memory</font>

761
00:30:32,620 --> 00:30:40,179
they went to<font color="#E5E5E5"> its disk and so</font><font color="#CCCCCC"> AV and is</font>

762
00:30:35,020 --> 00:30:41,860
much less<font color="#CCCCCC"> likely to pick that and</font><font color="#E5E5E5"> so to</font>

763
00:30:40,180 --> 00:30:44,110
kind<font color="#CCCCCC"> of sum up</font><font color="#E5E5E5"> from the reflective load</font>

764
00:30:41,860 --> 00:30:46,360
perspective we've got our<font color="#E5E5E5"> free injected</font>

765
00:30:44,110 --> 00:30:49,240
dll's<font color="#E5E5E5"> and each of which don't have any</font>

766
00:30:46,360 --> 00:30:53,320
pager associated and modules mapped into

767
00:30:49,240 --> 00:30:55,120
memory and we have a we're not<font color="#CCCCCC"> seeing</font>

768
00:30:53,320 --> 00:30:57,220
<font color="#E5E5E5">any suspicious process activity at this</font>

769
00:30:55,120 --> 00:30:59,500
stage<font color="#E5E5E5"> everything is happening in</font><font color="#CCCCCC"> core</font>

770
00:30:57,220 --> 00:31:00,850
memory and as we<font color="#CCCCCC"> noted before with most</font>

771
00:30:59,500 --> 00:31:02,820
<font color="#E5E5E5">of</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> presence of the threads</font><font color="#CCCCCC"> the</font>

772
00:31:00,850 --> 00:31:06,250
<font color="#CCCCCC">acceptance</font>

773
00:31:02,820 --> 00:31:07,600
so once we've actually got a stager set

774
00:31:06,250 --> 00:31:09,490
up we've got meterpreter session running

775
00:31:07,600 --> 00:31:12,219
<font color="#E5E5E5">and this is the point where</font><font color="#CCCCCC"> we might</font>

776
00:31:09,490 --> 00:31:15,160
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to move on to post exploitation and</font>

777
00:31:12,220 --> 00:31:17,380
so a common technique that attackers we

778
00:31:15,160 --> 00:31:19,930
use mini-hats<font color="#E5E5E5"> which is a technique</font><font color="#CCCCCC"> to</font>

779
00:31:17,380 --> 00:31:22,450
<font color="#CCCCCC">poll plain text</font><font color="#E5E5E5"> little straight out</font>

780
00:31:19,930 --> 00:31:25,060
memory<font color="#E5E5E5"> so the way that you can</font><font color="#CCCCCC"> use</font>

781
00:31:22,450 --> 00:31:27,820
memory<font color="#E5E5E5"> caps or Kiwi as it's now been</font>

782
00:31:25,060 --> 00:31:31,629
implemented into meterpreter<font color="#E5E5E5"> and is just</font>

783
00:31:27,820 --> 00:31:33,399
a load<font color="#CCCCCC"> that module in as will notice the</font>

784
00:31:31,630 --> 00:31:35,050
extensions are then loaded and

785
00:31:33,400 --> 00:31:39,460
dynamically reflectively loaded straight

786
00:31:35,050 --> 00:31:41,980
<font color="#E5E5E5">into memory with mini fats in particular</font>

787
00:31:39,460 --> 00:31:43,780
you<font color="#CCCCCC"> can then</font><font color="#E5E5E5"> nodes under</font><font color="#CCCCCC"> w</font><font color="#E5E5E5"> digest</font>

788
00:31:41,980 --> 00:31:46,510
commands and<font color="#E5E5E5"> that will pull out the</font>

789
00:31:43,780 --> 00:31:49,690
<font color="#E5E5E5">plain text</font><font color="#CCCCCC"> passwords cheers</font><font color="#E5E5E5"> well for</font>

790
00:31:46,510 --> 00:31:53,080
that possibility<font color="#E5E5E5"> needs to be secured at</font>

791
00:31:49,690 --> 00:31:55,690
a<font color="#CCCCCC"> nap and so like I said this will then</font>

792
00:31:53,080 --> 00:31:57,730
<font color="#CCCCCC">load this additional memory caps</font><font color="#E5E5E5"> deal</font>

793
00:31:55,690 --> 00:32:00,160
out straight into memory and again we'd

794
00:31:57,730 --> 00:32:02,410
<font color="#CCCCCC">have this additional</font><font color="#E5E5E5"> memory region that</font>

795
00:32:00,160 --> 00:32:04,720
<font color="#E5E5E5">would have no page mapping the doors</font><font color="#CCCCCC"> be</font>

796
00:32:02,410 --> 00:32:07,090
<font color="#CCCCCC">EPS their allocated</font><font color="#E5E5E5"> peanuts could be</font>

797
00:32:04,720 --> 00:32:11,500
right and it'd be<font color="#E5E5E5"> roughly the same</font><font color="#CCCCCC"> size</font>

798
00:32:07,090 --> 00:32:12,699
<font color="#CCCCCC">it's one</font><font color="#E5E5E5"> that deal out with</font><font color="#CCCCCC"> lists</font><font color="#E5E5E5"> and to</font>

799
00:32:11,500 --> 00:32:15,010
kind of<font color="#E5E5E5"> sum now we've got this</font>

800
00:32:12,700 --> 00:32:16,840
additional DLL injected and I'm side the

801
00:32:15,010 --> 00:32:20,830
initial<font color="#CCCCCC"> friend</font><font color="#E5E5E5"> and a poor deal house</font>

802
00:32:16,840 --> 00:32:22,810
that we saw initially so let's bring all

803
00:32:20,830 --> 00:32:24,580
<font color="#E5E5E5">of that together and we'll kind</font><font color="#CCCCCC"> of draw</font>

804
00:32:22,810 --> 00:32:27,310
<font color="#E5E5E5">from those initial diagram of the</font>

805
00:32:24,580 --> 00:32:30,100
<font color="#CCCCCC">notepad.exe</font><font color="#E5E5E5"> memory so we've got a</font>

806
00:32:27,310 --> 00:32:33,179
notepad a<font color="#CCCCCC"> pc module and in memory and</font>

807
00:32:30,100 --> 00:32:36,730
any dependency<font color="#E5E5E5"> dll's loaded at runtime</font>

808
00:32:33,180 --> 00:32:39,550
into<font color="#E5E5E5"> into memory we've got our initial</font>

809
00:32:36,730 --> 00:32:41,520
shell<font color="#E5E5E5"> code stager and</font><font color="#CCCCCC"> that's gonna</font><font color="#E5E5E5"> act</font>

810
00:32:39,550 --> 00:32:44,260
as our stager to connect back and

811
00:32:41,520 --> 00:32:46,930
reflectively load then the<font color="#E5E5E5"> free port</font>

812
00:32:44,260 --> 00:32:49,090
<font color="#CCCCCC">delouse when those Cordy allows will</font>

813
00:32:46,930 --> 00:32:50,920
require additional functionality and so

814
00:32:49,090 --> 00:32:53,889
they'll<font color="#CCCCCC"> loads</font><font color="#E5E5E5"> a few or dependency</font>

815
00:32:50,920 --> 00:32:56,590
delouse<font color="#CCCCCC"> and from there if we had an</font>

816
00:32:53,890 --> 00:32:58,930
extensions will then<font color="#CCCCCC"> inject</font><font color="#E5E5E5"> for example</font>

817
00:32:56,590 --> 00:33:00,879
maybe cats that<font color="#E5E5E5"> would be loaded in and</font>

818
00:32:58,930 --> 00:33:04,330
that<font color="#CCCCCC"> wall will</font><font color="#E5E5E5"> show us an additional</font>

819
00:33:00,880 --> 00:33:07,180
<font color="#CCCCCC">reflective loaded</font><font color="#E5E5E5"> what's quite important</font>

820
00:33:04,330 --> 00:33:10,030
is the fact<font color="#E5E5E5"> that all three of the</font>

821
00:33:07,180 --> 00:33:11,890
<font color="#E5E5E5">reflectively loaded</font><font color="#CCCCCC"> DL owls</font><font color="#E5E5E5"> and the</font>

822
00:33:10,030 --> 00:33:14,290
<font color="#CCCCCC">cordial owls and any extension D allows</font>

823
00:33:11,890 --> 00:33:15,040
they aren't particularly are associated

824
00:33:14,290 --> 00:33:17,080
to<font color="#E5E5E5"> allocated</font>

825
00:33:15,040 --> 00:33:18,909
<font color="#CCCCCC">in</font><font color="#E5E5E5"> memory so the process itself doesn't</font>

826
00:33:17,080 --> 00:33:21,490
specifically know that they exist and

827
00:33:18,910 --> 00:33:23,200
<font color="#E5E5E5">that</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> being registered and in the</font>

828
00:33:21,490 --> 00:33:26,170
<font color="#CCCCCC">pair would</font><font color="#E5E5E5"> be any paid far mappings</font>

829
00:33:23,200 --> 00:33:29,500
between them and so to kind<font color="#CCCCCC"> of extend</font>

830
00:33:26,170 --> 00:33:32,350
that kind<font color="#CCCCCC"> of invisible so we've got</font>

831
00:33:29,500 --> 00:33:35,470
these reflectively<font color="#E5E5E5"> loaded</font><font color="#CCCCCC"> DL owls we've</font>

832
00:33:32,350 --> 00:33:37,449
got<font color="#CCCCCC"> a suspicious spread</font><font color="#E5E5E5"> and the concept</font>

833
00:33:35,470 --> 00:33:40,390
is if you know it's<font color="#E5E5E5"> undetectable by most</font>

834
00:33:37,450 --> 00:33:42,400
<font color="#E5E5E5">IVs</font><font color="#CCCCCC"> some will pick it</font><font color="#E5E5E5"> up and that's</font>

835
00:33:40,390 --> 00:33:44,080
what's the stages<font color="#E5E5E5"> in memory and it's</font>

836
00:33:42,400 --> 00:33:50,200
quite<font color="#CCCCCC"> easy dented just</font><font color="#E5E5E5"> bypassing any</font>

837
00:33:44,080 --> 00:33:52,389
defenses right so for the<font color="#E5E5E5"> last part of</font>

838
00:33:50,200 --> 00:33:54,790
this presentation<font color="#CCCCCC"> we</font><font color="#E5E5E5"> just can have</font><font color="#CCCCCC"> a</font>

839
00:33:52,390 --> 00:33:57,280
brief discussion<font color="#E5E5E5"> of COBOL strike which</font>

840
00:33:54,790 --> 00:34:01,149
<font color="#E5E5E5">is an increasingly common attack</font>

841
00:33:57,280 --> 00:34:03,010
framework that<font color="#E5E5E5"> red teams are using</font><font color="#CCCCCC"> I'm</font>

842
00:34:01,150 --> 00:34:04,810
just going to<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> its its</font>

843
00:34:03,010 --> 00:34:08,500
differences and its similarities to

844
00:34:04,810 --> 00:34:09,880
<font color="#E5E5E5">Metasploit</font><font color="#CCCCCC"> and then give a quick</font>

845
00:34:08,500 --> 00:34:13,440
<font color="#E5E5E5">overview of how</font><font color="#CCCCCC"> we can detect</font><font color="#E5E5E5"> it</font>

846
00:34:09,880 --> 00:34:15,580
essentially using the<font color="#E5E5E5"> same methods so</font>

847
00:34:13,440 --> 00:34:20,470
<font color="#CCCCCC">looks</font><font color="#E5E5E5"> awesome doesn't it</font>

848
00:34:15,580 --> 00:34:23,219
so cobalt strike was developed as an

849
00:34:20,469 --> 00:34:26,859
extension to Armitage which itself is a

850
00:34:23,219 --> 00:34:30,609
GUI front-end to the horrible<font color="#CCCCCC"> Metasploit</font>

851
00:34:26,860 --> 00:34:32,230
interface<font color="#CCCCCC"> it's got lots of advanced</font>

852
00:34:30,610 --> 00:34:34,330
<font color="#CCCCCC">features such as browser pivoting</font>

853
00:34:32,230 --> 00:34:36,400
interacting with users<font color="#CCCCCC"> desktop that make</font>

854
00:34:34,330 --> 00:34:40,239
it very<font color="#CCCCCC"> useful</font><font color="#E5E5E5"> for red teamers</font>

855
00:34:36,400 --> 00:34:42,220
essentially against enterprises<font color="#CCCCCC"> we have</font>

856
00:34:40,239 --> 00:34:46,330
in our experience<font color="#CCCCCC"> also seen it used in</font>

857
00:34:42,219 --> 00:34:47,739
<font color="#E5E5E5">the</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> by threat actors so it's it's</font>

858
00:34:46,330 --> 00:34:51,310
potentially<font color="#E5E5E5"> something that we should be</font>

859
00:34:47,739 --> 00:34:52,779
<font color="#CCCCCC">looking into it uses its own payload</font>

860
00:34:51,310 --> 00:34:54,790
called the beacon which kind<font color="#CCCCCC"> of offers</font>

861
00:34:52,780 --> 00:34:56,320
similar<font color="#E5E5E5"> meterpreter like functionality</font>

862
00:34:54,790 --> 00:34:58,630
<font color="#E5E5E5">but the two frameworks are very</font>

863
00:34:56,320 --> 00:35:02,710
different<font color="#E5E5E5"> features and all work with</font>

864
00:34:58,630 --> 00:35:05,940
philosophies as well so in terms<font color="#E5E5E5"> of the</font>

865
00:35:02,710 --> 00:35:09,300
differences<font color="#CCCCCC"> so</font><font color="#E5E5E5"> COBOL Shrike is very much</font>

866
00:35:05,940 --> 00:35:12,220
designed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> attack modern enterprises so</font>

867
00:35:09,300 --> 00:35:14,320
the whole<font color="#E5E5E5"> the whole tool is almost</font>

868
00:35:12,220 --> 00:35:16,470
<font color="#E5E5E5">exclusively</font><font color="#CCCCCC"> focus</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> client-side attacks</font>

869
00:35:14,320 --> 00:35:19,290
<font color="#E5E5E5">so you know spear phishing emails</font>

870
00:35:16,470 --> 00:35:21,669
<font color="#E5E5E5">browser browser attacks things like that</font>

871
00:35:19,290 --> 00:35:23,500
<font color="#E5E5E5">so it doesn't</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> kind of hundreds</font>

872
00:35:21,670 --> 00:35:24,700
of<font color="#CCCCCC"> exports that</font><font color="#E5E5E5"> metasploit will do in</font>

873
00:35:23,500 --> 00:35:26,920
the hope<font color="#CCCCCC"> that you'll find at</font><font color="#E5E5E5"> MSO eight</font>

874
00:35:24,700 --> 00:35:29,040
or something<font color="#CCCCCC"> and this has</font><font color="#E5E5E5"> kind of</font>

875
00:35:26,920 --> 00:35:31,200
informed a lot<font color="#E5E5E5"> of its design choices</font>

876
00:35:29,040 --> 00:35:33,680
the key difference I think<font color="#E5E5E5"> in my opinion</font>

877
00:35:31,200 --> 00:35:36,390
<font color="#E5E5E5">is it's far less noisy on the wire so</font>

878
00:35:33,680 --> 00:35:37,890
<font color="#CCCCCC">Metis mitosis made changes but it</font>

879
00:35:36,390 --> 00:35:39,930
fundamentally hasn't been designed from

880
00:35:37,890 --> 00:35:41,759
the ground up<font color="#CCCCCC"> and so it constantly</font>

881
00:35:39,930 --> 00:35:42,779
hammers TCP connections back so it's far

882
00:35:41,760 --> 00:35:46,140
easier<font color="#E5E5E5"> to spot</font>

883
00:35:42,780 --> 00:35:48,630
<font color="#E5E5E5">whereas beacon was designed from the</font>

884
00:35:46,140 --> 00:35:50,310
start to be<font color="#CCCCCC"> very high latency</font><font color="#E5E5E5"> and</font>

885
00:35:48,630 --> 00:35:51,750
asynchronous so basically you can<font color="#E5E5E5"> set it</font>

886
00:35:50,310 --> 00:35:53,220
<font color="#CCCCCC">to sleep for five hours</font><font color="#E5E5E5"> and it would</font>

887
00:35:51,750 --> 00:35:54,630
<font color="#CCCCCC">just</font><font color="#E5E5E5"> come back to you when it's done the</font>

888
00:35:53,220 --> 00:35:57,839
result of this being that<font color="#E5E5E5"> you'll maybe</font>

889
00:35:54,630 --> 00:36:01,589
only<font color="#E5E5E5"> get very few packets</font><font color="#CCCCCC"> over a 24 hour</font>

890
00:35:57,839 --> 00:36:03,180
<font color="#E5E5E5">period</font><font color="#CCCCCC"> you can also use it use it's</font>

891
00:36:01,589 --> 00:36:04,650
malleable command and control<font color="#E5E5E5"> language</font>

892
00:36:03,180 --> 00:36:06,720
and basically<font color="#E5E5E5"> what this means is</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

893
00:36:04,650 --> 00:36:08,730
tailor your profile to the organization

894
00:36:06,720 --> 00:36:10,618
<font color="#E5E5E5">that you're attacking and in conclusion</font>

895
00:36:08,730 --> 00:36:15,359
this is<font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> difficult to spot and</font>

896
00:36:10,619 --> 00:36:19,079
it's<font color="#CCCCCC"> because it's</font><font color="#E5E5E5"> been designed to be in</font>

897
00:36:15,359 --> 00:36:20,910
terms<font color="#E5E5E5"> of similarities the beak the</font>

898
00:36:19,079 --> 00:36:23,420
beacon payload is still a reflective DLL

899
00:36:20,910 --> 00:36:25,920
<font color="#CCCCCC">so the explanation that</font><font color="#E5E5E5"> originally gave</font>

900
00:36:23,420 --> 00:36:28,530
it will<font color="#E5E5E5"> just do exactly the same thing</font>

901
00:36:25,920 --> 00:36:31,079
as meterpreter<font color="#CCCCCC"> so that example</font><font color="#E5E5E5"> you could</font>

902
00:36:28,530 --> 00:36:33,240
almost you know change that macro

903
00:36:31,079 --> 00:36:34,530
document for a beacon<font color="#CCCCCC"> Stasia and the</font>

904
00:36:33,240 --> 00:36:37,109
same thing would happen it'll inject it

905
00:36:34,530 --> 00:36:41,190
into memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> run it</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it'll go</font><font color="#E5E5E5"> so</font>

906
00:36:37,109 --> 00:36:43,619
as you kind<font color="#E5E5E5"> of expect they look very</font>

907
00:36:41,190 --> 00:36:49,710
similar running in memory<font color="#E5E5E5"> with it with a</font>

908
00:36:43,619 --> 00:36:53,010
<font color="#E5E5E5">few differences so once again how the</font>

909
00:36:49,710 --> 00:36:54,900
tool injects code and thread and<font color="#E5E5E5"> it's</font>

910
00:36:53,010 --> 00:36:58,050
kind<font color="#CCCCCC"> of clumsy</font><font color="#E5E5E5"> with memory you can see</font>

911
00:36:54,900 --> 00:37:00,060
the<font color="#CCCCCC"> Stasia very easily so we can</font><font color="#E5E5E5"> look</font>

912
00:36:58,050 --> 00:37:02,099
<font color="#E5E5E5">again in windbg we can attach it</font><font color="#CCCCCC"> live</font>

913
00:37:00,060 --> 00:37:04,230
<font color="#E5E5E5">but you can again</font><font color="#CCCCCC"> see a thread</font><font color="#E5E5E5"> that</font>

914
00:37:02,099 --> 00:37:09,210
doesn't link back<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> no dealer or</font>

915
00:37:04,230 --> 00:37:10,859
module<font color="#E5E5E5"> and interestingly in</font><font color="#CCCCCC"> Kobach's</font>

916
00:37:09,210 --> 00:37:13,380
<font color="#E5E5E5">chart you can</font><font color="#CCCCCC"> actually see the default</font>

917
00:37:10,859 --> 00:37:15,109
user agent<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> and the situ IP so</font>

918
00:37:13,380 --> 00:37:20,490
you were<font color="#CCCCCC"> Cecily less work than</font>

919
00:37:15,109 --> 00:37:24,869
<font color="#E5E5E5">meterpreter and we did a bit of</font><font color="#CCCCCC"> testing</font>

920
00:37:20,490 --> 00:37:27,990
and so we had<font color="#CCCCCC"> poorer Bob we had a 8</font>

921
00:37:24,869 --> 00:37:30,480
sessions<font color="#E5E5E5"> open seven of which were at</font>

922
00:37:27,990 --> 00:37:34,109
system and so for every<font color="#CCCCCC"> one of these</font>

923
00:37:30,480 --> 00:37:37,460
sessions<font color="#E5E5E5"> this thread stands out and it's</font>

924
00:37:34,109 --> 00:37:37,460
<font color="#E5E5E5">worth</font><font color="#CCCCCC"> saying when you do</font><font color="#E5E5E5"> this at scale</font>

925
00:37:38,360 --> 00:37:42,470
in terms of<font color="#E5E5E5"> say a suspicious thread like</font>

926
00:37:40,250 --> 00:37:45,110
this<font color="#E5E5E5"> in notepad</font><font color="#CCCCCC"> you're talking one in</font>

927
00:37:42,470 --> 00:37:47,509
very very very very thousands of<font color="#CCCCCC"> events</font>

928
00:37:45,110 --> 00:37:49,160
essentially these<font color="#E5E5E5"> are very rare and a</font>

929
00:37:47,510 --> 00:37:54,950
<font color="#E5E5E5">thread in</font><font color="#CCCCCC"> PowerShell is almost always</font>

930
00:37:49,160 --> 00:37:56,750
militias and bad and horrible and again

931
00:37:54,950 --> 00:37:58,250
because<font color="#E5E5E5"> it's reflectively loading we're</font>

932
00:37:56,750 --> 00:38:00,560
going to be looking<font color="#CCCCCC"> for injected dll's</font>

933
00:37:58,250 --> 00:38:02,980
the key difference here<font color="#E5E5E5"> is that</font>

934
00:38:00,560 --> 00:38:05,840
meterpreter<font color="#E5E5E5"> leaves them dead header</font>

935
00:38:02,980 --> 00:38:07,340
<font color="#E5E5E5">where those nasty</font><font color="#CCCCCC"> cobol</font><font color="#E5E5E5"> strike people</font>

936
00:38:05,840 --> 00:38:09,980
<font color="#E5E5E5">they actually deliberately wiped the</font>

937
00:38:07,340 --> 00:38:11,450
<font color="#E5E5E5">embed header so they're trying to make</font>

938
00:38:09,980 --> 00:38:14,000
<font color="#E5E5E5">it harder forensic ly for you to</font>

939
00:38:11,450 --> 00:38:16,520
identify a full executable pin<font color="#CCCCCC"> eject</font>

940
00:38:14,000 --> 00:38:21,290
into memory power show<font color="#E5E5E5"> Empire if anyone</font>

941
00:38:16,520 --> 00:38:23,000
has used<font color="#E5E5E5"> it also does that as well but</font>

942
00:38:21,290 --> 00:38:25,940
as you<font color="#E5E5E5"> can probably guess if you maybe</font>

943
00:38:23,000 --> 00:38:27,380
look for<font color="#E5E5E5"> slightly</font><font color="#CCCCCC"> different things so in</font>

944
00:38:25,940 --> 00:38:29,330
this instance we've just<font color="#E5E5E5"> looked for the</font>

945
00:38:27,380 --> 00:38:31,790
PE headers in<font color="#E5E5E5"> the exact and again</font><font color="#CCCCCC"> I'm at</font>

946
00:38:29,330 --> 00:38:36,259
regions<font color="#E5E5E5"> page execute</font><font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> and we</font>

947
00:38:31,790 --> 00:38:38,230
can see the<font color="#CCCCCC"> Coe</font><font color="#E5E5E5"> Bob strike beacon so if</font>

948
00:38:36,260 --> 00:38:40,520
you're<font color="#CCCCCC"> hunting for this on your estate</font>

949
00:38:38,230 --> 00:38:44,630
<font color="#E5E5E5">you you would want to look for again</font>

950
00:38:40,520 --> 00:38:46,400
injected dll's<font color="#E5E5E5"> with no mapping and again</font>

951
00:38:44,630 --> 00:38:47,720
this<font color="#E5E5E5"> becomes</font><font color="#CCCCCC"> a bit more lightweight so I</font>

952
00:38:46,400 --> 00:38:50,630
think<font color="#E5E5E5"> it only implements one DLL</font>

953
00:38:47,720 --> 00:38:52,850
<font color="#E5E5E5">compared to</font><font color="#CCCCCC"> meterpreter three the key</font>

954
00:38:50,630 --> 00:38:54,770
difference there's no<font color="#CCCCCC"> vendor header</font><font color="#E5E5E5"> but</font>

955
00:38:52,850 --> 00:38:57,640
<font color="#E5E5E5">you still see this stager which stands</font>

956
00:38:54,770 --> 00:38:57,640
out<font color="#E5E5E5"> every time</font>

957
00:38:58,060 --> 00:39:04,070
so very quickly<font color="#E5E5E5"> post exploitation</font><font color="#CCCCCC"> again</font>

958
00:39:01,220 --> 00:39:05,569
it's<font color="#E5E5E5"> very different and it kind of</font>

959
00:39:04,070 --> 00:39:07,550
betrays the philosophy<font color="#CCCCCC"> behind it SoCo</font>

960
00:39:05,570 --> 00:39:08,900
<font color="#E5E5E5">Bob strike again it's a</font><font color="#CCCCCC"> game enterprises</font>

961
00:39:07,550 --> 00:39:10,580
you want to keep<font color="#E5E5E5"> your shell at all costs</font>

962
00:39:08,900 --> 00:39:12,200
and there's always a risk if<font color="#E5E5E5"> you're</font>

963
00:39:10,580 --> 00:39:13,279
going<font color="#E5E5E5"> to inject shell code or other</font>

964
00:39:12,200 --> 00:39:15,020
stuff<font color="#E5E5E5"> into your process that you might</font>

965
00:39:13,280 --> 00:39:17,510
crash it and if you<font color="#E5E5E5"> lose your shell then</font>

966
00:39:15,020 --> 00:39:19,040
you're<font color="#E5E5E5"> not be very happy so what it</font>

967
00:39:17,510 --> 00:39:23,840
tends<font color="#CCCCCC"> to do is it</font><font color="#E5E5E5"> has this concept of</font>

968
00:39:19,040 --> 00:39:27,200
jobs<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it will spawn a process also so</font>

969
00:39:23,840 --> 00:39:29,900
it will spawn<font color="#E5E5E5"> a dummy process</font><font color="#CCCCCC"> and by</font>

970
00:39:27,200 --> 00:39:31,669
default<font color="#E5E5E5"> users run</font><font color="#CCCCCC"> dll 32</font><font color="#E5E5E5"> which is weird</font>

971
00:39:29,900 --> 00:39:33,350
because there's a host container process

972
00:39:31,670 --> 00:39:34,910
so it shouldn't run a<font color="#CCCCCC"> DLL so if you just</font>

973
00:39:33,350 --> 00:39:37,730
see it randomly running<font color="#E5E5E5"> by itself it's</font>

974
00:39:34,910 --> 00:39:40,009
it's probably<font color="#CCCCCC"> not good and</font><font color="#E5E5E5"> in this</font>

975
00:39:37,730 --> 00:39:41,690
instance so that<font color="#E5E5E5"> windward launching run</font>

976
00:39:40,010 --> 00:39:43,910
<font color="#CCCCCC">derail that's mimic that's being</font><font color="#E5E5E5"> run</font>

977
00:39:41,690 --> 00:39:46,130
which if you<font color="#E5E5E5"> think of</font><font color="#CCCCCC"> that event</font><font color="#E5E5E5"> and</font>

978
00:39:43,910 --> 00:39:49,399
thousands on it<font color="#CCCCCC"> costing the state it</font>

979
00:39:46,130 --> 00:39:51,110
doesn't give a great deal away<font color="#E5E5E5"> but the</font>

980
00:39:49,400 --> 00:39:52,160
key thing<font color="#CCCCCC"> is it this is how it</font><font color="#E5E5E5"> monitors</font>

981
00:39:51,110 --> 00:39:54,110
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> so it lets them</font>

982
00:39:52,160 --> 00:39:55,640
and they<font color="#CCCCCC"> returned the</font><font color="#E5E5E5"> results back</font><font color="#CCCCCC"> so</font>

983
00:39:54,110 --> 00:39:57,860
it's slightly hard<font color="#E5E5E5"> I've not impossible</font>

984
00:39:55,640 --> 00:39:59,390
<font color="#E5E5E5">it's harder for my memory forensics</font><font color="#CCCCCC"> view</font>

985
00:39:57,860 --> 00:40:03,200
but<font color="#E5E5E5"> you can start bringing in process</font>

986
00:39:59,390 --> 00:40:04,940
data now<font color="#CCCCCC"> to to enrich that data so the</font>

987
00:40:03,200 --> 00:40:07,460
key thing run<font color="#E5E5E5"> dll's forming</font><font color="#CCCCCC"> the logs</font>

988
00:40:04,940 --> 00:40:08,600
<font color="#CCCCCC">which is weird look for that</font><font color="#E5E5E5"> and you get</font>

989
00:40:07,460 --> 00:40:12,080
this<font color="#E5E5E5"> suspicious parent-child</font>

990
00:40:08,600 --> 00:40:14,299
relationship<font color="#E5E5E5"> so in terms of bringing it</font>

991
00:40:12,080 --> 00:40:17,120
all together then you see a very very

992
00:40:14,300 --> 00:40:22,580
very similar<font color="#CCCCCC"> picture</font><font color="#E5E5E5"> to meterpreter we</font>

993
00:40:17,120 --> 00:40:24,259
feel poor<font color="#CCCCCC"> role Notepad process again we</font>

994
00:40:22,580 --> 00:40:27,440
inject that thread<font color="#E5E5E5"> so that's our</font><font color="#CCCCCC"> stager</font>

995
00:40:24,260 --> 00:40:29,000
<font color="#CCCCCC">that retrieves</font><font color="#E5E5E5"> Apolo injects it we</font>

996
00:40:27,440 --> 00:40:31,220
reflectively load our beacon<font color="#CCCCCC"> that</font><font color="#E5E5E5"> dll in</font>

997
00:40:29,000 --> 00:40:33,430
and then that<font color="#CCCCCC"> will load in all the all</font>

998
00:40:31,220 --> 00:40:35,419
the other<font color="#E5E5E5"> dll so generally speaking</font>

999
00:40:33,430 --> 00:40:37,460
<font color="#E5E5E5">notepad shouldn't have networking</font><font color="#CCCCCC"> and</font>

1000
00:40:35,420 --> 00:40:40,580
<font color="#E5E5E5">crypto</font><font color="#CCCCCC"> tier</font><font color="#E5E5E5"> levels in it so look for</font>

1001
00:40:37,460 --> 00:40:43,040
<font color="#E5E5E5">those as well and again in terms of its</font>

1002
00:40:40,580 --> 00:40:44,509
post exploitation<font color="#CCCCCC"> its these jobs</font><font color="#E5E5E5"> it's</font>

1003
00:40:43,040 --> 00:40:46,100
spawning processes and the injecting

1004
00:40:44,510 --> 00:40:47,600
stuff into them and<font color="#E5E5E5"> then they die so if</font>

1005
00:40:46,100 --> 00:40:49,640
any process starts spawning stuff and

1006
00:40:47,600 --> 00:40:50,660
dying<font color="#E5E5E5"> that's potentially interesting and</font>

1007
00:40:49,640 --> 00:40:53,180
you should maybe<font color="#E5E5E5"> want to watch</font><font color="#CCCCCC"> out for</font>

1008
00:40:50,660 --> 00:40:55,129
<font color="#E5E5E5">that and again all of these unknown</font>

1009
00:40:53,180 --> 00:41:00,440
readings of memory<font color="#E5E5E5"> pay to execute read</font>

1010
00:40:55,130 --> 00:41:03,860
<font color="#CCCCCC">write so they should be suspicious</font><font color="#E5E5E5"> okay</font>

1011
00:41:00,440 --> 00:41:06,350
<font color="#CCCCCC">so we've been looking</font><font color="#E5E5E5"> so far primarily a</font>

1012
00:41:03,860 --> 00:41:08,840
kind of individual cases<font color="#CCCCCC"> and that's</font>

1013
00:41:06,350 --> 00:41:10,790
<font color="#E5E5E5">great but the real strength behind</font><font color="#CCCCCC"> this</font>

1014
00:41:08,840 --> 00:41:13,930
actually comes and when you start to

1015
00:41:10,790 --> 00:41:16,640
<font color="#CCCCCC">implement memory forensics</font><font color="#E5E5E5"> scale so as</font>

1016
00:41:13,930 --> 00:41:18,890
<font color="#CCCCCC">will kind of</font><font color="#E5E5E5"> hinted at if you</font><font color="#CCCCCC"> can look</font>

1017
00:41:16,640 --> 00:41:21,259
across<font color="#E5E5E5"> a whole bunch of</font><font color="#CCCCCC"> machines and try</font>

1018
00:41:18,890 --> 00:41:23,420
and spot anything<font color="#E5E5E5"> that stands out you</font>

1019
00:41:21,260 --> 00:41:25,100
<font color="#CCCCCC">would bear off to you know</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

1020
00:41:23,420 --> 00:41:29,810
detect things<font color="#E5E5E5"> and that maybe shouldn't</font>

1021
00:41:25,100 --> 00:41:32,150
be there<font color="#E5E5E5"> so</font><font color="#CCCCCC"> one example</font><font color="#E5E5E5"> of that</font>

1022
00:41:29,810 --> 00:41:34,460
<font color="#E5E5E5">least frequency analysis if we've got</font>

1023
00:41:32,150 --> 00:41:36,980
<font color="#CCCCCC">100 hosts and only one of them hasn't</font>

1024
00:41:34,460 --> 00:41:38,900
injected thread inside of it<font color="#E5E5E5"> then I know</font>

1025
00:41:36,980 --> 00:41:40,720
<font color="#E5E5E5">it is it's bad if you've got</font><font color="#CCCCCC"> 100,000</font>

1026
00:41:38,900 --> 00:41:43,130
hosts and only one process has it

1027
00:41:40,720 --> 00:41:45,169
injected<font color="#E5E5E5"> inside of it you know again</font>

1028
00:41:43,130 --> 00:41:48,470
<font color="#E5E5E5">pretty indicative because it would be</font>

1029
00:41:45,170 --> 00:41:50,390
advanced and but also this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very much</font>

1030
00:41:48,470 --> 00:41:52,700
a<font color="#CCCCCC"> behavior focused technique of</font>

1031
00:41:50,390 --> 00:41:54,620
detecting stuff so we're not relying on

1032
00:41:52,700 --> 00:41:56,779
<font color="#E5E5E5">on signatures and so what that brings</font>

1033
00:41:54,620 --> 00:41:58,670
<font color="#E5E5E5">about is yes we potentially are going to</font>

1034
00:41:56,780 --> 00:42:01,460
get false positives<font color="#CCCCCC"> things may be good</font>

1035
00:41:58,670 --> 00:42:04,160
<font color="#E5E5E5">they might be bad they're not</font><font color="#CCCCCC"> always</font>

1036
00:42:01,460 --> 00:42:05,809
going to<font color="#E5E5E5"> be malicious but we are able</font><font color="#CCCCCC"> to</font>

1037
00:42:04,160 --> 00:42:07,910
detect new things that we've made

1038
00:42:05,809 --> 00:42:09,890
maybe not see before<font color="#CCCCCC"> and so with that we</font>

1039
00:42:07,910 --> 00:42:11,868
<font color="#E5E5E5">can</font><font color="#CCCCCC"> then drive that back</font><font color="#E5E5E5"> looking back</font><font color="#CCCCCC"> to</font>

1040
00:42:09,890 --> 00:42:13,879
the<font color="#E5E5E5"> beginning of the automation versus</font>

1041
00:42:11,869 --> 00:42:15,589
<font color="#E5E5E5">manual process drive that back as the</font>

1042
00:42:13,880 --> 00:42:18,609
automation<font color="#E5E5E5"> so that next</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> we can pick</font>

1043
00:42:15,589 --> 00:42:21,859
things up so this<font color="#E5E5E5"> is one of our</font>

1044
00:42:18,609 --> 00:42:24,709
dashboards<font color="#E5E5E5"> and we've got one host here</font>

1045
00:42:21,859 --> 00:42:29,598
that has a<font color="#E5E5E5"> number of injected</font><font color="#CCCCCC"> delouse</font>

1046
00:42:24,709 --> 00:42:30,979
and<font color="#E5E5E5"> into call system 32 processes and if</font>

1047
00:42:29,599 --> 00:42:32,599
you were to look across the<font color="#CCCCCC"> estate and</font>

1048
00:42:30,979 --> 00:42:34,578
<font color="#E5E5E5">you've only got one host that seems to</font>

1049
00:42:32,599 --> 00:42:37,189
have these injected<font color="#CCCCCC"> a louse likelihood</font>

1050
00:42:34,579 --> 00:42:39,589
is that's<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> very bad and it</font>

1051
00:42:37,189 --> 00:42:41,989
<font color="#E5E5E5">doesn't necessarily</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> that it is bad</font>

1052
00:42:39,589 --> 00:42:43,788
<font color="#E5E5E5">and but it's definitely worth</font>

1053
00:42:41,989 --> 00:42:44,449
<font color="#E5E5E5">investigating</font><font color="#CCCCCC"> I want to know exactly</font>

1054
00:42:43,789 --> 00:42:46,369
<font color="#CCCCCC">what it is</font>

1055
00:42:44,449 --> 00:42:48,259
we couldn't unlink that back to

1056
00:42:46,369 --> 00:42:52,309
determine you know<font color="#E5E5E5"> next</font><font color="#CCCCCC"> time we</font><font color="#E5E5E5"> can pick</font>

1057
00:42:48,259 --> 00:42:54,829
it<font color="#CCCCCC"> up if we</font><font color="#E5E5E5"> want to or not and</font><font color="#CCCCCC"> so this</font>

1058
00:42:52,309 --> 00:42:57,650
is<font color="#E5E5E5"> just a kind of</font><font color="#CCCCCC"> example of how we then</font>

1059
00:42:54,829 --> 00:43:00,410
push that back<font color="#E5E5E5"> into automation and so we</font>

1060
00:42:57,650 --> 00:43:02,150
can look for indicators<font color="#E5E5E5"> of reflective</font>

1061
00:43:00,410 --> 00:43:03,649
loads that<font color="#E5E5E5"> are specific to</font><font color="#CCCCCC"> Metasploit</font>

1062
00:43:02,150 --> 00:43:05,930
and this is the client<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> on</font>

1063
00:43:03,650 --> 00:43:08,329
<font color="#E5E5E5">boarded just this month and we were able</font>

1064
00:43:05,930 --> 00:43:11,448
<font color="#E5E5E5">to pick up historic confections that had</font>

1065
00:43:08,329 --> 00:43:13,939
predated our installation by<font color="#E5E5E5"> being able</font>

1066
00:43:11,449 --> 00:43:18,469
to detect<font color="#CCCCCC"> Metasploit related processes</font>

1067
00:43:13,939 --> 00:43:21,410
that<font color="#E5E5E5"> maybe died with very little very</font>

1068
00:43:18,469 --> 00:43:23,380
<font color="#CCCCCC">little difficulty and then from there we</font>

1069
00:43:21,410 --> 00:43:30,308
were able to<font color="#E5E5E5"> then continue searching for</font>

1070
00:43:23,380 --> 00:43:33,559
<font color="#E5E5E5">anything more so just</font><font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of sum</font><font color="#CCCCCC"> all</font>

1071
00:43:30,309 --> 00:43:37,400
as a<font color="#CCCCCC"> con and so we've kind of covered</font>

1072
00:43:33,559 --> 00:43:39,229
the<font color="#E5E5E5"> concepts of fretting and so</font><font color="#CCCCCC"> these</font>

1073
00:43:37,400 --> 00:43:42,199
difference between kind<font color="#E5E5E5"> of a more manual</font>

1074
00:43:39,229 --> 00:43:45,229
and traditional based detection<font color="#E5E5E5"> and we</font>

1075
00:43:42,199 --> 00:43:47,569
covered some<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the concepts of Windows</font>

1076
00:43:45,229 --> 00:43:49,249
OS internals and<font color="#E5E5E5"> anyone interested in</font>

1077
00:43:47,569 --> 00:43:51,380
finding<font color="#E5E5E5"> out</font><font color="#CCCCCC"> more about that</font><font color="#E5E5E5"> check out</font>

1078
00:43:49,249 --> 00:43:54,229
<font color="#E5E5E5">the art of memory forensics or Windows</font>

1079
00:43:51,380 --> 00:43:56,209
internals<font color="#CCCCCC"> part once attitude and we've</font>

1080
00:43:54,229 --> 00:43:57,828
covered some of<font color="#E5E5E5"> the concepts of di</font>

1081
00:43:56,209 --> 00:43:59,509
injection<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> specifically how they</font>

1082
00:43:57,829 --> 00:44:02,420
relate to<font color="#CCCCCC"> kill strike</font><font color="#E5E5E5"> and the</font>

1083
00:43:59,509 --> 00:44:05,390
temperature memory<font color="#CCCCCC"> and then also how to</font>

1084
00:44:02,420 --> 00:44:10,189
detect these behaviors<font color="#CCCCCC"> and the benefits</font>

1085
00:44:05,390 --> 00:44:12,379
of performing them<font color="#E5E5E5"> at</font><font color="#CCCCCC"> scale so if there</font>

1086
00:44:10,189 --> 00:44:15,348
is<font color="#E5E5E5"> hopefully one takeaway from this</font>

1087
00:44:12,380 --> 00:44:17,089
presentation<font color="#E5E5E5"> it's that there's been</font><font color="#CCCCCC"> no</font>

1088
00:44:15,349 --> 00:44:19,039
<font color="#E5E5E5">love research and a lot</font><font color="#CCCCCC"> of publishing</font><font color="#E5E5E5"> of</font>

1089
00:44:17,089 --> 00:44:19,430
<font color="#E5E5E5">new attack frameworks like how</font><font color="#CCCCCC"> I show</font>

1090
00:44:19,039 --> 00:44:22,550
Empire

1091
00:44:19,430 --> 00:44:23,569
<font color="#CCCCCC">load codebook strike and I think</font>

1092
00:44:22,550 --> 00:44:26,180
<font color="#CCCCCC">hopefully if something we stressed today</font>

1093
00:44:23,569 --> 00:44:28,130
is that<font color="#E5E5E5"> all these techniques and indeed</font>

1094
00:44:26,180 --> 00:44:30,589
a<font color="#E5E5E5"> lot of horrible malware families as</font>

1095
00:44:28,130 --> 00:44:32,079
well<font color="#CCCCCC"> all are still</font><font color="#E5E5E5"> using techniques that</font>

1096
00:44:30,589 --> 00:44:34,549
meterpreter<font color="#CCCCCC"> has been using</font><font color="#E5E5E5"> for a decade</font>

1097
00:44:32,079 --> 00:44:36,020
<font color="#E5E5E5">they they aren't stealthy if you know</font>

1098
00:44:34,550 --> 00:44:38,750
the techniques<font color="#CCCCCC"> and you can utilize them</font>

1099
00:44:36,020 --> 00:44:40,280
at scale and often<font color="#E5E5E5"> as</font><font color="#CCCCCC"> massive the real</font>

1100
00:44:38,750 --> 00:44:42,140
power comes<font color="#E5E5E5"> if you run this</font><font color="#CCCCCC"> across</font>

1101
00:44:40,280 --> 00:44:43,520
thousands<font color="#E5E5E5"> of endpoints</font><font color="#CCCCCC"> then you have the</font>

1102
00:44:42,140 --> 00:44:45,980
power that he genuinely<font color="#E5E5E5"> new and</font>

1103
00:44:43,520 --> 00:44:49,480
interesting stuff<font color="#E5E5E5"> and you can see it and</font>

1104
00:44:45,980 --> 00:44:49,480
<font color="#E5E5E5">defend your enterprise against it</font>

1105
00:44:50,500 --> 00:45:11,960
<font color="#E5E5E5">questions I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> sometimes they</font>

1106
00:45:08,569 --> 00:45:13,849
signature specific bit so it depends on

1107
00:45:11,960 --> 00:45:15,290
how<font color="#E5E5E5"> the</font><font color="#CCCCCC"> stager is like formula and stuff</font>

1108
00:45:13,849 --> 00:45:17,359
<font color="#E5E5E5">in</font><font color="#CCCCCC"> you'd you'd have to look at how</font>

1109
00:45:15,290 --> 00:45:19,099
meterpreter generates it because it will

1110
00:45:17,359 --> 00:45:23,150
<font color="#E5E5E5">utilize the stages often they use</font>

1111
00:45:19,099 --> 00:45:25,520
<font color="#CCCCCC">certain methods to identify Windows API</font>

1112
00:45:23,150 --> 00:45:26,990
<font color="#E5E5E5">calls essentially and they often</font>

1113
00:45:25,520 --> 00:45:29,030
signature I think the framework<font color="#E5E5E5"> around</font>

1114
00:45:26,990 --> 00:45:31,700
it but if you<font color="#E5E5E5"> change stuff centrally it</font>

1115
00:45:29,030 --> 00:45:34,369
<font color="#CCCCCC">may be confer it off I</font><font color="#E5E5E5"> have to say I</font>

1116
00:45:31,700 --> 00:45:35,750
think I think they're a bit hit and miss

1117
00:45:34,369 --> 00:45:37,640
<font color="#E5E5E5">I think they've got better at detecting</font>

1118
00:45:35,750 --> 00:45:39,020
stages the problem is if you<font color="#E5E5E5"> get your</font>

1119
00:45:37,640 --> 00:45:40,549
stage<font color="#CCCCCC"> at you know if you're if you're</font>

1120
00:45:39,020 --> 00:45:42,950
<font color="#CCCCCC">reading an organization if you</font><font color="#E5E5E5"> get your</font>

1121
00:45:40,549 --> 00:45:44,480
<font color="#E5E5E5">stager through their mail filter and the</font>

1122
00:45:42,950 --> 00:45:47,450
user clicks on<font color="#E5E5E5"> it once it's in memory</font>

1123
00:45:44,480 --> 00:45:49,130
<font color="#E5E5E5">like it will not find it basically so I</font>

1124
00:45:47,450 --> 00:45:50,990
suppose it pushes the pressure on

1125
00:45:49,130 --> 00:45:52,369
finding good methods to detect it<font color="#CCCCCC"> I</font>

1126
00:45:50,990 --> 00:45:54,589
think it's a bit<font color="#E5E5E5"> hit and miss</font><font color="#CCCCCC"> I'm it</font>

1127
00:45:52,369 --> 00:45:56,900
yeah<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think they're getting better but</font>

1128
00:45:54,589 --> 00:45:58,640
again<font color="#E5E5E5"> it's it's quite easy to obfuscate</font>

1129
00:45:56,900 --> 00:46:01,220
things and make it<font color="#CCCCCC"> more complicated</font><font color="#E5E5E5"> as</font>

1130
00:45:58,640 --> 00:46:03,558
well<font color="#CCCCCC"> I just</font><font color="#E5E5E5"> follow that off</font><font color="#CCCCCC"> by saying</font>

1131
00:46:01,220 --> 00:46:05,839
the frameworks are often being updated

1132
00:46:03,559 --> 00:46:09,380
<font color="#CCCCCC">so I updated kind of the</font><font color="#E5E5E5"> other day and</font>

1133
00:46:05,839 --> 00:46:12,380
massive was another<font color="#E5E5E5"> 20k additional in</font>

1134
00:46:09,380 --> 00:46:14,180
size and quite a lot<font color="#CCCCCC"> of changed and so</font>

1135
00:46:12,380 --> 00:46:16,099
if you're basing<font color="#CCCCCC"> it on Seavers detection</font>

1136
00:46:14,180 --> 00:46:17,450
which a lot of<font color="#CCCCCC"> Amy's are and then it</font>

1137
00:46:16,099 --> 00:46:23,710
just<font color="#E5E5E5"> makes</font><font color="#CCCCCC"> that bit</font><font color="#E5E5E5"> more difficult to</font>

1138
00:46:17,450 --> 00:46:23,710
pick up any<font color="#E5E5E5"> other questions</font>

1139
00:46:33,430 --> 00:46:39,350
<font color="#E5E5E5">okay so they we were primarily the</font>

1140
00:46:36,920 --> 00:46:41,300
program was specifically<font color="#E5E5E5"> searching for</font>

1141
00:46:39,350 --> 00:46:43,670
the concepts<font color="#E5E5E5"> of the presence of</font>

1142
00:46:41,300 --> 00:46:46,640
<font color="#CCCCCC">reflectively loading dll's and threads</font>

1143
00:46:43,670 --> 00:46:48,230
and so it depends on<font color="#E5E5E5"> how</font><font color="#CCCCCC"> you looked</font><font color="#E5E5E5"> at</font>

1144
00:46:46,640 --> 00:46:50,870
<font color="#E5E5E5">it they are false positives</font><font color="#CCCCCC"> or maybe</font>

1145
00:46:48,230 --> 00:46:51,830
they're<font color="#E5E5E5"> not and so for example</font><font color="#CCCCCC"> we we</font>

1146
00:46:50,870 --> 00:46:54,560
found<font color="#CCCCCC"> some</font><font color="#E5E5E5"> stuff the</font><font color="#CCCCCC"> other day that</font>

1147
00:46:51,830 --> 00:46:56,360
linked back to<font color="#E5E5E5"> an Nvidia driver and now</font>

1148
00:46:54,560 --> 00:46:58,580
that was<font color="#E5E5E5"> kind of injecting and</font>

1149
00:46:56,360 --> 00:47:01,340
manipulating some codes<font color="#E5E5E5"> in memory yeah</font>

1150
00:46:58,580 --> 00:47:02,990
we work we don't use<font color="#E5E5E5"> that as an alerting</font>

1151
00:47:01,340 --> 00:47:04,700
technique we use that as a<font color="#E5E5E5"> hunting</font>

1152
00:47:02,990 --> 00:47:07,100
technique<font color="#E5E5E5"> so we're actually then able</font><font color="#CCCCCC"> to</font>

1153
00:47:04,700 --> 00:47:08,720
<font color="#E5E5E5">investigate each of these</font><font color="#CCCCCC"> cases and it</font>

1154
00:47:07,100 --> 00:47:10,339
drive that<font color="#E5E5E5"> back then if we know what it</font>

1155
00:47:08,720 --> 00:47:12,230
<font color="#CCCCCC">is it's malicious we could have lit on</font>

1156
00:47:10,340 --> 00:47:13,490
it in the future<font color="#CCCCCC"> and if it's not we can</font>

1157
00:47:12,230 --> 00:47:16,160
then filter it<font color="#E5E5E5"> out so it</font><font color="#CCCCCC"> doesn't come</font>

1158
00:47:13,490 --> 00:47:18,080
back but<font color="#E5E5E5"> it means that we pick up you</font>

1159
00:47:16,160 --> 00:47:20,899
<font color="#E5E5E5">know interesting offensive stuff on</font><font color="#CCCCCC"> one</font>

1160
00:47:18,080 --> 00:47:22,910
side<font color="#E5E5E5"> of things and also naughty and kind</font>

1161
00:47:20,900 --> 00:47:26,150
<font color="#E5E5E5">of bad driver stuff on us out of it</font>

1162
00:47:22,910 --> 00:47:28,279
ironically<font color="#CCCCCC"> AV often does stuff that</font>

1163
00:47:26,150 --> 00:47:29,300
<font color="#E5E5E5">looks very malicious when you look at it</font>

1164
00:47:28,280 --> 00:47:30,890
in<font color="#E5E5E5"> fact it's the</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> thing that</font>

1165
00:47:29,300 --> 00:47:31,910
consistently does weird<font color="#CCCCCC"> stuff and</font><font color="#E5E5E5"> you're</font>

1166
00:47:30,890 --> 00:47:34,759
like<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> oh</font><font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> my</font>

1167
00:47:31,910 --> 00:47:45,950
character<font color="#E5E5E5"> I think so yes it's just a</font>

1168
00:47:34,760 --> 00:47:48,140
<font color="#CCCCCC">judgment</font><font color="#E5E5E5"> I think as well definitely not</font>

1169
00:47:45,950 --> 00:47:51,140
so the whole<font color="#E5E5E5"> you know you can search</font><font color="#CCCCCC"> for</font>

1170
00:47:48,140 --> 00:47:52,629
the indicators<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> for the tenants</font>

1171
00:47:51,140 --> 00:47:55,220
<font color="#CCCCCC">that we've discussed but actually the</font>

1172
00:47:52,630 --> 00:47:56,720
strength is<font color="#E5E5E5"> actually then taking what</font>

1173
00:47:55,220 --> 00:47:58,609
<font color="#CCCCCC">you you've seen and actually</font><font color="#E5E5E5"> being able</font>

1174
00:47:56,720 --> 00:48:01,459
<font color="#E5E5E5">to dig into it you know is this a return</font>

1175
00:47:58,610 --> 00:48:03,080
<font color="#E5E5E5">session</font><font color="#CCCCCC"> or is</font><font color="#E5E5E5"> it something else</font><font color="#CCCCCC"> and so</font>

1176
00:48:01,460 --> 00:48:05,300
to actually get to a<font color="#CCCCCC"> point where</font><font color="#E5E5E5"> that is</font>

1177
00:48:03,080 --> 00:48:06,770
<font color="#E5E5E5">fully automated through whatever methods</font>

1178
00:48:05,300 --> 00:48:10,850
<font color="#E5E5E5">and it's probably</font><font color="#CCCCCC"> gonna take some time</font>

1179
00:48:06,770 --> 00:48:20,060
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get to that</font><font color="#E5E5E5"> stage so</font><font color="#CCCCCC"> AV is it dead</font>

1180
00:48:10,850 --> 00:48:22,250
just yeah or any other questions cool

1181
00:48:20,060 --> 00:48:24,310
thank you

1182
00:48:22,250 --> 00:48:24,310
you

