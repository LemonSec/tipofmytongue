1
00:00:00,000 --> 00:00:03,419
our joint good morning everyone uh yeah

2
00:00:03,419 --> 00:00:05,220
welcome this talk uh we're going to talk

3
00:00:05,220 --> 00:00:07,500
about spec driven research for Fun and

4
00:00:07,500 --> 00:00:09,660
Profit this is just something an idea I

5
00:00:09,660 --> 00:00:11,219
came up with when I was doing some

6
00:00:11,219 --> 00:00:13,200
research it was based on reading specs

7
00:00:13,200 --> 00:00:15,540
and standards if you've used it systems

8
00:00:15,540 --> 00:00:17,760
you've used standard based systems and

9
00:00:17,760 --> 00:00:19,199
pretty much the entire web runs on

10
00:00:19,199 --> 00:00:20,760
standards so it's kind of an interesting

11
00:00:20,760 --> 00:00:22,380
area and I think one that people can

12
00:00:22,380 --> 00:00:24,000
dive into in terms of you think of it

13
00:00:24,000 --> 00:00:26,460
what research you want to do next uh

14
00:00:26,460 --> 00:00:28,320
probably started very very about me um

15
00:00:28,320 --> 00:00:30,240
I've been in I.T and English security

16
00:00:30,240 --> 00:00:32,700
for a bit over 20 years now

17
00:00:32,700 --> 00:00:34,920
um uh I've been testing grizzla things

18
00:00:34,920 --> 00:00:37,440
these days I am a senior security

19
00:00:37,440 --> 00:00:39,420
advocate for a company called datadog if

20
00:00:39,420 --> 00:00:41,040
you've never heard of us we are a SAS

21
00:00:41,040 --> 00:00:42,780
based provider of monitoring

22
00:00:42,780 --> 00:00:45,480
observability and security so this talk

23
00:00:45,480 --> 00:00:46,860
is not about their job people want to

24
00:00:46,860 --> 00:00:47,879
talk about that sort of thing afterwards

25
00:00:47,879 --> 00:00:50,219
happy to do so I generally focus on

26
00:00:50,219 --> 00:00:52,620
container security I don't see any of my

27
00:00:52,620 --> 00:00:55,260
talks in the past probably realizes this

28
00:00:55,260 --> 00:00:57,000
um Docker kubernetes that kind of thing

29
00:00:57,000 --> 00:00:58,559
and I have had the opportunity to

30
00:00:58,559 --> 00:01:00,239
present at a reasonable number of

31
00:01:00,239 --> 00:01:02,760
Securities uh I looked up by my desk I

32
00:01:02,760 --> 00:01:05,099
bought my lanyards uh I got there left

33
00:01:05,099 --> 00:01:07,680
one of the front Securities one 2011 uh

34
00:01:07,680 --> 00:01:09,240
and then the security two to three and

35
00:01:09,240 --> 00:01:12,000
the 2018 one so I think I'm not quite

36
00:01:12,000 --> 00:01:14,159
spoken the most Securities of anyone but

37
00:01:14,159 --> 00:01:17,880
uh Graham used to beat people here so I

38
00:01:17,880 --> 00:01:19,619
get one up on them so I might get my

39
00:01:19,619 --> 00:01:21,600
title back anyway let's get on with the

40
00:01:21,600 --> 00:01:23,420
top so

41
00:01:23,420 --> 00:01:25,799
why why are we interested in specs and

42
00:01:25,799 --> 00:01:27,360
standards why is this something we want

43
00:01:27,360 --> 00:01:29,159
to know about well pretty much the

44
00:01:29,159 --> 00:01:30,600
entire internet and various other

45
00:01:30,600 --> 00:01:32,939
systems run on standards these things

46
00:01:32,939 --> 00:01:34,799
are decided by

47
00:01:34,799 --> 00:01:37,200
um when a new area of Technology comes

48
00:01:37,200 --> 00:01:39,180
along and vendors are getting involved

49
00:01:39,180 --> 00:01:41,100
in it they start thinking well we want

50
00:01:41,100 --> 00:01:42,659
to our systems both to talk to each

51
00:01:42,659 --> 00:01:44,159
other right we want everyone to be able

52
00:01:44,159 --> 00:01:46,200
to interoperate to do this we need to

53
00:01:46,200 --> 00:01:48,840
agree how we're going to handle data

54
00:01:48,840 --> 00:01:51,600
processes protocols so they come up with

55
00:01:51,600 --> 00:01:53,700
a standard uh the standard bodies

56
00:01:53,700 --> 00:01:55,079
there's lots of them depending on the

57
00:01:55,079 --> 00:01:56,820
area of Technology we'll typically say

58
00:01:56,820 --> 00:01:58,740
okay there's a new area of Technology we

59
00:01:58,740 --> 00:02:01,079
need a standard for this let's get

60
00:02:01,079 --> 00:02:03,720
ongoing the reason why in addition to

61
00:02:03,720 --> 00:02:06,000
like kind of obviously altruistic we

62
00:02:06,000 --> 00:02:08,280
want to work together big companies big

63
00:02:08,280 --> 00:02:10,199
end users of Technology like standards

64
00:02:10,199 --> 00:02:11,879
right this is Dreadful Theory

65
00:02:11,879 --> 00:02:13,440
Enterprises what's called vendor lock-in

66
00:02:13,440 --> 00:02:15,000
so I buy something for one company

67
00:02:15,000 --> 00:02:17,160
they're the only people that make it and

68
00:02:17,160 --> 00:02:18,599
then if I ever want to leave I'm in

69
00:02:18,599 --> 00:02:20,099
trouble I'm the contract negotiations

70
00:02:20,099 --> 00:02:22,200
come around next year they know they've

71
00:02:22,200 --> 00:02:24,480
got you because you can't move so end

72
00:02:24,480 --> 00:02:26,160
user companies like standard based Tech

73
00:02:26,160 --> 00:02:27,720
because they hopefully don't have that

74
00:02:27,720 --> 00:02:29,580
login they can move to anyone else who

75
00:02:29,580 --> 00:02:31,620
implements the same standard so there's

76
00:02:31,620 --> 00:02:33,720
a good reason for this to happen

77
00:02:33,720 --> 00:02:34,739
um the other thing is typically

78
00:02:34,739 --> 00:02:36,180
sometimes when a technology becomes

79
00:02:36,180 --> 00:02:38,099
popular maybe some vendor starts

80
00:02:38,099 --> 00:02:39,420
something right and everything takes off

81
00:02:39,420 --> 00:02:41,099
and everyone's happy they go well after

82
00:02:41,099 --> 00:02:42,420
a while people are going to trust others

83
00:02:42,420 --> 00:02:44,340
it's just our Tech so we'll donate our

84
00:02:44,340 --> 00:02:46,080
technology to a standards body so you'll

85
00:02:46,080 --> 00:02:47,940
see a lot of people when it's their kind

86
00:02:47,940 --> 00:02:49,860
of early adopters they donate their work

87
00:02:49,860 --> 00:02:51,660
to stand with bodies who then carry on

88
00:02:51,660 --> 00:02:54,480
and when you have a standard you need a

89
00:02:54,480 --> 00:02:56,220
specification you need something

90
00:02:56,220 --> 00:02:58,019
detailed low level that everyone can

91
00:02:58,019 --> 00:02:59,400
read and go okay I understand how

92
00:02:59,400 --> 00:03:01,800
Implement worker in here I will be able

93
00:03:01,800 --> 00:03:03,540
to interoperate with everyone else who's

94
00:03:03,540 --> 00:03:04,920
done the same thing

95
00:03:04,920 --> 00:03:06,780
so that's kind of where specs and

96
00:03:06,780 --> 00:03:08,819
standards tend to come from

97
00:03:08,819 --> 00:03:10,620
um so how do these things get written

98
00:03:10,620 --> 00:03:13,440
right how do I get from we have this

99
00:03:13,440 --> 00:03:15,900
idea of a standard to a detailed spec

100
00:03:15,900 --> 00:03:18,239
and typically and I want to generalize a

101
00:03:18,239 --> 00:03:19,200
little bit here

102
00:03:19,200 --> 00:03:21,300
um typically this is done by lots of

103
00:03:21,300 --> 00:03:23,220
people seeing your kind of I.T architect

104
00:03:23,220 --> 00:03:26,040
types for big companies and Academia who

105
00:03:26,040 --> 00:03:28,080
get together into a committee and sit

106
00:03:28,080 --> 00:03:30,900
down for lots of time writing document

107
00:03:30,900 --> 00:03:32,580
and if you think about what their

108
00:03:32,580 --> 00:03:33,959
interests are you start to get an idea

109
00:03:33,959 --> 00:03:35,220
of where we might have some fun from

110
00:03:35,220 --> 00:03:37,440
security perspective all of these

111
00:03:37,440 --> 00:03:40,500
companies want to make sure that in the

112
00:03:40,500 --> 00:03:41,940
standards everything they need for their

113
00:03:41,940 --> 00:03:43,620
software to work so there's lots of

114
00:03:43,620 --> 00:03:45,180
incentives for them to put more things

115
00:03:45,180 --> 00:03:47,519
into the standard more use cases because

116
00:03:47,519 --> 00:03:49,379
they've all got complex big customers

117
00:03:49,379 --> 00:03:51,480
with complex big use cases and they want

118
00:03:51,480 --> 00:03:52,980
the standard to reflect all of the

119
00:03:52,980 --> 00:03:55,680
things that they want to do right so

120
00:03:55,680 --> 00:03:58,260
this tends to lead to standards

121
00:03:58,260 --> 00:04:00,420
everyone's have a red standard you kind

122
00:04:00,420 --> 00:04:01,860
of with the idea there's a lot of kind

123
00:04:01,860 --> 00:04:03,239
of complex stuff in there and that's why

124
00:04:03,239 --> 00:04:04,620
it happens because there's a lot of

125
00:04:04,620 --> 00:04:06,000
interesting people making these things

126
00:04:06,000 --> 00:04:07,739
big and worthy and covering every

127
00:04:07,739 --> 00:04:09,959
possible use case so they tend to be

128
00:04:09,959 --> 00:04:11,700
bigger rather than smaller

129
00:04:11,700 --> 00:04:14,340
so that starts to get the idea might be

130
00:04:14,340 --> 00:04:16,380
interested so I'll give an example just

131
00:04:16,380 --> 00:04:17,519
gonna make this a bit real that was a

132
00:04:17,519 --> 00:04:18,959
little bit abstract

133
00:04:18,959 --> 00:04:20,220
um I'll talk a little bit about a thing

134
00:04:20,220 --> 00:04:22,079
called saml uh if you're in Enterprise

135
00:04:22,079 --> 00:04:24,000
I.T or if you ever use an Enterprise I.T

136
00:04:24,000 --> 00:04:25,979
system you will have come across saml

137
00:04:25,979 --> 00:04:28,620
security assertion markup language the

138
00:04:28,620 --> 00:04:30,600
idea of this is it allows authentication

139
00:04:30,600 --> 00:04:33,180
providers to talk to web applications in

140
00:04:33,180 --> 00:04:35,160
a way say here is the credentials for

141
00:04:35,160 --> 00:04:36,900
this user you can believe them when they

142
00:04:36,900 --> 00:04:38,580
say they are who they say they are and

143
00:04:38,580 --> 00:04:40,860
log them in and the idea is that lots of

144
00:04:40,860 --> 00:04:42,000
different systems can talk to each other

145
00:04:42,000 --> 00:04:44,240
using Samo

146
00:04:44,240 --> 00:04:47,639
it came up in the mid 2000s as a spec

147
00:04:47,639 --> 00:04:49,259
and it's all written in XML because back

148
00:04:49,259 --> 00:04:50,699
in the mid-2000s everyone thought

149
00:04:50,699 --> 00:04:52,500
everything should be XML luckily we

150
00:04:52,500 --> 00:04:53,940
don't do that anymore

151
00:04:53,940 --> 00:04:55,740
um but it's still there right and I use

152
00:04:55,740 --> 00:04:57,780
some other day right uh I I've used

153
00:04:57,780 --> 00:04:59,160
Google as my identity provider every

154
00:04:59,160 --> 00:05:00,720
system I log into tends to be log into

155
00:05:00,720 --> 00:05:02,160
your Samos it's a very heavily used

156
00:05:02,160 --> 00:05:04,020
piece of tech

157
00:05:04,020 --> 00:05:07,080
um and Samuel well this is a spec right

158
00:05:07,080 --> 00:05:09,840
the spec is an 86 pages long uh this is

159
00:05:09,840 --> 00:05:12,500
one section of the specs actually

160
00:05:12,500 --> 00:05:14,580
2.4.1.3 I'm not going to try and go

161
00:05:14,580 --> 00:05:17,280
through this the idea is to give you an

162
00:05:17,280 --> 00:05:19,139
idea that this stuff gets a bit

163
00:05:19,139 --> 00:05:21,600
complicated that's one second now

164
00:05:21,600 --> 00:05:23,759
imagine you're a developer you have been

165
00:05:23,759 --> 00:05:25,259
tasked with writing a saml

166
00:05:25,259 --> 00:05:27,539
implementation and you have to make sure

167
00:05:27,539 --> 00:05:29,759
that it does exactly what spec says you

168
00:05:29,759 --> 00:05:32,520
have created pages of that record code

169
00:05:32,520 --> 00:05:35,220
that works exactly as that spec says it

170
00:05:35,220 --> 00:05:37,520
should work

171
00:05:39,080 --> 00:05:41,280
no one would ever want to do this but

172
00:05:41,280 --> 00:05:42,900
this is interesting from our point of

173
00:05:42,900 --> 00:05:46,259
view because of

174
00:05:46,259 --> 00:05:48,120
there's lots of security truisms out

175
00:05:48,120 --> 00:05:49,860
there I don't actually subscribe to all

176
00:05:49,860 --> 00:05:52,500
of them but I do subscribe to this one

177
00:05:52,500 --> 00:05:55,259
um me I'm also people complexity is the

178
00:05:55,259 --> 00:05:58,560
enemy of security the more complex a

179
00:05:58,560 --> 00:06:01,320
system is the less likely it is to be

180
00:06:01,320 --> 00:06:04,080
secure the reason is imagine I'm

181
00:06:04,080 --> 00:06:05,220
guessing some people have written

182
00:06:05,220 --> 00:06:06,960
programming code before when you write

183
00:06:06,960 --> 00:06:08,699
code you're trying to keep in your head

184
00:06:08,699 --> 00:06:11,160
what are what's my code flow what's all

185
00:06:11,160 --> 00:06:12,660
the data going in and out what are all

186
00:06:12,660 --> 00:06:15,539
the formats the more complex it is the

187
00:06:15,539 --> 00:06:16,979
harder it is for you to keep that in

188
00:06:16,979 --> 00:06:19,139
your head so the more complex you are

189
00:06:19,139 --> 00:06:20,820
you're going to make mistakes things are

190
00:06:20,820 --> 00:06:22,800
going to leave creep leap through the

191
00:06:22,800 --> 00:06:24,780
cracks you're going to end up potential

192
00:06:24,780 --> 00:06:26,220
security problems and then you imagine

193
00:06:26,220 --> 00:06:28,560
being someone implementing this and

194
00:06:28,560 --> 00:06:30,419
going there's absolutely no chance that

195
00:06:30,419 --> 00:06:31,800
any one person is going to keep on their

196
00:06:31,800 --> 00:06:33,120
head all the time so you'd have big

197
00:06:33,120 --> 00:06:34,740
teams doing this and when you're big

198
00:06:34,740 --> 00:06:36,240
teams then you have problems of Oh I

199
00:06:36,240 --> 00:06:37,620
thought this meant that oh I thought

200
00:06:37,620 --> 00:06:39,900
this meant this other thing great as a

201
00:06:39,900 --> 00:06:41,220
researcher I'm going well that's great

202
00:06:41,220 --> 00:06:42,960
because if you make mistakes you don't

203
00:06:42,960 --> 00:06:44,280
understand it there's opportunity for

204
00:06:44,280 --> 00:06:46,259
security people

205
00:06:46,259 --> 00:06:48,180
is very much the enemy of security and

206
00:06:48,180 --> 00:06:49,860
that's why I think specs are interested

207
00:06:49,860 --> 00:06:52,139
in perspects are complex Things based on

208
00:06:52,139 --> 00:06:53,699
specs are inevitably complicated

209
00:06:53,699 --> 00:06:55,860
therefore they're inevitably not secure

210
00:06:55,860 --> 00:06:58,639
as a rule

211
00:06:59,300 --> 00:07:01,919
and I said what is that did that turn

212
00:07:01,919 --> 00:07:05,100
out to be true in this case 247 cves say

213
00:07:05,100 --> 00:07:08,039
yes there are 247 CVS that mention the

214
00:07:08,039 --> 00:07:09,479
word Samo if you look through some of

215
00:07:09,479 --> 00:07:10,740
them they're typically implementation

216
00:07:10,740 --> 00:07:13,560
flows so some provider took us that

217
00:07:13,560 --> 00:07:15,660
tried to write code then limited and

218
00:07:15,660 --> 00:07:17,039
that's something

219
00:07:17,039 --> 00:07:19,500
I'm not surprised but from a research

220
00:07:19,500 --> 00:07:21,060
point of view that meant that 247

221
00:07:21,060 --> 00:07:23,160
researchers got an icv to their names

222
00:07:23,160 --> 00:07:24,720
and did some interesting research just

223
00:07:24,720 --> 00:07:27,720
by reading one specification

224
00:07:27,720 --> 00:07:29,160
um there's two types of flaws you get

225
00:07:29,160 --> 00:07:30,539
typically when you've been through some

226
00:07:30,539 --> 00:07:32,160
of these one is one of the art

227
00:07:32,160 --> 00:07:33,780
implementation mistake right so someone

228
00:07:33,780 --> 00:07:36,120
read this made a mistake fine you get

229
00:07:36,120 --> 00:07:37,440
above it the other ones which are

230
00:07:37,440 --> 00:07:39,000
interesting is think about the standard

231
00:07:39,000 --> 00:07:40,860
writing process a committee of people

232
00:07:40,860 --> 00:07:42,720
all got together and agreed that you

233
00:07:42,720 --> 00:07:45,060
think they got respect 100 right they

234
00:07:45,060 --> 00:07:46,680
didn't leave any edge cases that weren't

235
00:07:46,680 --> 00:07:48,500
accounted for they didn't leave any

236
00:07:48,500 --> 00:07:50,819
undecided variable bits the answer is no

237
00:07:50,819 --> 00:07:52,919
of course they did spec issues are even

238
00:07:52,919 --> 00:07:54,000
better but you get all the

239
00:07:54,000 --> 00:07:55,800
implementations at once so if there's

240
00:07:55,800 --> 00:07:57,060
something wrong with the spec I can go

241
00:07:57,060 --> 00:07:59,099
around and get bugs in every single

242
00:07:59,099 --> 00:08:01,139
um any implementation software his

243
00:08:01,139 --> 00:08:03,960
example 247 Series so it's fair to say

244
00:08:03,960 --> 00:08:06,660
this does happen

245
00:08:06,660 --> 00:08:08,699
um so that was kind of like the theory

246
00:08:08,699 --> 00:08:10,979
right the theory is are my idea of

247
00:08:10,979 --> 00:08:13,740
hypothesis is that specs lead to

248
00:08:13,740 --> 00:08:15,599
security flaws so let's look at a worked

249
00:08:15,599 --> 00:08:17,940
example of this uh and this is a really

250
00:08:17,940 --> 00:08:19,860
simplified kind of process that I went

251
00:08:19,860 --> 00:08:21,479
through when I was doing some research

252
00:08:21,479 --> 00:08:23,580
so

253
00:08:23,580 --> 00:08:25,020
I'm not a full-time researcher by the

254
00:08:25,020 --> 00:08:26,099
way this is more something I kind of do

255
00:08:26,099 --> 00:08:28,800
in my weekends I know

256
00:08:28,800 --> 00:08:30,780
um read investigation right first thing

257
00:08:30,780 --> 00:08:32,039
gotta read the spec work out what's

258
00:08:32,039 --> 00:08:34,380
going on find something interesting

259
00:08:34,380 --> 00:08:36,299
looking and I'll talk about how I find

260
00:08:36,299 --> 00:08:37,919
something interesting looking getting

261
00:08:37,919 --> 00:08:39,479
implementation so get software which

262
00:08:39,479 --> 00:08:40,919
implements the specification because

263
00:08:40,919 --> 00:08:41,940
that's kind of stuff that'll have the

264
00:08:41,940 --> 00:08:44,279
bugs in it run the experiment design it

265
00:08:44,279 --> 00:08:46,140
run it successfully you're back to the

266
00:08:46,140 --> 00:08:46,860
star

267
00:08:46,860 --> 00:08:49,500
pretty simple sub restart process so the

268
00:08:49,500 --> 00:08:50,760
way I did this the one I want to talk

269
00:08:50,760 --> 00:08:52,920
about is they call the open container

270
00:08:52,920 --> 00:08:55,500
initiative OCR so if you've used Docker

271
00:08:55,500 --> 00:08:56,700
you've used kubernetes you've used

272
00:08:56,700 --> 00:08:58,800
Codman use containers I guess most

273
00:08:58,800 --> 00:08:59,940
people at least use some level of

274
00:08:59,940 --> 00:09:02,220
containers they implement this thing uh

275
00:09:02,220 --> 00:09:04,440
you the specs written by oci these were

276
00:09:04,440 --> 00:09:06,420
one of the donated types so Docker wrote

277
00:09:06,420 --> 00:09:07,560
These specs in the early days of

278
00:09:07,560 --> 00:09:09,120
containers they then said well people

279
00:09:09,120 --> 00:09:10,740
won't adopt this stuff if it's just us

280
00:09:10,740 --> 00:09:12,060
because they'll be worried about vendor

281
00:09:12,060 --> 00:09:13,860
locking so they donated them to a body

282
00:09:13,860 --> 00:09:15,060
called the open container initiative

283
00:09:15,060 --> 00:09:16,980
agenda Linux foundation and they now

284
00:09:16,980 --> 00:09:19,320
manage develop and run these specs this

285
00:09:19,320 --> 00:09:21,300
three there's the image spec so when you

286
00:09:21,300 --> 00:09:23,399
pull a container image it's an OC part

287
00:09:23,399 --> 00:09:25,080
of the OCR image spec that's the format

288
00:09:25,080 --> 00:09:27,360
when you run it with Docker podman

289
00:09:27,360 --> 00:09:28,920
containerdy

290
00:09:28,920 --> 00:09:31,019
um that is runtime spec so anything

291
00:09:31,019 --> 00:09:33,000
which runs containers and then you pull

292
00:09:33,000 --> 00:09:34,920
it from Registries that are the oci

293
00:09:34,920 --> 00:09:37,740
registry square right so three specs

294
00:09:37,740 --> 00:09:39,720
I would look at the image spec right the

295
00:09:39,720 --> 00:09:41,700
image spec was first one I looked at

296
00:09:41,700 --> 00:09:43,320
um because well that's kind of easy I

297
00:09:43,320 --> 00:09:44,580
use a lot of container images let's have

298
00:09:44,580 --> 00:09:46,380
a look and see what the spec says so the

299
00:09:46,380 --> 00:09:47,459
first thing to do is read this effect

300
00:09:47,459 --> 00:09:49,440
luckily for me it's not 90 second pages

301
00:09:49,440 --> 00:09:50,940
long I'll be honest with you if it was I

302
00:09:50,940 --> 00:09:52,500
wouldn't have read it um it's more like

303
00:09:52,500 --> 00:09:54,360
a 15 20 pages so this one wasn't

304
00:09:54,360 --> 00:09:57,720
horrifically you know hard to look at

305
00:09:57,720 --> 00:09:59,459
um if you're starting doing this yeah

306
00:09:59,459 --> 00:10:01,080
simple specification don't do something

307
00:10:01,080 --> 00:10:02,760
with XML stuff because your head will

308
00:10:02,760 --> 00:10:04,019
explode

309
00:10:04,019 --> 00:10:06,060
um the modern stuff is a bit kind of

310
00:10:06,060 --> 00:10:08,160
nicer uh so I read the OCR image

311
00:10:08,160 --> 00:10:09,660
specification it's a fillable like

312
00:10:09,660 --> 00:10:11,160
pretty much all specs are available

313
00:10:11,160 --> 00:10:12,660
online because obviously you can't write

314
00:10:12,660 --> 00:10:13,860
implementations if you don't be

315
00:10:13,860 --> 00:10:15,180
respectively available so the

316
00:10:15,180 --> 00:10:16,920
information is always there for you to

317
00:10:16,920 --> 00:10:19,099
read

318
00:10:22,580 --> 00:10:25,140
is visualize what you're doing or I like

319
00:10:25,140 --> 00:10:26,220
to try and visualize what I'm

320
00:10:26,220 --> 00:10:28,019
researching I've read along document

321
00:10:28,019 --> 00:10:29,760
let's try and reach like this percentage

322
00:10:29,760 --> 00:10:31,200
all the different parts of container

323
00:10:31,200 --> 00:10:33,540
image and how the specification says

324
00:10:33,540 --> 00:10:36,180
they work right so it says an index

325
00:10:36,180 --> 00:10:38,580
contains one or more manifests which is

326
00:10:38,580 --> 00:10:40,320
obtained image manifest which contains

327
00:10:40,320 --> 00:10:43,880
config image layer of subjects

328
00:10:43,880 --> 00:10:45,959
where is something that could be

329
00:10:45,959 --> 00:10:47,399
interesting where do I think there's

330
00:10:47,399 --> 00:10:49,140
something which might be a bug or might

331
00:10:49,140 --> 00:10:50,279
have something interesting to play with

332
00:10:50,279 --> 00:10:53,459
from a security standpoint and I so I

333
00:10:53,459 --> 00:10:55,079
went to look for an interesting part

334
00:10:55,079 --> 00:10:56,700
I think before I came on was this

335
00:10:56,700 --> 00:10:59,220
scripture so I noticed there were lots

336
00:10:59,220 --> 00:11:01,380
of arrows all pointing at this one thing

337
00:11:01,380 --> 00:11:02,940
so I thought okay that's interesting

338
00:11:02,940 --> 00:11:04,740
because it's a used throughout image

339
00:11:04,740 --> 00:11:06,839
spec so let's hone in on that and I said

340
00:11:06,839 --> 00:11:08,519
what is a descriptor and it turns out

341
00:11:08,519 --> 00:11:10,019
when you're describing a container image

342
00:11:10,019 --> 00:11:12,600
that's oci format you everything is of

343
00:11:12,600 --> 00:11:14,399
type descriptor right so you can put

344
00:11:14,399 --> 00:11:16,140
anything which is part of the descriptor

345
00:11:16,140 --> 00:11:19,320
type into any part of the spec okay cool

346
00:11:19,320 --> 00:11:21,779
let's have a look at that so I looked

347
00:11:21,779 --> 00:11:22,740
through all the different things I can

348
00:11:22,740 --> 00:11:24,959
have in a descriptor and I said well

349
00:11:24,959 --> 00:11:29,279
what could I play with iPhone URLs now

350
00:11:29,279 --> 00:11:31,620
as soon as I saw URLs I then hit ah this

351
00:11:31,620 --> 00:11:33,600
is potentially very interesting one I'd

352
00:11:33,600 --> 00:11:35,940
never seen a URL in the container

353
00:11:35,940 --> 00:11:37,820
um I've looked at ever so that's weird

354
00:11:37,820 --> 00:11:40,680
uh two if I see URLs I think of a couple

355
00:11:40,680 --> 00:11:41,880
of things

356
00:11:41,880 --> 00:11:43,980
if it's a URL that means the systems

357
00:11:43,980 --> 00:11:45,300
might make net requests right because

358
00:11:45,300 --> 00:11:46,800
what are URLs there are things you

359
00:11:46,800 --> 00:11:48,899
request online so this thing can have

360
00:11:48,899 --> 00:11:50,700
URLs in it does that mean it will make

361
00:11:50,700 --> 00:11:52,380
Network requests as soon as I put one of

362
00:11:52,380 --> 00:11:53,760
these in that's an interesting one to

363
00:11:53,760 --> 00:11:56,579
look at also URL parsing is a common

364
00:11:56,579 --> 00:11:58,140
core source of security vulnerabilities

365
00:11:58,140 --> 00:12:00,180
URLs are actually surprisingly complex

366
00:12:00,180 --> 00:12:02,160
if you ever want to dig into quite how

367
00:12:02,160 --> 00:12:04,440
weird URLs can be going with the kernel

368
00:12:04,440 --> 00:12:06,180
the guy rights Carl has written some

369
00:12:06,180 --> 00:12:08,339
blogs about exactly how weird URLs can

370
00:12:08,339 --> 00:12:11,120
be if you think they're just HTTP called

371
00:12:11,120 --> 00:12:13,680
way more complicated than that so this

372
00:12:13,680 --> 00:12:16,079
potential parsing box as well and then

373
00:12:16,079 --> 00:12:18,000
there's potential for things like server

374
00:12:18,000 --> 00:12:19,980
side request portrait so that's a bug

375
00:12:19,980 --> 00:12:21,480
where I can make some system make

376
00:12:21,480 --> 00:12:23,519
Network requests on my behalf in a way

377
00:12:23,519 --> 00:12:25,440
that's more trusted than I would be so

378
00:12:25,440 --> 00:12:26,640
there's lots of things as soon as I see

379
00:12:26,640 --> 00:12:28,019
URL I mention they go okay that's fun

380
00:12:28,019 --> 00:12:29,459
let's go and play with URLs and see what

381
00:12:29,459 --> 00:12:30,779
happens

382
00:12:30,779 --> 00:12:32,579
um so I thought okay URLs let's let's

383
00:12:32,579 --> 00:12:35,459
look at that and so the spec describes

384
00:12:35,459 --> 00:12:37,320
it and this is what the spec says about

385
00:12:37,320 --> 00:12:38,579
the URL field because you can find out

386
00:12:38,579 --> 00:12:40,380
and see what it's meant to do so this is

387
00:12:40,380 --> 00:12:41,880
kind of really simple it says this

388
00:12:41,880 --> 00:12:44,639
optional property specifies a list of

389
00:12:44,639 --> 00:12:46,320
your iPhone which is what you've maybe

390
00:12:46,320 --> 00:12:48,959
downloaded each entry must conform to an

391
00:12:48,959 --> 00:12:53,540
RFC entries should right

392
00:12:53,779 --> 00:12:55,680
the interesting thing for me where

393
00:12:55,680 --> 00:12:57,839
optional should be made and you'll

394
00:12:57,839 --> 00:12:58,980
notice they're all caps if you're

395
00:12:58,980 --> 00:13:00,779
wondering why they're all caps there is

396
00:13:00,779 --> 00:13:03,120
a spec which describes how you write

397
00:13:03,120 --> 00:13:04,920
specs unless there's several there's a

398
00:13:04,920 --> 00:13:08,399
spec RFC 2119 which says what these

399
00:13:08,399 --> 00:13:11,040
words in caps mean and the in the case

400
00:13:11,040 --> 00:13:13,440
of optional should me it says this if

401
00:13:13,440 --> 00:13:15,240
you're implementing this you don't have

402
00:13:15,240 --> 00:13:18,420
to do this bit but you can right so they

403
00:13:18,420 --> 00:13:20,040
don't have to put this in

404
00:13:20,040 --> 00:13:22,139
as a researcher I like optional men

405
00:13:22,139 --> 00:13:24,540
should for a couple of reasons it means

406
00:13:24,540 --> 00:13:26,339
that different interpretations might

407
00:13:26,339 --> 00:13:27,839
handle it differently so I might get

408
00:13:27,839 --> 00:13:29,399
bugs where one implementation does it

409
00:13:29,399 --> 00:13:30,480
this way one in police does it

410
00:13:30,480 --> 00:13:31,680
differently because it should and

411
00:13:31,680 --> 00:13:33,720
optional it's also code that won't be

412
00:13:33,720 --> 00:13:35,639
heavily tested right

413
00:13:35,639 --> 00:13:37,019
as a researcher you're looking for stuff

414
00:13:37,019 --> 00:13:38,700
or people missed and look at things that

415
00:13:38,700 --> 00:13:40,380
people didn't look for things that are

416
00:13:40,380 --> 00:13:42,000
optional tend not to be truly test

417
00:13:42,000 --> 00:13:43,260
Suites because why would I test that as

418
00:13:43,260 --> 00:13:44,880
optional I never do it okay cool I'm

419
00:13:44,880 --> 00:13:45,899
gonna look for anything which is

420
00:13:45,899 --> 00:13:48,180
optional in a spec so now I've got a URL

421
00:13:48,180 --> 00:13:50,100
and I've got the fact that it's optional

422
00:13:50,100 --> 00:13:52,320
cool this sounds like at least worth

423
00:13:52,320 --> 00:13:53,579
looking at it's at least we're playing

424
00:13:53,579 --> 00:13:55,680
on but in general if you're looking

425
00:13:55,680 --> 00:13:57,180
through specs look for those words and

426
00:13:57,180 --> 00:13:58,860
you'll find them lots of places specs

427
00:13:58,860 --> 00:14:00,480
are amazing for like conditional weird

428
00:14:00,480 --> 00:14:02,399
things that no one ever uses but

429
00:14:02,399 --> 00:14:03,839
typically when developers are writing

430
00:14:03,839 --> 00:14:04,920
implementations they'll just put

431
00:14:04,920 --> 00:14:06,420
everything in there because like hey at

432
00:14:06,420 --> 00:14:07,560
some point if you're someone might want

433
00:14:07,560 --> 00:14:08,820
this I might as well write the code

434
00:14:08,820 --> 00:14:10,500
while I'm writing it

435
00:14:10,500 --> 00:14:13,079
so what can we do with this so that's

436
00:14:13,079 --> 00:14:14,100
like well what can I what would this

437
00:14:14,100 --> 00:14:16,079
mean say I I do this and it would

438
00:14:16,079 --> 00:14:17,339
actually does something what are the

439
00:14:17,339 --> 00:14:18,540
security vulnerabilities I might find

440
00:14:18,540 --> 00:14:20,279
well one I might be able to create

441
00:14:20,279 --> 00:14:22,380
tracking right if I'm successful in

442
00:14:22,380 --> 00:14:25,380
embedding a URL that is is then pulled

443
00:14:25,380 --> 00:14:26,579
every single time someone gets this

444
00:14:26,579 --> 00:14:28,500
image I can track their use of the image

445
00:14:28,500 --> 00:14:30,360
so I can start I mean people and people

446
00:14:30,360 --> 00:14:31,680
don't expect that they don't expect that

447
00:14:31,680 --> 00:14:33,420
image to track you and create Telemetry

448
00:14:33,420 --> 00:14:34,860
so that's interesting maybe I can do

449
00:14:34,860 --> 00:14:38,100
that I might get ssrf right what can I

450
00:14:38,100 --> 00:14:40,199
do if I can make a cool URL under the

451
00:14:40,199 --> 00:14:41,699
control of the container engine that's

452
00:14:41,699 --> 00:14:43,500
running this container potentially that

453
00:14:43,500 --> 00:14:45,000
I might also get I didn't actually put

454
00:14:45,000 --> 00:14:46,560
up here I should have done URL parsing

455
00:14:46,560 --> 00:14:48,180
box so I may get an actual vulnerability

456
00:14:48,180 --> 00:14:49,860
and an implementation where it powers of

457
00:14:49,860 --> 00:14:51,660
the URL I give it some weird URL with

458
00:14:51,660 --> 00:14:52,980
lots of different parameters in it and

459
00:14:52,980 --> 00:14:55,440
it complains crashes or maybe actually

460
00:14:55,440 --> 00:14:57,120
does something like you know gives me

461
00:14:57,120 --> 00:14:58,800
access to the system so this is

462
00:14:58,800 --> 00:15:01,139
impossible that's it

463
00:15:01,139 --> 00:15:03,000
um get implementations right I need

464
00:15:03,000 --> 00:15:04,500
software to actually import this to work

465
00:15:04,500 --> 00:15:05,880
out whether this is really a problem or

466
00:15:05,880 --> 00:15:07,079
just something in the spec that's kind

467
00:15:07,079 --> 00:15:10,500
of interesting so in the case of oci um

468
00:15:10,500 --> 00:15:11,699
this this is quite a few different

469
00:15:11,699 --> 00:15:13,139
implementations you can get your hands

470
00:15:13,139 --> 00:15:14,399
on

471
00:15:14,399 --> 00:15:16,800
first one's container runtimes right

472
00:15:16,800 --> 00:15:18,240
container runtimes are the things that

473
00:15:18,240 --> 00:15:19,860
run containers so when they go they're

474
00:15:19,860 --> 00:15:21,060
going to pull my images they're going to

475
00:15:21,060 --> 00:15:22,620
run them these are the things I want to

476
00:15:22,620 --> 00:15:24,300
actually get down and play with luckily

477
00:15:24,300 --> 00:15:26,399
it's all open source super easy if

478
00:15:26,399 --> 00:15:27,540
you're doing some specs you have to

479
00:15:27,540 --> 00:15:28,500
watch because a lot is implemented

480
00:15:28,500 --> 00:15:30,660
property software can be harder to get

481
00:15:30,660 --> 00:15:31,980
implementations but pretty much

482
00:15:31,980 --> 00:15:34,380
everything container land is free Docker

483
00:15:34,380 --> 00:15:36,959
is the original uh OG software that

484
00:15:36,959 --> 00:15:38,339
everyone has used

485
00:15:38,339 --> 00:15:40,440
um containerd is actually used by Docker

486
00:15:40,440 --> 00:15:42,180
but also works Standalone with a program

487
00:15:42,180 --> 00:15:44,160
called nerd metal for reasons I don't

488
00:15:44,160 --> 00:15:46,139
know why they call that and Portman is

489
00:15:46,139 --> 00:15:48,240
Red Hats Red Hat doing everything in

490
00:15:48,240 --> 00:15:49,500
containers their own way because they're

491
00:15:49,500 --> 00:15:50,579
red hat

492
00:15:50,579 --> 00:15:52,620
um and they have their own tools forever

493
00:15:52,620 --> 00:15:54,600
I can then get container Builders things

494
00:15:54,600 --> 00:15:56,760
which can build images so if my research

495
00:15:56,760 --> 00:15:58,800
is around container images I need to

496
00:15:58,800 --> 00:16:00,600
have tools to drilled images Docker

497
00:16:00,600 --> 00:16:02,399
build exit build up again build eyes red

498
00:16:02,399 --> 00:16:04,560
has one doctor bill Lexus the uh it's

499
00:16:04,560 --> 00:16:07,079
the new version of Doctor's Notebook

500
00:16:07,079 --> 00:16:09,540
tools Scorpio crane there's some tools

501
00:16:09,540 --> 00:16:10,860
that muck around with images they move

502
00:16:10,860 --> 00:16:12,360
them they translate them they upload

503
00:16:12,360 --> 00:16:13,800
them download them inspect them so

504
00:16:13,800 --> 00:16:15,420
they're interested as well

505
00:16:15,420 --> 00:16:17,399
and container Registries I need to put

506
00:16:17,399 --> 00:16:19,199
my images up somewhere and have them

507
00:16:19,199 --> 00:16:21,420
retrieved there's loads of these and

508
00:16:21,420 --> 00:16:23,519
they all pretty much Implement these OCS

509
00:16:23,519 --> 00:16:26,040
specs so Docker Hub ghcr key there's

510
00:16:26,040 --> 00:16:27,480
also the cloud providers about their own

511
00:16:27,480 --> 00:16:29,040
registers too so there's lots of

512
00:16:29,040 --> 00:16:29,940
opportunities here and these are the

513
00:16:29,940 --> 00:16:31,199
ones I looked at there's probably more

514
00:16:31,199 --> 00:16:33,360
but those are the ones that kind of good

515
00:16:33,360 --> 00:16:35,160
starting point

516
00:16:35,160 --> 00:16:37,860
so design experiment right I now have a

517
00:16:37,860 --> 00:16:39,600
thesis I have this idea URLs could be

518
00:16:39,600 --> 00:16:41,399
interesting I have some software let's

519
00:16:41,399 --> 00:16:43,139
go things to play with once I played

520
00:16:43,139 --> 00:16:45,060
them so how do I actually get the point

521
00:16:45,060 --> 00:16:46,560
of designing an Instagram

522
00:16:46,560 --> 00:16:48,660
so this is what a container image

523
00:16:48,660 --> 00:16:50,880
actually is if you've ever done Docker

524
00:16:50,880 --> 00:16:52,860
run something and you've actually run it

525
00:16:52,860 --> 00:16:55,380
if you actually container images are

526
00:16:55,380 --> 00:16:57,240
actually just turbos which is kind of

527
00:16:57,240 --> 00:16:58,199
nice if you want to play around with

528
00:16:58,199 --> 00:16:59,339
them because you literally just save

529
00:16:59,339 --> 00:17:01,320
them out of Docker and untour them it's

530
00:17:01,320 --> 00:17:02,820
literally just tart so it's nice and

531
00:17:02,820 --> 00:17:04,020
easy to do and this is what they

532
00:17:04,020 --> 00:17:04,799
actually look like when you're getting

533
00:17:04,799 --> 00:17:07,559
them index and manifest Json and oci

534
00:17:07,559 --> 00:17:09,179
layer are just this is how this can turn

535
00:17:09,179 --> 00:17:12,299
laid out everything is in these blobs

536
00:17:12,299 --> 00:17:14,579
um the blobs are all identified as sharp

537
00:17:14,579 --> 00:17:17,099
2500 caches it can either be a manifest

538
00:17:17,099 --> 00:17:18,900
at this created the image it can be the

539
00:17:18,900 --> 00:17:21,059
configuration of the container image or

540
00:17:21,059 --> 00:17:23,160
all the files but everything just lives

541
00:17:23,160 --> 00:17:24,660
as these blobs with the kind of shower

542
00:17:24,660 --> 00:17:25,980
hatches and the show hash is interesting

543
00:17:25,980 --> 00:17:27,119
because that's how it verifies you

544
00:17:27,119 --> 00:17:28,620
haven't mocked with it if you mess with

545
00:17:28,620 --> 00:17:29,880
these things it should have changes as

546
00:17:29,880 --> 00:17:31,260
soon as you change one character that

547
00:17:31,260 --> 00:17:33,240
shot has completely changes so that's

548
00:17:33,240 --> 00:17:34,620
what you end up having to kind of like

549
00:17:34,620 --> 00:17:36,539
where all your information ends up being

550
00:17:36,539 --> 00:17:38,340
so I got one of these this is a really

551
00:17:38,340 --> 00:17:40,080
simple I also recommend when you're

552
00:17:40,080 --> 00:17:41,280
doing something like this start with the

553
00:17:41,280 --> 00:17:42,960
simplest possible version of the

554
00:17:42,960 --> 00:17:44,220
software you don't want to make it more

555
00:17:44,220 --> 00:17:45,780
complex if you're doing experiments this

556
00:17:45,780 --> 00:17:47,100
is as simple as possible image this is

557
00:17:47,100 --> 00:17:48,600
just busy box literally very simple

558
00:17:48,600 --> 00:17:51,539
image and I got the first file which was

559
00:17:51,539 --> 00:17:53,340
the index manifest and it looks a bit

560
00:17:53,340 --> 00:17:54,240
like this

561
00:17:54,240 --> 00:17:56,160
you see it describes the compact there

562
00:17:56,160 --> 00:17:57,960
and it describes the layer of the

563
00:17:57,960 --> 00:17:59,039
container image but that's the pressure

564
00:17:59,039 --> 00:18:00,780
the Magnificent what you will notice is

565
00:18:00,780 --> 00:18:02,760
there's no URLs and I looked quite a few

566
00:18:02,760 --> 00:18:04,799
images I got from various Registries

567
00:18:04,799 --> 00:18:06,660
none of them use this URL field it's

568
00:18:06,660 --> 00:18:08,280
totally unused

569
00:18:08,280 --> 00:18:10,200
um but it's available so what I did was

570
00:18:10,200 --> 00:18:12,539
work out where I put a URL

571
00:18:12,539 --> 00:18:14,280
and I ended up working out you put it

572
00:18:14,280 --> 00:18:15,900
there it's a Json file

573
00:18:15,900 --> 00:18:17,700
um so it's if you know Json format it's

574
00:18:17,700 --> 00:18:20,940
pretty easy I basically added a URL to

575
00:18:20,940 --> 00:18:22,500
that config section

576
00:18:22,500 --> 00:18:24,120
um and what I did was I got a domain

577
00:18:24,120 --> 00:18:26,240
name

578
00:18:26,240 --> 00:18:28,559
UK actually using one of the many

579
00:18:28,559 --> 00:18:30,000
dominions I bought which is nice to do

580
00:18:30,000 --> 00:18:31,260
rather just leave them waiting there to

581
00:18:31,260 --> 00:18:33,120
get renewed in two years time

582
00:18:33,120 --> 00:18:34,320
um but yeah I actually use this once I

583
00:18:34,320 --> 00:18:36,900
use and I basically put a file that had

584
00:18:36,900 --> 00:18:39,419
the Shah name of the same as the compact

585
00:18:39,419 --> 00:18:42,299
right so these things match up

586
00:18:42,299 --> 00:18:43,919
um so that was the exact same content as

587
00:18:43,919 --> 00:18:45,480
they are so that it doesn't complain

588
00:18:45,480 --> 00:18:47,880
when it actually pulls it and I said

589
00:18:47,880 --> 00:18:49,679
okay that's was a good day and then I

590
00:18:49,679 --> 00:18:51,960
bundle that back up and copied it back

591
00:18:51,960 --> 00:18:53,640
up to container Registries so I modified

592
00:18:53,640 --> 00:18:56,520
it got my experiment got my my uh URL in

593
00:18:56,520 --> 00:18:57,900
there and I send up to container

594
00:18:57,900 --> 00:19:00,720
Registries and then see what happens

595
00:19:00,720 --> 00:19:02,760
um a little quicker say if you're doing

596
00:19:02,760 --> 00:19:05,660
any testing around web stuff so around

597
00:19:05,660 --> 00:19:08,340
ssrf you want like test something where

598
00:19:08,340 --> 00:19:10,020
you want a reliable URL that you control

599
00:19:10,020 --> 00:19:12,299
it's great if the best way of doing srf

600
00:19:12,299 --> 00:19:13,860
testing or any other kind of HTTP test

601
00:19:13,860 --> 00:19:15,780
is get a URL you control and you will

602
00:19:15,780 --> 00:19:17,580
log because then when you're you can

603
00:19:17,580 --> 00:19:18,720
tell your thing your experiment is

604
00:19:18,720 --> 00:19:20,340
working because you're using blind

605
00:19:20,340 --> 00:19:21,480
experiments it's really hard to tell

606
00:19:21,480 --> 00:19:23,220
it's actually working or not get a URL

607
00:19:23,220 --> 00:19:25,380
you control the way I do this I've got a

608
00:19:25,380 --> 00:19:28,020
little very cheap EPS running caddy

609
00:19:28,020 --> 00:19:30,539
caddy is a reverse proxy software and

610
00:19:30,539 --> 00:19:32,039
web server software it's very very

611
00:19:32,039 --> 00:19:34,919
flexible this is the config section I

612
00:19:34,919 --> 00:19:36,720
use for this experiment I would

613
00:19:36,720 --> 00:19:37,860
recommend if you're looking into that

614
00:19:37,860 --> 00:19:39,960
thing look into caddy one of its best

615
00:19:39,960 --> 00:19:43,020
tricks is if you give it a valid domain

616
00:19:43,020 --> 00:19:45,240
name you can just say in the config file

617
00:19:45,240 --> 00:19:47,700
PLS and it'll go with less encrypt and

618
00:19:47,700 --> 00:19:49,140
it'll get a valid certificate and it'll

619
00:19:49,140 --> 00:19:50,880
bring it down so it'll get TLS errors

620
00:19:50,880 --> 00:19:52,140
because a lot of software users will

621
00:19:52,140 --> 00:19:54,299
birth out because of TLS error how does

622
00:19:54,299 --> 00:19:55,679
it all for you you don't worry about how

623
00:19:55,679 --> 00:19:57,900
certificates work really really handy so

624
00:19:57,900 --> 00:19:59,520
I've got a link at the end for some more

625
00:19:59,520 --> 00:20:01,500
info and but definitely just doesn't say

626
00:20:01,500 --> 00:20:04,559
we'd recommend

627
00:20:04,559 --> 00:20:06,539
run experiment okay we've now got our

628
00:20:06,539 --> 00:20:08,220
experiment we've got our our image that

629
00:20:08,220 --> 00:20:10,679
we bundled up with a URL in it we have

630
00:20:10,679 --> 00:20:11,580
got

631
00:20:11,580 --> 00:20:13,980
um our implementation software my

632
00:20:13,980 --> 00:20:16,080
importance

633
00:20:16,080 --> 00:20:18,000
so what happened uh well what happened

634
00:20:18,000 --> 00:20:22,260
was I this is my candy Loper and um what

635
00:20:22,260 --> 00:20:24,419
I found was that when I was calling him

636
00:20:24,419 --> 00:20:25,919
just about you running them you just

637
00:20:25,919 --> 00:20:27,360
pull it down to a horse with some of

638
00:20:27,360 --> 00:20:29,100
these container tools I would get a pain

639
00:20:29,100 --> 00:20:31,620
and the bits I've highlighted are very

640
00:20:31,620 --> 00:20:34,440
handily what the what this software does

641
00:20:34,440 --> 00:20:36,480
is it tends to tell you in this user

642
00:20:36,480 --> 00:20:38,039
agent exactly what it was to pull it so

643
00:20:38,039 --> 00:20:39,600
it tells you the software name so I know

644
00:20:39,600 --> 00:20:40,919
exactly which tool it was that triggered

645
00:20:40,919 --> 00:20:42,299
it and tells me the software version

646
00:20:42,299 --> 00:20:44,160
which is kind of interesting because if

647
00:20:44,160 --> 00:20:45,419
there's ever a vulnerabilities in that

648
00:20:45,419 --> 00:20:47,220
software I get kind of told in advance

649
00:20:47,220 --> 00:20:49,080
which is nice because I get to know what

650
00:20:49,080 --> 00:20:50,220
versions are running

651
00:20:50,220 --> 00:20:52,799
so I got lots of different uh things

652
00:20:52,799 --> 00:20:54,179
depending on the tools I was using but

653
00:20:54,179 --> 00:20:55,380
that was useful because then right you

654
00:20:55,380 --> 00:20:56,820
could prove this is working right I know

655
00:20:56,820 --> 00:20:57,660
this isn't they've done this stuff

656
00:20:57,660 --> 00:20:59,100
because like television is random people

657
00:20:59,100 --> 00:21:00,840
believe I did publish a vlog about this

658
00:21:00,840 --> 00:21:02,280
I started getting weird like hits from

659
00:21:02,280 --> 00:21:03,660
various people girls and clicking links

660
00:21:03,660 --> 00:21:05,880
in my or copying the URL but thanks for

661
00:21:05,880 --> 00:21:07,140
that but you can tell the difference

662
00:21:07,140 --> 00:21:09,360
because it's the ones that actually have

663
00:21:09,360 --> 00:21:10,980
good user agents on them

664
00:21:10,980 --> 00:21:13,620
so success or failure well in this case

665
00:21:13,620 --> 00:21:15,360
I got my pings this is kind of what I

666
00:21:15,360 --> 00:21:17,039
was going for this is this is the the

667
00:21:17,039 --> 00:21:19,440
outcome I looked for when I did this

668
00:21:19,440 --> 00:21:21,299
it looked a bit like this

669
00:21:21,299 --> 00:21:22,919
um and there was a couple of interesting

670
00:21:22,919 --> 00:21:26,400
things Docker never ever picked so

671
00:21:26,400 --> 00:21:28,320
despite Docker supporting oci images and

672
00:21:28,320 --> 00:21:30,059
being the tool most people use it would

673
00:21:30,059 --> 00:21:31,559
never pull the URL

674
00:21:31,559 --> 00:21:34,140
my theory is there that what Docker is

675
00:21:34,140 --> 00:21:35,700
doing is it's converting it to us it had

676
00:21:35,700 --> 00:21:37,320
its own proprietary format that existed

677
00:21:37,320 --> 00:21:39,179
before oci I think what it's doing when

678
00:21:39,179 --> 00:21:40,559
it's loading an image it's converting it

679
00:21:40,559 --> 00:21:42,179
back to its proprietary format and just

680
00:21:42,179 --> 00:21:44,179
ditching the URL which is interesting

681
00:21:44,179 --> 00:21:46,799
continuity pod and Scorpio they all ping

682
00:21:46,799 --> 00:21:48,840
quite happily and all of them support

683
00:21:48,840 --> 00:21:51,179
oci even Docker Hub which is again kind

684
00:21:51,179 --> 00:21:52,799
of built on the older Tech it supports

685
00:21:52,799 --> 00:21:54,360
ocean averages so it worked this image

686
00:21:54,360 --> 00:21:56,159
worked in every one

687
00:21:56,159 --> 00:21:57,659
um

688
00:21:57,659 --> 00:21:59,700
in terms of the outcome uh I did

689
00:21:59,700 --> 00:22:01,320
whatever hopefully good ethical security

690
00:22:01,320 --> 00:22:02,880
researcher would do at this point and I

691
00:22:02,880 --> 00:22:04,860
reported it so I said this is something

692
00:22:04,860 --> 00:22:07,980
which is in your spec but it has some

693
00:22:07,980 --> 00:22:09,539
unintended side effects right

694
00:22:09,539 --> 00:22:11,039
essentially I can now build an image

695
00:22:11,039 --> 00:22:12,840
that will track any user of that image

696
00:22:12,840 --> 00:22:14,820
people who run containers probably don't

697
00:22:14,820 --> 00:22:15,840
think that's something that can happen

698
00:22:15,840 --> 00:22:19,440
so it's unintended functionality it also

699
00:22:19,440 --> 00:22:22,500
has the risk of blinding ssra so if I

700
00:22:22,500 --> 00:22:24,840
give you a crafted URL and you run my

701
00:22:24,840 --> 00:22:26,880
image I can make a request anywhere in

702
00:22:26,880 --> 00:22:28,500
your infrastructure

703
00:22:28,500 --> 00:22:30,600
is that a security problem well it's not

704
00:22:30,600 --> 00:22:33,179
right it it's pretty digital I'll be

705
00:22:33,179 --> 00:22:34,200
honest and say I don't think that's

706
00:22:34,200 --> 00:22:35,400
something everyone's got to worry about

707
00:22:35,400 --> 00:22:37,679
but it's definitely not intended it's

708
00:22:37,679 --> 00:22:38,700
not something that should be happening

709
00:22:38,700 --> 00:22:41,220
basically they said yep we recognize

710
00:22:41,220 --> 00:22:42,960
that is his security issue it's not

711
00:22:42,960 --> 00:22:45,059
something that's ideal however it's in

712
00:22:45,059 --> 00:22:47,039
the spec and it's not that high risk so

713
00:22:47,039 --> 00:22:48,539
fundamentally we're probably not going

714
00:22:48,539 --> 00:22:50,400
to change it so you have to help list

715
00:22:50,400 --> 00:22:52,020
all works if you want to believe this I

716
00:22:52,020 --> 00:22:53,220
don't think they'll ever fix this

717
00:22:53,220 --> 00:22:56,159
because it is part of the spec so to fix

718
00:22:56,159 --> 00:22:57,539
it they would have to remove that from

719
00:22:57,539 --> 00:22:59,159
the spec and whilst I don't think and

720
00:22:59,159 --> 00:23:00,360
this is what the other thing about specs

721
00:23:00,360 --> 00:23:02,100
is once it's in the spec it never goes

722
00:23:02,100 --> 00:23:03,960
people never remove things from spec

723
00:23:03,960 --> 00:23:05,400
they add new things to Specs but they

724
00:23:05,400 --> 00:23:06,840
almost never remove things from respect

725
00:23:06,840 --> 00:23:08,400
so that will that behavior will work

726
00:23:08,400 --> 00:23:09,900
forever so if you're ever in a

727
00:23:09,900 --> 00:23:11,280
circumstance where you need to track

728
00:23:11,280 --> 00:23:12,900
someone using container image I pretty

729
00:23:12,900 --> 00:23:14,220
much guarantee this will always work if

730
00:23:14,220 --> 00:23:16,520
they're not using go

731
00:23:16,520 --> 00:23:19,260
I learned a lot about the OCR spec this

732
00:23:19,260 --> 00:23:20,460
is probably the best reason to do

733
00:23:20,460 --> 00:23:22,140
research I'm honest

734
00:23:22,140 --> 00:23:24,059
um it forces you to learn the low level

735
00:23:24,059 --> 00:23:26,640
details of how stuff works I now know

736
00:23:26,640 --> 00:23:27,780
exactly pretty much how to build

737
00:23:27,780 --> 00:23:30,120
container images from scratch with text

738
00:23:30,120 --> 00:23:32,280
editors and tar which I did not know

739
00:23:32,280 --> 00:23:34,260
before so I learned it which is always a

740
00:23:34,260 --> 00:23:36,299
great way I also had some fun side

741
00:23:36,299 --> 00:23:37,559
effects

742
00:23:37,559 --> 00:23:39,299
um I was playing around like tarring up

743
00:23:39,299 --> 00:23:40,980
my image and then like trying out

744
00:23:40,980 --> 00:23:43,200
various tools and I found that if I used

745
00:23:43,200 --> 00:23:45,000
to talk man basically a little bit

746
00:23:45,000 --> 00:23:46,320
differently

747
00:23:46,320 --> 00:23:47,700
um some vulnerability scanners stopped

748
00:23:47,700 --> 00:23:49,320
recognizing the image so Docker would

749
00:23:49,320 --> 00:23:51,000
still run the image quite happily but

750
00:23:51,000 --> 00:23:52,500
vulnerability scares would that's not a

751
00:23:52,500 --> 00:23:53,760
valid image I'm just not going to do

752
00:23:53,760 --> 00:23:55,320
anything with it so again that's another

753
00:23:55,320 --> 00:23:57,179
potential security side effect

754
00:23:57,179 --> 00:23:58,500
um I could bypass phone scanners

755
00:23:58,500 --> 00:24:00,299
depending on how I construct my image in

756
00:24:00,299 --> 00:24:02,460
time I reported that one turns out it's

757
00:24:02,460 --> 00:24:04,500
a some sort of weirdness in the

758
00:24:04,500 --> 00:24:06,179
underlying Library so it will get fixed

759
00:24:06,179 --> 00:24:08,340
but probably no time soon

760
00:24:08,340 --> 00:24:09,659
um I also think that image that some

761
00:24:09,659 --> 00:24:11,220
container tools will run While others

762
00:24:11,220 --> 00:24:13,440
can just ditch it so I've got an image

763
00:24:13,440 --> 00:24:15,179
that Docker will run by Apple because it

764
00:24:15,179 --> 00:24:16,919
doesn't do anything about URLs if I put

765
00:24:16,919 --> 00:24:18,539
an invalid URL there also view that URL

766
00:24:18,539 --> 00:24:20,520
and you basically make it an invalid URL

767
00:24:20,520 --> 00:24:22,140
cordman and container they always go

768
00:24:22,140 --> 00:24:23,400
that's invalid I'm just going to ditch

769
00:24:23,400 --> 00:24:24,539
it I'm not going to run

770
00:24:24,539 --> 00:24:26,159
so again you can imagine a circumstance

771
00:24:26,159 --> 00:24:28,140
where maybe for example a security check

772
00:24:28,140 --> 00:24:29,820
is done by something running continuity

773
00:24:29,820 --> 00:24:31,620
and then the container itself runs using

774
00:24:31,620 --> 00:24:33,659
Docker it will bypass a security check

775
00:24:33,659 --> 00:24:34,679
because the security says that's not

776
00:24:34,679 --> 00:24:36,059
invalid that's not a valid image that's

777
00:24:36,059 --> 00:24:37,559
not where to run the doctor says yes it

778
00:24:37,559 --> 00:24:39,059
is I'm quite happily going to run that

779
00:24:39,059 --> 00:24:41,159
so this is where implementations and

780
00:24:41,159 --> 00:24:42,960
differences in implementations can be

781
00:24:42,960 --> 00:24:44,520
kinda interesting

782
00:24:44,520 --> 00:24:46,980
um not gonna happen every time but I can

783
00:24:46,980 --> 00:24:48,299
imagine that being something that that

784
00:24:48,299 --> 00:24:51,020
apparently foreign

785
00:24:53,539 --> 00:24:56,039
I'm far from finished on this one and

786
00:24:56,039 --> 00:24:57,299
other things I always think you're doing

787
00:24:57,299 --> 00:24:59,220
or anyone else is thinking wow we'll see

788
00:24:59,220 --> 00:25:00,539
how it looks super fun I wanted to do

789
00:25:00,539 --> 00:25:01,860
research on that things you could look

790
00:25:01,860 --> 00:25:02,820
at

791
00:25:02,820 --> 00:25:05,520
um weight at all ci2 and things get and

792
00:25:05,520 --> 00:25:07,740
parse and look at container images there

793
00:25:07,740 --> 00:25:09,059
are websites you can get that will do

794
00:25:09,059 --> 00:25:10,559
things like inspect images well I'm

795
00:25:10,559 --> 00:25:12,840
embedding URLs potentially what do

796
00:25:12,840 --> 00:25:14,580
things that cause them to get it this

797
00:25:14,580 --> 00:25:15,960
scope there

798
00:25:15,960 --> 00:25:17,940
um however they handle URLs the other

799
00:25:17,940 --> 00:25:19,679
another element in that descriptor thing

800
00:25:19,679 --> 00:25:21,780
is data and it basically just says this

801
00:25:21,780 --> 00:25:24,900
can contain data a64 coded data but it's

802
00:25:24,900 --> 00:25:26,700
not super well specified how container

803
00:25:26,700 --> 00:25:28,200
runtime should actually do handle that

804
00:25:28,200 --> 00:25:29,940
so what happens if I put a huge data

805
00:25:29,940 --> 00:25:31,260
section if I put gigs of data into

806
00:25:31,260 --> 00:25:34,320
complex action will it crash obviously

807
00:25:34,320 --> 00:25:36,059
when you get into crash bugs be a bit

808
00:25:36,059 --> 00:25:37,679
more careful with third-party systems I

809
00:25:37,679 --> 00:25:39,240
wouldn't go uploading gigs of data in a

810
00:25:39,240 --> 00:25:40,620
complex section to a public registry

811
00:25:40,620 --> 00:25:42,360
because you break it whilst technically

812
00:25:42,360 --> 00:25:44,039
you'll be okay I wouldn't want to be

813
00:25:44,039 --> 00:25:45,840
receiving end of that call

814
00:25:45,840 --> 00:25:47,580
um so there are attention to look there

815
00:25:47,580 --> 00:25:49,559
there's other elements there's related

816
00:25:49,559 --> 00:25:51,299
specs so the runtime spec and

817
00:25:51,299 --> 00:25:53,159
distribution spec they just take how you

818
00:25:53,159 --> 00:25:54,539
run containers and how you store

819
00:25:54,539 --> 00:25:57,059
containers so you can look there as well

820
00:25:57,059 --> 00:26:00,179
and also specs as a big change suspect

821
00:26:00,179 --> 00:26:01,860
new versions of specifications will come

822
00:26:01,860 --> 00:26:03,779
out all the time OCR currently writing

823
00:26:03,779 --> 00:26:06,000
version 1.1 it's got some new features

824
00:26:06,000 --> 00:26:07,799
to handle things like container signing

825
00:26:07,799 --> 00:26:09,960
the way container signing is yep is

826
00:26:09,960 --> 00:26:12,480
handled the moment is pretty hacky if

827
00:26:12,480 --> 00:26:14,340
I'm honest so this will actually improve

828
00:26:14,340 --> 00:26:15,960
that as well so there's universities

829
00:26:15,960 --> 00:26:18,120
spec which obviously new potential

830
00:26:18,120 --> 00:26:19,940
problems

831
00:26:19,940 --> 00:26:22,440
more information I'll put these slides

832
00:26:22,440 --> 00:26:24,559
online on Twitter afterwards and

833
00:26:24,559 --> 00:26:26,760
Mastodon but just some other ones I

834
00:26:26,760 --> 00:26:28,740
would recommend that post there

835
00:26:28,740 --> 00:26:30,419
um de-essified security researchers by

836
00:26:30,419 --> 00:26:31,799
research from NCC it's a really great

837
00:26:31,799 --> 00:26:34,200
post on the process of research and like

838
00:26:34,200 --> 00:26:36,000
like how it works

839
00:26:36,000 --> 00:26:37,919
um well recommend that I've written up

840
00:26:37,919 --> 00:26:39,720
this if you want more on this particular

841
00:26:39,720 --> 00:26:41,039
vulnerability I've written up that

842
00:26:41,039 --> 00:26:43,620
vulnerability uh and how you do it and

843
00:26:43,620 --> 00:26:44,940
then also if you want some more stuff

844
00:26:44,940 --> 00:26:46,559
about caddy and how to use caddy for

845
00:26:46,559 --> 00:26:48,840
testing I've upload there for that as

846
00:26:48,840 --> 00:26:52,020
well it's an easy to read development

847
00:26:52,020 --> 00:26:55,020
questions

848
00:26:56,460 --> 00:26:58,679
we've got a couple of questions now or

849
00:26:58,679 --> 00:27:00,720
otherwise email Mastered on Twitter

850
00:27:00,720 --> 00:27:02,279
while it's still up

851
00:27:02,279 --> 00:27:04,080
um it's available as well

852
00:27:04,080 --> 00:27:06,000
any questions

853
00:27:06,000 --> 00:27:09,080
feel please contact later

854
00:27:09,779 --> 00:27:12,200
yep

855
00:27:19,460 --> 00:27:21,840
yeah I think I think it's a great way of

856
00:27:21,840 --> 00:27:24,480
doing it because as I said there's

857
00:27:24,480 --> 00:27:27,299
it it benefits for as an approach

858
00:27:27,299 --> 00:27:28,679
because you can do it in a kind of

859
00:27:28,679 --> 00:27:30,240
really structured way you can take a

860
00:27:30,240 --> 00:27:32,340
spec especially in your specs because

861
00:27:32,340 --> 00:27:34,140
the older ones like the 2000s ones

862
00:27:34,140 --> 00:27:35,460
they've been pretty heavily you know

863
00:27:35,460 --> 00:27:37,080
like attacked but there's always new

864
00:27:37,080 --> 00:27:39,360
specifications coming out in the weary

865
00:27:39,360 --> 00:27:41,039
I'm in Cloud native people are like

866
00:27:41,039 --> 00:27:42,600
specifying Cloud native there's a lot of

867
00:27:42,600 --> 00:27:43,860
stuff around there

868
00:27:43,860 --> 00:27:45,480
um so yeah as I kind of approach to

869
00:27:45,480 --> 00:27:47,400
research just going through it looking

870
00:27:47,400 --> 00:27:49,679
for every measured optional must

871
00:27:49,679 --> 00:27:51,840
and then just trying out that process

872
00:27:51,840 --> 00:27:53,760
right just run through the process of

873
00:27:53,760 --> 00:27:55,500
getting implementations what happens if

874
00:27:55,500 --> 00:27:57,539
I do something weird to X put lots of

875
00:27:57,539 --> 00:27:59,940
data images format of data

876
00:27:59,940 --> 00:28:01,919
um one thing that

877
00:28:01,919 --> 00:28:03,900
kind of it well the other thing is that

878
00:28:03,900 --> 00:28:04,919
you can find internally in

879
00:28:04,919 --> 00:28:06,960
implementations is

880
00:28:06,960 --> 00:28:09,000
um some languages where you get code

881
00:28:09,000 --> 00:28:09,659
written in different languages

882
00:28:09,659 --> 00:28:12,000
containers almost always go on but some

883
00:28:12,000 --> 00:28:13,080
people write things in other languages

884
00:28:13,080 --> 00:28:15,419
as well like rust C whatever

885
00:28:15,419 --> 00:28:17,159
um you find weirdnesses in things like

886
00:28:17,159 --> 00:28:19,260
how they handle fundamental data so

887
00:28:19,260 --> 00:28:21,299
golang is very very strict on IP

888
00:28:21,299 --> 00:28:22,679
addresses if you give it one of those

889
00:28:22,679 --> 00:28:24,960
weird formatted Optical or hex IP

890
00:28:24,960 --> 00:28:26,340
addresses it just goes no that's not

891
00:28:26,340 --> 00:28:28,200
valid rust and c will go oh that's

892
00:28:28,200 --> 00:28:29,700
completely valid IP address I lacked on

893
00:28:29,700 --> 00:28:31,500
it so there's lots of fun there to be

894
00:28:31,500 --> 00:28:33,840
had as well and just like looking at an

895
00:28:33,840 --> 00:28:34,919
implementation written in one language

896
00:28:34,919 --> 00:28:36,679
implementation written another language

897
00:28:36,679 --> 00:28:38,760
these languages do things differently

898
00:28:38,760 --> 00:28:40,140
that's going to introduce potential for

899
00:28:40,140 --> 00:28:42,000
bugs so yeah I think for students is a

900
00:28:42,000 --> 00:28:44,279
great idea to like um pick a spare and

901
00:28:44,279 --> 00:28:47,400
dive in and even if you find no fun bugs

902
00:28:47,400 --> 00:28:49,500
you'll still learn something about how

903
00:28:49,500 --> 00:28:52,340
that technology works

904
00:28:52,679 --> 00:28:55,580
any other questions

