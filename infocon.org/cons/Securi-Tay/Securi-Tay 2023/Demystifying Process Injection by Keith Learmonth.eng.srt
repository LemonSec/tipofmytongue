1
00:00:02,820 --> 00:00:05,460
good then okay so this is our talk I'm

2
00:00:05,460 --> 00:00:06,540
gonna try and rush through it we're a

3
00:00:06,540 --> 00:00:07,859
bit short for Timeless

4
00:00:07,859 --> 00:00:10,980
um session so this is going to be a talk

5
00:00:10,980 --> 00:00:13,440
about process injection kind of a quick

6
00:00:13,440 --> 00:00:15,120
overview and a bit of a world winter of

7
00:00:15,120 --> 00:00:16,260
it

8
00:00:16,260 --> 00:00:19,380
um the the boring slide about me I'm

9
00:00:19,380 --> 00:00:21,900
Keith that's my Twitter handle

10
00:00:21,900 --> 00:00:24,300
um I'm an appetite graduate I left in

11
00:00:24,300 --> 00:00:26,699
2016 which is a surprisingly

12
00:00:26,699 --> 00:00:29,160
large amount of time now

13
00:00:29,160 --> 00:00:31,859
um I worked in stock for five years and

14
00:00:31,859 --> 00:00:33,780
I've spent the last year as an IR

15
00:00:33,780 --> 00:00:36,840
consultant and I also have hobbies that

16
00:00:36,840 --> 00:00:40,260
don't relate to this talk

17
00:00:40,260 --> 00:00:43,079
um so process injection

18
00:00:43,079 --> 00:00:48,480
um it is microtactic 1055 and if I think

19
00:00:48,480 --> 00:00:52,260
I've got the tab open it's okay well

20
00:00:52,260 --> 00:00:56,699
it's not showing but the page has

21
00:00:56,699 --> 00:01:00,180
15 different sub categories and the

22
00:01:00,180 --> 00:01:02,699
examples they list there's about 50 of

23
00:01:02,699 --> 00:01:04,199
them different groups and different

24
00:01:04,199 --> 00:01:07,680
malware that's use it so it's a pretty

25
00:01:07,680 --> 00:01:11,100
ubiquitous technique these days

26
00:01:11,100 --> 00:01:13,140
um yeah used in most common malware and

27
00:01:13,140 --> 00:01:14,880
Red Team toolkits anyone in the previous

28
00:01:14,880 --> 00:01:17,520
talk would have noticed pretty much all

29
00:01:17,520 --> 00:01:19,979
of the Frameworks you mentioned all of

30
00:01:19,979 --> 00:01:23,759
them had process injection modules

31
00:01:23,759 --> 00:01:24,540
um

32
00:01:24,540 --> 00:01:27,299
so in some threat intelligence reports

33
00:01:27,299 --> 00:01:29,939
this is one Caesar did for quack Bots it

34
00:01:29,939 --> 00:01:31,860
mentions it injects itself into

35
00:01:31,860 --> 00:01:34,979
legitimate processes to avoid detection

36
00:01:34,979 --> 00:01:36,780
um here's one from Red Canary for the

37
00:01:36,780 --> 00:01:40,680
iced ID Trojan It also says that it in

38
00:01:40,680 --> 00:01:42,720
it Hollows out a process and injects

39
00:01:42,720 --> 00:01:46,439
into it with all these reports they kind

40
00:01:46,439 --> 00:01:49,579
of brush over the idea of injection as

41
00:01:49,579 --> 00:01:51,479
established knowledge something that you

42
00:01:51,479 --> 00:01:53,880
already know and that's fair enough

43
00:01:53,880 --> 00:01:57,060
because if they had to get into bog down

44
00:01:57,060 --> 00:01:59,700
in details in every step the report

45
00:01:59,700 --> 00:02:03,000
should be never ending so basically the

46
00:02:03,000 --> 00:02:04,740
idea of process injection is being able

47
00:02:04,740 --> 00:02:07,920
to run code in the address space and

48
00:02:07,920 --> 00:02:10,440
context of a different process usually a

49
00:02:10,440 --> 00:02:12,420
legitimate one

50
00:02:12,420 --> 00:02:15,239
so first of all I'll go over processes

51
00:02:15,239 --> 00:02:18,239
and how they are formed in Windows so

52
00:02:18,239 --> 00:02:21,660
generally it's a single instance of an

53
00:02:21,660 --> 00:02:23,520
executing program that's what process is

54
00:02:23,520 --> 00:02:26,520
this is just a picture of task manager

55
00:02:26,520 --> 00:02:29,580
from my computer you'll notice that

56
00:02:29,580 --> 00:02:31,920
um it looks like a list of executable

57
00:02:31,920 --> 00:02:34,500
files but near the bottom there's NV

58
00:02:34,500 --> 00:02:36,420
display contained there's two copies of

59
00:02:36,420 --> 00:02:37,980
it so it isn't just a list of

60
00:02:37,980 --> 00:02:40,379
executables

61
00:02:40,379 --> 00:02:43,019
it's essentially a container for the

62
00:02:43,019 --> 00:02:44,099
resources

63
00:02:44,099 --> 00:02:46,518
being

64
00:02:48,900 --> 00:02:50,160
these are the resources being used

65
00:02:50,160 --> 00:02:55,680
process is made of uh unique numeric ID

66
00:02:55,680 --> 00:02:58,080
which is the second column there a

67
00:02:58,080 --> 00:03:01,080
program just executable code usually

68
00:03:01,080 --> 00:03:04,019
that's the um the executable file itself

69
00:03:04,019 --> 00:03:05,879
that's getting loaded into memory but it

70
00:03:05,879 --> 00:03:08,640
also constitutes any dlls any libraries

71
00:03:08,640 --> 00:03:11,760
that the process loads in a private

72
00:03:11,760 --> 00:03:13,800
address space it has a chunk of memory

73
00:03:13,800 --> 00:03:16,739
that belongs to it

74
00:03:16,739 --> 00:03:20,400
um there's a security context which is

75
00:03:20,400 --> 00:03:23,700
an access token that explains the user

76
00:03:23,700 --> 00:03:25,319
running it the Privileges they have

77
00:03:25,319 --> 00:03:28,980
security groups or whether they have

78
00:03:28,980 --> 00:03:31,379
whether they've sent the UAC so they're

79
00:03:31,379 --> 00:03:34,140
running as admin that sort of stuff

80
00:03:34,140 --> 00:03:36,980
um there's a list of open handles which

81
00:03:36,980 --> 00:03:40,379
they're Flags showing which resources

82
00:03:40,379 --> 00:03:44,099
the process is using they're the entire

83
00:03:44,099 --> 00:03:46,620
talk of themselves so they're not

84
00:03:46,620 --> 00:03:49,500
important for this talk and at least one

85
00:03:49,500 --> 00:03:51,480
thread thread to the important thing

86
00:03:51,480 --> 00:03:53,580
here so the next slide is

87
00:03:53,580 --> 00:03:55,680
a thread is listed in the windows

88
00:03:55,680 --> 00:03:57,659
internals but it has the entity within a

89
00:03:57,659 --> 00:03:58,980
process that can be scheduled for

90
00:03:58,980 --> 00:04:01,260
Execution which unless you know what it

91
00:04:01,260 --> 00:04:03,780
is doesn't really mean much it's the

92
00:04:03,780 --> 00:04:06,659
thing that is running the executable

93
00:04:06,659 --> 00:04:09,180
program you know uh you have code from

94
00:04:09,180 --> 00:04:12,120
the executables and dlls to execute the

95
00:04:12,120 --> 00:04:14,819
computer has physical cores that work

96
00:04:14,819 --> 00:04:17,100
one action at a time

97
00:04:17,100 --> 00:04:18,779
a thread is essentially a virtual

98
00:04:18,779 --> 00:04:20,779
representation of that it's how it's

99
00:04:20,779 --> 00:04:23,639
managing the resources

100
00:04:23,639 --> 00:04:25,440
dividing up you know how the operating

101
00:04:25,440 --> 00:04:27,419
system divides up the tasks that needs

102
00:04:27,419 --> 00:04:29,160
to be done

103
00:04:29,160 --> 00:04:31,280
um

104
00:04:31,620 --> 00:04:34,020
there is multi-threading the last slide

105
00:04:34,020 --> 00:04:36,500
said at least one thread is in a process

106
00:04:36,500 --> 00:04:40,020
processes can be have multiple threads

107
00:04:40,020 --> 00:04:42,900
that run in parallel and you can assign

108
00:04:42,900 --> 00:04:46,400
more or less during runtime as needed

109
00:04:46,400 --> 00:04:49,020
and you make threads with the create

110
00:04:49,020 --> 00:04:52,740
thread function which really only takes

111
00:04:52,740 --> 00:04:54,960
a function pointer argument which just

112
00:04:54,960 --> 00:04:57,960
says where in this executable code am I

113
00:04:57,960 --> 00:04:59,280
going to start if you have the

114
00:04:59,280 --> 00:05:01,620
permissions to create a thread you can

115
00:05:01,620 --> 00:05:04,740
put one in at a point in code

116
00:05:04,740 --> 00:05:07,020
and there is a function called create

117
00:05:07,020 --> 00:05:11,280
remote thread which is similar but has

118
00:05:11,280 --> 00:05:14,880
the quality that you can create a thread

119
00:05:14,880 --> 00:05:17,280
in a different process

120
00:05:17,280 --> 00:05:19,380
that's an important idea here because

121
00:05:19,380 --> 00:05:21,780
process injection

122
00:05:21,780 --> 00:05:25,020
is a Windows functionality it's not

123
00:05:25,020 --> 00:05:27,300
solely an attack it's a Windows

124
00:05:27,300 --> 00:05:31,039
functionality that attackers abuse

125
00:05:32,400 --> 00:05:34,800
um so why why why why would you do

126
00:05:34,800 --> 00:05:36,600
process injection

127
00:05:36,600 --> 00:05:38,580
um the main reason is for defensive

128
00:05:38,580 --> 00:05:40,919
Asian you want execution coming from

129
00:05:40,919 --> 00:05:42,120
what Loops to be a legitimate

130
00:05:42,120 --> 00:05:43,740
application what actually is a

131
00:05:43,740 --> 00:05:45,259
legitimate application just doing

132
00:05:45,259 --> 00:05:47,820
malicious activity

133
00:05:47,820 --> 00:05:50,039
um here's a picture from something I

134
00:05:50,039 --> 00:05:54,060
stored in 2020 uh you can see that the

135
00:05:54,060 --> 00:05:55,199
code

136
00:05:55,199 --> 00:05:57,960
is coming out of school exit that's the

137
00:05:57,960 --> 00:06:00,419
printer school or executable so what

138
00:06:00,419 --> 00:06:02,520
you've got there is the printer spooler

139
00:06:02,520 --> 00:06:04,800
seems to spin up a command prompt and

140
00:06:04,800 --> 00:06:06,720
run some

141
00:06:06,720 --> 00:06:08,840
um

142
00:06:09,199 --> 00:06:12,680
encoded Powershell

143
00:06:14,460 --> 00:06:15,720
um it's not

144
00:06:15,720 --> 00:06:18,060
just for confusing humans it does

145
00:06:18,060 --> 00:06:20,460
confuse humans when they see these weird

146
00:06:20,460 --> 00:06:22,620
processed trees but it's good for

147
00:06:22,620 --> 00:06:24,900
evading antivirus and EDR protections

148
00:06:24,900 --> 00:06:28,080
even EDR that are set up to detect

149
00:06:28,080 --> 00:06:29,819
process injection

150
00:06:29,819 --> 00:06:31,500
if they have functionalities that are

151
00:06:31,500 --> 00:06:33,539
like process disruption if I see

152
00:06:33,539 --> 00:06:35,160
something bad stop it

153
00:06:35,160 --> 00:06:37,440
a lot of them are going to bark at the

154
00:06:37,440 --> 00:06:40,199
idea of stopping

155
00:06:40,199 --> 00:06:44,360
a legitimate Windows X Cable in fear of

156
00:06:44,360 --> 00:06:47,460
breaking the system

157
00:06:47,460 --> 00:06:50,460
uh so here's a picture from I think it's

158
00:06:50,460 --> 00:06:51,900
Fortinet

159
00:06:51,900 --> 00:06:54,419
thing about quack bot and what quackbot

160
00:06:54,419 --> 00:06:56,699
was doing was it was searching for known

161
00:06:56,699 --> 00:07:00,120
security tools on the land and if it

162
00:07:00,120 --> 00:07:02,940
found one of those hex people running it

163
00:07:02,940 --> 00:07:06,600
would inject into a specific Target that

164
00:07:06,600 --> 00:07:08,940
it knew was whitelisted by the security

165
00:07:08,940 --> 00:07:11,520
software so if it found the host was

166
00:07:11,520 --> 00:07:13,919
running Surplus it would inject into a

167
00:07:13,919 --> 00:07:16,259
copy of mobsync which is some relative

168
00:07:16,259 --> 00:07:19,160
Windows mobile

169
00:07:20,099 --> 00:07:21,720
um other reasons privilege escalation

170
00:07:21,720 --> 00:07:23,819
it's not as common an issue these days

171
00:07:23,819 --> 00:07:26,880
because Windows has over Windows 8 10

172
00:07:26,880 --> 00:07:29,819
and 11 moved more towards the sort of

173
00:07:29,819 --> 00:07:32,639
least privileged model things will run

174
00:07:32,639 --> 00:07:34,319
with the least privilege possible until

175
00:07:34,319 --> 00:07:36,180
they need more

176
00:07:36,180 --> 00:07:38,880
um the idea was if you could inject into

177
00:07:38,880 --> 00:07:41,099
a process with higher levels of

178
00:07:41,099 --> 00:07:42,180
privilege

179
00:07:42,180 --> 00:07:44,099
you would then have access to those

180
00:07:44,099 --> 00:07:47,039
privileges an example there was one of

181
00:07:47,039 --> 00:07:50,460
your exploit modules for Windows 7

182
00:07:50,460 --> 00:07:52,500
um and a way to get around user access

183
00:07:52,500 --> 00:07:55,440
control UAC it would inject into a copy

184
00:07:55,440 --> 00:07:59,460
of explorer.exe which is a binary that

185
00:07:59,460 --> 00:08:01,740
is signed by Microsoft it has assigned

186
00:08:01,740 --> 00:08:03,840
Windows certificates

187
00:08:03,840 --> 00:08:07,280
which UAC doesn't trigger for

188
00:08:07,280 --> 00:08:11,400
and exploitation once you are injected

189
00:08:11,400 --> 00:08:12,780
into a process similar to how you get

190
00:08:12,780 --> 00:08:15,000
access to the Privileges you get access

191
00:08:15,000 --> 00:08:16,740
to whatever the memory and resources

192
00:08:16,740 --> 00:08:20,160
that process has the big one it

193
00:08:20,160 --> 00:08:21,720
I didn't put another build point in

194
00:08:21,720 --> 00:08:24,660
there the big one there is lsas

195
00:08:24,660 --> 00:08:26,759
um traditionally to steal credentials

196
00:08:26,759 --> 00:08:29,759
from lsas which is the executable that

197
00:08:29,759 --> 00:08:32,219
runs basically all the windows

198
00:08:32,219 --> 00:08:34,799
authentication stuff locally you would

199
00:08:34,799 --> 00:08:38,279
do a memory dump of that and then use a

200
00:08:38,279 --> 00:08:40,559
tool like mimikat on the dump

201
00:08:40,559 --> 00:08:43,620
but if you can inject into the lsas

202
00:08:43,620 --> 00:08:44,880
process you don't need to dump the

203
00:08:44,880 --> 00:08:46,620
memory you can just read it live and

204
00:08:46,620 --> 00:08:48,660
that way you're not putting anything to

205
00:08:48,660 --> 00:08:50,339
disk you're not putting that memory dump

206
00:08:50,339 --> 00:08:52,380
to disk

207
00:08:52,380 --> 00:08:53,220
um

208
00:08:53,220 --> 00:08:55,140
however things like that you do need

209
00:08:55,140 --> 00:08:58,019
High privileges not anyone can just

210
00:08:58,019 --> 00:09:00,540
inject into Elsa as you need to have the

211
00:09:00,540 --> 00:09:02,880
highest of high privileges so it's

212
00:09:02,880 --> 00:09:05,760
usually a later step in the attack chain

213
00:09:05,760 --> 00:09:09,420
so here's some examples of injection and

214
00:09:09,420 --> 00:09:11,760
how they actually work as a sort of high

215
00:09:11,760 --> 00:09:13,620
level abstraction classic dll injection

216
00:09:13,620 --> 00:09:16,880
when this was first sort of becoming

217
00:09:16,880 --> 00:09:19,260
popularized uh this was more common

218
00:09:19,260 --> 00:09:21,480
method you're in my wonderful Ms paint

219
00:09:21,480 --> 00:09:24,080
diagrams

220
00:09:24,180 --> 00:09:25,860
um so what you would do is you have your

221
00:09:25,860 --> 00:09:27,300
malicious code that is running whether

222
00:09:27,300 --> 00:09:28,320
that's

223
00:09:28,320 --> 00:09:30,180
um from a macro in a Word document

224
00:09:30,180 --> 00:09:31,800
whether that's

225
00:09:31,800 --> 00:09:35,040
remote code execution whatever you would

226
00:09:35,040 --> 00:09:38,519
rate yourself a dll with all your

227
00:09:38,519 --> 00:09:40,380
malicious actions you want to take your

228
00:09:40,380 --> 00:09:42,959
malware all energy allows those lovely

229
00:09:42,959 --> 00:09:46,260
Windows X keyboard code and then you

230
00:09:46,260 --> 00:09:48,300
have a Target process

231
00:09:48,300 --> 00:09:50,700
that you are wanting to inject into it's

232
00:09:50,700 --> 00:09:52,260
sitting there running happily with its

233
00:09:52,260 --> 00:09:54,480
legitimate contents

234
00:09:54,480 --> 00:09:56,600
um

235
00:09:56,839 --> 00:09:59,040
so first of all the malicious code

236
00:09:59,040 --> 00:10:00,899
identifies the process it wants to

237
00:10:00,899 --> 00:10:02,519
Target and then it uses a function

238
00:10:02,519 --> 00:10:04,980
called open process which gives it a

239
00:10:04,980 --> 00:10:06,839
handle essentially

240
00:10:06,839 --> 00:10:09,420
it'll it gives it access to this process

241
00:10:09,420 --> 00:10:12,380
and thus the

242
00:10:13,080 --> 00:10:15,600
you use you use Virtual alloc which was

243
00:10:15,600 --> 00:10:17,519
mentioned in the previous talk this is a

244
00:10:17,519 --> 00:10:19,680
function that just allocates our chunk

245
00:10:19,680 --> 00:10:22,440
of memory now you have open process

246
00:10:22,440 --> 00:10:24,720
successfully you can now

247
00:10:24,720 --> 00:10:27,360
allocate a remote chunk of memory in the

248
00:10:27,360 --> 00:10:29,220
Target process and what you do with this

249
00:10:29,220 --> 00:10:31,200
is you

250
00:10:31,200 --> 00:10:33,120
allocates a chunk of memory big enough

251
00:10:33,120 --> 00:10:36,779
for your the address of your dll

252
00:10:36,779 --> 00:10:39,180
wherever your dll is in memory you put

253
00:10:39,180 --> 00:10:42,739
an address into the process

254
00:10:42,839 --> 00:10:44,760
um

255
00:10:44,760 --> 00:10:47,519
yeah then essentially there's a function

256
00:10:47,519 --> 00:10:50,880
called load Library you create a new

257
00:10:50,880 --> 00:10:53,100
thread with the create remote thread

258
00:10:53,100 --> 00:10:55,700
function I mentioned before

259
00:10:55,700 --> 00:10:58,860
to use the load Library function against

260
00:10:58,860 --> 00:11:01,019
the address you've just written at which

261
00:11:01,019 --> 00:11:04,200
point the new thread that comes into the

262
00:11:04,200 --> 00:11:07,860
process says okay my job is to load this

263
00:11:07,860 --> 00:11:10,380
Library into the function and start

264
00:11:10,380 --> 00:11:13,380
running it and all your malware rather

265
00:11:13,380 --> 00:11:18,180
than sitting in a dll on this is then

266
00:11:18,180 --> 00:11:21,360
pull into the legitimate process and

267
00:11:21,360 --> 00:11:23,579
start running

268
00:11:23,579 --> 00:11:24,240
um

269
00:11:24,240 --> 00:11:27,060
this isn't particularly stealthy

270
00:11:27,060 --> 00:11:30,660
they're still used because sometimes you

271
00:11:30,660 --> 00:11:31,980
know people don't care about Stealth

272
00:11:31,980 --> 00:11:33,779
because it works you know if you get

273
00:11:33,779 --> 00:11:36,000
caught it doesn't matter if you

274
00:11:36,000 --> 00:11:37,800
've got in and out fast enough it

275
00:11:37,800 --> 00:11:38,760
doesn't matter if you get caught if

276
00:11:38,760 --> 00:11:41,220
you've already done your action

277
00:11:41,220 --> 00:11:44,459
um so yeah writing the dll to this gives

278
00:11:44,459 --> 00:11:46,740
the antivirus a chance to see oh

279
00:11:46,740 --> 00:11:49,320
something bad has landed on me

280
00:11:49,320 --> 00:11:51,600
I'll delete that

281
00:11:51,600 --> 00:11:52,980
but if we're already writing something

282
00:11:52,980 --> 00:11:54,540
to the process

283
00:11:54,540 --> 00:11:57,980
why don't instead of writing the address

284
00:11:57,980 --> 00:12:00,660
to something on disk why don't we just

285
00:12:00,660 --> 00:12:03,180
allocate more memory and write our

286
00:12:03,180 --> 00:12:05,579
malware into the process

287
00:12:05,579 --> 00:12:06,360
um

288
00:12:06,360 --> 00:12:08,640
the reason is

289
00:12:08,640 --> 00:12:09,300
um

290
00:12:09,300 --> 00:12:13,219
your code will have

291
00:12:13,860 --> 00:12:16,260
absolute addresses there will be you

292
00:12:16,260 --> 00:12:19,079
know commands in there that say jump to

293
00:12:19,079 --> 00:12:21,180
this memory address

294
00:12:21,180 --> 00:12:23,420
if you copy your

295
00:12:23,420 --> 00:12:27,360
malware into memory you don't have your

296
00:12:27,360 --> 00:12:30,420
process in there you have a copy of the

297
00:12:30,420 --> 00:12:32,100
process in there which will have

298
00:12:32,100 --> 00:12:34,200
different memory addresses

299
00:12:34,200 --> 00:12:36,899
so what you would need is what's called

300
00:12:36,899 --> 00:12:39,779
a relocation table which is part of all

301
00:12:39,779 --> 00:12:42,060
processing Windows which essentially

302
00:12:42,060 --> 00:12:44,100
Tran if you move

303
00:12:44,100 --> 00:12:47,040
a process in memory it translates all of

304
00:12:47,040 --> 00:12:49,920
these absolute addresses in memory

305
00:12:49,920 --> 00:12:51,899
to what they should be

306
00:12:51,899 --> 00:12:54,600
um but if you're just copying it into a

307
00:12:54,600 --> 00:12:56,760
process it's not going to do that you

308
00:12:56,760 --> 00:12:58,740
need to manually

309
00:12:58,740 --> 00:13:02,160
reach out to the relocation table and

310
00:13:02,160 --> 00:13:05,160
change those addresses

311
00:13:05,160 --> 00:13:08,100
so reflective dll injection takes

312
00:13:08,100 --> 00:13:09,779
advantage of a thing called reflective

313
00:13:09,779 --> 00:13:11,940
programming which is the ability of some

314
00:13:11,940 --> 00:13:14,940
programming languages to examine itself

315
00:13:14,940 --> 00:13:17,700
during runtime for example if you wanted

316
00:13:17,700 --> 00:13:21,600
to return the if you had a variable in

317
00:13:21,600 --> 00:13:24,000
code and you wanted your program to

318
00:13:24,000 --> 00:13:26,519
return what type of variable it was so

319
00:13:26,519 --> 00:13:28,200
you had an integer and you want to

320
00:13:28,200 --> 00:13:32,040
return this is an integer variable

321
00:13:32,040 --> 00:13:33,540
the code isn't going to be able to see

322
00:13:33,540 --> 00:13:37,079
that from inside the runtime it has to

323
00:13:37,079 --> 00:13:41,160
look at the process as a whole to

324
00:13:41,160 --> 00:13:44,579
understand these sort of metadata ideas

325
00:13:44,579 --> 00:13:46,440
uh

326
00:13:46,440 --> 00:13:50,339
so that's I kind of went over you are

327
00:13:50,339 --> 00:13:51,720
opening the process stages before

328
00:13:51,720 --> 00:13:54,120
virtual alopec same as before except

329
00:13:54,120 --> 00:13:56,279
you're writing a big chunk of memory

330
00:13:56,279 --> 00:13:58,560
yes thank you your battery is running

331
00:13:58,560 --> 00:14:00,800
low

332
00:14:01,380 --> 00:14:03,300
um so what you do is you are writing the

333
00:14:03,300 --> 00:14:05,760
dll in memory it's unloaded because it

334
00:14:05,760 --> 00:14:08,940
has all these incorrect addresses and

335
00:14:08,940 --> 00:14:11,279
you have a little chunk of code that is

336
00:14:11,279 --> 00:14:13,139
the reflective loader this is going to

337
00:14:13,139 --> 00:14:15,540
sort all those problems and load the dll

338
00:14:15,540 --> 00:14:18,199
into memory

339
00:14:19,019 --> 00:14:22,139
so the loader code

340
00:14:22,139 --> 00:14:24,300
you create remote thread and point at

341
00:14:24,300 --> 00:14:26,399
the loader code it

342
00:14:26,399 --> 00:14:30,060
calculates its own location in memory

343
00:14:30,060 --> 00:14:33,000
and then allocates another chunk of

344
00:14:33,000 --> 00:14:34,200
memory

345
00:14:34,200 --> 00:14:36,899
it then copies the dll into that so you

346
00:14:36,899 --> 00:14:38,899
have another copy

347
00:14:38,899 --> 00:14:42,120
from there it knows the chunk of memory

348
00:14:42,120 --> 00:14:45,720
it's in it can find the relocation table

349
00:14:45,720 --> 00:14:48,000
through the reflective

350
00:14:48,000 --> 00:14:51,420
aspects and then translate all the

351
00:14:51,420 --> 00:14:53,399
addresses in the code so it can finally

352
00:14:53,399 --> 00:14:56,940
run your malware and this is sort of the

353
00:14:56,940 --> 00:14:59,100
Cobalt strike blog standard This Is How

354
00:14:59,100 --> 00:15:00,779
They are loading all their individual

355
00:15:00,779 --> 00:15:03,120
modules in whenever you are setting them

356
00:15:03,120 --> 00:15:05,240
off

357
00:15:05,940 --> 00:15:08,279
I'll skip over

358
00:15:08,279 --> 00:15:10,560
process hollowing is a lot favorite a

359
00:15:10,560 --> 00:15:13,260
lot of the malware rather than um rather

360
00:15:13,260 --> 00:15:15,779
than these tool kits like Co-op strike

361
00:15:15,779 --> 00:15:19,980
your quack Bots your trick Bots

362
00:15:19,980 --> 00:15:21,899
okay it's dead

363
00:15:21,899 --> 00:15:23,699
um

364
00:15:23,699 --> 00:15:25,750
sir pen here

365
00:15:25,750 --> 00:15:32,659
[Music]

366
00:15:35,279 --> 00:15:37,019
that's a big so I'm not writing on a

367
00:15:37,019 --> 00:15:37,820
whiteboard with that

368
00:15:37,820 --> 00:15:39,920
[Music]

369
00:15:39,920 --> 00:15:42,000
I'm just wondering if there's a pen for

370
00:15:42,000 --> 00:15:43,680
the Whiteboard

371
00:15:43,680 --> 00:15:46,760
[Music]

372
00:15:54,800 --> 00:15:58,639
so let's see if I can remember the steps

373
00:15:58,639 --> 00:16:01,860
so the idea is you have your malicious

374
00:16:01,860 --> 00:16:05,519
code you have your target

375
00:16:05,519 --> 00:16:07,380
and just make sure everyone can see this

376
00:16:07,380 --> 00:16:12,480
right okay you have your target process

377
00:16:12,480 --> 00:16:15,360
um you have sort of the legitimate code

378
00:16:15,360 --> 00:16:16,740
that's running

379
00:16:16,740 --> 00:16:21,600
so the idea of process following is that

380
00:16:21,600 --> 00:16:23,839
rather than looking for

381
00:16:23,839 --> 00:16:26,579
a already running application if you

382
00:16:26,579 --> 00:16:28,980
just create a new instance of it you

383
00:16:28,980 --> 00:16:31,680
don't need any of those legitimate stuff

384
00:16:31,680 --> 00:16:33,180
so you

385
00:16:33,180 --> 00:16:34,920
create the process

386
00:16:34,920 --> 00:16:38,160
your malicious code open process to get

387
00:16:38,160 --> 00:16:41,040
a handle to it and then it uses the

388
00:16:41,040 --> 00:16:44,639
function to unmap all of this memory

389
00:16:44,639 --> 00:16:47,279
so essentially you are hollowing it out

390
00:16:47,279 --> 00:16:50,420
you're removing all

391
00:16:50,459 --> 00:16:52,500
legitimate application but you're

392
00:16:52,500 --> 00:16:54,540
keeping the shell that has the

393
00:16:54,540 --> 00:16:56,399
Privileges that has

394
00:16:56,399 --> 00:16:59,160
the name in

395
00:16:59,160 --> 00:17:00,720
the Windows operating system is running

396
00:17:00,720 --> 00:17:03,000
it still thinks it's calculator or

397
00:17:03,000 --> 00:17:04,799
notepad

398
00:17:04,799 --> 00:17:07,439
um you then same as before you write

399
00:17:07,439 --> 00:17:11,600
your own malware in here

400
00:17:12,000 --> 00:17:13,619
and

401
00:17:13,619 --> 00:17:16,980
similar to the reflective stuff you need

402
00:17:16,980 --> 00:17:19,439
to translate all these memory addresses

403
00:17:19,439 --> 00:17:21,720
and it's a it's a very similar process

404
00:17:21,720 --> 00:17:23,220
to the reflective

405
00:17:23,220 --> 00:17:26,699
dll injection but because you're writing

406
00:17:26,699 --> 00:17:29,400
directly here you can

407
00:17:29,400 --> 00:17:31,440
you just have to find the relocation

408
00:17:31,440 --> 00:17:33,540
table and

409
00:17:33,540 --> 00:17:36,179
have a bit of Shell Code that manually

410
00:17:36,179 --> 00:17:39,179
tweaks all the addresses

411
00:17:39,179 --> 00:17:41,299
um

412
00:17:45,780 --> 00:17:47,860
what was the next slide

413
00:17:47,860 --> 00:17:50,979
[Music]

414
00:17:56,220 --> 00:17:58,020
um well I'll go over some identification

415
00:17:58,020 --> 00:18:02,039
instead so you

416
00:18:02,039 --> 00:18:05,160
have these things happening if you think

417
00:18:05,160 --> 00:18:06,480
something's gone wrong how are you going

418
00:18:06,480 --> 00:18:09,900
to be able to ID that threat injection

419
00:18:09,900 --> 00:18:12,660
has happened so with a classic

420
00:18:12,660 --> 00:18:16,380
um with a classic DL injection it's not

421
00:18:16,380 --> 00:18:20,520
too complex to find out each process has

422
00:18:20,520 --> 00:18:24,120
what's known as an e-process block and a

423
00:18:24,120 --> 00:18:26,820
PEB that's associated with it as well I

424
00:18:26,820 --> 00:18:28,860
can't remember what PV stands for and it

425
00:18:28,860 --> 00:18:32,160
wasn't slide but that contains a lot of

426
00:18:32,160 --> 00:18:34,200
metadata about the process and one thing

427
00:18:34,200 --> 00:18:37,440
in particular is the PEB block has all

428
00:18:37,440 --> 00:18:39,000
of the dlls that has been have been

429
00:18:39,000 --> 00:18:42,240
loaded in and their memory addresses uh

430
00:18:42,240 --> 00:18:43,799
so if you

431
00:18:43,799 --> 00:18:49,080
have a load of system 32 dlls loaded and

432
00:18:49,080 --> 00:18:53,520
one one that's in you know my music

433
00:18:53,520 --> 00:18:56,160
it's a bit interesting that you know a

434
00:18:56,160 --> 00:18:59,280
big chunk of dll library has been loaded

435
00:18:59,280 --> 00:19:01,760
from a random place

436
00:19:01,760 --> 00:19:03,960
uh that doesn't really work for

437
00:19:03,960 --> 00:19:06,480
reflective injection though because vdll

438
00:19:06,480 --> 00:19:09,000
doesn't exist on disk so it can't be

439
00:19:09,000 --> 00:19:11,160
mapped into the table

440
00:19:11,160 --> 00:19:16,580
but then you have the idea that

441
00:19:16,580 --> 00:19:19,320
evident absence of evidence is evidence

442
00:19:19,320 --> 00:19:22,740
of absence if you have

443
00:19:22,740 --> 00:19:26,700
um a dll that is in the code that

444
00:19:26,700 --> 00:19:29,220
doesn't map to anything on disk

445
00:19:29,220 --> 00:19:31,740
then where did the library come from you

446
00:19:31,740 --> 00:19:34,559
know you you can put a gun anywhere in a

447
00:19:34,559 --> 00:19:36,179
suitcase but when it goes through an

448
00:19:36,179 --> 00:19:38,700
x-ray machine and the gun silhouette

449
00:19:38,700 --> 00:19:40,740
shows up

450
00:19:40,740 --> 00:19:43,919
you can identify it we know what dlls

451
00:19:43,919 --> 00:19:46,580
look like they have the same header as

452
00:19:46,580 --> 00:19:49,260
executables they all fit the same

453
00:19:49,260 --> 00:19:52,200
function the other same format so if you

454
00:19:52,200 --> 00:19:54,120
look for that within a process and then

455
00:19:54,120 --> 00:19:56,880
try and map it to

456
00:19:56,880 --> 00:19:59,700
known dlls

457
00:19:59,700 --> 00:20:03,080
um you can identify anomalies

458
00:20:03,080 --> 00:20:06,380
uh on a similar on a similar note

459
00:20:06,380 --> 00:20:10,020
executable memory in a process all

460
00:20:10,020 --> 00:20:13,320
memory has whether it's read write

461
00:20:13,320 --> 00:20:17,340
executable or a combination of them

462
00:20:17,340 --> 00:20:20,160
if you have executable memory in a

463
00:20:20,160 --> 00:20:24,380
process that doesn't map to known

464
00:20:24,380 --> 00:20:28,220
executables or known libraries

465
00:20:28,220 --> 00:20:31,919
why is it there why is it X cubed why

466
00:20:31,919 --> 00:20:34,080
why is there stuff executing in this

467
00:20:34,080 --> 00:20:36,059
process that the computer doesn't know

468
00:20:36,059 --> 00:20:38,240
about

469
00:20:38,400 --> 00:20:40,020
um

470
00:20:40,020 --> 00:20:42,419
and on a detection front I mean those

471
00:20:42,419 --> 00:20:44,520
are great for identification If you're

472
00:20:44,520 --> 00:20:46,500
sort of an instant responder looking at

473
00:20:46,500 --> 00:20:50,280
things but as far as

474
00:20:50,280 --> 00:20:53,640
detecting it proactively as an EDR goes

475
00:20:53,640 --> 00:20:57,200
it's not great most of the detection

476
00:20:57,200 --> 00:21:01,500
revolves around those

477
00:21:01,679 --> 00:21:03,600
functions that I was mentioning you know

478
00:21:03,600 --> 00:21:05,220
create remote thread

479
00:21:05,220 --> 00:21:07,620
virtual Outlook X things that allow you

480
00:21:07,620 --> 00:21:09,900
to allocate memory in a remote process

481
00:21:09,900 --> 00:21:13,500
or to create a thread in a different

482
00:21:13,500 --> 00:21:15,179
process

483
00:21:15,179 --> 00:21:18,780
uh Windows has a thing called etw event

484
00:21:18,780 --> 00:21:21,120
tracing for Windows there's an entire

485
00:21:21,120 --> 00:21:23,880
talk in our long talk in and of itself

486
00:21:23,880 --> 00:21:26,340
just to discuss all the things that can

487
00:21:26,340 --> 00:21:29,940
do but generally it it's a logging

488
00:21:29,940 --> 00:21:31,919
system that generates application Level

489
00:21:31,919 --> 00:21:34,020
stuff down to Kernel level stuff just

490
00:21:34,020 --> 00:21:35,880
what is happening on the operating

491
00:21:35,880 --> 00:21:37,679
system and one of the things it can do

492
00:21:37,679 --> 00:21:40,980
is identify when these remote calls are

493
00:21:40,980 --> 00:21:42,960
being made

494
00:21:42,960 --> 00:21:44,299
um

495
00:21:44,299 --> 00:21:47,760
EDR tends to do a similar thing but they

496
00:21:47,760 --> 00:21:49,440
use their own

497
00:21:49,440 --> 00:21:52,740
sort of the home built moonshine ways of

498
00:21:52,740 --> 00:21:56,039
doing so usually using Windows hooks so

499
00:21:56,039 --> 00:21:58,679
the idea is that you call create remote

500
00:21:58,679 --> 00:22:01,679
thread the antivirus goes or the EDR

501
00:22:01,679 --> 00:22:02,940
goes hey

502
00:22:02,940 --> 00:22:04,679
come to me first so I can check what

503
00:22:04,679 --> 00:22:06,600
you're doing and then I'll forward it on

504
00:22:06,600 --> 00:22:08,940
at which point that's usually when

505
00:22:08,940 --> 00:22:11,700
EDR with protection abilities sort of

506
00:22:11,700 --> 00:22:13,740
disrupt the chain

507
00:22:13,740 --> 00:22:14,880
uh

508
00:22:14,880 --> 00:22:17,220
I think one of the big caveats to go

509
00:22:17,220 --> 00:22:19,799
over in this is anyone who's worked with

510
00:22:19,799 --> 00:22:21,840
windows for a long amount of time will

511
00:22:21,840 --> 00:22:24,720
know that there is no one way of doing

512
00:22:24,720 --> 00:22:27,120
things in Windows if you have create

513
00:22:27,120 --> 00:22:29,760
remote thread there are

514
00:22:29,760 --> 00:22:31,679
that there's at least there's going to

515
00:22:31,679 --> 00:22:34,260
be at least five undocumented function

516
00:22:34,260 --> 00:22:39,440
calls that do the same thing so these

517
00:22:39,539 --> 00:22:41,340
these hooks that are looking for certain

518
00:22:41,340 --> 00:22:42,419
calls

519
00:22:42,419 --> 00:22:45,120
aren't entirely

520
00:22:45,120 --> 00:22:47,220
reliable because there are different

521
00:22:47,220 --> 00:22:49,500
ways of doing it and

522
00:22:49,500 --> 00:22:51,539
um as Kieran in the last talk mentioned

523
00:22:51,539 --> 00:22:54,059
you can even write your own sort of

524
00:22:54,059 --> 00:22:55,799
Homebrew

525
00:22:55,799 --> 00:22:58,500
strips of shell codes that do a lot of

526
00:22:58,500 --> 00:23:00,980
the same

527
00:23:01,140 --> 00:23:02,880
um a lot of the same steps

528
00:23:02,880 --> 00:23:06,419
and can call load library or virtual

529
00:23:06,419 --> 00:23:09,179
dialects without it showing up in the

530
00:23:09,179 --> 00:23:11,940
windows traces because it's sort of

531
00:23:11,940 --> 00:23:14,340
directly accessing rather than a

532
00:23:14,340 --> 00:23:16,240
standard call

533
00:23:16,240 --> 00:23:16,620
[Music]

534
00:23:16,620 --> 00:23:18,539
um

535
00:23:18,539 --> 00:23:20,340
there was a conclusion slide but I can't

536
00:23:20,340 --> 00:23:21,720
remember what was in it other than

537
00:23:21,720 --> 00:23:24,179
process injection is a thing

538
00:23:24,179 --> 00:23:26,159
so

539
00:23:26,159 --> 00:23:27,240
um yeah

540
00:23:27,240 --> 00:23:29,460
so it's a brief Whirlwind tour just to

541
00:23:29,460 --> 00:23:31,260
give you a bit more of an understanding

542
00:23:31,260 --> 00:23:32,760
of what these threat intelligence

543
00:23:32,760 --> 00:23:35,280
reports brush over

544
00:23:35,280 --> 00:23:37,399
um

545
00:23:37,919 --> 00:23:39,840
you've got one minute before lunch does

546
00:23:39,840 --> 00:23:41,880
anyone have a question

547
00:23:41,880 --> 00:23:44,159
there's

548
00:23:44,159 --> 00:23:47,460
other units

549
00:23:47,460 --> 00:23:50,460
identification

550
00:23:54,059 --> 00:23:58,340
of digital yellow that is memory

551
00:23:58,340 --> 00:24:03,959
uh how much is that performance

552
00:24:06,740 --> 00:24:09,799
oh uh this isn't something that you do

553
00:24:09,799 --> 00:24:12,600
continuously it's not great for a

554
00:24:12,600 --> 00:24:15,539
detection methods because

555
00:24:15,539 --> 00:24:18,960
it's less the action takes up resources

556
00:24:18,960 --> 00:24:21,659
but more you would you know how often

557
00:24:21,659 --> 00:24:23,340
would you check

558
00:24:23,340 --> 00:24:24,419
it

559
00:24:24,419 --> 00:24:26,000
it's beautiful

560
00:24:26,000 --> 00:24:29,340
sort of dead disc if you get a chunk of

561
00:24:29,340 --> 00:24:31,760
memory dumped from an operating system

562
00:24:31,760 --> 00:24:34,740
and someone says something happened on

563
00:24:34,740 --> 00:24:36,659
this machine please help I don't know

564
00:24:36,659 --> 00:24:39,080
what to do

565
00:24:43,860 --> 00:24:45,419
um you can ask me

566
00:24:45,419 --> 00:24:47,770
back here whenever it's lunch time

567
00:24:47,770 --> 00:24:52,930
[Applause]

