1
00:00:02,960 --> 00:00:05,120
uh can everyone hear me

2
00:00:05,120 --> 00:00:07,600
yes awesome uh so today we're gonna be

3
00:00:07,600 --> 00:00:09,920
talking about no more alert one which is

4
00:00:09,920 --> 00:00:11,280
moving from demonstrating that

5
00:00:11,280 --> 00:00:13,200
vulnerability exists to actually showing

6
00:00:13,200 --> 00:00:14,480
how somebody would exploit it when

7
00:00:14,480 --> 00:00:15,679
you're writing penetration testing

8
00:00:15,679 --> 00:00:17,600
reports um there'll be a couple of

9
00:00:17,600 --> 00:00:19,439
examples of live attacks that you've

10
00:00:19,439 --> 00:00:21,439
pulled off in real life engagements i'll

11
00:00:21,439 --> 00:00:22,640
be talking about how you should probably

12
00:00:22,640 --> 00:00:24,640
start structuring reports and there'll

13
00:00:24,640 --> 00:00:26,000
be a little bit of kind of taking the

14
00:00:26,000 --> 00:00:27,680
piss out of people as we go through

15
00:00:27,680 --> 00:00:28,840
which should be good

16
00:00:28,840 --> 00:00:31,920
fun boring stuff out the way um i'm liam

17
00:00:31,920 --> 00:00:33,920
i'm a senior development consultant at

18
00:00:33,920 --> 00:00:35,840
pentas people i'm the systems architect

19
00:00:35,840 --> 00:00:37,520
at dark invader and i volunteer as the

20
00:00:37,520 --> 00:00:39,600
it director at trust leads i specialize

21
00:00:39,600 --> 00:00:41,680
in pen testing and offset development

22
00:00:41,680 --> 00:00:43,040
and i've with a lot of breaking stuff

23
00:00:43,040 --> 00:00:45,120
that's only grown since i was a child i

24
00:00:45,120 --> 00:00:46,719
was a bit of a terror in school as you

25
00:00:46,719 --> 00:00:48,399
might have imagined

26
00:00:48,399 --> 00:00:49,520
uh you can see all my social stuff on

27
00:00:49,520 --> 00:00:51,280
the screen there twitter is just me

28
00:00:51,280 --> 00:00:52,879
rambling uh but the github has some

29
00:00:52,879 --> 00:00:54,399
pretty cool tools for any pentesters out

30
00:00:54,399 --> 00:00:56,719
there and you can email me any questions

31
00:00:56,719 --> 00:00:58,399
queries or cat pictures please don't

32
00:00:58,399 --> 00:01:00,160
sign me up to the dodgy websites though

33
00:01:00,160 --> 00:01:01,840
while it's very funny i don't want to

34
00:01:01,840 --> 00:01:04,559
see all those emails come through

35
00:01:04,559 --> 00:01:07,680
so jumping right into it

36
00:01:07,680 --> 00:01:09,760
modern beauty standards

37
00:01:09,760 --> 00:01:11,280
so the first thing we're going to touch

38
00:01:11,280 --> 00:01:13,119
upon here is how pentesters should be

39
00:01:13,119 --> 00:01:14,880
putting together incredibly informative

40
00:01:14,880 --> 00:01:17,360
proof of concepts the badly crop nessus

41
00:01:17,360 --> 00:01:19,200
output is a thing of the past and

42
00:01:19,200 --> 00:01:20,560
welcome to the red team version of

43
00:01:20,560 --> 00:01:23,119
makeup palettes in photoshop

44
00:01:23,119 --> 00:01:24,720
more seriously how many people here have

45
00:01:24,720 --> 00:01:25,920
viewed a report that either doesn't

46
00:01:25,920 --> 00:01:28,240
fully explain the issues it describes

47
00:01:28,240 --> 00:01:29,680
all the associated proof of concepts

48
00:01:29,680 --> 00:01:30,960
don't really show how the vulnerability

49
00:01:30,960 --> 00:01:34,240
would legitimately be exploited

50
00:01:34,240 --> 00:01:35,840
judging by the title of this talk you

51
00:01:35,840 --> 00:01:37,200
can tell which one is going to be the

52
00:01:37,200 --> 00:01:40,640
prime example of that

53
00:01:40,640 --> 00:01:43,360
pretty pocs how we make our screenshots

54
00:01:43,360 --> 00:01:45,600
look clean and professional i'll save

55
00:01:45,600 --> 00:01:46,640
everyone the bother of reading out

56
00:01:46,640 --> 00:01:49,040
what's behind me i think we can all read

57
00:01:49,040 --> 00:01:50,880
or at least i hope so um and i

58
00:01:50,880 --> 00:01:52,479
appreciate this is incredibly basic

59
00:01:52,479 --> 00:01:54,479
advice but as any consultant worth their

60
00:01:54,479 --> 00:01:56,479
salt will can tell you the clearer a

61
00:01:56,479 --> 00:01:57,840
report is the less questions you're

62
00:01:57,840 --> 00:01:59,520
going to get asked about it and thus the

63
00:01:59,520 --> 00:02:01,360
more efficiently you can work

64
00:02:01,360 --> 00:02:02,960
there's nothing worse than being dragged

65
00:02:02,960 --> 00:02:04,320
into an hour long meeting which could

66
00:02:04,320 --> 00:02:05,680
have been avoided if you just stuck a

67
00:02:05,680 --> 00:02:07,840
little box around the bit of the proof

68
00:02:07,840 --> 00:02:10,239
of concept the client needed to focus on

69
00:02:10,239 --> 00:02:12,640
similarly avoiding having your abilities

70
00:02:12,640 --> 00:02:14,319
questioned by making screenshots look a

71
00:02:14,319 --> 00:02:15,920
little bit more technical is something

72
00:02:15,920 --> 00:02:17,440
everyone's imposter syndrome could do

73
00:02:17,440 --> 00:02:22,520
with i know everybody suffers from it

74
00:02:23,520 --> 00:02:24,319
so

75
00:02:24,319 --> 00:02:26,400
liam all your other stuff is in gray why

76
00:02:26,400 --> 00:02:28,640
use green for your reports like this one

77
00:02:28,640 --> 00:02:30,640
well two reasons the first one is that

78
00:02:30,640 --> 00:02:32,319
it was well when i first started out i

79
00:02:32,319 --> 00:02:33,440
worked for a company called princess

80
00:02:33,440 --> 00:02:35,120
people and that was the employee's

81
00:02:35,120 --> 00:02:36,879
colors so it just made the report look a

82
00:02:36,879 --> 00:02:38,879
bit a little bit more thematic um feel

83
00:02:38,879 --> 00:02:40,879
free to do the same in if when you

84
00:02:40,879 --> 00:02:43,040
wander out into the fabulous world of

85
00:02:43,040 --> 00:02:44,800
pen testing yourself and that makes the

86
00:02:44,800 --> 00:02:47,120
reports just look more cohesive

87
00:02:47,120 --> 00:02:48,720
the other element is that teachers have

88
00:02:48,720 --> 00:02:50,160
now been instructed to use green pens

89
00:02:50,160 --> 00:02:51,519
when marking work as it softens the

90
00:02:51,519 --> 00:02:52,879
bloat and doesn't look confrontational

91
00:02:52,879 --> 00:02:56,160
now that might seem slightly silly but

92
00:02:56,160 --> 00:02:58,879
any pentesters in the room

93
00:02:58,879 --> 00:03:00,239
one or two how many times you get into

94
00:03:00,239 --> 00:03:01,360
arguments with clients because they

95
00:03:01,360 --> 00:03:02,640
don't like the work you've done because

96
00:03:02,640 --> 00:03:04,319
you ripped to a new one yeah lots of

97
00:03:04,319 --> 00:03:06,480
nods exactly this just helps soften the

98
00:03:06,480 --> 00:03:08,640
blow helps ease them into it um the

99
00:03:08,640 --> 00:03:10,480
absolute you know clients at times do

100
00:03:10,480 --> 00:03:11,760
forget that we're working towards the

101
00:03:11,760 --> 00:03:13,440
same goal and if your proof of concepts

102
00:03:13,440 --> 00:03:15,360
can avoid alienating them further this

103
00:03:15,360 --> 00:03:16,800
will again reduce the amount of time

104
00:03:16,800 --> 00:03:18,319
spent working in client relationships

105
00:03:18,319 --> 00:03:19,440
when what you want to be doing is

106
00:03:19,440 --> 00:03:23,280
performing high quality security testing

107
00:03:23,280 --> 00:03:25,200
we'll get on to more of those client

108
00:03:25,200 --> 00:03:27,280
client relationships in a little bit

109
00:03:27,280 --> 00:03:28,710
i've got some funny stories

110
00:03:28,710 --> 00:03:30,720
[Music]

111
00:03:30,720 --> 00:03:32,560
next one last white box redux the live

112
00:03:32,560 --> 00:03:34,799
password for the application why do we

113
00:03:34,799 --> 00:03:37,440
include redaction in our reports

114
00:03:37,440 --> 00:03:39,519
well firstly in this example this is a

115
00:03:39,519 --> 00:03:40,959
live password to their application

116
00:03:40,959 --> 00:03:42,720
that's been exfiltrated via crosstalk

117
00:03:42,720 --> 00:03:43,920
scripting attack i'm going to be showing

118
00:03:43,920 --> 00:03:46,480
you in a little bit the full attack

119
00:03:46,480 --> 00:03:48,000
chain for this as i said will be shown

120
00:03:48,000 --> 00:03:49,440
later giving highly insensitive

121
00:03:49,440 --> 00:03:51,280
information like this out is highly ill

122
00:03:51,280 --> 00:03:52,480
advised

123
00:03:52,480 --> 00:03:53,840
generally the person who receives the

124
00:03:53,840 --> 00:03:55,040
report will then chop it into little

125
00:03:55,040 --> 00:03:56,720
bits and send it out to internal

126
00:03:56,720 --> 00:03:58,159
security teams

127
00:03:58,159 --> 00:03:59,360
these teams do not need to know these

128
00:03:59,360 --> 00:04:00,400
passwords

129
00:04:00,400 --> 00:04:02,000
nor should they

130
00:04:02,000 --> 00:04:03,439
similarly that password could be used

131
00:04:03,439 --> 00:04:05,200
across any of the other services that

132
00:04:05,200 --> 00:04:06,720
the person who's fallen victim to our

133
00:04:06,720 --> 00:04:10,080
attack has created

134
00:04:10,080 --> 00:04:10,879
that

135
00:04:10,879 --> 00:04:12,879
to avoid any accusations of malpractice

136
00:04:12,879 --> 00:04:14,879
then because you know somebody getting

137
00:04:14,879 --> 00:04:16,160
logged into your facebook accounts and

138
00:04:16,160 --> 00:04:18,639
starts posting all kinds of ridiculous

139
00:04:18,639 --> 00:04:20,639
things on there

140
00:04:20,639 --> 00:04:22,320
uh it's easier just to redact it it

141
00:04:22,320 --> 00:04:24,240
removes any accusation from there nobody

142
00:04:24,240 --> 00:04:26,240
can accuse you or anybody to then have

143
00:04:26,240 --> 00:04:27,520
the report

144
00:04:27,520 --> 00:04:30,240
of being dodgy and clients just like it

145
00:04:30,240 --> 00:04:31,520
like them have a bit a little bit more

146
00:04:31,520 --> 00:04:32,880
clean

147
00:04:32,880 --> 00:04:34,720
naturally supplying passwords separately

148
00:04:34,720 --> 00:04:36,560
to appropriate individuals can be sorted

149
00:04:36,560 --> 00:04:37,440
out

150
00:04:37,440 --> 00:04:38,800
but don't do it in the main body of your

151
00:04:38,800 --> 00:04:40,880
report and have a conversation with the

152
00:04:40,880 --> 00:04:42,479
client before you start doing anything

153
00:04:42,479 --> 00:04:44,800
like that

154
00:04:48,000 --> 00:04:50,240
the test ssl problem

155
00:04:50,240 --> 00:04:51,680
the first thing we'll touch upon here is

156
00:04:51,680 --> 00:04:53,120
how pen testers should be putting

157
00:04:53,120 --> 00:04:54,560
together incredibly informative proof of

158
00:04:54,560 --> 00:04:55,840
concepts that's kind of the basis of the

159
00:04:55,840 --> 00:04:58,239
whole talk

160
00:04:59,360 --> 00:05:01,919
test ssl is a kind of unique problem

161
00:05:01,919 --> 00:05:03,199
because it's something that you run on

162
00:05:03,199 --> 00:05:04,960
basically every engagement and it

163
00:05:04,960 --> 00:05:07,120
provides loads of really really good

164
00:05:07,120 --> 00:05:08,720
information that you can use and you can

165
00:05:08,720 --> 00:05:10,880
use to inform clients and security teams

166
00:05:10,880 --> 00:05:12,479
and the screenshot that everybody always

167
00:05:12,479 --> 00:05:15,039
uses from it is that one

168
00:05:15,039 --> 00:05:17,280
which just gives absolutely no more

169
00:05:17,280 --> 00:05:18,720
information than the nested scan you

170
00:05:18,720 --> 00:05:20,080
probably run which is why you're running

171
00:05:20,080 --> 00:05:22,639
test ssl in the first place

172
00:05:22,639 --> 00:05:24,479
and i'll admit i do run it on all my

173
00:05:24,479 --> 00:05:26,000
engagements they've been innumerable

174
00:05:26,000 --> 00:05:27,360
instances during my career when i've

175
00:05:27,360 --> 00:05:28,800
received a pen test report the

176
00:05:28,800 --> 00:05:30,000
screenshot behind you is given as

177
00:05:30,000 --> 00:05:31,520
evidence

178
00:05:31,520 --> 00:05:32,880
although i use the term rather loosely

179
00:05:32,880 --> 00:05:33,680
here

180
00:05:33,680 --> 00:05:36,560
firstly test ssl is the first five tools

181
00:05:36,560 --> 00:05:38,960
on any script script kiddies git cloning

182
00:05:38,960 --> 00:05:41,840
spring try saying that five times fast

183
00:05:41,840 --> 00:05:43,440
but i'll come back to that more

184
00:05:43,440 --> 00:05:45,199
importantly it doesn't offer the kind of

185
00:05:45,199 --> 00:05:47,199
hands-on technical information that

186
00:05:47,199 --> 00:05:49,120
clients respond well to

187
00:05:49,120 --> 00:05:50,880
this screenshot actually provides less

188
00:05:50,880 --> 00:05:52,720
information than nessus does which in

189
00:05:52,720 --> 00:05:54,880
and of itself is a bit of a feat

190
00:05:54,880 --> 00:05:56,880
to return to my previous comment clients

191
00:05:56,880 --> 00:05:59,199
love to see expertise especially when

192
00:05:59,199 --> 00:06:00,720
you're charging potentially thousands of

193
00:06:00,720 --> 00:06:02,800
pounds of your time

194
00:06:02,800 --> 00:06:04,000
when i've been in the position of a

195
00:06:04,000 --> 00:06:06,000
client which has happened a few times

196
00:06:06,000 --> 00:06:08,479
seeing proof of concepts like this just

197
00:06:08,479 --> 00:06:10,720
scream lack of effort

198
00:06:10,720 --> 00:06:12,080
when you're delivering tests yourself

199
00:06:12,080 --> 00:06:13,520
it's imperative that clients feel

200
00:06:13,520 --> 00:06:14,960
they're getting a true expert working

201
00:06:14,960 --> 00:06:16,720
for them and upping the quality of your

202
00:06:16,720 --> 00:06:18,400
proof of concepts is the safest way of

203
00:06:18,400 --> 00:06:19,440
doing this

204
00:06:19,440 --> 00:06:23,039
again with the imposter syndrome

205
00:06:23,039 --> 00:06:24,720
so

206
00:06:24,720 --> 00:06:25,759
whilst only being slightly more

207
00:06:25,759 --> 00:06:27,840
technical and again featuring some

208
00:06:27,840 --> 00:06:29,759
beautiful green boxes that i hope all of

209
00:06:29,759 --> 00:06:31,759
you will be using in future

210
00:06:31,759 --> 00:06:34,560
the above shows ssl scan and openssl to

211
00:06:34,560 --> 00:06:35,840
prove the same vulnerabilities as the

212
00:06:35,840 --> 00:06:37,199
previous sites

213
00:06:37,199 --> 00:06:38,400
even whilst only being slightly more

214
00:06:38,400 --> 00:06:39,919
technical they clearly give more

215
00:06:39,919 --> 00:06:41,520
information and the green boxes allow

216
00:06:41,520 --> 00:06:43,120
attention to be drawn to the relevant

217
00:06:43,120 --> 00:06:45,759
sections of each screenshot

218
00:06:45,759 --> 00:06:48,000
the openssl command is given as well and

219
00:06:48,000 --> 00:06:49,680
can be given in write-ups to allow

220
00:06:49,680 --> 00:06:50,880
clients to replicate the funding

221
00:06:50,880 --> 00:06:52,880
themselves

222
00:06:52,880 --> 00:06:55,199
as an aside there don't be scared

223
00:06:55,199 --> 00:06:56,560
especially when you're engaging clients

224
00:06:56,560 --> 00:06:58,080
like this of giving away some of the

225
00:06:58,080 --> 00:06:59,680
technical advice you know there's

226
00:06:59,680 --> 00:07:01,599
nothing massively secretive about what

227
00:07:01,599 --> 00:07:03,280
we do in pen testing most of it can be

228
00:07:03,280 --> 00:07:05,039
found on you know get repositories like

229
00:07:05,039 --> 00:07:07,199
hat tricks or even in nessus write-ups

230
00:07:07,199 --> 00:07:09,759
or metasploit themselves

231
00:07:09,759 --> 00:07:11,759
hiding this information from people

232
00:07:11,759 --> 00:07:13,280
doesn't make you look any kind of

233
00:07:13,280 --> 00:07:15,280
doesn't shroud you in this

234
00:07:15,280 --> 00:07:17,039
aura of mystique that you think it might

235
00:07:17,039 --> 00:07:17,759
do

236
00:07:17,759 --> 00:07:19,280
it just makes you look like you've got

237
00:07:19,280 --> 00:07:21,840
something to hide which you don't you

238
00:07:21,840 --> 00:07:23,280
can show these commands and they're

239
00:07:23,280 --> 00:07:25,679
quite nice

240
00:07:26,479 --> 00:07:28,240
check yourself

241
00:07:28,240 --> 00:07:30,080
what is the best way to get in trouble

242
00:07:30,080 --> 00:07:31,680
with ncsc

243
00:07:31,680 --> 00:07:34,560
it's to use nessus output in reports

244
00:07:34,560 --> 00:07:36,400
ncc for all their faults understand that

245
00:07:36,400 --> 00:07:38,160
running a nessa scan does not a pen

246
00:07:38,160 --> 00:07:39,840
tester make

247
00:07:39,840 --> 00:07:42,319
more importantly its nessus itself is

248
00:07:42,319 --> 00:07:44,479
prone to false positives normally the

249
00:07:44,479 --> 00:07:45,759
number one download for a budding

250
00:07:45,759 --> 00:07:48,080
security enthusiast this isn't a knock

251
00:07:48,080 --> 00:07:49,520
on newcomers to the industry we all

252
00:07:49,520 --> 00:07:51,919
started somewhere and some of us ruined

253
00:07:51,919 --> 00:07:53,520
200 sheets of paper that you'd have just

254
00:07:53,520 --> 00:07:54,800
bought by running a custom lessons

255
00:07:54,800 --> 00:07:57,199
profile against the printer oops sorry

256
00:07:57,199 --> 00:07:59,120
about that one dad uh but there is a

257
00:07:59,120 --> 00:08:00,479
wealth of information to learn in iot

258
00:08:00,479 --> 00:08:01,919
security and if the first thing you

259
00:08:01,919 --> 00:08:03,840
learn is how to get awesome pcs you'll

260
00:08:03,840 --> 00:08:05,520
be stood in good stead

261
00:08:05,520 --> 00:08:08,879
talk a little bit more about nasus now

262
00:08:08,879 --> 00:08:10,800
more importantly especially once you

263
00:08:10,800 --> 00:08:13,199
move from that introduction to

264
00:08:13,199 --> 00:08:15,919
security stage and start performing your

265
00:08:15,919 --> 00:08:18,080
own engagements especially for slightly

266
00:08:18,080 --> 00:08:19,520
larger clients who have a bit more of an

267
00:08:19,520 --> 00:08:21,919
understanding of security themselves

268
00:08:21,919 --> 00:08:23,840
the clients own nessus they run it

269
00:08:23,840 --> 00:08:25,520
themselves they run it on their networks

270
00:08:25,520 --> 00:08:27,039
that's why they're getting a penetration

271
00:08:27,039 --> 00:08:29,039
test is they see a load of red come up

272
00:08:29,039 --> 00:08:30,560
in a nester scan and they call you in a

273
00:08:30,560 --> 00:08:32,080
panic

274
00:08:32,080 --> 00:08:33,760
they can normally see the scanner output

275
00:08:33,760 --> 00:08:35,200
because either they've run it or it's

276
00:08:35,200 --> 00:08:36,320
the first thing that comes up when you

277
00:08:36,320 --> 00:08:38,000
google the name of a vulnerability it's

278
00:08:38,000 --> 00:08:39,839
normally the tenable messes

279
00:08:39,839 --> 00:08:41,120
article

280
00:08:41,120 --> 00:08:42,719
or you might even link to it yourself in

281
00:08:42,719 --> 00:08:44,399
your report

282
00:08:44,399 --> 00:08:46,640
and as i said before nessus is prone to

283
00:08:46,640 --> 00:08:48,720
false positives it doesn't catch

284
00:08:48,720 --> 00:08:50,080
everything and you need to be checking

285
00:08:50,080 --> 00:08:51,120
these things

286
00:08:51,120 --> 00:08:52,720
more manual proof of concepts i

287
00:08:52,720 --> 00:08:54,399
appreciate we all work in computers so

288
00:08:54,399 --> 00:08:56,640
the concept of a manual proof of concept

289
00:08:56,640 --> 00:08:58,800
is is slightly odd but

290
00:08:58,800 --> 00:09:00,959
points still stands

291
00:09:00,959 --> 00:09:03,600
to reiterate demonstrating expertise is

292
00:09:03,600 --> 00:09:05,600
incredibly important as a pen tester in

293
00:09:05,600 --> 00:09:07,040
a consulting role

294
00:09:07,040 --> 00:09:09,200
again when i have been a client and seen

295
00:09:09,200 --> 00:09:11,360
copy and pasted an ssl but it reports it

296
00:09:11,360 --> 00:09:13,519
immediately raises red flags about the

297
00:09:13,519 --> 00:09:15,680
ability of the tester and how reputable

298
00:09:15,680 --> 00:09:18,080
the business that employs them is

299
00:09:18,080 --> 00:09:19,920
don't use necessary

300
00:09:19,920 --> 00:09:23,440
vanessa is a great tool

301
00:09:23,440 --> 00:09:24,399
now

302
00:09:24,399 --> 00:09:25,519
alert one

303
00:09:25,519 --> 00:09:27,360
why the hey

304
00:09:27,360 --> 00:09:28,480
so

305
00:09:28,480 --> 00:09:29,920
no point for guessing what i think of

306
00:09:29,920 --> 00:09:31,920
this old chest but the title has as i've

307
00:09:31,920 --> 00:09:34,480
said before giving that one away

308
00:09:34,480 --> 00:09:36,640
alert one is a shining example of not

309
00:09:36,640 --> 00:09:39,600
demonstrating exploitability properly

310
00:09:39,600 --> 00:09:41,040
there are a million and one things you

311
00:09:41,040 --> 00:09:42,399
can do with a cross-site scripting

312
00:09:42,399 --> 00:09:44,560
display and showing a little one in a

313
00:09:44,560 --> 00:09:47,120
pop-up box does not do it justice

314
00:09:47,120 --> 00:09:48,880
coming up as some real-life examples of

315
00:09:48,880 --> 00:09:50,560
exploits that are pulled off on client

316
00:09:50,560 --> 00:09:52,720
engagements but for now

317
00:09:52,720 --> 00:09:54,240
let's discuss a little bit more about

318
00:09:54,240 --> 00:09:55,920
why this is such a big bug bearer of

319
00:09:55,920 --> 00:09:58,160
mine

320
00:09:59,360 --> 00:10:00,880
really can't ramp home how important is

321
00:10:00,880 --> 00:10:02,880
not to be using alert one and please

322
00:10:02,880 --> 00:10:04,720
excuse the facetious infographic but

323
00:10:04,720 --> 00:10:06,160
when you're delivering a pentest report

324
00:10:06,160 --> 00:10:08,240
i need to be able to see as i've said

325
00:10:08,240 --> 00:10:09,839
and will continue to say

326
00:10:09,839 --> 00:10:11,839
um needs to be able to see how damaging

327
00:10:11,839 --> 00:10:14,240
something is from the screenshot alert

328
00:10:14,240 --> 00:10:18,680
one just doesn't do that

329
00:10:19,040 --> 00:10:20,000
so

330
00:10:20,000 --> 00:10:21,760
that quote right there is actually the

331
00:10:21,760 --> 00:10:23,920
reason i'm stuck before you today i fell

332
00:10:23,920 --> 00:10:25,839
into the trap a number of years ago i

333
00:10:25,839 --> 00:10:28,399
will hastily add now of using alert one

334
00:10:28,399 --> 00:10:29,600
in a report

335
00:10:29,600 --> 00:10:32,480
now at the time i you know better

336
00:10:32,480 --> 00:10:34,880
to a pen tester seeing that one in a box

337
00:10:34,880 --> 00:10:36,800
adequately demonstrates the presence of

338
00:10:36,800 --> 00:10:38,240
a vulnerability

339
00:10:38,240 --> 00:10:40,640
and most if not all pen testers then

340
00:10:40,640 --> 00:10:42,160
know the various ways you can seriously

341
00:10:42,160 --> 00:10:44,480
harm an application from there

342
00:10:44,480 --> 00:10:47,040
however this project manager had

343
00:10:47,040 --> 00:10:48,640
absolutely no idea

344
00:10:48,640 --> 00:10:50,560
and i openly experienced if ever there

345
00:10:50,560 --> 00:10:53,360
was one based on my newfound discovery

346
00:10:53,360 --> 00:10:55,440
that i needed to start not just making

347
00:10:55,440 --> 00:10:57,279
information clear in pocs which i've

348
00:10:57,279 --> 00:10:59,200
covered on the previous couple of slides

349
00:10:59,200 --> 00:11:00,880
putting boxes around things redacting

350
00:11:00,880 --> 00:11:02,800
them making them look pretty

351
00:11:02,800 --> 00:11:04,959
but also to start demonstrating exactly

352
00:11:04,959 --> 00:11:08,399
the damage that could be caused by them

353
00:11:08,399 --> 00:11:10,399
i dove headfirst into stack overflow and

354
00:11:10,399 --> 00:11:12,079
drowned myself in javascript and managed

355
00:11:12,079 --> 00:11:13,600
to freak myself out by how much there

356
00:11:13,600 --> 00:11:15,440
was to learn there but

357
00:11:15,440 --> 00:11:18,399
we'll uh we'll get on some real life

358
00:11:18,399 --> 00:11:19,839
examples of things that have actually

359
00:11:19,839 --> 00:11:20,560
been

360
00:11:20,560 --> 00:11:22,880
carried out on client engagements and

361
00:11:22,880 --> 00:11:24,800
how they can inform the way you start

362
00:11:24,800 --> 00:11:26,320
performing these kinds of attacks moving

363
00:11:26,320 --> 00:11:28,800
forward

364
00:11:28,800 --> 00:11:30,320
chasing the rabbit

365
00:11:30,320 --> 00:11:31,360
part one

366
00:11:31,360 --> 00:11:33,360
is crosstalk request forgery and we have

367
00:11:33,360 --> 00:11:34,959
a part two which is reflective crosstalk

368
00:11:34,959 --> 00:11:36,560
scripting and a part three which is

369
00:11:36,560 --> 00:11:38,880
breaking anti-automation controls

370
00:11:38,880 --> 00:11:43,480
or rather automating attack chains

371
00:11:44,399 --> 00:11:45,200
now

372
00:11:45,200 --> 00:11:46,560
before we dive into this quick

373
00:11:46,560 --> 00:11:48,160
explanation across that request forgery

374
00:11:48,160 --> 00:11:49,680
it rises because of the problem of how

375
00:11:49,680 --> 00:11:51,839
browsers treat cross-origin requests uh

376
00:11:51,839 --> 00:11:53,600
take for example a user logged into

377
00:11:53,600 --> 00:11:55,839
siteone.com the application sets a

378
00:11:55,839 --> 00:11:58,000
cookie called authcookie

379
00:11:58,000 --> 00:12:00,720
users then visits site2.com site2.com

380
00:12:00,720 --> 00:12:02,399
makes a request to site one the browser

381
00:12:02,399 --> 00:12:04,000
sends the author cookie along with it

382
00:12:04,000 --> 00:12:06,160
now normally it doesn't really matter if

383
00:12:06,160 --> 00:12:07,760
it's a get request the page is served

384
00:12:07,760 --> 00:12:09,360
same origin policy stops any funny

385
00:12:09,360 --> 00:12:11,360
business very very hard to

386
00:12:11,360 --> 00:12:13,680
deal with that if site two makes a post

387
00:12:13,680 --> 00:12:16,320
request instead of a series of very

388
00:12:16,320 --> 00:12:18,560
specific post requests that request came

389
00:12:18,560 --> 00:12:19,839
from the same computer as the valid

390
00:12:19,839 --> 00:12:22,160
session and uses the same authentication

391
00:12:22,160 --> 00:12:23,120
cookie

392
00:12:23,120 --> 00:12:25,279
no real way to tell the difference and

393
00:12:25,279 --> 00:12:27,200
so any state changing operation can

394
00:12:27,200 --> 00:12:28,959
start to be performed

395
00:12:28,959 --> 00:12:30,079
i'm pretty sure that was a whistle stop

396
00:12:30,079 --> 00:12:31,680
tour across that request for you there's

397
00:12:31,680 --> 00:12:32,959
some great articles online if you want

398
00:12:32,959 --> 00:12:35,839
to know a little bit more about that

399
00:12:35,839 --> 00:12:38,560
now you can technically prove that

400
00:12:38,560 --> 00:12:40,560
across a

401
00:12:40,560 --> 00:12:42,320
a function is vulnerable to cross-site

402
00:12:42,320 --> 00:12:44,639
request forgery using burp suite the

403
00:12:44,639 --> 00:12:46,320
most common application security tool

404
00:12:46,320 --> 00:12:47,200
out there

405
00:12:47,200 --> 00:12:49,519
in five clicks i know i'm really sad i

406
00:12:49,519 --> 00:12:50,959
counted

407
00:12:50,959 --> 00:12:52,639
but that is rarely the most damaging

408
00:12:52,639 --> 00:12:54,720
attack vector just changing your name or

409
00:12:54,720 --> 00:12:56,000
something like that

410
00:12:56,000 --> 00:12:58,480
by combining a very specific instance of

411
00:12:58,480 --> 00:13:01,279
csrf with html we can demonstrate the

412
00:13:01,279 --> 00:13:03,120
real world danger to the client

413
00:13:03,120 --> 00:13:05,200
now this horror story that i'm going to

414
00:13:05,200 --> 00:13:06,880
go to walk you through over the next

415
00:13:06,880 --> 00:13:09,360
couple of slides happened back in august

416
00:13:09,360 --> 00:13:11,120
of 2020.

417
00:13:11,120 --> 00:13:13,760
on the application i was assessing

418
00:13:13,760 --> 00:13:16,399
admins had the ability to add web pages

419
00:13:16,399 --> 00:13:18,160
which was a pretty reasonable action for

420
00:13:18,160 --> 00:13:20,240
the application in question

421
00:13:20,240 --> 00:13:22,000
unfortunately the action of adding a

422
00:13:22,000 --> 00:13:23,760
page was vulnerable to cross-site

423
00:13:23,760 --> 00:13:25,200
request forgery

424
00:13:25,200 --> 00:13:26,800
not so good

425
00:13:26,800 --> 00:13:28,320
the attack that i'm about to walk you

426
00:13:28,320 --> 00:13:30,320
through not only created a new page

427
00:13:30,320 --> 00:13:32,560
which is exactly what you do if you just

428
00:13:32,560 --> 00:13:34,399
right click generate csrf proof of

429
00:13:34,399 --> 00:13:36,720
concept in burp and fire it off but it

430
00:13:36,720 --> 00:13:38,720
also stole administrative administrative

431
00:13:38,720 --> 00:13:40,480
credentials administrative i need more

432
00:13:40,480 --> 00:13:42,560
coffee also stroll administrative

433
00:13:42,560 --> 00:13:44,240
credentials from the site using a little

434
00:13:44,240 --> 00:13:47,120
bit of unorthodox html and oddly enough

435
00:13:47,120 --> 00:13:48,399
we then had to go back in after the

436
00:13:48,399 --> 00:13:50,000
engagement and remove all of this

437
00:13:50,000 --> 00:13:51,680
because of the way the injection

438
00:13:51,680 --> 00:13:54,079
parameter worked if you couldn't remove

439
00:13:54,079 --> 00:13:56,638
it from the

440
00:13:56,720 --> 00:13:58,399
the ui or the website you had to

441
00:13:58,399 --> 00:14:00,160
upstream proxy it and then trigger a

442
00:14:00,160 --> 00:14:03,480
delete request

443
00:14:04,320 --> 00:14:06,000
so

444
00:14:06,000 --> 00:14:07,600
fully exploiting crosstalk request

445
00:14:07,600 --> 00:14:08,720
forgery

446
00:14:08,720 --> 00:14:11,360
stage one

447
00:14:12,079 --> 00:14:15,680
here you can see the

448
00:14:15,760 --> 00:14:17,120
so the next

449
00:14:17,120 --> 00:14:18,480
here you can see some a little bit of

450
00:14:18,480 --> 00:14:21,120
unorthodox html right

451
00:14:21,120 --> 00:14:23,279
the iframe is

452
00:14:23,279 --> 00:14:24,959
uh

453
00:14:24,959 --> 00:14:26,880
the source is set to the log off page

454
00:14:26,880 --> 00:14:29,040
the id is intact frame and the border is

455
00:14:29,040 --> 00:14:30,240
on and then you can see that we're

456
00:14:30,240 --> 00:14:31,920
setting the window out of height and

457
00:14:31,920 --> 00:14:34,240
window.out of width now

458
00:14:34,240 --> 00:14:36,160
interestingly enough

459
00:14:36,160 --> 00:14:38,000
what happens if you iframe a logoff path

460
00:14:38,000 --> 00:14:39,360
that normally would just be firing a get

461
00:14:39,360 --> 00:14:40,320
request

462
00:14:40,320 --> 00:14:41,199
well

463
00:14:41,199 --> 00:14:42,959
it logs you out and the authenticates

464
00:14:42,959 --> 00:14:45,519
your cookie but importantly it doesn't

465
00:14:45,519 --> 00:14:47,279
change the entire page it just changes

466
00:14:47,279 --> 00:14:48,880
it just redirects the contents of the

467
00:14:48,880 --> 00:14:51,199
iframe which is an important bit here

468
00:14:51,199 --> 00:14:52,160
and something that we're going to be

469
00:14:52,160 --> 00:14:53,600
using to

470
00:14:53,600 --> 00:14:56,720
well be a little bit nefarious

471
00:14:56,720 --> 00:14:58,320
that becomes more important because

472
00:14:58,320 --> 00:15:00,240
whilst you can visually make it look as

473
00:15:00,240 --> 00:15:02,959
we're doing here

474
00:15:03,279 --> 00:15:04,880
the the whole page has been been

475
00:15:04,880 --> 00:15:06,639
rewritten any malicious javascript that

476
00:15:06,639 --> 00:15:07,760
we're actually running in the background

477
00:15:07,760 --> 00:15:08,880
is still going to be there but we don't

478
00:15:08,880 --> 00:15:10,240
have to make it persistent using another

479
00:15:10,240 --> 00:15:14,160
method it just sits there and ticks over

480
00:15:14,720 --> 00:15:16,480
another another important thing

481
00:15:16,480 --> 00:15:18,720
document.body.nhtml

482
00:15:18,720 --> 00:15:20,880
completely nukes the body of a page but

483
00:15:20,880 --> 00:15:22,279
you can actually use

484
00:15:22,279 --> 00:15:25,360
document.getelements by tag name

485
00:15:25,360 --> 00:15:28,560
0 dot in html if you need to remove more

486
00:15:28,560 --> 00:15:30,480
of the dom but that was a bit long and

487
00:15:30,480 --> 00:15:32,079
made my screenshot look bad so i didn't

488
00:15:32,079 --> 00:15:33,040
use it

489
00:15:33,040 --> 00:15:34,320
um

490
00:15:34,320 --> 00:15:35,759
the width and height parameters are nice

491
00:15:35,759 --> 00:15:38,079
calculated using the output and outer

492
00:15:38,079 --> 00:15:38,959
width

493
00:15:38,959 --> 00:15:42,959
that's reasonably simple stuff

494
00:15:43,440 --> 00:15:44,639
right

495
00:15:44,639 --> 00:15:46,079
we've now logged the user out and

496
00:15:46,079 --> 00:15:48,079
they're staring at a random page that

497
00:15:48,079 --> 00:15:50,079
the logout function on this particular

498
00:15:50,079 --> 00:15:52,079
app redirected to

499
00:15:52,079 --> 00:15:53,839
what we're going to do

500
00:15:53,839 --> 00:15:54,639
well

501
00:15:54,639 --> 00:15:56,639
we really want the keys to the kingdom

502
00:15:56,639 --> 00:15:58,480
now technically you can only access this

503
00:15:58,480 --> 00:16:00,639
page if you want you the path or two or

504
00:16:00,639 --> 00:16:02,320
an admin clicking around through the cms

505
00:16:02,320 --> 00:16:03,920
so we're going to go after admin creds

506
00:16:03,920 --> 00:16:07,360
because why not let's have some fun

507
00:16:07,519 --> 00:16:09,199
um we've already filled around

508
00:16:09,199 --> 00:16:11,279
javascript a bit to get here so let's

509
00:16:11,279 --> 00:16:13,120
fiddle around a little bit more

510
00:16:13,120 --> 00:16:15,040
the onload property of an iframe comes

511
00:16:15,040 --> 00:16:17,120
in very handy here it fires every time

512
00:16:17,120 --> 00:16:18,240
the

513
00:16:18,240 --> 00:16:20,880
the iframe loads or in fact every time

514
00:16:20,880 --> 00:16:22,959
the iphone source changes which comes in

515
00:16:22,959 --> 00:16:24,720
handy in a little bit

516
00:16:24,720 --> 00:16:25,680
all we do is check out the current

517
00:16:25,680 --> 00:16:27,600
source the iframe is set to on the loads

518
00:16:27,600 --> 00:16:29,120
then rewrite it to the admin login

519
00:16:29,120 --> 00:16:30,079
portal

520
00:16:30,079 --> 00:16:32,160
nice simple if statement for the area of

521
00:16:32,160 --> 00:16:33,680
a 3d programming room which should

522
00:16:33,680 --> 00:16:36,320
hopefully be most of us um they'll

523
00:16:36,320 --> 00:16:38,320
recognize that

524
00:16:38,320 --> 00:16:39,759
and then the three equal signs versus

525
00:16:39,759 --> 00:16:42,079
the one equal sign as a comparison or a

526
00:16:42,079 --> 00:16:44,639
change of value

527
00:16:44,639 --> 00:16:45,839
so

528
00:16:45,839 --> 00:16:47,920
now we've got our page and it's properly

529
00:16:47,920 --> 00:16:51,839
rendered on the admin login portal

530
00:16:52,240 --> 00:16:53,680
those all important credentials are

531
00:16:53,680 --> 00:16:55,279
still not ours yet

532
00:16:55,279 --> 00:16:56,480
so

533
00:16:56,480 --> 00:16:59,120
more nefarious javascript

534
00:16:59,120 --> 00:17:00,399
we need to assign a function to the

535
00:17:00,399 --> 00:17:04,000
login button on shaping.isbx

536
00:17:04,000 --> 00:17:05,199
grabs the values of the username and

537
00:17:05,199 --> 00:17:07,119
password fields and sends them back to

538
00:17:07,119 --> 00:17:09,199
our attacker controlled server

539
00:17:09,199 --> 00:17:11,599
it's fortunately pretty simple to do as

540
00:17:11,599 --> 00:17:13,359
a vulnerable application use jquery as

541
00:17:13,359 --> 00:17:14,799
well

542
00:17:14,799 --> 00:17:17,199
firstly changing our unload function so

543
00:17:17,199 --> 00:17:18,799
that

544
00:17:18,799 --> 00:17:20,720
it assigns the grab credits function to

545
00:17:20,720 --> 00:17:22,640
it a handy function called add event

546
00:17:22,640 --> 00:17:24,720
lister which is nicely demonstrated up

547
00:17:24,720 --> 00:17:27,280
there allows you to do that by just

548
00:17:27,280 --> 00:17:28,799
doing exactly what it says on the tin

549
00:17:28,799 --> 00:17:30,400
just add another event listing to the

550
00:17:30,400 --> 00:17:31,919
button it'll do whatever it wants to do

551
00:17:31,919 --> 00:17:33,679
but we've now got a second event

552
00:17:33,679 --> 00:17:35,440
listening on that which is going to

553
00:17:35,440 --> 00:17:36,400
hopefully

554
00:17:36,400 --> 00:17:38,720
steal these credentials

555
00:17:38,720 --> 00:17:40,720
as a side note the rule of the normal

556
00:17:40,720 --> 00:17:42,080
rules of iframes don't apply when you

557
00:17:42,080 --> 00:17:43,360
come in from the same domain which in

558
00:17:43,360 --> 00:17:44,640
this case we are and that's the same

559
00:17:44,640 --> 00:17:46,000
case for all cross-site scripting

560
00:17:46,000 --> 00:17:47,520
vulnerabilities as well not just this

561
00:17:47,520 --> 00:17:50,480
one um cross-sector progress 4g

562
00:17:50,480 --> 00:17:52,400
similar principle

563
00:17:52,400 --> 00:17:54,000
you're allowed to you're no longer bound

564
00:17:54,000 --> 00:17:56,400
by the same origin policy you can do you

565
00:17:56,400 --> 00:17:57,600
can interact with the contents of

566
00:17:57,600 --> 00:18:00,320
iphones very very easily now you can use

567
00:18:00,320 --> 00:18:02,400
this in other ways which we have done

568
00:18:02,400 --> 00:18:03,600
before

569
00:18:03,600 --> 00:18:06,080
so if you if there's no way you can like

570
00:18:06,080 --> 00:18:08,080
log things out or they're setting

571
00:18:08,080 --> 00:18:10,240
certain parameters you can iframe you

572
00:18:10,240 --> 00:18:11,919
can hide an iframe on the page and just

573
00:18:11,919 --> 00:18:13,679
use it to redirect everything and rip

574
00:18:13,679 --> 00:18:15,520
all the data out of it especially if

575
00:18:15,520 --> 00:18:18,320
they're like large cms's and you want to

576
00:18:18,320 --> 00:18:20,160
see all kinds of crazy information that

577
00:18:20,160 --> 00:18:22,000
they're storing in there you can do that

578
00:18:22,000 --> 00:18:23,600
in the background and file them back off

579
00:18:23,600 --> 00:18:25,120
to your server there's loads of stuff

580
00:18:25,120 --> 00:18:27,440
you could do across that scripting and i

581
00:18:27,440 --> 00:18:28,880
unfortunately am only able to give two

582
00:18:28,880 --> 00:18:31,600
examples today

583
00:18:34,240 --> 00:18:35,919
so the next one

584
00:18:35,919 --> 00:18:38,240
this uses the age old get element by id

585
00:18:38,240 --> 00:18:40,000
which i'm sure if anyone's done a bit of

586
00:18:40,000 --> 00:18:41,679
exercise themselves then we'll probably

587
00:18:41,679 --> 00:18:43,280
have used that at some point really

588
00:18:43,280 --> 00:18:45,039
simply just grabs the values from two

589
00:18:45,039 --> 00:18:47,120
input elements of the page

590
00:18:47,120 --> 00:18:49,120
note that you do have to first reference

591
00:18:49,120 --> 00:18:52,240
the iframe and then the contents of it

592
00:18:52,240 --> 00:18:54,640
then the document model thereof before

593
00:18:54,640 --> 00:18:56,799
interacting with its actual contents

594
00:18:56,799 --> 00:18:58,320
because they like to make it easy for

595
00:18:58,320 --> 00:18:59,120
you

596
00:18:59,120 --> 00:19:00,400
don't they

597
00:19:00,400 --> 00:19:02,400
whoever came up with javascript

598
00:19:02,400 --> 00:19:03,840
they've caused me more headaches than i

599
00:19:03,840 --> 00:19:06,480
care to admit

600
00:19:08,640 --> 00:19:10,080
as the application was already running

601
00:19:10,080 --> 00:19:11,760
jquery

602
00:19:11,760 --> 00:19:13,440
um

603
00:19:13,440 --> 00:19:14,320
you

604
00:19:14,320 --> 00:19:16,640
don't have to you can instead of

605
00:19:16,640 --> 00:19:18,880
building an xhr request manually which

606
00:19:18,880 --> 00:19:21,360
is a quite a decent chunk of code you

607
00:19:21,360 --> 00:19:23,200
can just use jquery has a nice wrapper

608
00:19:23,200 --> 00:19:24,960
for it you can access using donald.get

609
00:19:24,960 --> 00:19:27,080
normally or sometimes it's

610
00:19:27,080 --> 00:19:28,720
jquery.jquery.host whatever you want to

611
00:19:28,720 --> 00:19:30,480
do

612
00:19:30,480 --> 00:19:33,200
the delimiter of dot dash

613
00:19:33,200 --> 00:19:35,919
dot dot is uh well it's my little joke

614
00:19:35,919 --> 00:19:38,720
it's the morse code for sos and by the

615
00:19:38,720 --> 00:19:40,640
time i finished this engagement me and

616
00:19:40,640 --> 00:19:42,720
my colleague who were working on about

617
00:19:42,720 --> 00:19:44,720
four or so critical severity findings

618
00:19:44,720 --> 00:19:46,240
and we'd like sql injection and

619
00:19:46,240 --> 00:19:49,679
everything so it felt apt at the time

620
00:19:49,679 --> 00:19:51,280
but that was not something i can

621
00:19:51,280 --> 00:19:52,960
recommend it doesn't help build those

622
00:19:52,960 --> 00:19:56,480
client relationships i was talking about

623
00:19:59,679 --> 00:20:02,159
so now we have our injection part

624
00:20:02,159 --> 00:20:03,360
palette

625
00:20:03,360 --> 00:20:05,760
um a little known fact oh well a little

626
00:20:05,760 --> 00:20:06,880
known fact at least it was a little

627
00:20:06,880 --> 00:20:08,320
known to me at the time when i was

628
00:20:08,320 --> 00:20:09,679
originally starting to put these things

629
00:20:09,679 --> 00:20:11,679
together is that the path of the url is

630
00:20:11,679 --> 00:20:13,440
entirely controllable by client-side

631
00:20:13,440 --> 00:20:14,960
javascript via the use of

632
00:20:14,960 --> 00:20:16,640
history.replace state which you can see

633
00:20:16,640 --> 00:20:18,159
at the top of that

634
00:20:18,159 --> 00:20:20,799
i use this to my advantage in order to

635
00:20:20,799 --> 00:20:22,159
make my exploit that much more

636
00:20:22,159 --> 00:20:23,840
believable

637
00:20:23,840 --> 00:20:25,520
handily enough it also accepts path

638
00:20:25,520 --> 00:20:27,600
reversal commands which is great i'm not

639
00:20:27,600 --> 00:20:28,960
sure what quite why that's happened but

640
00:20:28,960 --> 00:20:30,960
here we are um

641
00:20:30,960 --> 00:20:33,280
so you can simply change what was a very

642
00:20:33,280 --> 00:20:36,240
long complicated cms path which

643
00:20:36,240 --> 00:20:38,640
took you always like app page view state

644
00:20:38,640 --> 00:20:40,000
whatever

645
00:20:40,000 --> 00:20:41,960
and you just change it to

646
00:20:41,960 --> 00:20:44,159
admin.aspx so even when you're looking

647
00:20:44,159 --> 00:20:46,640
at the page or you look at the address

648
00:20:46,640 --> 00:20:48,799
bar it looks exactly like it's supposed

649
00:20:48,799 --> 00:20:50,799
to

650
00:20:50,799 --> 00:20:52,480
the reindeer i have of course already

651
00:20:52,480 --> 00:20:53,840
discussed

652
00:20:53,840 --> 00:20:55,600
but there's

653
00:20:55,600 --> 00:20:57,200
that's that's what it looks like it's in

654
00:20:57,200 --> 00:21:00,000
its entirety

655
00:21:01,760 --> 00:21:03,679
and that is what happens if you click

656
00:21:03,679 --> 00:21:05,520
five times in verb suite you get

657
00:21:05,520 --> 00:21:07,039
something that looks a little bit like

658
00:21:07,039 --> 00:21:07,919
this

659
00:21:07,919 --> 00:21:10,720
um it'll say the action you know cms ad

660
00:21:10,720 --> 00:21:12,799
page methods post it'll give everything

661
00:21:12,799 --> 00:21:14,559
there the page content is where we stick

662
00:21:14,559 --> 00:21:17,840
our injection payload here

663
00:21:17,840 --> 00:21:18,960
and

664
00:21:18,960 --> 00:21:20,480
whilst this is a very standard attack

665
00:21:20,480 --> 00:21:22,559
the crosstalk request forger is very

666
00:21:22,559 --> 00:21:24,799
rarely given anything higher than cvss

667
00:21:24,799 --> 00:21:26,320
9.9 because you have to make somebody

668
00:21:26,320 --> 00:21:28,000
click on a link for it and as soon as

669
00:21:28,000 --> 00:21:29,760
you're using social engineering to try

670
00:21:29,760 --> 00:21:31,760
and make anyone do anything it's really

671
00:21:31,760 --> 00:21:33,200
hard to make it have that critical

672
00:21:33,200 --> 00:21:35,120
severity who's going to trick someone

673
00:21:35,120 --> 00:21:37,280
and whilst most people do click on links

674
00:21:37,280 --> 00:21:38,480
there's a couple of other factors that

675
00:21:38,480 --> 00:21:40,640
come into play there

676
00:21:40,640 --> 00:21:43,440
and so we tend to err on the side of not

677
00:21:43,440 --> 00:21:45,919
giving it that as a result of that but

678
00:21:45,919 --> 00:21:49,120
it's a very cool 9.9

679
00:21:50,880 --> 00:21:52,480
and that

680
00:21:52,480 --> 00:21:54,640
was that

681
00:21:54,640 --> 00:21:56,240
in the engagement itself when we were

682
00:21:56,240 --> 00:21:58,000
actually running this i was left

683
00:21:58,000 --> 00:22:00,480
somewhat unfounded when the logs of the

684
00:22:00,480 --> 00:22:02,000
server were using to capture all of

685
00:22:02,000 --> 00:22:03,600
these things

686
00:22:03,600 --> 00:22:04,400
um

687
00:22:04,400 --> 00:22:06,960
registered another entry i went nah that

688
00:22:06,960 --> 00:22:08,720
can't be right i can't include it in

689
00:22:08,720 --> 00:22:10,960
here for obvious reasons but an admin

690
00:22:10,960 --> 00:22:12,799
had actually logged in had interacted

691
00:22:12,799 --> 00:22:14,559
with the page that we'd added and had

692
00:22:14,559 --> 00:22:17,360
fallen for it and um a resounding

693
00:22:17,360 --> 00:22:19,360
success however it did make for an

694
00:22:19,360 --> 00:22:21,679
incredibly awkward phone call when i had

695
00:22:21,679 --> 00:22:23,039
to call that person and tell them what

696
00:22:23,039 --> 00:22:24,960
they'd fallen for

697
00:22:24,960 --> 00:22:28,080
oops they said

698
00:22:28,080 --> 00:22:30,080
this attack is testament to being able

699
00:22:30,080 --> 00:22:32,080
to demonstrate incredibly damaging

700
00:22:32,080 --> 00:22:33,440
attack vectors

701
00:22:33,440 --> 00:22:35,280
and putting together the entire chain

702
00:22:35,280 --> 00:22:38,320
only took about 25 minutes or so with a

703
00:22:38,320 --> 00:22:39,600
half hour break because i missed a

704
00:22:39,600 --> 00:22:41,600
semicolon somewhere

705
00:22:41,600 --> 00:22:43,440
semicolons are the bane of everyone's

706
00:22:43,440 --> 00:22:45,200
existence i see a couple of winces out

707
00:22:45,200 --> 00:22:48,720
in the audience you all know

708
00:22:48,720 --> 00:22:51,280
the decline was as you'd expect or at

709
00:22:51,280 --> 00:22:53,919
least i hoped uh very happy with the

710
00:22:53,919 --> 00:22:55,679
attack that we pulled off we hadn't just

711
00:22:55,679 --> 00:22:57,360
gone right click oh yeah crosstalk

712
00:22:57,360 --> 00:22:59,039
requested quarterly and moved on we'd

713
00:22:59,039 --> 00:23:00,720
actually demonstrate the need for solid

714
00:23:00,720 --> 00:23:03,120
javascript html and csrf attack

715
00:23:03,120 --> 00:23:04,080
knowledge

716
00:23:04,080 --> 00:23:06,240
and when we put that all together we put

717
00:23:06,240 --> 00:23:07,679
together a little video for them just

718
00:23:07,679 --> 00:23:09,600
stepping through all these little parts

719
00:23:09,600 --> 00:23:11,280
and we sent them off at some of the

720
00:23:11,280 --> 00:23:13,440
video and if you can use videos as proof

721
00:23:13,440 --> 00:23:14,640
of concepts that's even better

722
00:23:14,640 --> 00:23:16,240
especially a few more complicated attack

723
00:23:16,240 --> 00:23:18,320
chains nobody needs a video to explain

724
00:23:18,320 --> 00:23:20,880
tls one point of them but for something

725
00:23:20,880 --> 00:23:22,880
a bit more like this maybe it would come

726
00:23:22,880 --> 00:23:24,240
in handy just to see how people would

727
00:23:24,240 --> 00:23:25,440
fall for it and how you've really

728
00:23:25,440 --> 00:23:26,480
managed to

729
00:23:26,480 --> 00:23:28,960
add that social engineering aspect into

730
00:23:28,960 --> 00:23:30,320
it or just to try and make it a little

731
00:23:30,320 --> 00:23:33,120
bit more believable

732
00:23:35,200 --> 00:23:37,280
right then chasing the rabbit

733
00:23:37,280 --> 00:23:38,320
part two

734
00:23:38,320 --> 00:23:40,080
we've got some reflected cross-site

735
00:23:40,080 --> 00:23:42,320
scripting here

736
00:23:42,320 --> 00:23:43,919
so this next exploit comes from a

737
00:23:43,919 --> 00:23:45,520
particularly spicy reflective cross-site

738
00:23:45,520 --> 00:23:46,880
scripting vulnerability that was

739
00:23:46,880 --> 00:23:48,400
discovered in tandem with a colleague of

740
00:23:48,400 --> 00:23:50,720
mine called kieran so thank you kieran

741
00:23:50,720 --> 00:23:53,279
for letting me use this here um and us

742
00:23:53,279 --> 00:23:56,000
bald guys have to look after one another

743
00:23:56,000 --> 00:24:00,400
if you will before 25 it's it's a pain

744
00:24:01,360 --> 00:24:02,080
so

745
00:24:02,080 --> 00:24:04,880
now we get back to my almost vitriolic

746
00:24:04,880 --> 00:24:06,880
hatred of alert one

747
00:24:06,880 --> 00:24:08,480
we discovered a reflected cross-site

748
00:24:08,480 --> 00:24:10,880
scripting injection point um but all we

749
00:24:10,880 --> 00:24:13,200
could get to pop was that one even kind

750
00:24:13,200 --> 00:24:15,279
of alert xss which i've seen a couple of

751
00:24:15,279 --> 00:24:16,559
people doing

752
00:24:16,559 --> 00:24:17,360
um

753
00:24:17,360 --> 00:24:19,360
bopping around there in the in the ether

754
00:24:19,360 --> 00:24:21,360
that wasn't working for us the injection

755
00:24:21,360 --> 00:24:23,440
point was available authenticated and it

756
00:24:23,440 --> 00:24:25,600
was in the url as well which makes this

757
00:24:25,600 --> 00:24:27,440
really quite especially interesting so

758
00:24:27,440 --> 00:24:29,360
we really wanted to see exactly what we

759
00:24:29,360 --> 00:24:31,200
could do with this and try and tear it

760
00:24:31,200 --> 00:24:33,840
apart

761
00:24:34,799 --> 00:24:36,880
so understanding the problem for the

762
00:24:36,880 --> 00:24:38,559
more seasoned programmers in the room

763
00:24:38,559 --> 00:24:40,159
you may be aware of a function commonly

764
00:24:40,159 --> 00:24:42,320
referred to as jsonify it comes in a

765
00:24:42,320 --> 00:24:44,000
various other different functions great

766
00:24:44,000 --> 00:24:45,760
got a couple of nodes got the name right

767
00:24:45,760 --> 00:24:46,880
yes

768
00:24:46,880 --> 00:24:48,320
as a quick explanation for those who

769
00:24:48,320 --> 00:24:50,559
don't it effectively takes a kind of

770
00:24:50,559 --> 00:24:52,320
complex string and makes them safe to be

771
00:24:52,320 --> 00:24:54,559
included in adjacent structure

772
00:24:54,559 --> 00:24:57,200
the above uses python's json.dumps to do

773
00:24:57,200 --> 00:24:58,720
the same thing

774
00:24:58,720 --> 00:24:59,760
so

775
00:24:59,760 --> 00:25:01,440
we figured out that they were using that

776
00:25:01,440 --> 00:25:03,039
because it was actually being reflected

777
00:25:03,039 --> 00:25:06,559
inside of a json parameter in a script

778
00:25:06,559 --> 00:25:08,159
itself

779
00:25:08,159 --> 00:25:10,480
so we figured it's probably using that

780
00:25:10,480 --> 00:25:15,000
um now we just had to escape it

781
00:25:17,520 --> 00:25:19,200
if i first you find

782
00:25:19,200 --> 00:25:21,120
so this is what happens when i tried to

783
00:25:21,120 --> 00:25:23,919
get clever and bypass the uh this was

784
00:25:23,919 --> 00:25:25,760
never going to work with the python

785
00:25:25,760 --> 00:25:28,320
example above that you there but it

786
00:25:28,320 --> 00:25:30,080
sometimes works on custom coded

787
00:25:30,080 --> 00:25:31,440
applications and there are some really

788
00:25:31,440 --> 00:25:33,600
good labs on porsche that demonstrate

789
00:25:33,600 --> 00:25:35,919
how you break out of character encoding

790
00:25:35,919 --> 00:25:38,320
like this

791
00:25:38,320 --> 00:25:39,360
however

792
00:25:39,360 --> 00:25:42,480
in our case this wasn't working

793
00:25:42,480 --> 00:25:44,559
we even tried grav accents as an attempt

794
00:25:44,559 --> 00:25:46,320
that's a real long shot in the dark and

795
00:25:46,320 --> 00:25:47,760
hardly ever works but you know we

796
00:25:47,760 --> 00:25:50,799
thought why not let's go for it no avail

797
00:25:50,799 --> 00:25:53,360
so we were left with the problem of to

798
00:25:53,360 --> 00:25:54,960
properly start exfiltrating data

799
00:25:54,960 --> 00:25:56,400
generally you're going to want to send

800
00:25:56,400 --> 00:25:57,600
it somewhere you don't want to keep it

801
00:25:57,600 --> 00:25:59,279
on their machine you want to control it

802
00:25:59,279 --> 00:26:02,240
in some way or exfiltrate in some way

803
00:26:02,240 --> 00:26:04,559
so and to do that we were going to need

804
00:26:04,559 --> 00:26:06,960
some to include strings into it

805
00:26:06,960 --> 00:26:08,880
so how are we going to include strings

806
00:26:08,880 --> 00:26:12,240
well we couldn't use them in the body

807
00:26:13,679 --> 00:26:14,480
well

808
00:26:14,480 --> 00:26:16,720
say hello to my little friend uh string

809
00:26:16,720 --> 00:26:18,400
dot from charcoaled

810
00:26:18,400 --> 00:26:19,840
stringed up from charcoal doesn't

811
00:26:19,840 --> 00:26:21,600
require any quotes and fortunately

812
00:26:21,600 --> 00:26:23,279
returns a string object that can be then

813
00:26:23,279 --> 00:26:24,640
passed to any other function that

814
00:26:24,640 --> 00:26:27,919
requires a string very happily result

815
00:26:27,919 --> 00:26:29,679
now we can use strings

816
00:26:29,679 --> 00:26:32,400
but what is our vector going to be

817
00:26:32,400 --> 00:26:34,080
the application didn't set any of the

818
00:26:34,080 --> 00:26:36,320
recommended cookie security flags and as

819
00:26:36,320 --> 00:26:38,480
it was an authenticated page we were

820
00:26:38,480 --> 00:26:40,000
going to cut out the middleman and go

821
00:26:40,000 --> 00:26:41,440
straight to the keys for the kingdom and

822
00:26:41,440 --> 00:26:44,240
both cookie

823
00:26:45,440 --> 00:26:47,679
also as a side note don't join a shed

824
00:26:47,679 --> 00:26:49,120
slap channel with a client and have your

825
00:26:49,120 --> 00:26:50,720
status as hacking fools and breaking

826
00:26:50,720 --> 00:26:52,320
rules especially when you're performing

827
00:26:52,320 --> 00:26:54,080
an engagement for them that's incredibly

828
00:26:54,080 --> 00:26:56,680
poor taste tap on the rest of liam

829
00:26:56,680 --> 00:26:59,279
[Music]

830
00:26:59,279 --> 00:27:00,000
so

831
00:27:00,000 --> 00:27:01,840
now we can use our strength now to

832
00:27:01,840 --> 00:27:04,000
encode our payload the easiest way to

833
00:27:04,000 --> 00:27:06,000
execute a cookie is it to incorporate it

834
00:27:06,000 --> 00:27:08,400
into the path of a url

835
00:27:08,400 --> 00:27:10,000
for a remote server and then just send a

836
00:27:10,000 --> 00:27:11,760
get request to send url you can rip it

837
00:27:11,760 --> 00:27:13,440
out you can use post requests this is

838
00:27:13,440 --> 00:27:15,600
just a lot easier

839
00:27:15,600 --> 00:27:16,799
we've already touched on how we send

840
00:27:16,799 --> 00:27:18,880
requests in the graphic request cordray

841
00:27:18,880 --> 00:27:20,720
example we went through previously and

842
00:27:20,720 --> 00:27:22,880
now we have a way of defining the url by

843
00:27:22,880 --> 00:27:26,399
using string.harm trial code

844
00:27:26,399 --> 00:27:28,480
as yet another quicker side there's an

845
00:27:28,480 --> 00:27:29,919
interesting thing to note about process

846
00:27:29,919 --> 00:27:31,120
scripting that you can use to speed up

847
00:27:31,120 --> 00:27:32,799
your exploit generation

848
00:27:32,799 --> 00:27:34,399
and that is before x success your

849
00:27:34,399 --> 00:27:36,880
malicious code is executing locally

850
00:27:36,880 --> 00:27:38,960
so you don't have to set up a ram some

851
00:27:38,960 --> 00:27:40,640
server enable yes configure it all make

852
00:27:40,640 --> 00:27:42,480
sure it's all it's really nice and

853
00:27:42,480 --> 00:27:44,559
secure ask the client for their ips you

854
00:27:44,559 --> 00:27:45,600
can white list them so you're not

855
00:27:45,600 --> 00:27:47,360
getting hammered by everybody

856
00:27:47,360 --> 00:27:48,799
you can just set up a local web server

857
00:27:48,799 --> 00:27:51,440
with python.http.server

858
00:27:51,440 --> 00:27:53,120
and quick and easy way of demonstrating

859
00:27:53,120 --> 00:27:55,520
how exfiltration would work

860
00:27:55,520 --> 00:27:58,159
um therefore as you can see above us

861
00:27:58,159 --> 00:27:58,960
our

862
00:27:58,960 --> 00:28:00,399
payload here is going to be localhost

863
00:28:00,399 --> 00:28:03,360
port 8000. um i whipped this up just so

864
00:28:03,360 --> 00:28:06,320
i could copy and paste it directly um

865
00:28:06,320 --> 00:28:08,799
directly into the string.from charcoal

866
00:28:08,799 --> 00:28:10,720
i'm incredibly lazy and we'll spend six

867
00:28:10,720 --> 00:28:12,799
months automating a five second task as

868
00:28:12,799 --> 00:28:14,559
i'm sure most of us would do

869
00:28:14,559 --> 00:28:16,799
and this is one of those uh it just

870
00:28:16,799 --> 00:28:19,840
grabs it pushes it into an array

871
00:28:19,840 --> 00:28:21,600
console that logs all of that

872
00:28:21,600 --> 00:28:25,520
bang copy and paste nice one

873
00:28:26,720 --> 00:28:29,120
so next part of the attack is writing

874
00:28:29,120 --> 00:28:31,679
the remainder of our payload we've

875
00:28:31,679 --> 00:28:33,520
proved we can get the ipm port into a

876
00:28:33,520 --> 00:28:35,440
format we can use in request so we've

877
00:28:35,440 --> 00:28:36,720
cut

878
00:28:36,720 --> 00:28:38,480
all kind of forms and quotes out we

879
00:28:38,480 --> 00:28:40,799
don't need them anymore now how do we

880
00:28:40,799 --> 00:28:42,480
get to those all important cookies

881
00:28:42,480 --> 00:28:44,240
fortunately this is incredibly simple if

882
00:28:44,240 --> 00:28:45,919
there are no cookie flags and in this

883
00:28:45,919 --> 00:28:48,159
case there weren't any cookie flags

884
00:28:48,159 --> 00:28:50,399
especially specifically the http only

885
00:28:50,399 --> 00:28:52,320
flag which i'm sure anybody has ever

886
00:28:52,320 --> 00:28:53,840
done a security course or especially a

887
00:28:53,840 --> 00:28:55,279
web-based one will have learned all

888
00:28:55,279 --> 00:28:57,520
about flags

889
00:28:57,520 --> 00:28:59,919
it's a nice and simple document.cookie

890
00:28:59,919 --> 00:29:02,640
um up there can just be used to reveal

891
00:29:02,640 --> 00:29:05,039
all the cookies so now we've got them

892
00:29:05,039 --> 00:29:06,480
all nice

893
00:29:06,480 --> 00:29:07,679
grabbed all the cookies how are we going

894
00:29:07,679 --> 00:29:10,000
to incorporate them into a url well

895
00:29:10,000 --> 00:29:11,520
actually we can draw on a lesson from

896
00:29:11,520 --> 00:29:13,210
excel of all things

897
00:29:13,210 --> 00:29:14,960
[Music]

898
00:29:14,960 --> 00:29:16,960
excel i hear you say why on earth would

899
00:29:16,960 --> 00:29:19,679
you do that to yourself and now i'm

900
00:29:19,679 --> 00:29:21,520
you don't have to spend long talking to

901
00:29:21,520 --> 00:29:22,799
me to figure out what i think of

902
00:29:22,799 --> 00:29:27,399
microsoft and their technologies however

903
00:29:27,840 --> 00:29:30,720
you see as i'm sure many of you in the

904
00:29:30,720 --> 00:29:32,399
audience were as well

905
00:29:32,399 --> 00:29:34,159
i have played the fool a little bit in

906
00:29:34,159 --> 00:29:35,600
school especially once i figured out

907
00:29:35,600 --> 00:29:37,120
that i could break computers and it was

908
00:29:37,120 --> 00:29:38,880
something that i enjoyed

909
00:29:38,880 --> 00:29:40,480
much to the

910
00:29:40,480 --> 00:29:43,200
chagrin of every teacher i ever had in

911
00:29:43,200 --> 00:29:45,440
all of my rt

912
00:29:45,440 --> 00:29:46,799
my love

913
00:29:46,799 --> 00:29:49,600
so i started off writing malicious vba

914
00:29:49,600 --> 00:29:52,080
macros and one such macro came in very

915
00:29:52,080 --> 00:29:53,279
handy here

916
00:29:53,279 --> 00:29:55,120
i used to distribute excel spreadsheets

917
00:29:55,120 --> 00:29:58,080
to help people uh revise and things like

918
00:29:58,080 --> 00:29:59,600
that in school and then some of them

919
00:29:59,600 --> 00:30:01,520
were some of them contained questions

920
00:30:01,520 --> 00:30:02,880
that definitely weren't stolen from

921
00:30:02,880 --> 00:30:04,720
actual exams the school was holding out

922
00:30:04,720 --> 00:30:06,799
not gcses don't take any of those off of

923
00:30:06,799 --> 00:30:08,399
me just internal ones

924
00:30:08,399 --> 00:30:10,720
good lord um

925
00:30:10,720 --> 00:30:11,520
so

926
00:30:11,520 --> 00:30:13,200
i would incorporate them all in there

927
00:30:13,200 --> 00:30:15,279
but to if i was worried that they might

928
00:30:15,279 --> 00:30:17,200
fall into the wrong hands so i wrote a

929
00:30:17,200 --> 00:30:18,480
little time bomb

930
00:30:18,480 --> 00:30:20,240
that took every cell in every sheet and

931
00:30:20,240 --> 00:30:22,399
just capitalized the first letter

932
00:30:22,399 --> 00:30:23,919
which when somebody reviews that that

933
00:30:23,919 --> 00:30:27,760
doesn't look particularly malicious

934
00:30:27,840 --> 00:30:29,440
and indeed the people who then read the

935
00:30:29,440 --> 00:30:31,360
macro thought nothing of it i'm dyslexic

936
00:30:31,360 --> 00:30:33,120
after all and most of this presumed was

937
00:30:33,120 --> 00:30:34,880
just me another way of being lazy and

938
00:30:34,880 --> 00:30:36,080
automating something i should have done

939
00:30:36,080 --> 00:30:37,919
in the first place

940
00:30:37,919 --> 00:30:39,200
um

941
00:30:39,200 --> 00:30:41,360
so but from a technology perspective it

942
00:30:41,360 --> 00:30:43,679
read the value out of the cell not the

943
00:30:43,679 --> 00:30:46,240
formula within it and then split it into

944
00:30:46,240 --> 00:30:48,320
two capitalized the first letter and

945
00:30:48,320 --> 00:30:51,840
concatenated them back together

946
00:30:51,840 --> 00:30:53,360
it's that last bit that's going to come

947
00:30:53,360 --> 00:30:56,080
in handy here

948
00:30:59,600 --> 00:31:01,360
right then got our payload our cookies

949
00:31:01,360 --> 00:31:02,960
and our combination technique so the

950
00:31:02,960 --> 00:31:05,200
combination technique is dot comcap

951
00:31:05,200 --> 00:31:07,039
document.cookie

952
00:31:07,039 --> 00:31:08,559
which is nice and simple you have your

953
00:31:08,559 --> 00:31:12,159
first bit you can get it into there

954
00:31:12,159 --> 00:31:14,559
awesome

955
00:31:15,120 --> 00:31:16,640
we start with breaking out the initial

956
00:31:16,640 --> 00:31:18,480
script tags so this is how our attack

957
00:31:18,480 --> 00:31:21,519
payload starts we had a script tag and

958
00:31:21,519 --> 00:31:23,279
if you injected a closed script tag into

959
00:31:23,279 --> 00:31:25,600
it it broke out of the json structure

960
00:31:25,600 --> 00:31:27,120
and left a horrific mess so you just had

961
00:31:27,120 --> 00:31:29,360
to put a little quote in there

962
00:31:29,360 --> 00:31:30,799
this is

963
00:31:30,799 --> 00:31:32,159
well this is not taken from the

964
00:31:32,159 --> 00:31:33,440
application we're actually attacking for

965
00:31:33,440 --> 00:31:34,960
obvious reasons i can't show you that

966
00:31:34,960 --> 00:31:35,840
here

967
00:31:35,840 --> 00:31:37,919
but the print premise is the same there

968
00:31:37,919 --> 00:31:41,039
was uh the little closed script tag

969
00:31:41,039 --> 00:31:42,720
we injected then we had to open another

970
00:31:42,720 --> 00:31:45,600
one we had our jquery.get they haven't

971
00:31:45,600 --> 00:31:48,000
used the dollar sign as a

972
00:31:48,000 --> 00:31:50,080
moniker for it so we just use jquery up

973
00:31:50,080 --> 00:31:52,399
there string up from charcoal that all

974
00:31:52,399 --> 00:31:55,519
resolves and then concat document.cookie

975
00:31:55,519 --> 00:31:56,799
lovely stuff

976
00:31:56,799 --> 00:31:58,559
this works thanks to order of operations

977
00:31:58,559 --> 00:32:00,880
which goes deepest bracket then left to

978
00:32:00,880 --> 00:32:02,640
right

979
00:32:02,640 --> 00:32:04,399
and it nicely executes the background

980
00:32:04,399 --> 00:32:06,480
page without showing our user everything

981
00:32:06,480 --> 00:32:10,000
so hopefully they are none the wiser

982
00:32:10,000 --> 00:32:12,720
figures crossed

983
00:32:13,039 --> 00:32:15,120
how amazing working on what is quite

984
00:32:15,120 --> 00:32:17,279
clearly a uh

985
00:32:17,279 --> 00:32:18,640
well that was actually taking its higher

986
00:32:18,640 --> 00:32:20,559
10 past 7 this morning as you can see

987
00:32:20,559 --> 00:32:21,679
because i realized i didn't have a

988
00:32:21,679 --> 00:32:23,440
screenshot for that slide always be

989
00:32:23,440 --> 00:32:25,919
better prepared than i am

990
00:32:25,919 --> 00:32:28,240
um there you have it uh our cupcakes are

991
00:32:28,240 --> 00:32:30,240
nicely sat on our attacker control

992
00:32:30,240 --> 00:32:31,600
server that's being the attacker of

993
00:32:31,600 --> 00:32:33,600
course ready for us to do whatever we

994
00:32:33,600 --> 00:32:34,799
like with them

995
00:32:34,799 --> 00:32:36,480
this payload can be used for most

996
00:32:36,480 --> 00:32:38,320
cross-site scripting vulnerabilities and

997
00:32:38,320 --> 00:32:39,919
really nicely demonstrates how cookies

998
00:32:39,919 --> 00:32:41,679
would be up exfiltrated from an

999
00:32:41,679 --> 00:32:44,159
authenticated application this brings it

1000
00:32:44,159 --> 00:32:45,840
to the fore for clients and allows them

1001
00:32:45,840 --> 00:32:47,519
to understand exactly how much damage

1002
00:32:47,519 --> 00:32:50,000
can be caused by attacks like this

1003
00:32:50,000 --> 00:32:52,159
similarly it makes you as the consultant

1004
00:32:52,159 --> 00:32:53,840
look really really good you went above

1005
00:32:53,840 --> 00:32:54,880
and beyond in demonstrating

1006
00:32:54,880 --> 00:32:56,880
exploitability and no one has to know

1007
00:32:56,880 --> 00:32:58,159
that it only took you ten minutes to

1008
00:32:58,159 --> 00:32:59,760
figure out and right that can be our

1009
00:32:59,760 --> 00:33:02,399
little secret

1010
00:33:03,519 --> 00:33:04,799
so

1011
00:33:04,799 --> 00:33:08,000
part three is automation now

1012
00:33:08,000 --> 00:33:09,600
this is a somewhat unpopular opinion

1013
00:33:09,600 --> 00:33:10,960
i've found

1014
00:33:10,960 --> 00:33:13,039
to be a good pen tester do you need to

1015
00:33:13,039 --> 00:33:15,440
know how to code no you don't to be a

1016
00:33:15,440 --> 00:33:18,480
great one absolutely you do

1017
00:33:18,480 --> 00:33:20,000
the ability to write your own exploits

1018
00:33:20,000 --> 00:33:21,679
becomes invaluable when common tools

1019
00:33:21,679 --> 00:33:23,279
like burp sweet and messed floyd reach

1020
00:33:23,279 --> 00:33:25,440
the limit of their capabilities

1021
00:33:25,440 --> 00:33:26,880
to demonstrate i'll explain to you

1022
00:33:26,880 --> 00:33:28,240
exactly how knowing how to automate

1023
00:33:28,240 --> 00:33:30,720
tasks is so small important now i will

1024
00:33:30,720 --> 00:33:32,640
share you um

1025
00:33:32,640 --> 00:33:34,240
the kind of code with me style

1026
00:33:34,240 --> 00:33:35,600
presentation i'm sure we've all seen

1027
00:33:35,600 --> 00:33:37,120
those i don't find them particularly

1028
00:33:37,120 --> 00:33:39,200
informative and i've fallen asleep

1029
00:33:39,200 --> 00:33:41,600
in my fair share

1030
00:33:41,600 --> 00:33:44,159
sorry to all those speakers as well

1031
00:33:44,159 --> 00:33:45,840
um but i really do want to ramp home

1032
00:33:45,840 --> 00:33:47,679
that learning how to program is a key

1033
00:33:47,679 --> 00:33:48,960
part of both demonstrating

1034
00:33:48,960 --> 00:33:50,799
exploitability to clients

1035
00:33:50,799 --> 00:33:52,720
and improving yourself as a security

1036
00:33:52,720 --> 00:33:54,960
professional

1037
00:33:54,960 --> 00:33:56,399
now

1038
00:33:56,399 --> 00:33:58,159
the second part of that improving

1039
00:33:58,159 --> 00:33:59,840
yourself as a security professional is

1040
00:33:59,840 --> 00:34:02,240
quite important what i've found is when

1041
00:34:02,240 --> 00:34:04,399
i'm talking to people who can program

1042
00:34:04,399 --> 00:34:06,080
those that can't the thought processes

1043
00:34:06,080 --> 00:34:07,919
of the ones that can program are a lot

1044
00:34:07,919 --> 00:34:10,079
more streamlined they're more efficient

1045
00:34:10,079 --> 00:34:11,679
they're used to taking incredibly

1046
00:34:11,679 --> 00:34:13,440
complex programs breaking them down into

1047
00:34:13,440 --> 00:34:14,960
constituent parts we call them

1048
00:34:14,960 --> 00:34:16,800
subroutines when we're coding

1049
00:34:16,800 --> 00:34:19,520
and then solving each constituent part

1050
00:34:19,520 --> 00:34:21,520
in turn and it doesn't really matter

1051
00:34:21,520 --> 00:34:22,879
which programming language you've picked

1052
00:34:22,879 --> 00:34:25,599
up either you know ruby python uh lua if

1053
00:34:25,599 --> 00:34:27,599
you want to learn lewer um what's it

1054
00:34:27,599 --> 00:34:29,440
called computer craft in minecraft the

1055
00:34:29,440 --> 00:34:31,599
little little robot little robots are

1056
00:34:31,599 --> 00:34:33,119
programmed in lua so that's a fun little

1057
00:34:33,119 --> 00:34:34,800
way you can learn learn lower that's

1058
00:34:34,800 --> 00:34:37,359
what i did during lockdown one

1059
00:34:37,359 --> 00:34:40,239
there's javascript there's go php

1060
00:34:40,239 --> 00:34:43,520
any any kind of scripting language

1061
00:34:43,520 --> 00:34:46,079
is invaluable because it allows you to

1062
00:34:46,079 --> 00:34:47,679
refine your thought process because

1063
00:34:47,679 --> 00:34:49,599
you're used to doing exactly exactly

1064
00:34:49,599 --> 00:34:51,918
what i just said taking a big problem

1065
00:34:51,918 --> 00:34:54,079
and making it into a lot of smaller ones

1066
00:34:54,079 --> 00:34:55,599
make it a lot faster and it'll stop

1067
00:34:55,599 --> 00:34:57,839
it'll help stop or at least help stop me

1068
00:34:57,839 --> 00:34:59,760
stressing out about big things that land

1069
00:34:59,760 --> 00:35:02,079
on your desk because you just are able

1070
00:35:02,079 --> 00:35:04,560
to approach them in a much more cohesive

1071
00:35:04,560 --> 00:35:08,240
or constructive manner

1072
00:35:08,720 --> 00:35:10,480
now where does this actually come in

1073
00:35:10,480 --> 00:35:12,800
useful

1074
00:35:12,800 --> 00:35:14,720
well there was a there was a security

1075
00:35:14,720 --> 00:35:16,560
assessment that i was performing

1076
00:35:16,560 --> 00:35:19,839
about five months ago now where they had

1077
00:35:19,839 --> 00:35:22,240
valid username enumeration and you could

1078
00:35:22,240 --> 00:35:23,680
brute force accounts and they had a

1079
00:35:23,680 --> 00:35:25,520
pretty weak password policy

1080
00:35:25,520 --> 00:35:27,599
and i was explaining as part of the

1081
00:35:27,599 --> 00:35:29,440
formal written part of the report that

1082
00:35:29,440 --> 00:35:31,359
this is quite a serious issue somebody

1083
00:35:31,359 --> 00:35:33,359
could probably go off and automate that

1084
00:35:33,359 --> 00:35:35,200
and the person on the other end of the

1085
00:35:35,200 --> 00:35:37,119
phone or other end of the

1086
00:35:37,119 --> 00:35:39,119
zoom call as i think it was at the time

1087
00:35:39,119 --> 00:35:40,800
said there's absolutely no way you can

1088
00:35:40,800 --> 00:35:42,880
do that which i can tell you now is the

1089
00:35:42,880 --> 00:35:44,240
worst thing to say to a band tester

1090
00:35:44,240 --> 00:35:45,280
because they're going to go off and do

1091
00:35:45,280 --> 00:35:46,000
it

1092
00:35:46,000 --> 00:35:47,359
and so i did

1093
00:35:47,359 --> 00:35:50,079
it took maybe half a day but you can

1094
00:35:50,079 --> 00:35:52,320
start to it really helped them

1095
00:35:52,320 --> 00:35:53,839
understand

1096
00:35:53,839 --> 00:35:55,440
what the actual severity of these

1097
00:35:55,440 --> 00:35:56,800
vulnerabilities were as part of an

1098
00:35:56,800 --> 00:35:58,720
attack chain so we've moved away from

1099
00:35:58,720 --> 00:36:00,560
just simply a vulnerability and how you

1100
00:36:00,560 --> 00:36:02,079
exploit it to how you change

1101
00:36:02,079 --> 00:36:03,839
vulnerabilities together and exploit

1102
00:36:03,839 --> 00:36:05,680
them all in tandem

1103
00:36:05,680 --> 00:36:08,320
so first what we did was there was a

1104
00:36:08,320 --> 00:36:11,440
username enumeration floor whereby

1105
00:36:11,440 --> 00:36:13,200
an account claimed it was locked out but

1106
00:36:13,200 --> 00:36:14,960
it wasn't they didn't send an email and

1107
00:36:14,960 --> 00:36:16,720
if you had a correct password it didn't

1108
00:36:16,720 --> 00:36:18,400
actually lock the account out so all it

1109
00:36:18,400 --> 00:36:20,079
did is i grabbed a really large word

1110
00:36:20,079 --> 00:36:22,320
list that i generated from linkedin

1111
00:36:22,320 --> 00:36:23,839
we've got the format of the email

1112
00:36:23,839 --> 00:36:25,440
through some open source intelligence

1113
00:36:25,440 --> 00:36:26,800
i'm sure there's some great talks today

1114
00:36:26,800 --> 00:36:29,520
about uh ocean i will recommend you go

1115
00:36:29,520 --> 00:36:30,800
and see

1116
00:36:30,800 --> 00:36:32,480
we generated this big long thing and we

1117
00:36:32,480 --> 00:36:34,400
just hammered hammered each of them with

1118
00:36:34,400 --> 00:36:36,400
five past uh five passwords they were

1119
00:36:36,400 --> 00:36:39,040
password one two three four and five and

1120
00:36:39,040 --> 00:36:40,400
if it then said the account had been

1121
00:36:40,400 --> 00:36:42,000
locked out

1122
00:36:42,000 --> 00:36:43,359
we passed that along to the second part

1123
00:36:43,359 --> 00:36:45,520
of the program which then tried to brute

1124
00:36:45,520 --> 00:36:47,440
force it we had a series of reused

1125
00:36:47,440 --> 00:36:49,920
passwords that we'd found on various

1126
00:36:49,920 --> 00:36:52,320
online services such as dehashed

1127
00:36:52,320 --> 00:36:54,400
and things like that and that's the

1128
00:36:54,400 --> 00:36:56,079
second part the program did and then the

1129
00:36:56,079 --> 00:36:59,359
third part of the program was

1130
00:36:59,359 --> 00:37:01,280
after we'd successfully authenticated

1131
00:37:01,280 --> 00:37:02,960
and we did actually successfully breach

1132
00:37:02,960 --> 00:37:05,359
the account it went off and just gen

1133
00:37:05,359 --> 00:37:06,720
using selenium just generated a

1134
00:37:06,720 --> 00:37:09,440
screenshot of the their account profile

1135
00:37:09,440 --> 00:37:11,040
page um

1136
00:37:11,040 --> 00:37:13,920
needless to say we did then upload that

1137
00:37:13,920 --> 00:37:15,440
we sent that over to the client and they

1138
00:37:15,440 --> 00:37:17,119
went right thank you that's that's

1139
00:37:17,119 --> 00:37:18,640
properly explained exactly how we're

1140
00:37:18,640 --> 00:37:21,280
going to go out and exploit this and

1141
00:37:21,280 --> 00:37:23,040
that's just one example of where that's

1142
00:37:23,040 --> 00:37:24,400
come into play

1143
00:37:24,400 --> 00:37:26,560
having this this ability to interact

1144
00:37:26,560 --> 00:37:28,880
with web applications or even as an

1145
00:37:28,880 --> 00:37:30,720
infrastructure person having that

1146
00:37:30,720 --> 00:37:32,160
ability to interact with things in a way

1147
00:37:32,160 --> 00:37:34,560
that you define and you control is

1148
00:37:34,560 --> 00:37:36,000
incredibly important and it means that

1149
00:37:36,000 --> 00:37:37,280
when you're going off and exploiting

1150
00:37:37,280 --> 00:37:39,280
these things or rather trying to explain

1151
00:37:39,280 --> 00:37:40,800
them to somebody who doesn't really

1152
00:37:40,800 --> 00:37:43,119
understand what you're talking about as

1153
00:37:43,119 --> 00:37:44,960
unfortunately so some people in

1154
00:37:44,960 --> 00:37:48,079
information security don't

1155
00:37:48,560 --> 00:37:50,560
it gives you that breadth of knowledge

1156
00:37:50,560 --> 00:37:52,320
or rather that depth of knowledge

1157
00:37:52,320 --> 00:37:53,680
because you have to know what every

1158
00:37:53,680 --> 00:37:55,280
little part of this thing's doing

1159
00:37:55,280 --> 00:37:56,880
because you're writing it

1160
00:37:56,880 --> 00:37:58,400
unless you start off stack overflow

1161
00:37:58,400 --> 00:38:01,599
which i have done a couple of times

1162
00:38:02,800 --> 00:38:04,480
getting the two arms of security to work

1163
00:38:04,480 --> 00:38:06,320
together now i promise the tattoos have

1164
00:38:06,320 --> 00:38:07,440
absolutely nothing to do with red and

1165
00:38:07,440 --> 00:38:09,200
blue team that was just an accident but

1166
00:38:09,200 --> 00:38:12,079
it works quite nicely here so here we go

1167
00:38:12,079 --> 00:38:14,800
um i've given a lot of information here

1168
00:38:14,800 --> 00:38:16,320
about the ways we can all improve the

1169
00:38:16,320 --> 00:38:17,920
methods by which we demonstrate to

1170
00:38:17,920 --> 00:38:20,400
clients how something is exploitable

1171
00:38:20,400 --> 00:38:22,480
now i'm going to put my client or my

1172
00:38:22,480 --> 00:38:24,480
bluetooth hat on and give some advice to

1173
00:38:24,480 --> 00:38:26,480
that side of the debate the best thing

1174
00:38:26,480 --> 00:38:28,240
that you can remember and to be fair the

1175
00:38:28,240 --> 00:38:30,000
same goes for the red team individuals

1176
00:38:30,000 --> 00:38:31,680
too is that we're all on the same side

1177
00:38:31,680 --> 00:38:33,680
of this fight you may have spent years

1178
00:38:33,680 --> 00:38:35,359
developing the solution but any good pen

1179
00:38:35,359 --> 00:38:37,200
tester will be just as invested maybe

1180
00:38:37,200 --> 00:38:38,640
not just as invested but definitely

1181
00:38:38,640 --> 00:38:40,880
invested in making said solution as

1182
00:38:40,880 --> 00:38:43,760
secure as it possibly can be

1183
00:38:43,760 --> 00:38:45,280
now that doesn't mean you have to take

1184
00:38:45,280 --> 00:38:47,040
them at face value a series of

1185
00:38:47,040 --> 00:38:48,720
certificates makes for a pretty looking

1186
00:38:48,720 --> 00:38:50,320
office wall but if they can't properly

1187
00:38:50,320 --> 00:38:51,599
give detailed explanations of the

1188
00:38:51,599 --> 00:38:53,119
vulnerabilities they're exploiting then

1189
00:38:53,119 --> 00:38:54,640
they're just decorative suggest

1190
00:38:54,640 --> 00:38:56,480
certificates

1191
00:38:56,480 --> 00:38:58,079
feel free to ask questions like how

1192
00:38:58,079 --> 00:38:59,680
would a legitimate threat act to exploit

1193
00:38:59,680 --> 00:39:00,480
this

1194
00:39:00,480 --> 00:39:01,839
what's the most damage that could be

1195
00:39:01,839 --> 00:39:03,280
caused by this vulnerability can you

1196
00:39:03,280 --> 00:39:05,440
give examples of that and most

1197
00:39:05,440 --> 00:39:07,119
importantly if you see alert one in a

1198
00:39:07,119 --> 00:39:08,960
report send them this video or at the

1199
00:39:08,960 --> 00:39:10,960
very least demand an explanation of what

1200
00:39:10,960 --> 00:39:14,599
can be done with it

1201
00:39:14,640 --> 00:39:18,440
do we have any questions

1202
00:39:31,119 --> 00:39:33,599
um but i have to repeat them for the

1203
00:39:33,599 --> 00:39:35,920
services list so what language did i use

1204
00:39:35,920 --> 00:39:36,800
to

1205
00:39:36,800 --> 00:39:38,000
uh auto

1206
00:39:38,000 --> 00:39:39,920
for that automation example i just gave

1207
00:39:39,920 --> 00:39:43,440
i use python um i'm a big fan of it it's

1208
00:39:43,440 --> 00:39:45,119
the coding language that i picked up

1209
00:39:45,119 --> 00:39:47,359
when i was first in there um however if

1210
00:39:47,359 --> 00:39:48,880
you're just having to pick up one

1211
00:39:48,880 --> 00:39:50,240
programming language and you're going

1212
00:39:50,240 --> 00:39:52,000
into pen testing i'd actually recommend

1213
00:39:52,000 --> 00:39:54,240
ruby it's a lot kinder to people who are

1214
00:39:54,240 --> 00:39:57,119
picking it up it's a lot friendlier

1215
00:39:57,119 --> 00:39:58,720
it can do all the same stuff python can

1216
00:39:58,720 --> 00:40:01,599
do it's just a lot nicer language to

1217
00:40:01,599 --> 00:40:04,240
interact with

1218
00:40:04,720 --> 00:40:07,439
anybody else

1219
00:40:07,599 --> 00:40:10,640
awesome well oh

1220
00:40:20,400 --> 00:40:22,400
okay so how can you demonstrate

1221
00:40:22,400 --> 00:40:23,760
exploitability when you have really

1222
00:40:23,760 --> 00:40:25,599
restricted rules of engagement

1223
00:40:25,599 --> 00:40:26,960
um

1224
00:40:26,960 --> 00:40:30,000
it really depends how restrictive you

1225
00:40:30,000 --> 00:40:31,680
talking about there like

1226
00:40:31,680 --> 00:40:36,000
that's a very very open-ended question

1227
00:40:36,000 --> 00:40:37,760
i've never been involved in engagements

1228
00:40:37,760 --> 00:40:39,760
where they've banned me from exploiting

1229
00:40:39,760 --> 00:40:42,000
cross-site scripting for example so

1230
00:40:42,000 --> 00:40:43,920
or things like that um sometimes you

1231
00:40:43,920 --> 00:40:45,680
have problems with brute forcing and

1232
00:40:45,680 --> 00:40:47,040
things like that but that's generally

1233
00:40:47,040 --> 00:40:49,359
only do you have any examples of when

1234
00:40:49,359 --> 00:40:53,400
really restrictive rules of engagement

1235
00:40:57,440 --> 00:40:59,839
all right

1236
00:41:00,160 --> 00:41:02,960
um just go as far as they'll let you

1237
00:41:02,960 --> 00:41:04,400
in that case

1238
00:41:04,400 --> 00:41:06,640
so the example given was sql injection

1239
00:41:06,640 --> 00:41:07,760
and not being allowed to access

1240
00:41:07,760 --> 00:41:09,359
databases um

1241
00:41:09,359 --> 00:41:10,800
i completely understand why clients

1242
00:41:10,800 --> 00:41:11,920
probably wouldn't want you sleeping

1243
00:41:11,920 --> 00:41:13,119
around their database they might have

1244
00:41:13,119 --> 00:41:14,720
stuff in there that might not want

1245
00:41:14,720 --> 00:41:17,119
getting out into the public um

1246
00:41:17,119 --> 00:41:19,200
but try and make sure that you're not

1247
00:41:19,200 --> 00:41:21,200
just doing like a single quote and a 500

1248
00:41:21,200 --> 00:41:23,119
server error you know see if there's any

1249
00:41:23,119 --> 00:41:25,599
ways you can move past that

1250
00:41:25,599 --> 00:41:27,839
and that again that opens up another

1251
00:41:27,839 --> 00:41:29,599
kind of words of how you do that do you

1252
00:41:29,599 --> 00:41:31,680
have uh server side request forgery for

1253
00:41:31,680 --> 00:41:33,359
example can you start to interrogate

1254
00:41:33,359 --> 00:41:35,520
open ports from the internal

1255
00:41:35,520 --> 00:41:38,800
yeah there's a lot to play with but

1256
00:41:38,800 --> 00:41:41,200
try not to do the single quote 500 over

1257
00:41:41,200 --> 00:41:43,598
everything

1258
00:41:46,000 --> 00:41:48,319
how did you see you managed to resolve

1259
00:41:48,319 --> 00:41:52,000
the cross-site scripting issue

1260
00:41:52,000 --> 00:41:54,960
resolve it yeah as in give remediation

1261
00:41:54,960 --> 00:41:57,960
advice

1262
00:42:08,000 --> 00:42:10,319
all right so example and the question

1263
00:42:10,319 --> 00:42:11,680
was how do you

1264
00:42:11,680 --> 00:42:13,599
give remediation advice specifically for

1265
00:42:13,599 --> 00:42:15,119
the crosstalk scripting vulnerability i

1266
00:42:15,119 --> 00:42:16,960
was discussing there um

1267
00:42:16,960 --> 00:42:19,040
we recommended like a series of

1268
00:42:19,040 --> 00:42:21,839
character encoding so you ban certain

1269
00:42:21,839 --> 00:42:23,440
um

1270
00:42:23,440 --> 00:42:24,960
has blacklisted certain things that

1271
00:42:24,960 --> 00:42:27,359
can't be doing that and then also the

1272
00:42:27,359 --> 00:42:29,680
part of the url specifically for this

1273
00:42:29,680 --> 00:42:31,680
that was being reflected didn't have to

1274
00:42:31,680 --> 00:42:33,119
be you could have stored that in a

1275
00:42:33,119 --> 00:42:35,119
cookie so we just got them to change it

1276
00:42:35,119 --> 00:42:36,400
and then it was no longer being

1277
00:42:36,400 --> 00:42:38,800
reflected

1278
00:42:40,160 --> 00:42:43,720
any more for any more

1279
00:42:44,400 --> 00:42:46,400
oh great well uh thank you for listening

1280
00:42:46,400 --> 00:42:48,400
to me and remember always chase the

1281
00:42:48,400 --> 00:42:52,040
rabbit thank you

