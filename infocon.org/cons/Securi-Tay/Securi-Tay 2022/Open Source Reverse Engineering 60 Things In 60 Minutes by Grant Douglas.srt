1
00:00:04,000 --> 00:00:06,560
uh cool so this talk is open source

2
00:00:06,560 --> 00:00:08,480
reverse engineering and we're going to

3
00:00:08,480 --> 00:00:10,400
talk about 60 things that you that we

4
00:00:10,400 --> 00:00:12,000
can do in 60 minutes and it really i've

5
00:00:12,000 --> 00:00:14,400
timed it is 60 minutes so we'll maybe

6
00:00:14,400 --> 00:00:16,320
have time for a question but if you just

7
00:00:16,320 --> 00:00:17,600
grab me at lunch don't worry about

8
00:00:17,600 --> 00:00:19,279
interrupting me just come grab questions

9
00:00:19,279 --> 00:00:21,840
i'm also at the synopsis stand so come

10
00:00:21,840 --> 00:00:23,359
ask questions afterwards i've got a

11
00:00:23,359 --> 00:00:24,720
bunch of stickers

12
00:00:24,720 --> 00:00:25,680
um

13
00:00:25,680 --> 00:00:26,960
so yeah if you don't get time to ask

14
00:00:26,960 --> 00:00:28,400
what you want to ask write it down we'll

15
00:00:28,400 --> 00:00:30,320
talk later

16
00:00:30,320 --> 00:00:31,199
so

17
00:00:31,199 --> 00:00:32,640
uh some of you

18
00:00:32,640 --> 00:00:34,320
know me i just see some faces i'm

19
00:00:34,320 --> 00:00:36,960
familiar with i graduated from abertay

20
00:00:36,960 --> 00:00:40,160
from the same hacking degree in 2013

21
00:00:40,160 --> 00:00:42,160
um i'm a principal consultant at

22
00:00:42,160 --> 00:00:44,640
synopsys and we do pretty much

23
00:00:44,640 --> 00:00:47,440
everything from web security mobile api

24
00:00:47,440 --> 00:00:48,879
testing threat modeling this kind of

25
00:00:48,879 --> 00:00:50,320
stuff

26
00:00:50,320 --> 00:00:52,000
my particular area of expertise is

27
00:00:52,000 --> 00:00:53,120
mobile

28
00:00:53,120 --> 00:00:54,960
and that sort of

29
00:00:54,960 --> 00:00:56,719
is where i got into reverse engineering

30
00:00:56,719 --> 00:00:57,920
looking at some of the more advanced

31
00:00:57,920 --> 00:00:59,840
controls how like banking apps and games

32
00:00:59,840 --> 00:01:01,440
protect themselves from like tampering

33
00:01:01,440 --> 00:01:02,879
the apps

34
00:01:02,879 --> 00:01:05,680
um so i kind of got into the area of

35
00:01:05,680 --> 00:01:07,040
exploring how those things work and then

36
00:01:07,040 --> 00:01:08,400
also how to prevent people from doing

37
00:01:08,400 --> 00:01:10,080
those things so

38
00:01:10,080 --> 00:01:13,040
that's my background

39
00:01:13,040 --> 00:01:14,400
so specifically today we're going to

40
00:01:14,400 --> 00:01:16,000
talk about radari 2.

41
00:01:16,000 --> 00:01:17,520
all of the stickers here are from the

42
00:01:17,520 --> 00:01:19,600
author uh so he sent me a bunch of them

43
00:01:19,600 --> 00:01:20,720
to give out

44
00:01:20,720 --> 00:01:22,479
so how many people have heard of radari

45
00:01:22,479 --> 00:01:23,759
2

46
00:01:23,759 --> 00:01:25,600
oh cool how many people have used radar

47
00:01:25,600 --> 00:01:26,720
2

48
00:01:26,720 --> 00:01:27,840
how many people have contributed to

49
00:01:27,840 --> 00:01:29,520
radar 2

50
00:01:29,520 --> 00:01:30,880
that's what i thought

51
00:01:30,880 --> 00:01:33,040
so yeah the first thing

52
00:01:33,040 --> 00:01:34,640
0 f60 the first thing you could do is

53
00:01:34,640 --> 00:01:36,880
contribute so that's the first free one

54
00:01:36,880 --> 00:01:38,560
so it's a it's an advanced

55
00:01:38,560 --> 00:01:42,159
disassembler hex hex editor the compiler

56
00:01:42,159 --> 00:01:43,520
debugger has pretty much everything

57
00:01:43,520 --> 00:01:46,399
inside of it um it runs on all platforms

58
00:01:46,399 --> 00:01:48,240
or pretty much all platforms and you can

59
00:01:48,240 --> 00:01:50,560
use it to analyze executables on most of

60
00:01:50,560 --> 00:01:52,159
those platforms as well

61
00:01:52,159 --> 00:01:53,920
um so pretty much any plastic system or

62
00:01:53,920 --> 00:01:56,000
windows system you know you can run r2

63
00:01:56,000 --> 00:01:57,680
it has a ui if you if you feel so

64
00:01:57,680 --> 00:01:59,920
inclined um you know some of us are fine

65
00:01:59,920 --> 00:02:01,360
working a terminal some people just want

66
00:02:01,360 --> 00:02:02,560
to visualize things in front of them a

67
00:02:02,560 --> 00:02:05,200
bit better um so you can use the gui as

68
00:02:05,200 --> 00:02:06,159
well

69
00:02:06,159 --> 00:02:08,399
it has a great conference every year so

70
00:02:08,399 --> 00:02:09,758
uh they usually have a lot of talks

71
00:02:09,758 --> 00:02:11,200
about like malware analysis and that

72
00:02:11,200 --> 00:02:12,239
kind of stuff

73
00:02:12,239 --> 00:02:14,400
and they do a lot of good um training uh

74
00:02:14,400 --> 00:02:17,200
that uh it's pretty cheap actually so um

75
00:02:17,200 --> 00:02:18,720
if you're if you're looking for training

76
00:02:18,720 --> 00:02:20,160
it's a good place to go and it's been

77
00:02:20,160 --> 00:02:22,239
around for about 16 years so it's been

78
00:02:22,239 --> 00:02:23,680
in development for a long time although

79
00:02:23,680 --> 00:02:25,360
it still has a lot of bugs i know some

80
00:02:25,360 --> 00:02:26,239
people

81
00:02:26,239 --> 00:02:27,440
experience a lot of pain when using

82
00:02:27,440 --> 00:02:29,360
radar too and that goes on to my next

83
00:02:29,360 --> 00:02:31,680
point the learning curve for r2 is

84
00:02:31,680 --> 00:02:33,040
extremely

85
00:02:33,040 --> 00:02:34,239
taxing

86
00:02:34,239 --> 00:02:36,000
anything basic is pretty easy and then

87
00:02:36,000 --> 00:02:36,959
whenever you want to do something

88
00:02:36,959 --> 00:02:38,959
sophisticated it gets hard quite fast

89
00:02:38,959 --> 00:02:39,840
right

90
00:02:39,840 --> 00:02:42,080
so the goal of this slide really is

91
00:02:42,080 --> 00:02:43,280
going to be kind of jumping all over the

92
00:02:43,280 --> 00:02:44,239
place showing you different things you

93
00:02:44,239 --> 00:02:45,760
can do with r2 in case you're not

94
00:02:45,760 --> 00:02:47,120
familiar or maybe you didn't know that

95
00:02:47,120 --> 00:02:49,280
these features exist

96
00:02:49,280 --> 00:02:50,480
so you can kind of use the slides

97
00:02:50,480 --> 00:02:52,400
afterwards as like a cheat sheet um

98
00:02:52,400 --> 00:02:53,920
there's many cheat sheets online that

99
00:02:53,920 --> 00:02:56,400
are at various states of maintenance

100
00:02:56,400 --> 00:02:58,159
um so this is kind of you're an

101
00:02:58,159 --> 00:02:59,840
up-to-date version of various things

102
00:02:59,840 --> 00:03:01,840
that you can do

103
00:03:01,840 --> 00:03:03,920
so the first thing you can do uh i don't

104
00:03:03,920 --> 00:03:05,360
know if it's too if the brightness is

105
00:03:05,360 --> 00:03:07,360
great but uh you can use the is command

106
00:03:07,360 --> 00:03:08,879
to list the sections inside of an

107
00:03:08,879 --> 00:03:10,239
executable so

108
00:03:10,239 --> 00:03:11,599
in this example we can see we have a

109
00:03:11,599 --> 00:03:13,760
section called rickroll um so you might

110
00:03:13,760 --> 00:03:15,840
be looking for like you know the codes

111
00:03:15,840 --> 00:03:17,599
or the strings or various other things

112
00:03:17,599 --> 00:03:20,000
inside of a binary um so often the first

113
00:03:20,000 --> 00:03:21,040
thing you're going to do is just look up

114
00:03:21,040 --> 00:03:22,640
what the strings are look at the section

115
00:03:22,640 --> 00:03:24,640
see if there's anything interesting in

116
00:03:24,640 --> 00:03:26,239
some advanced apps

117
00:03:26,239 --> 00:03:27,680
they tend to put a lot of stuff in there

118
00:03:27,680 --> 00:03:28,480
like

119
00:03:28,480 --> 00:03:29,840
checksums and signatures that they'll

120
00:03:29,840 --> 00:03:32,080
use to verify other parts of the code to

121
00:03:32,080 --> 00:03:34,080
resist tampering and stuff so often you

122
00:03:34,080 --> 00:03:35,680
want to just get a quick insight into

123
00:03:35,680 --> 00:03:36,799
what's there

124
00:03:36,799 --> 00:03:39,200
um you can also use the px command to

125
00:03:39,200 --> 00:03:41,200
print like a hex dump of

126
00:03:41,200 --> 00:03:42,799
information at a given address or an

127
00:03:42,799 --> 00:03:45,040
offset so depending on what kind of file

128
00:03:45,040 --> 00:03:46,159
you're looking at you could just ask it

129
00:03:46,159 --> 00:03:47,760
to dump a bunch of data

130
00:03:47,760 --> 00:03:50,959
um so pretty basic stuff

131
00:03:50,959 --> 00:03:52,560
uh you can also

132
00:03:52,560 --> 00:03:54,879
ask it to print a string so and maybe we

133
00:03:54,879 --> 00:03:58,000
don't want a particular uh

134
00:03:58,000 --> 00:03:59,599
you know bunch of hex bytes or we don't

135
00:03:59,599 --> 00:04:01,280
want like more information than we need

136
00:04:01,280 --> 00:04:02,799
we might just want the raw string if we

137
00:04:02,799 --> 00:04:04,480
know it's a string and this gets very

138
00:04:04,480 --> 00:04:06,159
useful when it comes to like automation

139
00:04:06,159 --> 00:04:07,680
and writing scripts and tools that use

140
00:04:07,680 --> 00:04:09,760
r2 and we'll talk about the apis it has

141
00:04:09,760 --> 00:04:10,879
in just a bit

142
00:04:10,879 --> 00:04:12,159
but if we know it's a string and we want

143
00:04:12,159 --> 00:04:13,760
to pull just the string out you know

144
00:04:13,760 --> 00:04:15,599
they have commands that we can use just

145
00:04:15,599 --> 00:04:18,238
just to do that

146
00:04:18,639 --> 00:04:20,478
um you can also

147
00:04:20,478 --> 00:04:22,000
overwrite things inside a binary so

148
00:04:22,000 --> 00:04:23,440
let's say it has a message inside the

149
00:04:23,440 --> 00:04:25,360
program like you know hey

150
00:04:25,360 --> 00:04:26,880
you're not an admin you can change the

151
00:04:26,880 --> 00:04:28,479
strings you know play with things a bit

152
00:04:28,479 --> 00:04:30,400
just for fun you know explore how that

153
00:04:30,400 --> 00:04:33,280
works um you can also overwrite uh

154
00:04:33,280 --> 00:04:34,800
various things inside the binary that

155
00:04:34,800 --> 00:04:36,479
might be used for

156
00:04:36,479 --> 00:04:38,160
um you know tamper checks and that kind

157
00:04:38,160 --> 00:04:40,240
of stuff so you can replace

158
00:04:40,240 --> 00:04:41,680
bytes in the binary you can also replace

159
00:04:41,680 --> 00:04:43,840
strings and all of those commands start

160
00:04:43,840 --> 00:04:45,440
with w for write

161
00:04:45,440 --> 00:04:47,280
so by default if you open up a binary

162
00:04:47,280 --> 00:04:49,040
it's not going to let you write and

163
00:04:49,040 --> 00:04:50,240
overwrite the file on disk so you can

164
00:04:50,240 --> 00:04:51,600
make a bunch of changes you can patch

165
00:04:51,600 --> 00:04:53,759
functions you can make

166
00:04:53,759 --> 00:04:55,440
changes to instructions

167
00:04:55,440 --> 00:04:56,800
and you'll still be able to view all of

168
00:04:56,800 --> 00:04:58,560
your changes it's as if the binary has

169
00:04:58,560 --> 00:05:00,720
been changed but it wouldn't actually

170
00:05:00,720 --> 00:05:02,000
you know write that to disk until you

171
00:05:02,000 --> 00:05:04,400
commit it so if you open the binary

172
00:05:04,400 --> 00:05:06,240
right mode as we'll see later on when

173
00:05:06,240 --> 00:05:07,440
you make these changes you'll actually

174
00:05:07,440 --> 00:05:09,120
be overwriting the file so obviously

175
00:05:09,120 --> 00:05:10,800
whatever you're analyzing make sure

176
00:05:10,800 --> 00:05:12,800
you've got a backup but by default you

177
00:05:12,800 --> 00:05:14,320
can make all these changes and it's all

178
00:05:14,320 --> 00:05:16,479
done in memory so you can visualize and

179
00:05:16,479 --> 00:05:18,000
analyze the binary with all your changes

180
00:05:18,000 --> 00:05:19,440
but the actual file and disk is going to

181
00:05:19,440 --> 00:05:21,840
remain the same so just bear that in

182
00:05:21,840 --> 00:05:23,440
mind if you're patching something and

183
00:05:23,440 --> 00:05:24,479
you're trying this for the first time

184
00:05:24,479 --> 00:05:25,440
and then you go run the binary

185
00:05:25,440 --> 00:05:27,120
afterwards it's still got the old string

186
00:05:27,120 --> 00:05:29,600
that's why

187
00:05:30,800 --> 00:05:32,320
so the other thing that you'll for

188
00:05:32,320 --> 00:05:33,600
everyone that raised their hand is use

189
00:05:33,600 --> 00:05:34,479
rs2

190
00:05:34,479 --> 00:05:36,000
you'll see this quirky messages at the

191
00:05:36,000 --> 00:05:37,280
top of the screen every time you launch

192
00:05:37,280 --> 00:05:39,360
it and they're called fortunes uh you

193
00:05:39,360 --> 00:05:41,199
can also print them using fo it's just a

194
00:05:41,199 --> 00:05:42,479
bit of fun so they normally have like a

195
00:05:42,479 --> 00:05:44,320
whole bunch of different messages they

196
00:05:44,320 --> 00:05:45,840
used to have some that were like you

197
00:05:45,840 --> 00:05:47,280
know not safe for work and other things

198
00:05:47,280 --> 00:05:48,880
and you could configure via variable

199
00:05:48,880 --> 00:05:51,919
like what type of messages you wanted um

200
00:05:51,919 --> 00:05:53,039
whereas now they just have like a

201
00:05:53,039 --> 00:05:55,120
default setup set that you can that you

202
00:05:55,120 --> 00:05:57,680
can print out

203
00:05:58,960 --> 00:06:01,039
uh the other thing is uh you don't just

204
00:06:01,039 --> 00:06:03,120
have to be a microsoft fan you can use

205
00:06:03,120 --> 00:06:05,199
clippy inside r2 so if you're throwing

206
00:06:05,199 --> 00:06:06,479
like a little plc to someone you can

207
00:06:06,479 --> 00:06:08,800
have clippy spit out you know the the

208
00:06:08,800 --> 00:06:10,160
instruction pointer or something you

209
00:06:10,160 --> 00:06:11,919
know um

210
00:06:11,919 --> 00:06:14,000
uh you know just

211
00:06:14,000 --> 00:06:15,600
just for fun really it's it's just a

212
00:06:15,600 --> 00:06:17,440
quirky thing um you can also use

213
00:06:17,440 --> 00:06:19,600
backticks if you want to chain commands

214
00:06:19,600 --> 00:06:20,639
so

215
00:06:20,639 --> 00:06:21,759
um

216
00:06:21,759 --> 00:06:23,199
if you start scripting things or you

217
00:06:23,199 --> 00:06:24,800
want to like speed up the way you're

218
00:06:24,800 --> 00:06:27,039
analyzing a binary you can use backticks

219
00:06:27,039 --> 00:06:28,720
to run a command and feed the output

220
00:06:28,720 --> 00:06:30,639
back into another command so in this

221
00:06:30,639 --> 00:06:32,960
case inside backticks we're asking for

222
00:06:32,960 --> 00:06:34,720
one of those fortunes the quirky

223
00:06:34,720 --> 00:06:36,160
messages and we're feeding it into the

224
00:06:36,160 --> 00:06:37,759
clippy command so clippy's just going to

225
00:06:37,759 --> 00:06:39,520
print out the message for us but there's

226
00:06:39,520 --> 00:06:41,680
ways that we might you know

227
00:06:41,680 --> 00:06:43,120
ask for a list of functions and feed

228
00:06:43,120 --> 00:06:44,880
that output into something that analyzes

229
00:06:44,880 --> 00:06:46,800
those functions so there's practical

230
00:06:46,800 --> 00:06:50,880
uses for this and not just for fun

231
00:06:51,919 --> 00:06:54,880
um another thing that is keen that you

232
00:06:54,880 --> 00:06:56,800
you'll need to know is that you use the

233
00:06:56,800 --> 00:06:58,560
s commands to navigate around there's

234
00:06:58,560 --> 00:06:59,599
multiple different ways that you'll

235
00:06:59,599 --> 00:07:01,840
navigate navigate around in r2 obviously

236
00:07:01,840 --> 00:07:03,360
if you're using the gui then you can

237
00:07:03,360 --> 00:07:05,440
just click on things um if you're using

238
00:07:05,440 --> 00:07:07,440
the the visual panels in in the terminal

239
00:07:07,440 --> 00:07:08,720
you can also just click on things with

240
00:07:08,720 --> 00:07:10,880
the with the mouse but you'll use the s

241
00:07:10,880 --> 00:07:12,400
command which is to seek to an address

242
00:07:12,400 --> 00:07:15,280
so you can seek to a particular

243
00:07:15,280 --> 00:07:17,599
address or a function name or an import

244
00:07:17,599 --> 00:07:19,039
name you can just

245
00:07:19,039 --> 00:07:20,800
type s and then they also have tab

246
00:07:20,800 --> 00:07:21,840
completion

247
00:07:21,840 --> 00:07:24,080
so you can just seek to something and

248
00:07:24,080 --> 00:07:26,000
then analyze it afterwards

249
00:07:26,000 --> 00:07:27,680
you can also do math so in this case we

250
00:07:27,680 --> 00:07:29,599
can say we want to seek to this address

251
00:07:29,599 --> 00:07:32,960
plus uh you know x24 um and we can do

252
00:07:32,960 --> 00:07:34,319
like multiple operations so if you were

253
00:07:34,319 --> 00:07:35,599
writing like an exploit or something and

254
00:07:35,599 --> 00:07:37,919
you had like a shell code a knob sled

255
00:07:37,919 --> 00:07:40,080
and about you know some other stuff uh

256
00:07:40,080 --> 00:07:42,080
you know some padding you can just do

257
00:07:42,080 --> 00:07:43,440
the math rather than having to work out

258
00:07:43,440 --> 00:07:45,039
what the exact offset you want to go to

259
00:07:45,039 --> 00:07:46,800
is you can just put the math in there so

260
00:07:46,800 --> 00:07:48,960
again when it comes to scripting you can

261
00:07:48,960 --> 00:07:50,240
have all of that in your script to make

262
00:07:50,240 --> 00:07:52,879
it nice and easy

263
00:07:53,840 --> 00:07:56,080
uh another thing that you'll probably do

264
00:07:56,080 --> 00:07:57,919
quite early on is use the afl command i

265
00:07:57,919 --> 00:08:00,080
think that's a little bit blurry um so

266
00:08:00,080 --> 00:08:02,319
afl is to give me a list of all the

267
00:08:02,319 --> 00:08:04,000
analyze functions

268
00:08:04,000 --> 00:08:06,000
and in this program we have three

269
00:08:06,000 --> 00:08:07,520
functions so we have a main function

270
00:08:07,520 --> 00:08:09,919
printf which is an import and a function

271
00:08:09,919 --> 00:08:11,599
called other function

272
00:08:11,599 --> 00:08:12,560
so

273
00:08:12,560 --> 00:08:13,680
you know one of the first points to call

274
00:08:13,680 --> 00:08:14,720
when you're looking at software is just

275
00:08:14,720 --> 00:08:16,560
to open up see what functions are there

276
00:08:16,560 --> 00:08:18,160
see what functions it imports from the

277
00:08:18,160 --> 00:08:20,319
system and then you're kind of learning

278
00:08:20,319 --> 00:08:23,520
a bit about the attack surface

279
00:08:25,120 --> 00:08:26,800
you can also print the disassembly of a

280
00:08:26,800 --> 00:08:28,479
function using pdf so print this

281
00:08:28,479 --> 00:08:30,319
assembly function and you give it the

282
00:08:30,319 --> 00:08:31,680
name of a function or the address of a

283
00:08:31,680 --> 00:08:33,039
function and it'll print out all the

284
00:08:33,039 --> 00:08:35,039
instructions in assembly that are in

285
00:08:35,039 --> 00:08:36,240
that function

286
00:08:36,240 --> 00:08:39,360
or you can use pd space a number and it

287
00:08:39,360 --> 00:08:40,958
will print out that many instructions so

288
00:08:40,958 --> 00:08:43,120
if you say pd5 it will print out five

289
00:08:43,120 --> 00:08:44,880
instructions if you say pd20 it prints

290
00:08:44,880 --> 00:08:46,720
out 20. so it depends on your needs

291
00:08:46,720 --> 00:08:48,320
maybe you want the whole instruction but

292
00:08:48,320 --> 00:08:50,000
the whole function but sometimes you

293
00:08:50,000 --> 00:08:52,000
know there are 3000 instructions long

294
00:08:52,000 --> 00:08:55,600
there are lots of basic blocks um so pdn

295
00:08:55,600 --> 00:08:57,680
is often kind of like the easier way of

296
00:08:57,680 --> 00:09:00,079
doing it

297
00:09:00,720 --> 00:09:02,399
uh you can also get decompile so

298
00:09:02,399 --> 00:09:03,680
obviously not everyone in the room is

299
00:09:03,680 --> 00:09:04,640
going to want to sit and look at

300
00:09:04,640 --> 00:09:06,320
assembly or you know would be

301
00:09:06,320 --> 00:09:07,680
comfortable sitting looking at assembly

302
00:09:07,680 --> 00:09:08,959
certainly if you're swapping between

303
00:09:08,959 --> 00:09:10,640
architectures and stuff like i i don't

304
00:09:10,640 --> 00:09:12,959
like looking at assembly um so it has a

305
00:09:12,959 --> 00:09:15,200
built-in decompiler um

306
00:09:15,200 --> 00:09:17,600
you can use pdd for the the built-in

307
00:09:17,600 --> 00:09:20,080
decompiler it's called r2 deck

308
00:09:20,080 --> 00:09:21,839
um and i don't know how visible that is

309
00:09:21,839 --> 00:09:23,680
but we can see this main function has it

310
00:09:23,680 --> 00:09:26,560
called printf with some rick acid lyrics

311
00:09:26,560 --> 00:09:29,040
and it calls another function when we

312
00:09:29,040 --> 00:09:30,480
see the the next screenshot we'll

313
00:09:30,480 --> 00:09:31,920
compare the outputs because there's

314
00:09:31,920 --> 00:09:33,279
multiple different decompilers and this

315
00:09:33,279 --> 00:09:35,120
one's it's okay but it's it's not the

316
00:09:35,120 --> 00:09:37,040
best

317
00:09:37,040 --> 00:09:40,320
so we can also use gidra from the nsa so

318
00:09:40,320 --> 00:09:41,600
they actually published some really cool

319
00:09:41,600 --> 00:09:43,600
tools get russ one of them

320
00:09:43,600 --> 00:09:46,320
and uh gedra the compiler has been

321
00:09:46,320 --> 00:09:48,880
pulled out of the java ui that i don't

322
00:09:48,880 --> 00:09:50,959
like java i'm going to hold my hands up

323
00:09:50,959 --> 00:09:52,560
and actually they put it into r2 so you

324
00:09:52,560 --> 00:09:54,959
can just call pdg and you get like a

325
00:09:54,959 --> 00:09:56,640
nice scheduler based decompile which is

326
00:09:56,640 --> 00:09:59,040
obviously a lot more uh

327
00:09:59,040 --> 00:10:00,959
correctly formed than the output in the

328
00:10:00,959 --> 00:10:03,279
top right so for example in the top

329
00:10:03,279 --> 00:10:04,640
right we can see that they call other

330
00:10:04,640 --> 00:10:06,399
function but visually it doesn't look

331
00:10:06,399 --> 00:10:07,920
like they pass in any arguments but

332
00:10:07,920 --> 00:10:09,440
actually the program does pass in the

333
00:10:09,440 --> 00:10:11,440
value ox2a and guidra was able to pick

334
00:10:11,440 --> 00:10:13,279
that up correctly so depending on your

335
00:10:13,279 --> 00:10:14,640
use case you know you can use the one

336
00:10:14,640 --> 00:10:16,640
that you prefer but i think it's nice to

337
00:10:16,640 --> 00:10:18,720
have kids are in there if you don't know

338
00:10:18,720 --> 00:10:22,560
what 2a is in decimal it's 42 so meaning

339
00:10:22,560 --> 00:10:23,600
of life

340
00:10:23,600 --> 00:10:25,600
so if you want to convert values you

341
00:10:25,600 --> 00:10:27,120
could use the question mark

342
00:10:27,120 --> 00:10:29,120
and that will let you convert between

343
00:10:29,120 --> 00:10:31,440
you know integers

344
00:10:31,440 --> 00:10:34,560
strings ternaries hex so

345
00:10:34,560 --> 00:10:36,560
um you can use the question mark in

346
00:10:36,560 --> 00:10:38,079
order to do the conversions and it also

347
00:10:38,079 --> 00:10:39,760
supports math so if you want to add two

348
00:10:39,760 --> 00:10:41,360
offsets and then the result you want to

349
00:10:41,360 --> 00:10:42,959
be converted into different formats like

350
00:10:42,959 --> 00:10:43,920
let's say you want to find out the

351
00:10:43,920 --> 00:10:45,920
distance between two addresses in

352
00:10:45,920 --> 00:10:47,839
integer format then you can use the

353
00:10:47,839 --> 00:10:50,720
question mark to do that

354
00:10:51,600 --> 00:10:53,279
uh you can also run system commands i'm

355
00:10:53,279 --> 00:10:54,560
not really sure

356
00:10:54,560 --> 00:10:56,399
when i've ever really had to do this to

357
00:10:56,399 --> 00:10:58,880
be honest so it's kind of useful like if

358
00:10:58,880 --> 00:11:00,560
i'm analyzing a binary and i want to

359
00:11:00,560 --> 00:11:02,320
like load in something else like a

360
00:11:02,320 --> 00:11:05,040
library then sometimes like i don't

361
00:11:05,040 --> 00:11:06,640
quite know the library name so i just

362
00:11:06,640 --> 00:11:09,360
like use exclamation mark ls just to see

363
00:11:09,360 --> 00:11:11,839
you know the current directory

364
00:11:11,839 --> 00:11:13,440
um but i'm sure there's many other

365
00:11:13,440 --> 00:11:14,880
practical uses that i've not run into

366
00:11:14,880 --> 00:11:16,640
yet but you can use exclamation mark

367
00:11:16,640 --> 00:11:18,800
followed by command um and then it will

368
00:11:18,800 --> 00:11:20,320
run that command inside the r2 shell

369
00:11:20,320 --> 00:11:21,839
without having to open up another tab or

370
00:11:21,839 --> 00:11:23,360
something like that so

371
00:11:23,360 --> 00:11:25,680
kind of useful but as i say i very

372
00:11:25,680 --> 00:11:27,680
rarely use it

373
00:11:27,680 --> 00:11:29,040
another really

374
00:11:29,040 --> 00:11:31,519
important thing is that like every other

375
00:11:31,519 --> 00:11:33,120
decompiler or disassembler you can see

376
00:11:33,120 --> 00:11:35,200
the cross references which means like

377
00:11:35,200 --> 00:11:36,640
when you see a function or a string you

378
00:11:36,640 --> 00:11:37,920
want to find out all the places it's

379
00:11:37,920 --> 00:11:41,680
used in that program so if they have uh

380
00:11:41,680 --> 00:11:43,440
you know a user privilege check let's

381
00:11:43,440 --> 00:11:45,040
say you want to find out all the places

382
00:11:45,040 --> 00:11:46,959
that that's called in order to like beat

383
00:11:46,959 --> 00:11:48,800
those checks or maybe you you just beat

384
00:11:48,800 --> 00:11:50,959
it in one place but first of all we just

385
00:11:50,959 --> 00:11:52,800
want to find out like okay

386
00:11:52,800 --> 00:11:54,000
where is

387
00:11:54,000 --> 00:11:55,519
all of the places inside this binary

388
00:11:55,519 --> 00:11:57,120
that this function is called or this

389
00:11:57,120 --> 00:11:59,600
string is referenced and so to do that

390
00:11:59,600 --> 00:12:02,480
use axt command and you tell it what

391
00:12:02,480 --> 00:12:03,920
you're looking for so in this case we

392
00:12:03,920 --> 00:12:06,000
want to know everywhere that uh printf

393
00:12:06,000 --> 00:12:08,240
is used and it's called in two places so

394
00:12:08,240 --> 00:12:10,560
it's called by main and it's also

395
00:12:10,560 --> 00:12:13,279
called inside our other function so

396
00:12:13,279 --> 00:12:14,720
if we were interested in that we could

397
00:12:14,720 --> 00:12:16,000
go to each of those functions now

398
00:12:16,000 --> 00:12:17,760
analyze them and figure out okay why are

399
00:12:17,760 --> 00:12:20,480
they using printf

400
00:12:21,680 --> 00:12:23,440
you can also see the control flow graph

401
00:12:23,440 --> 00:12:25,600
for uh you know a given function you can

402
00:12:25,600 --> 00:12:27,360
see this in the visual mode in the gui

403
00:12:27,360 --> 00:12:29,440
or also in the terminal it basically

404
00:12:29,440 --> 00:12:31,920
just shows you all of the blocks and um

405
00:12:31,920 --> 00:12:33,519
you know the conditions of which the

406
00:12:33,519 --> 00:12:35,279
code is going to take certain paths so

407
00:12:35,279 --> 00:12:37,040
in the red or green

408
00:12:37,040 --> 00:12:39,120
with the lights permitting and color

409
00:12:39,120 --> 00:12:41,440
blind permitting them sorry

410
00:12:41,440 --> 00:12:43,600
you have a f for false and the t for

411
00:12:43,600 --> 00:12:44,480
true

412
00:12:44,480 --> 00:12:46,079
and it shows you you know which chord

413
00:12:46,079 --> 00:12:47,279
path is going to take based on the

414
00:12:47,279 --> 00:12:48,639
output of the instructions so right if

415
00:12:48,639 --> 00:12:50,320
there's a comparison operation that

416
00:12:50,320 --> 00:12:51,839
happens and if statement encode

417
00:12:51,839 --> 00:12:53,040
obviously it's going to go one of two

418
00:12:53,040 --> 00:12:54,560
ways you know you are an admin or you're

419
00:12:54,560 --> 00:12:56,560
not an admin or you do have permission

420
00:12:56,560 --> 00:12:57,519
to open the file or you don't have

421
00:12:57,519 --> 00:12:58,800
permission to open the file this kind of

422
00:12:58,800 --> 00:13:00,800
stuff so you if you want to visualize

423
00:13:00,800 --> 00:13:02,399
what the function is doing and rather

424
00:13:02,399 --> 00:13:03,200
than just looking at a bunch of

425
00:13:03,200 --> 00:13:04,560
instructions you want to see like you

426
00:13:04,560 --> 00:13:06,240
know some loops and that kind of stuff

427
00:13:06,240 --> 00:13:08,399
it's often good to just jump into the

428
00:13:08,399 --> 00:13:10,160
graph and like figure out like how does

429
00:13:10,160 --> 00:13:11,680
the function look and you can kind of

430
00:13:11,680 --> 00:13:13,519
maneuver it with the arrow keys and you

431
00:13:13,519 --> 00:13:14,399
know

432
00:13:14,399 --> 00:13:17,040
plus or minus to to zoom in or zoom out

433
00:13:17,040 --> 00:13:18,399
and you can see in some of the blocks

434
00:13:18,399 --> 00:13:19,600
it's got like

435
00:13:19,600 --> 00:13:21,680
an ellipsis like three dots to show that

436
00:13:21,680 --> 00:13:23,200
obviously like some of the construct the

437
00:13:23,200 --> 00:13:27,360
instructions have been uh consolidated

438
00:13:28,560 --> 00:13:30,480
uh another thing is that you can print

439
00:13:30,480 --> 00:13:31,839
out all the strings so obviously

440
00:13:31,839 --> 00:13:33,600
everyone that sees linux will know or

441
00:13:33,600 --> 00:13:36,399
mac you can just run the strings utility

442
00:13:36,399 --> 00:13:37,519
against the binary it'll give you the

443
00:13:37,519 --> 00:13:38,800
strings

444
00:13:38,800 --> 00:13:41,199
it's interesting for us to do inside ida

445
00:13:41,199 --> 00:13:42,959
or r2 or something because we want to

446
00:13:42,959 --> 00:13:44,320
see where those strings are actually

447
00:13:44,320 --> 00:13:46,720
referenced or where they're used so for

448
00:13:46,720 --> 00:13:48,880
example let's say we have a android

449
00:13:48,880 --> 00:13:50,079
application that said you know that

450
00:13:50,079 --> 00:13:52,320
complains about the device being ruined

451
00:13:52,320 --> 00:13:53,120
right

452
00:13:53,120 --> 00:13:54,399
let's say we're finding it very

453
00:13:54,399 --> 00:13:55,680
difficult to find all the obfuscate

454
00:13:55,680 --> 00:13:57,440
functions that are doing the checks they

455
00:13:57,440 --> 00:13:58,880
might have an error on the screen that

456
00:13:58,880 --> 00:14:00,079
says hey you're not allowed to use the

457
00:14:00,079 --> 00:14:02,240
device device is rooted if i can find

458
00:14:02,240 --> 00:14:03,760
that string in the list of strings then

459
00:14:03,760 --> 00:14:05,360
i can find where that string is used in

460
00:14:05,360 --> 00:14:07,360
the code then i've now found the place

461
00:14:07,360 --> 00:14:09,360
at which i'm caught and then from there

462
00:14:09,360 --> 00:14:11,120
i've found the place at which i've been

463
00:14:11,120 --> 00:14:13,839
detected so quite often you want to find

464
00:14:13,839 --> 00:14:16,000
the messages on screen to work backwards

465
00:14:16,000 --> 00:14:17,600
to find the the control that you're

466
00:14:17,600 --> 00:14:19,040
interested in if you're finding it hard

467
00:14:19,040 --> 00:14:20,959
to find the control itself

468
00:14:20,959 --> 00:14:21,760
so

469
00:14:21,760 --> 00:14:23,199
yeah you can find strings using other

470
00:14:23,199 --> 00:14:25,360
tools but here we get the offsets we can

471
00:14:25,360 --> 00:14:28,160
pass those into the axt command to find

472
00:14:28,160 --> 00:14:29,920
where the cross references are find all

473
00:14:29,920 --> 00:14:33,279
the places that those things are used

474
00:14:33,519 --> 00:14:36,399
um we can also use the tilled operator

475
00:14:36,399 --> 00:14:38,720
to search it's kind of like a grep um or

476
00:14:38,720 --> 00:14:40,639
tilden a plus we'll do case insensitive

477
00:14:40,639 --> 00:14:41,519
grip

478
00:14:41,519 --> 00:14:43,440
so if you have lots of strings you might

479
00:14:43,440 --> 00:14:45,600
want to filter them if you have lots of

480
00:14:45,600 --> 00:14:46,800
instructions in the function you might

481
00:14:46,800 --> 00:14:48,480
be looking for certain things you know

482
00:14:48,480 --> 00:14:49,680
if you're building an exploit you might

483
00:14:49,680 --> 00:14:51,440
look for certain drop gadgets and that

484
00:14:51,440 --> 00:14:52,480
kind of stuff

485
00:14:52,480 --> 00:14:55,120
um so if you want to you can pass any

486
00:14:55,120 --> 00:14:56,800
command and then put a tilde afterwards

487
00:14:56,800 --> 00:14:58,160
and give it a search term and it will

488
00:14:58,160 --> 00:14:59,760
just print you only the results that

489
00:14:59,760 --> 00:15:01,760
match that search term so here we're

490
00:15:01,760 --> 00:15:03,279
printing all the disassembly of the

491
00:15:03,279 --> 00:15:05,040
function and then we're searching for

492
00:15:05,040 --> 00:15:07,600
edi so everywhere the edi register is

493
00:15:07,600 --> 00:15:10,000
referenced in one of those in one of the

494
00:15:10,000 --> 00:15:11,519
the lines of output then you know

495
00:15:11,519 --> 00:15:14,000
they're they're the lines that we see

496
00:15:14,000 --> 00:15:17,680
so quite quite useful to know

497
00:15:17,760 --> 00:15:20,480
um when you open a binary it isn't

498
00:15:20,480 --> 00:15:21,839
analyzed

499
00:15:21,839 --> 00:15:23,519
like you know by default so you know

500
00:15:23,519 --> 00:15:25,040
anyone that's used nad compiler

501
00:15:25,040 --> 00:15:27,040
disassembler they're all the same you

502
00:15:27,040 --> 00:15:28,800
open up the binary has to analyze it has

503
00:15:28,800 --> 00:15:31,279
to go through all of the code figure out

504
00:15:31,279 --> 00:15:32,160
you know

505
00:15:32,160 --> 00:15:33,120
uh

506
00:15:33,120 --> 00:15:34,560
which functions call which you know

507
00:15:34,560 --> 00:15:36,399
where the function start and end and you

508
00:15:36,399 --> 00:15:37,519
know it takes time for all this to

509
00:15:37,519 --> 00:15:39,120
happen most of them it takes you know

510
00:15:39,120 --> 00:15:41,680
anywhere from minutes to hours and r2 is

511
00:15:41,680 --> 00:15:43,279
the same except we have like a bit more

512
00:15:43,279 --> 00:15:45,360
granularity of like how much analysis we

513
00:15:45,360 --> 00:15:47,440
want to do if you give it a double a

514
00:15:47,440 --> 00:15:49,120
it'll just do some basic function

515
00:15:49,120 --> 00:15:50,240
analysis

516
00:15:50,240 --> 00:15:52,079
and if you give it triple a

517
00:15:52,079 --> 00:15:53,279
it'll go through and look at all the

518
00:15:53,279 --> 00:15:55,120
function calls it'll

519
00:15:55,120 --> 00:15:58,160
like find the parse like c plus v tables

520
00:15:58,160 --> 00:16:00,720
um it'll also give you um return

521
00:16:00,720 --> 00:16:03,040
information from the functions uh for uh

522
00:16:03,040 --> 00:16:05,440
various different things so there is

523
00:16:05,440 --> 00:16:07,680
some grounds to running aaa but quite

524
00:16:07,680 --> 00:16:09,199
often you might just want to cherry pick

525
00:16:09,199 --> 00:16:11,759
some of these commands in in parenthesis

526
00:16:11,759 --> 00:16:14,079
um that better match your needs so

527
00:16:14,079 --> 00:16:15,839
sometimes running all of the analysis

528
00:16:15,839 --> 00:16:17,440
actually it takes longer than you need

529
00:16:17,440 --> 00:16:19,759
and can actually sort of mess up some

530
00:16:19,759 --> 00:16:20,959
information that you might otherwise

531
00:16:20,959 --> 00:16:24,240
need and as a quirky easter egg you can

532
00:16:24,240 --> 00:16:26,399
actually give it a whole bunch of a's

533
00:16:26,399 --> 00:16:28,160
and it'll tell you that someone's coming

534
00:16:28,160 --> 00:16:29,440
out to your house to help you fix the

535
00:16:29,440 --> 00:16:32,240
problem so

536
00:16:32,560 --> 00:16:34,160
um another thing is it's very

537
00:16:34,160 --> 00:16:37,120
customizable so you can run the equal

538
00:16:37,120 --> 00:16:38,639
command it'll tell you all all of the

539
00:16:38,639 --> 00:16:41,920
themes um i use the top one which is iu

540
00:16:41,920 --> 00:16:43,680
um and on the right hand side you can

541
00:16:43,680 --> 00:16:45,680
see if if i set it to matrix i get a

542
00:16:45,680 --> 00:16:48,399
bunch of green green stuff

543
00:16:48,399 --> 00:16:50,000
and then some of the other ones i've got

544
00:16:50,000 --> 00:16:52,320
uh pink at the bottom and one dark in

545
00:16:52,320 --> 00:16:53,920
the middle again the lighting probably

546
00:16:53,920 --> 00:16:55,120
doesn't help you see it but you can play

547
00:16:55,120 --> 00:16:56,240
with the different themes you can also

548
00:16:56,240 --> 00:16:58,320
customize them or write your own themes

549
00:16:58,320 --> 00:17:01,279
so you get your your the terminal ui or

550
00:17:01,279 --> 00:17:03,199
just the terminal c the command line

551
00:17:03,199 --> 00:17:04,959
client itself to look you know how you

552
00:17:04,959 --> 00:17:07,119
like it how you prefer with your colors

553
00:17:07,119 --> 00:17:07,919
um

554
00:17:07,919 --> 00:17:09,359
you can also chain commands with the

555
00:17:09,359 --> 00:17:11,679
semicolon so in each of these two

556
00:17:11,679 --> 00:17:12,640
bubbles

557
00:17:12,640 --> 00:17:14,400
in the middle at the bottom i set the

558
00:17:14,400 --> 00:17:16,319
theme and then print five instructions

559
00:17:16,319 --> 00:17:18,880
just to show show the colors so quite

560
00:17:18,880 --> 00:17:20,079
often again you might want to chain

561
00:17:20,079 --> 00:17:22,160
commands with semicolon you know to

562
00:17:22,160 --> 00:17:23,839
analyze a function print out some

563
00:17:23,839 --> 00:17:25,839
instructions and then you know parts of

564
00:17:25,839 --> 00:17:27,199
you know pull a value from a register

565
00:17:27,199 --> 00:17:28,480
for example

566
00:17:28,480 --> 00:17:30,320
so uh chaining commands could be very

567
00:17:30,320 --> 00:17:31,360
useful

568
00:17:31,360 --> 00:17:34,400
um to speed up your analysis

569
00:17:34,400 --> 00:17:36,720
so it has visual modes inside the the

570
00:17:36,720 --> 00:17:38,240
terminal itself you don't have to use

571
00:17:38,240 --> 00:17:39,440
the full blown

572
00:17:39,440 --> 00:17:40,400
gui

573
00:17:40,400 --> 00:17:41,760
you can enter visual mode with the v

574
00:17:41,760 --> 00:17:43,360
command or v

575
00:17:43,360 --> 00:17:44,640
exclamation mark will give you visual

576
00:17:44,640 --> 00:17:47,520
panels mode so on the bottom right we

577
00:17:47,520 --> 00:17:48,799
have a list of all the functions the

578
00:17:48,799 --> 00:17:51,840
symbols on the top right we have um the

579
00:17:51,840 --> 00:17:52,559
the

580
00:17:52,559 --> 00:17:54,880
the full list of analyzed functions

581
00:17:54,880 --> 00:17:56,720
um in the middle we have our disassembly

582
00:17:56,720 --> 00:17:58,559
view and at the top we actually have a

583
00:17:58,559 --> 00:18:00,960
like a terminal based menu all of this

584
00:18:00,960 --> 00:18:02,320
you can use the mouse or the keyboard to

585
00:18:02,320 --> 00:18:03,840
interact with so you can actually

586
00:18:03,840 --> 00:18:06,080
configure what panel goes where um you

587
00:18:06,080 --> 00:18:07,440
know you can click on offsets you can

588
00:18:07,440 --> 00:18:08,799
use the scroll wheel to scroll through

589
00:18:08,799 --> 00:18:11,440
the disassembly so it's a sort of a bit

590
00:18:11,440 --> 00:18:12,720
better experience than just using the

591
00:18:12,720 --> 00:18:14,880
cli but it's not quite got the block

592
00:18:14,880 --> 00:18:16,160
that comes along with running like a

593
00:18:16,160 --> 00:18:18,720
full gui

594
00:18:19,440 --> 00:18:21,600
um and if you get really bored you can

595
00:18:21,600 --> 00:18:24,080
take a break and play 2048 so if you go

596
00:18:24,080 --> 00:18:26,640
into the visual panels menu under help i

597
00:18:26,640 --> 00:18:29,200
think it is uh you can choose to play

598
00:18:29,200 --> 00:18:30,880
2048 you know so if you're waiting on a

599
00:18:30,880 --> 00:18:32,559
long analysis you can just play some

600
00:18:32,559 --> 00:18:34,559
games and stuff inside r2 just again for

601
00:18:34,559 --> 00:18:38,080
no other reason then why not

602
00:18:38,640 --> 00:18:40,960
how are we doing in time yeah about

603
00:18:40,960 --> 00:18:44,160
right 25 minutes 25 points

604
00:18:44,160 --> 00:18:45,679
uh so another thing we could do is we

605
00:18:45,679 --> 00:18:47,679
could use the it command to get all the

606
00:18:47,679 --> 00:18:48,799
hashes for the file that we're looking

607
00:18:48,799 --> 00:18:51,039
at you know if it's a malware sample or

608
00:18:51,039 --> 00:18:52,080
maybe we just want to make sure that

609
00:18:52,080 --> 00:18:53,280
we're looking at the right build from a

610
00:18:53,280 --> 00:18:54,400
customer

611
00:18:54,400 --> 00:18:56,400
it will give you the hashes in various

612
00:18:56,400 --> 00:18:58,000
formats and

613
00:18:58,000 --> 00:18:59,919
if we stick a j on the end we can get

614
00:18:59,919 --> 00:19:01,919
the output as json so again if we're

615
00:19:01,919 --> 00:19:03,679
writing some tools and we want it in

616
00:19:03,679 --> 00:19:06,080
like a more like code

617
00:19:06,080 --> 00:19:08,480
you know code friendly format we don't

618
00:19:08,480 --> 00:19:09,760
want to you know split things at the

619
00:19:09,760 --> 00:19:12,080
limiter and pull out the second chunk of

620
00:19:12,080 --> 00:19:13,679
text like we can just get it as json and

621
00:19:13,679 --> 00:19:15,600
then we can parse it easily

622
00:19:15,600 --> 00:19:17,679
if we use the search operator and then

623
00:19:17,679 --> 00:19:19,679
some curled parenthesis we can actually

624
00:19:19,679 --> 00:19:22,080
get it to pre-print and json so it's a

625
00:19:22,080 --> 00:19:23,280
lot easier looking at the second

626
00:19:23,280 --> 00:19:25,280
screenshot than it is the first one

627
00:19:25,280 --> 00:19:26,720
um so we get the color formatting and

628
00:19:26,720 --> 00:19:28,640
it's obviously pretty printed indented

629
00:19:28,640 --> 00:19:29,760
accordingly

630
00:19:29,760 --> 00:19:31,600
and if you want to parse it directly in

631
00:19:31,600 --> 00:19:33,760
r2 you can specify

632
00:19:33,760 --> 00:19:34,480
the

633
00:19:34,480 --> 00:19:36,559
um i guess the scope from within the

634
00:19:36,559 --> 00:19:37,919
json that you're looking for inside the

635
00:19:37,919 --> 00:19:39,600
current parenthesis so in the third

636
00:19:39,600 --> 00:19:40,720
screenshot

637
00:19:40,720 --> 00:19:43,280
you can see that i want the md5 entry

638
00:19:43,280 --> 00:19:45,280
um and it gives me the value back from

639
00:19:45,280 --> 00:19:47,280
that so again if we're scripting things

640
00:19:47,280 --> 00:19:48,880
and we know exactly like the ground

641
00:19:48,880 --> 00:19:49,919
we're running and what the outputs are

642
00:19:49,919 --> 00:19:52,080
meant to look like it's very easy to you

643
00:19:52,080 --> 00:19:54,240
know to parse those out and build some

644
00:19:54,240 --> 00:19:55,600
some sort of tools that you might put in

645
00:19:55,600 --> 00:19:58,879
like a ci cd pipeline

646
00:20:00,000 --> 00:20:00,880
so

647
00:20:00,880 --> 00:20:02,480
in terms of scripting

648
00:20:02,480 --> 00:20:04,559
there's many different languages

649
00:20:04,559 --> 00:20:06,159
and each language has its own sort of

650
00:20:06,159 --> 00:20:08,880
set of support there are kind of three

651
00:20:08,880 --> 00:20:10,080
main languages that are first class

652
00:20:10,080 --> 00:20:11,840
citizens c

653
00:20:11,840 --> 00:20:14,640
nodejs i think and python and so if you

654
00:20:14,640 --> 00:20:16,240
choose them generally you have access to

655
00:20:16,240 --> 00:20:17,840
like pretty much most of the features

656
00:20:17,840 --> 00:20:19,120
they have some limited support for

657
00:20:19,120 --> 00:20:21,760
languages like go and v and other like

658
00:20:21,760 --> 00:20:23,840
kind of obs goals not obscure but they

659
00:20:23,840 --> 00:20:25,280
have some obscure

660
00:20:25,280 --> 00:20:26,559
languages in there that have lesser

661
00:20:26,559 --> 00:20:28,400
support so if you do want to build some

662
00:20:28,400 --> 00:20:29,600
tooling and you do want to do like

663
00:20:29,600 --> 00:20:31,039
firmware analysis you know as part of

664
00:20:31,039 --> 00:20:32,240
your studies or whatever and you're

665
00:20:32,240 --> 00:20:34,080
thinking about using r2 just have a look

666
00:20:34,080 --> 00:20:35,760
at the languages first so that you know

667
00:20:35,760 --> 00:20:37,600
like you pick one that's gonna you know

668
00:20:37,600 --> 00:20:38,720
you're not gonna get halfway down and

669
00:20:38,720 --> 00:20:40,480
find out it's not possible

670
00:20:40,480 --> 00:20:42,880
um so in in this example in python we

671
00:20:42,880 --> 00:20:45,039
can just open up like ls and we'll just

672
00:20:45,039 --> 00:20:47,360
print out all of the imports using ii

673
00:20:47,360 --> 00:20:49,440
but notice again on line eight that we

674
00:20:49,440 --> 00:20:51,360
do i i j

675
00:20:51,360 --> 00:20:53,360
and that's so that we get the output as

676
00:20:53,360 --> 00:20:54,480
json

677
00:20:54,480 --> 00:20:56,960
so we just go through in a for each

678
00:20:56,960 --> 00:20:58,720
print out all the function names and on

679
00:20:58,720 --> 00:20:59,840
the right hand side you can see them all

680
00:20:59,840 --> 00:21:01,760
listed in blue

681
00:21:01,760 --> 00:21:04,240
just as a basic proof of concept so

682
00:21:04,240 --> 00:21:06,559
yeah if we want to let's say

683
00:21:06,559 --> 00:21:08,320
you know find out like which apis are

684
00:21:08,320 --> 00:21:09,600
being called on a system you know you

685
00:21:09,600 --> 00:21:11,280
might do this for something like uh

686
00:21:11,280 --> 00:21:12,799
android or ios where you want to find

687
00:21:12,799 --> 00:21:13,679
out

688
00:21:13,679 --> 00:21:15,600
you you map out all the privacy related

689
00:21:15,600 --> 00:21:17,840
apis you want to find out if any apps

690
00:21:17,840 --> 00:21:18,799
quickly

691
00:21:18,799 --> 00:21:20,240
quickly scan them find out if they use

692
00:21:20,240 --> 00:21:21,600
any privacy

693
00:21:21,600 --> 00:21:23,600
related apis you know just to you know

694
00:21:23,600 --> 00:21:25,600
create like a privacy score that kind of

695
00:21:25,600 --> 00:21:27,520
stuff it's very basic but you know you

696
00:21:27,520 --> 00:21:31,360
can get some interesting results

697
00:21:31,360 --> 00:21:33,919
and this graph is on the r2 pipe github

698
00:21:33,919 --> 00:21:36,480
um this kind of gives you a table i

699
00:21:36,480 --> 00:21:38,640
guess of all the different features so

700
00:21:38,640 --> 00:21:40,480
as i said c

701
00:21:40,480 --> 00:21:42,880
nodejs and python are kind of the best

702
00:21:42,880 --> 00:21:45,520
supported but you do have moderate

703
00:21:45,520 --> 00:21:46,720
support for

704
00:21:46,720 --> 00:21:50,480
you know c-sharp and uh pearl um swift

705
00:21:50,480 --> 00:21:52,799
even has some decent support so

706
00:21:52,799 --> 00:21:54,159
there are other languages and you might

707
00:21:54,159 --> 00:21:56,240
find that in that table you you have

708
00:21:56,240 --> 00:21:57,760
everything you need

709
00:21:57,760 --> 00:21:59,039
or you can have a play with it and find

710
00:21:59,039 --> 00:22:00,960
that you have everything you need but if

711
00:22:00,960 --> 00:22:02,799
you want everything then it's easier to

712
00:22:02,799 --> 00:22:06,480
pick something like javascript or python

713
00:22:08,159 --> 00:22:09,200
so

714
00:22:09,200 --> 00:22:10,640
obviously i'm rattling off a lot of

715
00:22:10,640 --> 00:22:12,000
commands and it's very difficult to

716
00:22:12,000 --> 00:22:13,760
remember what all of them do

717
00:22:13,760 --> 00:22:16,000
you can use the question mark to get the

718
00:22:16,000 --> 00:22:17,520
help info for any of these commands so

719
00:22:17,520 --> 00:22:18,880
if you put it at the end of a command

720
00:22:18,880 --> 00:22:20,720
it'll print out all of the related help

721
00:22:20,720 --> 00:22:22,559
information so in the first screenshot

722
00:22:22,559 --> 00:22:25,360
we say afl question mark afl is to list

723
00:22:25,360 --> 00:22:26,559
all the functions

724
00:22:26,559 --> 00:22:28,880
so it tells us that but it also tells us

725
00:22:28,880 --> 00:22:30,720
that there are sub commands for afl like

726
00:22:30,720 --> 00:22:31,679
afl

727
00:22:31,679 --> 00:22:34,320
period or afl plus aflt and it tells us

728
00:22:34,320 --> 00:22:35,600
what all these sort of sub commands do

729
00:22:35,600 --> 00:22:37,520
as well so if we're interested in a

730
00:22:37,520 --> 00:22:38,640
command and see if there's any

731
00:22:38,640 --> 00:22:40,080
variations that might better suit the

732
00:22:40,080 --> 00:22:42,000
analysis we're doing we can just stick a

733
00:22:42,000 --> 00:22:43,440
question mark on it and it will help us

734
00:22:43,440 --> 00:22:45,280
out them some of them will actually give

735
00:22:45,280 --> 00:22:47,520
you usage examples as well um so

736
00:22:47,520 --> 00:22:49,200
question mark is always a good way

737
00:22:49,200 --> 00:22:50,799
there's kind of this

738
00:22:50,799 --> 00:22:53,440
state of of mentality with r2 it's like

739
00:22:53,440 --> 00:22:54,799
self-documenting it's got the steep

740
00:22:54,799 --> 00:22:56,640
learning curve and actually the best way

741
00:22:56,640 --> 00:22:58,080
of learning is to go in and use it and

742
00:22:58,080 --> 00:22:59,280
start putting the question mark on your

743
00:22:59,280 --> 00:23:00,480
commands and just figuring out what

744
00:23:00,480 --> 00:23:02,320
commands exist and what they do

745
00:23:02,320 --> 00:23:03,120
um

746
00:23:03,120 --> 00:23:04,400
not everyone works that way but

747
00:23:04,400 --> 00:23:06,080
certainly if you're forgetful and you're

748
00:23:06,080 --> 00:23:07,280
not quite sure if you're using the right

749
00:23:07,280 --> 00:23:08,480
command for the job

750
00:23:08,480 --> 00:23:11,360
question mark's gonna be gonna be a help

751
00:23:11,360 --> 00:23:12,480
recently

752
00:23:12,480 --> 00:23:15,039
about three months ago actually

753
00:23:15,039 --> 00:23:16,960
they implemented a change where you can

754
00:23:16,960 --> 00:23:18,960
just type a command and hit tab and then

755
00:23:18,960 --> 00:23:20,320
it will print out the help message for

756
00:23:20,320 --> 00:23:21,919
you it's owned by default you can

757
00:23:21,919 --> 00:23:24,320
configure it off um again if you're just

758
00:23:24,320 --> 00:23:25,360
typing commands and you want to tab

759
00:23:25,360 --> 00:23:26,559
completion it just gives you the help

760
00:23:26,559 --> 00:23:30,480
information so you can use that as well

761
00:23:30,559 --> 00:23:32,640
uh you can also print data as a qr code

762
00:23:32,640 --> 00:23:35,520
so pq and a number will tell you like no

763
00:23:35,520 --> 00:23:36,679
like let's say

764
00:23:36,679 --> 00:23:39,840
pkpq20 will print out the next 20 bytes

765
00:23:39,840 --> 00:23:42,480
as a qr code or you could say pqz which

766
00:23:42,480 --> 00:23:44,159
will make a qr code based on the current

767
00:23:44,159 --> 00:23:45,919
string at the address you're you're seek

768
00:23:45,919 --> 00:23:46,799
to

769
00:23:46,799 --> 00:23:48,960
um so you can you know

770
00:23:48,960 --> 00:23:51,039
quickly export data to

771
00:23:51,039 --> 00:23:52,880
you know other mediums you know

772
00:23:52,880 --> 00:23:54,320
copy from a laptop to something else if

773
00:23:54,320 --> 00:23:55,840
you wanted i don't know what you would

774
00:23:55,840 --> 00:23:57,440
practically use this but again it's

775
00:23:57,440 --> 00:24:01,600
capable of working with qr codes

776
00:24:02,159 --> 00:24:02,960
uh

777
00:24:02,960 --> 00:24:04,880
in the winter another easter egg is you

778
00:24:04,880 --> 00:24:07,279
can turn on uh snow mode i didn't even

779
00:24:07,279 --> 00:24:08,799
know this existed until i went hunting

780
00:24:08,799 --> 00:24:10,640
for easter eggs for this talk

781
00:24:10,640 --> 00:24:12,640
um so if you use the left parenthesis in

782
00:24:12,640 --> 00:24:14,559
visual panels mode it just sparkles some

783
00:24:14,559 --> 00:24:16,559
snow while you're you know hacking some

784
00:24:16,559 --> 00:24:19,200
malware i don't know kind of cool

785
00:24:19,200 --> 00:24:20,400
um

786
00:24:20,400 --> 00:24:21,760
yeah uh

787
00:24:21,760 --> 00:24:23,600
the other really thing really cool thing

788
00:24:23,600 --> 00:24:25,440
i like that i find really useful from my

789
00:24:25,440 --> 00:24:27,679
particular job is converting

790
00:24:27,679 --> 00:24:29,440
instructions into hex pairs and vice

791
00:24:29,440 --> 00:24:31,120
versa so i do a lot of stuff where i'm

792
00:24:31,120 --> 00:24:32,720
looking for certain up quotes and

793
00:24:32,720 --> 00:24:33,919
instructions

794
00:24:33,919 --> 00:24:36,720
uh for signatures that uh many

795
00:24:36,720 --> 00:24:38,559
commercial like anti-tampering products

796
00:24:38,559 --> 00:24:39,279
do

797
00:24:39,279 --> 00:24:42,480
um for protecting games or banking apps

798
00:24:42,480 --> 00:24:44,880
and so i tend to profile some of the

799
00:24:44,880 --> 00:24:46,480
instruction partners that they have but

800
00:24:46,480 --> 00:24:48,000
searching for that stuff is really

801
00:24:48,000 --> 00:24:49,679
expensive like it takes a long time some

802
00:24:49,679 --> 00:24:51,440
of these binaries are massive and the

803
00:24:51,440 --> 00:24:53,520
instructions are uh that i'm searching

804
00:24:53,520 --> 00:24:55,279
for can be you know

805
00:24:55,279 --> 00:24:57,039
let's say 10 instructions with some wild

806
00:24:57,039 --> 00:24:58,080
cards in the middle that are

807
00:24:58,080 --> 00:25:00,240
unpredictable and so those searches can

808
00:25:00,240 --> 00:25:02,240
be very costly and in a mobile app for

809
00:25:02,240 --> 00:25:04,799
example or in a game you might have the

810
00:25:04,799 --> 00:25:06,640
main app as well as like many libraries

811
00:25:06,640 --> 00:25:08,480
where the controls can be split across

812
00:25:08,480 --> 00:25:10,960
so this is really costly so what i tend

813
00:25:10,960 --> 00:25:13,440
to do is i i'll convert the instructions

814
00:25:13,440 --> 00:25:15,279
like in the first screenshot convert the

815
00:25:15,279 --> 00:25:17,919
the written instruction into hex pairs

816
00:25:17,919 --> 00:25:20,240
into up codes and then i'll do a hex

817
00:25:20,240 --> 00:25:21,520
based search which is basically

818
00:25:21,520 --> 00:25:22,799
lightning quick like the results come

819
00:25:22,799 --> 00:25:24,720
back basically by the time you hit enter

820
00:25:24,720 --> 00:25:25,679
so

821
00:25:25,679 --> 00:25:27,840
um it can also be useful to convert back

822
00:25:27,840 --> 00:25:29,679
so if you're looking at like signature

823
00:25:29,679 --> 00:25:30,960
patterns i've seen products that

824
00:25:30,960 --> 00:25:33,440
actually spit out the the hex pair up

825
00:25:33,440 --> 00:25:35,919
codes that that were identified and

826
00:25:35,919 --> 00:25:37,360
flagged or i'll find them in a buffer

827
00:25:37,360 --> 00:25:39,039
and you know when i'm debugging the app

828
00:25:39,039 --> 00:25:41,200
and if i want to map them back to you

829
00:25:41,200 --> 00:25:42,960
know instructions you can do it with pid

830
00:25:42,960 --> 00:25:44,240
as well so

831
00:25:44,240 --> 00:25:46,159
this will actually and it will use the

832
00:25:46,159 --> 00:25:47,440
architecture of the program you're

833
00:25:47,440 --> 00:25:50,000
analyzing or if you want to be explicit

834
00:25:50,000 --> 00:25:52,080
in the top example i tell it it's arm

835
00:25:52,080 --> 00:25:54,480
and 64 bit and then the final hyphen

836
00:25:54,480 --> 00:25:56,000
says i'm not opening any program just a

837
00:25:56,000 --> 00:25:57,600
blank session

838
00:25:57,600 --> 00:25:59,679
so in this case i've explicitly told it

839
00:25:59,679 --> 00:26:02,000
i'm looking at 64-bit arm right whereas

840
00:26:02,000 --> 00:26:04,640
if i was looking at a power pc

841
00:26:04,640 --> 00:26:06,720
um executable or

842
00:26:06,720 --> 00:26:09,360
a game boy rom it will work based on the

843
00:26:09,360 --> 00:26:10,799
the particular architecture i'm looking

844
00:26:10,799 --> 00:26:12,879
at

845
00:26:14,480 --> 00:26:16,480
another thing is that

846
00:26:16,480 --> 00:26:17,600
you'll always get in the habit of

847
00:26:17,600 --> 00:26:19,279
writing comments same as if you're using

848
00:26:19,279 --> 00:26:21,520
idol or hop or something else as you go

849
00:26:21,520 --> 00:26:23,360
through and analyze functions

850
00:26:23,360 --> 00:26:24,960
you'll want to do two things you want to

851
00:26:24,960 --> 00:26:26,960
rename them so that they have more

852
00:26:26,960 --> 00:26:29,200
intelligible names right so not often

853
00:26:29,200 --> 00:26:30,480
are they going to be called like other

854
00:26:30,480 --> 00:26:32,159
function they're going to be the symbols

855
00:26:32,159 --> 00:26:32,960
are going to be stripped and they're

856
00:26:32,960 --> 00:26:35,120
just going to be you know named

857
00:26:35,120 --> 00:26:36,720
as the offset that they're currently at

858
00:26:36,720 --> 00:26:38,480
in the binary so

859
00:26:38,480 --> 00:26:39,679
typically once you figure out what the

860
00:26:39,679 --> 00:26:41,039
function does you'll rename it so that

861
00:26:41,039 --> 00:26:42,480
when you see it called by other

862
00:26:42,480 --> 00:26:43,919
functions you'll say okay that's the

863
00:26:43,919 --> 00:26:46,000
user check or this is the decrypt config

864
00:26:46,000 --> 00:26:47,679
function and so when you're analyzing

865
00:26:47,679 --> 00:26:49,679
other functions when you see those names

866
00:26:49,679 --> 00:26:50,720
it helps you understand what those

867
00:26:50,720 --> 00:26:53,120
functions then do to rename them as well

868
00:26:53,120 --> 00:26:55,120
another thing you'll do is add comments

869
00:26:55,120 --> 00:26:56,559
so that when you go back to things or

870
00:26:56,559 --> 00:26:57,919
you're looking back through things the

871
00:26:57,919 --> 00:26:59,440
comments tell you like what you've

872
00:26:59,440 --> 00:27:00,720
already analyzed so that you're not

873
00:27:00,720 --> 00:27:02,000
having to go through and work things out

874
00:27:02,000 --> 00:27:03,679
again because it is sometimes

875
00:27:03,679 --> 00:27:05,520
complicated especially with

876
00:27:05,520 --> 00:27:07,679
the polymorphic code and like malware

877
00:27:07,679 --> 00:27:10,159
that does like you know packing

878
00:27:10,159 --> 00:27:11,520
has packed code and stuff like that it

879
00:27:11,520 --> 00:27:14,320
can be a little bit um painful at times

880
00:27:14,320 --> 00:27:16,960
so keeping keeping comments in your code

881
00:27:16,960 --> 00:27:19,440
is good in r2 you can do it with the cc

882
00:27:19,440 --> 00:27:20,720
commands

883
00:27:20,720 --> 00:27:23,600
so in the first bubble uh we add the

884
00:27:23,600 --> 00:27:26,080
command pancake was here pancake is the

885
00:27:26,080 --> 00:27:28,159
main author of r2

886
00:27:28,159 --> 00:27:30,720
and we tell it to add that comment at a

887
00:27:30,720 --> 00:27:32,480
specific address and we can see it over

888
00:27:32,480 --> 00:27:33,919
on the right hand side the comment is

889
00:27:33,919 --> 00:27:35,120
it's actually yellow it's just grey

890
00:27:35,120 --> 00:27:36,080
because i've highlighted it with the

891
00:27:36,080 --> 00:27:39,440
cursor so we get the the comment in grey

892
00:27:39,440 --> 00:27:41,200
and then if we want to remove it we can

893
00:27:41,200 --> 00:27:43,360
use cc minus to get rid of the the

894
00:27:43,360 --> 00:27:45,039
comment at that address as well we can

895
00:27:45,039 --> 00:27:46,640
also list them and do various other

896
00:27:46,640 --> 00:27:48,640
things update them and so on

897
00:27:48,640 --> 00:27:50,399
the other thing that's really useful is

898
00:27:50,399 --> 00:27:52,000
if you notice all the text in green

899
00:27:52,000 --> 00:27:53,840
after the semicolon this is an

900
00:27:53,840 --> 00:27:55,360
environment variable inside r2 that i've

901
00:27:55,360 --> 00:27:56,960
turned on it's quite useful when you're

902
00:27:56,960 --> 00:27:58,399
jumping between architectures it's

903
00:27:58,399 --> 00:27:59,360
basically

904
00:27:59,360 --> 00:28:00,720
a human description of what the

905
00:28:00,720 --> 00:28:03,039
instructions do so if you're

906
00:28:03,039 --> 00:28:04,880
new to that particular architecture or

907
00:28:04,880 --> 00:28:06,480
you're not that great with assembly or

908
00:28:06,480 --> 00:28:08,159
you're just learning things it's quite

909
00:28:08,159 --> 00:28:09,600
good to have that turned on because it's

910
00:28:09,600 --> 00:28:10,960
kind of it's not really in the way you

911
00:28:10,960 --> 00:28:12,720
still get all of the other information

912
00:28:12,720 --> 00:28:14,880
but it serves as like a refresher or a

913
00:28:14,880 --> 00:28:16,880
reminder of like okay it's like pushing

914
00:28:16,880 --> 00:28:18,720
this value into this register or this

915
00:28:18,720 --> 00:28:20,960
subtracts things from the accumulator um

916
00:28:20,960 --> 00:28:24,240
yeah so it's just a way of basically uh

917
00:28:24,240 --> 00:28:25,919
helping when you're you know learning in

918
00:28:25,919 --> 00:28:27,360
your architecture that kind of stuff and

919
00:28:27,360 --> 00:28:28,399
i just leave it on because it doesn't

920
00:28:28,399 --> 00:28:32,959
get in my way so it's useful to have

921
00:28:34,960 --> 00:28:37,919
um and as i said renaming things is

922
00:28:37,919 --> 00:28:38,960
typically

923
00:28:38,960 --> 00:28:40,559
a given you're not going to rename the

924
00:28:40,559 --> 00:28:41,760
whole binary but anything that you find

925
00:28:41,760 --> 00:28:43,200
that's interesting any function that

926
00:28:43,200 --> 00:28:45,360
makes it's particularly relevant to your

927
00:28:45,360 --> 00:28:47,360
analysis like you know it's a good it's

928
00:28:47,360 --> 00:28:49,520
a good idea to rename it so that you're

929
00:28:49,520 --> 00:28:51,200
you're able to see what those things do

930
00:28:51,200 --> 00:28:53,279
so in the first example we have other

931
00:28:53,279 --> 00:28:55,600
function doesn't really tell us much if

932
00:28:55,600 --> 00:28:57,600
we go there and find out that yeah okay

933
00:28:57,600 --> 00:28:59,600
it takes the value 42 and it prints it

934
00:28:59,600 --> 00:29:00,960
it's this is printing the meaning of

935
00:29:00,960 --> 00:29:04,240
life so i'll rename it using afn

936
00:29:04,240 --> 00:29:06,559
next to the 38 bubble so i'll say afn

937
00:29:06,559 --> 00:29:08,480
print meaning of life and then i'll give

938
00:29:08,480 --> 00:29:09,440
it

939
00:29:09,440 --> 00:29:10,960
that symbol to say where i want to make

940
00:29:10,960 --> 00:29:13,120
that change and i'll say

941
00:29:13,120 --> 00:29:15,279
symbol.other function and so now when i

942
00:29:15,279 --> 00:29:17,440
do pdg and print the decompile code

943
00:29:17,440 --> 00:29:19,039
again it's now called print meaning of

944
00:29:19,039 --> 00:29:20,720
life so whenever i'm looking at the

945
00:29:20,720 --> 00:29:23,200
decompile code or indeed the disassembly

946
00:29:23,200 --> 00:29:25,279
um you know i see the updated function

947
00:29:25,279 --> 00:29:27,039
names and as i say this is maybe a

948
00:29:27,039 --> 00:29:29,279
contrived example but if this was a

949
00:29:29,279 --> 00:29:31,279
config decryption or

950
00:29:31,279 --> 00:29:32,720
you know some logic that unpacked some

951
00:29:32,720 --> 00:29:35,120
codes or decrypted a class um you know

952
00:29:35,120 --> 00:29:36,559
it's useful to see those names rather

953
00:29:36,559 --> 00:29:39,960
than just some gibberish

954
00:29:41,520 --> 00:29:43,200
another thing for if you're learning the

955
00:29:43,200 --> 00:29:44,720
stuff that's really useful is if you use

956
00:29:44,720 --> 00:29:47,120
pdg a so it's one of the sub commands

957
00:29:47,120 --> 00:29:48,399
for gidra you would find this if you do

958
00:29:48,399 --> 00:29:50,720
pdg question mark it'll tell you this is

959
00:29:50,720 --> 00:29:52,159
it'll print the instructions side by

960
00:29:52,159 --> 00:29:54,240
side with the decompile code so if

961
00:29:54,240 --> 00:29:55,840
you're like trying to grasp like how

962
00:29:55,840 --> 00:29:57,120
assembly like like you know how does

963
00:29:57,120 --> 00:29:59,039
this code and this if statement like

964
00:29:59,039 --> 00:30:00,240
mapped to these instructions you're

965
00:30:00,240 --> 00:30:01,679
trying to get your head around it this

966
00:30:01,679 --> 00:30:03,440
shows them side by side so you can kind

967
00:30:03,440 --> 00:30:05,760
of like see what's happening it's not

968
00:30:05,760 --> 00:30:07,279
always like crystal clear but like it

969
00:30:07,279 --> 00:30:09,200
does give a good insight into what's

970
00:30:09,200 --> 00:30:10,720
happening again especially if you're

971
00:30:10,720 --> 00:30:11,840
working with an architecture that you're

972
00:30:11,840 --> 00:30:13,679
not totally equated with like let's say

973
00:30:13,679 --> 00:30:15,919
you do all your work on x86 and now

974
00:30:15,919 --> 00:30:17,440
you're working with arm or power pc or

975
00:30:17,440 --> 00:30:19,039
something then you know it's quite it's

976
00:30:19,039 --> 00:30:22,679
quite useful to have

977
00:30:23,039 --> 00:30:25,679
uh for those doing like xbox dev i know

978
00:30:25,679 --> 00:30:28,159
there's some talks about like um

979
00:30:28,159 --> 00:30:31,120
uh windows kernel and linux kernel stuff

980
00:30:31,120 --> 00:30:33,600
uh if you're doing any kind of exploit

981
00:30:33,600 --> 00:30:34,799
dev and

982
00:30:34,799 --> 00:30:36,320
on in the modern day obviously you have

983
00:30:36,320 --> 00:30:37,840
to use things like rock to bypass

984
00:30:37,840 --> 00:30:39,520
non-executable stack

985
00:30:39,520 --> 00:30:42,240
um you know you can use tools like mona

986
00:30:42,240 --> 00:30:45,039
but you can also use r2 to

987
00:30:45,039 --> 00:30:46,960
search for gadgets that you can put

988
00:30:46,960 --> 00:30:50,320
together to make a payload excuse me so

989
00:30:50,320 --> 00:30:52,799
slash r will basically print you all of

990
00:30:52,799 --> 00:30:55,120
the relevant um obstacles that you might

991
00:30:55,120 --> 00:30:56,559
be interested in and you could filter it

992
00:30:56,559 --> 00:30:57,919
based on your needs right so maybe you

993
00:30:57,919 --> 00:30:58,960
need to

994
00:30:58,960 --> 00:31:00,159
you know have certain mathematical

995
00:31:00,159 --> 00:31:01,840
operations or you need to call a

996
00:31:01,840 --> 00:31:03,360
function or whatever it might be you can

997
00:31:03,360 --> 00:31:06,000
have a look through and filter uh based

998
00:31:06,000 --> 00:31:06,720
on the

999
00:31:06,720 --> 00:31:09,039
command

1000
00:31:10,559 --> 00:31:11,919
you can also write and present your

1001
00:31:11,919 --> 00:31:14,080
slides in it so i tried to do this to

1002
00:31:14,080 --> 00:31:16,320
begin with but it was just really janky

1003
00:31:16,320 --> 00:31:18,399
um so it's it's great actually you you

1004
00:31:18,399 --> 00:31:20,559
can write in markdown you can use keys

1005
00:31:20,559 --> 00:31:23,600
to advance and and uh regress the slides

1006
00:31:23,600 --> 00:31:26,000
you can use backticks to run commands

1007
00:31:26,000 --> 00:31:27,919
and have it rendered in the slide so

1008
00:31:27,919 --> 00:31:29,120
like if i wanted to show you some

1009
00:31:29,120 --> 00:31:31,360
instructions i can run the pd

1010
00:31:31,360 --> 00:31:33,519
5 command and the output of it will

1011
00:31:33,519 --> 00:31:35,360
actually um you know the output of it

1012
00:31:35,360 --> 00:31:37,840
will actually show on the slide so

1013
00:31:37,840 --> 00:31:38,799
here

1014
00:31:38,799 --> 00:31:40,480
i'm using clippy to print like my name

1015
00:31:40,480 --> 00:31:41,679
and my title

1016
00:31:41,679 --> 00:31:44,240
um but if i show you in the markdown if

1017
00:31:44,240 --> 00:31:46,799
i jump forward

1018
00:31:46,799 --> 00:31:48,399
in the markdown

1019
00:31:48,399 --> 00:31:51,279
over here uh you know we have a bunch of

1020
00:31:51,279 --> 00:31:53,039
things like uh commands that are in

1021
00:31:53,039 --> 00:31:54,159
backticks

1022
00:31:54,159 --> 00:31:56,240
um and here you can see the clippy

1023
00:31:56,240 --> 00:31:58,799
command to write my name and my title so

1024
00:31:58,799 --> 00:32:00,640
it's a cool way of like in in markdown

1025
00:32:00,640 --> 00:32:02,080
just formatting your slides you can

1026
00:32:02,080 --> 00:32:03,039
advance through them you can run

1027
00:32:03,039 --> 00:32:04,960
commands and show it off unfortunately

1028
00:32:04,960 --> 00:32:06,159
like some of the limitations that i

1029
00:32:06,159 --> 00:32:07,440
couldn't quite move the images to where

1030
00:32:07,440 --> 00:32:09,840
i wanted them and like the ascii text it

1031
00:32:09,840 --> 00:32:12,399
was using it wasn't quite clear so in

1032
00:32:12,399 --> 00:32:14,159
the end i just moved back to um to

1033
00:32:14,159 --> 00:32:16,159
traditional slides but still it's quite

1034
00:32:16,159 --> 00:32:17,600
cool if especially if you're just

1035
00:32:17,600 --> 00:32:19,279
showing a proof of concept to like a

1036
00:32:19,279 --> 00:32:20,880
technical team it's

1037
00:32:20,880 --> 00:32:23,440
quite interesting

1038
00:32:23,919 --> 00:32:26,559
uh you can also debug programs so here

1039
00:32:26,559 --> 00:32:28,799
we have a password program uh it asks

1040
00:32:28,799 --> 00:32:30,480
for a password we try a bunch of

1041
00:32:30,480 --> 00:32:32,159
attempts and obviously it tells us that

1042
00:32:32,159 --> 00:32:33,440
they're incorrect

1043
00:32:33,440 --> 00:32:35,120
and so there's a really basic example

1044
00:32:35,120 --> 00:32:37,360
but we can use r2 d

1045
00:32:37,360 --> 00:32:39,279
if we open up the program we can set a

1046
00:32:39,279 --> 00:32:42,399
breakpoint with db so we say db

1047
00:32:42,399 --> 00:32:44,640
the string and compare function

1048
00:32:44,640 --> 00:32:47,360
dc will will continue the program and it

1049
00:32:47,360 --> 00:32:49,600
now asks for a password we type in bingo

1050
00:32:49,600 --> 00:32:51,120
and it pauses the program says okay

1051
00:32:51,120 --> 00:32:53,279
we've reached the string comparison

1052
00:32:53,279 --> 00:32:55,519
we can use dr to print the registers we

1053
00:32:55,519 --> 00:32:57,600
can see all the current addresses held

1054
00:32:57,600 --> 00:32:58,720
by those

1055
00:32:58,720 --> 00:33:01,360
and if we want to we can print out the

1056
00:33:01,360 --> 00:33:04,000
bytes at the rdi register

1057
00:33:04,000 --> 00:33:06,159
and then i just clear the console i'm

1058
00:33:06,159 --> 00:33:08,320
going to print out at the

1059
00:33:08,320 --> 00:33:10,880
rsi register as well so here we can see

1060
00:33:10,880 --> 00:33:12,960
there's a string like abert afdw

1061
00:33:12,960 --> 00:33:14,480
so um what we're going to do is we're

1062
00:33:14,480 --> 00:33:16,960
going to copy it

1063
00:33:16,960 --> 00:33:20,080
resume the program using dc

1064
00:33:20,080 --> 00:33:21,120
and then it's going to tell us the

1065
00:33:21,120 --> 00:33:22,720
previous password was incorrect and now

1066
00:33:22,720 --> 00:33:24,480
we type in the password that we find in

1067
00:33:24,480 --> 00:33:25,440
memory

1068
00:33:25,440 --> 00:33:26,880
tells us we hit the breakpoint again we

1069
00:33:26,880 --> 00:33:28,320
tell it to continue and now it tells us

1070
00:33:28,320 --> 00:33:30,320
the password is correct so just to prove

1071
00:33:30,320 --> 00:33:32,000
this obviously it's a really basic

1072
00:33:32,000 --> 00:33:33,919
example but just to show like we can now

1073
00:33:33,919 --> 00:33:36,080
just open the binary without a debugger

1074
00:33:36,080 --> 00:33:37,679
type in the password that expect and

1075
00:33:37,679 --> 00:33:39,200
obviously it tells us is correct so

1076
00:33:39,200 --> 00:33:41,279
really really basic example but

1077
00:33:41,279 --> 00:33:42,480
especially if you're getting new to this

1078
00:33:42,480 --> 00:33:44,240
kind of stuff or if you are new to this

1079
00:33:44,240 --> 00:33:45,760
stuff this is the kind of examples you

1080
00:33:45,760 --> 00:33:47,600
would want to go through so we can dump

1081
00:33:47,600 --> 00:33:49,039
registers in the stack we can set

1082
00:33:49,039 --> 00:33:50,640
breakpoints debug programs just like we

1083
00:33:50,640 --> 00:33:53,279
can with gdb or ldb

1084
00:33:53,279 --> 00:33:55,760
um so yeah it's quite powerful and not

1085
00:33:55,760 --> 00:33:56,960
only that but when you're paused in

1086
00:33:56,960 --> 00:33:58,399
memory you can use all of the commands

1087
00:33:58,399 --> 00:33:59,760
we looked at to print the instructions

1088
00:33:59,760 --> 00:34:02,080
to modify instructions and so on um so

1089
00:34:02,080 --> 00:34:03,279
you've got all of the power that we've

1090
00:34:03,279 --> 00:34:05,360
seen in r2 while you're debugging as

1091
00:34:05,360 --> 00:34:07,840
well

1092
00:34:08,320 --> 00:34:10,159
uh one of the things that you've seen in

1093
00:34:10,159 --> 00:34:11,679
a couple of places that i didn't point

1094
00:34:11,679 --> 00:34:13,040
out yet is that

1095
00:34:13,040 --> 00:34:14,800
instead of having to like seek to a

1096
00:34:14,800 --> 00:34:16,480
function using s then go to that

1097
00:34:16,480 --> 00:34:18,639
function and then say pdf to print all

1098
00:34:18,639 --> 00:34:20,480
the instructions and say okay it calls

1099
00:34:20,480 --> 00:34:22,399
another function so i'll seek there with

1100
00:34:22,399 --> 00:34:23,918
s and then print all the instructions

1101
00:34:23,918 --> 00:34:25,760
again and then i go back to the previous

1102
00:34:25,760 --> 00:34:28,079
one and print the instructions it gets a

1103
00:34:28,079 --> 00:34:29,760
bit cumbersome jumping around especially

1104
00:34:29,760 --> 00:34:31,918
like when you're not using a gui so in

1105
00:34:31,918 --> 00:34:33,520
the first example we do pdf and it

1106
00:34:33,520 --> 00:34:35,359
prints the instructions on main and

1107
00:34:35,359 --> 00:34:36,480
rather than

1108
00:34:36,480 --> 00:34:39,359
seeking to the other function

1109
00:34:39,359 --> 00:34:42,719
we can run the second command pdf at

1110
00:34:42,719 --> 00:34:44,560
sim.other function and so that will

1111
00:34:44,560 --> 00:34:47,280
behind the scenes it temporarily jumps

1112
00:34:47,280 --> 00:34:49,280
there runs your command and then comes

1113
00:34:49,280 --> 00:34:50,560
back so

1114
00:34:50,560 --> 00:34:52,239
without having to lose our position or

1115
00:34:52,239 --> 00:34:53,440
lose what we're looking at or lose our

1116
00:34:53,440 --> 00:34:55,359
focus we can ask it to run commands at a

1117
00:34:55,359 --> 00:34:57,359
different location so we've done this in

1118
00:34:57,359 --> 00:34:58,800
previous slides where we said like write

1119
00:34:58,800 --> 00:35:01,119
a string at this location or print this

1120
00:35:01,119 --> 00:35:02,880
at this location and that's what that's

1121
00:35:02,880 --> 00:35:04,400
actually doing behind the scenes they

1122
00:35:04,400 --> 00:35:07,440
call it a temporary seat

1123
00:35:08,720 --> 00:35:11,280
um you can also use the double at sign

1124
00:35:11,280 --> 00:35:13,440
or triple that sign to have a loop or a

1125
00:35:13,440 --> 00:35:15,520
for each loop

1126
00:35:15,520 --> 00:35:17,680
you can for example say

1127
00:35:17,680 --> 00:35:19,839
print the disassembly of two uh two

1128
00:35:19,839 --> 00:35:21,680
times so we want two instructions

1129
00:35:21,680 --> 00:35:23,520
and we want to do it at every function

1130
00:35:23,520 --> 00:35:26,240
returned by the afl command right so afl

1131
00:35:26,240 --> 00:35:28,079
gives us a list of all the functions and

1132
00:35:28,079 --> 00:35:29,839
for each of those we want to print out

1133
00:35:29,839 --> 00:35:32,160
the first two instructions and so in the

1134
00:35:32,160 --> 00:35:33,440
outputs we can see

1135
00:35:33,440 --> 00:35:36,720
the first two in red from main the first

1136
00:35:36,720 --> 00:35:39,040
two in red from the printf function and

1137
00:35:39,040 --> 00:35:40,640
then the first two in red from other

1138
00:35:40,640 --> 00:35:42,560
function so it's a way of us chaining

1139
00:35:42,560 --> 00:35:44,320
commands to do things very quickly

1140
00:35:44,320 --> 00:35:46,160
especially from an analysis perspective

1141
00:35:46,160 --> 00:35:48,160
like we might want to just quickly loop

1142
00:35:48,160 --> 00:35:49,440
over a certain thing and find out which

1143
00:35:49,440 --> 00:35:52,320
one we're interested in

1144
00:35:53,920 --> 00:35:56,320
so you can also use the the gui so it's

1145
00:35:56,320 --> 00:35:57,520
called i don't know how to pronounce it

1146
00:35:57,520 --> 00:35:59,920
i ate tool

1147
00:35:59,920 --> 00:36:01,520
most of the original authorship was

1148
00:36:01,520 --> 00:36:02,560
spanish

1149
00:36:02,560 --> 00:36:04,400
um so

1150
00:36:04,400 --> 00:36:05,839
r2

1151
00:36:05,839 --> 00:36:08,480
at one point they had a whole set of

1152
00:36:08,480 --> 00:36:10,240
collaborators some of them worked mainly

1153
00:36:10,240 --> 00:36:12,160
on the ui and some of them worked mainly

1154
00:36:12,160 --> 00:36:14,720
on the core of r2 and there were some

1155
00:36:14,720 --> 00:36:17,040
interoperability concerns with how they

1156
00:36:17,040 --> 00:36:18,560
wanted things to work so they broke off

1157
00:36:18,560 --> 00:36:19,440
and fought

1158
00:36:19,440 --> 00:36:21,839
a new version of r2 called risen

1159
00:36:21,839 --> 00:36:23,920
and they took the

1160
00:36:23,920 --> 00:36:26,720
previous ui with them and so now the the

1161
00:36:26,720 --> 00:36:29,040
latest ui that's revamped and is kind of

1162
00:36:29,040 --> 00:36:31,280
like the de facto ui is called aieto and

1163
00:36:31,280 --> 00:36:32,960
that was the original name of the ui

1164
00:36:32,960 --> 00:36:35,040
back in the day so it's kind of like uh

1165
00:36:35,040 --> 00:36:36,960
you know an easter egg that they're

1166
00:36:36,960 --> 00:36:39,280
they've kind of renamed it to that

1167
00:36:39,280 --> 00:36:40,960
but uh yeah i mean

1168
00:36:40,960 --> 00:36:42,480
again the lighting's not great you can

1169
00:36:42,480 --> 00:36:44,640
check the sites afterwards but it's very

1170
00:36:44,640 --> 00:36:45,839
you know aesthetically pleasing

1171
00:36:45,839 --> 00:36:47,359
everything's in in configurable

1172
00:36:47,359 --> 00:36:49,040
positions the colors are great you've

1173
00:36:49,040 --> 00:36:50,880
got a little mini map of the the control

1174
00:36:50,880 --> 00:36:52,800
flow graphs you've also got a big

1175
00:36:52,800 --> 00:36:55,119
visualization of the graph in the middle

1176
00:36:55,119 --> 00:36:56,640
in the top right we have the decompiled

1177
00:36:56,640 --> 00:36:58,400
code and again you can configure how

1178
00:36:58,400 --> 00:37:00,640
this all looks bottom right we have like

1179
00:37:00,640 --> 00:37:02,000
a hex view

1180
00:37:02,000 --> 00:37:03,680
and over on the left we have all the

1181
00:37:03,680 --> 00:37:05,760
instructions so we can scroll this on

1182
00:37:05,760 --> 00:37:07,119
the very left we have our function list

1183
00:37:07,119 --> 00:37:08,480
so we can navigate through them all we

1184
00:37:08,480 --> 00:37:10,560
can filter through them all um and we

1185
00:37:10,560 --> 00:37:12,800
can attach you know a debugger using the

1186
00:37:12,800 --> 00:37:15,119
the green play icon in the top left so

1187
00:37:15,119 --> 00:37:16,800
we can actually see things in memory and

1188
00:37:16,800 --> 00:37:18,560
set break points like you know using the

1189
00:37:18,560 --> 00:37:20,000
cursor rather than having to like type

1190
00:37:20,000 --> 00:37:22,400
commands so a lot of people do prefer to

1191
00:37:22,400 --> 00:37:25,280
use it if you want to in this box here

1192
00:37:25,280 --> 00:37:27,359
you can actually run r2 commands so you

1193
00:37:27,359 --> 00:37:29,119
can be in the ui and still use r2

1194
00:37:29,119 --> 00:37:31,920
commands that's totally fine so yeah

1195
00:37:31,920 --> 00:37:34,320
it's it's quite a powerful tool

1196
00:37:34,320 --> 00:37:36,400
as i say there's a web ui as well and

1197
00:37:36,400 --> 00:37:38,800
even a web assembly uh variant of that

1198
00:37:38,800 --> 00:37:41,119
as well

1199
00:37:41,599 --> 00:37:43,040
um and yeah you can configure pretty

1200
00:37:43,040 --> 00:37:44,800
much everything so

1201
00:37:44,800 --> 00:37:46,320
uh there's a huge amount of environment

1202
00:37:46,320 --> 00:37:48,000
variables and i don't mean like your

1203
00:37:48,000 --> 00:37:50,000
shell environment variables they're what

1204
00:37:50,000 --> 00:37:51,760
they call environment variables inside

1205
00:37:51,760 --> 00:37:53,920
the realm of radari

1206
00:37:53,920 --> 00:37:56,800
uh they configure like how strings are

1207
00:37:56,800 --> 00:37:58,880
filtered they configure how json is

1208
00:37:58,880 --> 00:38:01,200
encoded they configure as i said what

1209
00:38:01,200 --> 00:38:02,960
type of fortunes you want what type of

1210
00:38:02,960 --> 00:38:05,920
messages so um on the screen

1211
00:38:05,920 --> 00:38:07,200
quite near the bottom you know you can

1212
00:38:07,200 --> 00:38:08,960
configure whether the tool tips are

1213
00:38:08,960 --> 00:38:10,800
shown at the start or not there's just a

1214
00:38:10,800 --> 00:38:12,160
huge amount of stuff especially

1215
00:38:12,160 --> 00:38:14,320
concerning how programs are analyzed you

1216
00:38:14,320 --> 00:38:16,400
can configure a lot of the ways that

1217
00:38:16,400 --> 00:38:19,040
that works by default so um as you

1218
00:38:19,040 --> 00:38:20,960
become kind of like proficient in using

1219
00:38:20,960 --> 00:38:23,040
r2 and use it more and more you you'll

1220
00:38:23,040 --> 00:38:25,680
actually delve into configuring it like

1221
00:38:25,680 --> 00:38:28,879
exactly the way it works for you

1222
00:38:29,680 --> 00:38:30,640
um

1223
00:38:30,640 --> 00:38:32,800
and here's one example of that uh i'm

1224
00:38:32,800 --> 00:38:34,240
saying one of the environment variables

1225
00:38:34,240 --> 00:38:36,800
as a command line flag so there's a

1226
00:38:36,800 --> 00:38:39,040
text-to-speech for all the fortunes so

1227
00:38:39,040 --> 00:38:41,040
um i'll play that for you now hopefully

1228
00:38:41,040 --> 00:38:43,599
it comes through

1229
00:38:43,839 --> 00:38:46,880
there is a branch for that

1230
00:38:46,880 --> 00:38:49,280
polish reverses blamegate

1231
00:38:49,280 --> 00:38:51,280
feed the bugs

1232
00:38:51,280 --> 00:38:54,240
a git call a day keeps the segfault away

1233
00:38:54,240 --> 00:38:57,200
i did it for the pwnz

1234
00:38:57,200 --> 00:38:59,760
there are five minutes from wtf to fix

1235
00:38:59,760 --> 00:39:01,960
in r2 lam order pizza for

1236
00:39:01,960 --> 00:39:04,880
12.48 cents why n

1237
00:39:04,880 --> 00:39:07,119
yeah so i don't know if anyone ever want

1238
00:39:07,119 --> 00:39:09,119
that on but you can there's kind of like

1239
00:39:09,119 --> 00:39:11,599
a meme about the the pizza so one time

1240
00:39:11,599 --> 00:39:13,440
in the conference in barcelona they were

1241
00:39:13,440 --> 00:39:15,040
like basically

1242
00:39:15,040 --> 00:39:16,480
having this discussion where they said

1243
00:39:16,480 --> 00:39:17,920
that like everything we ever want to do

1244
00:39:17,920 --> 00:39:19,920
we just put it into the one tool and so

1245
00:39:19,920 --> 00:39:21,280
at the same time someone was talking

1246
00:39:21,280 --> 00:39:22,400
about doing the pizza order for the

1247
00:39:22,400 --> 00:39:24,160
conference so they actually create the

1248
00:39:24,160 --> 00:39:25,920
pull request so that in the tool it

1249
00:39:25,920 --> 00:39:27,359
would order the pizza and so they

1250
00:39:27,359 --> 00:39:28,560
ordered the pizza for the conference

1251
00:39:28,560 --> 00:39:30,560
using the tool which is why now there's

1252
00:39:30,560 --> 00:39:32,079
a fortune that says do you wanna order

1253
00:39:32,079 --> 00:39:34,320
pizza you can't order pizza anymore but

1254
00:39:34,320 --> 00:39:35,760
like they actually add that into the

1255
00:39:35,760 --> 00:39:37,440
code so in c someone wrote some logic

1256
00:39:37,440 --> 00:39:38,480
that would order the pizza for the

1257
00:39:38,480 --> 00:39:39,599
conference

1258
00:39:39,599 --> 00:39:43,040
just because yeah why not

1259
00:39:43,040 --> 00:39:45,280
um you can also pass in a predefined

1260
00:39:45,280 --> 00:39:46,960
list of commands so

1261
00:39:46,960 --> 00:39:49,680
uh here i just have a file which is

1262
00:39:49,680 --> 00:39:51,520
printing out three fortunes

1263
00:39:51,520 --> 00:39:53,680
uh it's usually printing the entry point

1264
00:39:53,680 --> 00:39:55,040
in clippy and printing out two

1265
00:39:55,040 --> 00:39:58,400
instructions and if you pass in uh to r2

1266
00:39:58,400 --> 00:40:00,640
with dash i it'll run all those commands

1267
00:40:00,640 --> 00:40:02,880
whenever you load up a binary so again

1268
00:40:02,880 --> 00:40:04,640
if you're working with firmware or

1269
00:40:04,640 --> 00:40:06,319
something or you you always run the same

1270
00:40:06,319 --> 00:40:08,319
sort of set of analysis at the beginning

1271
00:40:08,319 --> 00:40:09,680
you can just have that in a predefined

1272
00:40:09,680 --> 00:40:10,400
file

1273
00:40:10,400 --> 00:40:11,920
and you know what or let's say it's an

1274
00:40:11,920 --> 00:40:13,520
android app you might want to like list

1275
00:40:13,520 --> 00:40:14,880
all the classes unless all the methods

1276
00:40:14,880 --> 00:40:17,040
for those classes you might want to look

1277
00:40:17,040 --> 00:40:18,480
if any of the classes are privacy

1278
00:40:18,480 --> 00:40:19,599
violations you might just have those

1279
00:40:19,599 --> 00:40:21,599
commands sitting in a file and then

1280
00:40:21,599 --> 00:40:23,760
every time you open the you know android

1281
00:40:23,760 --> 00:40:25,119
app you just pass in that file and it

1282
00:40:25,119 --> 00:40:27,040
does all of them for you rather than

1283
00:40:27,040 --> 00:40:28,319
every time saying okay i run this

1284
00:40:28,319 --> 00:40:29,680
command and then i run this command and

1285
00:40:29,680 --> 00:40:31,200
then i run this command like you can

1286
00:40:31,200 --> 00:40:32,560
just put them in a file and do it that

1287
00:40:32,560 --> 00:40:35,440
way or if you go you know into the

1288
00:40:35,440 --> 00:40:36,560
tooling route then you would of course

1289
00:40:36,560 --> 00:40:38,240
use the apis and build like a python

1290
00:40:38,240 --> 00:40:40,000
tool or no node.js tool or something

1291
00:40:40,000 --> 00:40:41,440
like that

1292
00:40:41,440 --> 00:40:44,480
but still it's useful to have

1293
00:40:44,880 --> 00:40:46,960
and as i mentioned way back in the

1294
00:40:46,960 --> 00:40:48,400
beginning of the talk if you want to

1295
00:40:48,400 --> 00:40:50,640
permanently patch a binary or a program

1296
00:40:50,640 --> 00:40:52,319
if you want to any changes you make you

1297
00:40:52,319 --> 00:40:54,160
want them to be permanent open the

1298
00:40:54,160 --> 00:40:56,319
program with w and that makes it

1299
00:40:56,319 --> 00:40:58,240
writable and so

1300
00:40:58,240 --> 00:40:59,760
in this example

1301
00:40:59,760 --> 00:41:01,760
in the in the password comparison

1302
00:41:01,760 --> 00:41:03,520
program that we ran earlier we have a

1303
00:41:03,520 --> 00:41:05,280
jump if not equals that jumps to the

1304
00:41:05,280 --> 00:41:06,640
failed condition

1305
00:41:06,640 --> 00:41:08,640
and we want to change that to jump

1306
00:41:08,640 --> 00:41:10,880
somewhere else so we could say right

1307
00:41:10,880 --> 00:41:12,000
assembly

1308
00:41:12,000 --> 00:41:13,680
jump if not equal so we give it a new

1309
00:41:13,680 --> 00:41:16,160
address for the jump and we tell it we

1310
00:41:16,160 --> 00:41:17,520
want to

1311
00:41:17,520 --> 00:41:19,680
insert this instruction at the one and

1312
00:41:19,680 --> 00:41:21,040
you know the address located with the

1313
00:41:21,040 --> 00:41:22,640
red circle

1314
00:41:22,640 --> 00:41:24,240
and then after we do that

1315
00:41:24,240 --> 00:41:26,000
we can see now that the address that

1316
00:41:26,000 --> 00:41:28,000
it's going to jump to is different

1317
00:41:28,000 --> 00:41:30,079
and we've successfully patched the

1318
00:41:30,079 --> 00:41:32,079
binary so if we run the program now

1319
00:41:32,079 --> 00:41:33,359
we'll see that no matter what password

1320
00:41:33,359 --> 00:41:35,119
we type it's you know we've converted

1321
00:41:35,119 --> 00:41:36,880
this statement with basically reverse to

1322
00:41:36,880 --> 00:41:38,880
logic so no matter what we type it's

1323
00:41:38,880 --> 00:41:40,720
going to tell us the password is correct

1324
00:41:40,720 --> 00:41:41,599
um

1325
00:41:41,599 --> 00:41:43,599
and yeah obviously if the password was

1326
00:41:43,599 --> 00:41:45,920
correct it would tell us it was wrong so

1327
00:41:45,920 --> 00:41:47,760
just a just a basic example obviously

1328
00:41:47,760 --> 00:41:49,119
like in in the real world it's a lot

1329
00:41:49,119 --> 00:41:50,800
more complicated but

1330
00:41:50,800 --> 00:41:52,960
you get the idea

1331
00:41:52,960 --> 00:41:55,280
uh another thing you can do is you can

1332
00:41:55,280 --> 00:41:57,760
in ios or mac applications you can list

1333
00:41:57,760 --> 00:41:59,839
all of the classes and methods that are

1334
00:41:59,839 --> 00:42:01,440
inside the program

1335
00:42:01,440 --> 00:42:03,760
and if you want to you can filter them

1336
00:42:03,760 --> 00:42:05,839
by putting the tilled search operator

1337
00:42:05,839 --> 00:42:07,599
and then a dot dot and this lets you do

1338
00:42:07,599 --> 00:42:09,520
like a real time search so rather than

1339
00:42:09,520 --> 00:42:11,200
having to correct like repeatedly for

1340
00:42:11,200 --> 00:42:13,200
different things you get an interactive

1341
00:42:13,200 --> 00:42:14,560
search where you can just type in and

1342
00:42:14,560 --> 00:42:16,000
even color highlights the things that

1343
00:42:16,000 --> 00:42:18,319
you're searching for so if you just want

1344
00:42:18,319 --> 00:42:20,079
to quickly scan through the classes for

1345
00:42:20,079 --> 00:42:22,160
particular keywords rather than running

1346
00:42:22,160 --> 00:42:24,400
a grip multiple times it's quite good to

1347
00:42:24,400 --> 00:42:26,240
just you know use the tilt and then an

1348
00:42:26,240 --> 00:42:27,760
ellipsis and then

1349
00:42:27,760 --> 00:42:31,839
you know just search through like that

1350
00:42:32,000 --> 00:42:35,359
uh another thing you can do is

1351
00:42:35,359 --> 00:42:37,119
r2 comes with a whole bunch of command

1352
00:42:37,119 --> 00:42:39,200
line tools that are packed with it as i

1353
00:42:39,200 --> 00:42:41,040
say it's like jack of all trades tool

1354
00:42:41,040 --> 00:42:41,839
kit

1355
00:42:41,839 --> 00:42:44,640
um so one of them is called radish and

1356
00:42:44,640 --> 00:42:46,880
it lets you diff code so you can take

1357
00:42:46,880 --> 00:42:48,319
two two

1358
00:42:48,319 --> 00:42:50,000
programs and see where they're similar

1359
00:42:50,000 --> 00:42:51,280
or where that where indeed they're

1360
00:42:51,280 --> 00:42:53,440
different and so i took a version of

1361
00:42:53,440 --> 00:42:55,839
nano the text editor and just patched it

1362
00:42:55,839 --> 00:42:57,760
inserted like three knobs and just just

1363
00:42:57,760 --> 00:43:00,240
to visualize how that looks i've made

1364
00:43:00,240 --> 00:43:01,920
the comparison and you can see

1365
00:43:01,920 --> 00:43:03,839
in red three instructions have changed

1366
00:43:03,839 --> 00:43:06,160
to ox90 which is a knock

1367
00:43:06,160 --> 00:43:08,400
um and if we print the disassembly of

1368
00:43:08,400 --> 00:43:10,160
the two things again the lighting's

1369
00:43:10,160 --> 00:43:12,640
terrible here sorry um but in the three

1370
00:43:12,640 --> 00:43:14,160
yellow circles the instruction has

1371
00:43:14,160 --> 00:43:16,640
changed to a no operation so

1372
00:43:16,640 --> 00:43:18,640
we can actually if for example let's say

1373
00:43:18,640 --> 00:43:20,640
we see a cve and a popular library like

1374
00:43:20,640 --> 00:43:21,760
open ssl

1375
00:43:21,760 --> 00:43:23,839
and we know that the the patch has been

1376
00:43:23,839 --> 00:43:24,960
made

1377
00:43:24,960 --> 00:43:26,800
for a particular cve but there's no

1378
00:43:26,800 --> 00:43:28,160
proof of concepts out there there's no

1379
00:43:28,160 --> 00:43:29,760
details about you know what in

1380
00:43:29,760 --> 00:43:32,400
particular it was then we might want to

1381
00:43:32,400 --> 00:43:34,319
just like diff those functions so that

1382
00:43:34,319 --> 00:43:36,160
we can actually see what what the logic

1383
00:43:36,160 --> 00:43:37,520
was that was changed and then we can go

1384
00:43:37,520 --> 00:43:40,000
and write a proof of concept or if

1385
00:43:40,000 --> 00:43:41,760
you're so inclined like turn that into

1386
00:43:41,760 --> 00:43:42,960
some kind of

1387
00:43:42,960 --> 00:43:45,440
exploit

1388
00:43:46,319 --> 00:43:48,560
uh you can also analyze android

1389
00:43:48,560 --> 00:43:50,560
applications using apk

1390
00:43:50,560 --> 00:43:52,880
so there's lots of different url scheme

1391
00:43:52,880 --> 00:43:54,800
prefixes when you open files that sort

1392
00:43:54,800 --> 00:43:56,960
of inform are to how to analyze it

1393
00:43:56,960 --> 00:43:58,160
because at the end of the day an apk is

1394
00:43:58,160 --> 00:43:59,200
just a zip

1395
00:43:59,200 --> 00:44:02,079
um so you can use the apk prefix to tell

1396
00:44:02,079 --> 00:44:03,440
it that hey we're looking at an android

1397
00:44:03,440 --> 00:44:06,319
app um it even supports multi-decks so

1398
00:44:06,319 --> 00:44:08,640
lots of uh android applications may have

1399
00:44:08,640 --> 00:44:10,800
like multiple uh dex files inside of it

1400
00:44:10,800 --> 00:44:12,000
you can tell them which particular ones

1401
00:44:12,000 --> 00:44:14,000
you want to use or to combine them

1402
00:44:14,000 --> 00:44:15,599
and again that's a fairly recent change

1403
00:44:15,599 --> 00:44:17,280
in the last year

1404
00:44:17,280 --> 00:44:19,040
just like we did on ios or mac we can

1405
00:44:19,040 --> 00:44:21,440
list out the android classes

1406
00:44:21,440 --> 00:44:23,440
and methods using ic

1407
00:44:23,440 --> 00:44:24,560
and again

1408
00:44:24,560 --> 00:44:26,960
in this example there's over 9600

1409
00:44:26,960 --> 00:44:29,119
methods and classes inside this apk in

1410
00:44:29,119 --> 00:44:32,160
the delivery app um so i just obviously

1411
00:44:32,160 --> 00:44:36,200
i'm only showing a handful of them

1412
00:44:36,480 --> 00:44:37,839
so

1413
00:44:37,839 --> 00:44:39,119
another thing that you might want to do

1414
00:44:39,119 --> 00:44:41,280
is check for basic i mean this is basic

1415
00:44:41,280 --> 00:44:43,119
stuff but you might want to look at the

1416
00:44:43,119 --> 00:44:45,280
the programs or the libraries to see if

1417
00:44:45,280 --> 00:44:47,280
they're using the compiler securities

1418
00:44:47,280 --> 00:44:49,119
afforded to them so

1419
00:44:49,119 --> 00:44:51,200
do you know are the symbols stripped are

1420
00:44:51,200 --> 00:44:53,280
they using the non-executable bit you

1421
00:44:53,280 --> 00:44:55,440
know are they using as like position

1422
00:44:55,440 --> 00:44:57,280
independent code for taking advantage of

1423
00:44:57,280 --> 00:44:58,319
slr

1424
00:44:58,319 --> 00:45:00,160
um and there's other things in there as

1425
00:45:00,160 --> 00:45:02,079
well but you know the i command will

1426
00:45:02,079 --> 00:45:03,520
give you basic information about the

1427
00:45:03,520 --> 00:45:06,079
binary you're looking at and you know in

1428
00:45:06,079 --> 00:45:07,839
this case you can just correct or parse

1429
00:45:07,839 --> 00:45:08,960
out the ones that you're looking for

1430
00:45:08,960 --> 00:45:10,800
again you could do i j to get this json

1431
00:45:10,800 --> 00:45:12,000
and parse it out

1432
00:45:12,000 --> 00:45:13,359
so if you just wanted to you know write

1433
00:45:13,359 --> 00:45:15,280
a basic scanner for a bunch of software

1434
00:45:15,280 --> 00:45:17,119
that comes in loop through a folder open

1435
00:45:17,119 --> 00:45:19,200
up every executable check it all flag

1436
00:45:19,200 --> 00:45:21,599
the ones that are bad um like a cheap

1437
00:45:21,599 --> 00:45:24,400
finding you know in a security test um

1438
00:45:24,400 --> 00:45:27,760
but you know it's relevant so

1439
00:45:27,760 --> 00:45:30,480
um another thing is you can emulate code

1440
00:45:30,480 --> 00:45:32,000
so rather than having to use a debugger

1441
00:45:32,000 --> 00:45:34,160
or run code sometimes if there's

1442
00:45:34,160 --> 00:45:36,800
obfuscation or um the analysis wasn't

1443
00:45:36,800 --> 00:45:37,920
good enough to actually figure out

1444
00:45:37,920 --> 00:45:39,200
what's happening you can actually use

1445
00:45:39,200 --> 00:45:40,480
emulation

1446
00:45:40,480 --> 00:45:41,440
um

1447
00:45:41,440 --> 00:45:42,400
so there's a whole bunch of different

1448
00:45:42,400 --> 00:45:43,520
commands here i'm not going to explain

1449
00:45:43,520 --> 00:45:45,119
all of them but basically

1450
00:45:45,119 --> 00:45:46,720
um you know with the m with the

1451
00:45:46,720 --> 00:45:48,800
emulation you can set up a virtual stack

1452
00:45:48,800 --> 00:45:50,240
you can set up the registers the way you

1453
00:45:50,240 --> 00:45:52,880
want them you can run code to and from a

1454
00:45:52,880 --> 00:45:54,160
certain point and then it will tell you

1455
00:45:54,160 --> 00:45:56,000
how everything's changed right so you

1456
00:45:56,000 --> 00:45:56,960
can see

1457
00:45:56,960 --> 00:45:58,640
you know you can de-obfuscate a function

1458
00:45:58,640 --> 00:45:59,680
or

1459
00:45:59,680 --> 00:46:01,920
do various pieces with emulation it not

1460
00:46:01,920 --> 00:46:02,960
always but

1461
00:46:02,960 --> 00:46:04,480
you know usually just

1462
00:46:04,480 --> 00:46:06,480
basic observation is to be with

1463
00:46:06,480 --> 00:46:08,319
emulation quite easily

1464
00:46:08,319 --> 00:46:11,359
um so in this particular example uh i

1465
00:46:11,359 --> 00:46:12,119
had

1466
00:46:12,119 --> 00:46:15,280
a supervisor call again the lighting's

1467
00:46:15,280 --> 00:46:17,760
pretty bad but on arm there's a call out

1468
00:46:17,760 --> 00:46:20,480
to a kernel api and it's telling me that

1469
00:46:20,480 --> 00:46:22,560
it's it doesn't know which one so it's

1470
00:46:22,560 --> 00:46:25,359
it says zero equals unknown i ran some

1471
00:46:25,359 --> 00:46:28,000
emulation and then the next time i print

1472
00:46:28,000 --> 00:46:29,280
out the instruction it's telling me that

1473
00:46:29,280 --> 00:46:31,680
it's a supervisor called for sys ctl

1474
00:46:31,680 --> 00:46:32,720
which is

1475
00:46:32,720 --> 00:46:35,280
an api for getting various uh runtime

1476
00:46:35,280 --> 00:46:37,680
information usually used to detect if

1477
00:46:37,680 --> 00:46:39,599
you're being debugged but you can use it

1478
00:46:39,599 --> 00:46:41,440
for many things

1479
00:46:41,440 --> 00:46:44,079
um so that's just one example of of like

1480
00:46:44,079 --> 00:46:45,599
a really basic way without having to run

1481
00:46:45,599 --> 00:46:46,880
the app on a device or anything like

1482
00:46:46,880 --> 00:46:49,520
that i can just find out like okay

1483
00:46:49,520 --> 00:46:50,720
a little bit more information about

1484
00:46:50,720 --> 00:46:53,279
what's happening

1485
00:46:54,800 --> 00:46:56,800
and of course you can stick this all in

1486
00:46:56,800 --> 00:46:59,839
tooling so i've done this for mobile

1487
00:46:59,839 --> 00:47:02,240
apps where um they're heavily protected

1488
00:47:02,240 --> 00:47:04,160
and again all of these commands can just

1489
00:47:04,160 --> 00:47:06,960
be chained up in python or whatever else

1490
00:47:06,960 --> 00:47:08,000
and you know you can do this

1491
00:47:08,000 --> 00:47:10,000
programmatically so every everywhere you

1492
00:47:10,000 --> 00:47:11,680
find an occurrence of something that

1493
00:47:11,680 --> 00:47:13,119
doesn't look quite right

1494
00:47:13,119 --> 00:47:14,960
use some emulation to resolve it it

1495
00:47:14,960 --> 00:47:17,040
doesn't always work but in most cases

1496
00:47:17,040 --> 00:47:18,800
for me you know i've had quite good

1497
00:47:18,800 --> 00:47:21,280
success

1498
00:47:21,680 --> 00:47:23,119
the last thing i'll tell you is that you

1499
00:47:23,119 --> 00:47:24,400
can analyze lots of various different

1500
00:47:24,400 --> 00:47:25,520
things i mentioned this earlier but you

1501
00:47:25,520 --> 00:47:27,760
can analyze game boy roms so i i was

1502
00:47:27,760 --> 00:47:29,280
doing this final slide last night i was

1503
00:47:29,280 --> 00:47:31,040
trying to show you some patches in

1504
00:47:31,040 --> 00:47:33,200
pokemon and i woke up in my chair like

1505
00:47:33,200 --> 00:47:35,280
three separate times so

1506
00:47:35,280 --> 00:47:36,720
i decided i wasn't gonna do that and i

1507
00:47:36,720 --> 00:47:39,119
picked a really basic ctf gameboy rom

1508
00:47:39,119 --> 00:47:40,640
from the past

1509
00:47:40,640 --> 00:47:41,599
um

1510
00:47:41,599 --> 00:47:43,839
but yeah so here we have a gameboy rom

1511
00:47:43,839 --> 00:47:45,359
we load up in like

1512
00:47:45,359 --> 00:47:48,400
some emulator so like open mu or visual

1513
00:47:48,400 --> 00:47:50,640
boy advance or something it wants a five

1514
00:47:50,640 --> 00:47:52,480
digit pin and it's going to tell us if

1515
00:47:52,480 --> 00:47:55,280
it's correct or uh or if it's wrong it's

1516
00:47:55,280 --> 00:47:57,280
going to tell us fail

1517
00:47:57,280 --> 00:47:58,880
we can open that up with r2 we can print

1518
00:47:58,880 --> 00:48:00,559
out the instructions so we actually see

1519
00:48:00,559 --> 00:48:02,079
like the game boy up quotes which is

1520
00:48:02,079 --> 00:48:03,359
kind of cool you know look at all these

1521
00:48:03,359 --> 00:48:04,720
old games like we played when we were

1522
00:48:04,720 --> 00:48:07,119
kids and seeing like how they work and

1523
00:48:07,119 --> 00:48:09,280
what some of the logic was um and in

1524
00:48:09,280 --> 00:48:11,520
particular there's some uh

1525
00:48:11,520 --> 00:48:14,079
i'm no expert in game boy but like

1526
00:48:14,079 --> 00:48:15,599
there's

1527
00:48:15,599 --> 00:48:18,079
an instruction cpo x3

1528
00:48:18,079 --> 00:48:19,760
and if you look at the description in

1529
00:48:19,760 --> 00:48:21,359
the yellow on the right it says it

1530
00:48:21,359 --> 00:48:23,040
compares the operands

1531
00:48:23,040 --> 00:48:23,839
so

1532
00:48:23,839 --> 00:48:25,280
this is another example where i was

1533
00:48:25,280 --> 00:48:27,200
working with something new didn't quite

1534
00:48:27,200 --> 00:48:28,559
know what the instructions did but the

1535
00:48:28,559 --> 00:48:30,000
human explanation actually was able to

1536
00:48:30,000 --> 00:48:32,319
say okay cool so they're comparing

1537
00:48:32,319 --> 00:48:35,119
you know the value of x3 and so i

1538
00:48:35,119 --> 00:48:37,280
filtered out these values

1539
00:48:37,280 --> 00:48:38,800
and i find they're looking for three

1540
00:48:38,800 --> 00:48:40,640
seven five one nine

1541
00:48:40,640 --> 00:48:43,119
i tried i tried you know the the

1542
00:48:43,119 --> 00:48:44,720
combination three seven five one nine

1543
00:48:44,720 --> 00:48:46,559
didn't work i tried nine one five seven

1544
00:48:46,559 --> 00:48:48,880
three didn't work and tried you know a

1545
00:48:48,880 --> 00:48:51,200
couple different combinations and lo and

1546
00:48:51,200 --> 00:48:53,119
behold nine five seven one three was one

1547
00:48:53,119 --> 00:48:55,920
of them so if uh you know if i if i was

1548
00:48:55,920 --> 00:48:57,680
to look carefully at how i'll work to

1549
00:48:57,680 --> 00:48:59,200
look at the graph and and which order

1550
00:48:59,200 --> 00:49:00,319
these numbers came in it would have been

1551
00:49:00,319 --> 00:49:02,800
clearer but as i say it was late at

1552
00:49:02,800 --> 00:49:03,920
night so

1553
00:49:03,920 --> 00:49:05,920
i also have one-year-old twins so i

1554
00:49:05,920 --> 00:49:07,760
don't sleep is a thing that i've long

1555
00:49:07,760 --> 00:49:08,800
forgotten

1556
00:49:08,800 --> 00:49:10,400
so

1557
00:49:10,400 --> 00:49:13,520
yeah and that is 60 things in 50 minutes

1558
00:49:13,520 --> 00:49:16,880
so yeah if you want some stickers uh

1559
00:49:16,880 --> 00:49:18,480
i used to i know these people really

1560
00:49:18,480 --> 00:49:20,160
well that work on the tool they sent me

1561
00:49:20,160 --> 00:49:21,839
some baby girls for the for the little

1562
00:49:21,839 --> 00:49:23,359
ones and i have this they sent me like a

1563
00:49:23,359 --> 00:49:25,280
hundred stickers

1564
00:49:25,280 --> 00:49:27,839
so i have plenty of them i also if

1565
00:49:27,839 --> 00:49:29,359
someone wants to raise their hand if

1566
00:49:29,359 --> 00:49:31,040
someone thinks they know

1567
00:49:31,040 --> 00:49:33,040
five things you could do with r2

1568
00:49:33,040 --> 00:49:35,040
and wants to volunteer five of them i'll

1569
00:49:35,040 --> 00:49:37,119
give you something

1570
00:49:37,119 --> 00:49:39,359
if anyone wants to try and have a guess

1571
00:49:39,359 --> 00:49:42,800
any five things from the presentation

1572
00:49:42,800 --> 00:49:44,800
three things

1573
00:49:44,800 --> 00:49:47,520
uh you can create assembly functions

1574
00:49:47,520 --> 00:49:48,960
uh you can

1575
00:49:48,960 --> 00:49:50,800
write off codes

1576
00:49:50,800 --> 00:49:51,760
uh

1577
00:49:51,760 --> 00:49:54,880
and you can use those

1578
00:49:55,119 --> 00:49:57,839
cool yeah so you can come grab this it's

1579
00:49:57,839 --> 00:49:58,720
a

1580
00:49:58,720 --> 00:50:01,680
t-shirt with a bunch of like arm 64

1581
00:50:01,680 --> 00:50:03,119
assembly so they released some cheat

1582
00:50:03,119 --> 00:50:05,680
sheets for arm 64-bit

1583
00:50:05,680 --> 00:50:07,119
um which were recently always had the

1584
00:50:07,119 --> 00:50:09,119
32-bit version of the cheat sheet as a

1585
00:50:09,119 --> 00:50:11,280
poster and now they have so you can come

1586
00:50:11,280 --> 00:50:13,040
grab that afterwards and if you want

1587
00:50:13,040 --> 00:50:15,920
stickers um feel free to come grab some

1588
00:50:15,920 --> 00:50:18,800
or i'll put some at the synopsis stand

1589
00:50:18,800 --> 00:50:21,119
um but yeah any questions i think we

1590
00:50:21,119 --> 00:50:22,319
have a bit of time where you can grab me

1591
00:50:22,319 --> 00:50:25,558
after lunch

1592
00:50:26,800 --> 00:50:28,800
everything everything everything can be

1593
00:50:28,800 --> 00:50:30,240
better right i mean it's open source

1594
00:50:30,240 --> 00:50:32,559
software it's got lots of bugs actually

1595
00:50:32,559 --> 00:50:33,920
there's several times where people have

1596
00:50:33,920 --> 00:50:35,839
written like exploits for r2 itself

1597
00:50:35,839 --> 00:50:38,960
which is like kind of ironic right um

1598
00:50:38,960 --> 00:50:40,880
but you know it's a hugely complicated

1599
00:50:40,880 --> 00:50:42,960
project they try and you know i've

1600
00:50:42,960 --> 00:50:44,640
contributed many times and they try and

1601
00:50:44,640 --> 00:50:45,680
avoid

1602
00:50:45,680 --> 00:50:47,839
using any kind of dependencies so if

1603
00:50:47,839 --> 00:50:48,960
you're

1604
00:50:48,960 --> 00:50:50,400
you know using certain system libraries

1605
00:50:50,400 --> 00:50:51,599
that might not be

1606
00:50:51,599 --> 00:50:52,960
present on all the various different

1607
00:50:52,960 --> 00:50:54,880
architectures it's like to be avoided so

1608
00:50:54,880 --> 00:50:57,040
a lot of the code is like highly custom

1609
00:50:57,040 --> 00:50:58,079
and so

1610
00:50:58,079 --> 00:50:59,599
sometimes you get like obscure things

1611
00:50:59,599 --> 00:51:00,880
that can happen when it runs on certain

1612
00:51:00,880 --> 00:51:02,400
architectures and stuff

1613
00:51:02,400 --> 00:51:04,880
um so i think documentation is like

1614
00:51:04,880 --> 00:51:07,200
always improving um they have like a

1615
00:51:07,200 --> 00:51:10,480
wiki um there's a git book

1616
00:51:10,480 --> 00:51:11,520
and

1617
00:51:11,520 --> 00:51:13,280
even they were working on like you know

1618
00:51:13,280 --> 00:51:15,040
an iphone app written in swift where you

1619
00:51:15,040 --> 00:51:16,480
have like you can play on your phone and

1620
00:51:16,480 --> 00:51:17,599
go through the different commands and

1621
00:51:17,599 --> 00:51:19,680
stuff i think documentation is

1622
00:51:19,680 --> 00:51:21,680
definitely improving but it's somewhere

1623
00:51:21,680 --> 00:51:25,040
that can get a lot better i think um

1624
00:51:25,040 --> 00:51:26,720
but yeah

1625
00:51:26,720 --> 00:51:28,400
yeah there's many things many things can

1626
00:51:28,400 --> 00:51:30,400
improve but it's the nature of open

1627
00:51:30,400 --> 00:51:31,920
source is like how how much

1628
00:51:31,920 --> 00:51:34,240
contributions do you get i mean pancake

1629
00:51:34,240 --> 00:51:37,440
himself spends like well into the early

1630
00:51:37,440 --> 00:51:38,960
hours of the morning every day of his

1631
00:51:38,960 --> 00:51:41,200
life basically for 16 years just to get

1632
00:51:41,200 --> 00:51:43,440
it to where it is and still you know

1633
00:51:43,440 --> 00:51:46,319
you'll always find criticism or you know

1634
00:51:46,319 --> 00:51:48,640
various frustrations with it and at the

1635
00:51:48,640 --> 00:51:50,160
end of the day most of those people

1636
00:51:50,160 --> 00:51:52,000
could fix those things but that they'll

1637
00:51:52,000 --> 00:51:54,000
typically just tell you he's fixed

1638
00:51:54,000 --> 00:51:57,040
so i think contributions and

1639
00:51:57,040 --> 00:51:58,800
whatnot have been very good in r2 they

1640
00:51:58,800 --> 00:52:00,559
have like thousands of people that have

1641
00:52:00,559 --> 00:52:03,119
contributed to r2 um

1642
00:52:03,119 --> 00:52:04,480
but i think documentation could be

1643
00:52:04,480 --> 00:52:06,880
better and just like entry level

1644
00:52:06,880 --> 00:52:09,599
the the entry curve or the learning

1645
00:52:09,599 --> 00:52:11,440
curve is is really steep

1646
00:52:11,440 --> 00:52:13,359
and so

1647
00:52:13,359 --> 00:52:15,280
talks like this i'm not saying this is a

1648
00:52:15,280 --> 00:52:17,040
great talk but talks like this that kind

1649
00:52:17,040 --> 00:52:18,480
of showcase all the interesting things

1650
00:52:18,480 --> 00:52:19,760
of why you might want to use it to get

1651
00:52:19,760 --> 00:52:20,960
people interested that might then

1652
00:52:20,960 --> 00:52:23,200
contribute i think are useful a lot of

1653
00:52:23,200 --> 00:52:25,520
the stuff out there is like very

1654
00:52:25,520 --> 00:52:27,440
heavy low level stuff and that's great

1655
00:52:27,440 --> 00:52:28,319
you know i love going through that

1656
00:52:28,319 --> 00:52:29,680
content but it's not always totally

1657
00:52:29,680 --> 00:52:30,720
accessible

1658
00:52:30,720 --> 00:52:33,200
um you know if it's really deep in

1659
00:52:33,200 --> 00:52:34,720
game boy roms like it's only going to

1660
00:52:34,720 --> 00:52:35,599
apply

1661
00:52:35,599 --> 00:52:36,720
to people that have done a lot of stuff

1662
00:52:36,720 --> 00:52:38,880
with gameboy roms so um

1663
00:52:38,880 --> 00:52:42,400
yeah i'd say documentation probably

1664
00:52:42,400 --> 00:52:45,200
any other questions

1665
00:52:45,200 --> 00:52:46,400
oh

1666
00:52:46,400 --> 00:52:49,960
okay it's lunchtime

