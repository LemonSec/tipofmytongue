1
00:00:02,960 --> 00:00:04,640
he's doing something else cool

2
00:00:04,640 --> 00:00:07,520
hi everyone uh thanks for coming to join

3
00:00:07,520 --> 00:00:08,320
my

4
00:00:08,320 --> 00:00:10,240
very unrehearsed very much let's see how

5
00:00:10,240 --> 00:00:13,920
this goes presentation on ci pipelines

6
00:00:13,920 --> 00:00:15,280
so for those of you who don't know me

7
00:00:15,280 --> 00:00:18,400
i'm ian i'm a former um hacksaw former

8
00:00:18,400 --> 00:00:20,320
security person i graduated here in

9
00:00:20,320 --> 00:00:22,720
about 2016

10
00:00:22,720 --> 00:00:24,240
and i'm now the containerization

11
00:00:24,240 --> 00:00:26,480
practice lead at ncc group

12
00:00:26,480 --> 00:00:28,640
so i spend most of my time either

13
00:00:28,640 --> 00:00:30,640
hacking kubernetes clusters or docker

14
00:00:30,640 --> 00:00:33,440
containers or more recently ci pipelines

15
00:00:33,440 --> 00:00:37,120
and the kind of integrations around them

16
00:00:37,280 --> 00:00:39,280
so i'm hoping to cover today as a brief

17
00:00:39,280 --> 00:00:41,920
introduction into ci cd talk about kind

18
00:00:41,920 --> 00:00:42,719
of

19
00:00:42,719 --> 00:00:45,120
why people are using ci and what the

20
00:00:45,120 --> 00:00:47,039
benefits are to to developers to

21
00:00:47,039 --> 00:00:49,520
security people to anyone

22
00:00:49,520 --> 00:00:51,520
i'm going to demo some attacks i say i'm

23
00:00:51,520 --> 00:00:53,199
going to demo them i'm not entirely

24
00:00:53,199 --> 00:00:55,280
convinced that the wi-fi here is going

25
00:00:55,280 --> 00:00:56,960
to hold up so i might just talk through

26
00:00:56,960 --> 00:00:59,359
some of them and then i've got some more

27
00:00:59,359 --> 00:01:00,960
stories from some of our recent

28
00:01:00,960 --> 00:01:03,199
engagements that we've done some of the

29
00:01:03,199 --> 00:01:06,080
attacks that we've done on client gigs

30
00:01:06,080 --> 00:01:08,240
and then hopefully at the end some

31
00:01:08,240 --> 00:01:09,840
useful blue team advice so that if you

32
00:01:09,840 --> 00:01:11,040
are running pipelines you've got a

33
00:01:11,040 --> 00:01:13,280
better idea of what you can do to secure

34
00:01:13,280 --> 00:01:15,439
them and to make sure that these sorts

35
00:01:15,439 --> 00:01:17,280
of attacks don't work

36
00:01:17,280 --> 00:01:19,520
against your environment

37
00:01:19,520 --> 00:01:22,320
so mild disclaimer

38
00:01:22,320 --> 00:01:23,759
these findings are kind of skewed

39
00:01:23,759 --> 00:01:25,439
towards containers because that's what

40
00:01:25,439 --> 00:01:27,200
most of my interest is in

41
00:01:27,200 --> 00:01:28,560
a lot of the time we're finding

42
00:01:28,560 --> 00:01:30,799
pipelines are running using containers

43
00:01:30,799 --> 00:01:33,200
as a back end anyway so it's fairly

44
00:01:33,200 --> 00:01:35,840
common but just again the not every

45
00:01:35,840 --> 00:01:37,680
attack is going to be container related

46
00:01:37,680 --> 00:01:39,119
most of the ones i'm going to talk about

47
00:01:39,119 --> 00:01:41,600
will be and also i've taken a bit of

48
00:01:41,600 --> 00:01:43,759
kind of dramatic license we've changed

49
00:01:43,759 --> 00:01:45,759
some of the client detail we've changed

50
00:01:45,759 --> 00:01:48,000
client names obviously we've removed any

51
00:01:48,000 --> 00:01:50,640
details and we've there's one attack

52
00:01:50,640 --> 00:01:52,560
chain that's a combination of a couple

53
00:01:52,560 --> 00:01:53,840
but effectively these are all

54
00:01:53,840 --> 00:01:55,759
representative of

55
00:01:55,759 --> 00:01:57,040
what we are seeing in the wild at the

56
00:01:57,040 --> 00:01:59,119
moment

57
00:01:59,119 --> 00:01:59,840
so

58
00:01:59,840 --> 00:02:03,680
cicd um this is basically

59
00:02:03,680 --> 00:02:06,000
the tldr of this is

60
00:02:06,000 --> 00:02:08,878
ci cd is automation in your build

61
00:02:08,878 --> 00:02:11,120
environment so instead of having to

62
00:02:11,120 --> 00:02:12,800
write some code

63
00:02:12,800 --> 00:02:14,160
ship that code off somewhere have

64
00:02:14,160 --> 00:02:15,920
someone else pick up the code deploy it

65
00:02:15,920 --> 00:02:18,800
into another environment do your testing

66
00:02:18,800 --> 00:02:20,480
have another user go write these tests

67
00:02:20,480 --> 00:02:21,840
all past i'm going to pick everything up

68
00:02:21,840 --> 00:02:24,959
and move into production and kind of our

69
00:02:24,959 --> 00:02:26,640
one monthly time to get something into

70
00:02:26,640 --> 00:02:28,800
production

71
00:02:28,800 --> 00:02:30,400
a lot of pipelines are being written

72
00:02:30,400 --> 00:02:32,319
just to make this process quicker there

73
00:02:32,319 --> 00:02:34,560
are other benefits as well so allowing

74
00:02:34,560 --> 00:02:36,160
your developers to move faster and work

75
00:02:36,160 --> 00:02:37,440
more centrally

76
00:02:37,440 --> 00:02:38,959
working from a central code base that

77
00:02:38,959 --> 00:02:40,720
has the same tests applied kind of gets

78
00:02:40,720 --> 00:02:42,959
rid of the well these tests pass on my

79
00:02:42,959 --> 00:02:44,480
machine so what's the difference it's a

80
00:02:44,480 --> 00:02:45,840
lot easier to

81
00:02:45,840 --> 00:02:47,519
not worry about having to reconcile code

82
00:02:47,519 --> 00:02:50,160
as long as you know how to use git which

83
00:02:50,160 --> 00:02:52,000
i don't really i'm very much in the

84
00:02:52,000 --> 00:02:53,599
school of delete everything and start

85
00:02:53,599 --> 00:02:56,720
again if you get clone error

86
00:02:57,360 --> 00:02:59,280
and again actions are performed on

87
00:02:59,280 --> 00:03:01,360
central compute resources so you can get

88
00:03:01,360 --> 00:03:02,959
away with less powerful developer

89
00:03:02,959 --> 00:03:05,599
laptops and i mean let's face it most

90
00:03:05,599 --> 00:03:07,440
devs are using overpowered max anyway

91
00:03:07,440 --> 00:03:09,280
but you can technically write the code

92
00:03:09,280 --> 00:03:10,959
on a raspberry pi

93
00:03:10,959 --> 00:03:12,400
fire off the central cluster and the

94
00:03:12,400 --> 00:03:14,080
beefier compute tasks will happen

95
00:03:14,080 --> 00:03:15,760
centrally

96
00:03:15,760 --> 00:03:16,840
and in

97
00:03:16,840 --> 00:03:19,200
theory devs are made more efficient by

98
00:03:19,200 --> 00:03:20,640
not having to worry about all of this

99
00:03:20,640 --> 00:03:22,640
automation because a devops approach

100
00:03:22,640 --> 00:03:24,080
will lead to

101
00:03:24,080 --> 00:03:26,720
devs just write code and then the magic

102
00:03:26,720 --> 00:03:30,080
automations make the code do stuff

103
00:03:30,080 --> 00:03:32,319
which we'll talk about a bit more later

104
00:03:32,319 --> 00:03:34,319
so the ci part of ci cd continuous

105
00:03:34,319 --> 00:03:36,799
integration this is kind of your testing

106
00:03:36,799 --> 00:03:39,360
phase so

107
00:03:39,360 --> 00:03:41,440
if you're writing if you've got good

108
00:03:41,440 --> 00:03:42,879
unit tests in your code base then every

109
00:03:42,879 --> 00:03:44,080
time you do a commit you can have those

110
00:03:44,080 --> 00:03:46,480
unit tests run automatically you can

111
00:03:46,480 --> 00:03:48,799
make sure that your code actually works

112
00:03:48,799 --> 00:03:51,200
and does what it's meant to

113
00:03:51,200 --> 00:03:52,720
and obviously the better your test

114
00:03:52,720 --> 00:03:55,680
suites the more effective that will be

115
00:03:55,680 --> 00:03:57,599
it also allows for more testing before a

116
00:03:57,599 --> 00:03:58,959
merge so if you've got like if you make

117
00:03:58,959 --> 00:04:00,319
up a merge request for a couple of

118
00:04:00,319 --> 00:04:03,040
branches in git you can say right before

119
00:04:03,040 --> 00:04:04,640
this is automatically approved just make

120
00:04:04,640 --> 00:04:06,879
sure that all the code works between

121
00:04:06,879 --> 00:04:08,319
my new deaf brand and my production

122
00:04:08,319 --> 00:04:10,239
branch

123
00:04:10,239 --> 00:04:12,319
there's also this move for shifting left

124
00:04:12,319 --> 00:04:14,560
so moving security further and further

125
00:04:14,560 --> 00:04:16,000
left in the workflow instead of being

126
00:04:16,000 --> 00:04:17,358
like we spent months building this thing

127
00:04:17,358 --> 00:04:19,040
we're going live on monday let's get pen

128
00:04:19,040 --> 00:04:23,120
test which we still see all the time

129
00:04:23,199 --> 00:04:25,360
integrating integrating security tools

130
00:04:25,360 --> 00:04:27,040
into a pipeline can definitely lead to a

131
00:04:27,040 --> 00:04:28,800
lot better

132
00:04:28,800 --> 00:04:30,800
more regular security feedback so you

133
00:04:30,800 --> 00:04:33,280
can be doing things like um

134
00:04:33,280 --> 00:04:34,479
if you're running infrastructure as code

135
00:04:34,479 --> 00:04:36,320
you can run things like tfsec

136
00:04:36,320 --> 00:04:37,440
and then that'll say right this

137
00:04:37,440 --> 00:04:39,600
infrastructure is going to be built with

138
00:04:39,600 --> 00:04:41,199
you know this terraform code has been

139
00:04:41,199 --> 00:04:43,360
written and it's got security groups

140
00:04:43,360 --> 00:04:46,080
open to the internet let's flag that in

141
00:04:46,080 --> 00:04:47,680
your build pipeline and say hey are you

142
00:04:47,680 --> 00:04:48,800
sure you want to do this before you

143
00:04:48,800 --> 00:04:50,080
deploy

144
00:04:50,080 --> 00:04:51,919
the same with things like code quality

145
00:04:51,919 --> 00:04:53,759
scanning or secrets checking i know

146
00:04:53,759 --> 00:04:55,440
there's a big drive too

147
00:04:55,440 --> 00:04:56,880
let's get rid of all the secrets from my

148
00:04:56,880 --> 00:04:58,479
build pipeline so you can basically prep

149
00:04:58,479 --> 00:05:00,960
your code for aws keys or things like

150
00:05:00,960 --> 00:05:01,759
that

151
00:05:01,759 --> 00:05:03,199
and then flag them and say hey this

152
00:05:03,199 --> 00:05:05,280
commit has tokens in that's really not

153
00:05:05,280 --> 00:05:07,440
good i'm going to alert you now rather

154
00:05:07,440 --> 00:05:08,960
than five months later when someone from

155
00:05:08,960 --> 00:05:10,960
hackerone emails you and says hey i've

156
00:05:10,960 --> 00:05:13,520
got root on everything

157
00:05:13,520 --> 00:05:15,360
and again more testing on smaller

158
00:05:15,360 --> 00:05:17,199
changes in theory means faster and more

159
00:05:17,199 --> 00:05:18,720
actionable feedback

160
00:05:18,720 --> 00:05:21,280
so if you do a small commit and suddenly

161
00:05:21,280 --> 00:05:23,199
builds start failing you know that it

162
00:05:23,199 --> 00:05:24,960
was probably on just a couple of lines

163
00:05:24,960 --> 00:05:26,880
of code rather than absolutely the

164
00:05:26,880 --> 00:05:30,479
entire code base needs to be debugged

165
00:05:30,479 --> 00:05:33,199
so that's the ci part the cd bit is

166
00:05:33,199 --> 00:05:34,880
continuous delivery or continuous

167
00:05:34,880 --> 00:05:36,880
deployment depending on what blog you're

168
00:05:36,880 --> 00:05:39,440
reading at the time

169
00:05:39,440 --> 00:05:41,039
basically this is the bit where once

170
00:05:41,039 --> 00:05:42,720
your tests are passed you can deploy

171
00:05:42,720 --> 00:05:44,880
code to the next environment so if it's

172
00:05:44,880 --> 00:05:46,960
a merge request you can say right

173
00:05:46,960 --> 00:05:48,400
all of my unit tests are passing there's

174
00:05:48,400 --> 00:05:50,000
no glaring security issues in this

175
00:05:50,000 --> 00:05:53,120
environment what i'm going to do now is

176
00:05:53,120 --> 00:05:55,600
take all of this code and redeploy into

177
00:05:55,600 --> 00:05:57,759
a staging environment so you say right

178
00:05:57,759 --> 00:05:59,199
let's make sure that everything actually

179
00:05:59,199 --> 00:06:01,440
runs in a representative environment for

180
00:06:01,440 --> 00:06:03,520
what the app the web app or api or

181
00:06:03,520 --> 00:06:04,840
whatever should look

182
00:06:04,840 --> 00:06:07,600
like and again once

183
00:06:07,600 --> 00:06:09,440
you've decided that everything's okay in

184
00:06:09,440 --> 00:06:10,560
staging

185
00:06:10,560 --> 00:06:11,919
you can make another request and say

186
00:06:11,919 --> 00:06:13,120
right just take exactly what you've

187
00:06:13,120 --> 00:06:14,960
built in staging lift it up and put it

188
00:06:14,960 --> 00:06:16,479
over there in prod

189
00:06:16,479 --> 00:06:18,560
and because this is programmatic you can

190
00:06:18,560 --> 00:06:20,720
get much faster migrations so in theory

191
00:06:20,720 --> 00:06:22,720
if you've got a good enough test suite

192
00:06:22,720 --> 00:06:24,400
i can write some code and say right i've

193
00:06:24,400 --> 00:06:26,319
made these changes i'm going to say git

194
00:06:26,319 --> 00:06:28,720
commit get push and then suddenly my

195
00:06:28,720 --> 00:06:31,039
code is running in production

196
00:06:31,039 --> 00:06:32,720
with a relatively good degree of

197
00:06:32,720 --> 00:06:34,000
confidence that's not going to be

198
00:06:34,000 --> 00:06:36,240
completely broken

199
00:06:36,240 --> 00:06:39,919
in theory it doesn't always work

200
00:06:40,160 --> 00:06:42,800
so in terms of the tech we're seeing and

201
00:06:42,800 --> 00:06:44,560
the pipelines are normally something

202
00:06:44,560 --> 00:06:47,360
like jenkins github actions gitlab ci

203
00:06:47,360 --> 00:06:48,880
there's a whole bunch of other ones this

204
00:06:48,880 --> 00:06:51,759
is your devops aws have code commit code

205
00:06:51,759 --> 00:06:53,520
deploy i'm sure there's something googly

206
00:06:53,520 --> 00:06:56,080
that i can't remember the name of

207
00:06:56,080 --> 00:06:57,919
there's there's loads of these circle ci

208
00:06:57,919 --> 00:07:00,080
is another one that we see quite often

209
00:07:00,080 --> 00:07:01,280
um

210
00:07:01,280 --> 00:07:03,120
but on the whole mainly jenkins github

211
00:07:03,120 --> 00:07:04,800
actions get lab ci

212
00:07:04,800 --> 00:07:06,479
and then obviously these actions are

213
00:07:06,479 --> 00:07:08,560
defined through the pipelines the

214
00:07:08,560 --> 00:07:10,479
compute power has to come from somewhere

215
00:07:10,479 --> 00:07:12,160
and this could be

216
00:07:12,160 --> 00:07:15,520
basically anything um we see bare metal

217
00:07:15,520 --> 00:07:17,680
machines we see vms normally we see

218
00:07:17,680 --> 00:07:19,440
things like containers or occasionally

219
00:07:19,440 --> 00:07:20,639
serverless

220
00:07:20,639 --> 00:07:23,520
so i have seen a couple of instances of

221
00:07:23,520 --> 00:07:25,280
testing being performed in like aws

222
00:07:25,280 --> 00:07:27,520
lambdas which is a bit more unusual

223
00:07:27,520 --> 00:07:29,199
generally the lambdas are the artifacts

224
00:07:29,199 --> 00:07:33,520
not the test compute but it can be done

225
00:07:33,520 --> 00:07:35,120
and effectively what's happening is when

226
00:07:35,120 --> 00:07:37,759
you make a git commit your your ci of

227
00:07:37,759 --> 00:07:40,400
choice is picking up the code and saying

228
00:07:40,400 --> 00:07:42,240
right i will so jenkins will say oh i'm

229
00:07:42,240 --> 00:07:43,520
watching this repo there's been a new

230
00:07:43,520 --> 00:07:45,759
commit let me take this code and put it

231
00:07:45,759 --> 00:07:47,840
into a container to run the actions that

232
00:07:47,840 --> 00:07:50,400
i want to run

233
00:07:51,120 --> 00:07:52,800
so from an attacker's point of view now

234
00:07:52,800 --> 00:07:54,720
that we know roughly what ci cd pipeline

235
00:07:54,720 --> 00:07:56,160
can look like

236
00:07:56,160 --> 00:07:58,639
what i've got is a thing that i can give

237
00:07:58,639 --> 00:07:59,840
code to

238
00:07:59,840 --> 00:08:02,560
and that thing will run that code and

239
00:08:02,560 --> 00:08:04,400
then we'll probably have credentials to

240
00:08:04,400 --> 00:08:06,160
put the code into production

241
00:08:06,160 --> 00:08:08,240
so as an attacker if i can modify the

242
00:08:08,240 --> 00:08:10,479
code going in i can modify the artifacts

243
00:08:10,479 --> 00:08:14,080
coming out which is fairly valuable

244
00:08:14,080 --> 00:08:17,520
another thing is quite often we see that

245
00:08:17,520 --> 00:08:19,919
in order to keep costs down there's one

246
00:08:19,919 --> 00:08:21,039
build environment being used for

247
00:08:21,039 --> 00:08:22,560
multiple projects so if you've got six

248
00:08:22,560 --> 00:08:24,639
or seven git projects or several hundred

249
00:08:24,639 --> 00:08:25,599
teams

250
00:08:25,599 --> 00:08:27,039
quite often we'll find the kubernetes

251
00:08:27,039 --> 00:08:28,319
cluster running and it's doing the

252
00:08:28,319 --> 00:08:30,639
building for every single one of those

253
00:08:30,639 --> 00:08:33,279
projects essentially if i can compromise

254
00:08:33,279 --> 00:08:34,880
the build pipeline or the compute power

255
00:08:34,880 --> 00:08:36,000
behind it

256
00:08:36,000 --> 00:08:37,760
there's a fairly good chance i can

257
00:08:37,760 --> 00:08:39,039
compromise every single one of those

258
00:08:39,039 --> 00:08:41,919
projects at once which is sub-optimal to

259
00:08:41,919 --> 00:08:44,478
the devs

260
00:08:45,519 --> 00:08:47,200
so as an example

261
00:08:47,200 --> 00:08:49,440
i've got gitlab ci running i'm using a

262
00:08:49,440 --> 00:08:50,959
kubernetes cluster behind the scenes

263
00:08:50,959 --> 00:08:52,399
providing the compute

264
00:08:52,399 --> 00:08:53,519
resource

265
00:08:53,519 --> 00:08:55,120
and effectively what i've done is

266
00:08:55,120 --> 00:08:56,640
there's a nice and easy helm chart for

267
00:08:56,640 --> 00:08:57,440
those of you who are familiar with

268
00:08:57,440 --> 00:08:58,959
kubernetes helm is like a package

269
00:08:58,959 --> 00:09:00,800
manager you just say helm install get

270
00:09:00,800 --> 00:09:02,720
lab runners give it a token for your

271
00:09:02,720 --> 00:09:05,200
gitlab instance and then

272
00:09:05,200 --> 00:09:06,800
gitlab has the ability to talk to

273
00:09:06,800 --> 00:09:08,480
kubernetes and say i'd like to make

274
00:09:08,480 --> 00:09:09,920
these jobs i'd like to run these

275
00:09:09,920 --> 00:09:12,640
containers running certain commands

276
00:09:12,640 --> 00:09:14,080
kubernetes will then spin up the

277
00:09:14,080 --> 00:09:16,320
workloads and you'll get the output back

278
00:09:16,320 --> 00:09:18,800
in gitlab

279
00:09:18,800 --> 00:09:20,000
actions in this case are run as

280
00:09:20,000 --> 00:09:21,519
kubernetes pods

281
00:09:21,519 --> 00:09:23,519
it doesn't have to be again you can use

282
00:09:23,519 --> 00:09:25,600
just a vm or something generally you get

283
00:09:25,600 --> 00:09:27,519
better segmentation using something like

284
00:09:27,519 --> 00:09:28,800
containers

285
00:09:28,800 --> 00:09:32,000
we've seen issues before where

286
00:09:32,000 --> 00:09:33,360
customers have just been using a single

287
00:09:33,360 --> 00:09:35,680
vm and if you just get shell and then go

288
00:09:35,680 --> 00:09:37,920
dot slash dot slash dot dot slash get to

289
00:09:37,920 --> 00:09:38,959
the root of the drive and you find the

290
00:09:38,959 --> 00:09:40,480
build artifacts for

291
00:09:40,480 --> 00:09:43,760
17 000 projects uh generally not a great

292
00:09:43,760 --> 00:09:46,000
idea doing this in containers

293
00:09:46,000 --> 00:09:47,680
does give you a nice clean environment

294
00:09:47,680 --> 00:09:50,480
every time which is always nice because

295
00:09:50,480 --> 00:09:52,320
you know it's not a problem with a build

296
00:09:52,320 --> 00:09:53,680
artifact from a previous run is

297
00:09:53,680 --> 00:09:55,760
interfering with my my current run or

298
00:09:55,760 --> 00:09:56,790
something along those lines

299
00:09:56,790 --> 00:09:58,800
[Music]

300
00:09:58,800 --> 00:10:00,399
so my infrastructure basically looks

301
00:10:00,399 --> 00:10:02,320
something like this you've got gitlab

302
00:10:02,320 --> 00:10:04,720
when i make a request gitlab's going to

303
00:10:04,720 --> 00:10:06,480
go hey i would like to make some pods

304
00:10:06,480 --> 00:10:08,240
please hello kubernetes i please make

305
00:10:08,240 --> 00:10:10,000
these pods

306
00:10:10,000 --> 00:10:11,920
kubernetes is going to do its magic as

307
00:10:11,920 --> 00:10:14,480
orchestration layer and go okay hello

308
00:10:14,480 --> 00:10:16,560
nodes please run these containers

309
00:10:16,560 --> 00:10:20,560
nothing too strenuous there really

310
00:10:20,560 --> 00:10:23,120
and then for gitlab ci this is what

311
00:10:23,120 --> 00:10:24,720
syntax looks like

312
00:10:24,720 --> 00:10:27,839
jobs tend to be written in yaml and yaml

313
00:10:27,839 --> 00:10:29,920
is yet another markup language

314
00:10:29,920 --> 00:10:32,560
it's a wonderful horrible

315
00:10:32,560 --> 00:10:34,640
more human readable version of jason

316
00:10:34,640 --> 00:10:36,959
that's white space sensitive and almost

317
00:10:36,959 --> 00:10:38,399
every time i try and write something i

318
00:10:38,399 --> 00:10:39,760
end up putting an extra space in

319
00:10:39,760 --> 00:10:41,680
somewhere and everything dies

320
00:10:41,680 --> 00:10:42,800
um

321
00:10:42,800 --> 00:10:44,480
it's not horrendous it is more readable

322
00:10:44,480 --> 00:10:45,920
than jason that's for sure and it's not

323
00:10:45,920 --> 00:10:48,079
xml so it's got that going for it but

324
00:10:48,079 --> 00:10:50,800
yeah basically every git lab every ci

325
00:10:50,800 --> 00:10:53,040
environment uses yaml in some formats

326
00:10:53,040 --> 00:10:54,640
the syntax is different but they're all

327
00:10:54,640 --> 00:10:57,440
roughly the same

328
00:10:57,440 --> 00:10:59,600
so if we look at this test job

329
00:10:59,600 --> 00:11:01,440
we've basically got

330
00:11:01,440 --> 00:11:02,880
a build stage

331
00:11:02,880 --> 00:11:04,399
you can split your jobs up into stages

332
00:11:04,399 --> 00:11:05,839
so if you need to prepare an environment

333
00:11:05,839 --> 00:11:09,279
before you do actual deployments you can

334
00:11:09,279 --> 00:11:11,120
all of the jobs in one stage will run at

335
00:11:11,120 --> 00:11:13,440
the same time

336
00:11:13,440 --> 00:11:15,040
in this case i've got test job and all

337
00:11:15,040 --> 00:11:16,880
it does is say hello i'm testing gitlab

338
00:11:16,880 --> 00:11:19,680
ci so it's just an echo hello world

339
00:11:19,680 --> 00:11:21,760
i might

340
00:11:21,760 --> 00:11:24,800
be able to actually show this running

341
00:11:24,800 --> 00:11:29,240
assuming my vpn hasn't dropped

342
00:11:29,279 --> 00:11:33,439
so what i've got here is a

343
00:11:33,519 --> 00:11:35,920
pipeline ci cd pipelines i don't know

344
00:11:35,920 --> 00:11:37,279
how well you'll be able to see this i

345
00:11:37,279 --> 00:11:39,040
will try and zoom in

346
00:11:39,040 --> 00:11:40,560
is that big enough for people to see

347
00:11:40,560 --> 00:11:42,959
kind of

348
00:11:42,959 --> 00:11:44,560
so what you can see here is i've got a

349
00:11:44,560 --> 00:11:48,399
pipeline number 71 has run and i have

350
00:11:48,399 --> 00:11:49,440
five

351
00:11:49,440 --> 00:11:51,360
six tasks that have been run so in the

352
00:11:51,360 --> 00:11:53,360
test stage i've got my test job then

353
00:11:53,360 --> 00:11:55,440
i've got some terraform happening in the

354
00:11:55,440 --> 00:11:57,120
deploy stage i've got more terraform and

355
00:11:57,120 --> 00:11:58,560
then i've got the hacks that will come

356
00:11:58,560 --> 00:12:00,880
onto later

357
00:12:00,880 --> 00:12:02,959
and if i go into test job what you can

358
00:12:02,959 --> 00:12:05,040
see

359
00:12:05,040 --> 00:12:06,720
again this might not look great for

360
00:12:06,720 --> 00:12:08,320
those at the back but i hope you can see

361
00:12:08,320 --> 00:12:10,959
it effectively we've just got

362
00:12:10,959 --> 00:12:13,040
the echo hello world at the bottom here

363
00:12:13,040 --> 00:12:14,720
we get some outputs

364
00:12:14,720 --> 00:12:16,000
you'd probably be doing something more

365
00:12:16,000 --> 00:12:18,000
complicated than just saying hello world

366
00:12:18,000 --> 00:12:19,440
in a real environment we'll get onto

367
00:12:19,440 --> 00:12:21,440
those later but that's roughly what a

368
00:12:21,440 --> 00:12:23,360
job looks like in gitlab

369
00:12:23,360 --> 00:12:25,519
again using something like circle ci

370
00:12:25,519 --> 00:12:27,360
this will be different slightly but the

371
00:12:27,360 --> 00:12:30,320
fundamentals are the same

372
00:12:34,320 --> 00:12:35,920
and there's screenshots just in case my

373
00:12:35,920 --> 00:12:37,600
vpn dropped so yeah basically you can

374
00:12:37,600 --> 00:12:39,760
see a couple of jobs run we've got some

375
00:12:39,760 --> 00:12:41,440
terminal output that really doesn't look

376
00:12:41,440 --> 00:12:43,839
good on that screen

377
00:12:43,839 --> 00:12:47,120
so as a better example

378
00:12:47,120 --> 00:12:48,959
i've got a pipeline written that i as a

379
00:12:48,959 --> 00:12:51,120
developer can make some code i can write

380
00:12:51,120 --> 00:12:53,120
it i can say to gitlab okay i've done a

381
00:12:53,120 --> 00:12:54,399
deploy

382
00:12:54,399 --> 00:12:56,320
gitlab can then run terraform which you

383
00:12:56,320 --> 00:12:59,120
saw in a couple of slides ago

384
00:12:59,120 --> 00:13:00,959
and then terraform if anyone's not used

385
00:13:00,959 --> 00:13:02,560
it as infrastructures code provider i

386
00:13:02,560 --> 00:13:04,839
can define a bunch of aws resources in

387
00:13:04,839 --> 00:13:07,200
terraform when i do a terraform apply

388
00:13:07,200 --> 00:13:09,440
command those resources will be spat out

389
00:13:09,440 --> 00:13:12,399
in a running aws lambda or whatever i'm

390
00:13:12,399 --> 00:13:13,920
doing in this case what i'm doing i've

391
00:13:13,920 --> 00:13:16,719
got a node.js

392
00:13:17,200 --> 00:13:18,839
very very basic

393
00:13:18,839 --> 00:13:21,360
api that i'm uploading the code to s3

394
00:13:21,360 --> 00:13:22,880
and then lambda picks up the code from

395
00:13:22,880 --> 00:13:24,480
s3 and says

396
00:13:24,480 --> 00:13:26,560
right i'm now going to run this lambda

397
00:13:26,560 --> 00:13:28,160
so

398
00:13:28,160 --> 00:13:29,279
i have

399
00:13:29,279 --> 00:13:31,839
a lambda here that says

400
00:13:31,839 --> 00:13:33,920
to do write my slides for security this

401
00:13:33,920 --> 00:13:35,279
is running i don't know how well you'll

402
00:13:35,279 --> 00:13:38,079
be able to see it in on aws lambda at

403
00:13:38,079 --> 00:13:41,040
the moment that i can view in my account

404
00:13:41,040 --> 00:13:42,959
what i'm going to try and do

405
00:13:42,959 --> 00:13:46,160
is actually modify that code

406
00:13:46,160 --> 00:13:48,639
let's just go up to

407
00:13:48,639 --> 00:13:51,519
the correct bit

408
00:13:53,650 --> 00:13:56,240
[Music]

409
00:13:56,240 --> 00:13:59,360
and if i go get add

410
00:13:59,360 --> 00:14:03,320
and then get commit

411
00:14:03,680 --> 00:14:06,160
and then get push

412
00:14:06,160 --> 00:14:08,800
what we should see

413
00:14:08,800 --> 00:14:12,800
is if i now go to my ci

414
00:14:15,519 --> 00:14:17,920
we've got a couple of pending jobs here

415
00:14:17,920 --> 00:14:20,240
so if i now go into the pipelines and

416
00:14:20,240 --> 00:14:22,639
select job 72

417
00:14:22,639 --> 00:14:24,160
what you can see is i've got my three

418
00:14:24,160 --> 00:14:26,240
stages of

419
00:14:26,240 --> 00:14:27,920
the pipeline running so at the moment

420
00:14:27,920 --> 00:14:30,480
it's how to do the test tasks and then

421
00:14:30,480 --> 00:14:31,600
it's going to actually run the

422
00:14:31,600 --> 00:14:32,800
deployment

423
00:14:32,800 --> 00:14:34,079
so you can see there the stage has

424
00:14:34,079 --> 00:14:36,160
changed these tasks are actually running

425
00:14:36,160 --> 00:14:39,439
if we click on one we'll see

426
00:14:39,519 --> 00:14:42,399
output from the

427
00:14:42,399 --> 00:14:44,079
the containers that are running if

428
00:14:44,079 --> 00:14:45,680
anyone's really interested what we can

429
00:14:45,680 --> 00:14:48,800
actually do is do cube ctl

430
00:14:48,800 --> 00:14:51,599
get pods

431
00:14:53,920 --> 00:14:55,199
and you can see there there's a couple

432
00:14:55,199 --> 00:14:56,720
of containers running these will

433
00:14:56,720 --> 00:14:58,240
probably appear and disappear over the

434
00:14:58,240 --> 00:14:59,680
next few seconds

435
00:14:59,680 --> 00:15:01,120
these are basically the actual workload

436
00:15:01,120 --> 00:15:03,360
running from the back of these jobs so

437
00:15:03,360 --> 00:15:04,959
because i've got admin on my kubernetes

438
00:15:04,959 --> 00:15:06,399
cluster i can go in and see the pods

439
00:15:06,399 --> 00:15:08,079
running and actually i could mess with

440
00:15:08,079 --> 00:15:09,680
them interact with them directly rather

441
00:15:09,680 --> 00:15:11,600
than through git commits

442
00:15:11,600 --> 00:15:14,639
we'll come back to that later

443
00:15:14,720 --> 00:15:17,839
and over the next few minutes that will

444
00:15:17,839 --> 00:15:19,600
that will deploy and we should see the

445
00:15:19,600 --> 00:15:21,839
changes

446
00:15:21,839 --> 00:15:23,199
so this is what my code looks like for

447
00:15:23,199 --> 00:15:25,040
the terraform deploy stage

448
00:15:25,040 --> 00:15:27,440
i'm saying in the deploy task i've got a

449
00:15:27,440 --> 00:15:29,680
rule saying if the project name is not

450
00:15:29,680 --> 00:15:31,120
my templates basically i've got this all

451
00:15:31,120 --> 00:15:32,959
templated on my system

452
00:15:32,959 --> 00:15:34,800
if it's not the template then run

453
00:15:34,800 --> 00:15:36,240
terraform init

454
00:15:36,240 --> 00:15:38,959
this back end config just says use s3

455
00:15:38,959 --> 00:15:41,360
for my storage where the terraform state

456
00:15:41,360 --> 00:15:43,040
is and then

457
00:15:43,040 --> 00:15:44,720
make you know make these make these

458
00:15:44,720 --> 00:15:47,040
changes make it happen

459
00:15:47,040 --> 00:15:48,880
and i've said only make these changes

460
00:15:48,880 --> 00:15:50,639
only run this task

461
00:15:50,639 --> 00:15:52,160
if the changes have been made to the

462
00:15:52,160 --> 00:15:53,360
terraform

463
00:15:53,360 --> 00:15:56,079
star or democrat star

464
00:15:56,079 --> 00:15:57,360
directories

465
00:15:57,360 --> 00:15:58,480
the reason for this being if you make a

466
00:15:58,480 --> 00:15:59,920
change to your readme or something you

467
00:15:59,920 --> 00:16:00,959
probably don't want to rebuild your

468
00:16:00,959 --> 00:16:02,000
whole environment because these

469
00:16:02,000 --> 00:16:03,440
pipelines can quite often take a long

470
00:16:03,440 --> 00:16:05,279
time to run so there's all sorts of

471
00:16:05,279 --> 00:16:08,560
logic you can do in here as a dev which

472
00:16:08,560 --> 00:16:11,199
is quite useful

473
00:16:14,720 --> 00:16:17,440
so that was a quick understanding a

474
00:16:17,440 --> 00:16:19,920
quick quick round of what the pipelines

475
00:16:19,920 --> 00:16:21,839
look like anyone got any questions so

476
00:16:21,839 --> 00:16:24,240
far is that vaguely making sense

477
00:16:24,240 --> 00:16:27,279
basically code goes in code does stuff

478
00:16:27,279 --> 00:16:29,519
build things come out before i go into

479
00:16:29,519 --> 00:16:32,160
war stories let's see if my

480
00:16:32,160 --> 00:16:34,880
lambda has changed

481
00:16:34,880 --> 00:16:36,399
it has so

482
00:16:36,399 --> 00:16:37,680
that commit has gone through the build

483
00:16:37,680 --> 00:16:39,839
pipeline and the changes have now been

484
00:16:39,839 --> 00:16:41,279
made so that

485
00:16:41,279 --> 00:16:44,639
my slides are written good job me

486
00:16:44,639 --> 00:16:45,759
those of you who were speaking to me in

487
00:16:45,759 --> 00:16:47,040
the pub last night will know that that

488
00:16:47,040 --> 00:16:49,279
was only the case about 20 minutes ago

489
00:16:49,279 --> 00:16:52,639
and i've been talking for 17 minutes

490
00:16:52,639 --> 00:16:54,560
so a few more stories

491
00:16:54,560 --> 00:16:56,320
if anyone's read the ncc blog post we

492
00:16:56,320 --> 00:16:58,000
did recently on some real world examples

493
00:16:58,000 --> 00:16:59,360
of this you've probably heard these

494
00:16:59,360 --> 00:17:01,040
before if you haven't read it as the

495
00:17:01,040 --> 00:17:02,240
author of it i'm going to go ahead and

496
00:17:02,240 --> 00:17:03,440
say you probably should it's quite

497
00:17:03,440 --> 00:17:05,760
interesting but i'm going to go into

498
00:17:05,760 --> 00:17:08,400
four examples of some compromises we've

499
00:17:08,400 --> 00:17:11,039
had through ci pipelines

500
00:17:11,039 --> 00:17:12,640
the first one this was a couple of years

501
00:17:12,640 --> 00:17:14,319
ago probably the first job i remember

502
00:17:14,319 --> 00:17:15,919
involving a pipeline

503
00:17:15,919 --> 00:17:17,839
we got asked to test a kubernetes

504
00:17:17,839 --> 00:17:18,880
cluster

505
00:17:18,880 --> 00:17:20,160
and it turns out when we got there we

506
00:17:20,160 --> 00:17:21,199
went actually we're not going to give

507
00:17:21,199 --> 00:17:23,679
you any access apart from

508
00:17:23,679 --> 00:17:26,079
you can be a dev we will give you access

509
00:17:26,079 --> 00:17:28,640
to a developer's laptop with get right

510
00:17:28,640 --> 00:17:32,480
permissions onto a single repository

511
00:17:32,480 --> 00:17:35,280
so we were effectively just a normal dev

512
00:17:35,280 --> 00:17:37,360
the code base was an apache maven

513
00:17:37,360 --> 00:17:39,760
project

514
00:17:40,080 --> 00:17:41,440
the

515
00:17:41,440 --> 00:17:43,200
consultants on this kind of went oh what

516
00:17:43,200 --> 00:17:44,799
do we do let's grip around for some

517
00:17:44,799 --> 00:17:47,600
interesting bits and we found that there

518
00:17:47,600 --> 00:17:49,760
were external dependencies being loaded

519
00:17:49,760 --> 00:17:51,679
in from a config file that we could

520
00:17:51,679 --> 00:17:53,120
modify

521
00:17:53,120 --> 00:17:53,840
so

522
00:17:53,840 --> 00:17:55,679
we were able to say as part of the maven

523
00:17:55,679 --> 00:17:59,039
project your dependencies are from

524
00:17:59,039 --> 00:18:00,400
uh the these

525
00:18:00,400 --> 00:18:03,280
java files

526
00:18:03,440 --> 00:18:04,640
so

527
00:18:04,640 --> 00:18:06,160
we did a bit more recon trying to work

528
00:18:06,160 --> 00:18:08,000
out what was going on we worked out that

529
00:18:08,000 --> 00:18:09,039
they were using jenkins for the

530
00:18:09,039 --> 00:18:11,039
pipelines

531
00:18:11,039 --> 00:18:12,320
and we were trying to work out the

532
00:18:12,320 --> 00:18:13,760
internal network infrastructure as well

533
00:18:13,760 --> 00:18:15,520
trying to work out how

534
00:18:15,520 --> 00:18:16,880
dependencies were loaded and if there

535
00:18:16,880 --> 00:18:19,600
were any restrictions on those

536
00:18:19,600 --> 00:18:21,520
as you can possibly guess there weren't

537
00:18:21,520 --> 00:18:24,000
any restrictions on when the where those

538
00:18:24,000 --> 00:18:26,080
dependencies could be loaded from so we

539
00:18:26,080 --> 00:18:27,919
did the really really really technical

540
00:18:27,919 --> 00:18:29,360
thing of generating an interpreter

541
00:18:29,360 --> 00:18:31,600
payload through metasploit nothing fancy

542
00:18:31,600 --> 00:18:34,320
at all no av dodging or anything

543
00:18:34,320 --> 00:18:35,919
and then we just loaded that on a python

544
00:18:35,919 --> 00:18:39,039
simply http server on a dev laptop

545
00:18:39,039 --> 00:18:41,360
and said okay you can load this jar file

546
00:18:41,360 --> 00:18:43,360
from here

547
00:18:43,360 --> 00:18:46,080
so jenkins runs and goes oh i need to go

548
00:18:46,080 --> 00:18:47,440
and get this jar file and run it as a

549
00:18:47,440 --> 00:18:48,960
dependency

550
00:18:48,960 --> 00:18:51,360
loads up interpreter conveniently calls

551
00:18:51,360 --> 00:18:53,520
back to our our

552
00:18:53,520 --> 00:18:55,520
c2 server i say c2 sac2

553
00:18:55,520 --> 00:18:56,960
metasploit server sitting on the

554
00:18:56,960 --> 00:18:58,960
internet c2 makes it found sound far

555
00:18:58,960 --> 00:19:00,559
more grand

556
00:19:00,559 --> 00:19:01,919
so basically we've got a shell in the

557
00:19:01,919 --> 00:19:04,400
build environment

558
00:19:04,400 --> 00:19:08,240
that shell was limited to just the build

559
00:19:08,240 --> 00:19:10,240
kubernetes pod it wasn't able to do

560
00:19:10,240 --> 00:19:12,480
anything particularly massive but we've

561
00:19:12,480 --> 00:19:14,000
got shell everyone likes shells it's a

562
00:19:14,000 --> 00:19:16,160
good starting point

563
00:19:16,160 --> 00:19:19,760
so we did a little bit more recon

564
00:19:19,760 --> 00:19:21,760
we did the whole cd dot slash dot slash

565
00:19:21,760 --> 00:19:23,600
let's go to the home unfortunately clean

566
00:19:23,600 --> 00:19:26,480
environment so only the required build

567
00:19:26,480 --> 00:19:28,640
bits for

568
00:19:28,640 --> 00:19:31,200
for each of the projects

569
00:19:31,200 --> 00:19:33,760
but what we did find was the image the

570
00:19:33,760 --> 00:19:35,440
container image that was being used for

571
00:19:35,440 --> 00:19:36,640
some reason

572
00:19:36,640 --> 00:19:39,039
had an ssh key in it so we were grapping

573
00:19:39,039 --> 00:19:41,120
around we ran some kind of secret

574
00:19:41,120 --> 00:19:42,559
scrapping tooling

575
00:19:42,559 --> 00:19:44,960
and we found an ssh key and went hmm

576
00:19:44,960 --> 00:19:46,320
that probably shouldn't be there is it

577
00:19:46,320 --> 00:19:48,320
password protected no it's not okay

578
00:19:48,320 --> 00:19:49,360
brilliant

579
00:19:49,360 --> 00:19:51,679
what can we do with it

580
00:19:51,679 --> 00:19:52,480
so

581
00:19:52,480 --> 00:19:54,000
as you may have guessed from the fact

582
00:19:54,000 --> 00:19:55,919
that we were able to get a shell back

583
00:19:55,919 --> 00:19:58,160
there was no restriction on internet

584
00:19:58,160 --> 00:19:59,440
access inside the build environment it

585
00:19:59,440 --> 00:20:00,799
could reach out and go to wherever it

586
00:20:00,799 --> 00:20:02,080
wanted

587
00:20:02,080 --> 00:20:05,120
we installed nmap we did some more recon

588
00:20:05,120 --> 00:20:06,880
and wouldn't you know we found some more

589
00:20:06,880 --> 00:20:10,080
servers running open ssh server

590
00:20:10,080 --> 00:20:11,200
again

591
00:20:11,200 --> 00:20:12,960
nothing particularly clever here we just

592
00:20:12,960 --> 00:20:14,720
went right what else is there

593
00:20:14,720 --> 00:20:16,720
mapped the local subnets and we found

594
00:20:16,720 --> 00:20:18,480
all of these servers available we

595
00:20:18,480 --> 00:20:20,880
suddenly went well we've got key

596
00:20:20,880 --> 00:20:22,480
we've got servers wonder what happens if

597
00:20:22,480 --> 00:20:24,400
we put them together ssh in using the

598
00:20:24,400 --> 00:20:25,840
keys little bit of username brute

599
00:20:25,840 --> 00:20:28,000
forcing i think the usernames were like

600
00:20:28,000 --> 00:20:30,480
admin or something really guessable

601
00:20:30,480 --> 00:20:32,159
and what we found out was for some

602
00:20:32,159 --> 00:20:34,640
reason and i will never understand why

603
00:20:34,640 --> 00:20:37,120
their main build image had an ssh key

604
00:20:37,120 --> 00:20:39,200
that logged you in as roots to their

605
00:20:39,200 --> 00:20:40,880
jenkins masternodes

606
00:20:40,880 --> 00:20:42,880
so we were able to just ssh into

607
00:20:42,880 --> 00:20:44,400
anything we wanted basically in their

608
00:20:44,400 --> 00:20:47,280
entire build environment

609
00:20:47,280 --> 00:20:49,840
so we we jumped in start running ps

610
00:20:49,840 --> 00:20:51,120
across all of the servers to work out

611
00:20:51,120 --> 00:20:52,880
what was running generally the way

612
00:20:52,880 --> 00:20:54,880
secrets management is handled is through

613
00:20:54,880 --> 00:20:57,280
environment variables in these pipelines

614
00:20:57,280 --> 00:20:59,039
so we were able to go right let's let's

615
00:20:59,039 --> 00:21:00,559
just run ps see what running build

616
00:21:00,559 --> 00:21:02,320
processes are what end variables they've

617
00:21:02,320 --> 00:21:05,039
got and we found a kubernetes cube

618
00:21:05,039 --> 00:21:07,039
config file

619
00:21:07,039 --> 00:21:08,960
um

620
00:21:08,960 --> 00:21:10,080
if anyone's not experimented with

621
00:21:10,080 --> 00:21:11,919
kubernetes before don't do it it's awful

622
00:21:11,919 --> 00:21:13,600
but it's also brilliant authentication

623
00:21:13,600 --> 00:21:15,600
is handled through another yaml file and

624
00:21:15,600 --> 00:21:18,559
then generally either a token or a

625
00:21:18,559 --> 00:21:20,799
client a client certificate

626
00:21:20,799 --> 00:21:23,679
this cubeconfig file that we found

627
00:21:23,679 --> 00:21:25,120
pointed to their

628
00:21:25,120 --> 00:21:26,320
production

629
00:21:26,320 --> 00:21:27,840
running environment

630
00:21:27,840 --> 00:21:30,240
as cluster admin which is wild card you

631
00:21:30,240 --> 00:21:32,960
can do whatever you like so we were able

632
00:21:32,960 --> 00:21:34,960
to run cube ctl commands

633
00:21:34,960 --> 00:21:36,559
and at this point we have admin over the

634
00:21:36,559 --> 00:21:39,440
clients running production environment

635
00:21:39,440 --> 00:21:40,960
from

636
00:21:40,960 --> 00:21:43,760
interpreter shell ssh keys

637
00:21:43,760 --> 00:21:46,159
dump more secrets we've got access in

638
00:21:46,159 --> 00:21:48,159
prod and again at that point that was

639
00:21:48,159 --> 00:21:50,080
that was just on a production server so

640
00:21:50,080 --> 00:21:52,159
we could modify code we could interact

641
00:21:52,159 --> 00:21:53,760
with customer information we could

642
00:21:53,760 --> 00:21:57,200
basically do whatever we liked

643
00:21:57,440 --> 00:21:59,200
again not ideal for the customer was

644
00:21:59,200 --> 00:22:00,559
fairly fun given that they said oh we're

645
00:22:00,559 --> 00:22:02,000
not giving you any access let's see

646
00:22:02,000 --> 00:22:03,919
where you can get which any pen testers

647
00:22:03,919 --> 00:22:05,280
in the room will know that's a red rack

648
00:22:05,280 --> 00:22:07,760
to a bill

649
00:22:09,120 --> 00:22:11,039
the next pipeline that i wanted to talk

650
00:22:11,039 --> 00:22:13,679
about was a little bit different because

651
00:22:13,679 --> 00:22:15,679
it started off as a red team

652
00:22:15,679 --> 00:22:18,080
so we had spent a couple of weeks trying

653
00:22:18,080 --> 00:22:19,840
to get into this customer's environment

654
00:22:19,840 --> 00:22:21,200
they were fairly locked down we couldn't

655
00:22:21,200 --> 00:22:24,559
get anywhere eventually we got some

656
00:22:24,559 --> 00:22:26,400
fishing to work

657
00:22:26,400 --> 00:22:28,480
got this this set credentials found a

658
00:22:28,480 --> 00:22:29,679
pipeline that was exposed to the

659
00:22:29,679 --> 00:22:31,840
environment and we went right these guys

660
00:22:31,840 --> 00:22:34,159
are really clued up they're quite strong

661
00:22:34,159 --> 00:22:35,840
their perimeter is good

662
00:22:35,840 --> 00:22:37,520
let's see if we can do anything at all

663
00:22:37,520 --> 00:22:39,280
with this this was just a development

664
00:22:39,280 --> 00:22:40,799
environment and we couldn't see any

665
00:22:40,799 --> 00:22:42,799
pipelines that pushed into production we

666
00:22:42,799 --> 00:22:43,919
couldn't see anything other than

667
00:22:43,919 --> 00:22:46,000
basically unit tests

668
00:22:46,000 --> 00:22:47,200
so we thought the odds of this being

669
00:22:47,200 --> 00:22:48,880
useful are

670
00:22:48,880 --> 00:22:50,559
maybe not amazing but hopefully we'll

671
00:22:50,559 --> 00:22:52,080
get something

672
00:22:52,080 --> 00:22:54,080
so anyway modify the pipeline take the

673
00:22:54,080 --> 00:22:55,520
first job we found one that hadn't been

674
00:22:55,520 --> 00:22:56,799
run for

675
00:22:56,799 --> 00:22:58,880
a few days when that looks about right

676
00:22:58,880 --> 00:23:00,880
we'll modify this make it just run print

677
00:23:00,880 --> 00:23:02,080
end

678
00:23:02,080 --> 00:23:03,600
so all we're doing is listing out the

679
00:23:03,600 --> 00:23:05,919
environment variables

680
00:23:05,919 --> 00:23:08,720
and as it happens there was credentials

681
00:23:08,720 --> 00:23:12,320
for an active directory service account

682
00:23:12,320 --> 00:23:15,679
for some reason again i don't know why

683
00:23:15,679 --> 00:23:17,200
that service account was domain admin

684
00:23:17,200 --> 00:23:19,440
for the entire estate

685
00:23:19,440 --> 00:23:21,200
i can kind of understand like how i need

686
00:23:21,200 --> 00:23:23,120
credentials to load something into prod

687
00:23:23,120 --> 00:23:24,559
or i need to be able to read from a file

688
00:23:24,559 --> 00:23:26,240
server or something

689
00:23:26,240 --> 00:23:27,919
i will never understand why these were

690
00:23:27,919 --> 00:23:30,240
domain admin other than i assume oh it

691
00:23:30,240 --> 00:23:31,919
makes it work if you give it all the

692
00:23:31,919 --> 00:23:33,120
permissions then you can't ever have a

693
00:23:33,120 --> 00:23:35,280
permissions error right

694
00:23:35,280 --> 00:23:37,440
so we spent weeks against this pretty

695
00:23:37,440 --> 00:23:39,679
hard target and then we ran this

696
00:23:39,679 --> 00:23:40,799
pipeline

697
00:23:40,799 --> 00:23:41,679
and

698
00:23:41,679 --> 00:23:43,919
got domain admin amusingly the follow-on

699
00:23:43,919 --> 00:23:45,919
from this was

700
00:23:45,919 --> 00:23:47,120
someone got an alert to say their

701
00:23:47,120 --> 00:23:49,039
pipeline had failed and they went oh

702
00:23:49,039 --> 00:23:50,480
that's not good

703
00:23:50,480 --> 00:23:52,400
and we enabled the pipeline and no one

704
00:23:52,400 --> 00:23:53,760
actually bothered to look into what the

705
00:23:53,760 --> 00:23:54,880
credits could do until about a week

706
00:23:54,880 --> 00:23:56,480
later when we debriefed with the client

707
00:23:56,480 --> 00:23:58,720
and said hey yeah see that secret that

708
00:23:58,720 --> 00:24:02,880
the pipeline fell for yeah we want then

709
00:24:02,960 --> 00:24:06,159
it's a fairly successful there

710
00:24:06,559 --> 00:24:08,000
the next one was a bit more complicated

711
00:24:08,000 --> 00:24:09,440
so the previous two have basically been

712
00:24:09,440 --> 00:24:12,480
we've got access to a git repo the the

713
00:24:12,480 --> 00:24:14,640
configs in so we can make changes and as

714
00:24:14,640 --> 00:24:16,000
i said earlier what you're feeding in

715
00:24:16,000 --> 00:24:17,760
gets executed so that's kind of expected

716
00:24:17,760 --> 00:24:19,919
behavior

717
00:24:19,919 --> 00:24:21,840
the third one was a bit more interesting

718
00:24:21,840 --> 00:24:24,720
because we found an app being tested

719
00:24:24,720 --> 00:24:26,799
and it was deploying to this this test

720
00:24:26,799 --> 00:24:27,679
environment in the middle of the

721
00:24:27,679 --> 00:24:29,600
pipeline that was vulnerable to

722
00:24:29,600 --> 00:24:31,919
server-side request forgery

723
00:24:31,919 --> 00:24:34,880
so we were able in fact it was a local

724
00:24:34,880 --> 00:24:36,559
file read as well

725
00:24:36,559 --> 00:24:39,360
so we were able to read arbitrary files

726
00:24:39,360 --> 00:24:42,880
on the the worker

727
00:24:42,880 --> 00:24:44,240
and again if anyone's heard me talk

728
00:24:44,240 --> 00:24:46,000
about kubernetes you'll know i get very

729
00:24:46,000 --> 00:24:47,600
annoyed at rbac one of the things

730
00:24:47,600 --> 00:24:49,360
kubernetes does is mount a service

731
00:24:49,360 --> 00:24:52,720
account token into the every pod that's

732
00:24:52,720 --> 00:24:54,960
run by default so even if you don't need

733
00:24:54,960 --> 00:24:56,880
to talk to kubernetes api your pod has

734
00:24:56,880 --> 00:25:00,480
credentials that let you talk there

735
00:25:00,480 --> 00:25:01,840
and it's in a fairly predictable

736
00:25:01,840 --> 00:25:04,320
location it's in uh if our run secrets

737
00:25:04,320 --> 00:25:07,279
kubernetes dot io service account token

738
00:25:07,279 --> 00:25:08,320
so we just said right we're going to use

739
00:25:08,320 --> 00:25:10,720
this ssrf to cap that file we did a bit

740
00:25:10,720 --> 00:25:12,960
of recon we used the sorry the lfi to do

741
00:25:12,960 --> 00:25:14,640
this we did a bit of recon

742
00:25:14,640 --> 00:25:16,480
um if you ever find yourself with lfi

743
00:25:16,480 --> 00:25:17,760
and want to know if you're in a

744
00:25:17,760 --> 00:25:20,480
container cutting etc hosts is quite a

745
00:25:20,480 --> 00:25:22,240
good one because if you're in kubernetes

746
00:25:22,240 --> 00:25:23,520
actually says at the top managed by

747
00:25:23,520 --> 00:25:25,440
kubernetes so that gives you a bit more

748
00:25:25,440 --> 00:25:27,600
targeted recon it's quite nice

749
00:25:27,600 --> 00:25:29,600
read the service account token

750
00:25:29,600 --> 00:25:31,520
and went hmm i wonder if we can actually

751
00:25:31,520 --> 00:25:33,360
use this

752
00:25:33,360 --> 00:25:34,720
it wouldn't be a very good story if we

753
00:25:34,720 --> 00:25:37,039
couldn't use it so as a brief aside yep

754
00:25:37,039 --> 00:25:38,480
kubernetes containers have these

755
00:25:38,480 --> 00:25:40,240
authentication tokens

756
00:25:40,240 --> 00:25:42,159
depending on the clusters are back you

757
00:25:42,159 --> 00:25:44,080
can do some things you can do nothing

758
00:25:44,080 --> 00:25:45,200
you can

759
00:25:45,200 --> 00:25:46,799
absolutely rinse the client depending on

760
00:25:46,799 --> 00:25:49,279
the setup

761
00:25:49,440 --> 00:25:52,000
and as an aside to the aside because i

762
00:25:52,000 --> 00:25:54,159
love going down tangents

763
00:25:54,159 --> 00:25:56,799
if anyone runs a kubernetes cluster in

764
00:25:56,799 --> 00:25:59,360
aws managed eks the way authentication

765
00:25:59,360 --> 00:26:00,559
is handled

766
00:26:00,559 --> 00:26:03,039
is through a configuration map in the

767
00:26:03,039 --> 00:26:05,840
cube system namespace

768
00:26:05,840 --> 00:26:07,760
basically what you do there is you say

769
00:26:07,760 --> 00:26:10,480
aws role id on the left kubernetes role

770
00:26:10,480 --> 00:26:13,039
on the right

771
00:26:13,120 --> 00:26:15,200
and the aws rules do not need to match

772
00:26:15,200 --> 00:26:17,039
the aws account so this can be used for

773
00:26:17,039 --> 00:26:18,559
cross account access quite easily which

774
00:26:18,559 --> 00:26:19,760
we didn't know until we tested this

775
00:26:19,760 --> 00:26:21,440
about 11 o'clock at night because it was

776
00:26:21,440 --> 00:26:24,320
an american gig

777
00:26:24,320 --> 00:26:26,400
for some reason and you're probably fed

778
00:26:26,400 --> 00:26:28,000
up of hearing me say that but those

779
00:26:28,000 --> 00:26:29,520
configurations exist

780
00:26:29,520 --> 00:26:32,720
we use the lfi and the uh ssrf stuff we

781
00:26:32,720 --> 00:26:35,679
got access to the config maps

782
00:26:35,679 --> 00:26:37,679
and so we've got access to kubernetes

783
00:26:37,679 --> 00:26:39,360
this account had the ability to edit

784
00:26:39,360 --> 00:26:41,760
config maps including the config mapping

785
00:26:41,760 --> 00:26:43,760
cube system

786
00:26:43,760 --> 00:26:46,000
so we basically said okay we're going to

787
00:26:46,000 --> 00:26:47,679
modify this pipeline we're going to

788
00:26:47,679 --> 00:26:50,559
modify this config map ian's aws account

789
00:26:50,559 --> 00:26:52,480
now has cluster admin access in the

790
00:26:52,480 --> 00:26:55,039
cluster so we generated authentication

791
00:26:55,039 --> 00:26:57,120
tokens in my account put them into cube

792
00:26:57,120 --> 00:26:58,400
config

793
00:26:58,400 --> 00:27:00,880
ignored some tls stuff and then jobs are

794
00:27:00,880 --> 00:27:01,679
good

795
00:27:01,679 --> 00:27:04,240
we had cluster admin over that's meant

796
00:27:04,240 --> 00:27:06,640
to say cluster not clustered

797
00:27:06,640 --> 00:27:09,919
we had admin over their build pipeline

798
00:27:09,919 --> 00:27:11,600
this was really weird because we weren't

799
00:27:11,600 --> 00:27:13,039
at the start of the pipeline and we

800
00:27:13,039 --> 00:27:14,159
weren't at the end we weren't in a

801
00:27:14,159 --> 00:27:15,840
position where we

802
00:27:15,840 --> 00:27:17,440
were directly able to modify the code

803
00:27:17,440 --> 00:27:18,559
being run but what we could do was

804
00:27:18,559 --> 00:27:20,880
modify any

805
00:27:20,880 --> 00:27:22,720
pod and we could interact with any pod

806
00:27:22,720 --> 00:27:24,159
that was being run

807
00:27:24,159 --> 00:27:26,640
because we had access over the

808
00:27:26,640 --> 00:27:28,720
middle bit of the pipe what we wanted to

809
00:27:28,720 --> 00:27:30,320
do was try and get either back to the

810
00:27:30,320 --> 00:27:32,640
get repos or onwards

811
00:27:32,640 --> 00:27:34,080
towards the production environment or

812
00:27:34,080 --> 00:27:37,199
whatever the artifacts were

813
00:27:38,159 --> 00:27:40,559
so kubernetes cluster we've got access

814
00:27:40,559 --> 00:27:41,600
in the middle

815
00:27:41,600 --> 00:27:43,120
what can we do

816
00:27:43,120 --> 00:27:44,559
and effectively what we were able to do

817
00:27:44,559 --> 00:27:46,480
in this case we ran cube ctl get pods

818
00:27:46,480 --> 00:27:47,760
let's just list all the pods that are

819
00:27:47,760 --> 00:27:49,039
running dump out their environment

820
00:27:49,039 --> 00:27:51,520
variables like running ps on

821
00:27:51,520 --> 00:27:54,320
a build server

822
00:27:54,480 --> 00:27:56,240
and we found a whole bunch of secrets so

823
00:27:56,240 --> 00:27:57,760
there's a whole load of secrets that get

824
00:27:57,760 --> 00:27:58,799
added in

825
00:27:58,799 --> 00:28:00,159
when you're running any of your build

826
00:28:00,159 --> 00:28:01,440
secrets get added there's also a whole

827
00:28:01,440 --> 00:28:03,120
bunch of tokens that i think to keep

828
00:28:03,120 --> 00:28:05,279
back to the git repos

829
00:28:05,279 --> 00:28:06,720
these are short-lived tokens that only

830
00:28:06,720 --> 00:28:08,399
last as long as the job does which is a

831
00:28:08,399 --> 00:28:10,720
little bit unfortunate

832
00:28:10,720 --> 00:28:13,440
because effectively

833
00:28:13,440 --> 00:28:15,440
quite often it gets

834
00:28:15,440 --> 00:28:17,120
especially in gitlab

835
00:28:17,120 --> 00:28:19,360
you get given a commit secret token that

836
00:28:19,360 --> 00:28:20,880
you can use to then write back to the

837
00:28:20,880 --> 00:28:23,200
repo that's been kind of built so you

838
00:28:23,200 --> 00:28:24,480
can use this if you've got a multi-stage

839
00:28:24,480 --> 00:28:26,080
pipeline to say right i want my first

840
00:28:26,080 --> 00:28:28,000
action to be

841
00:28:28,000 --> 00:28:29,600
build this dependency and then commit it

842
00:28:29,600 --> 00:28:32,000
back into the repo for later stages so

843
00:28:32,000 --> 00:28:33,360
we were trying to use those we couldn't

844
00:28:33,360 --> 00:28:35,279
get anything because the the code was

845
00:28:35,279 --> 00:28:37,360
running so quickly the jobs were just

846
00:28:37,360 --> 00:28:39,279
dying and then the tokens were expiring

847
00:28:39,279 --> 00:28:41,520
there weren't any use anymore

848
00:28:41,520 --> 00:28:44,240
but what we did find was aws i am keys

849
00:28:44,240 --> 00:28:45,840
allowed us access to the elastic

850
00:28:45,840 --> 00:28:47,679
container registry so the way this

851
00:28:47,679 --> 00:28:49,200
pipeline worked was it's a bunch of

852
00:28:49,200 --> 00:28:51,440
docker files they get fed in they get

853
00:28:51,440 --> 00:28:53,520
built and then the built image gets

854
00:28:53,520 --> 00:28:55,679
loaded into ecr

855
00:28:55,679 --> 00:28:57,840
and then used later by their other

856
00:28:57,840 --> 00:28:59,760
clusters what we couldn't work out was

857
00:28:59,760 --> 00:29:02,000
how workloads were getting put into the

858
00:29:02,000 --> 00:29:03,440
clusters themselves because we couldn't

859
00:29:03,440 --> 00:29:05,440
see any like cube ctl run or anything

860
00:29:05,440 --> 00:29:07,200
like that

861
00:29:07,200 --> 00:29:09,120
turns out

862
00:29:09,120 --> 00:29:11,200
they were using a pool based ci solution

863
00:29:11,200 --> 00:29:14,720
called argo cd or cd not ci um argo cd

864
00:29:14,720 --> 00:29:16,880
and what this does is basically spins up

865
00:29:16,880 --> 00:29:19,440
a new control loop inside the cluster

866
00:29:19,440 --> 00:29:21,279
and says i want the latest version of

867
00:29:21,279 --> 00:29:24,080
this image to be running forever

868
00:29:24,080 --> 00:29:26,000
and if you ever update an image in the

869
00:29:26,000 --> 00:29:27,120
registry

870
00:29:27,120 --> 00:29:28,480
oracle goes hey i'm not running the

871
00:29:28,480 --> 00:29:30,080
latest version anymore let me just go

872
00:29:30,080 --> 00:29:32,559
off and retrieve that and come back

873
00:29:32,559 --> 00:29:34,720
so in theory that's more secure because

874
00:29:34,720 --> 00:29:35,919
it's much harder you have to be in the

875
00:29:35,919 --> 00:29:38,159
cluster anyway to modify the the ci cd

876
00:29:38,159 --> 00:29:40,320
side of things but at this point we were

877
00:29:40,320 --> 00:29:42,159
able to modify something that was being

878
00:29:42,159 --> 00:29:44,159
pulled into the cluster

879
00:29:44,159 --> 00:29:46,320
so we modified the image uh our girl

880
00:29:46,320 --> 00:29:47,520
went hey wait a minute that's not the

881
00:29:47,520 --> 00:29:49,919
latest version i need the new one and

882
00:29:49,919 --> 00:29:51,760
all we did in this case was just run a

883
00:29:51,760 --> 00:29:53,440
little hello world we've got the flag

884
00:29:53,440 --> 00:29:54,559
sort of thing

885
00:29:54,559 --> 00:29:55,919
but we could have quite easily been

886
00:29:55,919 --> 00:29:57,760
doing crypto mining we could have been

887
00:29:57,760 --> 00:29:58,960
doing

888
00:29:58,960 --> 00:29:59,919
um

889
00:29:59,919 --> 00:30:01,440
anything just hovering up customer

890
00:30:01,440 --> 00:30:03,919
information whatever we wanted

891
00:30:03,919 --> 00:30:05,200
so that was a nice route that didn't

892
00:30:05,200 --> 00:30:06,640
involve starting right to start the

893
00:30:06,640 --> 00:30:09,039
pipeline we ended up using some web app

894
00:30:09,039 --> 00:30:11,039
attacks to get into the middle and then

895
00:30:11,039 --> 00:30:13,840
moving on from there

896
00:30:14,880 --> 00:30:16,559
and the fourth one this was fun because

897
00:30:16,559 --> 00:30:18,640
this was a brilliant engagement which

898
00:30:18,640 --> 00:30:20,080
involved a customer saying you can't do

899
00:30:20,080 --> 00:30:23,120
that that's impossible which

900
00:30:23,120 --> 00:30:24,559
is really the case especially if a

901
00:30:24,559 --> 00:30:26,480
consultant has gone to the time of

902
00:30:26,480 --> 00:30:28,399
writing down with evidence here's how i

903
00:30:28,399 --> 00:30:30,080
did this and here's how it definitely

904
00:30:30,080 --> 00:30:32,080
works in here screenshots

905
00:30:32,080 --> 00:30:35,120
so this customer was using circleci

906
00:30:35,120 --> 00:30:36,880
their developers were not allowed access

907
00:30:36,880 --> 00:30:38,159
to production environments they could do

908
00:30:38,159 --> 00:30:39,760
whatever they wanted in dev

909
00:30:39,760 --> 00:30:42,720
but only the main branch of their git

910
00:30:42,720 --> 00:30:45,120
repos were ever moved to production

911
00:30:45,120 --> 00:30:48,080
and there was an approval group so

912
00:30:48,080 --> 00:30:50,320
anytime someone wanted to migrate from

913
00:30:50,320 --> 00:30:52,399
staging to prod it had to go through

914
00:30:52,399 --> 00:30:53,840
approval and it had to have two separate

915
00:30:53,840 --> 00:30:55,279
approvers so we kind of thought well

916
00:30:55,279 --> 00:30:56,320
this isn't going to work because the

917
00:30:56,320 --> 00:30:58,000
chances of us being able to compromise a

918
00:30:58,000 --> 00:30:58,960
dev

919
00:30:58,960 --> 00:31:01,440
and two approvers is fairly minimal

920
00:31:01,440 --> 00:31:04,640
that's not going to be easy

921
00:31:04,640 --> 00:31:06,960
they used circle ci and we could read

922
00:31:06,960 --> 00:31:09,039
through that the circle ci config file

923
00:31:09,039 --> 00:31:11,120
lives in the base of the repo that they

924
00:31:11,120 --> 00:31:13,200
were testing that they were using

925
00:31:13,200 --> 00:31:14,960
using these predefined standard

926
00:31:14,960 --> 00:31:17,039
templated tasks that their security team

927
00:31:17,039 --> 00:31:19,840
had written

928
00:31:20,080 --> 00:31:21,760
secrets were managed through circle ci

929
00:31:21,760 --> 00:31:23,279
so there weren't any secrets in the repo

930
00:31:23,279 --> 00:31:24,799
there was just references to pull this

931
00:31:24,799 --> 00:31:27,279
secret from circle ci that's fine and

932
00:31:27,279 --> 00:31:29,200
then based on the get branch that was

933
00:31:29,200 --> 00:31:31,679
being built there was a variable code

934
00:31:31,679 --> 00:31:34,640
path so effectively

935
00:31:34,640 --> 00:31:36,559
if you're doing dev things you would

936
00:31:36,559 --> 00:31:38,720
load the imageregistry.customer.com

937
00:31:38,720 --> 00:31:39,919
terraform

938
00:31:39,919 --> 00:31:41,120
and you would use the environment

939
00:31:41,120 --> 00:31:43,519
variables dev aws access key id i'm

940
00:31:43,519 --> 00:31:44,799
hoping some of you can see where this is

941
00:31:44,799 --> 00:31:46,559
going already

942
00:31:46,559 --> 00:31:48,320
and then they ran terraform apply but

943
00:31:48,320 --> 00:31:50,159
that only happened when

944
00:31:50,159 --> 00:31:53,760
the branch was feature slash devstar

945
00:31:53,760 --> 00:31:55,840
so that's fine

946
00:31:55,840 --> 00:31:57,760
the next bit of the circle ci thing said

947
00:31:57,760 --> 00:31:59,519
do crop things if you want to do crowd

948
00:31:59,519 --> 00:32:00,799
things

949
00:32:00,799 --> 00:32:04,880
use prod aws secret key an access key

950
00:32:04,880 --> 00:32:06,320
and that's only when the branches main

951
00:32:06,320 --> 00:32:08,399
the theory being there's no way for a

952
00:32:08,399 --> 00:32:09,519
non

953
00:32:09,519 --> 00:32:11,519
there's no way for an average dev to get

954
00:32:11,519 --> 00:32:13,600
code into main without approval so this

955
00:32:13,600 --> 00:32:14,880
is fine to do automatically there's

956
00:32:14,880 --> 00:32:17,600
absolutely no problems here whatsoever

957
00:32:17,600 --> 00:32:19,440
apart from the fact that devs could

958
00:32:19,440 --> 00:32:21,840
change the pipeline config file on any

959
00:32:21,840 --> 00:32:24,799
branch there was no like oh well you can

960
00:32:24,799 --> 00:32:27,200
you know the

961
00:32:27,519 --> 00:32:29,200
config file wasn't in a separate repo

962
00:32:29,200 --> 00:32:31,200
that they had no access to or anything

963
00:32:31,200 --> 00:32:32,640
it wasn't protected it wasn't under

964
00:32:32,640 --> 00:32:34,080
change control

965
00:32:34,080 --> 00:32:36,080
it was possible for any dev to change

966
00:32:36,080 --> 00:32:37,679
this pipeline

967
00:32:37,679 --> 00:32:39,679
on any branch and then circle ci would

968
00:32:39,679 --> 00:32:42,399
pick up the task with the new config all

969
00:32:42,399 --> 00:32:44,159
of the secrets are available to all of

970
00:32:44,159 --> 00:32:46,000
to the pipeline because you never know

971
00:32:46,000 --> 00:32:47,919
when it's going to be needed so we did

972
00:32:47,919 --> 00:32:50,480
the really really really clever thing

973
00:32:50,480 --> 00:32:52,000
of saying i want to do hacky things why

974
00:32:52,000 --> 00:32:54,399
don't you just on any branch

975
00:32:54,399 --> 00:32:58,080
read me the production aws keys please

976
00:32:58,080 --> 00:33:00,159
obviously that worked why wouldn't it

977
00:33:00,159 --> 00:33:02,240
the devs basically went this isn't thing

978
00:33:02,240 --> 00:33:04,799
you can't do this it's not possible so i

979
00:33:04,799 --> 00:33:06,960
ran it in a test repo and gave them a

980
00:33:06,960 --> 00:33:10,000
link to effectively

981
00:33:10,000 --> 00:33:12,880
this page here where i'd just grepped

982
00:33:12,880 --> 00:33:15,120
and said you know grip out the

983
00:33:15,120 --> 00:33:17,200
last bits of the secret keys and they

984
00:33:17,200 --> 00:33:18,000
went

985
00:33:18,000 --> 00:33:19,840
oh bother because it turns out this

986
00:33:19,840 --> 00:33:20,960
wasn't just one team this was their

987
00:33:20,960 --> 00:33:23,279
entire platform across all of their

988
00:33:23,279 --> 00:33:25,519
environments for every dev team turns

989
00:33:25,519 --> 00:33:27,279
out that they could all just dump the

990
00:33:27,279 --> 00:33:29,600
aws keys what makes this even better is

991
00:33:29,600 --> 00:33:31,760
because terraform's automation based and

992
00:33:31,760 --> 00:33:32,799
so on

993
00:33:32,799 --> 00:33:34,399
their next argument was well we'd rotate

994
00:33:34,399 --> 00:33:35,840
the keys every hour

995
00:33:35,840 --> 00:33:36,960
because we don't need them to be

996
00:33:36,960 --> 00:33:38,080
long-lived because we're not using them

997
00:33:38,080 --> 00:33:40,159
all the time

998
00:33:40,159 --> 00:33:42,080
well github actions has this really our

999
00:33:42,080 --> 00:33:43,519
circle ci has this really nice thing

1000
00:33:43,519 --> 00:33:45,919
where you can run jobs on a schedule

1001
00:33:45,919 --> 00:33:47,679
and they rotated the keys at five past

1002
00:33:47,679 --> 00:33:48,720
the hour

1003
00:33:48,720 --> 00:33:50,799
so at seven minutes past the hour we

1004
00:33:50,799 --> 00:33:52,480
wrote a job that just called out a slack

1005
00:33:52,480 --> 00:33:55,600
web hook and sent us their new keys

1006
00:33:55,600 --> 00:33:57,840
again not very happy with us after that

1007
00:33:57,840 --> 00:33:59,760
one that was quite fun

1008
00:33:59,760 --> 00:34:01,279
you can probably kill that now save some

1009
00:34:01,279 --> 00:34:03,760
bandwidth

1010
00:34:04,240 --> 00:34:06,880
so yeah um

1011
00:34:06,880 --> 00:34:08,320
basically there's a few different points

1012
00:34:08,320 --> 00:34:09,679
we could get involved in this and start

1013
00:34:09,679 --> 00:34:12,320
attacking a pipeline

1014
00:34:12,320 --> 00:34:14,079
most of them tend to have started with

1015
00:34:14,079 --> 00:34:15,679
we've got some form of access either

1016
00:34:15,679 --> 00:34:16,960
because the customer gave us it or we

1017
00:34:16,960 --> 00:34:18,560
compromised someone

1018
00:34:18,560 --> 00:34:21,119
it's kind of difficult

1019
00:34:21,119 --> 00:34:23,280
to stop a day of doing something when

1020
00:34:23,280 --> 00:34:26,079
you're automating to this level

1021
00:34:26,079 --> 00:34:27,918
the solution for this customer in this

1022
00:34:27,918 --> 00:34:29,199
case was actually to break out a

1023
00:34:29,199 --> 00:34:30,639
separate repo

1024
00:34:30,639 --> 00:34:32,159
and so rather than saying right we're

1025
00:34:32,159 --> 00:34:33,440
going to use branches as the trust

1026
00:34:33,440 --> 00:34:34,800
boundary

1027
00:34:34,800 --> 00:34:36,079
they ended up writing some extra

1028
00:34:36,079 --> 00:34:38,000
automation that said right when an admin

1029
00:34:38,000 --> 00:34:40,159
a trusted admin wants to do something

1030
00:34:40,159 --> 00:34:42,719
we'll explicitly clone the

1031
00:34:42,719 --> 00:34:44,320
repo that only the debt have access to

1032
00:34:44,320 --> 00:34:46,320
that only works in dev we'll clone that

1033
00:34:46,320 --> 00:34:48,159
in because i don't believe at the time

1034
00:34:48,159 --> 00:34:50,239
circle ci actually let you provide any

1035
00:34:50,239 --> 00:34:51,599
other restrictions than this it was

1036
00:34:51,599 --> 00:34:52,960
literally

1037
00:34:52,960 --> 00:34:55,040
the circle ci config file had to be in

1038
00:34:55,040 --> 00:34:56,960
the repo devs had to have access to it

1039
00:34:56,960 --> 00:34:58,800
so they had to provide separation some

1040
00:34:58,800 --> 00:35:00,320
other way

1041
00:35:00,320 --> 00:35:03,440
so that was fun

1042
00:35:03,440 --> 00:35:05,040
this uh

1043
00:35:05,040 --> 00:35:06,720
i think i put in just in case my vpn

1044
00:35:06,720 --> 00:35:08,640
fails this is just to show roughly what

1045
00:35:08,640 --> 00:35:10,400
the commands are going to look like when

1046
00:35:10,400 --> 00:35:12,560
we are doing some attacky things

1047
00:35:12,560 --> 00:35:14,400
so let's see if i can actually demo

1048
00:35:14,400 --> 00:35:18,079
these a bit more nicely

1049
00:35:18,160 --> 00:35:19,680
what i've got here you'll notice i've

1050
00:35:19,680 --> 00:35:22,000
got a stage called hacks in my pipeline

1051
00:35:22,000 --> 00:35:24,800
and if this works

1052
00:35:24,800 --> 00:35:27,520
i've written a few just very very basic

1053
00:35:27,520 --> 00:35:30,240
this isn't doing anything fancy

1054
00:35:30,240 --> 00:35:31,760
basically in this one what i'm doing is

1055
00:35:31,760 --> 00:35:34,800
just saying great aws from printing so

1056
00:35:34,800 --> 00:35:36,320
if you get into a

1057
00:35:36,320 --> 00:35:37,359
repo and it looks like there's some

1058
00:35:37,359 --> 00:35:39,359
pipeline stuff happening if you've got

1059
00:35:39,359 --> 00:35:40,880
access to the logs

1060
00:35:40,880 --> 00:35:43,359
because some developers do some our back

1061
00:35:43,359 --> 00:35:45,440
configs don't let you have access if you

1062
00:35:45,440 --> 00:35:46,720
can view the job logs then it's dead

1063
00:35:46,720 --> 00:35:49,599
easy printing is brilliant

1064
00:35:49,599 --> 00:35:52,240
gitlab has this really handy thing where

1065
00:35:52,240 --> 00:35:53,839
you can say this is a sensitive value

1066
00:35:53,839 --> 00:35:55,440
don't print out so it'll show up as a

1067
00:35:55,440 --> 00:35:57,520
redacted in the logs

1068
00:35:57,520 --> 00:36:00,720
that's a regex at a print time

1069
00:36:00,720 --> 00:36:01,920
so it turns out if you just pipe your

1070
00:36:01,920 --> 00:36:04,000
command into base64 it doesn't get

1071
00:36:04,000 --> 00:36:05,200
redacted

1072
00:36:05,200 --> 00:36:06,800
so you know obviously it doesn't match

1073
00:36:06,800 --> 00:36:08,400
the reg expert aws key anymore so it's

1074
00:36:08,400 --> 00:36:10,800
not an aws key so copy paste base64

1075
00:36:10,800 --> 00:36:13,359
decode jobs again

1076
00:36:13,359 --> 00:36:13,990
um

1077
00:36:13,990 --> 00:36:15,599
[Music]

1078
00:36:15,599 --> 00:36:17,119
if you don't have access to the logs

1079
00:36:17,119 --> 00:36:18,560
directly this is a little bit more

1080
00:36:18,560 --> 00:36:20,800
awkward obviously there's probably going

1081
00:36:20,800 --> 00:36:23,119
to be something you can do so

1082
00:36:23,119 --> 00:36:24,240
we did a couple of jobs where we

1083
00:36:24,240 --> 00:36:25,200
actually didn't know where the build

1084
00:36:25,200 --> 00:36:26,560
environment was running we couldn't see

1085
00:36:26,560 --> 00:36:28,000
any logs we just knew that the job was

1086
00:36:28,000 --> 00:36:29,839
passing or failing

1087
00:36:29,839 --> 00:36:31,760
that's where things like web hooks come

1088
00:36:31,760 --> 00:36:35,280
in handy or dns fill my favorite one is

1089
00:36:35,280 --> 00:36:37,200
slack or discord

1090
00:36:37,200 --> 00:36:39,200
or teams because the number of people

1091
00:36:39,200 --> 00:36:40,880
who are using a githubs-based approach

1092
00:36:40,880 --> 00:36:41,920
these days

1093
00:36:41,920 --> 00:36:44,079
where if a build pipeline passes or

1094
00:36:44,079 --> 00:36:46,320
fails you get told in slack

1095
00:36:46,320 --> 00:36:48,400
which means you need to have whitelisted

1096
00:36:48,400 --> 00:36:51,040
slack.com in your firewalls so i just

1097
00:36:51,040 --> 00:36:52,800
make my own slack workspace and then

1098
00:36:52,800 --> 00:36:55,440
have a listener that says hey you

1099
00:36:55,440 --> 00:36:57,680
you've got this data it's been retrieved

1100
00:36:57,680 --> 00:36:59,839
good job

1101
00:36:59,839 --> 00:37:02,240
dns also works so sub domain lookups if

1102
00:37:02,240 --> 00:37:03,760
you've got dns server you control any of

1103
00:37:03,760 --> 00:37:05,839
your traditional i want to get data out

1104
00:37:05,839 --> 00:37:08,000
past the firewall options are there it

1105
00:37:08,000 --> 00:37:09,119
might just take a while to work out

1106
00:37:09,119 --> 00:37:11,520
which one works

1107
00:37:11,520 --> 00:37:14,079
and then

1108
00:37:14,320 --> 00:37:18,240
i also have a demo quickly of the

1109
00:37:18,240 --> 00:37:20,560
so this again i apologize for showing

1110
00:37:20,560 --> 00:37:23,119
you all a massive base64 data

1111
00:37:23,119 --> 00:37:25,839
that is our kubernetes service account

1112
00:37:25,839 --> 00:37:28,720
token so if you take that data and um

1113
00:37:28,720 --> 00:37:31,440
decode it it's basically jwt so the

1114
00:37:31,440 --> 00:37:33,119
command around there was the cat var run

1115
00:37:33,119 --> 00:37:34,720
secrets kubernetes io service account

1116
00:37:34,720 --> 00:37:36,560
token

1117
00:37:36,560 --> 00:37:40,000
i have made this cluster admin on my um

1118
00:37:40,000 --> 00:37:41,760
my environment what i've got is cube ctl

1119
00:37:41,760 --> 00:37:43,839
off can i at the end here

1120
00:37:43,839 --> 00:37:45,200
and just list everything i'm allowed to

1121
00:37:45,200 --> 00:37:48,000
do so i've got star.star

1122
00:37:48,000 --> 00:37:49,680
obviously that's for demo purposes but

1123
00:37:49,680 --> 00:37:52,000
you would be amazed how often we see

1124
00:37:52,000 --> 00:37:54,240
people who have provided

1125
00:37:54,240 --> 00:37:56,079
things like the group system service

1126
00:37:56,079 --> 00:37:57,839
accounting kubernetes just cluster admin

1127
00:37:57,839 --> 00:37:58,880
access

1128
00:37:58,880 --> 00:38:00,079
or

1129
00:38:00,079 --> 00:38:01,520
there's a couple of

1130
00:38:01,520 --> 00:38:03,760
installers on github for various data

1131
00:38:03,760 --> 00:38:06,560
mining type things that just add in our

1132
00:38:06,560 --> 00:38:07,839
back when you install them that says

1133
00:38:07,839 --> 00:38:10,720
make the default service account have um

1134
00:38:10,720 --> 00:38:12,400
have cluster admin which is really

1135
00:38:12,400 --> 00:38:13,760
stupid and a lot of people don't notice

1136
00:38:13,760 --> 00:38:15,440
that it's a thing i've got a couple of

1137
00:38:15,440 --> 00:38:16,800
outstanding github issues that say this

1138
00:38:16,800 --> 00:38:18,640
is this is bad don't do this and they've

1139
00:38:18,640 --> 00:38:19,760
been ignored

1140
00:38:19,760 --> 00:38:21,440
and again if you were speaking to me in

1141
00:38:21,440 --> 00:38:22,720
the pub last night you might know that i

1142
00:38:22,720 --> 00:38:25,440
despise the kubernetes are back model

1143
00:38:25,440 --> 00:38:27,520
because there's no deny option so if

1144
00:38:27,520 --> 00:38:28,960
you've got the most fine-grained

1145
00:38:28,960 --> 00:38:30,800
well-defined r back in the world and

1146
00:38:30,800 --> 00:38:32,800
someone else creates something that says

1147
00:38:32,800 --> 00:38:35,440
system authenticated has cluster admin

1148
00:38:35,440 --> 00:38:36,720
that's the rule that gets matched

1149
00:38:36,720 --> 00:38:38,960
there's no way of saying no i don't care

1150
00:38:38,960 --> 00:38:40,160
what they're allowed to say this is a

1151
00:38:40,160 --> 00:38:42,000
denial that just can't be done

1152
00:38:42,000 --> 00:38:44,480
so it's fairly easy to mess up again i

1153
00:38:44,480 --> 00:38:47,440
suspect this was set up for

1154
00:38:47,440 --> 00:38:48,480
um

1155
00:38:48,480 --> 00:38:49,839
a customer who wanted to say oh it just

1156
00:38:49,839 --> 00:38:51,280
works if we make an admin so let's make

1157
00:38:51,280 --> 00:38:52,880
it admin

1158
00:38:52,880 --> 00:38:54,880
at this point if i grab that token i can

1159
00:38:54,880 --> 00:38:57,040
run commands on the cluster as cluster

1160
00:38:57,040 --> 00:38:59,119
admin i could be

1161
00:38:59,119 --> 00:39:00,640
compromising production environments

1162
00:39:00,640 --> 00:39:02,400
build environments

1163
00:39:02,400 --> 00:39:04,079
i've got admin on your build environment

1164
00:39:04,079 --> 00:39:07,359
you know good luck have fun

1165
00:39:10,720 --> 00:39:12,800
so common themes in these attacks

1166
00:39:12,800 --> 00:39:15,119
this is where people get confused and

1167
00:39:15,119 --> 00:39:18,480
forget about security principles i think

1168
00:39:18,480 --> 00:39:19,839
a pipeline

1169
00:39:19,839 --> 00:39:22,079
is remote code execution as a service

1170
00:39:22,079 --> 00:39:24,320
that's literally all is you feed in code

1171
00:39:24,320 --> 00:39:27,119
the code gets run

1172
00:39:27,200 --> 00:39:28,880
any of the components should be treated

1173
00:39:28,880 --> 00:39:31,200
the same as any other device on your

1174
00:39:31,200 --> 00:39:33,440
network and for some reason they aren't

1175
00:39:33,440 --> 00:39:35,359
so network segmentation you probably

1176
00:39:35,359 --> 00:39:36,960
noticed a couple of times in this that

1177
00:39:36,960 --> 00:39:38,400
was a fairly big failing on the

1178
00:39:38,400 --> 00:39:40,839
customers parts

1179
00:39:40,839 --> 00:39:43,359
um why can you build pipeline talk out

1180
00:39:43,359 --> 00:39:44,880
to the entire internet

1181
00:39:44,880 --> 00:39:46,480
the

1182
00:39:46,480 --> 00:39:48,560
firewalling is just the same it's still

1183
00:39:48,560 --> 00:39:50,240
servers running something if you're in

1184
00:39:50,240 --> 00:39:52,800
the cloud access to uh cloud metadata is

1185
00:39:52,800 --> 00:39:55,200
always a fun one to to forget to block

1186
00:39:55,200 --> 00:39:56,960
so i've seen instances where people have

1187
00:39:56,960 --> 00:39:59,520
an ec2 running that has

1188
00:39:59,520 --> 00:40:01,440
ridiculously privileged ion permissions

1189
00:40:01,440 --> 00:40:03,680
so you can just say right well as part

1190
00:40:03,680 --> 00:40:04,960
of my pipeline i'm going to curl the one

1191
00:40:04,960 --> 00:40:06,319
six nine two five four one six nine two

1192
00:40:06,319 --> 00:40:08,240
five four address grab credentials

1193
00:40:08,240 --> 00:40:10,400
authenticate to aws ransack your

1194
00:40:10,400 --> 00:40:11,680
environment

1195
00:40:11,680 --> 00:40:14,800
cluster control planes so

1196
00:40:14,800 --> 00:40:16,079
you can block

1197
00:40:16,079 --> 00:40:17,680
kubernetes pods from being able to talk

1198
00:40:17,680 --> 00:40:19,040
to the kubernetes api server through

1199
00:40:19,040 --> 00:40:20,960
network policy no one ever does it's a

1200
00:40:20,960 --> 00:40:23,440
really good idea to do that and just

1201
00:40:23,440 --> 00:40:25,520
general firewalling very first example

1202
00:40:25,520 --> 00:40:26,880
where the build environment could reach

1203
00:40:26,880 --> 00:40:28,560
out to the devs laptop and retrieve

1204
00:40:28,560 --> 00:40:30,319
things it had no reason to do that

1205
00:40:30,319 --> 00:40:31,839
because the theory was that you'd have

1206
00:40:31,839 --> 00:40:33,599
everything uploaded to the customer's

1207
00:40:33,599 --> 00:40:34,800
artifactory

1208
00:40:34,800 --> 00:40:37,200
or to the build pipeline itself

1209
00:40:37,200 --> 00:40:38,880
so firewalling

1210
00:40:38,880 --> 00:40:41,520
super important really good idea don't

1211
00:40:41,520 --> 00:40:43,200
forget about that

1212
00:40:43,200 --> 00:40:45,119
um component breakout is another one

1213
00:40:45,119 --> 00:40:46,240
i've not spoken about container

1214
00:40:46,240 --> 00:40:48,000
breakouts because i kind of wanted to

1215
00:40:48,000 --> 00:40:50,240
avoid gold creep

1216
00:40:50,240 --> 00:40:53,119
a lot of ci environments say if you want

1217
00:40:53,119 --> 00:40:54,480
this to work nicely and you want to be

1218
00:40:54,480 --> 00:40:56,560
able to run docker stuff just enable

1219
00:40:56,560 --> 00:40:59,359
docker and docker

1220
00:40:59,359 --> 00:41:00,800
so docker and docker is really cool

1221
00:41:00,800 --> 00:41:02,160
because it does exactly what it says on

1222
00:41:02,160 --> 00:41:04,400
the tin but unfortunately it requires

1223
00:41:04,400 --> 00:41:06,480
you to run a privileged container

1224
00:41:06,480 --> 00:41:08,960
if anyone was let mary's talk earlier

1225
00:41:08,960 --> 00:41:10,640
um you probably know

1226
00:41:10,640 --> 00:41:11,839
privileged containers are not a great

1227
00:41:11,839 --> 00:41:13,359
idea

1228
00:41:13,359 --> 00:41:14,720
if i've got a privileged container

1229
00:41:14,720 --> 00:41:16,240
breaking out is trivial and i can just

1230
00:41:16,240 --> 00:41:17,920
get roots on the host so if you're on

1231
00:41:17,920 --> 00:41:19,280
docker and docker to spin up your

1232
00:41:19,280 --> 00:41:20,400
containers

1233
00:41:20,400 --> 00:41:22,160
and build new containers then the

1234
00:41:22,160 --> 00:41:24,160
chances are someone who gets into that

1235
00:41:24,160 --> 00:41:25,680
container can break out compromise the

1236
00:41:25,680 --> 00:41:26,640
host

1237
00:41:26,640 --> 00:41:28,480
we see dash dash privileged use all the

1238
00:41:28,480 --> 00:41:29,599
time

1239
00:41:29,599 --> 00:41:32,640
again not brilliant idea

1240
00:41:32,640 --> 00:41:34,000
there are projects out there to fix this

1241
00:41:34,000 --> 00:41:35,280
so there's things like canonical for

1242
00:41:35,280 --> 00:41:37,280
doing docker building without requiring

1243
00:41:37,280 --> 00:41:39,760
like access to docker directly so there

1244
00:41:39,760 --> 00:41:40,960
are options out there but a lot of the

1245
00:41:40,960 --> 00:41:43,359
times the happy path is just

1246
00:41:43,359 --> 00:41:45,119
just map this privilege and it'll be

1247
00:41:45,119 --> 00:41:48,000
it'll be fine we'll have things running

1248
00:41:48,000 --> 00:41:49,920
and same vms being used for multiple

1249
00:41:49,920 --> 00:41:51,599
projects if you've got anything

1250
00:41:51,599 --> 00:41:53,680
sensitive probably a good idea to put

1251
00:41:53,680 --> 00:41:55,200
zone runners in

1252
00:41:55,200 --> 00:41:56,560
so if you've got like

1253
00:41:56,560 --> 00:41:58,240
these are my apis i don't care about but

1254
00:41:58,240 --> 00:41:59,520
also this is the one that controls the

1255
00:41:59,520 --> 00:42:01,599
master log in for all my customer data

1256
00:42:01,599 --> 00:42:03,680
should probably not be building them on

1257
00:42:03,680 --> 00:42:05,280
the same environment just in case there

1258
00:42:05,280 --> 00:42:06,720
is a breakout

1259
00:42:06,720 --> 00:42:08,400
but again that becomes a cost decision

1260
00:42:08,400 --> 00:42:10,079
is it cheaper to do all in one

1261
00:42:10,079 --> 00:42:12,079
environment yes is there an extra risk

1262
00:42:12,079 --> 00:42:14,480
definitely yes a lot of customers come

1263
00:42:14,480 --> 00:42:15,680
down on the side of let's do what's

1264
00:42:15,680 --> 00:42:17,839
cheaper

1265
00:42:18,000 --> 00:42:20,160
our back misconfigurations i've spoken

1266
00:42:20,160 --> 00:42:21,200
about these enough i think you're

1267
00:42:21,200 --> 00:42:23,359
probably fed up kubernetes are back

1268
00:42:23,359 --> 00:42:25,200
cloud i am

1269
00:42:25,200 --> 00:42:27,119
probably uh

1270
00:42:27,119 --> 00:42:28,640
important to keep them locked down again

1271
00:42:28,640 --> 00:42:29,839
the principle of least privilege still

1272
00:42:29,839 --> 00:42:32,240
applies to everything

1273
00:42:32,240 --> 00:42:34,319
just work out does this build

1274
00:42:34,319 --> 00:42:35,760
environment really need all of the

1275
00:42:35,760 --> 00:42:37,680
permissions i'm giving it or can i give

1276
00:42:37,680 --> 00:42:40,720
it a subset

1277
00:42:40,880 --> 00:42:43,200
a good example of that actually is

1278
00:42:43,200 --> 00:42:45,599
terraform i've yet to find a good way of

1279
00:42:45,599 --> 00:42:48,160
saying i've got this terraform code i

1280
00:42:48,160 --> 00:42:50,079
want to know what permissions my role

1281
00:42:50,079 --> 00:42:51,839
that's going to run as actually needs so

1282
00:42:51,839 --> 00:42:53,680
my example there all it needs access to

1283
00:42:53,680 --> 00:42:56,000
is s3 and lambda

1284
00:42:56,000 --> 00:42:57,839
an api gateway it doesn't need access to

1285
00:42:57,839 --> 00:42:59,280
everything but when i was trying to

1286
00:42:59,280 --> 00:43:01,280
build this i uh i'm very glad that i

1287
00:43:01,280 --> 00:43:02,560
didn't accidentally create my secret

1288
00:43:02,560 --> 00:43:04,079
keys because i just went right this is

1289
00:43:04,079 --> 00:43:07,520
going to be aws admin because it works

1290
00:43:07,520 --> 00:43:09,200
if anyone knows of a tool that will say

1291
00:43:09,200 --> 00:43:10,960
here's some terraform i'll work out what

1292
00:43:10,960 --> 00:43:12,800
deploy permissions you need please let

1293
00:43:12,800 --> 00:43:14,319
me know because i'd really like to see

1294
00:43:14,319 --> 00:43:15,280
one

1295
00:43:15,280 --> 00:43:17,839
um and yeah cloud kubernetes the whole

1296
00:43:17,839 --> 00:43:20,000
whatever your relevant compute is you're

1297
00:43:20,000 --> 00:43:23,359
going to have some permissions somewhere

1298
00:43:24,240 --> 00:43:26,000
so in terms of defending pipelines what

1299
00:43:26,000 --> 00:43:27,520
can you do

1300
00:43:27,520 --> 00:43:29,119
firewalling you probably guessed i was

1301
00:43:29,119 --> 00:43:30,800
going to say this definitely limit

1302
00:43:30,800 --> 00:43:33,119
egress to only what's needed

1303
00:43:33,119 --> 00:43:34,720
especially with all the supply chain

1304
00:43:34,720 --> 00:43:36,079
issues that are going on at the moment

1305
00:43:36,079 --> 00:43:38,079
and i mean the security ones not that i

1306
00:43:38,079 --> 00:43:42,560
can't buy a car for seven months once um

1307
00:43:42,720 --> 00:43:44,000
the chances are you probably don't need

1308
00:43:44,000 --> 00:43:45,599
to be going and getting dependencies

1309
00:43:45,599 --> 00:43:46,720
every time you build something you

1310
00:43:46,720 --> 00:43:48,480
should be mirroring them internally so

1311
00:43:48,480 --> 00:43:50,880
have an artifactory have a an sftp

1312
00:43:50,880 --> 00:43:53,040
server have whatever you want

1313
00:43:53,040 --> 00:43:54,640
make sure your dependencies are

1314
00:43:54,640 --> 00:43:56,000
somewhere

1315
00:43:56,000 --> 00:43:58,319
local again this has the double benefit

1316
00:43:58,319 --> 00:44:00,319
of if they're local the chance of them

1317
00:44:00,319 --> 00:44:02,640
being modified by someone else are lower

1318
00:44:02,640 --> 00:44:04,079
so the odds are you've probably got

1319
00:44:04,079 --> 00:44:05,680
better control over your dependencies

1320
00:44:05,680 --> 00:44:07,599
and you've not got like

1321
00:44:07,599 --> 00:44:09,280
things like was it the pad left thing in

1322
00:44:09,280 --> 00:44:11,359
node where some developer got really

1323
00:44:11,359 --> 00:44:12,800
angry and broke something that was used

1324
00:44:12,800 --> 00:44:14,880
by about 18 million node libraries and

1325
00:44:14,880 --> 00:44:16,560
they all just stopped working there was

1326
00:44:16,560 --> 00:44:18,880
one recently in aws as well i think

1327
00:44:18,880 --> 00:44:21,920
so the aws cdk stopped working because

1328
00:44:21,920 --> 00:44:23,599
it was node based and someone changed

1329
00:44:23,599 --> 00:44:25,280
the dependency upstream and just no one

1330
00:44:25,280 --> 00:44:27,760
could build aws stuff anymore

1331
00:44:27,760 --> 00:44:29,920
so yeah firewalls restrict access

1332
00:44:29,920 --> 00:44:31,280
between your build environments restrict

1333
00:44:31,280 --> 00:44:33,599
access to the internet don't let your

1334
00:44:33,599 --> 00:44:35,440
build environment talk around to your

1335
00:44:35,440 --> 00:44:38,880
active directory or places like that

1336
00:44:38,880 --> 00:44:41,040
limited permissions work out

1337
00:44:41,040 --> 00:44:42,640
what permissions does each component

1338
00:44:42,640 --> 00:44:43,839
really need

1339
00:44:43,839 --> 00:44:45,839
if you need to deploy an image into a

1340
00:44:45,839 --> 00:44:47,920
container registry can you do our back

1341
00:44:47,920 --> 00:44:49,440
on a per image basis so instead of

1342
00:44:49,440 --> 00:44:51,040
saying oh i can write any image i want

1343
00:44:51,040 --> 00:44:53,119
to anywhere in this registry

1344
00:44:53,119 --> 00:44:55,520
only allow the build component for your

1345
00:44:55,520 --> 00:44:57,680
phone number api to deploy the phone

1346
00:44:57,680 --> 00:44:59,040
number image rather than saying

1347
00:44:59,040 --> 00:45:00,319
everything

1348
00:45:00,319 --> 00:45:01,520
and

1349
00:45:01,520 --> 00:45:03,760
sit down and work out what

1350
00:45:03,760 --> 00:45:05,280
the blast radius of something being

1351
00:45:05,280 --> 00:45:07,680
compromised would actually be

1352
00:45:07,680 --> 00:45:09,359
what permissions would an attacker get

1353
00:45:09,359 --> 00:45:11,760
if they compromised something and please

1354
00:45:11,760 --> 00:45:13,359
please please please please don't use

1355
00:45:13,359 --> 00:45:15,040
privileged containers because we see

1356
00:45:15,040 --> 00:45:16,800
this all the time and i know it makes

1357
00:45:16,800 --> 00:45:18,640
things work but also it's just a really

1358
00:45:18,640 --> 00:45:20,720
bad idea like don't give all your devs

1359
00:45:20,720 --> 00:45:22,640
roots on every single server you run

1360
00:45:22,640 --> 00:45:25,440
that's just not great

1361
00:45:25,440 --> 00:45:27,200
and threat modeling threat modeling is

1362
00:45:27,200 --> 00:45:29,440
something i think is super important

1363
00:45:29,440 --> 00:45:30,880
when you're building out pipelines and

1364
00:45:30,880 --> 00:45:32,400
really overlooked because people want to

1365
00:45:32,400 --> 00:45:34,000
move faster they want to be able to

1366
00:45:34,000 --> 00:45:35,200
deploy code faster they don't want to

1367
00:45:35,200 --> 00:45:36,800
sit down and work out how this could go

1368
00:45:36,800 --> 00:45:38,960
wrong they just want code

1369
00:45:38,960 --> 00:45:40,480
so work out where an attacker can come

1370
00:45:40,480 --> 00:45:42,000
from are you talking about external

1371
00:45:42,000 --> 00:45:44,400
dependencies internal code are you

1372
00:45:44,400 --> 00:45:46,160
worried about a malicious insider what's

1373
00:45:46,160 --> 00:45:48,000
your approvals process like to get code

1374
00:45:48,000 --> 00:45:49,599
into the pipeline

1375
00:45:49,599 --> 00:45:51,440
what components can they talk to if

1376
00:45:51,440 --> 00:45:54,400
you're using ec2s can they talk to

1377
00:45:54,400 --> 00:45:56,880
the wider cloud platform can they scan

1378
00:45:56,880 --> 00:45:58,800
around your environment can they talk to

1379
00:45:58,800 --> 00:46:01,520
active directory again we sometimes see

1380
00:46:01,520 --> 00:46:02,960
active directory credentials being used

1381
00:46:02,960 --> 00:46:04,880
to retrieve things from file shares but

1382
00:46:04,880 --> 00:46:08,079
those credits are excessively privileged

1383
00:46:08,079 --> 00:46:09,440
and what further access would an

1384
00:46:09,440 --> 00:46:11,520
attacker gain by being in the pipeline

1385
00:46:11,520 --> 00:46:13,599
somewhere chances are as a minimum if an

1386
00:46:13,599 --> 00:46:14,720
attacker is in a pipeline that's

1387
00:46:14,720 --> 00:46:16,400
building something they're going to be

1388
00:46:16,400 --> 00:46:17,599
able to modify the thing that's coming

1389
00:46:17,599 --> 00:46:18,960
out the other end

1390
00:46:18,960 --> 00:46:20,960
at the very least make sure that that's

1391
00:46:20,960 --> 00:46:22,480
the most they can do try and make sure

1392
00:46:22,480 --> 00:46:24,480
they've not got your entire environment

1393
00:46:24,480 --> 00:46:27,040
compromised

1394
00:46:27,040 --> 00:46:28,240
and this is a quick one this isn't

1395
00:46:28,240 --> 00:46:29,920
really for defending your pipelines

1396
00:46:29,920 --> 00:46:30,960
image signing is something that's

1397
00:46:30,960 --> 00:46:32,800
getting spoken about an awful lot cosine

1398
00:46:32,800 --> 00:46:35,040
seems to be being used everywhere

1399
00:46:35,040 --> 00:46:36,640
i love the idea of being able to sign

1400
00:46:36,640 --> 00:46:38,640
all of your dependencies

1401
00:46:38,640 --> 00:46:40,160
but if i've compromised your pipeline

1402
00:46:40,160 --> 00:46:41,520
that automatically signs things you have

1403
00:46:41,520 --> 00:46:43,520
to sign my malware for me

1404
00:46:43,520 --> 00:46:44,480
so

1405
00:46:44,480 --> 00:46:46,000
image signing is great for saying the

1406
00:46:46,000 --> 00:46:47,200
thing that came out of the pipeline

1407
00:46:47,200 --> 00:46:49,119
versus the thing that's being deployed

1408
00:46:49,119 --> 00:46:50,319
are the same

1409
00:46:50,319 --> 00:46:52,720
but what it doesn't do is confirm that

1410
00:46:52,720 --> 00:46:53,839
the thing that came out the pipeline is

1411
00:46:53,839 --> 00:46:56,160
doing what you think it's doing so again

1412
00:46:56,160 --> 00:46:57,839
testing auditing

1413
00:46:57,839 --> 00:46:59,599
access controls making sure that you

1414
00:46:59,599 --> 00:47:01,040
know what your pipelines are doing and

1415
00:47:01,040 --> 00:47:02,640
jobs are logged

1416
00:47:02,640 --> 00:47:05,440
is super important and i think

1417
00:47:05,440 --> 00:47:06,880
i don't have a slide on logs basically

1418
00:47:06,880 --> 00:47:09,280
log stuff as well log as much as you can

1419
00:47:09,280 --> 00:47:11,680
without making it excessive and just

1420
00:47:11,680 --> 00:47:13,119
generating a million alerts for your

1421
00:47:13,119 --> 00:47:15,359
purse

1422
00:47:15,359 --> 00:47:17,839
so quick conclusion

1423
00:47:17,839 --> 00:47:19,520
pipelines are privileged they have to be

1424
00:47:19,520 --> 00:47:21,599
pipelines can deploy stuff for you and

1425
00:47:21,599 --> 00:47:22,839
you want that to

1426
00:47:22,839 --> 00:47:24,960
happen you need to lock them down as

1427
00:47:24,960 --> 00:47:26,400
much as you can to make sure the things

1428
00:47:26,400 --> 00:47:28,640
being deployed are only what you want

1429
00:47:28,640 --> 00:47:32,160
and not entire estate compromise

1430
00:47:32,160 --> 00:47:34,079
audit your pipelines if you've got dev

1431
00:47:34,079 --> 00:47:35,760
who likes just pushing the limits get

1432
00:47:35,760 --> 00:47:37,280
them to sit down and just work out what

1433
00:47:37,280 --> 00:47:38,640
they can actually do let's face it

1434
00:47:38,640 --> 00:47:40,079
that's how a lot pentester started

1435
00:47:40,079 --> 00:47:40,960
because

1436
00:47:40,960 --> 00:47:42,319
some people have that itch that goes

1437
00:47:42,319 --> 00:47:43,680
what does this button do it better not

1438
00:47:43,680 --> 00:47:45,119
press it but some people go what does

1439
00:47:45,119 --> 00:47:46,160
this do i'm going to press it until

1440
00:47:46,160 --> 00:47:47,839
something catches fire

1441
00:47:47,839 --> 00:47:49,520
find the button pressers and get them to

1442
00:47:49,520 --> 00:47:51,599
try and break out with pipelines

1443
00:47:51,599 --> 00:47:53,359
and then make sure you actually fix what

1444
00:47:53,359 --> 00:47:55,040
they do

1445
00:47:55,040 --> 00:47:57,839
yeah isolation lock stuff down the usual

1446
00:47:57,839 --> 00:47:59,520
it's the same as running

1447
00:47:59,520 --> 00:48:02,880
any other system make sure that your

1448
00:48:02,880 --> 00:48:04,240
your permissions that you're giving to

1449
00:48:04,240 --> 00:48:07,440
something are only what it needs

1450
00:48:07,440 --> 00:48:09,599
so that was that that's been 50 minutes

1451
00:48:09,599 --> 00:48:11,119
which isn't bad

1452
00:48:11,119 --> 00:48:12,640
any questions if you don't want to shout

1453
00:48:12,640 --> 00:48:15,440
them out now i'm on twitter i'm on email

1454
00:48:15,440 --> 00:48:17,359
i'll be in the pub later

1455
00:48:17,359 --> 00:48:20,680
any questions

1456
00:48:31,920 --> 00:48:33,280
[Music]

1457
00:48:33,280 --> 00:48:35,839
around

1458
00:48:58,960 --> 00:49:01,520
how do you manage

1459
00:49:01,520 --> 00:49:04,690
[Music]

1460
00:49:12,400 --> 00:49:15,400
is

1461
00:49:16,000 --> 00:49:18,720
be able to ensure that deaf people are

1462
00:49:18,720 --> 00:49:22,240
compliant with change management process

1463
00:49:22,240 --> 00:49:24,079
since they have access to

1464
00:49:24,079 --> 00:49:26,240
pcic

1465
00:49:26,240 --> 00:49:29,040
so what is the best approach

1466
00:49:29,040 --> 00:49:31,839
then finally

1467
00:49:31,920 --> 00:49:33,119
is there

1468
00:49:33,119 --> 00:49:35,520
a better way

1469
00:49:35,520 --> 00:49:36,480
for

1470
00:49:36,480 --> 00:49:38,800
the security team to be able to know

1471
00:49:38,800 --> 00:49:40,559
exactly

1472
00:49:40,559 --> 00:49:41,599
when

1473
00:49:41,599 --> 00:49:42,839
there is an

1474
00:49:42,839 --> 00:49:45,280
inconsistency in the background

1475
00:49:45,280 --> 00:49:47,599
you know more or less like

1476
00:49:47,599 --> 00:49:50,079
timely

1477
00:49:50,079 --> 00:49:52,480
information has to

1478
00:49:52,480 --> 00:49:54,400
going to know that there is already an

1479
00:49:54,400 --> 00:49:56,640
issue

1480
00:49:56,720 --> 00:49:59,040
so first question was limiting

1481
00:49:59,040 --> 00:50:00,480
permissions through active directory

1482
00:50:00,480 --> 00:50:01,920
single sign-on

1483
00:50:01,920 --> 00:50:05,760
so that one i would say

1484
00:50:05,920 --> 00:50:07,760
at the very least make sure you

1485
00:50:07,760 --> 00:50:10,400
understand when you give a user or a

1486
00:50:10,400 --> 00:50:12,319
group access to a pipeline you know what

1487
00:50:12,319 --> 00:50:14,240
that pipeline can do and again this

1488
00:50:14,240 --> 00:50:15,599
comes back to auditing the pipelines

1489
00:50:15,599 --> 00:50:18,160
themselves the point i was making about

1490
00:50:18,160 --> 00:50:19,520
limiting access to things like active

1491
00:50:19,520 --> 00:50:21,200
directory originally was if you're

1492
00:50:21,200 --> 00:50:24,160
giving secrets to your pipeline to run

1493
00:50:24,160 --> 00:50:25,599
make sure you understand what those

1494
00:50:25,599 --> 00:50:28,319
secrets can access so if a developer can

1495
00:50:28,319 --> 00:50:30,720
access a pipeline that is itself

1496
00:50:30,720 --> 00:50:32,400
domain admin that's an escalation of

1497
00:50:32,400 --> 00:50:34,160
privilege for the developer from a

1498
00:50:34,160 --> 00:50:36,400
single sign-on point of view it kind of

1499
00:50:36,400 --> 00:50:38,000
doesn't matter if you're using gitlab's

1500
00:50:38,000 --> 00:50:39,599
built-in authentication or if you're

1501
00:50:39,599 --> 00:50:41,040
using

1502
00:50:41,040 --> 00:50:44,640
sso it's a case of these devs can make

1503
00:50:44,640 --> 00:50:46,640
this component do a thing

1504
00:50:46,640 --> 00:50:48,960
and understand what that component is

1505
00:50:48,960 --> 00:50:51,040
able to get access to

1506
00:50:51,040 --> 00:50:52,880
generally you should be using something

1507
00:50:52,880 --> 00:50:54,640
like only devs who are actively working

1508
00:50:54,640 --> 00:50:56,319
on a project can make commits to that

1509
00:50:56,319 --> 00:50:57,920
project repo rather than the entire

1510
00:50:57,920 --> 00:51:00,800
organization can

1511
00:51:01,359 --> 00:51:03,440
i think

1512
00:51:03,440 --> 00:51:06,160
that's the best you can do other than

1513
00:51:06,160 --> 00:51:07,760
using commit logs to make sure you know

1514
00:51:07,760 --> 00:51:10,000
who's making a job run

1515
00:51:10,000 --> 00:51:11,920
which again if your sso should feedback

1516
00:51:11,920 --> 00:51:14,000
to say oh it was dave that started off

1517
00:51:14,000 --> 00:51:16,400
and did this commit

1518
00:51:16,400 --> 00:51:18,240
uh what was your second question sorry

1519
00:51:18,240 --> 00:51:20,640
aws

1520
00:51:20,640 --> 00:51:23,760
change management um

1521
00:51:23,760 --> 00:51:25,760
get commit logs

1522
00:51:25,760 --> 00:51:27,760
make sure that you're if you're going as

1523
00:51:27,760 --> 00:51:29,599
far as you want to have commit to be

1524
00:51:29,599 --> 00:51:32,000
signed by a developer with our pgp key

1525
00:51:32,000 --> 00:51:33,200
make sure that all of your commits are

1526
00:51:33,200 --> 00:51:35,680
from a trusted source that will not help

1527
00:51:35,680 --> 00:51:38,160
you if an attacker compromises a laptop

1528
00:51:38,160 --> 00:51:39,599
obviously you can do things like yuba

1529
00:51:39,599 --> 00:51:40,800
keys or some other form of

1530
00:51:40,800 --> 00:51:42,559
authentication to make it harder for an

1531
00:51:42,559 --> 00:51:43,839
attacker

1532
00:51:43,839 --> 00:51:45,200
to

1533
00:51:45,200 --> 00:51:47,119
be able to make the commits one of the

1534
00:51:47,119 --> 00:51:48,960
good things about ci pipelines is they

1535
00:51:48,960 --> 00:51:51,920
generally run off a get environment

1536
00:51:51,920 --> 00:51:54,079
anyway so your change control is kind of

1537
00:51:54,079 --> 00:51:55,440
built in in terms of they need to make a

1538
00:51:55,440 --> 00:51:58,960
commit and change a config file

1539
00:52:01,040 --> 00:52:02,400
i don't know

1540
00:52:02,400 --> 00:52:04,960
i haven't looked into it i will add that

1541
00:52:04,960 --> 00:52:07,280
to the research list

1542
00:52:07,280 --> 00:52:10,710
um and your third question

1543
00:52:10,710 --> 00:52:13,599
[Music]

1544
00:52:13,599 --> 00:52:14,400
yes

1545
00:52:14,400 --> 00:52:16,640
um

1546
00:52:16,640 --> 00:52:19,520
code review can help uh obviously you

1547
00:52:19,520 --> 00:52:21,599
might end up with a somewhat meta stage

1548
00:52:21,599 --> 00:52:22,720
of

1549
00:52:22,720 --> 00:52:24,000
do you want to add something into your

1550
00:52:24,000 --> 00:52:26,720
ci pipeline that actually does checks

1551
00:52:26,720 --> 00:52:28,640
for anything malicious itself

1552
00:52:28,640 --> 00:52:31,920
so you could probably

1553
00:52:31,920 --> 00:52:34,079
you could do things like grep for the

1554
00:52:34,079 --> 00:52:36,800
metadata uri and say

1555
00:52:36,800 --> 00:52:38,800
when any in the the first stage of a

1556
00:52:38,800 --> 00:52:40,640
build you could say if this code is

1557
00:52:40,640 --> 00:52:42,240
going to try and talk to metadata and i

1558
00:52:42,240 --> 00:52:43,359
don't think it should you can do an

1559
00:52:43,359 --> 00:52:46,079
alert and if you've got a kubernetes

1560
00:52:46,079 --> 00:52:48,000
environment that

1561
00:52:48,000 --> 00:52:50,240
when you run a deploy is going to create

1562
00:52:50,240 --> 00:52:52,319
a dangerous role binding you could use a

1563
00:52:52,319 --> 00:52:55,280
tool like uh cubasec to detect that in

1564
00:52:55,280 --> 00:52:56,640
the pipeline

1565
00:52:56,640 --> 00:52:58,720
that's enough to stop someone who

1566
00:52:58,720 --> 00:53:00,000
doesn't understand exactly what

1567
00:53:00,000 --> 00:53:02,559
pipeline's doing but ultimately if the

1568
00:53:02,559 --> 00:53:04,240
developers have the ability to control

1569
00:53:04,240 --> 00:53:06,079
the pipeline they can circumvent those

1570
00:53:06,079 --> 00:53:07,839
checks themselves

1571
00:53:07,839 --> 00:53:08,960
so at that point you really need to

1572
00:53:08,960 --> 00:53:11,760
start looking at

1573
00:53:11,760 --> 00:53:13,680
forgetting about the ci side of things

1574
00:53:13,680 --> 00:53:16,079
and just doing any form of malicious

1575
00:53:16,079 --> 00:53:17,760
detection

1576
00:53:17,760 --> 00:53:19,200
however you normally would in your

1577
00:53:19,200 --> 00:53:20,880
environment so

1578
00:53:20,880 --> 00:53:22,480
if you've got some kind of endpoint

1579
00:53:22,480 --> 00:53:24,240
detection run that on the servers as

1580
00:53:24,240 --> 00:53:25,119
well

1581
00:53:25,119 --> 00:53:27,920
network monitoring firewalling any form

1582
00:53:27,920 --> 00:53:30,400
of audit logs you can ingest obviously

1583
00:53:30,400 --> 00:53:31,920
if you log everything that gets

1584
00:53:31,920 --> 00:53:33,920
prohibitively expensive

1585
00:53:33,920 --> 00:53:37,280
but logging on

1586
00:53:37,599 --> 00:53:40,800
i guess certain commands being run and

1587
00:53:40,800 --> 00:53:42,079
remembering even if you're running

1588
00:53:42,079 --> 00:53:44,319
something in a container or i guess it's

1589
00:53:44,319 --> 00:53:45,520
maybe slightly different if you're using

1590
00:53:45,520 --> 00:53:46,880
managed containers but on-prem

1591
00:53:46,880 --> 00:53:48,240
definitely

1592
00:53:48,240 --> 00:53:50,319
the containers are still just processes

1593
00:53:50,319 --> 00:53:52,480
so you can run your malicious process

1594
00:53:52,480 --> 00:53:54,640
detection in the exact same way in

1595
00:53:54,640 --> 00:53:59,440
kubernetes versus a dev ssh intel box

1596
00:54:00,880 --> 00:54:02,720
i think that would be a hard problem to

1597
00:54:02,720 --> 00:54:05,040
solve categorically inside the pipeline

1598
00:54:05,040 --> 00:54:07,200
itself though and would fall back to

1599
00:54:07,200 --> 00:54:08,240
traditional

1600
00:54:08,240 --> 00:54:09,440
defense

1601
00:54:09,440 --> 00:54:12,720
and kind of blue team activities

1602
00:54:17,040 --> 00:54:20,480
did that kind of answer your question

1603
00:54:20,640 --> 00:54:23,040
kind of

1604
00:54:23,760 --> 00:54:26,720
any other questions

1605
00:54:29,440 --> 00:54:31,040
brilliant thanks very much if you've got

1606
00:54:31,040 --> 00:54:34,680
anything i'll be in the pub

