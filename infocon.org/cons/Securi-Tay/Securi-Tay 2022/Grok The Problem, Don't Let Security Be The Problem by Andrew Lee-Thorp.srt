1
00:00:02,960 --> 00:00:04,400
um

2
00:00:04,400 --> 00:00:07,120
welcome to the graveyard shift

3
00:00:07,120 --> 00:00:09,280
um yeah so that's the title of my talk

4
00:00:09,280 --> 00:00:10,880
can you hear me at the back if i wander

5
00:00:10,880 --> 00:00:15,519
around you still yeah okay great um

6
00:00:15,519 --> 00:00:17,359
a little baba you don't need to know too

7
00:00:17,359 --> 00:00:18,560
much about me

8
00:00:18,560 --> 00:00:19,359
um

9
00:00:19,359 --> 00:00:21,439
i've been around i know a thing or two

10
00:00:21,439 --> 00:00:23,199
about a thing or two

11
00:00:23,199 --> 00:00:25,519
um my my main

12
00:00:25,519 --> 00:00:27,760
i guess my my my preference my main

13
00:00:27,760 --> 00:00:29,199
hobby is to

14
00:00:29,199 --> 00:00:32,479
be fiddling around in cnc plus plus code

15
00:00:32,479 --> 00:00:35,760
hunting for difficult to find bugs

16
00:00:35,760 --> 00:00:36,570
i do a bit of

17
00:00:36,570 --> 00:00:38,160
[Music]

18
00:00:38,160 --> 00:00:39,680
training

19
00:00:39,680 --> 00:00:41,920
facilitating education

20
00:00:41,920 --> 00:00:44,320
and i'm occasional speaker i don't have

21
00:00:44,320 --> 00:00:46,879
any three-letter acronyms or four-letter

22
00:00:46,879 --> 00:00:50,399
acronyms or twitter handles to my name

23
00:00:50,399 --> 00:00:53,440
and i'm okay with that

24
00:00:54,800 --> 00:00:56,239
so

25
00:00:56,239 --> 00:00:58,079
what is grok grock

26
00:00:58,079 --> 00:00:59,680
why this talk

27
00:00:59,680 --> 00:01:01,920
um and this is just my definition you

28
00:01:01,920 --> 00:01:03,920
know as a as a developer i came across

29
00:01:03,920 --> 00:01:06,240
grok the problem uh because you really

30
00:01:06,240 --> 00:01:08,799
really needed to grok the code to figure

31
00:01:08,799 --> 00:01:11,680
out what was going on and

32
00:01:11,680 --> 00:01:13,680
handbags fix the code

33
00:01:13,680 --> 00:01:16,240
um and i i find that this kind of

34
00:01:16,240 --> 00:01:18,720
applies to security engineering as well

35
00:01:18,720 --> 00:01:21,439
and i guess what i i the the other side

36
00:01:21,439 --> 00:01:22,640
to this is

37
00:01:22,640 --> 00:01:24,320
you really really need to understand the

38
00:01:24,320 --> 00:01:26,799
problem before you can start to fix

39
00:01:26,799 --> 00:01:28,159
things

40
00:01:28,159 --> 00:01:29,520
and that's kind of important because i

41
00:01:29,520 --> 00:01:30,320
know

42
00:01:30,320 --> 00:01:33,920
uh avatay is an ethical hacking course

43
00:01:33,920 --> 00:01:35,520
and you're going to find lots of

44
00:01:35,520 --> 00:01:37,040
security defects you're going to write

45
00:01:37,040 --> 00:01:38,799
reports and you're going to have this

46
00:01:38,799 --> 00:01:40,240
little thing at the bottom that says

47
00:01:40,240 --> 00:01:42,560
mitigation

48
00:01:42,560 --> 00:01:43,680
and

49
00:01:43,680 --> 00:01:46,079
the tendency is to sort of

50
00:01:46,079 --> 00:01:48,320
brush over that it's like do input

51
00:01:48,320 --> 00:01:50,560
validation you know do blast something

52
00:01:50,560 --> 00:01:52,000
very high level

53
00:01:52,000 --> 00:01:53,280
and the client's probably going to come

54
00:01:53,280 --> 00:01:55,040
back to you and say you know can you can

55
00:01:55,040 --> 00:01:57,040
you help me with this can you can you be

56
00:01:57,040 --> 00:01:58,960
a bit more specific

57
00:01:58,960 --> 00:02:01,280
and it's at that point

58
00:02:01,280 --> 00:02:02,960
that you are going to need to understand

59
00:02:02,960 --> 00:02:04,880
a little bit more about the problem so

60
00:02:04,880 --> 00:02:06,880
even though you've you know a lot of you

61
00:02:06,880 --> 00:02:09,679
doing ethical hacking course

62
00:02:09,679 --> 00:02:12,400
you you will at some point need

63
00:02:12,400 --> 00:02:14,720
to be helping clients actually

64
00:02:14,720 --> 00:02:15,920
fix things

65
00:02:15,920 --> 00:02:17,440
uh and so you will become a little bit

66
00:02:17,440 --> 00:02:19,360
more involved in what i would call

67
00:02:19,360 --> 00:02:21,440
solution engineering that's the other

68
00:02:21,440 --> 00:02:24,080
aspect you're not going to get away from

69
00:02:24,080 --> 00:02:25,680
and so i want to take you through a

70
00:02:25,680 --> 00:02:28,319
little journey around down memory lane

71
00:02:28,319 --> 00:02:31,280
uh through some um

72
00:02:31,280 --> 00:02:33,840
examples where this kind of stuff has

73
00:02:33,840 --> 00:02:36,480
gone wrong or backfired or something

74
00:02:36,480 --> 00:02:37,599
else is

75
00:02:37,599 --> 00:02:40,000
has gone wrong and just to sort of

76
00:02:40,000 --> 00:02:41,760
create a bit of awareness of how

77
00:02:41,760 --> 00:02:43,440
important this is it's not just about

78
00:02:43,440 --> 00:02:46,400
the testing you can't test security in

79
00:02:46,400 --> 00:02:48,480
you have to build security in

80
00:02:48,480 --> 00:02:49,680
and so this

81
00:02:49,680 --> 00:02:51,360
part of security

82
00:02:51,360 --> 00:02:55,280
is uh just as important as the hacking

83
00:02:55,680 --> 00:02:57,680
so so the motivation for this talk

84
00:02:57,680 --> 00:03:00,480
started with uh something very modest a

85
00:03:00,480 --> 00:03:01,840
very

86
00:03:01,840 --> 00:03:04,720
sort of modest problem that i came

87
00:03:04,720 --> 00:03:07,440
across in work

88
00:03:07,440 --> 00:03:11,040
at work and it was how do i validate

89
00:03:11,040 --> 00:03:13,599
an xml document using a document type

90
00:03:13,599 --> 00:03:16,238
definition

91
00:03:17,440 --> 00:03:19,680
and you know the reason this is

92
00:03:19,680 --> 00:03:21,920
important is you know input validation

93
00:03:21,920 --> 00:03:24,239
is the first line of of defense

94
00:03:24,239 --> 00:03:26,560
you get some some untrusted attacker

95
00:03:26,560 --> 00:03:27,519
data

96
00:03:27,519 --> 00:03:29,519
you perform input validation that's the

97
00:03:29,519 --> 00:03:33,440
first thing you need to do um

98
00:03:33,440 --> 00:03:36,000
so it's it's the first line of defense

99
00:03:36,000 --> 00:03:38,239
and imagine you know i

100
00:03:38,239 --> 00:03:40,720
haven't two in injection points i think

101
00:03:40,720 --> 00:03:42,959
i've got a imagine we have two injection

102
00:03:42,959 --> 00:03:45,120
points in this document

103
00:03:45,120 --> 00:03:48,400
so an attacker can inject

104
00:03:48,400 --> 00:03:50,239
in the red

105
00:03:50,239 --> 00:03:51,920
username

106
00:03:51,920 --> 00:03:54,480
and also by virtue of the injection they

107
00:03:54,480 --> 00:03:57,120
can inject a role element into the

108
00:03:57,120 --> 00:03:59,519
document this is like the example

109
00:03:59,519 --> 00:04:02,720
motivating why we need input validation

110
00:04:02,720 --> 00:04:04,959
and then of course they can you know

111
00:04:04,959 --> 00:04:07,760
they can uh inject the uh the email at

112
00:04:07,760 --> 00:04:10,480
the bottom as well

113
00:04:10,480 --> 00:04:13,920
and so um as a as a developer as a as an

114
00:04:13,920 --> 00:04:16,160
application writer you want to

115
00:04:16,160 --> 00:04:18,000
validate this document like it's you

116
00:04:18,000 --> 00:04:20,079
know it's got this role

117
00:04:20,079 --> 00:04:22,320
element that shouldn't be there

118
00:04:22,320 --> 00:04:23,840
so i want to perform some input

119
00:04:23,840 --> 00:04:26,400
validation

120
00:04:26,639 --> 00:04:29,759
so this is how you do it in java

121
00:04:29,759 --> 00:04:31,470
you transform the document

122
00:04:31,470 --> 00:04:32,560
[Music]

123
00:04:32,560 --> 00:04:33,840
to include

124
00:04:33,840 --> 00:04:35,360
a dtd

125
00:04:35,360 --> 00:04:37,360
that's the code there

126
00:04:37,360 --> 00:04:39,360
with the important stuff

127
00:04:39,360 --> 00:04:40,960
highlighted

128
00:04:40,960 --> 00:04:44,479
and then you load the transform document

129
00:04:44,479 --> 00:04:46,720
with validation turned on

130
00:04:46,720 --> 00:04:47,740
simple

131
00:04:47,740 --> 00:04:50,240
[Music]

132
00:04:50,240 --> 00:04:52,800
but but but

133
00:04:52,800 --> 00:04:55,520
what if the document already contains a

134
00:04:55,520 --> 00:04:58,080
dtd

135
00:04:58,800 --> 00:05:00,320
then are vulnerable

136
00:05:00,320 --> 00:05:01,759
to

137
00:05:01,759 --> 00:05:03,520
all types of dtd

138
00:05:03,520 --> 00:05:06,320
entity attacks for example

139
00:05:06,320 --> 00:05:10,320
the document may contain a

140
00:05:10,320 --> 00:05:12,000
external entity

141
00:05:12,000 --> 00:05:14,639
that's referenced in the xml document

142
00:05:14,639 --> 00:05:17,520
that picks up the contents of a file or

143
00:05:17,520 --> 00:05:19,199
makes me vulnerable to a server-side

144
00:05:19,199 --> 00:05:21,520
request forgery somehow

145
00:05:21,520 --> 00:05:23,039
so

146
00:05:23,039 --> 00:05:25,280
this is a problem

147
00:05:25,280 --> 00:05:27,120
this is my kung fu

148
00:05:27,120 --> 00:05:28,639
kung fu

149
00:05:28,639 --> 00:05:30,800
two panda moments you know where paris

150
00:05:30,800 --> 00:05:32,479
says

151
00:05:32,479 --> 00:05:34,320
how does kung fu stop something that

152
00:05:34,320 --> 00:05:35,199
stops

153
00:05:35,199 --> 00:05:36,400
kung fu

154
00:05:36,400 --> 00:05:38,560
yeah the act of

155
00:05:38,560 --> 00:05:41,039
validating this document performing

156
00:05:41,039 --> 00:05:43,520
input validation makes me vulnerable

157
00:05:43,520 --> 00:05:46,880
to dtd injection

158
00:05:47,120 --> 00:05:49,440
but at the same time i need to validate

159
00:05:49,440 --> 00:05:51,039
the document because that's my first

160
00:05:51,039 --> 00:05:53,840
line of defense

161
00:05:57,120 --> 00:05:59,759
so in the same way you know how does

162
00:05:59,759 --> 00:06:01,280
input validation

163
00:06:01,280 --> 00:06:02,800
stop something that stops input

164
00:06:02,800 --> 00:06:05,800
validation

165
00:06:06,080 --> 00:06:07,360
and so

166
00:06:07,360 --> 00:06:10,160
i had to think about the problem

167
00:06:10,160 --> 00:06:13,440
um i went to the uh the

168
00:06:13,440 --> 00:06:15,919
javadocs looked try to understand the

169
00:06:15,919 --> 00:06:18,880
behavior that didn't really help me

170
00:06:18,880 --> 00:06:20,639
and eventually

171
00:06:20,639 --> 00:06:22,639
came up with a solution that is is

172
00:06:22,639 --> 00:06:25,280
really really non-intuitive

173
00:06:25,280 --> 00:06:26,800
what you do

174
00:06:26,800 --> 00:06:28,800
is you first have to transform the

175
00:06:28,800 --> 00:06:30,560
document

176
00:06:30,560 --> 00:06:33,919
into another document that contains adtd

177
00:06:33,919 --> 00:06:37,280
it might still be the malicious dtd

178
00:06:37,280 --> 00:06:38,880
and then what you need to do is create a

179
00:06:38,880 --> 00:06:42,479
validate validating uh document builder

180
00:06:42,479 --> 00:06:44,560
with a whole lot of stuff turned off a

181
00:06:44,560 --> 00:06:48,400
special entity resolver to replace

182
00:06:48,400 --> 00:06:49,199
the

183
00:06:49,199 --> 00:06:50,240
built-in

184
00:06:50,240 --> 00:06:52,720
document type definition with your own

185
00:06:52,720 --> 00:06:56,000
and then you have a validated document

186
00:06:56,000 --> 00:06:57,280
and

187
00:06:57,280 --> 00:06:59,120
the lesson for me was that i had not

188
00:06:59,120 --> 00:07:00,800
thought through

189
00:07:00,800 --> 00:07:03,039
the problem space properly i'm not i i

190
00:07:03,039 --> 00:07:05,599
just said you know do input validation

191
00:07:05,599 --> 00:07:07,840
just apply the dtd go away don't don't

192
00:07:07,840 --> 00:07:10,000
come back until you've until you've done

193
00:07:10,000 --> 00:07:12,240
this

194
00:07:12,240 --> 00:07:14,639
and so i realized that the the solution

195
00:07:14,639 --> 00:07:17,840
space and problem space

196
00:07:18,240 --> 00:07:19,680
wasn't actually as simple as i thought

197
00:07:19,680 --> 00:07:21,919
it was

198
00:07:21,919 --> 00:07:24,080
so i'm going to take you down sort of

199
00:07:24,080 --> 00:07:26,000
some more well-known

200
00:07:26,000 --> 00:07:27,840
uh things where there's something

201
00:07:27,840 --> 00:07:30,560
similar to this has happened

202
00:07:30,560 --> 00:07:31,919
the first is

203
00:07:31,919 --> 00:07:35,919
x ss protection

204
00:07:35,919 --> 00:07:37,919
so a cross-site scripting attack we all

205
00:07:37,919 --> 00:07:39,520
know what that is it's an injection

206
00:07:39,520 --> 00:07:42,000
attack that bypasses the browser's same

207
00:07:42,000 --> 00:07:43,440
origin policy

208
00:07:43,440 --> 00:07:45,840
right

209
00:07:46,720 --> 00:07:48,479
so here's an here's a cross-out

210
00:07:48,479 --> 00:07:50,000
scripting

211
00:07:50,000 --> 00:07:52,000
you have a vulnerable parameter that

212
00:07:52,000 --> 00:07:54,560
gets echoed back in the document so on

213
00:07:54,560 --> 00:07:56,560
the left hand side i have a name equals

214
00:07:56,560 --> 00:07:58,560
super mario

215
00:07:58,560 --> 00:08:00,879
and that gets reflected back

216
00:08:00,879 --> 00:08:02,879
into the document

217
00:08:02,879 --> 00:08:05,280
and this is an xss because if i

218
00:08:05,280 --> 00:08:07,440
provide some html

219
00:08:07,440 --> 00:08:08,639
i can get

220
00:08:08,639 --> 00:08:11,280
the familiar script alert

221
00:08:11,280 --> 00:08:14,638
so here we have an xss

222
00:08:14,879 --> 00:08:16,319
and what x

223
00:08:16,319 --> 00:08:21,759
xs protection did is it looked at

224
00:08:21,759 --> 00:08:22,560
the

225
00:08:22,560 --> 00:08:24,720
url in a get request

226
00:08:24,720 --> 00:08:25,759
or

227
00:08:25,759 --> 00:08:28,080
the quest parameters in the body of a

228
00:08:28,080 --> 00:08:31,199
post request and it held on to those

229
00:08:31,199 --> 00:08:34,320
and awaited and waited and then it

230
00:08:34,320 --> 00:08:36,000
got back the response

231
00:08:36,000 --> 00:08:38,000
and then it compared

232
00:08:38,000 --> 00:08:41,440
the request to what was in the dom

233
00:08:41,440 --> 00:08:43,440
and if it saw something that looked like

234
00:08:43,440 --> 00:08:45,839
it had been reflected back uh into the

235
00:08:45,839 --> 00:08:48,000
dom when the page actually loaded then

236
00:08:48,000 --> 00:08:48,640
it

237
00:08:48,640 --> 00:08:50,240
did one of a number of things it may

238
00:08:50,240 --> 00:08:51,440
have removed

239
00:08:51,440 --> 00:08:53,680
uh and it could report or it could block

240
00:08:53,680 --> 00:08:55,440
the page loading or it could simply

241
00:08:55,440 --> 00:08:56,880
filter out

242
00:08:56,880 --> 00:08:58,959
the offending

243
00:08:58,959 --> 00:09:02,079
offending script

244
00:09:02,959 --> 00:09:05,040
so that's how it worked

245
00:09:05,040 --> 00:09:06,000
but

246
00:09:06,000 --> 00:09:07,680
it's one of those things that has you

247
00:09:07,680 --> 00:09:09,279
know good ideas

248
00:09:09,279 --> 00:09:11,279
but doesn't work quite

249
00:09:11,279 --> 00:09:13,200
work the same way in practice firstly

250
00:09:13,200 --> 00:09:14,720
you can imagine

251
00:09:14,720 --> 00:09:16,320
that you're making this request you're

252
00:09:16,320 --> 00:09:18,560
holding onto the quest parameters

253
00:09:18,560 --> 00:09:20,560
and if you have a large document you

254
00:09:20,560 --> 00:09:22,560
have to really scan through

255
00:09:22,560 --> 00:09:25,440
the entire document to figure out

256
00:09:25,440 --> 00:09:27,519
you know is there is the pattern in the

257
00:09:27,519 --> 00:09:28,480
request

258
00:09:28,480 --> 00:09:30,640
in the loaded document

259
00:09:30,640 --> 00:09:33,760
so there were some performance issues

260
00:09:33,760 --> 00:09:35,360
but there were sort of more serious

261
00:09:35,360 --> 00:09:37,680
issues for example

262
00:09:37,680 --> 00:09:40,160
you could actually use x

263
00:09:40,160 --> 00:09:42,959
xss protection to remove important

264
00:09:42,959 --> 00:09:44,480
security code

265
00:09:44,480 --> 00:09:46,399
so in this example

266
00:09:46,399 --> 00:09:47,839
we have what looks like a cross-site

267
00:09:47,839 --> 00:09:51,120
scripting attack in the yellow

268
00:09:51,120 --> 00:09:52,240
which is

269
00:09:52,240 --> 00:09:54,959
script call frame buster presumably the

270
00:09:54,959 --> 00:09:57,120
script is to call your frame busting

271
00:09:57,120 --> 00:09:59,360
code so it's not loaded

272
00:09:59,360 --> 00:10:02,720
it's not loaded in iframe

273
00:10:02,720 --> 00:10:05,839
but um the excessive auditor

274
00:10:05,839 --> 00:10:07,399
the engine behind

275
00:10:07,399 --> 00:10:09,440
xss protection

276
00:10:09,440 --> 00:10:11,440
is going to strip this out so in this

277
00:10:11,440 --> 00:10:14,720
case it will actually remove

278
00:10:15,839 --> 00:10:16,800
remove

279
00:10:16,800 --> 00:10:19,839
important security code

280
00:10:20,320 --> 00:10:21,120
so

281
00:10:21,120 --> 00:10:22,720
if you do a bit of reading on this there

282
00:10:22,720 --> 00:10:24,240
was this eventually started being

283
00:10:24,240 --> 00:10:26,240
deprecated by the browsers

284
00:10:26,240 --> 00:10:28,399
uh that said we can't support this

285
00:10:28,399 --> 00:10:30,079
anymore there were actually loads of

286
00:10:30,079 --> 00:10:32,000
other issues there was actually um

287
00:10:32,000 --> 00:10:34,720
what's called uh cross-site leakage so

288
00:10:34,720 --> 00:10:36,160
there were various other types of

289
00:10:36,160 --> 00:10:37,600
attacks

290
00:10:37,600 --> 00:10:39,200
and there were ways to bypass it all

291
00:10:39,200 --> 00:10:40,959
sorts of ways to fight to bypass it i

292
00:10:40,959 --> 00:10:43,600
mean you could effectively what the

293
00:10:43,600 --> 00:10:45,760
the engine was doing was guessing what

294
00:10:45,760 --> 00:10:47,839
the security policy of the server would

295
00:10:47,839 --> 00:10:50,480
be i mean if you can imagine if you had

296
00:10:50,480 --> 00:10:53,360
single quote s single quote

297
00:10:53,360 --> 00:10:55,760
c single quote r

298
00:10:55,760 --> 00:10:58,079
single quote yeah i

299
00:10:58,079 --> 00:10:59,279
script

300
00:10:59,279 --> 00:11:01,680
and that came back as script the the

301
00:11:01,680 --> 00:11:03,519
access auditor has to make a decision

302
00:11:03,519 --> 00:11:06,160
well is that a reflected xss or not did

303
00:11:06,160 --> 00:11:07,200
the

304
00:11:07,200 --> 00:11:09,120
did the server application deliberately

305
00:11:09,120 --> 00:11:10,959
strip out the single quotes what am i

306
00:11:10,959 --> 00:11:13,279
supposed to do here so it has to guess

307
00:11:13,279 --> 00:11:15,440
really what the intention of of the

308
00:11:15,440 --> 00:11:17,600
application is and this is like this is

309
00:11:17,600 --> 00:11:19,120
the policy in the browser and has to

310
00:11:19,120 --> 00:11:20,800
guess for every single

311
00:11:20,800 --> 00:11:22,399
for every single website so there's a

312
00:11:22,399 --> 00:11:24,399
big debate uh going on

313
00:11:24,399 --> 00:11:25,600
and

314
00:11:25,600 --> 00:11:26,959
and actually the browser's already

315
00:11:26,959 --> 00:11:28,480
pulled it but this was a bit of debate

316
00:11:28,480 --> 00:11:31,760
that was going on in the os

317
00:11:31,920 --> 00:11:33,120
cheat sheet

318
00:11:33,120 --> 00:11:36,240
and eventually they pulled it

319
00:11:36,399 --> 00:11:39,040
but you know i submit that

320
00:11:39,040 --> 00:11:40,720
you know if we look at the anatomy of an

321
00:11:40,720 --> 00:11:43,920
xss attack reflected attack

322
00:11:43,920 --> 00:11:46,399
you know the attacker gets the tricks

323
00:11:46,399 --> 00:11:48,560
the user into visiting a site

324
00:11:48,560 --> 00:11:50,320
site reflects it back it's loading the

325
00:11:50,320 --> 00:11:52,480
page script gets loaded

326
00:11:52,480 --> 00:11:54,320
here's the issue

327
00:11:54,320 --> 00:11:57,839
the issue is in the server

328
00:11:58,000 --> 00:11:59,440
you know the issue is that those two

329
00:11:59,440 --> 00:12:01,040
points one not performing input

330
00:12:01,040 --> 00:12:02,399
validation

331
00:12:02,399 --> 00:12:05,120
and two not performing output encoding

332
00:12:05,120 --> 00:12:09,279
the issue is not here in the browser

333
00:12:09,279 --> 00:12:12,320
um as i'm gonna put sprinkle little

334
00:12:12,320 --> 00:12:15,200
fortune cookies around this uh this talk

335
00:12:15,200 --> 00:12:17,120
uh you can take them with a pinch of

336
00:12:17,120 --> 00:12:18,720
salt but they've got a grain of truth in

337
00:12:18,720 --> 00:12:21,360
them this one is i'm calling improper

338
00:12:21,360 --> 00:12:23,600
choice of protection domain which is

339
00:12:23,600 --> 00:12:26,079
basically a fancy way of saying that put

340
00:12:26,079 --> 00:12:27,920
the they considered the problem in the

341
00:12:27,920 --> 00:12:29,600
wrong place

342
00:12:29,600 --> 00:12:31,600
you know it's a server vulnerability

343
00:12:31,600 --> 00:12:33,680
they try to fix it with all sorts of

344
00:12:33,680 --> 00:12:36,320
clever stuff and that was clever stuff

345
00:12:36,320 --> 00:12:39,560
in the clients

346
00:12:46,639 --> 00:12:48,880
so the next story

347
00:12:48,880 --> 00:12:52,279
is about certificate

348
00:12:52,320 --> 00:12:54,000
and this one's

349
00:12:54,000 --> 00:12:56,000
quite interesting because

350
00:12:56,000 --> 00:12:58,240
it was there was a lot of hysteria

351
00:12:58,240 --> 00:12:59,920
around certificate pinning especially in

352
00:12:59,920 --> 00:13:02,639
mobile apps

353
00:13:04,560 --> 00:13:07,040
and so i googled certificate pinning and

354
00:13:07,040 --> 00:13:09,760
this is one of the first hits i got

355
00:13:09,760 --> 00:13:13,600
uh it says uh why is https alone not

356
00:13:13,600 --> 00:13:15,440
good enough to protect our apps from the

357
00:13:15,440 --> 00:13:17,200
bad guys

358
00:13:17,200 --> 00:13:18,880
and then it goes on to say it's because

359
00:13:18,880 --> 00:13:21,519
any man in the middle can can come

360
00:13:21,519 --> 00:13:23,680
between our app and our server

361
00:13:23,680 --> 00:13:25,680
and manipulate data requests and our

362
00:13:25,680 --> 00:13:28,000
product control can go into bad hands

363
00:13:28,000 --> 00:13:31,279
it's like one of the top hits

364
00:13:31,519 --> 00:13:34,399
and so no no no no no

365
00:13:34,399 --> 00:13:36,160
no

366
00:13:36,160 --> 00:13:39,600
that is not correct

367
00:13:40,560 --> 00:13:42,320
so the weakness

368
00:13:42,320 --> 00:13:45,680
in certificate pinning is is this

369
00:13:45,680 --> 00:13:47,440
so imagine you're my you're the

370
00:13:47,440 --> 00:13:51,199
organization that owns my server.com

371
00:13:51,199 --> 00:13:54,160
it's your yourmyserver.com

372
00:13:54,160 --> 00:13:55,600
um

373
00:13:55,600 --> 00:13:57,120
and ultimately you have a tls

374
00:13:57,120 --> 00:13:59,920
certificate for myserver.com there

375
00:13:59,920 --> 00:14:03,360
in the name of your website

376
00:14:03,360 --> 00:14:06,000
and ultimately the certificate chain

377
00:14:06,000 --> 00:14:08,800
will be rooted in some root ca

378
00:14:08,800 --> 00:14:10,720
there may be some intermediate ca's in

379
00:14:10,720 --> 00:14:13,519
between so i've got root ca ca1 ca2 who

380
00:14:13,519 --> 00:14:16,079
knows

381
00:14:16,079 --> 00:14:17,440
um and

382
00:14:17,440 --> 00:14:20,880
so that's that's how tls works

383
00:14:20,880 --> 00:14:22,959
um

384
00:14:22,959 --> 00:14:23,920
so

385
00:14:23,920 --> 00:14:25,680
the problem is that

386
00:14:25,680 --> 00:14:29,120
another ca could also mint a certificate

387
00:14:29,120 --> 00:14:30,959
for myserver.com

388
00:14:30,959 --> 00:14:33,519
this is untrusted ca in the sense not in

389
00:14:33,519 --> 00:14:35,360
sense that it's untrusted it's still in

390
00:14:35,360 --> 00:14:38,000
the ins in the system trust store

391
00:14:38,000 --> 00:14:39,839
it's untrusted in a sense that you

392
00:14:39,839 --> 00:14:42,240
didn't ask them to mint this certificate

393
00:14:42,240 --> 00:14:44,560
like for myserver.com

394
00:14:44,560 --> 00:14:47,120
and and this certificate at the bottom

395
00:14:47,120 --> 00:14:48,720
looks like a certificate from

396
00:14:48,720 --> 00:14:51,360
myserver.com and it smells like a

397
00:14:51,360 --> 00:14:53,680
certificate for myserver.com and that's

398
00:14:53,680 --> 00:14:56,000
because it is a valid certificate for

399
00:14:56,000 --> 00:14:58,240
myserver.com

400
00:14:58,240 --> 00:15:01,360
it's completely valid

401
00:15:01,519 --> 00:15:02,320
and

402
00:15:02,320 --> 00:15:05,199
and this is a problem right because

403
00:15:05,199 --> 00:15:07,680
because why

404
00:15:07,680 --> 00:15:09,680
so let's consider that root ca is in the

405
00:15:09,680 --> 00:15:11,760
certificate trust store

406
00:15:11,760 --> 00:15:14,639
an untrusted ca is also in your system

407
00:15:14,639 --> 00:15:16,720
trust store

408
00:15:16,720 --> 00:15:18,079
so

409
00:15:18,079 --> 00:15:20,320
whoever has the private key for the

410
00:15:20,320 --> 00:15:23,760
bottom myserver.com can effectively

411
00:15:23,760 --> 00:15:25,199
spoof

412
00:15:25,199 --> 00:15:26,959
the server or man in the middle of

413
00:15:26,959 --> 00:15:27,839
traffic

414
00:15:27,839 --> 00:15:29,519
man in the middle traffic or do whatever

415
00:15:29,519 --> 00:15:32,079
they want to do

416
00:15:32,800 --> 00:15:34,720
and if you look at the certificates on

417
00:15:34,720 --> 00:15:37,279
your system like this is um from android

418
00:15:37,279 --> 00:15:39,120
pixel 2

419
00:15:39,120 --> 00:15:41,680
time back i think it was about 190 i

420
00:15:41,680 --> 00:15:43,920
can't remember off the top of my head

421
00:15:43,920 --> 00:15:46,240
there are lots of potential untrusted

422
00:15:46,240 --> 00:15:49,440
cas in your system trust store

423
00:15:49,440 --> 00:15:51,279
so let's have a look

424
00:15:51,279 --> 00:15:55,040
sign i don't trust them um

425
00:15:55,040 --> 00:15:57,040
you know this thought okay i'm good with

426
00:15:57,040 --> 00:15:57,920
that

427
00:15:57,920 --> 00:15:59,360
global

428
00:15:59,360 --> 00:16:01,120
uh

429
00:16:01,120 --> 00:16:03,759
yeah so this uh turk trust i don't know

430
00:16:03,759 --> 00:16:05,600
if you trust turk trust

431
00:16:05,600 --> 00:16:07,920
um yeah i'm not you know there's also

432
00:16:07,920 --> 00:16:10,800
well fargo bank i mean

433
00:16:10,800 --> 00:16:13,920
um this china internet network

434
00:16:13,920 --> 00:16:15,600
information center

435
00:16:15,600 --> 00:16:17,519
i don't you know there's no reason to

436
00:16:17,519 --> 00:16:19,839
trust any of these but any of these

437
00:16:19,839 --> 00:16:23,600
root cas could ultimately mint

438
00:16:23,600 --> 00:16:25,120
a certificate

439
00:16:25,120 --> 00:16:27,199
rooted in one of these

440
00:16:27,199 --> 00:16:30,959
roof rca certificates

441
00:16:32,079 --> 00:16:34,639
and so this is this is the problem this

442
00:16:34,639 --> 00:16:36,880
is the certificate pinning problem

443
00:16:36,880 --> 00:16:39,519
and how could this happen well there are

444
00:16:39,519 --> 00:16:40,880
a few ways

445
00:16:40,880 --> 00:16:43,759
you firstly you could get the hack ca

446
00:16:43,759 --> 00:16:46,160
someone hacks the ca

447
00:16:46,160 --> 00:16:50,320
uh steals their their their signing keys

448
00:16:50,320 --> 00:16:51,839
and starts to

449
00:16:51,839 --> 00:16:54,160
abuses their process and starts to mint

450
00:16:54,160 --> 00:16:56,959
their own certificates in the name of

451
00:16:56,959 --> 00:16:58,639
did you know tough for example and this

452
00:16:58,639 --> 00:17:00,959
is how they um

453
00:17:00,959 --> 00:17:05,039
their hacker got caught who was

454
00:17:05,039 --> 00:17:07,199
trying to intercept

455
00:17:07,199 --> 00:17:09,760
gmail if i remember from some dissident

456
00:17:09,760 --> 00:17:12,079
in iran something like that

457
00:17:12,079 --> 00:17:14,240
and basically he was using chrome

458
00:17:14,240 --> 00:17:18,720
chrome statically pinned to google's

459
00:17:18,720 --> 00:17:20,559
ca which i think is

460
00:17:20,559 --> 00:17:22,720
a global sign or something like that and

461
00:17:22,720 --> 00:17:24,400
so chrome complained

462
00:17:24,400 --> 00:17:26,079
and he noticed it

463
00:17:26,079 --> 00:17:29,360
so this is the hack ca

464
00:17:29,520 --> 00:17:32,080
you also get the um

465
00:17:32,080 --> 00:17:36,799
the rogue ca and this is the ca

466
00:17:37,039 --> 00:17:39,280
issuing certificates in this case for

467
00:17:39,280 --> 00:17:41,280
google and symantec don't issue

468
00:17:41,280 --> 00:17:44,399
certificates for google

469
00:17:45,520 --> 00:17:48,799
and we have some variations on that

470
00:17:48,799 --> 00:17:51,120
um here's a blog post by the

471
00:17:51,120 --> 00:17:53,520
cryptographer matthew green

472
00:17:53,520 --> 00:17:56,240
uh he was ranting and raving

473
00:17:56,240 --> 00:17:57,679
about this a lot

474
00:17:57,679 --> 00:17:59,840
and here he is writing about trustwave

475
00:17:59,840 --> 00:18:02,240
he says trustwave an important ca and

476
00:18:02,240 --> 00:18:03,919
pillar of the internet took it upon

477
00:18:03,919 --> 00:18:06,480
themselves to sell a subordinate cert in

478
00:18:06,480 --> 00:18:08,000
other words this was their business

479
00:18:08,000 --> 00:18:08,880
model

480
00:18:08,880 --> 00:18:11,280
they weren't even hacked or went rogue

481
00:18:11,280 --> 00:18:14,640
this was like the way they made money

482
00:18:14,640 --> 00:18:15,919
um

483
00:18:15,919 --> 00:18:17,760
and then like the government's got in on

484
00:18:17,760 --> 00:18:19,360
their act as well

485
00:18:19,360 --> 00:18:21,840
so this is um the french agency this is

486
00:18:21,840 --> 00:18:23,840
a while back obviously

487
00:18:23,840 --> 00:18:25,679
um

488
00:18:25,679 --> 00:18:27,280
french agency has been called signing

489
00:18:27,280 --> 00:18:30,080
ssl certs

490
00:18:30,880 --> 00:18:34,000
but like gchq

491
00:18:34,000 --> 00:18:36,880
oh what's going on

492
00:18:36,880 --> 00:18:39,200
don't

493
00:18:39,200 --> 00:18:42,200
don't

494
00:18:44,640 --> 00:18:47,039
do not

495
00:18:47,679 --> 00:18:50,160
so the idea is

496
00:18:50,160 --> 00:18:53,600
even though the hack ca is in your

497
00:18:53,600 --> 00:18:56,960
store of root certificates

498
00:18:56,960 --> 00:19:00,320
it's not in your set of pins

499
00:19:00,320 --> 00:19:02,480
so

500
00:19:03,360 --> 00:19:06,000
so you just have a restricted set of

501
00:19:06,000 --> 00:19:07,679
of cas

502
00:19:07,679 --> 00:19:10,960
root ca intermediary or end entity cert

503
00:19:10,960 --> 00:19:13,520
that you trust

504
00:19:13,679 --> 00:19:16,559
and you validate against that

505
00:19:16,559 --> 00:19:18,080
so if someone else produces a valid

506
00:19:18,080 --> 00:19:19,120
certificate chain you're not going to

507
00:19:19,120 --> 00:19:22,360
trust it

508
00:19:24,000 --> 00:19:25,760
about the same time

509
00:19:25,760 --> 00:19:27,280
um they were having this debate for

510
00:19:27,280 --> 00:19:28,960
browsers right you may

511
00:19:28,960 --> 00:19:30,320
you may

512
00:19:30,320 --> 00:19:34,400
know about the http public keys pinning

513
00:19:34,400 --> 00:19:37,440
a proposal that some browsers started to

514
00:19:37,440 --> 00:19:39,600
support there was some support and then

515
00:19:39,600 --> 00:19:42,400
eventually they can this proposal

516
00:19:42,400 --> 00:19:44,240
and the reason they canned it

517
00:19:44,240 --> 00:19:46,160
was because they were basically worried

518
00:19:46,160 --> 00:19:48,480
about denial of service because once a

519
00:19:48,480 --> 00:19:51,679
website was pinned to a search that was

520
00:19:51,679 --> 00:19:52,400
it

521
00:19:52,400 --> 00:19:54,799
right it would just refuse to connect

522
00:19:54,799 --> 00:19:55,919
to

523
00:19:55,919 --> 00:19:58,400
that same site with another search

524
00:19:58,400 --> 00:19:59,600
once it was pinned whether it was

525
00:19:59,600 --> 00:20:01,919
printed the server end entity

526
00:20:01,919 --> 00:20:03,520
certificate level or the root ceo

527
00:20:03,520 --> 00:20:05,760
intermediate and this was a problem if

528
00:20:05,760 --> 00:20:08,240
you forgot to update your certs or

529
00:20:08,240 --> 00:20:10,080
something got revoked

530
00:20:10,080 --> 00:20:11,600
basically you would brick your site

531
00:20:11,600 --> 00:20:12,880
until

532
00:20:12,880 --> 00:20:15,760
the sort of it expired

533
00:20:15,760 --> 00:20:18,880
um so they were having this debate in

534
00:20:18,880 --> 00:20:21,039
in the sort of uh for browsers at the

535
00:20:21,039 --> 00:20:23,600
same time this sort of was going on for

536
00:20:23,600 --> 00:20:25,919
mainly like mobile apps but but not just

537
00:20:25,919 --> 00:20:27,919
mobile apps

538
00:20:27,919 --> 00:20:30,159
and so three months after that post was

539
00:20:30,159 --> 00:20:31,760
um published

540
00:20:31,760 --> 00:20:35,280
they see something like this

541
00:20:35,280 --> 00:20:38,240
a certain bank

542
00:20:38,880 --> 00:20:41,039
realized that the

543
00:20:41,039 --> 00:20:44,640
pinned certificate in their app

544
00:20:44,640 --> 00:20:47,280
was about to expire

545
00:20:47,280 --> 00:20:48,720
and that would have locked out all their

546
00:20:48,720 --> 00:20:49,760
users

547
00:20:49,760 --> 00:20:51,520
and so here they were trying to evoke

548
00:20:51,520 --> 00:20:54,159
emergency procedures to give them a new

549
00:20:54,159 --> 00:20:55,440
cert

550
00:20:55,440 --> 00:20:57,039
and if they hadn't done this i can't

551
00:20:57,039 --> 00:20:58,960
remember if they bricked their app for a

552
00:20:58,960 --> 00:21:00,400
little bit or not

553
00:21:00,400 --> 00:21:02,080
um

554
00:21:02,080 --> 00:21:04,400
then um that the app users would have

555
00:21:04,400 --> 00:21:07,039
been blocked out

556
00:21:07,039 --> 00:21:08,320
so that's just actually a little bit of

557
00:21:08,320 --> 00:21:10,400
a side that's not the point of this

558
00:21:10,400 --> 00:21:14,000
section but i find it interesting

559
00:21:14,240 --> 00:21:15,840
another thing about certificate pinning

560
00:21:15,840 --> 00:21:17,120
is um

561
00:21:17,120 --> 00:21:18,080
um

562
00:21:18,080 --> 00:21:19,840
all the script kiddies or the like the

563
00:21:19,840 --> 00:21:22,240
bug bounty it's very easy to figure out

564
00:21:22,240 --> 00:21:23,679
if someone wasn't doing search printing

565
00:21:23,679 --> 00:21:25,760
because all you had to do

566
00:21:25,760 --> 00:21:27,600
was take your take out for example a

567
00:21:27,600 --> 00:21:29,200
birth certificate stick in the trust

568
00:21:29,200 --> 00:21:31,120
store system trust store and see if the

569
00:21:31,120 --> 00:21:32,880
app still connected if it doesn't it

570
00:21:32,880 --> 00:21:34,400
clearly wasn't pending because you'd

571
00:21:34,400 --> 00:21:37,760
just proxied it viber

572
00:21:37,919 --> 00:21:39,360
or you could just break open the app

573
00:21:39,360 --> 00:21:41,039
decompile it and and see whether they

574
00:21:41,039 --> 00:21:43,120
were doing anything for certificate

575
00:21:43,120 --> 00:21:44,880
pending if they weren't

576
00:21:44,880 --> 00:21:45,840
they weren't

577
00:21:45,840 --> 00:21:48,000
and um so people started reporting this

578
00:21:48,000 --> 00:21:50,240
and they got a few cves out of it

579
00:21:50,240 --> 00:21:51,840
uh eventually the bug bounty people

580
00:21:51,840 --> 00:21:54,640
started saying yeah please don't submit

581
00:21:54,640 --> 00:21:57,120
any more reports about absence of

582
00:21:57,120 --> 00:21:58,720
certificate pinning because it's not

583
00:21:58,720 --> 00:22:01,919
actually a vulnerability

584
00:22:03,200 --> 00:22:05,120
what i'm more interested in is how do

585
00:22:05,120 --> 00:22:06,350
you actually pin

586
00:22:06,350 --> 00:22:08,480
[Music]

587
00:22:08,480 --> 00:22:10,159
so what you might do if you're an app

588
00:22:10,159 --> 00:22:12,799
developer is you might go to the os

589
00:22:12,799 --> 00:22:14,640
cheat sheet certificate printing cheat

590
00:22:14,640 --> 00:22:17,440
sheet and if you had gone to the os

591
00:22:17,440 --> 00:22:19,760
certificate printing cheat sheet this is

592
00:22:19,760 --> 00:22:21,600
what you would have seen you would have

593
00:22:21,600 --> 00:22:23,840
copied copy pasted this into your app

594
00:22:23,840 --> 00:22:25,440
and it's the os

595
00:22:25,440 --> 00:22:26,880
certificate and i'm not trying to pick

596
00:22:26,880 --> 00:22:28,880
on os but just shows getting these

597
00:22:28,880 --> 00:22:32,320
things right is hard

598
00:22:32,559 --> 00:22:34,000
and let me break this down a little bit

599
00:22:34,000 --> 00:22:35,600
for you

600
00:22:35,600 --> 00:22:36,640
um

601
00:22:36,640 --> 00:22:39,120
you know the line the line at top says

602
00:22:39,120 --> 00:22:41,760
this is a public key i expect to pin to

603
00:22:41,760 --> 00:22:44,480
so in this case not pinning two elements

604
00:22:44,480 --> 00:22:46,159
in the certificate but it's pinning to a

605
00:22:46,159 --> 00:22:47,360
public key

606
00:22:47,360 --> 00:22:49,280
and then the next few lines down it says

607
00:22:49,280 --> 00:22:50,720
um

608
00:22:50,720 --> 00:22:52,320
well the one important one at the bottom

609
00:22:52,320 --> 00:22:55,039
is uh it says

610
00:22:55,039 --> 00:22:56,720
give the

611
00:22:56,720 --> 00:22:59,200
give the built-in trust manager a chance

612
00:22:59,200 --> 00:23:00,559
to validate this

613
00:23:00,559 --> 00:23:03,360
chain so is it a valid chain you know

614
00:23:03,360 --> 00:23:05,520
basic ca constraints are all the

615
00:23:05,520 --> 00:23:08,000
certificates that haven't expired and so

616
00:23:08,000 --> 00:23:10,559
on and is this root ca in the system

617
00:23:10,559 --> 00:23:13,039
trust store

618
00:23:13,039 --> 00:23:15,600
and then right at the bottom it says

619
00:23:15,600 --> 00:23:17,840
uh it does two things it says get the

620
00:23:17,840 --> 00:23:19,520
public key

621
00:23:19,520 --> 00:23:21,600
from the certificate chain that was

622
00:23:21,600 --> 00:23:24,159
given to me the callback in this this

623
00:23:24,159 --> 00:23:26,640
trust manager and compare it with the

624
00:23:26,640 --> 00:23:30,320
key i the key i expect

625
00:23:30,799 --> 00:23:34,760
and that's that's the pinning

626
00:23:36,640 --> 00:23:38,640
however

627
00:23:38,640 --> 00:23:41,440
that had a big big big bug

628
00:23:41,440 --> 00:23:42,640
in it

629
00:23:42,640 --> 00:23:44,720
and the bug is that

630
00:23:44,720 --> 00:23:46,880
the server can actually send any certs

631
00:23:46,880 --> 00:23:49,679
at once it doesn't have to be a valid

632
00:23:49,679 --> 00:23:51,279
chain

633
00:23:51,279 --> 00:23:53,760
so in this case the server can actually

634
00:23:53,760 --> 00:23:56,480
send two chains

635
00:23:56,480 --> 00:23:58,799
the first chain

636
00:23:58,799 --> 00:24:02,880
you see z and w so z is a

637
00:24:02,880 --> 00:24:05,039
is a valid root ca

638
00:24:05,039 --> 00:24:07,360
that has minted a certificate for sigil

639
00:24:07,360 --> 00:24:10,880
in this case digital.com and that's

640
00:24:10,880 --> 00:24:12,559
cert w

641
00:24:12,559 --> 00:24:14,240
that's the certificate chain that

642
00:24:14,240 --> 00:24:15,840
actually took

643
00:24:15,840 --> 00:24:18,960
part in the tls handshake the tls

644
00:24:18,960 --> 00:24:21,120
handshake

645
00:24:21,120 --> 00:24:24,320
was done by certificate w

646
00:24:24,320 --> 00:24:26,000
and then what the attacker will do is

647
00:24:26,000 --> 00:24:29,760
also go off and fetch the ballot chain

648
00:24:29,760 --> 00:24:30,640
from

649
00:24:30,640 --> 00:24:32,320
the victim

650
00:24:32,320 --> 00:24:34,640
and include it in the response to the

651
00:24:34,640 --> 00:24:35,679
app

652
00:24:35,679 --> 00:24:38,159
so they send two chains

653
00:24:38,159 --> 00:24:40,159
so the tls handshake is performed by the

654
00:24:40,159 --> 00:24:41,679
first chain

655
00:24:41,679 --> 00:24:42,480
and

656
00:24:42,480 --> 00:24:44,559
the pinning when the actual pinning is

657
00:24:44,559 --> 00:24:47,120
done the compare public key

658
00:24:47,120 --> 00:24:49,679
is done you know by one of these certs

659
00:24:49,679 --> 00:24:53,600
that you've just relayed basically

660
00:24:54,640 --> 00:24:56,480
so again the developer reference if you

661
00:24:56,480 --> 00:24:58,480
go to developer reference say like what

662
00:24:58,480 --> 00:25:00,159
does it say you're not going to pick

663
00:25:00,159 --> 00:25:01,200
this up

664
00:25:01,200 --> 00:25:03,440
it's very vague you're not you don't

665
00:25:03,440 --> 00:25:05,039
know that you're not getting

666
00:25:05,039 --> 00:25:08,000
a clean chain in that callback you're

667
00:25:08,000 --> 00:25:10,720
getting all the chain sent by the server

668
00:25:10,720 --> 00:25:12,640
so i'd like

669
00:25:12,640 --> 00:25:15,440
to try to have a more

670
00:25:15,440 --> 00:25:17,279
detailed problem definition you know pin

671
00:25:17,279 --> 00:25:18,960
a certificate to a trusted anchor that

672
00:25:18,960 --> 00:25:21,919
actually took part in the tls handshake

673
00:25:21,919 --> 00:25:23,840
whether this kind of better problem

674
00:25:23,840 --> 00:25:25,440
definition would have picked that up

675
00:25:25,440 --> 00:25:27,120
before this even happened because you

676
00:25:27,120 --> 00:25:28,640
know thousands of people would have gone

677
00:25:28,640 --> 00:25:31,279
to the cheat sheet copy that code and um

678
00:25:31,279 --> 00:25:33,279
stuck it in their apps

679
00:25:33,279 --> 00:25:34,159
whether this would have made a

680
00:25:34,159 --> 00:25:35,600
difference i don't know but it certainly

681
00:25:35,600 --> 00:25:37,440
was a very it's a very vague problem

682
00:25:37,440 --> 00:25:42,200
definition do certificate depending

683
00:25:42,240 --> 00:25:43,200
um

684
00:25:43,200 --> 00:25:45,520
and this was also

685
00:25:45,520 --> 00:25:47,760
uh this this problem was found in a

686
00:25:47,760 --> 00:25:50,240
number of uh libraries as well so there

687
00:25:50,240 --> 00:25:52,159
was a library called okay

688
00:25:52,159 --> 00:25:55,440
http and cbe 2016 something about it and

689
00:25:55,440 --> 00:25:57,520
you can read on the synopsis blog

690
00:25:57,520 --> 00:25:58,880
one of our guys

691
00:25:58,880 --> 00:26:00,400
um

692
00:26:00,400 --> 00:26:02,720
found it reported and and wrote about in

693
00:26:02,720 --> 00:26:04,000
more detail that i'm explaining to you

694
00:26:04,000 --> 00:26:06,159
now that's basically the same bug and i

695
00:26:06,159 --> 00:26:08,799
wouldn't be surprised if the okay http

696
00:26:08,799 --> 00:26:12,159
devs just copied the cheat sheet from os

697
00:26:12,159 --> 00:26:14,320
point about this is that like if those

698
00:26:14,320 --> 00:26:16,240
guys not get right

699
00:26:16,240 --> 00:26:17,600
you know that's just

700
00:26:17,600 --> 00:26:19,679
an indication of that

701
00:26:19,679 --> 00:26:21,200
security engineering solution

702
00:26:21,200 --> 00:26:24,080
engineering is is hard needs to be paid

703
00:26:24,080 --> 00:26:26,720
attention to

704
00:26:26,799 --> 00:26:29,360
am i doing time

705
00:26:29,360 --> 00:26:32,320
i'm already keeping

706
00:26:34,640 --> 00:26:36,080
when did that start

707
00:26:36,080 --> 00:26:37,440
gotta pass right

708
00:26:37,440 --> 00:26:39,520
okay that's good that's good okay

709
00:26:39,520 --> 00:26:41,120
so the next thing i want to do is talk

710
00:26:41,120 --> 00:26:42,799
about um

711
00:26:42,799 --> 00:26:45,840
tokens and cookies

712
00:26:47,679 --> 00:26:50,000
so here's the problem definition sort of

713
00:26:50,000 --> 00:26:51,279
problem statement

714
00:26:51,279 --> 00:26:53,919
can we please have all the benefits

715
00:26:53,919 --> 00:26:56,880
of cookies none of the downsides

716
00:26:56,880 --> 00:27:00,720
of cookies but with tokens

717
00:27:01,200 --> 00:27:04,000
and if we can do that then we get like a

718
00:27:04,000 --> 00:27:07,120
stateless architecture

719
00:27:07,120 --> 00:27:08,080
with

720
00:27:08,080 --> 00:27:09,200
all

721
00:27:09,200 --> 00:27:11,520
at least as secure as cookies all the

722
00:27:11,520 --> 00:27:13,840
benefits we don't want any of the of the

723
00:27:13,840 --> 00:27:15,919
faf

724
00:27:15,919 --> 00:27:17,440
but if we can have this kind of

725
00:27:17,440 --> 00:27:20,240
stateless architecture then

726
00:27:20,240 --> 00:27:21,679
we can just scale as much as we want

727
00:27:21,679 --> 00:27:23,760
we're not it's so easy to scale to be

728
00:27:23,760 --> 00:27:26,080
pushing all the stuff out to the

729
00:27:26,080 --> 00:27:28,720
to the clients

730
00:27:29,200 --> 00:27:32,799
now i should caveat this that

731
00:27:32,799 --> 00:27:35,440
this comparison of tokens versus cookies

732
00:27:35,440 --> 00:27:37,919
does not actually make sense

733
00:27:37,919 --> 00:27:38,960
um

734
00:27:38,960 --> 00:27:41,600
and um

735
00:27:41,600 --> 00:27:42,559
i mean

736
00:27:42,559 --> 00:27:45,039
comparing different things for here

737
00:27:45,039 --> 00:27:48,159
a cookie is a storage specification as

738
00:27:48,159 --> 00:27:50,159
well as a transport specification you

739
00:27:50,159 --> 00:27:52,720
know it says the cookie is um

740
00:27:52,720 --> 00:27:53,840
always going to be stored in the in

741
00:27:53,840 --> 00:27:55,440
their cookie jar

742
00:27:55,440 --> 00:27:56,960
and you can also specify how it's

743
00:27:56,960 --> 00:27:59,039
transported for example secure it's got

744
00:27:59,039 --> 00:28:00,640
a whole lot of rules about whether it

745
00:28:00,640 --> 00:28:02,559
can actually be sent back to the website

746
00:28:02,559 --> 00:28:05,520
so it's not but what can be what can be

747
00:28:05,520 --> 00:28:08,080
compared is like how people have tried

748
00:28:08,080 --> 00:28:10,000
to

749
00:28:10,000 --> 00:28:11,520
put this

750
00:28:11,520 --> 00:28:14,399
uh square peg in a round hole

751
00:28:14,399 --> 00:28:17,360
that we can look at

752
00:28:17,360 --> 00:28:19,520
so

753
00:28:20,240 --> 00:28:22,320
so let's just do a bit of a little bit

754
00:28:22,320 --> 00:28:23,600
of basic

755
00:28:23,600 --> 00:28:25,440
theory and review

756
00:28:25,440 --> 00:28:27,600
so we know how cookies work

757
00:28:27,600 --> 00:28:30,720
how they're stored in the cookie jar

758
00:28:30,720 --> 00:28:35,200
the browser attaches them to every

759
00:28:35,200 --> 00:28:38,080
request to the originating site

760
00:28:38,080 --> 00:28:40,480
and in the back end we usually will have

761
00:28:40,480 --> 00:28:42,640
some sort of state

762
00:28:42,640 --> 00:28:45,200
like a mapping off

763
00:28:45,200 --> 00:28:47,520
session cookie identifiers to actual

764
00:28:47,520 --> 00:28:50,000
session objects

765
00:28:50,000 --> 00:28:52,480
and a good thing about cookies is the

766
00:28:52,480 --> 00:28:54,080
browser will refuse to send them across

767
00:28:54,080 --> 00:28:56,320
domain i mean if you could get the

768
00:28:56,320 --> 00:28:58,720
cookie and exfiltrate it that would be a

769
00:28:58,720 --> 00:29:00,399
different thing but you know cookies are

770
00:29:00,399 --> 00:29:02,000
not cross-domain

771
00:29:02,000 --> 00:29:03,919
and that's a good thing

772
00:29:03,919 --> 00:29:06,320
because there's no way you can trick the

773
00:29:06,320 --> 00:29:08,960
browser into sending it to an attacker

774
00:29:08,960 --> 00:29:11,039
for example

775
00:29:11,039 --> 00:29:12,399
and this is important because i'll come

776
00:29:12,399 --> 00:29:14,559
back to this later

777
00:29:14,559 --> 00:29:16,159
this also means that it's not really

778
00:29:16,159 --> 00:29:19,279
possible to write modern apps

779
00:29:19,279 --> 00:29:22,279
you know because i can't i can't talk to

780
00:29:22,279 --> 00:29:24,480
api.other.com for example i you know

781
00:29:24,480 --> 00:29:27,600
actually i could do this if they were

782
00:29:27,600 --> 00:29:29,200
in the same domain and i had a weekly

783
00:29:29,200 --> 00:29:31,440
scope cookie but it's not the way things

784
00:29:31,440 --> 00:29:32,640
work in

785
00:29:32,640 --> 00:29:35,360
web 3.

786
00:29:35,440 --> 00:29:36,600
tokens on the other hand

787
00:29:36,600 --> 00:29:38,399
[Music]

788
00:29:38,399 --> 00:29:40,640
the idea here is that we take these the

789
00:29:40,640 --> 00:29:43,039
all the states and we just

790
00:29:43,039 --> 00:29:44,880
we just shift it over to the to the

791
00:29:44,880 --> 00:29:46,640
client

792
00:29:46,640 --> 00:29:48,880
and we sprinkle a bit of um

793
00:29:48,880 --> 00:29:50,960
you sprinkle a bit of um

794
00:29:50,960 --> 00:29:53,440
integrity maybe

795
00:29:53,440 --> 00:29:54,880
you want uh

796
00:29:54,880 --> 00:29:56,000
a bit of

797
00:29:56,000 --> 00:29:57,600
encryption because you're worried about

798
00:29:57,600 --> 00:30:00,000
confidentiality of some fields

799
00:30:00,000 --> 00:30:00,720
and

800
00:30:00,720 --> 00:30:03,360
and the problem with this

801
00:30:03,360 --> 00:30:05,440
diagram is not just what's in it it's

802
00:30:05,440 --> 00:30:07,360
what's not in it a lot of these things

803
00:30:07,360 --> 00:30:09,120
are implicit

804
00:30:09,120 --> 00:30:11,760
like the access control

805
00:30:11,760 --> 00:30:13,679
is all under one domain you know there's

806
00:30:13,679 --> 00:30:16,240
an access check for every request

807
00:30:16,240 --> 00:30:18,720
you know the user identity

808
00:30:18,720 --> 00:30:20,880
if you wanted to

809
00:30:20,880 --> 00:30:23,120
escalate privilege for the user like as

810
00:30:23,120 --> 00:30:25,120
in a role you could challenge to

811
00:30:25,120 --> 00:30:26,720
re-authenticate and you can have a flag

812
00:30:26,720 --> 00:30:28,640
associated with the session

813
00:30:28,640 --> 00:30:29,760
and

814
00:30:29,760 --> 00:30:32,159
it sounds obvious but the state the

815
00:30:32,159 --> 00:30:34,159
session object is not shared with other

816
00:30:34,159 --> 00:30:35,760
parties i mean that's like just an

817
00:30:35,760 --> 00:30:38,080
obvious thing it's it's here you know in

818
00:30:38,080 --> 00:30:40,000
in traditional websites here in the

819
00:30:40,000 --> 00:30:41,440
server

820
00:30:41,440 --> 00:30:42,640
sounds like a

821
00:30:42,640 --> 00:30:44,480
an obvious thing to say but actually

822
00:30:44,480 --> 00:30:46,000
when you move to cookies some of these

823
00:30:46,000 --> 00:30:48,240
things start to break down

824
00:30:48,240 --> 00:30:51,120
sorry tokens so if we look at tokens and

825
00:30:51,120 --> 00:30:52,559
let's imagine i have a single page

826
00:30:52,559 --> 00:30:54,799
application i have tokens here

827
00:30:54,799 --> 00:30:56,159
um

828
00:30:56,159 --> 00:30:58,960
with a token

829
00:30:59,120 --> 00:31:00,799
um typically

830
00:31:00,799 --> 00:31:03,360
is set in the authorization header as a

831
00:31:03,360 --> 00:31:06,000
bearer token which means

832
00:31:06,000 --> 00:31:08,720
a what's in the token grants the request

833
00:31:08,720 --> 00:31:10,399
to access to the requested resource

834
00:31:10,399 --> 00:31:14,720
provided the access token allows it

835
00:31:14,720 --> 00:31:17,200
and here the typical way of doing is in

836
00:31:17,200 --> 00:31:19,440
the authorization header

837
00:31:19,440 --> 00:31:21,600
um

838
00:31:21,600 --> 00:31:23,679
and of course there's no reason why you

839
00:31:23,679 --> 00:31:26,320
couldn't talk tokens now to the

840
00:31:26,320 --> 00:31:27,440
uh

841
00:31:27,440 --> 00:31:29,279
to the main site so you could start to

842
00:31:29,279 --> 00:31:31,840
split out the site into the the

843
00:31:31,840 --> 00:31:35,840
static elements and the api elements

844
00:31:36,399 --> 00:31:38,480
and there's no reason you couldn't put a

845
00:31:38,480 --> 00:31:40,320
token in a cookie

846
00:31:40,320 --> 00:31:41,440
right

847
00:31:41,440 --> 00:31:46,360
you could do that this is just a string

848
00:31:46,960 --> 00:31:49,039
and that's a problem this becomes a

849
00:31:49,039 --> 00:31:50,880
problem because unlike the

850
00:31:50,880 --> 00:31:52,399
the cookies

851
00:31:52,399 --> 00:31:53,440
now

852
00:31:53,440 --> 00:31:55,600
because the developer

853
00:31:55,600 --> 00:31:57,919
is responsible for

854
00:31:57,919 --> 00:31:59,600
attaching because you have to write

855
00:31:59,600 --> 00:32:01,600
javascript code you'll use a library

856
00:32:01,600 --> 00:32:03,600
with javascript code to attach the

857
00:32:03,600 --> 00:32:05,039
cookie in the authorization header

858
00:32:05,039 --> 00:32:07,840
before you send the request

859
00:32:07,840 --> 00:32:11,678
and that means you can make mistakes

860
00:32:12,399 --> 00:32:14,960
so like really simple

861
00:32:14,960 --> 00:32:17,600
easy mistake to make it's like imagine

862
00:32:17,600 --> 00:32:20,080
you're doing an allow list

863
00:32:20,080 --> 00:32:23,519
so you don't want the situation

864
00:32:23,519 --> 00:32:26,320
of sending it off to the attacker

865
00:32:26,320 --> 00:32:28,240
so you write you write something like if

866
00:32:28,240 --> 00:32:32,399
your url starts with hdbsmysite.com

867
00:32:32,399 --> 00:32:33,360
um

868
00:32:33,360 --> 00:32:35,840
then that's okay

869
00:32:35,840 --> 00:32:39,120
so like an obvious attack it's just too

870
00:32:39,120 --> 00:32:41,200
that's that's just a very feeble attack

871
00:32:41,200 --> 00:32:43,720
you know

872
00:32:43,720 --> 00:32:45,440
mysite.com

873
00:32:45,440 --> 00:32:48,399
attacker.com and this will bypass such a

874
00:32:48,399 --> 00:32:50,799
trivial check like this

875
00:32:50,799 --> 00:32:52,159
but then you get to like more

876
00:32:52,159 --> 00:32:53,440
complicated

877
00:32:53,440 --> 00:32:55,840
uh urls and the browser by the way does

878
00:32:55,840 --> 00:32:58,720
this already for you this kind of stuff

879
00:32:58,720 --> 00:33:01,600
but um no you have to reinvent the wheel

880
00:33:01,600 --> 00:33:04,720
and and um url parsing is incredibly

881
00:33:04,720 --> 00:33:06,320
tricky

882
00:33:06,320 --> 00:33:07,279
and

883
00:33:07,279 --> 00:33:10,880
they're always bypasses published

884
00:33:10,880 --> 00:33:12,559
but do you have to write this yourself

885
00:33:12,559 --> 00:33:14,880
or not you use a library for it but

886
00:33:14,880 --> 00:33:17,120
still

887
00:33:18,559 --> 00:33:22,320
this is not like this is not a good

888
00:33:22,840 --> 00:33:26,158
thing so

889
00:33:26,880 --> 00:33:28,559
there are only two theo slides and

890
00:33:28,559 --> 00:33:31,039
theory in here i promise

891
00:33:31,039 --> 00:33:32,480
because i just need to talk about this

892
00:33:32,480 --> 00:33:35,679
before the next few slides

893
00:33:36,159 --> 00:33:38,640
so um the first is just to

894
00:33:38,640 --> 00:33:40,080
give you a quick

895
00:33:40,080 --> 00:33:41,440
theoretical

896
00:33:41,440 --> 00:33:43,840
five second review of ours

897
00:33:43,840 --> 00:33:46,960
for wealth 2. in oauth

898
00:33:46,960 --> 00:33:49,600
you have the concept of a resource owner

899
00:33:49,600 --> 00:33:50,559
who's

900
00:33:50,559 --> 00:33:52,960
trying to delegate access

901
00:33:52,960 --> 00:33:55,039
to an entity who will

902
00:33:55,039 --> 00:33:56,799
act on his behalf

903
00:33:56,799 --> 00:34:00,080
to access some resource managed by

904
00:34:00,080 --> 00:34:02,640
the resource server

905
00:34:02,640 --> 00:34:05,840
and in order to do so

906
00:34:05,840 --> 00:34:08,159
via the user agent

907
00:34:08,159 --> 00:34:10,399
the resource owner will

908
00:34:10,399 --> 00:34:11,679
get a

909
00:34:11,679 --> 00:34:14,399
an access token to the oauth 2 client

910
00:34:14,399 --> 00:34:15,918
who wants to access

911
00:34:15,918 --> 00:34:18,079
the resource so an example would be i've

912
00:34:18,079 --> 00:34:20,399
got a whole lot of photos stored

913
00:34:20,399 --> 00:34:23,119
somewhere in some cloud storage provider

914
00:34:23,119 --> 00:34:25,440
i want to make use of a cloud printing

915
00:34:25,440 --> 00:34:27,359
app

916
00:34:27,359 --> 00:34:29,280
to print those photos for me

917
00:34:29,280 --> 00:34:30,719
so what do i do

918
00:34:30,719 --> 00:34:32,239
i get i

919
00:34:32,239 --> 00:34:33,119
via

920
00:34:33,119 --> 00:34:36,159
um i i permission

921
00:34:36,159 --> 00:34:39,599
the photo printing app

922
00:34:39,599 --> 00:34:41,760
um i permission the photo printing app

923
00:34:41,760 --> 00:34:43,599
to print a selected

924
00:34:43,599 --> 00:34:44,800
you know

925
00:34:44,800 --> 00:34:46,879
a restricted set of resources

926
00:34:46,879 --> 00:34:48,719
and the oauth 2 is just about doing a

927
00:34:48,719 --> 00:34:51,359
dance to get this access token to the

928
00:34:51,359 --> 00:34:55,359
oauth clients going to act on my behalf

929
00:34:55,440 --> 00:34:57,520
so the oauth client is going to get the

930
00:34:57,520 --> 00:34:59,040
access token

931
00:34:59,040 --> 00:35:00,480
and then it's going to present the

932
00:35:00,480 --> 00:35:03,520
access token to the resource server the

933
00:35:03,520 --> 00:35:05,520
resource server is going to do look at

934
00:35:05,520 --> 00:35:07,200
this token it's going to say what is

935
00:35:07,200 --> 00:35:09,680
this thing

936
00:35:10,320 --> 00:35:11,440
and in

937
00:35:11,440 --> 00:35:13,760
in the modern web world this

938
00:35:13,760 --> 00:35:16,160
these two entities even though they

939
00:35:16,160 --> 00:35:18,240
logically different they put together in

940
00:35:18,240 --> 00:35:20,560
the browser in a single page application

941
00:35:20,560 --> 00:35:22,560
so a single page application

942
00:35:22,560 --> 00:35:24,720
the client application and the user

943
00:35:24,720 --> 00:35:28,598
agent are one in the same

944
00:35:31,040 --> 00:35:33,680
last little bit of theory for you

945
00:35:33,680 --> 00:35:36,400
um we need to distinguish between

946
00:35:36,400 --> 00:35:37,520
um

947
00:35:37,520 --> 00:35:39,119
an opaque token

948
00:35:39,119 --> 00:35:40,640
it's just a

949
00:35:40,640 --> 00:35:43,440
a reference to another token

950
00:35:43,440 --> 00:35:45,760
and an assertion bearing token which

951
00:35:45,760 --> 00:35:48,320
encapsulates its own set of claims so

952
00:35:48,320 --> 00:35:50,800
that the claims are part of the token an

953
00:35:50,800 --> 00:35:53,359
example of that would be a jot

954
00:35:53,359 --> 00:35:54,560
charge

955
00:35:54,560 --> 00:35:56,400
there's a header which says how this

956
00:35:56,400 --> 00:35:58,960
thing is protected a set of claims

957
00:35:58,960 --> 00:36:01,920
payload and an hmac or signature which

958
00:36:01,920 --> 00:36:04,160
is the integrity protection

959
00:36:04,160 --> 00:36:07,520
whereas an opaque token is just a string

960
00:36:07,520 --> 00:36:10,240
that the authorization server can use to

961
00:36:10,240 --> 00:36:13,040
look up a key value pair and

962
00:36:13,040 --> 00:36:15,040
and that means it needs to maintain

963
00:36:15,040 --> 00:36:16,480
state

964
00:36:16,480 --> 00:36:19,040
and the other thing that needs to happen

965
00:36:19,040 --> 00:36:20,800
with opaque tokens

966
00:36:20,800 --> 00:36:22,880
is because the claims are not part of

967
00:36:22,880 --> 00:36:24,079
the token

968
00:36:24,079 --> 00:36:26,240
it requires an extra round trip the

969
00:36:26,240 --> 00:36:27,920
resource server

970
00:36:27,920 --> 00:36:29,839
gets the token and a request from the

971
00:36:29,839 --> 00:36:31,760
oauth client and says what is this token

972
00:36:31,760 --> 00:36:33,200
so it needs to go off to the

973
00:36:33,200 --> 00:36:35,440
authorization server by something called

974
00:36:35,440 --> 00:36:37,920
an introspection endpoint

975
00:36:37,920 --> 00:36:39,119
and the

976
00:36:39,119 --> 00:36:41,440
the authorization server returns a set

977
00:36:41,440 --> 00:36:42,880
of claims and then the resource server

978
00:36:42,880 --> 00:36:46,000
can say oh this is bob he's trying

979
00:36:46,000 --> 00:36:48,480
uh to print the photos and

980
00:36:48,480 --> 00:36:49,920
you know i've got

981
00:36:49,920 --> 00:36:52,240
an access token that allows whoever this

982
00:36:52,240 --> 00:36:52,960
is

983
00:36:52,960 --> 00:36:55,839
to to do so

984
00:36:55,839 --> 00:36:58,880
and this leads to our

985
00:36:58,880 --> 00:37:00,400
sort of

986
00:37:00,400 --> 00:37:01,680
next

987
00:37:01,680 --> 00:37:03,520
kind of vulnerability

988
00:37:03,520 --> 00:37:06,720
and which i'm calling a confusion bugger

989
00:37:06,720 --> 00:37:10,640
it's a confusion buy one get one free

990
00:37:12,160 --> 00:37:13,839
um

991
00:37:13,839 --> 00:37:17,359
so in a confusion bug off

992
00:37:17,359 --> 00:37:20,640
we have a confused deputy problem and we

993
00:37:20,640 --> 00:37:24,480
also have a token confusion attack

994
00:37:25,119 --> 00:37:27,680
so imagine that i have an evil oauth

995
00:37:27,680 --> 00:37:28,960
client

996
00:37:28,960 --> 00:37:33,680
and it's got an access token for bob

997
00:37:35,599 --> 00:37:38,000
a valid access token for bob

998
00:37:38,000 --> 00:37:40,240
and i have a confused oauth client an

999
00:37:40,240 --> 00:37:42,320
evil oauth client is going to try to

1000
00:37:42,320 --> 00:37:45,119
spoof bob

1001
00:37:45,680 --> 00:37:46,560
and

1002
00:37:46,560 --> 00:37:48,560
what's important about this scenario is

1003
00:37:48,560 --> 00:37:51,359
that evil oath client and confuse our

1004
00:37:51,359 --> 00:37:52,400
client

1005
00:37:52,400 --> 00:37:56,000
both share the same both trust the same

1006
00:37:56,000 --> 00:37:59,920
they use the same authorization server

1007
00:37:59,920 --> 00:38:01,920
so while bob is using

1008
00:38:01,920 --> 00:38:06,000
evil oauth clients um eventually as part

1009
00:38:06,000 --> 00:38:09,359
of our he'll get a token

1010
00:38:09,359 --> 00:38:11,599
and an evil oauth client

1011
00:38:11,599 --> 00:38:13,920
can then use that token and present it

1012
00:38:13,920 --> 00:38:16,720
to confused our world client

1013
00:38:16,720 --> 00:38:18,320
and confuse our clients going to say

1014
00:38:18,320 --> 00:38:20,160
what is this i have no idea what this

1015
00:38:20,160 --> 00:38:22,400
user's given this this

1016
00:38:22,400 --> 00:38:24,400
bearer token to me

1017
00:38:24,400 --> 00:38:26,720
and it's going to say okay authorization

1018
00:38:26,720 --> 00:38:28,400
server

1019
00:38:28,400 --> 00:38:30,560
what is this token you're trying to do

1020
00:38:30,560 --> 00:38:31,520
blah

1021
00:38:31,520 --> 00:38:34,160
and i've just received this token and

1022
00:38:34,160 --> 00:38:35,920
the authorization the introspection

1023
00:38:35,920 --> 00:38:37,119
endpoint is going to return a set of

1024
00:38:37,119 --> 00:38:38,640
claims

1025
00:38:38,640 --> 00:38:42,640
and one of them is going to say uses bob

1026
00:38:42,640 --> 00:38:43,520
and

1027
00:38:43,520 --> 00:38:45,040
the confused oauth client is going to

1028
00:38:45,040 --> 00:38:47,680
say you must be bob how do we know that

1029
00:38:47,680 --> 00:38:49,839
you are bubble says right there it's in

1030
00:38:49,839 --> 00:38:50,960
yellow

1031
00:38:50,960 --> 00:38:52,320
bob

1032
00:38:52,320 --> 00:38:54,320
and so

1033
00:38:54,320 --> 00:38:56,720
in this way evil oauth client

1034
00:38:56,720 --> 00:38:58,320
can spoof bob

1035
00:38:58,320 --> 00:39:01,040
to the confused client and this is a a

1036
00:39:01,040 --> 00:39:02,240
bug off

1037
00:39:02,240 --> 00:39:04,320
confused confusion attack

1038
00:39:04,320 --> 00:39:07,520
because this is an access token

1039
00:39:07,520 --> 00:39:09,760
and it's here it's being abused as an

1040
00:39:09,760 --> 00:39:12,839
identity token this was a

1041
00:39:12,839 --> 00:39:15,359
a vulnerability that happened quite a

1042
00:39:15,359 --> 00:39:16,640
few sites

1043
00:39:16,640 --> 00:39:17,680
now

1044
00:39:17,680 --> 00:39:21,280
this was kind of solved with um

1045
00:39:21,280 --> 00:39:25,040
solved with open id connect

1046
00:39:25,040 --> 00:39:26,960
and they introduced a standard set of

1047
00:39:26,960 --> 00:39:29,359
claims and one of them was the audience

1048
00:39:29,359 --> 00:39:32,400
who is the audience of this token

1049
00:39:32,400 --> 00:39:33,920
so in this case

1050
00:39:33,920 --> 00:39:35,760
you know open id connect solves this

1051
00:39:35,760 --> 00:39:37,680
because the audience for this token is

1052
00:39:37,680 --> 00:39:41,040
evil site so when confused confused site

1053
00:39:41,040 --> 00:39:43,520
gets the token says who is this for

1054
00:39:43,520 --> 00:39:44,320
ah

1055
00:39:44,320 --> 00:39:45,920
it's not for me i'm going to reject this

1056
00:39:45,920 --> 00:39:48,320
token

1057
00:39:49,680 --> 00:39:52,560
and in this way

1058
00:39:53,040 --> 00:39:56,240
the evil oath client can actually just

1059
00:39:56,240 --> 00:39:58,880
as just as you do with session hijacking

1060
00:39:58,880 --> 00:39:59,920
you know

1061
00:39:59,920 --> 00:40:02,400
you present a token that says bob so you

1062
00:40:02,400 --> 00:40:04,560
confuse client and then confuse client

1063
00:40:04,560 --> 00:40:06,720
says you must be bob i'm going to log

1064
00:40:06,720 --> 00:40:08,319
you in

1065
00:40:08,319 --> 00:40:11,280
and now you can do all the things that

1066
00:40:11,280 --> 00:40:14,319
bob would be able to do

1067
00:40:14,319 --> 00:40:16,160
so the need for identity and session

1068
00:40:16,160 --> 00:40:18,160
management didn't go away you know there

1069
00:40:18,160 --> 00:40:20,240
was still a there was still a need in

1070
00:40:20,240 --> 00:40:22,560
these apps for this kind of stuff it

1071
00:40:22,560 --> 00:40:24,960
just it just got lost

1072
00:40:24,960 --> 00:40:26,960
in the sort of transition from cookies

1073
00:40:26,960 --> 00:40:29,200
to tokens

1074
00:40:29,200 --> 00:40:30,960
but these kind of things were implicit

1075
00:40:30,960 --> 00:40:34,160
in the original solution

1076
00:40:34,160 --> 00:40:36,640
and they're all like i'll give you i'm

1077
00:40:36,640 --> 00:40:37,599
gonna go through the bottom one but

1078
00:40:37,599 --> 00:40:39,119
they're more examples of this kind of

1079
00:40:39,119 --> 00:40:40,560
thing

1080
00:40:40,560 --> 00:40:42,720
so an example would be

1081
00:40:42,720 --> 00:40:45,440
malicious resource owner

1082
00:40:45,440 --> 00:40:48,560
wants to access the admin interface

1083
00:40:48,560 --> 00:40:51,279
on the site

1084
00:40:51,359 --> 00:40:52,800
and they have

1085
00:40:52,800 --> 00:40:53,520
a

1086
00:40:53,520 --> 00:40:57,119
a token for bob

1087
00:40:57,200 --> 00:40:59,920
uh that says role admin

1088
00:40:59,920 --> 00:41:02,160
but the scope which is the permission

1089
00:41:02,160 --> 00:41:04,799
says view

1090
00:41:05,359 --> 00:41:06,160
uh

1091
00:41:06,160 --> 00:41:07,920
and so in this case the server should

1092
00:41:07,920 --> 00:41:09,280
reject it

1093
00:41:09,280 --> 00:41:10,800
or another example would be at the

1094
00:41:10,800 --> 00:41:11,760
bottom

1095
00:41:11,760 --> 00:41:14,480
uh bob has two tokens he has an identity

1096
00:41:14,480 --> 00:41:16,560
token that says who he is

1097
00:41:16,560 --> 00:41:17,520
um

1098
00:41:17,520 --> 00:41:20,800
and he has an access token that's also

1099
00:41:20,800 --> 00:41:21,839
has

1100
00:41:21,839 --> 00:41:23,920
the permission view whatever the view

1101
00:41:23,920 --> 00:41:25,760
permission might mean and that's in the

1102
00:41:25,760 --> 00:41:27,440
part of the scope claim

1103
00:41:27,440 --> 00:41:29,280
now we see this kind of thing

1104
00:41:29,280 --> 00:41:30,240
this

1105
00:41:30,240 --> 00:41:33,118
sort of thing happening

1106
00:41:33,359 --> 00:41:35,839
a fair bit

1107
00:41:35,839 --> 00:41:38,319
um so they're sort of new opportunities

1108
00:41:38,319 --> 00:41:41,680
for authorization failures

1109
00:41:43,040 --> 00:41:45,200
this something similar to this actually

1110
00:41:45,200 --> 00:41:47,280
did happen with facebook the view as

1111
00:41:47,280 --> 00:41:49,520
feature not quite the same thing

1112
00:41:49,520 --> 00:41:51,680
but you could view something

1113
00:41:51,680 --> 00:41:53,440
uh you know what would it what would my

1114
00:41:53,440 --> 00:41:55,200
what would it look like if i was someone

1115
00:41:55,200 --> 00:41:58,799
else you i don't use facebook

1116
00:41:59,040 --> 00:42:00,839
most of you probably use

1117
00:42:00,839 --> 00:42:04,000
facebook um but the problem there was um

1118
00:42:04,000 --> 00:42:06,720
what facebook did was it dished out a

1119
00:42:06,720 --> 00:42:07,760
token

1120
00:42:07,760 --> 00:42:09,920
that actually wasn't just restricted to

1121
00:42:09,920 --> 00:42:11,839
viewing

1122
00:42:11,839 --> 00:42:13,680
the resource right you could do a whole

1123
00:42:13,680 --> 00:42:15,440
lot of other stuff so it's just an over

1124
00:42:15,440 --> 00:42:17,920
permissioned token so somewhat similar

1125
00:42:17,920 --> 00:42:20,720
not quite the same

1126
00:42:22,800 --> 00:42:24,400
so another question is where can i store

1127
00:42:24,400 --> 00:42:25,680
the token

1128
00:42:25,680 --> 00:42:27,200
i have this token

1129
00:42:27,200 --> 00:42:29,839
i'm in the browser what do i do with it

1130
00:42:29,839 --> 00:42:31,680
you've got a few options you can try and

1131
00:42:31,680 --> 00:42:33,680
hide it in the dom maybe you stick in

1132
00:42:33,680 --> 00:42:36,000
the dom somewhere maybe you split it up

1133
00:42:36,000 --> 00:42:38,000
into multiple components and you

1134
00:42:38,000 --> 00:42:41,599
cleverly reassemble it

1135
00:42:41,760 --> 00:42:43,280
you could use local storage session

1136
00:42:43,280 --> 00:42:44,640
storage

1137
00:42:44,640 --> 00:42:46,960
uh you could put it in the cookie jar

1138
00:42:46,960 --> 00:42:49,119
it wouldn't be http only it might be

1139
00:42:49,119 --> 00:42:51,359
secure but it wouldn't be actually only

1140
00:42:51,359 --> 00:42:53,839
anymore um you could do that and there's

1141
00:42:53,839 --> 00:42:56,079
probably some more advanced things

1142
00:42:56,079 --> 00:42:59,359
so the problem is i mean a cross-site

1143
00:42:59,359 --> 00:43:02,078
scripting attack

1144
00:43:02,400 --> 00:43:05,040
can modify or read this token because

1145
00:43:05,040 --> 00:43:05,920
it's

1146
00:43:05,920 --> 00:43:08,000
that's by definition you stick in the

1147
00:43:08,000 --> 00:43:10,079
dom you stick in in local storage

1148
00:43:10,079 --> 00:43:12,160
whatever you have an xss it can read

1149
00:43:12,160 --> 00:43:14,319
that token exfiltrate the token i should

1150
00:43:14,319 --> 00:43:16,720
point out that if you have an xss

1151
00:43:16,720 --> 00:43:18,400
that's probably still in the tokens for

1152
00:43:18,400 --> 00:43:21,040
the least of your worries but

1153
00:43:21,040 --> 00:43:22,400
so um

1154
00:43:22,400 --> 00:43:25,280
so this is called dubsidejacking

1155
00:43:25,280 --> 00:43:27,359
it's been dubside jacking quite a long

1156
00:43:27,359 --> 00:43:29,839
time ago i don't like the term but i

1157
00:43:29,839 --> 00:43:31,920
never when i saw sijacking and no idea

1158
00:43:31,920 --> 00:43:34,000
what it doesn't tell you what it means

1159
00:43:34,000 --> 00:43:36,720
but sidetracking is effectively reading

1160
00:43:36,720 --> 00:43:38,000
reading the cookie or the token

1161
00:43:38,000 --> 00:43:39,359
exfiltrating

1162
00:43:39,359 --> 00:43:41,839
so like um i shouldn't be able to steal

1163
00:43:41,839 --> 00:43:43,200
a session cookie this way because it

1164
00:43:43,200 --> 00:43:46,319
would be hdb only

1165
00:43:46,319 --> 00:43:51,040
but i could steal a token this way

1166
00:43:51,440 --> 00:43:53,520
so what you know this what do you do

1167
00:43:53,520 --> 00:43:55,520
about this because now this is less

1168
00:43:55,520 --> 00:43:57,920
secure somewhat less very small like

1169
00:43:57,920 --> 00:44:00,000
exploit vector but still

1170
00:44:00,000 --> 00:44:02,400
uh you could do a few things like

1171
00:44:02,400 --> 00:44:03,760
there's some clever tricks i won't go

1172
00:44:03,760 --> 00:44:06,000
into them but they don't actually solve

1173
00:44:06,000 --> 00:44:07,119
the problem they just make it a bit

1174
00:44:07,119 --> 00:44:09,119
harder

1175
00:44:09,119 --> 00:44:10,880
what does os say

1176
00:44:10,880 --> 00:44:12,000
i'm not

1177
00:44:12,000 --> 00:44:14,480
knocking os by the way just a caveat but

1178
00:44:14,480 --> 00:44:17,359
what what did they say

1179
00:44:17,760 --> 00:44:20,319
so they say about psyjacking

1180
00:44:20,319 --> 00:44:23,200
use a cookie

1181
00:44:23,200 --> 00:44:24,720
what you do is you

1182
00:44:24,720 --> 00:44:25,920
generally

1183
00:44:25,920 --> 00:44:28,319
generate a cookie with a special random

1184
00:44:28,319 --> 00:44:29,680
value

1185
00:44:29,680 --> 00:44:32,000
and you hash that random value and stick

1186
00:44:32,000 --> 00:44:34,640
it in the token

1187
00:44:34,640 --> 00:44:36,319
and and so this prevents doesn't

1188
00:44:36,319 --> 00:44:37,920
actually prevent psi jacking it just

1189
00:44:37,920 --> 00:44:39,280
prevents you

1190
00:44:39,280 --> 00:44:41,599
using it from outside of

1191
00:44:41,599 --> 00:44:44,000
the browser session because if you if i

1192
00:44:44,000 --> 00:44:46,480
steal the steal the token try and play

1193
00:44:46,480 --> 00:44:47,680
from somewhere else i'm not going to

1194
00:44:47,680 --> 00:44:50,240
have this cookie but i found it kind of

1195
00:44:50,240 --> 00:44:51,440
ironic

1196
00:44:51,440 --> 00:44:53,599
that this is not a

1197
00:44:53,599 --> 00:44:55,760
this does not prevent it it just

1198
00:44:55,760 --> 00:44:57,280
binds it

1199
00:44:57,280 --> 00:45:00,079
to the user session in the browser

1200
00:45:00,079 --> 00:45:01,920
but i find it somewhat ironic that

1201
00:45:01,920 --> 00:45:04,480
they're recommending using a cookie to

1202
00:45:04,480 --> 00:45:06,240
protect a token

1203
00:45:06,240 --> 00:45:08,240
uh and once you do this you lose all the

1204
00:45:08,240 --> 00:45:10,720
other benefits of tokens it's really

1205
00:45:10,720 --> 00:45:12,880
then then it is bound

1206
00:45:12,880 --> 00:45:16,240
uh it's not it's not cross-domain as a

1207
00:45:16,240 --> 00:45:19,720
token would be

1208
00:45:22,000 --> 00:45:24,880
so this has a happy ending maybe

1209
00:45:24,880 --> 00:45:27,280
this is kind of new

1210
00:45:27,280 --> 00:45:29,520
um

1211
00:45:30,079 --> 00:45:32,400
so what uh what there's a bit of

1212
00:45:32,400 --> 00:45:34,720
consensus now is that you should take

1213
00:45:34,720 --> 00:45:37,440
those tokens back out of the browser and

1214
00:45:37,440 --> 00:45:39,440
move them back to the server move them

1215
00:45:39,440 --> 00:45:41,359
back to the back end

1216
00:45:41,359 --> 00:45:43,440
which is uh they've been moved to the to

1217
00:45:43,440 --> 00:45:44,880
the client side and now they actually

1218
00:45:44,880 --> 00:45:47,280
put back in the

1219
00:45:47,280 --> 00:45:48,079
in

1220
00:45:48,079 --> 00:45:50,720
in the in the back end um and what you

1221
00:45:50,720 --> 00:45:53,520
do is you sort of move the the logic of

1222
00:45:53,520 --> 00:45:56,240
the oauth the oauth logic you rip it

1223
00:45:56,240 --> 00:45:57,760
back out the browser stick in the back

1224
00:45:57,760 --> 00:45:59,359
end and then you can

1225
00:45:59,359 --> 00:46:02,480
you can securely manage secrets

1226
00:46:02,480 --> 00:46:04,800
um and then you replace the

1227
00:46:04,800 --> 00:46:06,560
the communication between the browser

1228
00:46:06,560 --> 00:46:07,920
and the server and this is the back this

1229
00:46:07,920 --> 00:46:10,079
is the back end for front end pattern

1230
00:46:10,079 --> 00:46:11,920
and which is very similar to the api

1231
00:46:11,920 --> 00:46:13,839
gateway pattern

1232
00:46:13,839 --> 00:46:15,760
but the idea is that service is a single

1233
00:46:15,760 --> 00:46:17,920
type of client and does you know it's

1234
00:46:17,920 --> 00:46:20,319
the single responsibility principle to

1235
00:46:20,319 --> 00:46:22,079
do one thing

1236
00:46:22,079 --> 00:46:24,960
and so what happens is that

1237
00:46:24,960 --> 00:46:26,480
you use a normal session cookie for

1238
00:46:26,480 --> 00:46:29,520
session management put the tokens uh

1239
00:46:29,520 --> 00:46:31,520
securely in the back end and then this

1240
00:46:31,520 --> 00:46:33,680
this back end can be

1241
00:46:33,680 --> 00:46:36,640
a confidential oauth client so it can

1242
00:46:36,640 --> 00:46:38,720
actually authenticate to the resource

1243
00:46:38,720 --> 00:46:41,720
server

1244
00:46:44,400 --> 00:46:46,240
so

1245
00:46:46,240 --> 00:46:48,640
summary

1246
00:46:48,640 --> 00:46:52,319
fixing things is actually quite hard

1247
00:46:52,319 --> 00:46:54,400
defining the problem correctly is really

1248
00:46:54,400 --> 00:46:57,040
really really really really really

1249
00:46:57,040 --> 00:46:59,520
important

1250
00:47:00,160 --> 00:47:02,319
so a lot of problem domains have

1251
00:47:02,319 --> 00:47:04,560
implicit properties that

1252
00:47:04,560 --> 00:47:06,400
because they're implicit like the cookie

1253
00:47:06,400 --> 00:47:08,400
you know all these things were

1254
00:47:08,400 --> 00:47:10,720
not sharing um

1255
00:47:10,720 --> 00:47:12,960
not sharing trust with another site this

1256
00:47:12,960 --> 00:47:15,599
was also the implicit properties of

1257
00:47:15,599 --> 00:47:16,880
of

1258
00:47:16,880 --> 00:47:19,200
uh original architecture that is because

1259
00:47:19,200 --> 00:47:21,760
of implicit you sort of forgot about it

1260
00:47:21,760 --> 00:47:24,240
so it's easy to miss them

1261
00:47:24,240 --> 00:47:25,920
you will be hit by

1262
00:47:25,920 --> 00:47:27,920
curveballs from time to time even though

1263
00:47:27,920 --> 00:47:30,319
you spend a lot of time breaking stuff

1264
00:47:30,319 --> 00:47:32,480
you'll need to write a mitigation

1265
00:47:32,480 --> 00:47:34,400
and sometimes actually thinking about

1266
00:47:34,400 --> 00:47:36,400
that how you fix that is not

1267
00:47:36,400 --> 00:47:38,800
quite as easy as you thought it would be

1268
00:47:38,800 --> 00:47:39,920
but

1269
00:47:39,920 --> 00:47:41,599
just awareness

1270
00:47:41,599 --> 00:47:43,359
of that fact is

1271
00:47:43,359 --> 00:47:46,319
a good place to start

1272
00:47:47,760 --> 00:47:51,000
thank you

