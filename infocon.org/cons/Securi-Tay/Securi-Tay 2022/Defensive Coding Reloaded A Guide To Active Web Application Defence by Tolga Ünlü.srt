1
00:00:04,799 --> 00:00:08,639
uh hi everyone and uh yeah i will get

2
00:00:08,639 --> 00:00:12,160
started with my lightning talk um

3
00:00:12,160 --> 00:00:14,400
so

4
00:00:14,799 --> 00:00:17,119
first of all just a brief introduction

5
00:00:17,119 --> 00:00:19,520
introduction to myself so i'm one of the

6
00:00:19,520 --> 00:00:21,680
phd students here at the uh avatar

7
00:00:21,680 --> 00:00:22,800
university

8
00:00:22,800 --> 00:00:24,080
previously i

9
00:00:24,080 --> 00:00:26,880
worked as a web developer in a startup

10
00:00:26,880 --> 00:00:29,119
environment back in germany where i'm

11
00:00:29,119 --> 00:00:30,720
originally from

12
00:00:30,720 --> 00:00:31,599
and

13
00:00:31,599 --> 00:00:34,160
like before also starting working as the

14
00:00:34,160 --> 00:00:37,920
local i already had interest in security

15
00:00:37,920 --> 00:00:40,000
and especially like the

16
00:00:40,000 --> 00:00:41,040
uh

17
00:00:41,040 --> 00:00:43,120
like the topics that intersect both of

18
00:00:43,120 --> 00:00:46,160
development and security which led me to

19
00:00:46,160 --> 00:00:48,719
this path of looking more into intrusion

20
00:00:48,719 --> 00:00:53,199
detection and also deception techniques

21
00:00:54,399 --> 00:00:56,800
so i'm directly jumping into the topic

22
00:00:56,800 --> 00:00:59,440
of the talk today

23
00:00:59,440 --> 00:01:01,760
i want to start actually with the title

24
00:01:01,760 --> 00:01:04,000
that i chose because

25
00:01:04,000 --> 00:01:06,080
when i was thinking

26
00:01:06,080 --> 00:01:11,040
also during writing my phd thesis

27
00:01:11,040 --> 00:01:13,520
because it's more a software engineering

28
00:01:13,520 --> 00:01:16,080
uh topic which i think

29
00:01:16,080 --> 00:01:18,000
and what are like some related

30
00:01:18,000 --> 00:01:20,400
techniques or approaches that exist out

31
00:01:20,400 --> 00:01:21,280
there

32
00:01:21,280 --> 00:01:23,360
and if you have come across like

33
00:01:23,360 --> 00:01:26,080
defensive uh coding or programming so

34
00:01:26,080 --> 00:01:27,920
this is mostly about

35
00:01:27,920 --> 00:01:31,200
building software applications that

36
00:01:31,200 --> 00:01:33,840
can still operate normally in the face

37
00:01:33,840 --> 00:01:34,799
of

38
00:01:34,799 --> 00:01:38,159
unforeseen events or can also

39
00:01:38,159 --> 00:01:41,280
recover from any error stages and i was

40
00:01:41,280 --> 00:01:43,520
thinking this is actually a super cool

41
00:01:43,520 --> 00:01:45,680
thing to have like as a capability in

42
00:01:45,680 --> 00:01:47,200
application

43
00:01:47,200 --> 00:01:48,960
and

44
00:01:48,960 --> 00:01:51,119
how can we like also use that like for

45
00:01:51,119 --> 00:01:53,119
security purposes so

46
00:01:53,119 --> 00:01:55,360
having capabilities built in your

47
00:01:55,360 --> 00:01:56,799
application

48
00:01:56,799 --> 00:01:59,840
um that understands like indicators of

49
00:01:59,840 --> 00:02:02,960
attacks and can do something uh at that

50
00:02:02,960 --> 00:02:04,079
moment

51
00:02:04,079 --> 00:02:05,200
so there are

52
00:02:05,200 --> 00:02:07,040
um

53
00:02:07,040 --> 00:02:09,280
actually two or two ways which i'm going

54
00:02:09,280 --> 00:02:12,239
to um present here in this slide

55
00:02:12,239 --> 00:02:13,680
so the first one

56
00:02:13,680 --> 00:02:16,080
and you can perhaps see on the on the

57
00:02:16,080 --> 00:02:18,319
based on the examples uh here in the

58
00:02:18,319 --> 00:02:21,200
code so it's more about looking at very

59
00:02:21,200 --> 00:02:23,599
distinctive indicators rather than using

60
00:02:23,599 --> 00:02:25,040
signatures

61
00:02:25,040 --> 00:02:27,599
and you can either choose to

62
00:02:27,599 --> 00:02:29,680
invent your own indicators or basically

63
00:02:29,680 --> 00:02:31,040
honey tokens

64
00:02:31,040 --> 00:02:32,800
and you can

65
00:02:32,800 --> 00:02:35,519
pick up any web security resource you're

66
00:02:35,519 --> 00:02:38,160
familiar with and then choose like those

67
00:02:38,160 --> 00:02:39,519
locations

68
00:02:39,519 --> 00:02:41,360
that are usually

69
00:02:41,360 --> 00:02:43,760
like the target during a web application

70
00:02:43,760 --> 00:02:46,400
security assessment for example so any

71
00:02:46,400 --> 00:02:48,720
suspicious looking parameter like a

72
00:02:48,720 --> 00:02:51,200
debug parameter where you know that an

73
00:02:51,200 --> 00:02:52,480
attacker

74
00:02:52,480 --> 00:02:56,480
most likely will play around with that

75
00:02:56,480 --> 00:02:58,239
the second approach is

76
00:02:58,239 --> 00:03:01,519
so for me also speaking as a developer

77
00:03:01,519 --> 00:03:04,000
also very interesting because that's

78
00:03:04,000 --> 00:03:06,400
when i was coming across the first time

79
00:03:06,400 --> 00:03:07,440
when i

80
00:03:07,440 --> 00:03:08,879
um

81
00:03:08,879 --> 00:03:12,000
read about the obas absence of project

82
00:03:12,000 --> 00:03:15,120
and the idea that they promote is

83
00:03:15,120 --> 00:03:18,800
to make use of existing or built-in

84
00:03:18,800 --> 00:03:21,519
validation controls in your application

85
00:03:21,519 --> 00:03:24,480
because they are also exception handlers

86
00:03:24,480 --> 00:03:27,840
because they will most likely

87
00:03:27,840 --> 00:03:29,760
or in many cases they will already look

88
00:03:29,760 --> 00:03:32,000
for certain things which are interesting

89
00:03:32,000 --> 00:03:34,560
from our security perspective so in that

90
00:03:34,560 --> 00:03:35,920
example here

91
00:03:35,920 --> 00:03:38,640
um the client

92
00:03:38,640 --> 00:03:40,720
so i'm checking here if a hidden input

93
00:03:40,720 --> 00:03:42,000
has been changed

94
00:03:42,000 --> 00:03:44,239
because a client should normally be not

95
00:03:44,239 --> 00:03:46,400
able to actually change any hidden input

96
00:03:46,400 --> 00:03:47,920
so that's not

97
00:03:47,920 --> 00:03:50,879
part of what a normal user

98
00:03:50,879 --> 00:03:52,480
should be able to do

99
00:03:52,480 --> 00:03:55,360
and here you can

100
00:03:55,360 --> 00:03:56,959
actually

101
00:03:56,959 --> 00:03:58,879
then start thinking okay this might be a

102
00:03:58,879 --> 00:04:01,519
user who has like an interception proxy

103
00:04:01,519 --> 00:04:02,400
and

104
00:04:02,400 --> 00:04:05,840
plays around with the request

105
00:04:06,159 --> 00:04:08,239
so

106
00:04:08,239 --> 00:04:10,400
the other question is of course why

107
00:04:10,400 --> 00:04:12,319
should like a development team or

108
00:04:12,319 --> 00:04:14,319
developer invest into this approach and

109
00:04:14,319 --> 00:04:16,478
why is it actually something

110
00:04:16,478 --> 00:04:20,160
worth doing and i think

111
00:04:20,160 --> 00:04:22,320
if you have reached like a point where

112
00:04:22,320 --> 00:04:25,199
you have some security controls in place

113
00:04:25,199 --> 00:04:27,520
then you also want to consolidate the

114
00:04:27,520 --> 00:04:29,120
knowledge that you think

115
00:04:29,120 --> 00:04:31,759
you know about your security controls or

116
00:04:31,759 --> 00:04:33,680
about the security

117
00:04:33,680 --> 00:04:36,240
posture of your application

118
00:04:36,240 --> 00:04:37,199
and

119
00:04:37,199 --> 00:04:39,199
with those detectors in place so you

120
00:04:39,199 --> 00:04:40,240
have

121
00:04:40,240 --> 00:04:42,400
they can take like different roles or

122
00:04:42,400 --> 00:04:45,440
they can be like smoke detectors telling

123
00:04:45,440 --> 00:04:47,120
you that there's something

124
00:04:47,120 --> 00:04:50,080
uh going on that you should be aware of

125
00:04:50,080 --> 00:04:52,080
or in the worst case they can be like

126
00:04:52,080 --> 00:04:54,479
fire alarms saying hey your application

127
00:04:54,479 --> 00:04:56,000
is actually

128
00:04:56,000 --> 00:04:57,680
experiencing as

129
00:04:57,680 --> 00:05:00,000
a severe security issue

130
00:05:00,000 --> 00:05:02,000
and

131
00:05:02,000 --> 00:05:04,720
like while looking for uh

132
00:05:04,720 --> 00:05:07,039
good examples like in the practical

133
00:05:07,039 --> 00:05:07,919
world

134
00:05:07,919 --> 00:05:10,240
i was coming across this talk by saying

135
00:05:10,240 --> 00:05:11,600
leki on

136
00:05:11,600 --> 00:05:12,800
uh

137
00:05:12,800 --> 00:05:14,720
so this was a keynote talk from

138
00:05:14,720 --> 00:05:17,520
devsecond he was pointing out in one

139
00:05:17,520 --> 00:05:20,080
part of the talk on this idea of having

140
00:05:20,080 --> 00:05:23,039
continuous feedback uh coming from

141
00:05:23,039 --> 00:05:25,520
like real events from a production

142
00:05:25,520 --> 00:05:26,560
environment

143
00:05:26,560 --> 00:05:28,320
and also to make them visible and i

144
00:05:28,320 --> 00:05:32,080
found this example really uh

145
00:05:32,080 --> 00:05:35,039
like interesting also as a

146
00:05:35,039 --> 00:05:36,800
like milestone to achieve from a

147
00:05:36,800 --> 00:05:38,800
development perspective that you can

148
00:05:38,800 --> 00:05:39,680
really

149
00:05:39,680 --> 00:05:41,039
um

150
00:05:41,039 --> 00:05:42,800
be in a position

151
00:05:42,800 --> 00:05:44,639
where

152
00:05:44,639 --> 00:05:46,800
at the point where you have like an

153
00:05:46,800 --> 00:05:49,600
exploit a successful exploit that you

154
00:05:49,600 --> 00:05:52,080
can know about this and also fix that

155
00:05:52,080 --> 00:05:54,720
issue and in this example they were

156
00:05:54,720 --> 00:05:58,080
able actually to fix it right before uh

157
00:05:58,080 --> 00:06:00,080
the background jumper was able to email

158
00:06:00,080 --> 00:06:04,560
them so i found this uh really cool

159
00:06:04,560 --> 00:06:08,000
and yeah um i think when you are

160
00:06:08,000 --> 00:06:10,639
attempting to answer that question you

161
00:06:10,639 --> 00:06:13,039
perhaps also start thinking yeah how am

162
00:06:13,039 --> 00:06:14,800
i going to start with this

163
00:06:14,800 --> 00:06:15,680
and

164
00:06:15,680 --> 00:06:19,440
i think a good starting point um

165
00:06:19,440 --> 00:06:21,039
can be

166
00:06:21,039 --> 00:06:23,360
the frameworks that your applications

167
00:06:23,360 --> 00:06:25,600
are most likely built with and this is

168
00:06:25,600 --> 00:06:28,000
also so a part of my research which i'm

169
00:06:28,000 --> 00:06:31,199
focusing on like to what extent can

170
00:06:31,199 --> 00:06:33,600
frameworks be

171
00:06:33,600 --> 00:06:37,680
helpful to achieve this or to achieve to

172
00:06:37,680 --> 00:06:39,360
implement this approach

173
00:06:39,360 --> 00:06:41,520
i'm just showing a

174
00:06:41,520 --> 00:06:42,960
very small

175
00:06:42,960 --> 00:06:46,080
demo application

176
00:06:47,199 --> 00:06:50,479
which is based on a framework called

177
00:06:50,479 --> 00:06:51,680
lumen

178
00:06:51,680 --> 00:06:53,039
um

179
00:06:53,039 --> 00:06:55,199
so the application is really uh

180
00:06:55,199 --> 00:06:59,199
straightforward there's two endpoints

181
00:06:59,199 --> 00:07:01,360
both of the endpoints are displaying

182
00:07:01,360 --> 00:07:05,280
data in different formats so

183
00:07:06,319 --> 00:07:08,639
this

184
00:07:09,520 --> 00:07:11,599
yeah one has a csv

185
00:07:11,599 --> 00:07:14,840
and the other one is a json

186
00:07:14,840 --> 00:07:16,400
and

187
00:07:16,400 --> 00:07:19,120
so the database has some entries which

188
00:07:19,120 --> 00:07:20,319
have

189
00:07:20,319 --> 00:07:22,240
which you will see um

190
00:07:22,240 --> 00:07:24,479
here

191
00:07:24,479 --> 00:07:26,720
some entries starting with an equal sign

192
00:07:26,720 --> 00:07:29,360
because this was a situation i had

193
00:07:29,360 --> 00:07:31,039
and one of

194
00:07:31,039 --> 00:07:32,240
my first

195
00:07:32,240 --> 00:07:34,319
penetration testing

196
00:07:34,319 --> 00:07:36,400
experiences so from a developer side

197
00:07:36,400 --> 00:07:38,880
speaking

198
00:07:39,280 --> 00:07:42,080
so they had tried out different forms of

199
00:07:42,080 --> 00:07:44,560
csv injection was not vulnerable

200
00:07:44,560 --> 00:07:47,039
but it turned out to be at a later time

201
00:07:47,039 --> 00:07:49,199
after the pen test a code change was

202
00:07:49,199 --> 00:07:50,960
applied which could have made it

203
00:07:50,960 --> 00:07:53,520
vulnerable if we were not like looking

204
00:07:53,520 --> 00:07:54,240
for

205
00:07:54,240 --> 00:07:56,160
what the testers have been doing during

206
00:07:56,160 --> 00:07:59,280
the canvas and here i was thinking

207
00:07:59,280 --> 00:08:00,639
to show that

208
00:08:00,639 --> 00:08:03,039
um how we can actually

209
00:08:03,039 --> 00:08:05,759
like implement a detector for that using

210
00:08:05,759 --> 00:08:07,759
the event system

211
00:08:07,759 --> 00:08:10,960
which is part in many frameworks

212
00:08:10,960 --> 00:08:13,120
here i have the controller that is

213
00:08:13,120 --> 00:08:15,280
actually doing the

214
00:08:15,280 --> 00:08:17,759
displaying that you saw before so it's

215
00:08:17,759 --> 00:08:20,639
really very straightforward just grabs

216
00:08:20,639 --> 00:08:23,919
data from a database plugs it into a

217
00:08:23,919 --> 00:08:25,360
exporter

218
00:08:25,360 --> 00:08:26,560
and

219
00:08:26,560 --> 00:08:29,280
if you notice this is being passed so

220
00:08:29,280 --> 00:08:32,080
the export is not created here inside

221
00:08:32,080 --> 00:08:34,159
it's being passed into the

222
00:08:34,159 --> 00:08:36,399
method of the control so that's going to

223
00:08:36,399 --> 00:08:38,240
be important and i will explain later

224
00:08:38,240 --> 00:08:39,360
why

225
00:08:39,360 --> 00:08:41,839
um

226
00:08:42,240 --> 00:08:45,360
so the json endpoint is also similar has

227
00:08:45,360 --> 00:08:48,080
a sql injection vulnerability which is

228
00:08:48,080 --> 00:08:51,519
triggered by a url parameter

229
00:08:51,519 --> 00:08:53,360
that's the second example i'm going to

230
00:08:53,360 --> 00:08:54,880
show

231
00:08:54,880 --> 00:08:56,399
and here that's really

232
00:08:56,399 --> 00:08:58,640
straightforward so nothing

233
00:08:58,640 --> 00:09:00,480
complicated just displaying a comma

234
00:09:00,480 --> 00:09:02,959
separated value and at this point we

235
00:09:02,959 --> 00:09:05,440
could already start

236
00:09:05,440 --> 00:09:08,720
like adding detection logic to it but

237
00:09:08,720 --> 00:09:10,560
you might want to consider if that's

238
00:09:10,560 --> 00:09:12,560
like the right approach because this

239
00:09:12,560 --> 00:09:15,279
could also be coming from an external

240
00:09:15,279 --> 00:09:17,839
library for example and if you will

241
00:09:17,839 --> 00:09:19,920
start then updating your librarian

242
00:09:19,920 --> 00:09:23,040
dependencies that logic might go away or

243
00:09:23,040 --> 00:09:25,120
it might also not fit

244
00:09:25,120 --> 00:09:28,160
together with the other part

245
00:09:28,160 --> 00:09:30,959
of the code so instead of doing it right

246
00:09:30,959 --> 00:09:33,279
here

247
00:09:33,519 --> 00:09:35,680
what you can do

248
00:09:35,680 --> 00:09:37,600
is you create

249
00:09:37,600 --> 00:09:40,560
a decorator or a wrapper around that

250
00:09:40,560 --> 00:09:42,399
exporter so that gives you the

251
00:09:42,399 --> 00:09:45,279
possibility to extend the original

252
00:09:45,279 --> 00:09:46,640
functionality

253
00:09:46,640 --> 00:09:48,160
and in that case

254
00:09:48,160 --> 00:09:50,800
i'm adding here a formula check

255
00:09:50,800 --> 00:09:53,200
which is then using the frameworks

256
00:09:53,200 --> 00:09:56,080
event system to say hey i have detected

257
00:09:56,080 --> 00:09:58,720
here records starting with my equal sign

258
00:09:58,720 --> 00:10:01,040
and then telling that to

259
00:10:01,040 --> 00:10:03,920
whatever is subscribing or listening to

260
00:10:03,920 --> 00:10:04,720
my

261
00:10:04,720 --> 00:10:06,560
suspicious events

262
00:10:06,560 --> 00:10:09,440
in that case here that's where you say

263
00:10:09,440 --> 00:10:11,600
in the framework who's going to receive

264
00:10:11,600 --> 00:10:14,240
these events

265
00:10:17,040 --> 00:10:18,959
yeah so that's um

266
00:10:18,959 --> 00:10:21,920
remember when i said it's uh important

267
00:10:21,920 --> 00:10:24,800
why it is being passed into the method

268
00:10:24,800 --> 00:10:26,000
because

269
00:10:26,000 --> 00:10:29,360
when your controller or any part of your

270
00:10:29,360 --> 00:10:31,519
framework based application requires a

271
00:10:31,519 --> 00:10:32,880
dependency

272
00:10:32,880 --> 00:10:34,560
it will

273
00:10:34,560 --> 00:10:36,480
that's where the dependency injection

274
00:10:36,480 --> 00:10:38,160
container will kick in

275
00:10:38,160 --> 00:10:38,959
and

276
00:10:38,959 --> 00:10:40,959
you can actually

277
00:10:40,959 --> 00:10:43,600
utilize that container to say whenever

278
00:10:43,600 --> 00:10:46,880
someone wants us or something once a

279
00:10:46,880 --> 00:10:49,680
csv exporter please return back this

280
00:10:49,680 --> 00:10:51,120
decorated one

281
00:10:51,120 --> 00:10:53,519
so that has the advantage instead of

282
00:10:53,519 --> 00:10:56,640
like replacing all instances in all

283
00:10:56,640 --> 00:10:59,360
different locations uh by hand so you're

284
00:10:59,360 --> 00:11:01,680
doing it just in one place and i think

285
00:11:01,680 --> 00:11:04,880
it's a much cleaner uh solution

286
00:11:04,880 --> 00:11:06,000
so this is

287
00:11:06,000 --> 00:11:08,240
uh what the subscriber is basically

288
00:11:08,240 --> 00:11:10,320
doing uh what i will show in the next

289
00:11:10,320 --> 00:11:13,120
step so it's just displaying this uh

290
00:11:13,120 --> 00:11:16,560
notification that it has found some

291
00:11:16,560 --> 00:11:20,720
entries so it's listening here for the

292
00:11:20,720 --> 00:11:22,720
event

293
00:11:22,720 --> 00:11:24,480
and that's what the handler is basically

294
00:11:24,480 --> 00:11:27,600
doing so you can of course do

295
00:11:27,600 --> 00:11:30,160
other things like forwarding to a

296
00:11:30,160 --> 00:11:32,160
another lock system or

297
00:11:32,160 --> 00:11:34,160
um yeah so

298
00:11:34,160 --> 00:11:36,800
it really is limited by by the

299
00:11:36,800 --> 00:11:38,800
technology you're using or the

300
00:11:38,800 --> 00:11:40,480
uh systems that you have in your

301
00:11:40,480 --> 00:11:42,480
environment

302
00:11:42,480 --> 00:11:44,399
another interesting thing is

303
00:11:44,399 --> 00:11:46,560
a lot of the frameworks come also with

304
00:11:46,560 --> 00:11:48,480
the testing

305
00:11:48,480 --> 00:11:50,720
facility or

306
00:11:50,720 --> 00:11:53,279
testing systems

307
00:11:53,279 --> 00:11:56,639
providing also like um in that case

308
00:11:56,639 --> 00:11:58,240
the

309
00:11:58,240 --> 00:12:00,560
components to test also like your event

310
00:12:00,560 --> 00:12:02,959
system or

311
00:12:02,959 --> 00:12:04,160
trying to

312
00:12:04,160 --> 00:12:06,480
so what i'm trying to get is

313
00:12:06,480 --> 00:12:08,720
you may want to test it locally before

314
00:12:08,720 --> 00:12:10,639
you push everything to production

315
00:12:10,639 --> 00:12:13,040
because you also want to see if

316
00:12:13,040 --> 00:12:14,959
um

317
00:12:14,959 --> 00:12:16,880
that different version that you now

318
00:12:16,880 --> 00:12:19,360
created like the decorated one if it's

319
00:12:19,360 --> 00:12:22,639
actually really firing in an even event

320
00:12:22,639 --> 00:12:26,079
and basically verifying with your

321
00:12:26,079 --> 00:12:28,959
uh common unique unit testing tools in

322
00:12:28,959 --> 00:12:30,720
that case which you

323
00:12:30,720 --> 00:12:33,680
are using in your application if

324
00:12:33,680 --> 00:12:36,000
if the newly developed uh

325
00:12:36,000 --> 00:12:39,040
exporter actually works

326
00:12:39,040 --> 00:12:41,200
and that's something that you can add to

327
00:12:41,200 --> 00:12:43,680
your um

328
00:12:43,680 --> 00:12:46,160
like existing test pipeline or to the

329
00:12:46,160 --> 00:12:47,680
test of the

330
00:12:47,680 --> 00:12:50,560
running in the test pipeline

331
00:12:50,560 --> 00:12:52,880
so in the second example i was thinking

332
00:12:52,880 --> 00:12:54,480
about

333
00:12:54,480 --> 00:12:57,519
um another approach which is more

334
00:12:57,519 --> 00:13:00,480
supposed to be used during development

335
00:13:00,480 --> 00:13:02,000
and

336
00:13:02,000 --> 00:13:04,240
frameworks also come

337
00:13:04,240 --> 00:13:06,399
some frameworks also come with built-in

338
00:13:06,399 --> 00:13:09,040
events so you don't have to develop them

339
00:13:09,040 --> 00:13:11,200
yourself so in that case

340
00:13:11,200 --> 00:13:14,240
um for example when i hit a specific

341
00:13:14,240 --> 00:13:16,000
endpoint

342
00:13:16,000 --> 00:13:18,959
it tells me if a query was executed like

343
00:13:18,959 --> 00:13:20,639
a database query

344
00:13:20,639 --> 00:13:23,120
and that contains the sql query so what

345
00:13:23,120 --> 00:13:25,360
i was thinking because i

346
00:13:25,360 --> 00:13:28,560
i got this or was inspired by an article

347
00:13:28,560 --> 00:13:31,200
on a vulnerability scanner where

348
00:13:31,200 --> 00:13:33,120
the scanner talks

349
00:13:33,120 --> 00:13:35,200
with an agent sitting inside an

350
00:13:35,200 --> 00:13:37,600
application and basically telling hey

351
00:13:37,600 --> 00:13:41,040
you are right now whatever you hit

352
00:13:41,040 --> 00:13:44,399
it executed a query you might want to

353
00:13:44,399 --> 00:13:47,360
try a sql injection on that endpoint

354
00:13:47,360 --> 00:13:49,839
and i was thinking to what extent can we

355
00:13:49,839 --> 00:13:52,399
also do that with uh like what the frame

356
00:13:52,399 --> 00:13:55,279
what the framework can provide for us

357
00:13:55,279 --> 00:13:57,360
so remember when i said there is like

358
00:13:57,360 --> 00:13:59,600
this title parameter

359
00:13:59,600 --> 00:14:01,199
and

360
00:14:01,199 --> 00:14:03,839
and that notification

361
00:14:03,839 --> 00:14:06,000
so that's basically what

362
00:14:06,000 --> 00:14:07,920
what comes from the

363
00:14:07,920 --> 00:14:09,519
from the event

364
00:14:09,519 --> 00:14:12,480
and what i was also trying to do which

365
00:14:12,480 --> 00:14:14,639
is

366
00:14:15,040 --> 00:14:17,120
called taint inference so i'm trying to

367
00:14:17,120 --> 00:14:18,320
see if

368
00:14:18,320 --> 00:14:21,199
whatever is uh submitted by the user

369
00:14:21,199 --> 00:14:24,000
input is reflected in the query because

370
00:14:24,000 --> 00:14:26,320
that would tell me okay there are some

371
00:14:26,320 --> 00:14:28,320
parts in the query which i can take

372
00:14:28,320 --> 00:14:30,800
control of and

373
00:14:30,800 --> 00:14:33,279
i'm sorry

374
00:14:35,440 --> 00:14:38,720
oh it's not running okay

375
00:14:39,199 --> 00:14:42,639
and the approach that i take is normally

376
00:14:42,639 --> 00:14:45,040
if you look up for different taint

377
00:14:45,040 --> 00:14:46,720
inference approaches

378
00:14:46,720 --> 00:14:48,320
they will um

379
00:14:48,320 --> 00:14:49,199
use

380
00:14:49,199 --> 00:14:51,600
at some point a parser so in that case a

381
00:14:51,600 --> 00:14:54,880
sql parser i tried to see uh

382
00:14:54,880 --> 00:14:57,040
like how far i came from without using a

383
00:14:57,040 --> 00:15:00,160
parser so my naive approach here is

384
00:15:00,160 --> 00:15:03,199
basically splitting the sql string based

385
00:15:03,199 --> 00:15:05,920
on white spaces and also some

386
00:15:05,920 --> 00:15:08,480
like special characters like equal

387
00:15:08,480 --> 00:15:09,600
character

388
00:15:09,600 --> 00:15:12,800
that bind together two values just to be

389
00:15:12,800 --> 00:15:15,440
able to have like separate strings that

390
00:15:15,440 --> 00:15:18,160
i can check for similarity with the user

391
00:15:18,160 --> 00:15:19,360
inputs

392
00:15:19,360 --> 00:15:23,360
you can see here it's not completely

393
00:15:23,519 --> 00:15:25,760
like it's not completely error-prone

394
00:15:25,760 --> 00:15:27,680
because there are

395
00:15:27,680 --> 00:15:30,800
false positives if you use uh verbs or

396
00:15:30,800 --> 00:15:34,079
sql keywords like uh select it will mark

397
00:15:34,079 --> 00:15:35,279
you here

398
00:15:35,279 --> 00:15:37,519
this one also has tainted although it's

399
00:15:37,519 --> 00:15:41,600
only this one here which is control um

400
00:15:41,600 --> 00:15:44,160
i think what i learned from from that

401
00:15:44,160 --> 00:15:46,639
article that i mentioned and also other

402
00:15:46,639 --> 00:15:47,600
uh

403
00:15:47,600 --> 00:15:49,759
what others suggested like you can use

404
00:15:49,759 --> 00:15:51,920
just a dedicated value where you know

405
00:15:51,920 --> 00:15:55,120
this is never going to be part of a sql

406
00:15:55,120 --> 00:15:57,519
keyword so in that case i'm using here

407
00:15:57,519 --> 00:16:00,240
0x2 for example

408
00:16:00,240 --> 00:16:01,360
and

409
00:16:01,360 --> 00:16:03,120
yeah so

410
00:16:03,120 --> 00:16:03,839
i

411
00:16:03,839 --> 00:16:06,079
so that's the that was actually the demo

412
00:16:06,079 --> 00:16:07,519
that i wanted to show

413
00:16:07,519 --> 00:16:09,600
and i think um

414
00:16:09,600 --> 00:16:11,839
even if

415
00:16:11,839 --> 00:16:15,199
if that um

416
00:16:15,360 --> 00:16:17,120
just

417
00:16:17,120 --> 00:16:19,120
so even if that taint and friends

418
00:16:19,120 --> 00:16:21,279
approach doesn't uh

419
00:16:21,279 --> 00:16:22,639
like is

420
00:16:22,639 --> 00:16:25,360
if it turns out to be not like fully

421
00:16:25,360 --> 00:16:27,279
useful the

422
00:16:27,279 --> 00:16:29,360
use what you can pull out from that just

423
00:16:29,360 --> 00:16:31,519
by knowing okay when you visit certain

424
00:16:31,519 --> 00:16:34,320
endpoints you can already grab some

425
00:16:34,320 --> 00:16:37,199
information like okay this is firing

426
00:16:37,199 --> 00:16:39,759
http request here this is interacting

427
00:16:39,759 --> 00:16:41,680
with the database this is interacting

428
00:16:41,680 --> 00:16:44,240
with another microservice for example

429
00:16:44,240 --> 00:16:45,920
that's where you can start with a

430
00:16:45,920 --> 00:16:48,560
lightweight threat model actually and

431
00:16:48,560 --> 00:16:50,959
you can also start then suggesting

432
00:16:50,959 --> 00:16:52,800
things like what controls should it

433
00:16:52,800 --> 00:16:56,000
actually be covering at this point

434
00:16:56,000 --> 00:16:58,320
and you can also start pointing your

435
00:16:58,320 --> 00:17:02,000
attack tools more more directly

436
00:17:02,000 --> 00:17:05,520
so um so my last slide is more about uh

437
00:17:05,520 --> 00:17:07,760
my actual research so

438
00:17:07,760 --> 00:17:10,240
i was more talking about frameworks

439
00:17:10,240 --> 00:17:11,599
right now

440
00:17:11,599 --> 00:17:13,199
um

441
00:17:13,199 --> 00:17:15,520
so because from uh

442
00:17:15,520 --> 00:17:17,919
it's like when we consider like all

443
00:17:17,919 --> 00:17:19,199
wasps and

444
00:17:19,199 --> 00:17:21,359
like the i think it's currently on the

445
00:17:21,359 --> 00:17:24,720
top nine like on the ninth uh entry

446
00:17:24,720 --> 00:17:26,720
like insufficient logging and monitoring

447
00:17:26,720 --> 00:17:30,000
and uh what i'm trying to uh investigate

448
00:17:30,000 --> 00:17:32,000
is to what extent can frameworks

449
00:17:32,000 --> 00:17:35,039
actually help us to close that gap uh

450
00:17:35,039 --> 00:17:36,960
regarding insufficient blogging and

451
00:17:36,960 --> 00:17:38,240
monitoring

452
00:17:38,240 --> 00:17:39,600
and

453
00:17:39,600 --> 00:17:41,840
part of it was because what you saw in

454
00:17:41,840 --> 00:17:43,760
the demo app and also

455
00:17:43,760 --> 00:17:45,919
what controls are already existing

456
00:17:45,919 --> 00:17:47,840
inside and

457
00:17:47,840 --> 00:17:49,600
so i basically want to see to what

458
00:17:49,600 --> 00:17:52,320
extent we can take advantage of that

459
00:17:52,320 --> 00:17:54,880
and in my second main project i'm more

460
00:17:54,880 --> 00:17:56,240
looking into

461
00:17:56,240 --> 00:17:57,760
um

462
00:17:57,760 --> 00:17:59,200
so this started

463
00:17:59,200 --> 00:18:00,880
with the idea

464
00:18:00,880 --> 00:18:04,080
by looking at attacks like sql injection

465
00:18:04,080 --> 00:18:05,840
and you know that

466
00:18:05,840 --> 00:18:06,880
for

467
00:18:06,880 --> 00:18:10,240
a successful exploitation

468
00:18:10,240 --> 00:18:12,559
especially for a target which you don't

469
00:18:12,559 --> 00:18:15,360
have access like to the source code you

470
00:18:15,360 --> 00:18:16,160
will

471
00:18:16,160 --> 00:18:19,039
have multiple failing attempts like uh

472
00:18:19,039 --> 00:18:21,520
to get a working expert

473
00:18:21,520 --> 00:18:23,840
or until your payload gets fine-tuned

474
00:18:23,840 --> 00:18:25,679
and actually

475
00:18:25,679 --> 00:18:28,720
executes its actual payload and during

476
00:18:28,720 --> 00:18:31,360
that process now the question is can we

477
00:18:31,360 --> 00:18:34,799
take advantage of that like um

478
00:18:34,799 --> 00:18:36,320
because it will cause a lot of

479
00:18:36,320 --> 00:18:38,960
exceptions inside the application

480
00:18:38,960 --> 00:18:39,840
and

481
00:18:39,840 --> 00:18:41,840
can we use those exceptions for

482
00:18:41,840 --> 00:18:43,679
defensive purposes

483
00:18:43,679 --> 00:18:45,600
kind of like uh

484
00:18:45,600 --> 00:18:48,640
like the fire alarm analogy that i

485
00:18:48,640 --> 00:18:50,880
was using previously

486
00:18:50,880 --> 00:18:53,280
yeah and

487
00:18:53,280 --> 00:18:56,080
that's uh my talk thank you for

488
00:18:56,080 --> 00:18:57,039
listening

489
00:18:57,039 --> 00:19:00,400
if you have any questions then

490
00:19:08,400 --> 00:19:11,720
no questions

