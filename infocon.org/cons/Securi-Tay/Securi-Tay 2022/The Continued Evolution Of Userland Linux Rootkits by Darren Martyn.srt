1
00:00:03,840 --> 00:00:06,080
uh yes i'm here to talk to you about uh

2
00:00:06,080 --> 00:00:07,839
linux user land root kits which is kind

3
00:00:07,839 --> 00:00:09,760
of a topic people uh

4
00:00:09,760 --> 00:00:13,759
often kind of ignore because they

5
00:00:13,920 --> 00:00:15,519
they're not as fun and interesting as

6
00:00:15,519 --> 00:00:18,880
kernel root kits i guess

7
00:00:18,880 --> 00:00:21,600
but who am i that's just the generic uh

8
00:00:21,600 --> 00:00:23,680
why am i slide i'm darren um here to

9
00:00:23,680 --> 00:00:26,480
talk to you about linux root kits um

10
00:00:26,480 --> 00:00:28,960
that are based on ld preload so i'll

11
00:00:28,960 --> 00:00:30,400
just get into it

12
00:00:30,400 --> 00:00:32,079
so there's a whole pad of real linux

13
00:00:32,079 --> 00:00:34,000
user lab root kits that are ring three

14
00:00:34,000 --> 00:00:35,440
they run user mode they don't touch the

15
00:00:35,440 --> 00:00:37,120
kernel they're not like kernel spacer

16
00:00:37,120 --> 00:00:40,559
kits and they're all based on ld preload

17
00:00:40,559 --> 00:00:42,000
so what ld preload is it's an

18
00:00:42,000 --> 00:00:43,520
environmental variable

19
00:00:43,520 --> 00:00:45,120
interpreted by the

20
00:00:45,120 --> 00:00:47,200
dynamic linker that tells freeload

21
00:00:47,200 --> 00:00:48,640
library ahead of loading other libraries

22
00:00:48,640 --> 00:00:51,600
so it's like you change the search order

23
00:00:51,600 --> 00:00:53,199
so when a program is going to look for

24
00:00:53,199 --> 00:00:54,640
like a function like

25
00:00:54,640 --> 00:00:56,879
string copy or whatever

26
00:00:56,879 --> 00:00:58,640
it'll take one from our pre-loaded

27
00:00:58,640 --> 00:01:00,480
library instead of taking one from like

28
00:01:00,480 --> 00:01:03,359
the libc or whatever so it's used in

29
00:01:03,359 --> 00:01:04,959
debugging and it's used for function

30
00:01:04,959 --> 00:01:06,320
hooking

31
00:01:06,320 --> 00:01:07,600
and it just allows you to basically

32
00:01:07,600 --> 00:01:10,400
replace functions at runtime

33
00:01:10,400 --> 00:01:12,080
so it can be set globally across the

34
00:01:12,080 --> 00:01:14,799
entire system by using etsy ld soda

35
00:01:14,799 --> 00:01:16,880
preload file you just put the path to

36
00:01:16,880 --> 00:01:18,880
your hook library in there and then

37
00:01:18,880 --> 00:01:20,479
every program on the computer will load

38
00:01:20,479 --> 00:01:22,799
that instead of the real lipsy

39
00:01:22,799 --> 00:01:27,280
um on os x you've got die ld insert

40
00:01:27,280 --> 00:01:29,439
libraries on windows you can allegedly

41
00:01:29,439 --> 00:01:31,600
do this with apponet dlls but that

42
00:01:31,600 --> 00:01:33,759
breaks everything um your

43
00:01:33,759 --> 00:01:35,520
windows machine just stops working if

44
00:01:35,520 --> 00:01:37,600
you start pissing about that and i know

45
00:01:37,600 --> 00:01:39,520
that the bsds also have a similar things

46
00:01:39,520 --> 00:01:40,720
this like

47
00:01:40,720 --> 00:01:42,960
it's a fairly generic technique to

48
00:01:42,960 --> 00:01:45,280
pre-load your code in ahead of the legit

49
00:01:45,280 --> 00:01:47,600
code um

50
00:01:47,600 --> 00:01:49,200
so

51
00:01:49,200 --> 00:01:51,280
how this relates to rootkits is if we

52
00:01:51,280 --> 00:01:53,680
can replace functions at runtime we just

53
00:01:53,680 --> 00:01:55,680
have like an extremely simple generic

54
00:01:55,680 --> 00:01:58,000
way to implement hooks so we can modify

55
00:01:58,000 --> 00:02:00,560
the behavior programs we can

56
00:02:00,560 --> 00:02:03,200
tell programs to lie or we can lie to

57
00:02:03,200 --> 00:02:04,479
programs

58
00:02:04,479 --> 00:02:06,640
and we can hide stuff like we can hide

59
00:02:06,640 --> 00:02:08,800
files we can hide process we can hide

60
00:02:08,800 --> 00:02:10,239
directories

61
00:02:10,239 --> 00:02:12,480
on linux anyways all everything's a file

62
00:02:12,480 --> 00:02:14,560
so like just by implementing some basic

63
00:02:14,560 --> 00:02:16,160
file hiding we can hide stuff from the

64
00:02:16,160 --> 00:02:17,360
rest of the system

65
00:02:17,360 --> 00:02:18,959
that's a super powerful technique for

66
00:02:18,959 --> 00:02:21,200
debugging because like you can patch out

67
00:02:21,200 --> 00:02:22,959
things without having to like open up a

68
00:02:22,959 --> 00:02:24,720
prop open up a binary night and actually

69
00:02:24,720 --> 00:02:26,000
patch it you can just

70
00:02:26,000 --> 00:02:28,720
replace the library call

71
00:02:28,720 --> 00:02:29,920
um

72
00:02:29,920 --> 00:02:31,519
so these rootkits are actually really

73
00:02:31,519 --> 00:02:33,760
common but everyone ignores them because

74
00:02:33,760 --> 00:02:36,480
they're not as sexy as like kernel root

75
00:02:36,480 --> 00:02:38,640
kits or whatever and so i thought i'd

76
00:02:38,640 --> 00:02:40,640
make a quick list like the pros and cons

77
00:02:40,640 --> 00:02:42,239
i'm not going to read them all out but

78
00:02:42,239 --> 00:02:44,720
the pros are basically

79
00:02:44,720 --> 00:02:46,560
user space preload root kits are more

80
00:02:46,560 --> 00:02:48,480
stable easier to write quicker to

81
00:02:48,480 --> 00:02:50,160
develop and they don't break all

82
00:02:50,160 --> 00:02:51,840
the time unlike kernel root kits if

83
00:02:51,840 --> 00:02:53,680
you've ever tried to write a loadable

84
00:02:53,680 --> 00:02:55,519
kernel module rootkit for linux that

85
00:02:55,519 --> 00:02:56,959
runs in

86
00:02:56,959 --> 00:02:58,480
kernel mode

87
00:02:58,480 --> 00:03:00,080
and you've tried keep it running across

88
00:03:00,080 --> 00:03:01,360
like two or three different kernel

89
00:03:01,360 --> 00:03:02,879
versions you will have torn your hair

90
00:03:02,879 --> 00:03:04,640
out by having this massive if depths

91
00:03:04,640 --> 00:03:07,760
because different the abi for the kernel

92
00:03:07,760 --> 00:03:10,239
abi in linux is not considered stable it

93
00:03:10,239 --> 00:03:11,760
can change at any time they add new

94
00:03:11,760 --> 00:03:13,680
shift they change

95
00:03:13,680 --> 00:03:16,000
so instead targeting user mode you get a

96
00:03:16,000 --> 00:03:18,400
very stable abi so the rules in linux

97
00:03:18,400 --> 00:03:19,920
development is that they don't break

98
00:03:19,920 --> 00:03:21,440
user space

99
00:03:21,440 --> 00:03:23,040
they're also not usually architecture

100
00:03:23,040 --> 00:03:24,239
specific so you don't have to do any

101
00:03:24,239 --> 00:03:26,239
 in assembly you can just write the

102
00:03:26,239 --> 00:03:28,159
stuff and see quite high level boom it

103
00:03:28,159 --> 00:03:29,360
works

104
00:03:29,360 --> 00:03:31,599
easy to expand you can customize to the

105
00:03:31,599 --> 00:03:32,560
target

106
00:03:32,560 --> 00:03:34,159
however on the downside they're

107
00:03:34,159 --> 00:03:35,599
vulnerable to timing attacks they're

108
00:03:35,599 --> 00:03:37,680
vulnerable to just compiling a binary

109
00:03:37,680 --> 00:03:39,760
statically makes it invulnerable to this

110
00:03:39,760 --> 00:03:41,280
rootkit technique so just adding the

111
00:03:41,280 --> 00:03:43,040
dash static flag

112
00:03:43,040 --> 00:03:44,959
to your compiling of like whatever

113
00:03:44,959 --> 00:03:47,040
you're doing means that the root kit no

114
00:03:47,040 --> 00:03:48,480
longer affects it

115
00:03:48,480 --> 00:03:50,319
you do need to have a dev or a build

116
00:03:50,319 --> 00:03:51,840
environment that's almost identical to

117
00:03:51,840 --> 00:03:54,720
the system you're targeting um

118
00:03:54,720 --> 00:03:57,040
they're vulnerable to stuff like

119
00:03:57,040 --> 00:03:58,959
timing attacks so because they

120
00:03:58,959 --> 00:04:01,200
intersperse themselves you they go in

121
00:04:01,200 --> 00:04:03,599
between like the legit function call and

122
00:04:03,599 --> 00:04:05,120
like

123
00:04:05,120 --> 00:04:06,879
your hook adds back to the middle and

124
00:04:06,879 --> 00:04:08,560
adds extra clock cycle so if it does

125
00:04:08,560 --> 00:04:11,120
like comparison it does cause a timing

126
00:04:11,120 --> 00:04:12,239
thing and i'll show you that in a minute

127
00:04:12,239 --> 00:04:14,319
it's also vulnerable to just running ldd

128
00:04:14,319 --> 00:04:16,238
in a loop sometimes will cause things to

129
00:04:16,238 --> 00:04:17,839
break and show the hidden stuff when

130
00:04:17,839 --> 00:04:19,759
it's not supposed to

131
00:04:19,759 --> 00:04:21,600
um so i'm going to give you a quick

132
00:04:21,600 --> 00:04:23,040
crash course on how to write one of

133
00:04:23,040 --> 00:04:24,320
these

134
00:04:24,320 --> 00:04:26,000
so what you do is you find a function

135
00:04:26,000 --> 00:04:28,240
that you want to hook by using s trace

136
00:04:28,240 --> 00:04:29,199
um

137
00:04:29,199 --> 00:04:31,280
usually or gdb you go

138
00:04:31,280 --> 00:04:33,120
what am i trying to hide from

139
00:04:33,120 --> 00:04:34,000
so

140
00:04:34,000 --> 00:04:35,680
then you think to yourself how am i

141
00:04:35,680 --> 00:04:36,960
going to hide it like what do i need to

142
00:04:36,960 --> 00:04:38,800
change to hide my stuff you write the

143
00:04:38,800 --> 00:04:40,800
hook for that function then you repeat

144
00:04:40,800 --> 00:04:42,400
for the other like 30 functions you're

145
00:04:42,400 --> 00:04:44,639
going to need to hook to you know get

146
00:04:44,639 --> 00:04:46,240
yourself

147
00:04:46,240 --> 00:04:47,199
so we're just going to go straight into

148
00:04:47,199 --> 00:04:48,800
some examples

149
00:04:48,800 --> 00:04:50,800
and i really hope the code on screen is

150
00:04:50,800 --> 00:04:52,240
actually readable i spent a while trying

151
00:04:52,240 --> 00:04:55,040
to make it readable but so here we have

152
00:04:55,040 --> 00:04:57,440
a simple hook that just breaks the rand

153
00:04:57,440 --> 00:04:58,400
call

154
00:04:58,400 --> 00:05:01,039
by forcing it to return 42 each time so

155
00:05:01,039 --> 00:05:03,520
we can pile that as a library and we the

156
00:05:03,520 --> 00:05:04,880
second program that just you know

157
00:05:04,880 --> 00:05:06,479
generates a random number

158
00:05:06,479 --> 00:05:09,600
and then if we pre-load in our hook

159
00:05:09,600 --> 00:05:12,720
every call to rand now returns 42

160
00:05:12,720 --> 00:05:14,560
because we're now calling this rand

161
00:05:14,560 --> 00:05:16,240
function instead of the legit rand

162
00:05:16,240 --> 00:05:19,120
function so that's that's like the most

163
00:05:19,120 --> 00:05:21,680
basic simple example of how these work

164
00:05:21,680 --> 00:05:23,280
now you can imagine doing that globally

165
00:05:23,280 --> 00:05:27,440
to every function you can think of

166
00:05:27,440 --> 00:05:29,039
so

167
00:05:29,039 --> 00:05:31,440
sometimes we don't just want to up

168
00:05:31,440 --> 00:05:32,960
the random number generator sometimes we

169
00:05:32,960 --> 00:05:34,880
want like a check or a condition so we

170
00:05:34,880 --> 00:05:36,960
start we start adding conditionals in so

171
00:05:36,960 --> 00:05:38,960
this one

172
00:05:38,960 --> 00:05:41,680
this is a slightly more complex example

173
00:05:41,680 --> 00:05:43,919
and all it does is it deal opens the

174
00:05:43,919 --> 00:05:46,560
real live c path which is hard coded

175
00:05:46,560 --> 00:05:48,479
and it defines the rand from that is old

176
00:05:48,479 --> 00:05:50,240
rand and then

177
00:05:50,240 --> 00:05:51,919
if an environmental variable is set

178
00:05:51,919 --> 00:05:54,000
it'll return the real random otherwise

179
00:05:54,000 --> 00:05:55,919
it'll return 42 so this is a lot this is

180
00:05:55,919 --> 00:05:58,639
like a basic control flow check

181
00:05:58,639 --> 00:06:00,000
so what you do is

182
00:06:00,000 --> 00:06:00,720
we

183
00:06:00,720 --> 00:06:02,800
when we test it with like hacks equals

184
00:06:02,800 --> 00:06:04,639
lol which is like please use the real

185
00:06:04,639 --> 00:06:07,520
random don't system um we get

186
00:06:07,520 --> 00:06:09,199
real random numbers but we don't have

187
00:06:09,199 --> 00:06:10,639
that set we're getting broken random

188
00:06:10,639 --> 00:06:12,960
numbers the same logic can be applied to

189
00:06:12,960 --> 00:06:14,400
pretty much any other functional if you

190
00:06:14,400 --> 00:06:16,560
want to implement

191
00:06:16,560 --> 00:06:18,000
so we can then go and add more

192
00:06:18,000 --> 00:06:20,160
conditions like create input output

193
00:06:20,160 --> 00:06:21,919
filters so

194
00:06:21,919 --> 00:06:24,240
i decided to use this example for reader

195
00:06:24,240 --> 00:06:25,520
this is like the most basic example of

196
00:06:25,520 --> 00:06:27,600
hiding files it's like an actual proper

197
00:06:27,600 --> 00:06:30,000
thing that you'd want your rootkit to do

198
00:06:30,000 --> 00:06:30,880
so

199
00:06:30,880 --> 00:06:34,080
we've got a filename hide me and we we

200
00:06:34,080 --> 00:06:36,720
want to hide any file that's named hide

201
00:06:36,720 --> 00:06:39,120
me or has the string hide me in its file

202
00:06:39,120 --> 00:06:42,000
path so we do is we

203
00:06:42,000 --> 00:06:45,600
define the original reader

204
00:06:46,000 --> 00:06:48,400
and then we have

205
00:06:48,400 --> 00:06:51,840
if the if the string uh hide me is in

206
00:06:51,840 --> 00:06:53,520
the output of reader

207
00:06:53,520 --> 00:06:55,360
don't return otherwise return

208
00:06:55,360 --> 00:06:57,440
everything's fine pretty straightforward

209
00:06:57,440 --> 00:06:59,520
this is what the output looks like so

210
00:06:59,520 --> 00:07:01,520
when we run ls without the hook

211
00:07:01,520 --> 00:07:04,080
installed we get like you know

212
00:07:04,080 --> 00:07:06,400
files and then we run ls with the hook

213
00:07:06,400 --> 00:07:08,800
installed it's hidden i mean on so and

214
00:07:08,800 --> 00:07:10,479
hide me dot c because they've matched

215
00:07:10,479 --> 00:07:13,120
the please hide this condition

216
00:07:13,120 --> 00:07:14,720
so that way you can hide like you can

217
00:07:14,720 --> 00:07:16,479
hide your malware binaries all across

218
00:07:16,479 --> 00:07:18,560
system systems can't see it when they do

219
00:07:18,560 --> 00:07:21,120
cd and ls around the place it's a pretty

220
00:07:21,120 --> 00:07:22,720
straightforward but pretty powerful

221
00:07:22,720 --> 00:07:24,400
technique um

222
00:07:24,400 --> 00:07:26,160
and also some edr software is

223
00:07:26,160 --> 00:07:27,599
dynamically linked so it'll hide from

224
00:07:27,599 --> 00:07:31,680
those too um good job so this is also

225
00:07:31,680 --> 00:07:33,599
where i'm going to show you the timing

226
00:07:33,599 --> 00:07:35,280
attack that i came up with and this work

227
00:07:35,280 --> 00:07:37,120
it's really neat so

228
00:07:37,120 --> 00:07:38,400
because we've got all the that

229
00:07:38,400 --> 00:07:40,240
we're doing the middle this strings the

230
00:07:40,240 --> 00:07:42,000
string string comparison that takes up

231
00:07:42,000 --> 00:07:43,840
extra clock cycles that takes up extra

232
00:07:43,840 --> 00:07:45,599
processing time

233
00:07:45,599 --> 00:07:47,360
and that makes everything slower so our

234
00:07:47,360 --> 00:07:49,759
hooked funk our hooked example is going

235
00:07:49,759 --> 00:07:52,560
to run slower than our legit one

236
00:07:52,560 --> 00:07:55,199
so we check with time we actually notice

237
00:07:55,199 --> 00:07:57,280
there's a measurable difference in the

238
00:07:57,280 --> 00:07:59,520
timing so with the hook installed it's

239
00:07:59,520 --> 00:08:02,240
taken 0.003 whereas normally it's taking

240
00:08:02,240 --> 00:08:04,879
0.002 which it doesn't seem that big a

241
00:08:04,879 --> 00:08:06,560
deal but like

242
00:08:06,560 --> 00:08:08,400
that's actually quite a huge difference

243
00:08:08,400 --> 00:08:10,319
in performance that's like

244
00:08:10,319 --> 00:08:12,720
i know it's like 50 slower or something

245
00:08:12,720 --> 00:08:13,680
so like

246
00:08:13,680 --> 00:08:15,759
that kind of performance impact applied

247
00:08:15,759 --> 00:08:17,360
across the entire system as opposed to

248
00:08:17,360 --> 00:08:18,400
one just

249
00:08:18,400 --> 00:08:20,720
tiny example here can be quite serious

250
00:08:20,720 --> 00:08:21,919
you start noticing that everything's

251
00:08:21,919 --> 00:08:23,520
slow

252
00:08:23,520 --> 00:08:25,520
um so

253
00:08:25,520 --> 00:08:27,440
another fun thing we can do is because

254
00:08:27,440 --> 00:08:30,000
with preload kits we're globally hooking

255
00:08:30,000 --> 00:08:33,200
everything up if we've been installed at

256
00:08:33,200 --> 00:08:35,839
cld soda preload we can implement really

257
00:08:35,839 --> 00:08:38,559
trivial local back doors to allow

258
00:08:38,559 --> 00:08:41,440
unprivileged users to gain root

259
00:08:41,440 --> 00:08:43,440
so the most common technique across all

260
00:08:43,440 --> 00:08:44,800
the root kit examples that i found in

261
00:08:44,800 --> 00:08:46,800
the wild for this was to simply use an

262
00:08:46,800 --> 00:08:48,320
environmental variable check like we

263
00:08:48,320 --> 00:08:51,200
used previously in our hook for random

264
00:08:51,200 --> 00:08:53,360
so we do is if that end var is there and

265
00:08:53,360 --> 00:08:54,399
if the

266
00:08:54,399 --> 00:08:56,160
if say we're trying to run a set uid

267
00:08:56,160 --> 00:08:58,240
binary or something it'll check oh is

268
00:08:58,240 --> 00:09:01,040
the magic string present if so drop a

269
00:09:01,040 --> 00:09:03,040
root shell instead of doing whatever

270
00:09:03,040 --> 00:09:04,480
else

271
00:09:04,480 --> 00:09:06,640
so this is an example

272
00:09:06,640 --> 00:09:10,160
mostly stolen from the jinx 2 root kit

273
00:09:10,160 --> 00:09:12,080
which has been extremely widely used in

274
00:09:12,080 --> 00:09:14,880
the wild and what it does is

275
00:09:14,880 --> 00:09:17,040
it checks if an environmental variable

276
00:09:17,040 --> 00:09:18,560
is set

277
00:09:18,560 --> 00:09:21,360
and if that said and if the current eu

278
00:09:21,360 --> 00:09:23,519
id of the process calling it is zero by

279
00:09:23,519 --> 00:09:24,720
group

280
00:09:24,720 --> 00:09:27,120
it'll spawn a shell

281
00:09:27,120 --> 00:09:28,399
um

282
00:09:28,399 --> 00:09:30,320
then what you do is you stick that hook

283
00:09:30,320 --> 00:09:32,640
inside every other hook which

284
00:09:32,640 --> 00:09:34,000
it's kind of a bit of a lazy way doing

285
00:09:34,000 --> 00:09:35,760
it but that's how it works it jinx so

286
00:09:35,760 --> 00:09:37,600
like for example the access hub you've

287
00:09:37,600 --> 00:09:39,440
got this called a drop suit shell event

288
00:09:39,440 --> 00:09:43,120
set so every time a program calls access

289
00:09:43,120 --> 00:09:45,760
not only will it like check

290
00:09:45,760 --> 00:09:48,480
if access is some other hooks but also

291
00:09:48,480 --> 00:09:49,600
it'll do a check to see if the

292
00:09:49,600 --> 00:09:51,040
environmental variable set and spawn a

293
00:09:51,040 --> 00:09:52,720
root shell if so

294
00:09:52,720 --> 00:09:54,800
so it's like it's it's a pretty decently

295
00:09:54,800 --> 00:09:56,640
powerful technique for root cutting

296
00:09:56,640 --> 00:09:58,480
boxes um

297
00:09:58,480 --> 00:10:01,040
and this is how it looks um when we test

298
00:10:01,040 --> 00:10:03,200
that example out we when we run the home

299
00:10:03,200 --> 00:10:04,959
overuser then if we set the

300
00:10:04,959 --> 00:10:07,519
environmental variable in this case hats

301
00:10:07,519 --> 00:10:09,680
and we run the g-pass wd binary which is

302
00:10:09,680 --> 00:10:12,000
set uid root it'll trigger the get-end

303
00:10:12,000 --> 00:10:16,240
hook and then we get a root shell uh

304
00:10:17,440 --> 00:10:19,519
the other thing that's quite common with

305
00:10:19,519 --> 00:10:21,200
these is to implement various kinds of

306
00:10:21,200 --> 00:10:23,519
remote back doors to allow you to regain

307
00:10:23,519 --> 00:10:25,200
access to the system

308
00:10:25,200 --> 00:10:26,320
that you've installed on apple's

309
00:10:26,320 --> 00:10:27,680
compromise and what's interesting is

310
00:10:27,680 --> 00:10:30,560
that a lot of them all use the same

311
00:10:30,560 --> 00:10:32,880
approximately the same kind of

312
00:10:32,880 --> 00:10:35,600
remote backdoors like everything based

313
00:10:35,600 --> 00:10:38,959
on jinx uses an accept hook um that

314
00:10:38,959 --> 00:10:40,399
seems to just be like the defacto

315
00:10:40,399 --> 00:10:42,800
standard um

316
00:10:42,800 --> 00:10:44,560
and then you've got another whole family

317
00:10:44,560 --> 00:10:47,120
of them which seem to hook pam instead

318
00:10:47,120 --> 00:10:48,720
pam is the plugable authentication

319
00:10:48,720 --> 00:10:51,040
modules it handles like logging login

320
00:10:51,040 --> 00:10:52,959
authentication on linux

321
00:10:52,959 --> 00:10:54,720
and by hooking pam you can back your

322
00:10:54,720 --> 00:10:56,880
searching backdoor su's you've got like

323
00:10:56,880 --> 00:10:58,959
some families only really at the accept

324
00:10:58,959 --> 00:11:00,640
hook where like if there's a magic

325
00:11:00,640 --> 00:11:02,240
source port it'll drop your root shell

326
00:11:02,240 --> 00:11:03,600
instead of giving you like a web page or

327
00:11:03,600 --> 00:11:05,120
whatever when you connect to the web

328
00:11:05,120 --> 00:11:07,839
server others will hook up there's some

329
00:11:07,839 --> 00:11:09,440
other examples by a guy called hombre

330
00:11:09,440 --> 00:11:12,000
but uh hook right and if

331
00:11:12,000 --> 00:11:14,720
the right call is called with a magic

332
00:11:14,720 --> 00:11:16,640
string for example like an ssh login

333
00:11:16,640 --> 00:11:18,560
with magic string is the username when

334
00:11:18,560 --> 00:11:20,399
that gets written to syslog it'll then

335
00:11:20,399 --> 00:11:22,959
use that trigger and set a shell

336
00:11:22,959 --> 00:11:26,160
the original first version of jinx

337
00:11:26,160 --> 00:11:28,079
uh just had port knocking with magic

338
00:11:28,079 --> 00:11:30,000
packets if like certain packets certain

339
00:11:30,000 --> 00:11:32,000
payload data was sent they would send

340
00:11:32,000 --> 00:11:33,839
back a reverse shell

341
00:11:33,839 --> 00:11:35,839
there are some examples that every time

342
00:11:35,839 --> 00:11:38,160
like ps is called or every time ls

343
00:11:38,160 --> 00:11:40,640
called it connect it spawns a reverse

344
00:11:40,640 --> 00:11:41,760
shell

345
00:11:41,760 --> 00:11:43,920
but the coolest ones the ones that i've

346
00:11:43,920 --> 00:11:46,160
kind of seen recently have been where

347
00:11:46,160 --> 00:11:48,000
they hot swap etsy password or etsy

348
00:11:48,000 --> 00:11:49,839
shadow at runtimes every time a file

349
00:11:49,839 --> 00:11:51,920
dries open like etsy password

350
00:11:51,920 --> 00:11:53,440
it replaces it with its own version of

351
00:11:53,440 --> 00:11:55,120
it that is like an extra backdoor user

352
00:11:55,120 --> 00:11:56,399
in it

353
00:11:56,399 --> 00:11:58,320
and it checks that like it'll only do

354
00:11:58,320 --> 00:12:00,079
this hot swapping if it's being called

355
00:12:00,079 --> 00:12:02,079
by the ssh daemon

356
00:12:02,079 --> 00:12:04,160
or similarly hot swapping the authorized

357
00:12:04,160 --> 00:12:05,839
key files at runtime so like when

358
00:12:05,839 --> 00:12:08,160
somebody tries login with an ssh key

359
00:12:08,160 --> 00:12:10,959
it will add and remove an ssh key like

360
00:12:10,959 --> 00:12:13,519
within a fraction of a second

361
00:12:13,519 --> 00:12:15,120
um

362
00:12:15,120 --> 00:12:16,320
like there's a lot more there's a lot of

363
00:12:16,320 --> 00:12:17,920
potential for more like basically if you

364
00:12:17,920 --> 00:12:19,600
can get an input

365
00:12:19,600 --> 00:12:21,680
remotely some kind of way to trigger you

366
00:12:21,680 --> 00:12:23,200
can come up with like

367
00:12:23,200 --> 00:12:24,240
a remote

368
00:12:24,240 --> 00:12:26,079
a pretty simple remote back door that

369
00:12:26,079 --> 00:12:29,839
can be done but as an ld preload kit

370
00:12:29,839 --> 00:12:30,800
um

371
00:12:30,800 --> 00:12:32,320
so

372
00:12:32,320 --> 00:12:33,680
when i was look when i was thinking

373
00:12:33,680 --> 00:12:35,360
about remote backdoors and looking at

374
00:12:35,360 --> 00:12:37,440
some examples i thought to myself what

375
00:12:37,440 --> 00:12:39,440
if what if sometimes the root kit didn't

376
00:12:39,440 --> 00:12:41,680
work as planned what if i could scan for

377
00:12:41,680 --> 00:12:42,639
them

378
00:12:42,639 --> 00:12:43,839
so

379
00:12:43,839 --> 00:12:46,240
previously when i was researching a root

380
00:12:46,240 --> 00:12:48,480
kit called libmdma

381
00:12:48,480 --> 00:12:50,160
i found a copy of it just by googling

382
00:12:50,160 --> 00:12:51,920
strings from it and i found that like it

383
00:12:51,920 --> 00:12:53,680
had been uploaded somewhere in some

384
00:12:53,680 --> 00:12:56,720
directory of some previously owned box

385
00:12:56,720 --> 00:12:58,399
and then i know then i realized that

386
00:12:58,399 --> 00:13:00,399
when you if you try ld preload library

387
00:13:00,399 --> 00:13:01,600
that's the wrong architecture or

388
00:13:01,600 --> 00:13:03,760
something you get like a very specific

389
00:13:03,760 --> 00:13:05,279
linker error message

390
00:13:05,279 --> 00:13:07,040
so i went to showdown i decided to put

391
00:13:07,040 --> 00:13:08,560
in like some of the error messages so

392
00:13:08,560 --> 00:13:10,560
the dynamic linker will out when

393
00:13:10,560 --> 00:13:12,399
it's having like a bad day

394
00:13:12,399 --> 00:13:15,120
and what we find is all these

395
00:13:15,120 --> 00:13:17,200
and what these are these are telnet log

396
00:13:17,200 --> 00:13:18,000
like

397
00:13:18,000 --> 00:13:19,760
if you connect telnet on any of these

398
00:13:19,760 --> 00:13:22,320
systems it spits out this object cannot

399
00:13:22,320 --> 00:13:24,079
be pre-loaded cannot open shared object

400
00:13:24,079 --> 00:13:25,839
file and it's like

401
00:13:25,839 --> 00:13:27,600
the linker on those boxes is busy

402
00:13:27,600 --> 00:13:29,279
desperately trying to load this library

403
00:13:29,279 --> 00:13:31,040
that doesn't work

404
00:13:31,040 --> 00:13:32,560
so it spits out this error and you know

405
00:13:32,560 --> 00:13:34,240
that box has been done by somebody and

406
00:13:34,240 --> 00:13:35,760
they put a piece of work called

407
00:13:35,760 --> 00:13:39,040
libsystem.sew on it

408
00:13:39,279 --> 00:13:41,279
so i googled the error message and i

409
00:13:41,279 --> 00:13:42,959
found on the forum of the vendor that

410
00:13:42,959 --> 00:13:46,000
makes those nasus there was like

411
00:13:46,000 --> 00:13:48,720
people were like hey my my nast's

412
00:13:48,720 --> 00:13:50,079
broken you know it's giving me this

413
00:13:50,079 --> 00:13:52,079
error and the admins of like the nas

414
00:13:52,079 --> 00:13:54,000
company didn't seem to twig this malware

415
00:13:54,000 --> 00:13:55,440
infection they were like oh just delete

416
00:13:55,440 --> 00:13:57,920
the file it'll be fine you you know just

417
00:13:57,920 --> 00:13:59,920
pretend nothing happened

418
00:13:59,920 --> 00:14:02,720
um

419
00:14:02,720 --> 00:14:05,440
i found more reference to it on uh some

420
00:14:05,440 --> 00:14:07,440
chinese web forums and they're like oh

421
00:14:07,440 --> 00:14:09,600
here's the fix to like make it go away

422
00:14:09,600 --> 00:14:11,839
is just you know deleting the file by

423
00:14:11,839 --> 00:14:14,480
echoing into it um again it's at c-lip

424
00:14:14,480 --> 00:14:15,519
system

425
00:14:15,519 --> 00:14:18,000
it seems that this particular malware

426
00:14:18,000 --> 00:14:19,440
infection was like quite widespread

427
00:14:19,440 --> 00:14:20,720
because it was absolutely hosing

428
00:14:20,720 --> 00:14:22,399
people's boxes whoever had written it

429
00:14:22,399 --> 00:14:24,880
had clearly up somehow and their

430
00:14:24,880 --> 00:14:27,279
group it didn't actually work

431
00:14:27,279 --> 00:14:29,839
so when i looked a bit further it turns

432
00:14:29,839 --> 00:14:30,880
out that

433
00:14:30,880 --> 00:14:32,720
this had been previously noted by trend

434
00:14:32,720 --> 00:14:35,040
micro and sandfly

435
00:14:35,040 --> 00:14:37,199
and the tldr is a group called kinsing

436
00:14:37,199 --> 00:14:38,800
we're dropping a modified bjork group

437
00:14:38,800 --> 00:14:40,639
kits they could hide their crypto mining

438
00:14:40,639 --> 00:14:43,199
and other shenanigans activities and it

439
00:14:43,199 --> 00:14:44,880
didn't work because they compiled it

440
00:14:44,880 --> 00:14:47,199
wrong so it just absolutely hosed all

441
00:14:47,199 --> 00:14:48,480
these systems they were trying to put it

442
00:14:48,480 --> 00:14:50,720
on like anything you do like even if you

443
00:14:50,720 --> 00:14:52,160
managed to get a shell working on one of

444
00:14:52,160 --> 00:14:54,639
those things all you get was like output

445
00:14:54,639 --> 00:14:56,560
errors for days every single time i

446
00:14:56,560 --> 00:14:58,720
tried to call anything

447
00:14:58,720 --> 00:15:00,480
it was just bro

448
00:15:00,480 --> 00:15:01,680
so

449
00:15:01,680 --> 00:15:03,279
i recently started working trying to

450
00:15:03,279 --> 00:15:05,120
categorize these there's so many of them

451
00:15:05,120 --> 00:15:07,199
in the wild but the actual diversity of

452
00:15:07,199 --> 00:15:08,880
code is pretty small they're all based

453
00:15:08,880 --> 00:15:10,320
on each other like

454
00:15:10,320 --> 00:15:12,480
um kind of like pedigree dogs or

455
00:15:12,480 --> 00:15:14,560
something you know there's like

456
00:15:14,560 --> 00:15:17,279
they're all like the same three or four

457
00:15:17,279 --> 00:15:19,519
uh like lineages

458
00:15:19,519 --> 00:15:21,120
so when i start trying to figure out a

459
00:15:21,120 --> 00:15:23,680
way to categorize and make a worksheet

460
00:15:23,680 --> 00:15:25,279
you will get your sample and you go what

461
00:15:25,279 --> 00:15:26,800
functions does it hook

462
00:15:26,800 --> 00:15:28,480
and then does it reuse code from known

463
00:15:28,480 --> 00:15:30,959
root kits like jinx what backdoors does

464
00:15:30,959 --> 00:15:32,800
it implement does it have any self

465
00:15:32,800 --> 00:15:34,079
protection methods some of them get

466
00:15:34,079 --> 00:15:35,680
really clever like some of them will

467
00:15:35,680 --> 00:15:38,399
load load their file in a memory

468
00:15:38,399 --> 00:15:41,120
and then spit it back out like they will

469
00:15:41,120 --> 00:15:43,040
if they detect somebody try to delete

470
00:15:43,040 --> 00:15:44,399
one of the root kits files they'll just

471
00:15:44,399 --> 00:15:46,399
move the file instead

472
00:15:46,399 --> 00:15:48,000
and they do some pretty neat stuff like

473
00:15:48,000 --> 00:15:51,199
do they do string obfuscation and also

474
00:15:51,199 --> 00:15:53,360
how does it decide what stuff to hide so

475
00:15:53,360 --> 00:15:55,519
most of them use magic gids like where

476
00:15:55,519 --> 00:15:58,240
the group id of a file is like one three

477
00:15:58,240 --> 00:16:00,399
three seven and that file is hidden

478
00:16:00,399 --> 00:16:02,959
uh some others written by somebody guy

479
00:16:02,959 --> 00:16:05,040
wrote fellaini um

480
00:16:05,040 --> 00:16:07,600
used x hatters which extended attributes

481
00:16:07,600 --> 00:16:09,440
which i thought was really cool

482
00:16:09,440 --> 00:16:11,279
so i started out and still work in

483
00:16:11,279 --> 00:16:13,120
progress but i think the best way to

484
00:16:13,120 --> 00:16:14,560
categorize these is going to be an excel

485
00:16:14,560 --> 00:16:16,399
worksheet um

486
00:16:16,399 --> 00:16:18,399
and that makes me want to you know

487
00:16:18,399 --> 00:16:21,279
not do this anymore

488
00:16:21,279 --> 00:16:24,240
um so for what functions is a hook i do

489
00:16:24,240 --> 00:16:25,600
have the spreadsheet i'll be uploading

490
00:16:25,600 --> 00:16:26,560
it later

491
00:16:26,560 --> 00:16:28,160
i picked a few example root kits and

492
00:16:28,160 --> 00:16:29,920
basically made a list of every hook they

493
00:16:29,920 --> 00:16:31,440
implement and some of them only

494
00:16:31,440 --> 00:16:33,279
implement like 10 hooks and some of them

495
00:16:33,279 --> 00:16:34,399
like

496
00:16:34,399 --> 00:16:36,399
what i think was umbreon implements like

497
00:16:36,399 --> 00:16:38,079
a hundred different hooks like somebody

498
00:16:38,079 --> 00:16:39,839
sat down and went it i'm right in

499
00:16:39,839 --> 00:16:41,519
the back door for every single function

500
00:16:41,519 --> 00:16:43,759
in like the glib c

501
00:16:43,759 --> 00:16:46,079
it took ages um i still need a couple of

502
00:16:46,079 --> 00:16:47,120
friends of mine to go over and make sure

503
00:16:47,120 --> 00:16:49,360
i haven't missed anything um

504
00:16:49,360 --> 00:16:51,199
fellaini also took a billion years to go

505
00:16:51,199 --> 00:16:52,959
through but at least whoever wrote that

506
00:16:52,959 --> 00:16:54,959
one put like all the names of the hooks

507
00:16:54,959 --> 00:16:57,199
in one file so i could like actually

508
00:16:57,199 --> 00:17:00,800
read it and not want you know

509
00:17:00,959 --> 00:17:02,959
um yeah so that's one way of

510
00:17:02,959 --> 00:17:04,400
categorizing them another way of

511
00:17:04,400 --> 00:17:06,480
categorizing them is like does it

512
00:17:06,480 --> 00:17:08,319
implement a remote back door or a local

513
00:17:08,319 --> 00:17:09,760
back door what back door does it

514
00:17:09,760 --> 00:17:11,280
implement and does it implement one that

515
00:17:11,280 --> 00:17:13,439
they've copy and pasted from james

516
00:17:13,439 --> 00:17:15,919
speaks most of the time yes

517
00:17:15,919 --> 00:17:18,240
um if it's an accept hook using ssl it's

518
00:17:18,240 --> 00:17:19,359
pretty much always going to be a

519
00:17:19,359 --> 00:17:22,079
jinx-based kit um

520
00:17:22,079 --> 00:17:23,839
that's kind of yes that's kind of where

521
00:17:23,839 --> 00:17:25,679
we're at at the moment with categorizing

522
00:17:25,679 --> 00:17:26,640
them

523
00:17:26,640 --> 00:17:28,960
the spreadsheet would go here so you can

524
00:17:28,960 --> 00:17:32,080
stare at like libc names but it'll be up

525
00:17:32,080 --> 00:17:34,960
on github probably tomorrow

526
00:17:34,960 --> 00:17:36,160
and then

527
00:17:36,160 --> 00:17:37,120
so the

528
00:17:37,120 --> 00:17:38,480
the bit that

529
00:17:38,480 --> 00:17:40,160
the bit that i've been getting to is

530
00:17:40,160 --> 00:17:42,080
like what the future this holds this

531
00:17:42,080 --> 00:17:43,360
something that i've noticed only over

532
00:17:43,360 --> 00:17:45,360
the last like six months when

533
00:17:45,360 --> 00:17:47,360
researching some of these again

534
00:17:47,360 --> 00:17:49,840
is task specific root kits so previously

535
00:17:49,840 --> 00:17:51,120
all the root kits these guys used were

536
00:17:51,120 --> 00:17:52,799
like very generic just like giving

537
00:17:52,799 --> 00:17:55,440
access but recently uh i came across a

538
00:17:55,440 --> 00:17:57,120
sample called lib curl deflected by sand

539
00:17:57,120 --> 00:17:59,120
flight and the whole root kit is

540
00:17:59,120 --> 00:18:01,840
designed around hiding a bit monero

541
00:18:01,840 --> 00:18:03,120
miner rather

542
00:18:03,120 --> 00:18:05,440
and all this rootkit does it basically

543
00:18:05,440 --> 00:18:07,760
ensures that that miner is hidden so

544
00:18:07,760 --> 00:18:09,520
like it makes

545
00:18:09,520 --> 00:18:11,520
it hides like how much systems of

546
00:18:11,520 --> 00:18:13,600
resource utilization is being used it

547
00:18:13,600 --> 00:18:16,080
hides like the miners process provides

548
00:18:16,080 --> 00:18:18,160
the miners network connections it's one

549
00:18:18,160 --> 00:18:20,000
job is to make sure they keep like

550
00:18:20,000 --> 00:18:22,160
wasting somebody else's precious clock

551
00:18:22,160 --> 00:18:24,080
cycles mining coins

552
00:18:24,080 --> 00:18:26,640
for the next like however many years

553
00:18:26,640 --> 00:18:28,480
and there's also been a couple of pocs

554
00:18:28,480 --> 00:18:30,080
for hiding containers i know the vlani

555
00:18:30,080 --> 00:18:31,679
root kit does

556
00:18:31,679 --> 00:18:33,520
it's got a thing for creating like a

557
00:18:33,520 --> 00:18:35,280
hidden lxc container in it which i

558
00:18:35,280 --> 00:18:36,960
thought was really cool

559
00:18:36,960 --> 00:18:38,640
um and i think that's kind of going to

560
00:18:38,640 --> 00:18:40,559
be the future of these because

561
00:18:40,559 --> 00:18:42,080
everything's containerized now you know

562
00:18:42,080 --> 00:18:43,280
we're all moving like docker and

563
00:18:43,280 --> 00:18:44,799
kubernetes and all that other hipster

564
00:18:44,799 --> 00:18:45,760
nonsense

565
00:18:45,760 --> 00:18:46,799
and like

566
00:18:46,799 --> 00:18:48,400
you know we're now seeing root kits that

567
00:18:48,400 --> 00:18:50,320
are specific to those environments like

568
00:18:50,320 --> 00:18:51,919
create a hidden container hide the

569
00:18:51,919 --> 00:18:54,160
container and like now you've got

570
00:18:54,160 --> 00:18:55,679
infrastructure in your infrastructure

571
00:18:55,679 --> 00:18:57,360
that you can't see which i think is kind

572
00:18:57,360 --> 00:18:59,120
of cool there's also some other cool

573
00:18:59,120 --> 00:19:00,480
tricks that have seen like people using

574
00:19:00,480 --> 00:19:02,000
them to break sl to get around

575
00:19:02,000 --> 00:19:03,919
certificate pinning and android apps

576
00:19:03,919 --> 00:19:05,600
using the exact same technique to kill

577
00:19:05,600 --> 00:19:07,520
the sl thing um

578
00:19:07,520 --> 00:19:08,960
yeah that's kind of where it's going in

579
00:19:08,960 --> 00:19:10,720
future that's kind of where the cool

580
00:19:10,720 --> 00:19:12,559
cutting edge of it is and the cool thing

581
00:19:12,559 --> 00:19:14,960
is mostly seem to evade edr linux

582
00:19:14,960 --> 00:19:16,720
because um

583
00:19:16,720 --> 00:19:18,799
i don't know why

584
00:19:18,799 --> 00:19:20,559
i guess the edr companies just they keep

585
00:19:20,559 --> 00:19:22,320
compiling things genetically so like the

586
00:19:22,320 --> 00:19:24,400
rootkit affects them so it's really

587
00:19:24,400 --> 00:19:25,919
weird sandfly we're like claiming that

588
00:19:25,919 --> 00:19:27,760
lib curl evades like pretty much all the

589
00:19:27,760 --> 00:19:29,760
major linux idioms i think that's

590
00:19:29,760 --> 00:19:31,600
there's definitely some

591
00:19:31,600 --> 00:19:32,960
some stuff there

592
00:19:32,960 --> 00:19:35,520
um i do have a ton of references that

593
00:19:35,520 --> 00:19:37,600
will all be in the git repo as well when

594
00:19:37,600 --> 00:19:39,840
i make it public tomorrow um

595
00:19:39,840 --> 00:19:41,600
these are like a small sample them i've

596
00:19:41,600 --> 00:19:43,840
got references code samples

597
00:19:43,840 --> 00:19:45,440
all that good stuff

598
00:19:45,440 --> 00:19:48,000
so yeah

599
00:19:48,000 --> 00:19:51,559
any questions

600
00:20:04,000 --> 00:20:07,000
is

601
00:20:10,720 --> 00:20:13,280
so mitigation-wise there isn't actually

602
00:20:13,280 --> 00:20:15,600
much for some weird reason um this is

603
00:20:15,600 --> 00:20:17,120
something that like has been talked

604
00:20:17,120 --> 00:20:19,200
about quite a bit recently um like

605
00:20:19,200 --> 00:20:21,120
statically linking everything is one way

606
00:20:21,120 --> 00:20:22,480
because that just kills that entire

607
00:20:22,480 --> 00:20:23,610
category of kits

608
00:20:23,610 --> 00:20:25,520
[Music]

609
00:20:25,520 --> 00:20:27,919
yeah you end up with like a lot of file

610
00:20:27,919 --> 00:20:29,440
size bloat um

611
00:20:29,440 --> 00:20:31,200
there is like the interesting is i

612
00:20:31,200 --> 00:20:33,360
couldn't figure out a way to configure

613
00:20:33,360 --> 00:20:36,799
glib c to like not load uh to not allow

614
00:20:36,799 --> 00:20:37,919
preloading

615
00:20:37,919 --> 00:20:39,360
now i know that if you use muscle

616
00:20:39,360 --> 00:20:41,520
instead muscle lipstick doesn't allow

617
00:20:41,520 --> 00:20:44,400
system-wide pre-loading but glib-c does

618
00:20:44,400 --> 00:20:46,400
so

619
00:20:46,400 --> 00:20:49,120
you know there could be something there

620
00:20:49,120 --> 00:20:50,240
but like

621
00:20:50,240 --> 00:20:52,400
yeah the mitigation-wise it's like it's

622
00:20:52,400 --> 00:20:54,320
one of those features that's in linux

623
00:20:54,320 --> 00:20:56,159
that like nobody really thought through

624
00:20:56,159 --> 00:20:57,679
because it's literally like the insert

625
00:20:57,679 --> 00:21:00,080
rootkit feature you know

626
00:21:00,080 --> 00:21:03,080
um

627
00:21:10,290 --> 00:21:13,520
[Music]

628
00:21:19,090 --> 00:21:22,189
[Applause]

629
00:21:22,640 --> 00:21:24,410
um

630
00:21:24,410 --> 00:21:27,549
[Music]

631
00:21:32,490 --> 00:21:35,599
[Music]

632
00:21:55,760 --> 00:21:58,320
yeah that's

633
00:22:08,240 --> 00:22:09,919
um i actually haven't seen anybody write

634
00:22:09,919 --> 00:22:12,720
one that works on linux properly um

635
00:22:12,720 --> 00:22:14,400
because again

636
00:22:14,400 --> 00:22:16,240
you're writing a rootkit for linux you

637
00:22:16,240 --> 00:22:17,840
know if you're writing an edr like

638
00:22:17,840 --> 00:22:18,960
there's functionally no difference

639
00:22:18,960 --> 00:22:21,520
between the edr product and the rootkit

640
00:22:21,520 --> 00:22:22,320
um

641
00:22:22,320 --> 00:22:24,480
i'm maintaining kernel modules on linux

642
00:22:24,480 --> 00:22:27,120
is it's a ball like you know you're just

643
00:22:27,120 --> 00:22:29,120
looking at pain and suffering

644
00:22:29,120 --> 00:22:31,439
um

645
00:22:32,960 --> 00:22:37,640
yes step one don't get home

646
00:22:41,440 --> 00:22:43,810
oh good it actually works

647
00:22:43,810 --> 00:22:48,530
[Applause]

