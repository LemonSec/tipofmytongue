1
00:00:08,820 --> 00:00:10,620
Vlog everyone

2
00:00:10,620 --> 00:00:12,540
welcome to Smalling botnet command and

3
00:00:12,540 --> 00:00:14,580
control the user's browsers my name is

4
00:00:14,580 --> 00:00:15,780
Matthew bernath I'm a security

5
00:00:15,780 --> 00:00:18,240
literature researcher or reverse

6
00:00:18,240 --> 00:00:20,760
engineer at um Cedar Creek software uh

7
00:00:20,760 --> 00:00:22,560
this work wasn't just by just me I had

8
00:00:22,560 --> 00:00:25,140
20 collaborators on it

9
00:00:25,140 --> 00:00:27,240
uh muhammadur who's the assistant's

10
00:00:27,240 --> 00:00:28,680
research at University of Michigan and

11
00:00:28,680 --> 00:00:31,679
then Ro James is a software engineer at

12
00:00:31,679 --> 00:00:32,579
Google

13
00:00:32,579 --> 00:00:34,440
yeah so in this presentation I plan on

14
00:00:34,440 --> 00:00:35,520
demonstrating that an attacker could

15
00:00:35,520 --> 00:00:37,739
leverage public ad services to Upstate

16
00:00:37,739 --> 00:00:38,700
the source of their command control

17
00:00:38,700 --> 00:00:41,100
servers by co-opting uh user's browsers

18
00:00:41,100 --> 00:00:43,500
to smuggle data and then my colleagues

19
00:00:43,500 --> 00:00:45,540
created the system that Garners users

20
00:00:45,540 --> 00:00:47,280
that provided means the proxy

21
00:00:47,280 --> 00:00:49,800
information on behalf of a botnet using

22
00:00:49,800 --> 00:00:52,020
widely supported web protocols brief

23
00:00:52,020 --> 00:00:53,039
outline

24
00:00:53,039 --> 00:00:54,059
um let's go over some background

25
00:00:54,059 --> 00:00:55,260
information if you're not familiar with

26
00:00:55,260 --> 00:00:58,320
Bonnet operations are uh talk about our

27
00:00:58,320 --> 00:01:00,360
system that we created uh the

28
00:01:00,360 --> 00:01:01,980
simulations we ran the robot Dow we

29
00:01:01,980 --> 00:01:03,300
collected to demonstrate the viability

30
00:01:03,300 --> 00:01:06,000
of our system and then our solutions to

31
00:01:06,000 --> 00:01:07,820
the problem this creates

32
00:01:07,820 --> 00:01:10,200
so our goal of this work was essentially

33
00:01:10,200 --> 00:01:12,600
to demonstrate a militia actor could

34
00:01:12,600 --> 00:01:15,240
create a uh oh sorry I should be

35
00:01:15,240 --> 00:01:17,100
reliable a reliable Network

36
00:01:17,100 --> 00:01:19,140
uh using ads to proxy information

37
00:01:19,140 --> 00:01:21,600
through uh users browsers and

38
00:01:21,600 --> 00:01:24,119
information for this work was to um be

39
00:01:24,119 --> 00:01:25,920
proactive in identifying areas of abuse

40
00:01:25,920 --> 00:01:27,659
uh in hopes of mitigating them before

41
00:01:27,659 --> 00:01:30,240
they become an issue

42
00:01:30,240 --> 00:01:31,979
so I'm just going to a brief overview of

43
00:01:31,979 --> 00:01:35,299
uh how bonus work so

44
00:01:35,299 --> 00:01:37,560
if you weren't aware

45
00:01:37,560 --> 00:01:39,659
um you know botnets are comprised of

46
00:01:39,659 --> 00:01:41,159
bots which are usually computers or

47
00:01:41,159 --> 00:01:43,200
systems that have malware on them um you

48
00:01:43,200 --> 00:01:44,400
have a command and control server that's

49
00:01:44,400 --> 00:01:47,340
the uh the way that um operators use to

50
00:01:47,340 --> 00:01:49,860
communicate with their mods

51
00:01:49,860 --> 00:01:51,000
um when it comes down to shutting down

52
00:01:51,000 --> 00:01:52,740
uh bonnets

53
00:01:52,740 --> 00:01:54,060
um there's three areas that are targeted

54
00:01:54,060 --> 00:01:55,680
and shutting them down you can go after

55
00:01:55,680 --> 00:01:58,500
the The Operators the botnets you can go

56
00:01:58,500 --> 00:02:00,540
after the Bots themselves or you can

57
00:02:00,540 --> 00:02:02,399
shut down the command control save the

58
00:02:02,399 --> 00:02:04,979
structure that's used for it

59
00:02:04,979 --> 00:02:07,500
in practice uh we most exceed the most

60
00:02:07,500 --> 00:02:10,380
effective way is to Target the command

61
00:02:10,380 --> 00:02:12,120
and control servers because when you

62
00:02:12,120 --> 00:02:14,160
shut those down you can essentially shut

63
00:02:14,160 --> 00:02:15,959
down the whole network

64
00:02:15,959 --> 00:02:18,120
oh this is usually done by taking over

65
00:02:18,120 --> 00:02:20,640
the IP or domain names use further

66
00:02:20,640 --> 00:02:23,580
botnets and then we use the term sync

67
00:02:23,580 --> 00:02:25,260
calling so you take over those assets

68
00:02:25,260 --> 00:02:26,760
and then shut them down and it

69
00:02:26,760 --> 00:02:29,280
neutralizes the network

70
00:02:29,280 --> 00:02:31,080
so in practice how do you discover

71
00:02:31,080 --> 00:02:33,000
command control servers

72
00:02:33,000 --> 00:02:34,620
um really there's there's two main

73
00:02:34,620 --> 00:02:36,180
methods um reverse engineering the

74
00:02:36,180 --> 00:02:37,319
malware

75
00:02:37,319 --> 00:02:40,080
um or traffic analysis so often security

76
00:02:40,080 --> 00:02:42,300
researchers will take them hour pick it

77
00:02:42,300 --> 00:02:44,340
apart look for domain names or IP

78
00:02:44,340 --> 00:02:46,620
addresses inside the malware

79
00:02:46,620 --> 00:02:47,760
um to identify the command control

80
00:02:47,760 --> 00:02:50,340
infrastructure or they'll just sandbox

81
00:02:50,340 --> 00:02:52,800
the effective system and see the traffic

82
00:02:52,800 --> 00:02:55,860
going to and from the malware

83
00:02:55,860 --> 00:02:57,900
binding operators have adapted over the

84
00:02:57,900 --> 00:03:01,260
years they've used a several methods to

85
00:03:01,260 --> 00:03:03,840
um for security researchers effort so um

86
00:03:03,840 --> 00:03:05,760
when you see a lot is domain name

87
00:03:05,760 --> 00:03:07,560
generation algorithms so instead of

88
00:03:07,560 --> 00:03:09,060
communicating to one fixed domain name

89
00:03:09,060 --> 00:03:11,519
they'll write an algorithm that generate

90
00:03:11,519 --> 00:03:13,019
potentially thousands of different

91
00:03:13,019 --> 00:03:15,480
domains that the botnet malware will

92
00:03:15,480 --> 00:03:16,920
reach out to

93
00:03:16,920 --> 00:03:18,900
uh we've seen seeing we've seen some

94
00:03:18,900 --> 00:03:20,459
very complicated systems using

95
00:03:20,459 --> 00:03:21,900
peer-to-peer Communications like

96
00:03:21,900 --> 00:03:25,560
distributed hash uh maps for identifying

97
00:03:25,560 --> 00:03:28,860
um co-located malware

98
00:03:28,860 --> 00:03:31,440
or uh co-opting popular websites there's

99
00:03:31,440 --> 00:03:33,900
famous instance of Instagram you know

100
00:03:33,900 --> 00:03:37,200
comments on celebrities um Instagram uh

101
00:03:37,200 --> 00:03:38,760
posts were actually used for command and

102
00:03:38,760 --> 00:03:39,540
control

103
00:03:39,540 --> 00:03:40,860
um instructions

104
00:03:40,860 --> 00:03:43,260
so and we're talking about this the

105
00:03:43,260 --> 00:03:45,480
system that we created to adapt to some

106
00:03:45,480 --> 00:03:46,739
of this stuff

107
00:03:46,739 --> 00:03:49,500
so we had a few design approaches when

108
00:03:49,500 --> 00:03:52,620
we wanted to come up with a system to

109
00:03:52,620 --> 00:03:54,260
um overcome

110
00:03:54,260 --> 00:03:57,060
defenses against or sorry to overcome

111
00:03:57,060 --> 00:03:58,680
methods that are used to shut down bot

112
00:03:58,680 --> 00:04:00,299
Nets so our first one was we're gonna

113
00:04:00,299 --> 00:04:02,580
avoid directly communicating with

114
00:04:02,580 --> 00:04:04,440
command and control we're going to

115
00:04:04,440 --> 00:04:05,879
highly vary the connections coming to

116
00:04:05,879 --> 00:04:07,080
malware

117
00:04:07,080 --> 00:04:08,220
um we're gonna use infrastructure that's

118
00:04:08,220 --> 00:04:10,140
resistant to scene calling and then

119
00:04:10,140 --> 00:04:11,580
we're not gonna we're gonna avoid trying

120
00:04:11,580 --> 00:04:13,019
to store any C2 information in the

121
00:04:13,019 --> 00:04:14,879
malware

122
00:04:14,879 --> 00:04:16,620
and our assistant there's really five

123
00:04:16,620 --> 00:04:18,358
main components to it which I'll

124
00:04:18,358 --> 00:04:20,459
elaborate more as we go on and then

125
00:04:20,459 --> 00:04:23,100
we'll also talk about

126
00:04:23,100 --> 00:04:24,300
um how all these parts work together in

127
00:04:24,300 --> 00:04:27,180
a little bit so we have drive-by ads we

128
00:04:27,180 --> 00:04:29,280
have um signaling an ad server

129
00:04:29,280 --> 00:04:31,199
um something we call proxy nodes

130
00:04:31,199 --> 00:04:32,880
um the command control server

131
00:04:32,880 --> 00:04:34,740
and then mailer

132
00:04:34,740 --> 00:04:36,240
so the first component really the main

133
00:04:36,240 --> 00:04:38,699
component of our system is we call drive

134
00:04:38,699 --> 00:04:41,280
by ads essentially

135
00:04:41,280 --> 00:04:43,560
the ads themselves proxy information to

136
00:04:43,560 --> 00:04:46,259
and from the malware or sorry processing

137
00:04:46,259 --> 00:04:47,639
information to and from the malware is

138
00:04:47,639 --> 00:04:50,639
facilitated by the ads we deploy

139
00:04:50,639 --> 00:04:51,780
um there's we call them drive by because

140
00:04:51,780 --> 00:04:52,740
they're short-lived ABS they're being

141
00:04:52,740 --> 00:04:55,380
taken up and down as needed we use ad

142
00:04:55,380 --> 00:04:58,560
services that exist on the web so we can

143
00:04:58,560 --> 00:05:01,139
get a large amount of users

144
00:05:01,139 --> 00:05:04,080
and then when we run the ads the users

145
00:05:04,080 --> 00:05:05,520
themselves that view the ads are the

146
00:05:05,520 --> 00:05:07,800
ones that have proxy information on our

147
00:05:07,800 --> 00:05:10,320
behalf for our botnet operations and

148
00:05:10,320 --> 00:05:12,660
then ads can be taken up or put up and

149
00:05:12,660 --> 00:05:14,340
taken down as needed

150
00:05:14,340 --> 00:05:16,680
we have an ad and signaling server so we

151
00:05:16,680 --> 00:05:18,900
have a this is one

152
00:05:18,900 --> 00:05:21,000
um server we actually if you ever run

153
00:05:21,000 --> 00:05:22,860
ads on the internet before most um ad

154
00:05:22,860 --> 00:05:24,479
companies you have to provide the

155
00:05:24,479 --> 00:05:25,860
infrastructure

156
00:05:25,860 --> 00:05:28,139
um which we'll be running our code and

157
00:05:28,139 --> 00:05:30,780
then we call part of this the signaling

158
00:05:30,780 --> 00:05:32,160
server because we use a web protocol

159
00:05:32,160 --> 00:05:34,860
called webrtc and in the that

160
00:05:34,860 --> 00:05:37,500
specification you need a means an

161
00:05:37,500 --> 00:05:40,139
out-of-band means to connect peers into

162
00:05:40,139 --> 00:05:42,960
a webrtc connection

163
00:05:42,960 --> 00:05:44,699
and I'll elaborate more on this as we go

164
00:05:44,699 --> 00:05:47,820
on but that process is called signaling

165
00:05:47,820 --> 00:05:49,800
and then proxy nodes proxy nodes are

166
00:05:49,800 --> 00:05:52,259
really just um users that visit websites

167
00:05:52,259 --> 00:05:54,300
that are running our ads and we call

168
00:05:54,300 --> 00:05:55,680
them proxy nodes because they're the

169
00:05:55,680 --> 00:05:57,060
ones that actually are sending the data

170
00:05:57,060 --> 00:05:58,139
to and

171
00:05:58,139 --> 00:06:00,120
back and forth from our malware to our

172
00:06:00,120 --> 00:06:03,479
botnet or to our Command control servers

173
00:06:03,479 --> 00:06:05,880
and then um anyone could be a proxy node

174
00:06:05,880 --> 00:06:07,380
all you need is a web browser that

175
00:06:07,380 --> 00:06:09,900
supports a webrtc and websockets

176
00:06:09,900 --> 00:06:11,460
um pretty much every major browser on

177
00:06:11,460 --> 00:06:13,020
every major platform supports those

178
00:06:13,020 --> 00:06:15,240
protocols

179
00:06:15,240 --> 00:06:17,639
and our Command control server is uh

180
00:06:17,639 --> 00:06:19,740
connects to the network by connecting to

181
00:06:19,740 --> 00:06:21,419
our signaling server and after

182
00:06:21,419 --> 00:06:23,280
connecting it receives

183
00:06:23,280 --> 00:06:26,819
um a web RTC peer which we call a proxy

184
00:06:26,819 --> 00:06:28,319
node in our Network and then once

185
00:06:28,319 --> 00:06:31,080
connected um it directs the proxy node

186
00:06:31,080 --> 00:06:33,840
to connect to our malware

187
00:06:33,840 --> 00:06:35,759
and then the malware itself um it just

188
00:06:35,759 --> 00:06:37,199
listens on a websocket for incoming

189
00:06:37,199 --> 00:06:40,560
connections from proxy nodes into

190
00:06:40,560 --> 00:06:42,000
receipts commands and sends information

191
00:06:42,000 --> 00:06:44,160
back from our operations

192
00:06:44,160 --> 00:06:46,259
so I want to demonstrate how this whole

193
00:06:46,259 --> 00:06:49,080
system works together so um to start we

194
00:06:49,080 --> 00:06:50,580
have a website in the middle there

195
00:06:50,580 --> 00:06:53,580
running our ad code which is just Java

196
00:06:53,580 --> 00:06:55,560
script that we haven't been in an ad we

197
00:06:55,560 --> 00:06:57,000
have a signaling server

198
00:06:57,000 --> 00:06:59,160
you have a user so this is just anyone

199
00:06:59,160 --> 00:07:01,500
going to a website running our ad code

200
00:07:01,500 --> 00:07:06,360
so to start someone visits the website

201
00:07:06,360 --> 00:07:08,819
and then once they visit the website the

202
00:07:08,819 --> 00:07:11,340
website um read in the website code just

203
00:07:11,340 --> 00:07:12,360
tells you to connect to our singling

204
00:07:12,360 --> 00:07:14,039
server this is pretty standard for any

205
00:07:14,039 --> 00:07:16,380
type of AD system

206
00:07:16,380 --> 00:07:19,440
and then once uh that operation happens

207
00:07:19,440 --> 00:07:22,199
a websocket will open from the user to

208
00:07:22,199 --> 00:07:24,120
our signaling server and at this point

209
00:07:24,120 --> 00:07:25,919
we refer the user as a proxy node

210
00:07:25,919 --> 00:07:28,740
because they have now joined our Network

211
00:07:28,740 --> 00:07:30,479
and then now we have this bike

212
00:07:30,479 --> 00:07:31,979
directional communication between our

213
00:07:31,979 --> 00:07:34,020
signaling server and the proxy you know

214
00:07:34,020 --> 00:07:35,639
established and then we're going to show

215
00:07:35,639 --> 00:07:37,199
you how our Command control server comes

216
00:07:37,199 --> 00:07:39,060
in this infrastructure so the command

217
00:07:39,060 --> 00:07:40,919
controls server you can see it is on the

218
00:07:40,919 --> 00:07:43,080
left there uh let's connect to our web

219
00:07:43,080 --> 00:07:46,259
or our ceiling server over websocket and

220
00:07:46,259 --> 00:07:47,460
it's going to tell

221
00:07:47,460 --> 00:07:49,380
uh once it connects the signaling server

222
00:07:49,380 --> 00:07:52,020
will actually tell the proxy node to

223
00:07:52,020 --> 00:07:54,360
connect to our current control server

224
00:07:54,360 --> 00:07:56,280
and it's going to actually connect over

225
00:07:56,280 --> 00:07:58,139
webrtc

226
00:07:58,139 --> 00:07:59,639
um it's going to use the data channels

227
00:07:59,639 --> 00:08:01,220
it's a

228
00:08:01,220 --> 00:08:04,680
that channel is just like webrtc is a a

229
00:08:04,680 --> 00:08:06,360
protocol that was originally designed

230
00:08:06,360 --> 00:08:08,039
for real-time communication using um

231
00:08:08,039 --> 00:08:10,139
like video and audio but it also

232
00:08:10,139 --> 00:08:11,340
supports

233
00:08:11,340 --> 00:08:13,440
just a normal data Channel between they

234
00:08:13,440 --> 00:08:15,120
just they call it a data Channel and so

235
00:08:15,120 --> 00:08:16,500
it opens the bi-directional connection

236
00:08:16,500 --> 00:08:18,300
between a command control server and the

237
00:08:18,300 --> 00:08:20,160
proxy node

238
00:08:20,160 --> 00:08:21,840
and then now we can see where we have

239
00:08:21,840 --> 00:08:24,720
our our bot that's gonna be using our

240
00:08:24,720 --> 00:08:26,879
system and our Network operator or our

241
00:08:26,879 --> 00:08:29,220
bot-in operator comes in the picture

242
00:08:29,220 --> 00:08:31,800
so our Bonnet operators is going to join

243
00:08:31,800 --> 00:08:33,000
our Network

244
00:08:33,000 --> 00:08:34,380
it's going to connect to the command

245
00:08:34,380 --> 00:08:35,820
control server whatever

246
00:08:35,820 --> 00:08:38,159
way SSH or anything

247
00:08:38,159 --> 00:08:40,740
he's going to tell the proxy node to

248
00:08:40,740 --> 00:08:43,080
connect to our malware he's going to

249
00:08:43,080 --> 00:08:45,480
give him the IP address and then the

250
00:08:45,480 --> 00:08:46,920
proxy node will connect to the the

251
00:08:46,920 --> 00:08:50,339
botnet malware over a websocket

252
00:08:50,339 --> 00:08:52,740
so in this game essentially

253
00:08:52,740 --> 00:08:55,380
um if you're a Defender you're going to

254
00:08:55,380 --> 00:08:56,220
see

255
00:08:56,220 --> 00:08:57,720
uh if you're a Defender looking at the

256
00:08:57,720 --> 00:09:00,839
network on the bot or the bot side all

257
00:09:00,839 --> 00:09:01,980
you can just do is see an incoming

258
00:09:01,980 --> 00:09:04,200
connection no need for phoning home in

259
00:09:04,200 --> 00:09:05,339
this situation

260
00:09:05,339 --> 00:09:06,959
and then if you were to pick apart the

261
00:09:06,959 --> 00:09:08,580
malware you wouldn't see

262
00:09:08,580 --> 00:09:10,920
um any addressing information stored

263
00:09:10,920 --> 00:09:14,820
and because the proxy nodes come from a

264
00:09:14,820 --> 00:09:16,260
variety of sources because they run from

265
00:09:16,260 --> 00:09:17,940
our ads the highly various connections

266
00:09:17,940 --> 00:09:19,860
we have coming to the bot

267
00:09:19,860 --> 00:09:21,480
and then now we essentially have a

268
00:09:21,480 --> 00:09:23,399
bi-directional Communications game set

269
00:09:23,399 --> 00:09:25,620
up between the botnet operator and the

270
00:09:25,620 --> 00:09:27,660
bots in the network

271
00:09:27,660 --> 00:09:29,220
we came up and designed this we really

272
00:09:29,220 --> 00:09:31,380
need to figure out if this system is uh

273
00:09:31,380 --> 00:09:34,560
viable so they're essentially the proxy

274
00:09:34,560 --> 00:09:35,880
nodes can randomly connect and

275
00:09:35,880 --> 00:09:37,860
disconnect from our system so we need

276
00:09:37,860 --> 00:09:39,480
for quality of service

277
00:09:39,480 --> 00:09:41,160
purposes we need to determine if this

278
00:09:41,160 --> 00:09:42,779
was actually like a viable communication

279
00:09:42,779 --> 00:09:44,519
scheme so you essentially have a very

280
00:09:44,519 --> 00:09:47,220
Dynamic um Network

281
00:09:47,220 --> 00:09:48,600
I'm not gonna go with too much details

282
00:09:48,600 --> 00:09:50,160
just because of time here but we did um

283
00:09:50,160 --> 00:09:51,839
initially do some rudimentary

284
00:09:51,839 --> 00:09:54,060
simulations we use Chrome driver and

285
00:09:54,060 --> 00:09:56,519
selenium those are tools often used for

286
00:09:56,519 --> 00:09:57,899
um just testing things developed on the

287
00:09:57,899 --> 00:09:58,740
internet

288
00:09:58,740 --> 00:10:01,920
and our goal is just to see what impact

289
00:10:01,920 --> 00:10:05,459
um a duration and the

290
00:10:05,459 --> 00:10:07,680
um Jitter from proxies connecting and

291
00:10:07,680 --> 00:10:09,360
how long have you had

292
00:10:09,360 --> 00:10:13,320
and effects are a message success right

293
00:10:13,320 --> 00:10:16,440
this slide right here is uh essentially

294
00:10:16,440 --> 00:10:18,360
you don't really need all too many of

295
00:10:18,360 --> 00:10:20,040
the details of it essentially we queued

296
00:10:20,040 --> 00:10:21,959
up 50 messages we'd

297
00:10:21,959 --> 00:10:24,360
um have simulated proxy nodes come to

298
00:10:24,360 --> 00:10:26,100
the network and

299
00:10:26,100 --> 00:10:28,380
um they would stay on there for a fixed

300
00:10:28,380 --> 00:10:30,360
time and uh the x-axis there is how long

301
00:10:30,360 --> 00:10:32,339
they viewed that

302
00:10:32,339 --> 00:10:33,720
and so

303
00:10:33,720 --> 00:10:35,519
um and we measure how many of the 50

304
00:10:35,519 --> 00:10:37,440
messages were successful in the

305
00:10:37,440 --> 00:10:38,760
transmission

306
00:10:38,760 --> 00:10:40,800
so you can see as longer longer the ad

307
00:10:40,800 --> 00:10:42,420
was running the more successful the

308
00:10:42,420 --> 00:10:44,700
message would happen and then this

309
00:10:44,700 --> 00:10:46,260
simulation right here is that we just

310
00:10:46,260 --> 00:10:49,500
added random disconnect times in um our

311
00:10:49,500 --> 00:10:51,420
simulation and you can see from these

312
00:10:51,420 --> 00:10:54,480
two metrics essentially that uh there is

313
00:10:54,480 --> 00:10:56,279
a strong correlation for how long our ad

314
00:10:56,279 --> 00:10:59,579
runs and how successful our messages are

315
00:10:59,579 --> 00:11:00,959
um and like some of the big takeaways we

316
00:11:00,959 --> 00:11:02,880
had from this was that webrtc has a

317
00:11:02,880 --> 00:11:05,399
really non-trivial startup time

318
00:11:05,399 --> 00:11:07,980
it's not really once the connection uh

319
00:11:07,980 --> 00:11:10,740
is established it's pretty fast but

320
00:11:10,740 --> 00:11:12,720
there's a complicated handshake process

321
00:11:12,720 --> 00:11:14,940
that happens over RTC

322
00:11:14,940 --> 00:11:16,980
um random disconnects have a large

323
00:11:16,980 --> 00:11:20,540
impact on message success but if we can

324
00:11:20,540 --> 00:11:24,060
in our very rudimentary simulation if we

325
00:11:24,060 --> 00:11:26,940
can get add time over three seconds our

326
00:11:26,940 --> 00:11:29,279
message rate goes up quite High

327
00:11:29,279 --> 00:11:31,320
and so this is gave us some indication

328
00:11:31,320 --> 00:11:33,660
that our communication scheme was viable

329
00:11:33,660 --> 00:11:36,180
and so but you can only get so far with

330
00:11:36,180 --> 00:11:38,040
um simulation so we decided to collect

331
00:11:38,040 --> 00:11:41,519
ruler data to further um give us insight

332
00:11:41,519 --> 00:11:43,820
into how feasible the system was

333
00:11:43,820 --> 00:11:46,260
so just based on prior research we saw

334
00:11:46,260 --> 00:11:48,120
that ad fly was actually used a lot for

335
00:11:48,120 --> 00:11:50,279
doing studies and ads

336
00:11:50,279 --> 00:11:53,040
um ad fly is a URL shortening service

337
00:11:53,040 --> 00:11:55,980
and how it works is essentially you can

338
00:11:55,980 --> 00:11:57,720
shorten a URL on there and you give it

339
00:11:57,720 --> 00:11:59,279
someone else and once they

340
00:11:59,279 --> 00:12:02,339
view the ad essentially uh they have a

341
00:12:02,339 --> 00:12:03,480
certain amount of time before they can

342
00:12:03,480 --> 00:12:04,620
click through the link to actually get

343
00:12:04,620 --> 00:12:06,240
to where they're going so this gives us

344
00:12:06,240 --> 00:12:07,860
a guaranteed amount of time they're

345
00:12:07,860 --> 00:12:10,260
viewing our ad and so

346
00:12:10,260 --> 00:12:11,700
um their service provided five second

347
00:12:11,700 --> 00:12:13,920
guaranteed ad time or the essentially

348
00:12:13,920 --> 00:12:15,420
the URL shortening service doesn't work

349
00:12:15,420 --> 00:12:17,279
for the person viewing the link they

350
00:12:17,279 --> 00:12:19,019
quote ten dollars for worldwide traffic

351
00:12:19,019 --> 00:12:21,200
so this gives us a better insight into

352
00:12:21,200 --> 00:12:23,160
network connection

353
00:12:23,160 --> 00:12:25,260
conditions we might experience and then

354
00:12:25,260 --> 00:12:27,839
a guaranteed 50 000 views and it allows

355
00:12:27,839 --> 00:12:29,760
JavaScript which we need for our

356
00:12:29,760 --> 00:12:31,920
protocols

357
00:12:31,920 --> 00:12:33,959
there's a bit of an ad approval process

358
00:12:33,959 --> 00:12:37,380
ahead so we initially sent ad fly um an

359
00:12:37,380 --> 00:12:39,300
ad essentially didn't show anything it

360
00:12:39,300 --> 00:12:40,920
just was our code on there

361
00:12:40,920 --> 00:12:42,540
this little preview they send you what

362
00:12:42,540 --> 00:12:44,220
your ad looks like on their website they

363
00:12:44,220 --> 00:12:45,839
actually uh denied that ad they said

364
00:12:45,839 --> 00:12:49,100
there's an error with your um your ads

365
00:12:49,100 --> 00:12:52,940
Banner HTML or

366
00:12:54,980 --> 00:12:57,540
kind of silly uh but they actually

367
00:12:57,540 --> 00:12:59,040
rejected that because it was too large

368
00:12:59,040 --> 00:13:00,779
they're like okay it was getting a

369
00:13:00,779 --> 00:13:01,920
little annoying but we made it actually

370
00:13:01,920 --> 00:13:03,300
fit in the dimensions we actually read

371
00:13:03,300 --> 00:13:05,339
their standards uh and they actually

372
00:13:05,339 --> 00:13:07,139
predicted that too so it says website is

373
00:13:07,139 --> 00:13:08,339
confusing or pretending to be something

374
00:13:08,339 --> 00:13:09,899
else at this point we actually were kind

375
00:13:09,899 --> 00:13:11,040
of worried that

376
00:13:11,040 --> 00:13:12,959
they might reject our ad because they do

377
00:13:12,959 --> 00:13:14,399
on their website say that they scanned

378
00:13:14,399 --> 00:13:15,839
their ads for malware and stuff like

379
00:13:15,839 --> 00:13:18,180
that so we're a little concerned so we

380
00:13:18,180 --> 00:13:19,320
actually changed it to point to

381
00:13:19,320 --> 00:13:21,540
someone's YouTube account says welcome

382
00:13:21,540 --> 00:13:22,980
to the SkyWars click here and this was

383
00:13:22,980 --> 00:13:24,959
actually accepted

384
00:13:24,959 --> 00:13:27,060
if they actually looked into our um ad

385
00:13:27,060 --> 00:13:28,560
code because we're doing measurements

386
00:13:28,560 --> 00:13:31,200
for their ad code they might think it's

387
00:13:31,200 --> 00:13:32,940
suspicious but in the realm of ads this

388
00:13:32,940 --> 00:13:35,100
might actually be that uncommon

389
00:13:35,100 --> 00:13:37,260
unless we had our ad um going we did

390
00:13:37,260 --> 00:13:39,480
collections of data over 24 hour period

391
00:13:39,480 --> 00:13:41,459
we had 45

392
00:13:41,459 --> 00:13:44,519
000 unique requests nearly 28 000 unique

393
00:13:44,519 --> 00:13:45,839
IPS

394
00:13:45,839 --> 00:13:48,180
so over seven thousand you use user

395
00:13:48,180 --> 00:13:50,940
agents and then about four percent of

396
00:13:50,940 --> 00:13:52,920
connections didn't support webrtc which

397
00:13:52,920 --> 00:13:55,260
is what we need for our system but 100

398
00:13:55,260 --> 00:13:57,240
of them supported websockets and we

399
00:13:57,240 --> 00:13:58,880
spent about six dollars in running this

400
00:13:58,880 --> 00:14:02,279
so this is just a heat map of like

401
00:14:02,279 --> 00:14:03,720
um where all our connections were coming

402
00:14:03,720 --> 00:14:06,240
from so it said worldwide traffic but it

403
00:14:06,240 --> 00:14:07,860
was really predominantly in Southeast

404
00:14:07,860 --> 00:14:09,420
Asia

405
00:14:09,420 --> 00:14:10,620
one of the things we measure was

406
00:14:10,620 --> 00:14:11,880
concurrent users because this really

407
00:14:11,880 --> 00:14:13,800
helps with how successful a message will

408
00:14:13,800 --> 00:14:15,300
be sent in dirt

409
00:14:15,300 --> 00:14:17,220
in our system because if we have

410
00:14:17,220 --> 00:14:19,139
multiple paths to reach our destinations

411
00:14:19,139 --> 00:14:20,579
then

412
00:14:20,579 --> 00:14:23,399
um just hire message reliability ad fly

413
00:14:23,399 --> 00:14:25,980
has like a ad bidding for time frame

414
00:14:25,980 --> 00:14:27,660
kind of system that's what you see in

415
00:14:27,660 --> 00:14:28,980
this huge Spike here if you believe is

416
00:14:28,980 --> 00:14:31,079
that essentially that there was

417
00:14:31,079 --> 00:14:32,639
um no other competing ads during that

418
00:14:32,639 --> 00:14:35,399
time so when our ad was ran to that time

419
00:14:35,399 --> 00:14:37,680
we got a lot more users

420
00:14:37,680 --> 00:14:39,300
uh another thing is was connection

421
00:14:39,300 --> 00:14:40,920
duration because this is very important

422
00:14:40,920 --> 00:14:43,560
for our messages based on the

423
00:14:43,560 --> 00:14:45,120
simulations we did

424
00:14:45,120 --> 00:14:47,100
most people State around the time frame

425
00:14:47,100 --> 00:14:48,420
that you'd expect for the five seconds

426
00:14:48,420 --> 00:14:49,500
that they add around they'd click

427
00:14:49,500 --> 00:14:52,019
through it but we saw uh quite a few

428
00:14:52,019 --> 00:14:54,060
people would be on it for almost a whole

429
00:14:54,060 --> 00:14:56,519
day because we ran our collection for a

430
00:14:56,519 --> 00:14:58,079
day and we believe it's just people

431
00:14:58,079 --> 00:14:59,100
would like

432
00:14:59,100 --> 00:15:02,100
go to a shortened URL and then

433
00:15:02,100 --> 00:15:04,680
they would uh switch tabs or something

434
00:15:04,680 --> 00:15:05,760
like that so this because this code

435
00:15:05,760 --> 00:15:07,500
continuously runs the if you're not um

436
00:15:07,500 --> 00:15:10,620
have that tab open so we could send data

437
00:15:10,620 --> 00:15:12,839
quite well it would appear because a lot

438
00:15:12,839 --> 00:15:15,240
there's a non-trivial amount of people

439
00:15:15,240 --> 00:15:16,620
are going to be connected to our ad for

440
00:15:16,620 --> 00:15:18,120
a significant number of time

441
00:15:18,120 --> 00:15:19,980
from our real debt installations we

442
00:15:19,980 --> 00:15:21,660
think this is a viable scheme for

443
00:15:21,660 --> 00:15:23,940
practicing information on behalf of

444
00:15:23,940 --> 00:15:26,339
malicious actors so a few solutions to

445
00:15:26,339 --> 00:15:28,920
the problem this creates essentially ad

446
00:15:28,920 --> 00:15:30,660
Services should probably block webrtc

447
00:15:30,660 --> 00:15:32,519
and websockets

448
00:15:32,519 --> 00:15:33,660
um you really don't need them for

449
00:15:33,660 --> 00:15:35,300
traditional ads

450
00:15:35,300 --> 00:15:39,320
webrtc has uh can actually leak um

451
00:15:39,320 --> 00:15:41,699
information from behind proxies and

452
00:15:41,699 --> 00:15:43,620
fingerprint you quite well because it's

453
00:15:43,620 --> 00:15:45,839
um it quarries your uh protocols you

454
00:15:45,839 --> 00:15:47,940
support for median coding and those can

455
00:15:47,940 --> 00:15:50,399
be very highly variable web browsers

456
00:15:50,399 --> 00:15:51,540
should actually have some sort of

457
00:15:51,540 --> 00:15:53,399
notification for webrtc data channels

458
00:15:53,399 --> 00:15:57,000
come up so in most uses a webrtc you'd

459
00:15:57,000 --> 00:15:58,500
uh get a notification if your microphone

460
00:15:58,500 --> 00:16:00,180
or your webcam is getting activated but

461
00:16:00,180 --> 00:16:01,500
in this instance

462
00:16:01,500 --> 00:16:03,180
if you use just data channels there's no

463
00:16:03,180 --> 00:16:05,220
indication that a data channel is

464
00:16:05,220 --> 00:16:06,420
happening

465
00:16:06,420 --> 00:16:07,860
and it's kind of important because you

466
00:16:07,860 --> 00:16:10,380
can potentially connecting to uh

467
00:16:10,380 --> 00:16:12,420
non-traditional infrastructure if you

468
00:16:12,420 --> 00:16:14,220
use this and then in general users

469
00:16:14,220 --> 00:16:16,139
should just block ads in general let's

470
00:16:16,139 --> 00:16:20,880
not a safe thing to do or let go

471
00:16:20,880 --> 00:16:22,260
and our Collision from our work was

472
00:16:22,260 --> 00:16:23,940
essentially that drive-by ads can create

473
00:16:23,940 --> 00:16:25,920
a reliable

474
00:16:25,920 --> 00:16:28,260
form to anonymize CT traffic with a

475
00:16:28,260 --> 00:16:29,699
botnet with

476
00:16:29,699 --> 00:16:31,620
very minimal cost using Wiley's forward

477
00:16:31,620 --> 00:16:34,199
web protocols and that's it for my

478
00:16:34,199 --> 00:16:36,620
presentation

