1
00:00:03,899 --> 00:00:06,720
all right welcome again to Friday

2
00:00:06,720 --> 00:00:09,000
morning uh starting off here in track

3
00:00:09,000 --> 00:00:11,460
two we've got Andy Robbins also you may

4
00:00:11,460 --> 00:00:13,980
know me as Walden uh attacking and

5
00:00:13,980 --> 00:00:16,560
defending Azure with Bloodhound uh Andy

6
00:00:16,560 --> 00:00:17,880
is one of the co-creators of Bloodhound

7
00:00:17,880 --> 00:00:20,039
uh and is the product architect of

8
00:00:20,039 --> 00:00:22,260
Bloodhound Enterprise at spectroops his

9
00:00:22,260 --> 00:00:23,580
backgrounds in red teaming and Pen

10
00:00:23,580 --> 00:00:25,320
testing he's written about Azure attack

11
00:00:25,320 --> 00:00:27,000
Primitives on the Specter Ops blog

12
00:00:27,000 --> 00:00:28,320
spoken at and given training at

13
00:00:28,320 --> 00:00:29,580
conferences all over the place for

14
00:00:29,580 --> 00:00:31,800
active directory security so he is the

15
00:00:31,800 --> 00:00:33,420
guy you want to hear about Bloodhound

16
00:00:33,420 --> 00:00:35,160
from

17
00:00:35,160 --> 00:00:39,120
all yours thanks all right so there's a

18
00:00:39,120 --> 00:00:40,680
couple empty seats in the front right

19
00:00:40,680 --> 00:00:42,000
here if you want a front row seat

20
00:00:42,000 --> 00:00:44,520
premium first class

21
00:00:44,520 --> 00:00:46,739
so thanks to that intro uh like you said

22
00:00:46,739 --> 00:00:48,780
this is attacking and defending Azure

23
00:00:48,780 --> 00:00:50,100
with Bloodhound if you're a web app

24
00:00:50,100 --> 00:00:52,379
person you're in the wrong room

25
00:00:52,379 --> 00:00:55,500
so uh we've already said all this but if

26
00:00:55,500 --> 00:00:56,879
you want to see a higher resolution of

27
00:00:56,879 --> 00:00:58,800
my face and maybe see some of my pores

28
00:00:58,800 --> 00:01:00,539
there's a higher resolution version of

29
00:01:00,539 --> 00:01:02,760
my of my face you can find me on Twitter

30
00:01:02,760 --> 00:01:06,060
at underscore Waldo with a zero

31
00:01:06,060 --> 00:01:07,560
so here's the agenda for what we're

32
00:01:07,560 --> 00:01:08,580
going to be talking about and we've got

33
00:01:08,580 --> 00:01:10,320
a lot of stuff to go through and so I'm

34
00:01:10,320 --> 00:01:11,760
going to try to go at kind of a fast

35
00:01:11,760 --> 00:01:12,720
clip

36
00:01:12,720 --> 00:01:14,280
first we're going to talk about what

37
00:01:14,280 --> 00:01:18,060
problems we are trying to solve by using

38
00:01:18,060 --> 00:01:21,780
graphs to attack and defend azure

39
00:01:21,780 --> 00:01:23,820
then we're going to look at attacking

40
00:01:23,820 --> 00:01:26,880
Azure then defending Azure with graphs

41
00:01:26,880 --> 00:01:29,220
more specifically with a graph tool

42
00:01:29,220 --> 00:01:31,799
called Bloodhound and then a conclusion

43
00:01:31,799 --> 00:01:33,960
at the very end so

44
00:01:33,960 --> 00:01:35,939
I'm going to start off by getting on a

45
00:01:35,939 --> 00:01:38,100
little bit of a soapbox and talk about

46
00:01:38,100 --> 00:01:39,659
what problems we're solving but I want

47
00:01:39,659 --> 00:01:43,040
to do this to frame the context of

48
00:01:43,040 --> 00:01:46,920
why we use graphs in the first place

49
00:01:46,920 --> 00:01:48,119
um because

50
00:01:48,119 --> 00:01:51,060
a lot of times things can turn into a

51
00:01:51,060 --> 00:01:53,399
solution in search of a problem but I

52
00:01:53,399 --> 00:01:56,100
want to try to explain how this is a

53
00:01:56,100 --> 00:01:58,740
solution that is solving a very specific

54
00:01:58,740 --> 00:02:01,140
problem instead

55
00:02:01,140 --> 00:02:03,060
so first of all I want to talk about

56
00:02:03,060 --> 00:02:05,340
where we've been in the room are there

57
00:02:05,340 --> 00:02:07,200
anybody is anybody in here like a pen

58
00:02:07,200 --> 00:02:10,199
tester red teamer uh off like like it

59
00:02:10,199 --> 00:02:12,060
audit something like that okay and then

60
00:02:12,060 --> 00:02:14,340
what about on the defensive side

61
00:02:14,340 --> 00:02:16,440
okay so there's way more defenders in

62
00:02:16,440 --> 00:02:18,840
here than than attackers I think so I'm

63
00:02:18,840 --> 00:02:21,360
going to tell you where we've been as

64
00:02:21,360 --> 00:02:23,940
far as the offensive side and for the

65
00:02:23,940 --> 00:02:25,680
Defenders you may be familiar with some

66
00:02:25,680 --> 00:02:27,540
of these tools

67
00:02:27,540 --> 00:02:30,420
active directory launched in 1999

68
00:02:30,420 --> 00:02:34,459
and it wasn't until 2007 that we had a

69
00:02:34,459 --> 00:02:37,560
uh a toolkit that could actually abuse

70
00:02:37,560 --> 00:02:39,840
the past the hash primitive so pass the

71
00:02:39,840 --> 00:02:41,459
hash actually came out way before this

72
00:02:41,459 --> 00:02:44,280
but it wasn't until Hernan Ochoa put out

73
00:02:44,280 --> 00:02:46,019
the pth toolkit that it was actually

74
00:02:46,019 --> 00:02:48,900
usable and reliable so what is that

75
00:02:48,900 --> 00:02:51,120
that's eight years after the initial

76
00:02:51,120 --> 00:02:53,640
release of active directory after that

77
00:02:53,640 --> 00:02:59,360
we get mimikatz uh a full 12 years later

78
00:02:59,360 --> 00:03:02,400
responder kerberost from Tim Nadine Tim

79
00:03:02,400 --> 00:03:04,500
is up the red Siege Booth if you've ever

80
00:03:04,500 --> 00:03:06,959
used Kerberos you owe him a beer or a

81
00:03:06,959 --> 00:03:08,340
beverage of his choice

82
00:03:08,340 --> 00:03:10,440
and then in 2021

83
00:03:10,440 --> 00:03:14,220
22 years or what you might call eat like

84
00:03:14,220 --> 00:03:17,040
a whole generation of people after A.D

85
00:03:17,040 --> 00:03:20,220
first came out we had the adcs abuse

86
00:03:20,220 --> 00:03:22,680
Primitives formally documented and

87
00:03:22,680 --> 00:03:26,400
understood and let's say weaponized uh

88
00:03:26,400 --> 00:03:28,620
so that anybody can pull a tool off the

89
00:03:28,620 --> 00:03:30,959
shelf and audit for misconfigurations in

90
00:03:30,959 --> 00:03:32,940
a real environment regarding active

91
00:03:32,940 --> 00:03:35,540
directory certificate services

92
00:03:35,540 --> 00:03:38,220
so what do the all these tools have in

93
00:03:38,220 --> 00:03:39,120
common

94
00:03:39,120 --> 00:03:42,360
they don't exploit anything

95
00:03:42,360 --> 00:03:45,900
they abuse configuration issues but

96
00:03:45,900 --> 00:03:47,280
they're not taking advantage of anything

97
00:03:47,280 --> 00:03:49,739
that Microsoft can patch or that

98
00:03:49,739 --> 00:03:52,739
Microsoft will change because of the

99
00:03:52,739 --> 00:03:54,420
backwards compatibility issues with

100
00:03:54,420 --> 00:03:56,640
supporting uh Legacy Windows

101
00:03:56,640 --> 00:03:58,560
installations

102
00:03:58,560 --> 00:04:00,900
so they abuse legitimate protocols they

103
00:04:00,900 --> 00:04:02,640
don't there's nothing for Microsoft to

104
00:04:02,640 --> 00:04:03,840
patch here this is all about

105
00:04:03,840 --> 00:04:06,299
misconfigurations

106
00:04:06,299 --> 00:04:08,220
and finally what they all have in common

107
00:04:08,220 --> 00:04:10,560
is that they are extraordinarily

108
00:04:10,560 --> 00:04:13,560
reliable uh I might even say that some

109
00:04:13,560 --> 00:04:15,239
of the offensive tools that are out

110
00:04:15,239 --> 00:04:17,880
there are more reliable than some of the

111
00:04:17,880 --> 00:04:19,918
commercial tools that people pay a lot

112
00:04:19,918 --> 00:04:22,260
of money for mimikatz Works basically

113
00:04:22,260 --> 00:04:24,479
every time like if you've rolled the

114
00:04:24,479 --> 00:04:25,919
binary for the correct version of

115
00:04:25,919 --> 00:04:29,100
Windows it is going to work and the fact

116
00:04:29,100 --> 00:04:30,840
that software is free and that it's

117
00:04:30,840 --> 00:04:33,000
basically developed by two people is

118
00:04:33,000 --> 00:04:36,840
incredible it's absolutely incredible

119
00:04:36,840 --> 00:04:39,660
so that reliability

120
00:04:39,660 --> 00:04:42,660
is not about the tools themselves

121
00:04:42,660 --> 00:04:45,240
that reliability

122
00:04:45,240 --> 00:04:48,120
it reveals the extreme reliability of

123
00:04:48,120 --> 00:04:51,960
attacking active directory so

124
00:04:51,960 --> 00:04:55,740
like I said A.D came out in 1999

125
00:04:55,740 --> 00:04:58,020
we're still talking about it like the

126
00:04:58,020 --> 00:05:00,300
Matrix came out when A.D came out we're

127
00:05:00,300 --> 00:05:02,580
not talking about the Matrix anymore

128
00:05:02,580 --> 00:05:04,440
we talk about active directory still

129
00:05:04,440 --> 00:05:07,380
today and I think that's somewhat unique

130
00:05:07,380 --> 00:05:10,320
to A.D

131
00:05:10,320 --> 00:05:12,300
but what I will also say before we move

132
00:05:12,300 --> 00:05:15,120
on is that the underlying issues that

133
00:05:15,120 --> 00:05:16,919
these tools are abusing

134
00:05:16,919 --> 00:05:19,380
have more to do with how difficult it is

135
00:05:19,380 --> 00:05:22,979
for an ad admin to get ad into a secure

136
00:05:22,979 --> 00:05:26,400
posture and maintain that secure posture

137
00:05:26,400 --> 00:05:28,380
that has to do with the fundamental

138
00:05:28,380 --> 00:05:30,479
building blocks of role-based Access

139
00:05:30,479 --> 00:05:31,919
Control

140
00:05:31,919 --> 00:05:35,759
that the new identity and access

141
00:05:35,759 --> 00:05:39,539
management platforms like gcp AWS Azure

142
00:05:39,539 --> 00:05:43,080
ad and OCTA are also built upon they use

143
00:05:43,080 --> 00:05:44,820
the same building blocks

144
00:05:44,820 --> 00:05:48,840
so where we've been with ad

145
00:05:48,840 --> 00:05:51,360
if things don't change is where we will

146
00:05:51,360 --> 00:05:54,479
be in 10 or 15 or 20 years with AWS and

147
00:05:54,479 --> 00:05:56,880
Azure ad so Amazon and Microsoft they

148
00:05:56,880 --> 00:05:58,440
have not fixed these underlying issues

149
00:05:58,440 --> 00:06:00,060
with the fundamental fundamental

150
00:06:00,060 --> 00:06:03,600
building blocks of how our back works

151
00:06:03,600 --> 00:06:05,280
in short

152
00:06:05,280 --> 00:06:07,860
for over 20 years on the offensive side

153
00:06:07,860 --> 00:06:11,160
we've been using the same ttps to

154
00:06:11,160 --> 00:06:13,560
reliably take over any Enterprise

155
00:06:13,560 --> 00:06:16,800
running active directory last thing I'll

156
00:06:16,800 --> 00:06:18,120
say here

157
00:06:18,120 --> 00:06:20,220
is if you're a consultant and you are

158
00:06:20,220 --> 00:06:22,319
delivering a report to your customer and

159
00:06:22,319 --> 00:06:23,819
you find yourself writing up the same

160
00:06:23,819 --> 00:06:25,139
exact findings over and over and over

161
00:06:25,139 --> 00:06:27,180
and over and over and over and over

162
00:06:27,180 --> 00:06:29,160
you have identified an industry problem

163
00:06:29,160 --> 00:06:32,100
not a customer problem so

164
00:06:32,100 --> 00:06:33,780
Zoom your perspective out a little bit

165
00:06:33,780 --> 00:06:36,180
and stop criticizing customers for

166
00:06:36,180 --> 00:06:39,080
things that they can't fix

167
00:06:39,300 --> 00:06:42,979
where we are today

168
00:06:43,139 --> 00:06:45,720
so for the red teamers in here you might

169
00:06:45,720 --> 00:06:49,819
find this kind of familiar

170
00:06:50,580 --> 00:06:52,259
somebody hires you to do a red team

171
00:06:52,259 --> 00:06:54,660
assessment or a pen test you find and

172
00:06:54,660 --> 00:06:57,060
execute an attack path to go from no

173
00:06:57,060 --> 00:06:58,919
access all the way up to domain admin

174
00:06:58,919 --> 00:07:01,199
let's say

175
00:07:01,199 --> 00:07:03,780
you deliver a report and your customer

176
00:07:03,780 --> 00:07:07,380
remediates uh either none some or all

177
00:07:07,380 --> 00:07:10,819
pieces of that attack path

178
00:07:10,979 --> 00:07:14,039
to hire you the next year and you do you

179
00:07:14,039 --> 00:07:15,960
do it all over again and a lot of times

180
00:07:15,960 --> 00:07:17,759
you wind up writing up the same exact

181
00:07:17,759 --> 00:07:20,520
findings year after year after year

182
00:07:20,520 --> 00:07:21,960
and that gets kind of boring after a

183
00:07:21,960 --> 00:07:23,759
while

184
00:07:23,759 --> 00:07:25,620
but what about from the defensive

185
00:07:25,620 --> 00:07:28,259
perspective I think this is actually a

186
00:07:28,259 --> 00:07:31,560
pretty easy thing to project

187
00:07:31,560 --> 00:07:34,860
so the red team the you know jerks that

188
00:07:34,860 --> 00:07:36,780
we hired to come tell us how much we

189
00:07:36,780 --> 00:07:37,800
suck

190
00:07:37,800 --> 00:07:40,680
came in showed us some new attack path

191
00:07:40,680 --> 00:07:44,060
that we had no idea about

192
00:07:44,520 --> 00:07:46,259
through no fault of our own like these

193
00:07:46,259 --> 00:07:48,599
are very hard things to find

194
00:07:48,599 --> 00:07:51,900
we try to clean up some pieces of that

195
00:07:51,900 --> 00:07:54,720
attack path and then we run into

196
00:07:54,720 --> 00:07:57,479
Federated I.T Shadow I.T like business

197
00:07:57,479 --> 00:07:59,880
requirements uh technical limitations

198
00:07:59,880 --> 00:08:01,800
backwards compatibility issues like you

199
00:08:01,800 --> 00:08:04,139
name it like there's so many hurdles

200
00:08:04,139 --> 00:08:07,020
that are legitimate hurdles that people

201
00:08:07,020 --> 00:08:09,000
try to overcome

202
00:08:09,000 --> 00:08:11,940
uh and more more often than not are

203
00:08:11,940 --> 00:08:14,160
defeated by those hurdles

204
00:08:14,160 --> 00:08:17,160
some time passes and we do it again

205
00:08:17,160 --> 00:08:19,199
so this is frustrating

206
00:08:19,199 --> 00:08:21,000
and in short

207
00:08:21,000 --> 00:08:22,379
I would say that where we are right now

208
00:08:22,379 --> 00:08:24,180
is we're tail chasing we're chasing our

209
00:08:24,180 --> 00:08:26,160
Tails we're fighting a war against

210
00:08:26,160 --> 00:08:28,860
attack paths with the wrong weapons

211
00:08:28,860 --> 00:08:32,458
so I come from uh pen testing like Banks

212
00:08:32,458 --> 00:08:34,200
and credit unions and it was like week

213
00:08:34,200 --> 00:08:35,520
after week after week after week it was

214
00:08:35,520 --> 00:08:37,020
like a pen test puppy mill that I came

215
00:08:37,020 --> 00:08:37,799
from

216
00:08:37,799 --> 00:08:39,958
and uh

217
00:08:39,958 --> 00:08:42,479
we would find a like one attack path or

218
00:08:42,479 --> 00:08:43,919
two attack paths or if you're a rock

219
00:08:43,919 --> 00:08:45,600
star you play three attack paths in that

220
00:08:45,600 --> 00:08:46,800
Network

221
00:08:46,800 --> 00:08:48,480
we started doing things on the defensive

222
00:08:48,480 --> 00:08:50,100
side with Bloodhound we started actually

223
00:08:50,100 --> 00:08:51,540
counting out the total number of attack

224
00:08:51,540 --> 00:08:53,820
paths that actually existed in like a

225
00:08:53,820 --> 00:08:55,500
decently sized Network let's take 10 000

226
00:08:55,500 --> 00:08:59,279
endpoints and it's not like dozens it's

227
00:08:59,279 --> 00:09:00,839
not hundreds it's not even thousands

228
00:09:00,839 --> 00:09:03,060
it's literally tens or hundreds of

229
00:09:03,060 --> 00:09:06,360
millions so finding one attack path per

230
00:09:06,360 --> 00:09:07,140
year

231
00:09:07,140 --> 00:09:09,000
forget it it's it's the wrong tool for

232
00:09:09,000 --> 00:09:11,300
the job

233
00:09:12,720 --> 00:09:15,240
where we are going so now I get to

234
00:09:15,240 --> 00:09:17,519
prognosticate to you

235
00:09:17,519 --> 00:09:19,140
so we looked at this before this is the

236
00:09:19,140 --> 00:09:21,360
timeline of active directory and the

237
00:09:21,360 --> 00:09:23,339
offensive tools that are very popular

238
00:09:23,339 --> 00:09:25,800
and very reliable to use against that

239
00:09:25,800 --> 00:09:29,339
here's Azure Azure came out in 2008.

240
00:09:29,339 --> 00:09:32,820
2018 we got microburst uh from Carl

241
00:09:32,820 --> 00:09:34,019
fossen

242
00:09:34,019 --> 00:09:36,420
2020 we got power Jour from Ryan

243
00:09:36,420 --> 00:09:38,640
hausneck storm spotter from Lauren Gray

244
00:09:38,640 --> 00:09:41,820
and Road tools from dirkyo malema

245
00:09:41,820 --> 00:09:45,899
uh so what is that that's uh 12 years

246
00:09:45,899 --> 00:09:47,880
after the Azure launch that we like now

247
00:09:47,880 --> 00:09:50,760
start to have some formalized uh

248
00:09:50,760 --> 00:09:52,740
you could say like offensive code but

249
00:09:52,740 --> 00:09:55,680
really offensive code is all audit code

250
00:09:55,680 --> 00:09:57,180
so you can use these things to audit for

251
00:09:57,180 --> 00:10:00,240
misconfigurations in your environment

252
00:10:00,240 --> 00:10:03,540
the next 10 years if we can compare to

253
00:10:03,540 --> 00:10:05,940
where we have been with on-prem active

254
00:10:05,940 --> 00:10:07,440
directory

255
00:10:07,440 --> 00:10:10,560
I would say and I would project that the

256
00:10:10,560 --> 00:10:12,720
most

257
00:10:12,720 --> 00:10:15,300
um let's say effective

258
00:10:15,300 --> 00:10:18,000
maybe we could say devastating tooling

259
00:10:18,000 --> 00:10:20,220
around Azure is still to come like we

260
00:10:20,220 --> 00:10:21,720
haven't we haven't seen it yet and and I

261
00:10:21,720 --> 00:10:22,620
would say the same thing is probably

262
00:10:22,620 --> 00:10:25,140
true with AWS I'm not an expert with AWS

263
00:10:25,140 --> 00:10:28,800
but I would say it's probably the case

264
00:10:28,800 --> 00:10:30,540
so where we're going nobody really knows

265
00:10:30,540 --> 00:10:32,880
like if if somebody tells you they know

266
00:10:32,880 --> 00:10:34,260
what the future holds they're trying to

267
00:10:34,260 --> 00:10:36,420
sell you something right so the truth is

268
00:10:36,420 --> 00:10:38,899
no one really knows but with that said

269
00:10:38,899 --> 00:10:42,500
let me sell you this

270
00:10:42,839 --> 00:10:45,360
I think this is so true and this is if

271
00:10:45,360 --> 00:10:46,620
you've ever seen a talk that I've given

272
00:10:46,620 --> 00:10:48,180
you have seen this quote so many times

273
00:10:48,180 --> 00:10:49,620
and you're probably tired of it and it's

274
00:10:49,620 --> 00:10:52,740
kind of a meme but it is so true so John

275
00:10:52,740 --> 00:10:55,500
Lambert at Microsoft said Defenders

276
00:10:55,500 --> 00:10:58,380
thinking lists attackers thinking graphs

277
00:10:58,380 --> 00:11:01,140
as long as this is true attackers win I

278
00:11:01,140 --> 00:11:02,579
think Jon should get like a royalty

279
00:11:02,579 --> 00:11:05,220
whenever I say that you know but anyway

280
00:11:05,220 --> 00:11:07,500
John John is totally right about this he

281
00:11:07,500 --> 00:11:09,000
has a blog post written up about like

282
00:11:09,000 --> 00:11:11,519
what exactly he means by this this is

283
00:11:11,519 --> 00:11:13,140
the idea that I want to sell to you

284
00:11:13,140 --> 00:11:16,019
during this talk that if we continue to

285
00:11:16,019 --> 00:11:17,940
do things that we've done for the past

286
00:11:17,940 --> 00:11:21,060
20 years with on-prem ad in on-prem ad

287
00:11:21,060 --> 00:11:24,360
and in other platforms that we're all

288
00:11:24,360 --> 00:11:26,880
going to be here in what year is it now

289
00:11:26,880 --> 00:11:29,220
2022 we're going to be here in 2042

290
00:11:29,220 --> 00:11:31,380
talking about responder and Mema cats

291
00:11:31,380 --> 00:11:33,899
still and I think that would be that

292
00:11:33,899 --> 00:11:37,220
would be a huge shame

293
00:11:37,800 --> 00:11:40,740
all right let's look into some cooler

294
00:11:40,740 --> 00:11:42,420
technical stuff I think we're doing

295
00:11:42,420 --> 00:11:45,140
pretty well on time

296
00:11:47,459 --> 00:11:49,260
so we're going to talk now we're gonna

297
00:11:49,260 --> 00:11:50,700
switch gears totally so we're gonna get

298
00:11:50,700 --> 00:11:52,920
like way more technical now and I'm off

299
00:11:52,920 --> 00:11:55,920
my soapbox for now

300
00:11:55,920 --> 00:11:57,600
uh we're gonna look at an attack path

301
00:11:57,600 --> 00:12:00,120
that starts off with no access into an

302
00:12:00,120 --> 00:12:01,920
Azure tenant and escalates all the way

303
00:12:01,920 --> 00:12:04,920
up to Global admin by abusing

304
00:12:04,920 --> 00:12:07,560
configurations that we commonly see in

305
00:12:07,560 --> 00:12:11,220
real customer environments and what is

306
00:12:11,220 --> 00:12:14,339
very common if you follow all of the

307
00:12:14,339 --> 00:12:15,660
best practice guidance all the

308
00:12:15,660 --> 00:12:17,040
documentation like here's how you set

309
00:12:17,040 --> 00:12:19,019
this up these things chain together and

310
00:12:19,019 --> 00:12:20,220
we're going to see exactly how those

311
00:12:20,220 --> 00:12:22,560
chain together to create this attack

312
00:12:22,560 --> 00:12:23,940
path

313
00:12:23,940 --> 00:12:26,220
our first step is we're going to get

314
00:12:26,220 --> 00:12:28,440
initial access into the Azure tenant

315
00:12:28,440 --> 00:12:33,980
through oidc is anybody new at oidc is

316
00:12:34,140 --> 00:12:37,079
uh oidc is open ID connect and so this

317
00:12:37,079 --> 00:12:39,620
is a way to Federate one-to-one identity

318
00:12:39,620 --> 00:12:44,399
from a identity in your Azure tenant

319
00:12:44,399 --> 00:12:46,620
to an external

320
00:12:46,620 --> 00:12:49,920
thing and for this particular use case

321
00:12:49,920 --> 00:12:54,380
that thing is a GitHub repository

322
00:12:54,480 --> 00:12:56,160
so we have a video to look at together

323
00:12:56,160 --> 00:12:59,639
and I'm actually gonna I'm gonna do this

324
00:12:59,639 --> 00:13:02,339
because I do want this to be full screen

325
00:13:02,339 --> 00:13:05,600
and you should be able to see that okay

326
00:13:05,700 --> 00:13:08,820
so in our attack path

327
00:13:08,820 --> 00:13:11,160
we have compromised this GitHub

328
00:13:11,160 --> 00:13:12,959
organization

329
00:13:12,959 --> 00:13:15,300
and let's just agree that we've done

330
00:13:15,300 --> 00:13:16,620
that let's let's not argue about how

331
00:13:16,620 --> 00:13:18,000
that's done let's let's just all agree

332
00:13:18,000 --> 00:13:19,800
that that happens

333
00:13:19,800 --> 00:13:21,660
and after we compromise that GitHub

334
00:13:21,660 --> 00:13:23,579
organization we look through the various

335
00:13:23,579 --> 00:13:27,000
repositories to find this repository

336
00:13:27,000 --> 00:13:30,720
which has a GitHub actions yaml file in

337
00:13:30,720 --> 00:13:32,459
it is anybody familiar with GitHub

338
00:13:32,459 --> 00:13:35,339
actions GitHub actions are really cool

339
00:13:35,339 --> 00:13:37,680
and they let you do things automatically

340
00:13:37,680 --> 00:13:40,019
whenever something happens in the

341
00:13:40,019 --> 00:13:42,000
repository so say for example whenever

342
00:13:42,000 --> 00:13:44,579
you make a push to the repo this GitHub

343
00:13:44,579 --> 00:13:46,980
action will start an ephemeral virtual

344
00:13:46,980 --> 00:13:50,880
machine that can do things like it like

345
00:13:50,880 --> 00:13:52,800
it's bash or Powershell or whatever like

346
00:13:52,800 --> 00:13:53,700
anything you can do in bash or

347
00:13:53,700 --> 00:13:55,560
Powershell you can do you can assign

348
00:13:55,560 --> 00:13:58,139
identities to those ephemeral virtual

349
00:13:58,139 --> 00:14:01,620
machines so that the GitHub action has

350
00:14:01,620 --> 00:14:03,660
privileges to do things that could

351
00:14:03,660 --> 00:14:05,700
that's never gone wrong right giving

352
00:14:05,700 --> 00:14:08,459
arbitrary objects identity

353
00:14:08,459 --> 00:14:12,480
so in this yaml file like we're the

354
00:14:12,480 --> 00:14:13,860
attacker we have found it in this case

355
00:14:13,860 --> 00:14:16,740
in this state and what is it doing if we

356
00:14:16,740 --> 00:14:18,240
look at the very bottom

357
00:14:18,240 --> 00:14:20,880
there's a command where it's running a z

358
00:14:20,880 --> 00:14:23,339
a d group list so it's this totally

359
00:14:23,339 --> 00:14:26,160
innocuous script all it's doing is

360
00:14:26,160 --> 00:14:28,320
enumerating the security groups from the

361
00:14:28,320 --> 00:14:30,060
Azure ad tenant

362
00:14:30,060 --> 00:14:32,519
uh we have the tenant ID there and we

363
00:14:32,519 --> 00:14:34,740
also have the client ID so that's the

364
00:14:34,740 --> 00:14:37,019
object ID or the app ID of the service

365
00:14:37,019 --> 00:14:39,060
principle aka the Enterprise application

366
00:14:39,060 --> 00:14:40,980
and if you're confused yet

367
00:14:40,980 --> 00:14:42,680
I was too

368
00:14:42,680 --> 00:14:46,139
we can change this thing which you just

369
00:14:46,139 --> 00:14:49,440
saw and the change that I made is using

370
00:14:49,440 --> 00:14:52,079
the AZ binary instead of listing up the

371
00:14:52,079 --> 00:14:54,360
groups I am having it print out the

372
00:14:54,360 --> 00:14:57,600
token for the service principle and you

373
00:14:57,600 --> 00:15:00,300
also may have noticed that the uh the

374
00:15:00,300 --> 00:15:01,980
yaml file is not providing any kind of

375
00:15:01,980 --> 00:15:03,839
credential to authenticate as the

376
00:15:03,839 --> 00:15:05,820
service principle that's because of that

377
00:15:05,820 --> 00:15:09,660
oidc trust to the uh the service

378
00:15:09,660 --> 00:15:12,600
principle in Azure so this GitHub action

379
00:15:12,600 --> 00:15:15,180
is trusted to authenticate as that

380
00:15:15,180 --> 00:15:16,680
service principle without knowing that

381
00:15:16,680 --> 00:15:18,180
service principles password it's really

382
00:15:18,180 --> 00:15:20,100
really cool it means you don't have to

383
00:15:20,100 --> 00:15:23,040
store credentials in this yaml file but

384
00:15:23,040 --> 00:15:24,899
what happens is if you look at this

385
00:15:24,899 --> 00:15:26,820
output right here it says access token

386
00:15:26,820 --> 00:15:28,459
star star star

387
00:15:28,459 --> 00:15:31,440
so from the attacker side that kind of

388
00:15:31,440 --> 00:15:33,360
sucks because I want that access token

389
00:15:33,360 --> 00:15:35,220
so that I can do things you know outside

390
00:15:35,220 --> 00:15:37,560
the context of this of this run book as

391
00:15:37,560 --> 00:15:39,600
that service principle but GitHub

392
00:15:39,600 --> 00:15:41,579
actions will automatically technically

393
00:15:41,579 --> 00:15:43,980
try to censor anything that it sees as

394
00:15:43,980 --> 00:15:47,220
like sensitive data including uh azure

395
00:15:47,220 --> 00:15:48,600
jwts

396
00:15:48,600 --> 00:15:51,060
however remember I said earlier that

397
00:15:51,060 --> 00:15:52,620
this is all just bash

398
00:15:52,620 --> 00:15:54,600
so we can do all kinds of really fun

399
00:15:54,600 --> 00:15:56,579
things in bash and one of those really

400
00:15:56,579 --> 00:15:58,860
fun things is we can pipe strings to

401
00:15:58,860 --> 00:16:02,160
other binaries so and we can also chain

402
00:16:02,160 --> 00:16:04,079
commands with the semicolon character

403
00:16:04,079 --> 00:16:06,500
this is like

404
00:16:06,500 --> 00:16:09,300
it-95 it's like a remedial it stuff

405
00:16:09,300 --> 00:16:10,199
right

406
00:16:10,199 --> 00:16:14,100
so we will edit this again to base64

407
00:16:14,100 --> 00:16:17,779
encode the output from the AZ binary

408
00:16:17,779 --> 00:16:20,519
assign that to a bash variable called

409
00:16:20,519 --> 00:16:24,060
token and then Echo the token out

410
00:16:24,060 --> 00:16:25,740
we'll let that run

411
00:16:25,740 --> 00:16:29,339
this should speed up yeah

412
00:16:29,339 --> 00:16:31,560
so it's running it's doing its thing

413
00:16:31,560 --> 00:16:34,560
we look at the resulting output

414
00:16:34,560 --> 00:16:39,079
we have some base64 blob here to look at

415
00:16:40,440 --> 00:16:41,420
that

416
00:16:41,420 --> 00:16:46,459
we'll copy and paste that and decode it

417
00:16:48,779 --> 00:16:52,820
and there's our JWT easy

418
00:16:52,860 --> 00:16:55,079
so that's like a nice easy bypass around

419
00:16:55,079 --> 00:16:58,560
like github's automatic uh

420
00:16:58,560 --> 00:17:00,600
what would you call that obfuscation of

421
00:17:00,600 --> 00:17:03,540
uh Secrets I guess

422
00:17:03,540 --> 00:17:07,199
so that's fun but what's even more fun

423
00:17:07,199 --> 00:17:11,939
is we can take that JWT and now from our

424
00:17:11,939 --> 00:17:14,040
own attacker-controlled system we can

425
00:17:14,040 --> 00:17:16,140
authenticate to the Azure tenant as that

426
00:17:16,140 --> 00:17:18,000
service principle because we have that

427
00:17:18,000 --> 00:17:22,199
that uh Bearer token so we have a very

428
00:17:22,199 --> 00:17:25,020
simple Powershell command here that is

429
00:17:25,020 --> 00:17:27,480
doing a invoke web request against a

430
00:17:27,480 --> 00:17:29,640
particular API and it's we're just

431
00:17:29,640 --> 00:17:31,919
listing out the service principles and

432
00:17:31,919 --> 00:17:34,080
we're filtering on the first service

433
00:17:34,080 --> 00:17:36,480
principle that came back and so this is

434
00:17:36,480 --> 00:17:38,880
just proof that we are authenticated as

435
00:17:38,880 --> 00:17:40,919
that service principle that is our

436
00:17:40,919 --> 00:17:44,340
initial access into the Azure ad tenant

437
00:17:44,340 --> 00:17:47,659
any questions about that

438
00:17:50,400 --> 00:17:51,960
let's continue

439
00:17:51,960 --> 00:17:54,179
so our attack path so far looks like

440
00:17:54,179 --> 00:17:56,400
this we compromised the GitHub

441
00:17:56,400 --> 00:17:58,679
organization in the top left

442
00:17:58,679 --> 00:18:00,840
there's a hierarchical relationship from

443
00:18:00,840 --> 00:18:03,480
that org through the repo to the action

444
00:18:03,480 --> 00:18:05,640
meaning that anybody who controls the

445
00:18:05,640 --> 00:18:07,919
GitHub org can control the action that's

446
00:18:07,919 --> 00:18:10,559
just hierarchical control it's easy and

447
00:18:10,559 --> 00:18:13,860
then the yellow arrow is the oidc

448
00:18:13,860 --> 00:18:16,140
connection that goes from the GitHub

449
00:18:16,140 --> 00:18:18,419
action to the service principle service

450
00:18:18,419 --> 00:18:21,720
principle a in the Azure ad tenant

451
00:18:21,720 --> 00:18:24,559
there's our initial access

452
00:18:25,880 --> 00:18:28,860
so next uh we're going to look at

453
00:18:28,860 --> 00:18:29,940
something a little more complicated

454
00:18:29,940 --> 00:18:31,440
which is going to be privilege

455
00:18:31,440 --> 00:18:35,539
escalation to subscription owner

456
00:18:36,360 --> 00:18:38,700
Let's Escape

457
00:18:38,700 --> 00:18:39,960
play

458
00:18:39,960 --> 00:18:42,900
and full screen so now we are going to

459
00:18:42,900 --> 00:18:45,620
use Bloodhound to do some analysis

460
00:18:45,620 --> 00:18:49,679
and with that service principle I'm

461
00:18:49,679 --> 00:18:50,940
going to skip this step where we're

462
00:18:50,940 --> 00:18:52,380
doing the data collection with Azure

463
00:18:52,380 --> 00:18:55,080
Hound because there's a

464
00:18:55,080 --> 00:18:58,320
big refactor of azure homecoming and I

465
00:18:58,320 --> 00:18:59,880
don't want to show you the old Azure

466
00:18:59,880 --> 00:19:02,100
Hound in this but we've done data

467
00:19:02,100 --> 00:19:04,200
collection by using that JWT to read a

468
00:19:04,200 --> 00:19:06,480
whole bunch of data from Azure we take

469
00:19:06,480 --> 00:19:08,280
that we put it into the Bloodhound

470
00:19:08,280 --> 00:19:09,600
database

471
00:19:09,600 --> 00:19:11,940
the Bloodhound database database is a

472
00:19:11,940 --> 00:19:14,100
graph database and so we can start to

473
00:19:14,100 --> 00:19:16,260
explore relationships between the

474
00:19:16,260 --> 00:19:18,840
disparate nodes in that database

475
00:19:18,840 --> 00:19:21,000
so this is the Bloodhound GUI

476
00:19:21,000 --> 00:19:22,799
we're going to search for the service

477
00:19:22,799 --> 00:19:24,419
principle that we were authenticating

478
00:19:24,419 --> 00:19:27,120
against the Azure tenant as and we were

479
00:19:27,120 --> 00:19:28,679
authenticating as the service principle

480
00:19:28,679 --> 00:19:32,100
called oidc Connected app and we know

481
00:19:32,100 --> 00:19:33,720
that because we can authenticate and we

482
00:19:33,720 --> 00:19:34,980
can read and we can see the display name

483
00:19:34,980 --> 00:19:36,299
through the API

484
00:19:36,299 --> 00:19:39,780
we also now know that the oidc connected

485
00:19:39,780 --> 00:19:41,820
apps service principle

486
00:19:41,820 --> 00:19:44,760
has the Cloud app admin role scoped

487
00:19:44,760 --> 00:19:46,620
specifically to another service

488
00:19:46,620 --> 00:19:49,860
principle called Azure deployment

489
00:19:49,860 --> 00:19:51,000
automation

490
00:19:51,000 --> 00:19:53,520
so this would be a configuration that

491
00:19:53,520 --> 00:19:55,919
the target environment has already set

492
00:19:55,919 --> 00:19:58,020
up we're not like exploiting anything

493
00:19:58,020 --> 00:20:02,000
we're abusing existing configurations

494
00:20:07,799 --> 00:20:10,799
so first we're going to use our JWT that

495
00:20:10,799 --> 00:20:13,140
we got from GitHub we're going to search

496
00:20:13,140 --> 00:20:16,380
for the Target service principle and

497
00:20:16,380 --> 00:20:18,780
here's the output that we get back so up

498
00:20:18,780 --> 00:20:20,520
here at the top that is the unique

499
00:20:20,520 --> 00:20:23,220
identifier for the Target service

500
00:20:23,220 --> 00:20:25,380
principle which we need for the next

501
00:20:25,380 --> 00:20:27,000
step

502
00:20:27,000 --> 00:20:29,580
because we have the Cloud app admin role

503
00:20:29,580 --> 00:20:31,620
scoped against the other service

504
00:20:31,620 --> 00:20:35,700
principle that gives us the power to add

505
00:20:35,700 --> 00:20:38,100
a new credential for that Target service

506
00:20:38,100 --> 00:20:40,860
principle so we're not resetting a

507
00:20:40,860 --> 00:20:42,240
password or changing a password we're

508
00:20:42,240 --> 00:20:43,740
adding a password and service principles

509
00:20:43,740 --> 00:20:46,559
and apps in Azure can have multiple uh

510
00:20:46,559 --> 00:20:48,960
credentials that are all valid

511
00:20:48,960 --> 00:20:52,799
so we just did that we just posted our

512
00:20:52,799 --> 00:20:54,660
super legit secret trust me I would

513
00:20:54,660 --> 00:20:56,400
never lie to you Secret

514
00:20:56,400 --> 00:20:58,740
to that Target service principle

515
00:20:58,740 --> 00:21:01,200
then when we look at the output of that

516
00:21:01,200 --> 00:21:03,780
object that we associated with the web

517
00:21:03,780 --> 00:21:04,980
request

518
00:21:04,980 --> 00:21:08,940
we have the plain text value

519
00:21:08,940 --> 00:21:11,700
of that secret right here so now we have

520
00:21:11,700 --> 00:21:13,740
a plain text password for that Target

521
00:21:13,740 --> 00:21:15,780
service principle that means that we can

522
00:21:15,780 --> 00:21:17,340
authenticate now as that service

523
00:21:17,340 --> 00:21:20,160
principle that's great

524
00:21:20,160 --> 00:21:22,760
foreign

525
00:21:24,500 --> 00:21:27,360
ticate as that new service principle and

526
00:21:27,360 --> 00:21:29,340
we'll look and see that we now have a

527
00:21:29,340 --> 00:21:31,620
new JWT

528
00:21:31,620 --> 00:21:33,840
um some people say jot

529
00:21:33,840 --> 00:21:37,459
um as that Target service principle

530
00:21:38,640 --> 00:21:40,140
again

531
00:21:40,140 --> 00:21:43,080
we will do data collection using Azure

532
00:21:43,080 --> 00:21:47,520
Hound now we're kind of Flying Blind

533
00:21:47,520 --> 00:21:49,440
the first service principle we had

534
00:21:49,440 --> 00:21:51,539
didn't have any read access into Azure

535
00:21:51,539 --> 00:21:53,880
resource manager services so it couldn't

536
00:21:53,880 --> 00:21:55,919
see anything beyond

537
00:21:55,919 --> 00:21:58,559
the Azure 80 tenant level configurations

538
00:21:58,559 --> 00:22:01,919
we do data collection again with this

539
00:22:01,919 --> 00:22:03,919
new service principle and we discover

540
00:22:03,919 --> 00:22:08,220
that this new service principle has

541
00:22:08,220 --> 00:22:09,179
um

542
00:22:09,179 --> 00:22:10,919
I think it's owner against the

543
00:22:10,919 --> 00:22:13,140
subscription

544
00:22:13,140 --> 00:22:14,220
yeah

545
00:22:14,220 --> 00:22:18,120
so it owns these uh this subscription

546
00:22:18,120 --> 00:22:20,039
and

547
00:22:20,039 --> 00:22:22,200
in Azure resource manager

548
00:22:22,200 --> 00:22:24,000
these role assignments always inherit

549
00:22:24,000 --> 00:22:27,000
down to all descendant objects so that

550
00:22:27,000 --> 00:22:30,299
means that the service principle B

551
00:22:30,299 --> 00:22:33,059
not only owns the sub it also owns the

552
00:22:33,059 --> 00:22:34,980
resource Group it also owns the logic

553
00:22:34,980 --> 00:22:37,860
app and as an Azure admin you cannot

554
00:22:37,860 --> 00:22:39,900
change that behavior so anytime you set

555
00:22:39,900 --> 00:22:41,820
a permission on a parent object it will

556
00:22:41,820 --> 00:22:44,940
inherit down below every single time for

557
00:22:44,940 --> 00:22:47,100
probably forever

558
00:22:47,100 --> 00:22:50,760
now we know the rest of our attack patch

559
00:22:50,760 --> 00:22:55,620
so let's look at the final leg here

560
00:22:55,620 --> 00:22:57,120
which is going to be privilege

561
00:22:57,120 --> 00:23:01,340
escalation to Global admin

562
00:23:01,340 --> 00:23:06,360
now uh there's a problem here

563
00:23:06,360 --> 00:23:09,120
so yesterday I was getting ready for

564
00:23:09,120 --> 00:23:11,760
this talk and I was setting up the lab

565
00:23:11,760 --> 00:23:13,919
environment to actually create these

566
00:23:13,919 --> 00:23:17,940
videos for y'all and

567
00:23:17,940 --> 00:23:19,559
what I want to what I want to say I want

568
00:23:19,559 --> 00:23:21,299
to say that there's things I can't say

569
00:23:21,299 --> 00:23:23,159
about this attack path right now because

570
00:23:23,159 --> 00:23:26,159
there's an msrc case open for something

571
00:23:26,159 --> 00:23:27,960
in this image let's say

572
00:23:27,960 --> 00:23:31,440
so I can't show you one piece of this

573
00:23:31,440 --> 00:23:34,860
um unfortunately I apologize for that uh

574
00:23:34,860 --> 00:23:36,659
I've never had to play this card before

575
00:23:36,659 --> 00:23:38,640
it feels kind of weird but let's just

576
00:23:38,640 --> 00:23:40,060
all agree

577
00:23:40,060 --> 00:23:42,419
[Laughter]

578
00:23:42,419 --> 00:23:47,700
let's all agree that service principle B

579
00:23:47,700 --> 00:23:52,799
through the blue white white and yellow

580
00:23:52,799 --> 00:23:54,179
lines

581
00:23:54,179 --> 00:23:56,640
has been able to create a new credential

582
00:23:56,640 --> 00:23:59,159
for service principle C can we all

583
00:23:59,159 --> 00:24:01,140
disagree on that we'll just hand wave

584
00:24:01,140 --> 00:24:02,460
that for now is that okay

585
00:24:02,460 --> 00:24:04,020
okay

586
00:24:04,020 --> 00:24:07,260
uh so now the rest of our attack path

587
00:24:07,260 --> 00:24:10,640
now that we are service principle C

588
00:24:10,640 --> 00:24:15,720
is the Bloodhound application knows how

589
00:24:15,720 --> 00:24:19,200
to analyze uh like Ms graph permission

590
00:24:19,200 --> 00:24:23,039
role assignments and it will analyze

591
00:24:23,039 --> 00:24:25,620
those app role assignments and then it

592
00:24:25,620 --> 00:24:28,740
will create these abuse edges or these

593
00:24:28,740 --> 00:24:31,320
abuse connections that

594
00:24:31,320 --> 00:24:34,980
uh we we call this post-processing so

595
00:24:34,980 --> 00:24:37,020
service principle C

596
00:24:37,020 --> 00:24:41,340
has the MS graph app role assignment of

597
00:24:41,340 --> 00:24:43,400
service

598
00:24:43,400 --> 00:24:45,179
principlempoint.readwrite.all is anybody

599
00:24:45,179 --> 00:24:48,600
in here familiar with Ms graph

600
00:24:48,600 --> 00:24:51,059
a few people okay

601
00:24:51,059 --> 00:24:53,659
did you know that the service principle

602
00:24:53,659 --> 00:24:56,280
endpoint.readwrite dot all app role lets

603
00:24:56,280 --> 00:24:58,140
you create credentials for any other

604
00:24:58,140 --> 00:24:59,520
service principle

605
00:24:59,520 --> 00:25:01,140
it does

606
00:25:01,140 --> 00:25:04,559
so because service principle C has that

607
00:25:04,559 --> 00:25:07,200
Ms graph April assignment it can create

608
00:25:07,200 --> 00:25:09,900
a secret for any other service principle

609
00:25:09,900 --> 00:25:13,020
including service principle d

610
00:25:13,020 --> 00:25:16,380
service principle D has the MS graph

611
00:25:16,380 --> 00:25:20,280
April assignment called bear with me app

612
00:25:20,280 --> 00:25:25,340
role assignment dot read write dot all

613
00:25:25,340 --> 00:25:28,500
that app role assignment

614
00:25:28,500 --> 00:25:30,360
dot read write.all

615
00:25:30,360 --> 00:25:33,840
means that that service principle d

616
00:25:33,840 --> 00:25:37,740
can grant itself or other service

617
00:25:37,740 --> 00:25:42,240
principles any other app role for any

618
00:25:42,240 --> 00:25:44,159
resource app

619
00:25:44,159 --> 00:25:46,679
does that make sense basically basically

620
00:25:46,679 --> 00:25:48,960
service principle D can give itself any

621
00:25:48,960 --> 00:25:50,820
permission at once

622
00:25:50,820 --> 00:25:53,460
so it's not a global admin

623
00:25:53,460 --> 00:25:56,539
but it can get there

624
00:25:56,760 --> 00:25:57,960
would you call that a privilege

625
00:25:57,960 --> 00:25:59,880
escalation

626
00:25:59,880 --> 00:26:01,320
Maybe

627
00:26:01,320 --> 00:26:02,580
it's actually I don't think I don't

628
00:26:02,580 --> 00:26:03,539
think there's really a clear answer to

629
00:26:03,539 --> 00:26:05,720
that

630
00:26:05,940 --> 00:26:08,520
so let's hop back into the Bloodhound

631
00:26:08,520 --> 00:26:10,620
interface and we're going to see the

632
00:26:10,620 --> 00:26:12,720
exact same attack path

633
00:26:12,720 --> 00:26:15,360
has anybody ever heard of a very

634
00:26:15,360 --> 00:26:17,400
uh

635
00:26:17,400 --> 00:26:19,799
uh like very Niche like very like not

636
00:26:19,799 --> 00:26:21,539
very well-known piece of software called

637
00:26:21,539 --> 00:26:24,120
Google Maps does anybody ever anybody

638
00:26:24,120 --> 00:26:26,779
ever heard of that

639
00:26:26,940 --> 00:26:28,980
thank you

640
00:26:28,980 --> 00:26:30,960
the Bloodhound GUI behaves very

641
00:26:30,960 --> 00:26:33,059
similarly to Google Maps so in the top

642
00:26:33,059 --> 00:26:35,820
left I've got an origin and I have a

643
00:26:35,820 --> 00:26:37,860
destination so I'm saying I want to

644
00:26:37,860 --> 00:26:38,880
start

645
00:26:38,880 --> 00:26:40,860
at the Azure deployment automation

646
00:26:40,860 --> 00:26:42,419
service principle

647
00:26:42,419 --> 00:26:45,539
and I want to end at the Azure tenant so

648
00:26:45,539 --> 00:26:47,520
I'm going to end with full control of

649
00:26:47,520 --> 00:26:49,500
the Azure tenant

650
00:26:49,500 --> 00:26:51,299
the GUI will do the query against the

651
00:26:51,299 --> 00:26:53,640
database in the back end and then if

652
00:26:53,640 --> 00:26:55,020
there is a path

653
00:26:55,020 --> 00:26:57,360
it will produce it and it will show it

654
00:26:57,360 --> 00:26:58,260
to us

655
00:26:58,260 --> 00:27:00,720
so we're looking now at the same path

656
00:27:00,720 --> 00:27:02,940
that we were looking at in the deck

657
00:27:02,940 --> 00:27:04,440
so

658
00:27:04,440 --> 00:27:06,779
Azure deployment automation owns the sub

659
00:27:06,779 --> 00:27:09,900
that inherits down to the logic app the

660
00:27:09,900 --> 00:27:11,580
logic app has a managed identity

661
00:27:11,580 --> 00:27:13,559
assignment up to a service principle

662
00:27:13,559 --> 00:27:16,559
backup in Azure ad back like in the

663
00:27:16,559 --> 00:27:19,380
control plane if you will

664
00:27:19,380 --> 00:27:22,500
Azure SP Creator can add a secret to app

665
00:27:22,500 --> 00:27:25,620
role assigner Apple assigner can grant

666
00:27:25,620 --> 00:27:29,159
app roles and that means that it can

667
00:27:29,159 --> 00:27:31,140
take control of the tenant and we're

668
00:27:31,140 --> 00:27:34,460
going to see how that works

669
00:27:35,940 --> 00:27:39,320
here's a really cute elephant

670
00:27:41,580 --> 00:27:43,860
like I said we're gonna skip part of

671
00:27:43,860 --> 00:27:46,919
this we're gonna skip the logic app part

672
00:27:46,919 --> 00:27:48,900
of this

673
00:27:48,900 --> 00:27:52,740
and so we have our token running now as

674
00:27:52,740 --> 00:27:55,740
service principle C

675
00:27:55,740 --> 00:27:57,779
then

676
00:27:57,779 --> 00:28:04,220
we're going to read from the MS graph

677
00:28:05,159 --> 00:28:07,559
Enterprise application also known as

678
00:28:07,559 --> 00:28:09,539
service principle also known as first

679
00:28:09,539 --> 00:28:10,679
party app

680
00:28:10,679 --> 00:28:12,840
and we're going to read the app roles

681
00:28:12,840 --> 00:28:16,020
that are exposed by that application

682
00:28:16,020 --> 00:28:19,140
so that we can see the identifier

683
00:28:19,140 --> 00:28:21,860
for the

684
00:28:21,860 --> 00:28:23,340
rolemanagement.readwrite dot

685
00:28:23,340 --> 00:28:25,559
directoryroll and you can see that there

686
00:28:25,559 --> 00:28:28,159
on the left the April ID

687
00:28:28,159 --> 00:28:30,659
9e3f62 whatever

688
00:28:30,659 --> 00:28:34,020
we're going to give service principle d

689
00:28:34,020 --> 00:28:37,679
the rolemanagement.readwrite.directory

690
00:28:37,919 --> 00:28:39,840
app roll

691
00:28:39,840 --> 00:28:41,880
so we've done that now now it has that

692
00:28:41,880 --> 00:28:43,919
app role

693
00:28:43,919 --> 00:28:47,840
then we're going to read from the Azure

694
00:28:47,840 --> 00:28:49,980
admin role

695
00:28:49,980 --> 00:28:52,320
uh scope

696
00:28:52,320 --> 00:28:55,500
what is the ID for the global admin role

697
00:28:55,500 --> 00:28:58,080
and so we'll do that and we get the role

698
00:28:58,080 --> 00:28:59,460
template ID which is actually going to

699
00:28:59,460 --> 00:29:00,960
be the same in every tenant which is

700
00:29:00,960 --> 00:29:04,400
62e9 ETC

701
00:29:05,100 --> 00:29:07,679
then we need to refresh our token

702
00:29:07,679 --> 00:29:09,179
because

703
00:29:09,179 --> 00:29:11,520
whenever you submit a query through Ms

704
00:29:11,520 --> 00:29:15,179
graph API it is like semi-stateless so

705
00:29:15,179 --> 00:29:17,940
the JWT actually contains what roles you

706
00:29:17,940 --> 00:29:20,220
have in that JWT

707
00:29:20,220 --> 00:29:21,840
it's way more complicated than that but

708
00:29:21,840 --> 00:29:23,520
like let's just let's just agree that we

709
00:29:23,520 --> 00:29:25,080
have to refresh our tokens so that our

710
00:29:25,080 --> 00:29:27,659
new token has the role management dot

711
00:29:27,659 --> 00:29:29,880
read write dot directory role

712
00:29:29,880 --> 00:29:32,460
did I lose anybody yet

713
00:29:32,460 --> 00:29:35,159
I this took me months to understand so

714
00:29:35,159 --> 00:29:38,120
if you're lost it's okay

715
00:29:39,299 --> 00:29:41,520
and now we have activated service

716
00:29:41,520 --> 00:29:45,240
principle D into the global admin role

717
00:29:45,240 --> 00:29:47,520
at that point our attack path is

718
00:29:47,520 --> 00:29:51,360
concluded and as a global admin you can

719
00:29:51,360 --> 00:29:52,980
do anything

720
00:29:52,980 --> 00:29:55,140
you can do anything you want also today

721
00:29:55,140 --> 00:29:56,760
I learned that you can create objects

722
00:29:56,760 --> 00:29:59,100
that you can't delete in Azure so I'm

723
00:29:59,100 --> 00:30:00,779
kind of screwed

724
00:30:00,779 --> 00:30:02,340
um

725
00:30:02,340 --> 00:30:04,559
Global admins also have the ability to

726
00:30:04,559 --> 00:30:07,080
give themselves a privilege called user

727
00:30:07,080 --> 00:30:10,380
access administrator in Azure RM for any

728
00:30:10,380 --> 00:30:12,779
subscription that trusts that tenant so

729
00:30:12,779 --> 00:30:15,120
the subscription to tenant relationship

730
00:30:15,120 --> 00:30:17,220
is absolutely not a trust boundary

731
00:30:17,220 --> 00:30:18,779
because the global admins can give

732
00:30:18,779 --> 00:30:21,539
themselves access into those subs

733
00:30:21,539 --> 00:30:23,279
so you own everything

734
00:30:23,279 --> 00:30:26,659
we own the entire tenant

735
00:30:33,539 --> 00:30:36,419
what that means is that

736
00:30:36,419 --> 00:30:38,220
while

737
00:30:38,220 --> 00:30:40,559
seen in isolation

738
00:30:40,559 --> 00:30:42,720
for example service principle D having

739
00:30:42,720 --> 00:30:45,360
this Ms graph April assignment that may

740
00:30:45,360 --> 00:30:47,700
be legitimately configured for some kind

741
00:30:47,700 --> 00:30:50,580
of devops business process so you have

742
00:30:50,580 --> 00:30:53,279
automation that you need to create give

743
00:30:53,279 --> 00:30:54,899
privilege to service principals delete

744
00:30:54,899 --> 00:30:56,700
them do some kind of business process

745
00:30:56,700 --> 00:30:58,740
whatever so this is a legitimate

746
00:30:58,740 --> 00:31:01,380
configuration that people do

747
00:31:01,380 --> 00:31:04,080
also having a service principle that can

748
00:31:04,080 --> 00:31:06,059
create other service principles totally

749
00:31:06,059 --> 00:31:09,240
legitimate thing for like devops reasons

750
00:31:09,240 --> 00:31:11,760
also having manage identity assignments

751
00:31:11,760 --> 00:31:14,399
this is very common Azure admins do this

752
00:31:14,399 --> 00:31:16,320
all the time it is just a building block

753
00:31:16,320 --> 00:31:19,320
in Azure to let you build your

754
00:31:19,320 --> 00:31:20,880
environment so that it serves the

755
00:31:20,880 --> 00:31:24,179
business right so see in isolation these

756
00:31:24,179 --> 00:31:27,419
individual things might be seen as best

757
00:31:27,419 --> 00:31:31,740
practice or least privilege or uh you

758
00:31:31,740 --> 00:31:33,840
know like uh

759
00:31:33,840 --> 00:31:36,240
like this this gets to the point of like

760
00:31:36,240 --> 00:31:38,760
list based thinking where you know you

761
00:31:38,760 --> 00:31:40,380
look at the list of who can grant the

762
00:31:40,380 --> 00:31:43,140
global admin role and you stop there

763
00:31:43,140 --> 00:31:45,419
so that's like list based thinking where

764
00:31:45,419 --> 00:31:47,100
you're just auditing the list of who has

765
00:31:47,100 --> 00:31:48,740
a certain privilege without

766
00:31:48,740 --> 00:31:51,360
understanding who can take control of

767
00:31:51,360 --> 00:31:53,159
that principle who can take control of

768
00:31:53,159 --> 00:31:54,299
those principles

769
00:31:54,299 --> 00:31:55,740
Etc

770
00:31:55,740 --> 00:31:58,520
so formed together

771
00:31:58,520 --> 00:32:02,880
these discrete configurations chained

772
00:32:02,880 --> 00:32:05,520
together to create an attack path that

773
00:32:05,520 --> 00:32:08,520
as we saw starts off with no access into

774
00:32:08,520 --> 00:32:10,980
the Azure ad tenant and escalates all

775
00:32:10,980 --> 00:32:13,020
the way up into Global admin when you

776
00:32:13,020 --> 00:32:14,460
start doing your Azure pen test and you

777
00:32:14,460 --> 00:32:15,720
start looking for stuff like this you're

778
00:32:15,720 --> 00:32:18,899
going to find it all the time

779
00:32:18,899 --> 00:32:21,000
foreign

780
00:32:21,000 --> 00:32:23,880
how bad can this get

781
00:32:23,880 --> 00:32:26,220
so here's an example of somebody trying

782
00:32:26,220 --> 00:32:27,480
to do

783
00:32:27,480 --> 00:32:29,580
like

784
00:32:29,580 --> 00:32:33,179
um tiered Administration or

785
00:32:33,179 --> 00:32:35,520
whatever the new phrases that Microsoft

786
00:32:35,520 --> 00:32:36,899
uses

787
00:32:36,899 --> 00:32:40,639
Enterprise access model yeah

788
00:32:40,799 --> 00:32:43,320
where they're trying to have like here's

789
00:32:43,320 --> 00:32:45,059
my tier zero subscription here's my tier

790
00:32:45,059 --> 00:32:46,320
one subscription my tier two

791
00:32:46,320 --> 00:32:47,520
subscription

792
00:32:47,520 --> 00:32:49,740
so I have like all these different like

793
00:32:49,740 --> 00:32:51,419
all those different hierarchy that like

794
00:32:51,419 --> 00:32:53,700
everything under this sub is tier zero

795
00:32:53,700 --> 00:32:54,840
everything under this Resource Group is

796
00:32:54,840 --> 00:32:57,899
tier zero whatever but given certain

797
00:32:57,899 --> 00:33:00,600
configurations which emerge all the time

798
00:33:00,600 --> 00:33:02,940
this

799
00:33:02,940 --> 00:33:04,500
this

800
00:33:04,500 --> 00:33:08,700
like environment can change from a

801
00:33:08,700 --> 00:33:11,399
collection of discrete control

802
00:33:11,399 --> 00:33:13,260
relationships manage identity

803
00:33:13,260 --> 00:33:15,779
assignments and hierarchy

804
00:33:15,779 --> 00:33:17,580
and it can turn into

805
00:33:17,580 --> 00:33:21,179
a spiraling attack path of death

806
00:33:21,179 --> 00:33:23,640
so this can get very very bad

807
00:33:23,640 --> 00:33:26,220
not to mention that we're just looking

808
00:33:26,220 --> 00:33:29,760
here at the confines of the tenant

809
00:33:29,760 --> 00:33:32,159
security boundary but there's no reason

810
00:33:32,159 --> 00:33:35,460
that a foreign principal couldn't have

811
00:33:35,460 --> 00:33:37,380
one of these privileges or the other way

812
00:33:37,380 --> 00:33:38,640
around one of these service principles

813
00:33:38,640 --> 00:33:41,159
could have privilege in a foreign Azure

814
00:33:41,159 --> 00:33:42,120
tenant

815
00:33:42,120 --> 00:33:43,860
so forget about chaining together things

816
00:33:43,860 --> 00:33:45,299
within a tenant now you're talking about

817
00:33:45,299 --> 00:33:48,899
chaining IDP instances and that's pretty

818
00:33:48,899 --> 00:33:51,120
terrifying to me

819
00:33:51,120 --> 00:33:52,860
okay

820
00:33:52,860 --> 00:33:55,200
so what can we do about this it's not

821
00:33:55,200 --> 00:33:58,080
all doom and gloom I promise you and I

822
00:33:58,080 --> 00:34:01,220
think we're right on time

823
00:34:02,100 --> 00:34:03,240
all right so we're going to look at a

824
00:34:03,240 --> 00:34:05,399
couple things with defending Azure with

825
00:34:05,399 --> 00:34:07,860
Bloodhound or with graphs

826
00:34:07,860 --> 00:34:11,099
graphs give you a

827
00:34:11,099 --> 00:34:13,980
Clarity of control that you

828
00:34:13,980 --> 00:34:16,260
in my opinion cannot get from the

829
00:34:16,260 --> 00:34:18,300
built-in tooling especially if you look

830
00:34:18,300 --> 00:34:21,060
at like a duck or the security

831
00:34:21,060 --> 00:34:23,399
descriptor GUI in Windows it's a

832
00:34:23,399 --> 00:34:26,280
nightmare to to try to analyze

833
00:34:26,280 --> 00:34:28,260
so in the Bloodhound GUI let's look at

834
00:34:28,260 --> 00:34:29,460
an example we're going to look up this

835
00:34:29,460 --> 00:34:30,780
VM

836
00:34:30,780 --> 00:34:32,239
called win

837
00:34:32,239 --> 00:34:35,099
2019002 and we'll click on that

838
00:34:35,099 --> 00:34:37,859
then that will show us the computer node

839
00:34:37,859 --> 00:34:40,379
in the Bloodhound GUI there's all kinds

840
00:34:40,379 --> 00:34:41,699
of really cool stuff that we can look at

841
00:34:41,699 --> 00:34:43,679
for that VM

842
00:34:43,679 --> 00:34:47,099
one of those is down at the very bottom

843
00:34:47,099 --> 00:34:50,879
the inbound object control so that means

844
00:34:50,879 --> 00:34:54,239
who has control of this object

845
00:34:54,239 --> 00:34:56,399
if we click on that

846
00:34:56,399 --> 00:34:58,440
we'll see that there are three different

847
00:34:58,440 --> 00:35:01,080
objects that have explicit control of

848
00:35:01,080 --> 00:35:02,460
that VM

849
00:35:02,460 --> 00:35:05,820
so this on-prem user this Azure user and

850
00:35:05,820 --> 00:35:07,560
this service principle they all have the

851
00:35:07,560 --> 00:35:09,599
contributor role against the VM if

852
00:35:09,599 --> 00:35:10,980
you're a contributor against a VM you

853
00:35:10,980 --> 00:35:12,300
can get privileged command execution on

854
00:35:12,300 --> 00:35:13,680
the VM

855
00:35:13,680 --> 00:35:15,960
but what about beyond that

856
00:35:15,960 --> 00:35:17,280
if we look beyond that we can see

857
00:35:17,280 --> 00:35:18,599
there's actually there's also a security

858
00:35:18,599 --> 00:35:20,880
group that has this

859
00:35:20,880 --> 00:35:23,520
role assignment so it has the owner role

860
00:35:23,520 --> 00:35:25,859
against the VM and there are going to be

861
00:35:25,859 --> 00:35:27,599
principles within that security group

862
00:35:27,599 --> 00:35:28,859
that

863
00:35:28,859 --> 00:35:31,140
through security group delegation also

864
00:35:31,140 --> 00:35:33,540
have control of the VM

865
00:35:33,540 --> 00:35:35,820
so already we can very easily tell

866
00:35:35,820 --> 00:35:38,040
visually

867
00:35:38,040 --> 00:35:40,320
who has control of this VM a question

868
00:35:40,320 --> 00:35:42,420
that should be very very simple to

869
00:35:42,420 --> 00:35:44,760
answer with a built-in tooling but is

870
00:35:44,760 --> 00:35:46,940
not

871
00:35:48,000 --> 00:35:50,700
what we can also do is go even further

872
00:35:50,700 --> 00:35:53,160
Beyond who has control of this thing

873
00:35:53,160 --> 00:35:56,099
immediately by discovering attack paths

874
00:35:56,099 --> 00:35:59,040
that Target some kind of object

875
00:35:59,040 --> 00:36:01,020
so for example

876
00:36:01,020 --> 00:36:05,339
if we right click on the VM and we click

877
00:36:05,339 --> 00:36:08,280
shortest paths to here

878
00:36:08,280 --> 00:36:11,160
this is going to run a query that will

879
00:36:11,160 --> 00:36:14,160
find all of the attack paths or let me

880
00:36:14,160 --> 00:36:15,720
let me say that again

881
00:36:15,720 --> 00:36:17,880
it's going to find all the nodes in the

882
00:36:17,880 --> 00:36:19,560
database that have at least one attack

883
00:36:19,560 --> 00:36:21,900
path against that VM and I'll find the

884
00:36:21,900 --> 00:36:25,380
shortest path from everything to it

885
00:36:25,380 --> 00:36:28,740
so that will visualize something like

886
00:36:28,740 --> 00:36:29,820
this

887
00:36:29,820 --> 00:36:33,119
and so if you are the owner of this VM

888
00:36:33,119 --> 00:36:35,640
and you want to understand what is the

889
00:36:35,640 --> 00:36:39,720
exposure to this VM from everywhere

890
00:36:39,720 --> 00:36:43,200
outside of the subscription or the

891
00:36:43,200 --> 00:36:45,300
resource Group that this thing lives in

892
00:36:45,300 --> 00:36:46,800
this is what you can do and what you'll

893
00:36:46,800 --> 00:36:48,839
discover is

894
00:36:48,839 --> 00:36:51,180
what we were looking up before that the

895
00:36:51,180 --> 00:36:53,280
tenant itself is the security boundary

896
00:36:53,280 --> 00:36:55,619
not the subscription so anybody with

897
00:36:55,619 --> 00:36:57,720
control of the tenant also has control

898
00:36:57,720 --> 00:37:00,480
of the VM that's pretty obvious I think

899
00:37:00,480 --> 00:37:04,260
but then as you start to map out foreign

900
00:37:04,260 --> 00:37:06,000
identities and you start to map out the

901
00:37:06,000 --> 00:37:07,440
foreign idps and the control

902
00:37:07,440 --> 00:37:09,839
relationships in there you can start to

903
00:37:09,839 --> 00:37:12,660
find attack paths that start in let's

904
00:37:12,660 --> 00:37:16,200
say fabricam and wind up in contoso your

905
00:37:16,200 --> 00:37:17,579
via the contoso is everybody familiar

906
00:37:17,579 --> 00:37:20,240
with those terms okay

907
00:37:20,240 --> 00:37:24,119
or like uh where's Jessie like Freddy

908
00:37:24,119 --> 00:37:25,740
where'd you go yeah it's like like UW

909
00:37:25,740 --> 00:37:27,420
and Wazoo right like what a disaster

910
00:37:27,420 --> 00:37:29,880
that would be

911
00:37:29,880 --> 00:37:33,320
all right now let's talk about a concept

912
00:37:33,320 --> 00:37:37,640
uh called attack path management

913
00:37:42,119 --> 00:37:42,890
so

914
00:37:42,890 --> 00:37:44,460
[Music]

915
00:37:44,460 --> 00:37:45,900
is everybody familiar with the term like

916
00:37:45,900 --> 00:37:47,700
tier zero like tier demonstration

917
00:37:47,700 --> 00:37:49,800
Enterprise security model or whatever

918
00:37:49,800 --> 00:37:51,540
that was I don't know

919
00:37:51,540 --> 00:37:53,940
obviously I am not

920
00:37:53,940 --> 00:37:57,540
so earlier we had the global admin role

921
00:37:57,540 --> 00:38:00,780
the global admin role is inarguably a

922
00:38:00,780 --> 00:38:02,640
tier zero role everyone would agree with

923
00:38:02,640 --> 00:38:03,480
that

924
00:38:03,480 --> 00:38:08,460
so that thing belongs within a set of

925
00:38:08,460 --> 00:38:11,160
objects that we can collectively call

926
00:38:11,160 --> 00:38:13,079
tier zero

927
00:38:13,079 --> 00:38:16,020
anything in tier zero

928
00:38:16,020 --> 00:38:18,119
should have control of everything else

929
00:38:18,119 --> 00:38:20,700
in tier zero that's the deal is if

930
00:38:20,700 --> 00:38:22,579
you're tier zero you control everything

931
00:38:22,579 --> 00:38:25,920
including everything in tier zero

932
00:38:25,920 --> 00:38:30,180
anything outside of tier zero that has

933
00:38:30,180 --> 00:38:33,540
control of something in tier zero we

934
00:38:33,540 --> 00:38:36,060
would call that a tiering violation

935
00:38:36,060 --> 00:38:38,280
and this is something that people try to

936
00:38:38,280 --> 00:38:40,380
solve for a very long time with like red

937
00:38:40,380 --> 00:38:43,140
forest or esae or whatever has anybody

938
00:38:43,140 --> 00:38:44,400
ever anybody in this room ever try to

939
00:38:44,400 --> 00:38:47,220
deploy red forest or esae

940
00:38:47,220 --> 00:38:51,060
like it's it's incredibly difficult to

941
00:38:51,060 --> 00:38:52,740
set up in the first place

942
00:38:52,740 --> 00:38:54,660
and then it works for about a week and

943
00:38:54,660 --> 00:38:55,859
then it crumbles

944
00:38:55,859 --> 00:38:58,560
like yeah

945
00:38:58,560 --> 00:38:59,880
so

946
00:38:59,880 --> 00:39:01,980
like I was saying before though

947
00:39:01,980 --> 00:39:03,839
this service principle that has this

948
00:39:03,839 --> 00:39:05,400
privilege there are other things that

949
00:39:05,400 --> 00:39:07,079
control that service principle and so

950
00:39:07,079 --> 00:39:09,960
these attack paths start to emerge so

951
00:39:09,960 --> 00:39:11,460
let's just say like there's three things

952
00:39:11,460 --> 00:39:13,859
that control that service principle and

953
00:39:13,859 --> 00:39:15,119
for each of those three things let's say

954
00:39:15,119 --> 00:39:16,200
there are three things that control

955
00:39:16,200 --> 00:39:18,420
those things and for those things

956
00:39:18,420 --> 00:39:19,859
there's three things that control all

957
00:39:19,859 --> 00:39:20,940
those things

958
00:39:20,940 --> 00:39:23,940
very quickly you can start to see what

959
00:39:23,940 --> 00:39:25,800
the impact of that connection actually

960
00:39:25,800 --> 00:39:27,839
is and I would even say that that

961
00:39:27,839 --> 00:39:31,619
tiering violation is bad but only the

962
00:39:31,619 --> 00:39:33,599
context

963
00:39:33,599 --> 00:39:37,619
given to us by a graph reveals how bad

964
00:39:37,619 --> 00:39:40,200
that actually is

965
00:39:40,200 --> 00:39:42,420
so what can you do about this

966
00:39:42,420 --> 00:39:43,500
well

967
00:39:43,500 --> 00:39:45,839
you can get rid of that connection but

968
00:39:45,839 --> 00:39:48,240
that might betray the business

969
00:39:48,240 --> 00:39:51,900
requirements so we can extend

970
00:39:51,900 --> 00:39:54,300
our definition of what tier zero is and

971
00:39:54,300 --> 00:39:56,940
we can include that service principle in

972
00:39:56,940 --> 00:39:59,160
that set of tier zero

973
00:39:59,160 --> 00:40:01,500
and then we can agree that this service

974
00:40:01,500 --> 00:40:04,320
principle is tier zero it has control of

975
00:40:04,320 --> 00:40:06,240
everything and that's okay that's by

976
00:40:06,240 --> 00:40:08,040
Design we accept that and we can monitor

977
00:40:08,040 --> 00:40:10,020
that thing whatever

978
00:40:10,020 --> 00:40:13,880
now you have three tiering violations

979
00:40:13,980 --> 00:40:15,540
which you can get rid of like there

980
00:40:15,540 --> 00:40:17,760
there are mechanisms for controlling for

981
00:40:17,760 --> 00:40:19,380
uh

982
00:40:19,380 --> 00:40:20,940
you know specific privileges against

983
00:40:20,940 --> 00:40:22,980
other service principles but in Azure

984
00:40:22,980 --> 00:40:25,320
that gets really really hard to do it's

985
00:40:25,320 --> 00:40:27,000
very very difficult to do and even

986
00:40:27,000 --> 00:40:29,900
harder to audit

987
00:40:31,380 --> 00:40:34,740
in the Bloodhound GUI if we find the

988
00:40:34,740 --> 00:40:38,760
Azure tenant we can click on the inbound

989
00:40:38,760 --> 00:40:41,820
control for that tenant and find

990
00:40:41,820 --> 00:40:44,520
everybody who has explicit control of

991
00:40:44,520 --> 00:40:46,140
the tenant or in in other words

992
00:40:46,140 --> 00:40:48,720
everybody who has some kind of tier zero

993
00:40:48,720 --> 00:40:52,140
privilege uh in the tenant so this is

994
00:40:52,140 --> 00:40:54,180
going to be anybody who is a global

995
00:40:54,180 --> 00:40:56,220
admin or anybody who can promote

996
00:40:56,220 --> 00:40:58,920
themselves to Global admin same with

997
00:40:58,920 --> 00:41:01,920
privileged role admin because that role

998
00:41:01,920 --> 00:41:02,760
can

999
00:41:02,760 --> 00:41:04,859
promote itself to Global admin

1000
00:41:04,859 --> 00:41:07,260
and privileged authentication admin

1001
00:41:07,260 --> 00:41:10,020
because that role lets you reset the

1002
00:41:10,020 --> 00:41:12,180
passwords of anybody who has those two

1003
00:41:12,180 --> 00:41:13,619
other roles

1004
00:41:13,619 --> 00:41:17,280
additionally it's any principle that has

1005
00:41:17,280 --> 00:41:21,140
the MS graph April assignment of

1006
00:41:21,140 --> 00:41:22,140
rolemanagement.readwrite.directory

1007
00:41:22,140 --> 00:41:25,140
aprilassignment.readwrite.all

1008
00:41:26,060 --> 00:41:27,960
and

1009
00:41:27,960 --> 00:41:29,460
I think like one or two more can't

1010
00:41:29,460 --> 00:41:31,500
remember off top of my head so anybody

1011
00:41:31,500 --> 00:41:33,240
who has one of those April assignments

1012
00:41:33,240 --> 00:41:34,980
is going to be tier zero because they

1013
00:41:34,980 --> 00:41:36,240
can they can promote themselves to

1014
00:41:36,240 --> 00:41:39,960
Global admin then what you can do is you

1015
00:41:39,960 --> 00:41:41,640
can start to trim some of those

1016
00:41:41,640 --> 00:41:44,520
privileges so let's say who do we want

1017
00:41:44,520 --> 00:41:45,720
to pick on

1018
00:41:45,720 --> 00:41:47,940
let's click on Jeff dimick

1019
00:41:47,940 --> 00:41:49,680
probably the worst person I've ever met

1020
00:41:49,680 --> 00:41:51,359
in my life

1021
00:41:51,359 --> 00:41:55,619
so Jeff dimick has the uh Global admin

1022
00:41:55,619 --> 00:41:57,960
role against the tenant not only that

1023
00:41:57,960 --> 00:42:00,060
but like because his user is showing up

1024
00:42:00,060 --> 00:42:02,040
in green It's actually an on-prem user

1025
00:42:02,040 --> 00:42:03,960
who has that role activated

1026
00:42:03,960 --> 00:42:05,280
so

1027
00:42:05,280 --> 00:42:07,200
maybe we can look at that we can say

1028
00:42:07,200 --> 00:42:08,940
does Jeff actually need this

1029
00:42:08,940 --> 00:42:10,859
additionally we could also look at the

1030
00:42:10,859 --> 00:42:13,380
logs in Azure which are kind of Hit or

1031
00:42:13,380 --> 00:42:15,240
Miss but we can look at the logs in

1032
00:42:15,240 --> 00:42:17,339
Azure and see like is that principle

1033
00:42:17,339 --> 00:42:19,079
actually doing anything that requires

1034
00:42:19,079 --> 00:42:21,000
that level of privilege

1035
00:42:21,000 --> 00:42:22,079
now I think it'd be really cool if

1036
00:42:22,079 --> 00:42:23,339
somebody like automated that kind of

1037
00:42:23,339 --> 00:42:25,380
analysis I think they'd be really neat

1038
00:42:25,380 --> 00:42:28,800
and then we can cut that off or for the

1039
00:42:28,800 --> 00:42:31,140
other objects let's say Rob Roblin

1040
00:42:31,140 --> 00:42:32,579
probably the best person I've ever met

1041
00:42:32,579 --> 00:42:35,520
so Rob he's also a global admin and we

1042
00:42:35,520 --> 00:42:37,859
say yes he needs that that's legitimate

1043
00:42:37,859 --> 00:42:39,480
like maybe he's the only person who

1044
00:42:39,480 --> 00:42:42,119
needs that we can keep that

1045
00:42:42,119 --> 00:42:44,780
and then we can analyze the inbound

1046
00:42:44,780 --> 00:42:47,220
relationships against Rob and we can

1047
00:42:47,220 --> 00:42:49,800
understand like we accept Robin to your

1048
00:42:49,800 --> 00:42:52,260
zero let's see like what's like who has

1049
00:42:52,260 --> 00:42:53,700
control of Rob

1050
00:42:53,700 --> 00:42:57,300
with Azure user objects that's uh a lot

1051
00:42:57,300 --> 00:42:58,260
of that work has actually already been

1052
00:42:58,260 --> 00:43:01,740
done for you by Microsoft because of how

1053
00:43:01,740 --> 00:43:04,260
the password reset system works in Azure

1054
00:43:04,260 --> 00:43:06,599
it's actually really really cool

1055
00:43:06,599 --> 00:43:08,160
so a better example is going to be like

1056
00:43:08,160 --> 00:43:11,520
this my test app service principle

1057
00:43:11,520 --> 00:43:13,440
that thing is going to have an app

1058
00:43:13,440 --> 00:43:16,380
registration associated with it or it

1059
00:43:16,380 --> 00:43:19,020
might have an Azure resource associated

1060
00:43:19,020 --> 00:43:20,819
with it as a managed identity like we

1061
00:43:20,819 --> 00:43:22,740
saw on the attack path earlier

1062
00:43:22,740 --> 00:43:24,119
so we can

1063
00:43:24,119 --> 00:43:26,040
we can decide does that service

1064
00:43:26,040 --> 00:43:27,540
principle need to be a global admin or

1065
00:43:27,540 --> 00:43:29,460
not maybe you decide yes

1066
00:43:29,460 --> 00:43:31,800
then look at the inbound control against

1067
00:43:31,800 --> 00:43:35,040
that service principle and start to do

1068
00:43:35,040 --> 00:43:36,300
that kind of

1069
00:43:36,300 --> 00:43:38,339
uh

1070
00:43:38,339 --> 00:43:39,839
uh two degree Three Degree four degree

1071
00:43:39,839 --> 00:43:42,180
separation analysis to find where can

1072
00:43:42,180 --> 00:43:45,900
you actually cut out uh the uh

1073
00:43:45,900 --> 00:43:48,440
configuration

1074
00:43:49,680 --> 00:43:53,540
okay we are pretty far ahead

1075
00:43:53,540 --> 00:43:57,240
so let's do a conclusion and then we'll

1076
00:43:57,240 --> 00:43:58,560
have time for questions we'll plenty of

1077
00:43:58,560 --> 00:44:00,540
time for questions and then I also have

1078
00:44:00,540 --> 00:44:02,880
stickers up here to hand out if you

1079
00:44:02,880 --> 00:44:05,339
would like a sticker and also if anybody

1080
00:44:05,339 --> 00:44:07,500
in this room has ever submitted a PR to

1081
00:44:07,500 --> 00:44:10,200
the Foss GitHub project I have a special

1082
00:44:10,200 --> 00:44:12,119
thing for you too

1083
00:44:12,119 --> 00:44:14,700
so

1084
00:44:14,700 --> 00:44:17,460
let's wrap this up

1085
00:44:17,460 --> 00:44:20,640
here is the attack path that we walked

1086
00:44:20,640 --> 00:44:22,020
through

1087
00:44:22,020 --> 00:44:25,160
uh earlier

1088
00:44:25,500 --> 00:44:27,839
so there's there's a very specific thing

1089
00:44:27,839 --> 00:44:30,540
that I want to say about this

1090
00:44:30,540 --> 00:44:34,440
in Azure or in any IDP

1091
00:44:34,440 --> 00:44:37,680
like an AWS account or an active

1092
00:44:37,680 --> 00:44:40,020
directory Forest there is a trust

1093
00:44:40,020 --> 00:44:43,859
boundary around that IDP instance

1094
00:44:43,859 --> 00:44:46,920
so in Azure if you control the tenant

1095
00:44:46,920 --> 00:44:48,660
you control everything within that

1096
00:44:48,660 --> 00:44:53,099
boundary and nothing outside of it

1097
00:44:53,099 --> 00:44:55,319
you can change that

1098
00:44:55,319 --> 00:44:59,640
so that external identities get access

1099
00:44:59,640 --> 00:45:01,800
into your tenant

1100
00:45:01,800 --> 00:45:03,780
and vice versa you can change it so that

1101
00:45:03,780 --> 00:45:05,760
your identities get access into other

1102
00:45:05,760 --> 00:45:06,780
tenants

1103
00:45:06,780 --> 00:45:10,079
and so most of the time when you're

1104
00:45:10,079 --> 00:45:12,480
going to configure that you do that with

1105
00:45:12,480 --> 00:45:14,579
some kind of Federated trust

1106
00:45:14,579 --> 00:45:15,960
relationship

1107
00:45:15,960 --> 00:45:18,660
so maybe you're doing this with adfs

1108
00:45:18,660 --> 00:45:21,359
maybe you're doing this with Azure

1109
00:45:21,359 --> 00:45:24,420
active directory synced but those

1110
00:45:24,420 --> 00:45:27,420
explicit trust relationships in Azure

1111
00:45:27,420 --> 00:45:29,640
have to be created with the highest

1112
00:45:29,640 --> 00:45:31,980
level of privilege so like not just

1113
00:45:31,980 --> 00:45:34,920
anybody in an Azure tenant can say we

1114
00:45:34,920 --> 00:45:38,280
trust this other IDP and we give users

1115
00:45:38,280 --> 00:45:40,500
in that IDP instance access to our

1116
00:45:40,500 --> 00:45:42,359
resources you can't do that without

1117
00:45:42,359 --> 00:45:44,460
being like a global admin or the

1118
00:45:44,460 --> 00:45:46,319
Federated identity administrator role I

1119
00:45:46,319 --> 00:45:47,839
think it's called

1120
00:45:47,839 --> 00:45:51,359
so that's good and you wouldn't want

1121
00:45:51,359 --> 00:45:54,420
that trust boundary to be violated uh

1122
00:45:54,420 --> 00:45:56,940
except by you know very high level very

1123
00:45:56,940 --> 00:46:00,060
high privileged users okay

1124
00:46:00,060 --> 00:46:02,819
there is another kind of trust so what I

1125
00:46:02,819 --> 00:46:04,440
just described I would call explicit

1126
00:46:04,440 --> 00:46:05,400
Trust

1127
00:46:05,400 --> 00:46:07,920
there's another kind of trust that can

1128
00:46:07,920 --> 00:46:11,760
exist in our attack path demo here we're

1129
00:46:11,760 --> 00:46:13,920
looking at the GitHub organization which

1130
00:46:13,920 --> 00:46:18,300
is a let's let's call that a foreign IDP

1131
00:46:18,300 --> 00:46:20,579
and it has this attack path into our

1132
00:46:20,579 --> 00:46:22,200
Azure tenant

1133
00:46:22,200 --> 00:46:24,660
the trust relationship

1134
00:46:24,660 --> 00:46:27,900
that bridges that Gap is the oidc

1135
00:46:27,900 --> 00:46:29,460
connection

1136
00:46:29,460 --> 00:46:32,099
the oidc connection can be created by

1137
00:46:32,099 --> 00:46:33,780
anybody with control of that service

1138
00:46:33,780 --> 00:46:36,660
principle service principle a you do not

1139
00:46:36,660 --> 00:46:38,700
need to be a global admin to do this you

1140
00:46:38,700 --> 00:46:40,200
don't need to be any kind of high-level

1141
00:46:40,200 --> 00:46:42,660
admin you just need basically right

1142
00:46:42,660 --> 00:46:45,000
access I would say to service principle

1143
00:46:45,000 --> 00:46:49,380
a to create what is effectively an IDP

1144
00:46:49,380 --> 00:46:50,819
Trust

1145
00:46:50,819 --> 00:46:52,740
and

1146
00:46:52,740 --> 00:46:54,240
the first kind of trust we talked about

1147
00:46:54,240 --> 00:46:56,700
was explicit trust I would call this

1148
00:46:56,700 --> 00:47:00,240
emergent IDP Trust this is a very

1149
00:47:00,240 --> 00:47:03,119
dangerous kind of trust because it

1150
00:47:03,119 --> 00:47:04,500
doesn't require a high level of

1151
00:47:04,500 --> 00:47:07,260
privilege in order to configure

1152
00:47:07,260 --> 00:47:09,599
once it is configured We have basically

1153
00:47:09,599 --> 00:47:12,420
said this tenant will trust that GitHub

1154
00:47:12,420 --> 00:47:15,839
organization to validate the identity of

1155
00:47:15,839 --> 00:47:17,579
this service principle

1156
00:47:17,579 --> 00:47:22,200
and auditing for these kind of emergent

1157
00:47:22,200 --> 00:47:25,319
trust enabling connections is really

1158
00:47:25,319 --> 00:47:27,839
tough it's really really tough to audit

1159
00:47:27,839 --> 00:47:30,000
for these connections

1160
00:47:30,000 --> 00:47:33,839
also the kinds of configurations that

1161
00:47:33,839 --> 00:47:36,540
can create this emergent Trust

1162
00:47:36,540 --> 00:47:38,700
are still being studied they're still

1163
00:47:38,700 --> 00:47:41,579
being understood so today Azure admins

1164
00:47:41,579 --> 00:47:42,720
are setting up their environments and

1165
00:47:42,720 --> 00:47:44,280
doing things like setting up devops

1166
00:47:44,280 --> 00:47:45,900
pipelines it's like Ci CD and all this

1167
00:47:45,900 --> 00:47:46,920
kind of stuff like doing all this like

1168
00:47:46,920 --> 00:47:47,880
really cool stuff and building really

1169
00:47:47,880 --> 00:47:49,020
cool things

1170
00:47:49,020 --> 00:47:51,180
they are creating attack paths right now

1171
00:47:51,180 --> 00:47:52,800
today so they are creating these attack

1172
00:47:52,800 --> 00:47:55,319
paths that

1173
00:47:55,319 --> 00:47:57,359
if things don't change and if Defenders

1174
00:47:57,359 --> 00:47:59,940
don't start thinking in terms of a graph

1175
00:47:59,940 --> 00:48:02,760
and seeing objects in the context of

1176
00:48:02,760 --> 00:48:05,099
those attack paths we're going to wind

1177
00:48:05,099 --> 00:48:06,960
up today building

1178
00:48:06,960 --> 00:48:08,640
what we're going to be talking about in

1179
00:48:08,640 --> 00:48:10,200
20 years from now talking about like

1180
00:48:10,200 --> 00:48:12,839
responder for Azure or mimikcast for

1181
00:48:12,839 --> 00:48:15,359
Azure or whatever so it's crucial that

1182
00:48:15,359 --> 00:48:18,599
admins understand this today and find

1183
00:48:18,599 --> 00:48:21,060
fix and prevent the creation of these

1184
00:48:21,060 --> 00:48:23,400
things going forward

1185
00:48:23,400 --> 00:48:25,859
all right that's it thank you this is my

1186
00:48:25,859 --> 00:48:27,900
contact info there's some helpful links

1187
00:48:27,900 --> 00:48:30,359
and uh yeah I guess we've got time for

1188
00:48:30,359 --> 00:48:31,859
questions if they're already

1189
00:48:31,859 --> 00:48:33,300
and if there aren't any I've got

1190
00:48:33,300 --> 00:48:37,099
stickers up here that you can have

1191
00:48:43,079 --> 00:48:44,700
I wanted to go back to your earlier

1192
00:48:44,700 --> 00:48:46,859
point about the cyclical offensive

1193
00:48:46,859 --> 00:48:48,960
perspective yeah yeah defensive

1194
00:48:48,960 --> 00:48:51,060
perspective yeah and the reason is I've

1195
00:48:51,060 --> 00:48:54,060
seen a lot of I've divided people kind

1196
00:48:54,060 --> 00:48:56,220
of say we need to burn down KD to the

1197
00:48:56,220 --> 00:48:58,980
ground yep yeah

1198
00:48:58,980 --> 00:49:01,440
um recommendation kind of

1199
00:49:01,440 --> 00:49:03,599
it sounds like it's so hopeless right

1200
00:49:03,599 --> 00:49:05,339
and we've seen like sisa come out and

1201
00:49:05,339 --> 00:49:06,660
you can see if we see like saying oh you

1202
00:49:06,660 --> 00:49:09,599
want out sure yep yeah what would your

1203
00:49:09,599 --> 00:49:11,700
main recommendation be for people like

1204
00:49:11,700 --> 00:49:14,099
from a Defender perspective if we can

1205
00:49:14,099 --> 00:49:16,260
recommend like if the offense and people

1206
00:49:16,260 --> 00:49:18,660
can recommend something yeah

1207
00:49:18,660 --> 00:49:21,060
so his question is like talking about

1208
00:49:21,060 --> 00:49:24,119
that red team cycle of tail chasing that

1209
00:49:24,119 --> 00:49:26,579
a lot of pen test shops or it audit or

1210
00:49:26,579 --> 00:49:28,020
whatever their recommendation is going

1211
00:49:28,020 --> 00:49:29,940
to be like burn ad to the ground and

1212
00:49:29,940 --> 00:49:31,400
start over

1213
00:49:31,400 --> 00:49:33,660
uh obviously most organizations are not

1214
00:49:33,660 --> 00:49:35,099
going to do that and it also doesn't

1215
00:49:35,099 --> 00:49:36,960
solve the underlying issue

1216
00:49:36,960 --> 00:49:39,540
so you're so the question was what is my

1217
00:49:39,540 --> 00:49:41,579
recommendation for organizations as far

1218
00:49:41,579 --> 00:49:43,020
as how to make some progress here

1219
00:49:43,020 --> 00:49:44,819
without having to burn everything to the

1220
00:49:44,819 --> 00:49:46,319
ground

1221
00:49:46,319 --> 00:49:50,280
you mentioned that PWC and DHS have

1222
00:49:50,280 --> 00:49:52,440
recommended that organizations use Foss

1223
00:49:52,440 --> 00:49:55,380
Bloodhound in order to analyze and

1224
00:49:55,380 --> 00:49:57,300
mitigate attack paths

1225
00:49:57,300 --> 00:49:59,760
I would Echo that recommendation so fast

1226
00:49:59,760 --> 00:50:02,280
Bloodhound is free you know as Foss

1227
00:50:02,280 --> 00:50:05,640
implies the thing itself is not really

1228
00:50:05,640 --> 00:50:07,500
built for Defenders it's built for

1229
00:50:07,500 --> 00:50:09,300
attackers but you can definitely get a

1230
00:50:09,300 --> 00:50:11,040
lot of defensive wins and I've got a

1231
00:50:11,040 --> 00:50:12,839
blog post written up about Bloodhound

1232
00:50:12,839 --> 00:50:14,760
versus ransomware and how to make those

1233
00:50:14,760 --> 00:50:17,180
wins so I would Echo that recommendation

1234
00:50:17,180 --> 00:50:19,859
I I guess what I would also recommend

1235
00:50:19,859 --> 00:50:23,640
people do is uh understand that the

1236
00:50:23,640 --> 00:50:25,319
other idps don't have this problem

1237
00:50:25,319 --> 00:50:28,440
solved and that you know burning it to

1238
00:50:28,440 --> 00:50:29,819
the ground and rebuilding it could kind

1239
00:50:29,819 --> 00:50:31,560
of be the same as

1240
00:50:31,560 --> 00:50:34,200
abandoning on-prem ad in favor of azure

1241
00:50:34,200 --> 00:50:36,480
ad but that's going to be out of the

1242
00:50:36,480 --> 00:50:38,400
frying pan into the fryer

1243
00:50:38,400 --> 00:50:40,440
so I guess I guess in general my

1244
00:50:40,440 --> 00:50:43,500
philosophical advice would be like lean

1245
00:50:43,500 --> 00:50:46,980
into the problems that we are seeing and

1246
00:50:46,980 --> 00:50:49,319
don't be defeated by them but see them

1247
00:50:49,319 --> 00:50:53,160
as like uh I think there's like a stoic

1248
00:50:53,160 --> 00:50:55,200
philosophy quote that's like what stands

1249
00:50:55,200 --> 00:50:58,319
in the way is the way so there's this

1250
00:50:58,319 --> 00:51:00,960
Obstacle of active directory attack

1251
00:51:00,960 --> 00:51:04,619
paths seeming impossible to fix

1252
00:51:04,619 --> 00:51:06,300
let's fix that like let's that's that's

1253
00:51:06,300 --> 00:51:10,220
our way forward I think yeah

1254
00:51:13,500 --> 00:51:16,619
this slide deck yeah yeah let me go back

1255
00:51:16,619 --> 00:51:17,640
to the front there's a bitly link

1256
00:51:17,640 --> 00:51:20,640
that'll take you right to it

1257
00:51:20,640 --> 00:51:23,240
there you go

1258
00:51:23,339 --> 00:51:25,140
a question online uh could you go over

1259
00:51:25,140 --> 00:51:27,359
the user access property that a global

1260
00:51:27,359 --> 00:51:29,040
admin can use to go from one sub to

1261
00:51:29,040 --> 00:51:30,420
another is that something you can do oh

1262
00:51:30,420 --> 00:51:32,520
sure sure yeah

1263
00:51:32,520 --> 00:51:36,720
um how do I want to do that uh uh

1264
00:51:36,720 --> 00:51:39,000
I don't feel very comfortable sharing my

1265
00:51:39,000 --> 00:51:42,319
Azure portal GUI right now but

1266
00:51:42,319 --> 00:51:44,940
if you log into the Azure portal as a

1267
00:51:44,940 --> 00:51:46,559
global admin

1268
00:51:46,559 --> 00:51:48,839
search for or click on Azure active

1269
00:51:48,839 --> 00:51:50,760
directory that'll take you to the tenant

1270
00:51:50,760 --> 00:51:52,020
object View

1271
00:51:52,020 --> 00:51:54,660
on the left there is a item called

1272
00:51:54,660 --> 00:51:56,940
properties for the tenant

1273
00:51:56,940 --> 00:51:58,079
click that

1274
00:51:58,079 --> 00:52:00,240
scroll all the way to the bottom

1275
00:52:00,240 --> 00:52:03,500
there is a toggle that by default is no

1276
00:52:03,500 --> 00:52:07,079
you change that toggle to yes

1277
00:52:07,079 --> 00:52:09,960
and the toggle basically says like this

1278
00:52:09,960 --> 00:52:12,780
user is allowed to manage subscriptions

1279
00:52:12,780 --> 00:52:14,640
toggle that to yes

1280
00:52:14,640 --> 00:52:17,220
hit save back at the top

1281
00:52:17,220 --> 00:52:20,099
and then what that actually does is at

1282
00:52:20,099 --> 00:52:23,460
The Root Management Group it applies the

1283
00:52:23,460 --> 00:52:26,220
user access administrator role for that

1284
00:52:26,220 --> 00:52:27,240
user

1285
00:52:27,240 --> 00:52:28,920
at that level which then inherits down

1286
00:52:28,920 --> 00:52:30,839
to everything so that's how that works

1287
00:52:30,839 --> 00:52:34,079
it's it's a feature of azure it's not a

1288
00:52:34,079 --> 00:52:35,819
security bypass it's just

1289
00:52:35,819 --> 00:52:38,819
I we even call it a roadblock

1290
00:52:38,819 --> 00:52:40,619
it's an Open Door

1291
00:52:40,619 --> 00:52:42,839
that was amazing I saw the whole UI in

1292
00:52:42,839 --> 00:52:47,520
my head that was fantastic good yeah

1293
00:52:47,520 --> 00:52:49,680
so we have a lot of clients that are

1294
00:52:49,680 --> 00:52:52,579
like actively migrating

1295
00:52:52,579 --> 00:52:55,619
things too matter or whatever but it's

1296
00:52:55,619 --> 00:52:58,380
made some stages and it's like we do a

1297
00:52:58,380 --> 00:53:00,240
lot of bangs like you said yeah like

1298
00:53:00,240 --> 00:53:02,099
that so it's like they might have like

1299
00:53:02,099 --> 00:53:05,059
Microsoft 365

1300
00:53:05,240 --> 00:53:07,380
or whatever so if they don't have like

1301
00:53:07,380 --> 00:53:08,700
VMS there are a lot of subscriptions

1302
00:53:08,700 --> 00:53:10,740
going on yeah there's still a lot of

1303
00:53:10,740 --> 00:53:14,339
like valid attack pads that Azure has

1304
00:53:14,339 --> 00:53:16,079
gonna help even when they're not using

1305
00:53:16,079 --> 00:53:19,380
those types of resources yeah so the

1306
00:53:19,380 --> 00:53:21,180
question is if you're not like if I

1307
00:53:21,180 --> 00:53:22,440
could reset a question

1308
00:53:22,440 --> 00:53:24,420
if you're only using the Azure ad

1309
00:53:24,420 --> 00:53:26,280
service and you're not using the Azure

1310
00:53:26,280 --> 00:53:27,839
resource manager service are there

1311
00:53:27,839 --> 00:53:29,760
attack paths that can emerge the answer

1312
00:53:29,760 --> 00:53:32,700
is yes there are certainly more that

1313
00:53:32,700 --> 00:53:34,680
emerge when you have Azure RM and you

1314
00:53:34,680 --> 00:53:36,420
have like that you know populated with

1315
00:53:36,420 --> 00:53:39,540
things but at the Azure ad level there

1316
00:53:39,540 --> 00:53:41,579
are attack paths that can emerge and

1317
00:53:41,579 --> 00:53:44,700
they have I would say 99 of the time

1318
00:53:44,700 --> 00:53:47,220
they are abusing service principles not

1319
00:53:47,220 --> 00:53:49,859
users because of the Fantastic password

1320
00:53:49,859 --> 00:53:51,839
reset architecture

1321
00:53:51,839 --> 00:53:53,760
I say that that sounded sarcastic but I

1322
00:53:53,760 --> 00:53:54,780
actually do believe it's actually a

1323
00:53:54,780 --> 00:53:56,640
fantastic password reset architecture

1324
00:53:56,640 --> 00:53:58,980
the users are a little harder to exploit

1325
00:53:58,980 --> 00:54:00,420
in Azure

1326
00:54:00,420 --> 00:54:01,980
um outside of like stealing tokens I

1327
00:54:01,980 --> 00:54:03,540
mean that's still that's still reliable

1328
00:54:03,540 --> 00:54:05,819
but service principles that's where I

1329
00:54:05,819 --> 00:54:08,119
see the attack paths traversing through

1330
00:54:08,119 --> 00:54:11,400
uh April assignments with Ms graph the

1331
00:54:11,400 --> 00:54:13,099
explicit control relationships between

1332
00:54:13,099 --> 00:54:15,480
uh service principles and then service

1333
00:54:15,480 --> 00:54:18,900
principles being granted uh roles such

1334
00:54:18,900 --> 00:54:22,020
as Cloud app admin that then apply to

1335
00:54:22,020 --> 00:54:23,819
all other service principles and app

1336
00:54:23,819 --> 00:54:26,220
registration objects and then at that

1337
00:54:26,220 --> 00:54:28,140
level you also do have like devices but

1338
00:54:28,140 --> 00:54:30,240
uh I don't see that being used a whole

1339
00:54:30,240 --> 00:54:31,680
lot but you can definitely have attack

1340
00:54:31,680 --> 00:54:33,660
pass a Traverse device

1341
00:54:33,660 --> 00:54:36,540
and then back up into the tenant

1342
00:54:36,540 --> 00:54:38,280
I think maybe time for one more question

1343
00:54:38,280 --> 00:54:40,500
we have one minute one minute

1344
00:54:40,500 --> 00:54:43,940
right there really quick question

1345
00:54:45,780 --> 00:54:50,180
uh C and D seems to have a bench

1346
00:54:50,720 --> 00:54:53,220
perspective I wanted to see if they

1347
00:54:53,220 --> 00:54:55,460
think about it

1348
00:54:55,460 --> 00:54:58,460
yeah

1349
00:55:03,020 --> 00:55:05,640
totally yeah so like so those are so his

1350
00:55:05,640 --> 00:55:06,660
question was are there detection

1351
00:55:06,660 --> 00:55:09,119
opportunities for the abuse actions that

1352
00:55:09,119 --> 00:55:11,220
we did with service principles C and D

1353
00:55:11,220 --> 00:55:13,380
the answer is yes so there are by

1354
00:55:13,380 --> 00:55:17,280
default logs turned on for the uh abuses

1355
00:55:17,280 --> 00:55:19,500
or the abuse actions that we talked

1356
00:55:19,500 --> 00:55:22,920
about here so for a new April assignment

1357
00:55:22,920 --> 00:55:25,559
that generates a log for a new secret

1358
00:55:25,559 --> 00:55:27,420
being created or assert or whatever for

1359
00:55:27,420 --> 00:55:29,400
a service principle that is logged so I

1360
00:55:29,400 --> 00:55:31,319
would say that's great for logging not

1361
00:55:31,319 --> 00:55:34,920
only is an adversary operating in our

1362
00:55:34,920 --> 00:55:36,780
tenant I think it's great for that but

1363
00:55:36,780 --> 00:55:40,319
also I think it's great for we have our

1364
00:55:40,319 --> 00:55:42,300
security posture in such a really good

1365
00:55:42,300 --> 00:55:44,760
State let me know if that's if that

1366
00:55:44,760 --> 00:55:46,200
posture degrades

1367
00:55:46,200 --> 00:55:48,540
and so like if an unexpected service

1368
00:55:48,540 --> 00:55:50,099
principal all of a sudden has privilege

1369
00:55:50,099 --> 00:55:52,140
that may not be an adversary that may be

1370
00:55:52,140 --> 00:55:55,559
you know your friend Azure admin who set

1371
00:55:55,559 --> 00:55:56,760
that up didn't understand the

1372
00:55:56,760 --> 00:55:58,500
consequences and then you can alert on

1373
00:55:58,500 --> 00:56:00,359
that and you can do something about it

1374
00:56:00,359 --> 00:56:02,099
thank you

1375
00:56:02,099 --> 00:56:04,200
thank you so much Andy really appreciate

1376
00:56:04,200 --> 00:56:05,339
that

1377
00:56:05,339 --> 00:56:05,860
um

1378
00:56:05,860 --> 00:56:09,039
[Applause]

