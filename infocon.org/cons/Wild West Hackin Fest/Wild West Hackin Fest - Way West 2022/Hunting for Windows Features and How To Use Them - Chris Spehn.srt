1
00:00:02,760 --> 00:00:05,400
all right welcome to 10 a.m Pacific time

2
00:00:05,400 --> 00:00:08,400
in track two with Chris Spen uh hunting

3
00:00:08,400 --> 00:00:10,200
for Windows features that's in quotes

4
00:00:10,200 --> 00:00:13,200
and how to use them uh Chris is a member

5
00:00:13,200 --> 00:00:15,360
of the X-Force red advisory adversary

6
00:00:15,360 --> 00:00:17,760
not advisory adversary simulation team

7
00:00:17,760 --> 00:00:21,180
at IBM uh he's he's uh worked on diverse

8
00:00:21,180 --> 00:00:23,220
projects for public and private sector

9
00:00:23,220 --> 00:00:24,539
clients Assurance around the security

10
00:00:24,539 --> 00:00:25,680
posture their products and

11
00:00:25,680 --> 00:00:28,019
infrastructure uh he's done pen testing

12
00:00:28,019 --> 00:00:30,660
uh offense and defense started with

13
00:00:30,660 --> 00:00:33,000
discover some time in finance uh

14
00:00:33,000 --> 00:00:34,320
security researcher for trustwave

15
00:00:34,320 --> 00:00:36,780
spiderwebs he's been all all over all

16
00:00:36,780 --> 00:00:39,239
over the place uh today he's here to

17
00:00:39,239 --> 00:00:40,980
talk us to talk to us about how to find

18
00:00:40,980 --> 00:00:42,480
features in Windows that we might want

19
00:00:42,480 --> 00:00:44,579
to abuse is what it sounds like

20
00:00:44,579 --> 00:00:47,100
Chris thank you

21
00:00:47,100 --> 00:00:48,600
all right just making sure everyone can

22
00:00:48,600 --> 00:00:51,300
hear me yeah cool

23
00:00:51,300 --> 00:00:53,280
um so yeah welcome to hunting for

24
00:00:53,280 --> 00:00:55,800
Windows features and how to use them

25
00:00:55,800 --> 00:01:00,539
um it was June 2019 uh I was in a taxi

26
00:01:00,539 --> 00:01:04,199
in Bangalore India heading to a client

27
00:01:04,199 --> 00:01:06,000
to give them some red team training

28
00:01:06,000 --> 00:01:09,060
working for mandian at the time

29
00:01:09,060 --> 00:01:11,520
um once I got to the client and had done

30
00:01:11,520 --> 00:01:15,240
the first session with them I got an

31
00:01:15,240 --> 00:01:17,220
emergency message and a chat Channel

32
00:01:17,220 --> 00:01:20,040
about a client that I was uh doing a red

33
00:01:20,040 --> 00:01:21,540
team for

34
00:01:21,540 --> 00:01:24,840
um and uh basically emergency meeting I

35
00:01:24,840 --> 00:01:26,880
was like I can't do it until 8 pm

36
00:01:26,880 --> 00:01:29,460
tonight it's a two hour travel back and

37
00:01:29,460 --> 00:01:32,400
forth so gave a training all day came

38
00:01:32,400 --> 00:01:35,579
back and uh then I had this this client

39
00:01:35,579 --> 00:01:36,420
meeting

40
00:01:36,420 --> 00:01:38,460
and so

41
00:01:38,460 --> 00:01:39,119
um

42
00:01:39,119 --> 00:01:42,180
uh a bit of a story here where the

43
00:01:42,180 --> 00:01:44,280
client said I expected to use the zero

44
00:01:44,280 --> 00:01:46,860
day to bypass our EDR products and I was

45
00:01:46,860 --> 00:01:49,500
just like all right you can't be serious

46
00:01:49,500 --> 00:01:52,259
right now right like how am I gonna do

47
00:01:52,259 --> 00:01:54,000
this at all right like like this is

48
00:01:54,000 --> 00:01:55,619
literally impossible what you're asking

49
00:01:55,619 --> 00:01:57,420
me to do

50
00:01:57,420 --> 00:01:58,860
um when I got back to Denver Colorado

51
00:01:58,860 --> 00:02:02,100
where I'm based out of laying in bed

52
00:02:02,100 --> 00:02:05,040
my other half is like what's wrong you

53
00:02:05,040 --> 00:02:07,860
know and I'm like oh well it just had a

54
00:02:07,860 --> 00:02:09,300
rough client meeting you know and I'm

55
00:02:09,300 --> 00:02:10,919
trying to think about this this problem

56
00:02:10,919 --> 00:02:12,239
I'm solving

57
00:02:12,239 --> 00:02:14,040
um so this was literally this is like

58
00:02:14,040 --> 00:02:16,500
you know why are you shutting me out and

59
00:02:16,500 --> 00:02:18,480
I was doing nothing but thinking about

60
00:02:18,480 --> 00:02:20,640
like how could I actually use a zero day

61
00:02:20,640 --> 00:02:22,860
on a red team engagement from start to

62
00:02:22,860 --> 00:02:25,020
finish

63
00:02:25,020 --> 00:02:26,700
um So eventually I had this Epiphany

64
00:02:26,700 --> 00:02:27,660
like

65
00:02:27,660 --> 00:02:29,819
it's a feature not a bug right like

66
00:02:29,819 --> 00:02:33,120
classic Microsoft and other vendors and

67
00:02:33,120 --> 00:02:34,140
so

68
00:02:34,140 --> 00:02:36,540
um eventually I decided that this was

69
00:02:36,540 --> 00:02:38,160
possible and you could do it and if we

70
00:02:38,160 --> 00:02:40,200
had a little automation it would help a

71
00:02:40,200 --> 00:02:42,780
lot to expedite that process and

72
00:02:42,780 --> 00:02:44,459
spending a lot of instead of spending a

73
00:02:44,459 --> 00:02:45,840
lot of research and development time

74
00:02:45,840 --> 00:02:48,480
trying to make it happen

75
00:02:48,480 --> 00:02:51,300
um so a little bit about myself

76
00:02:51,300 --> 00:02:52,980
um this is a quote that I throw on like

77
00:02:52,980 --> 00:02:55,019
every presentation slide it really

78
00:02:55,019 --> 00:02:56,340
represents

79
00:02:56,340 --> 00:02:58,560
um my viewpoint at this point in time in

80
00:02:58,560 --> 00:03:01,440
life really I'm a red teamer

81
00:03:01,440 --> 00:03:03,060
um done some different open source stuff

82
00:03:03,060 --> 00:03:05,640
uh Great Scott gotta catch them all this

83
00:03:05,640 --> 00:03:07,080
is an open source

84
00:03:07,080 --> 00:03:10,140
um essentially Walden tool I'm also part

85
00:03:10,140 --> 00:03:12,599
of the law bass project living off the

86
00:03:12,599 --> 00:03:14,940
land binary in scripts uh the site you

87
00:03:14,940 --> 00:03:17,459
see in the screenshot I created it and

88
00:03:17,459 --> 00:03:18,959
then Windows feature Hunter which we're

89
00:03:18,959 --> 00:03:20,220
talking about today

90
00:03:20,220 --> 00:03:21,000
um so I'll give you a little more

91
00:03:21,000 --> 00:03:22,739
background about myself

92
00:03:22,739 --> 00:03:24,300
um this fine gentleman did a good job

93
00:03:24,300 --> 00:03:26,519
worked for discover

94
00:03:26,519 --> 00:03:28,620
um as my first security job doing pen

95
00:03:28,620 --> 00:03:31,379
testing and a little bit of ir was a

96
00:03:31,379 --> 00:03:32,819
security researcher at trust based

97
00:03:32,819 --> 00:03:34,140
spider labs

98
00:03:34,140 --> 00:03:36,120
did some Contracting with MasterCard

99
00:03:36,120 --> 00:03:38,220
worked at the grocery store

100
00:03:38,220 --> 00:03:40,140
um called Schnucks in St Louis area if

101
00:03:40,140 --> 00:03:42,180
anyone's ever heard of it I'll be amazed

102
00:03:42,180 --> 00:03:43,860
come talk to me after the talk you've

103
00:03:43,860 --> 00:03:45,720
heard of it yeah yeah

104
00:03:45,720 --> 00:03:47,400
um so I was the senior technical lead of

105
00:03:47,400 --> 00:03:48,480
threat and vulnerability management

106
00:03:48,480 --> 00:03:50,700
reports to ciso there and then

107
00:03:50,700 --> 00:03:52,620
eventually I landed at mandiant that was

108
00:03:52,620 --> 00:03:54,720
my most previous role

109
00:03:54,720 --> 00:03:56,159
um was there about four and a half years

110
00:03:56,159 --> 00:03:58,799
and a principal consultant and now I'm

111
00:03:58,799 --> 00:04:00,299
on the Xbox thread adversary simulation

112
00:04:00,299 --> 00:04:01,920
team where I do two to six month long

113
00:04:01,920 --> 00:04:05,459
red teams um and uh you know focus on

114
00:04:05,459 --> 00:04:06,840
self and all that

115
00:04:06,840 --> 00:04:08,760
so we'll talk a little about Windows

116
00:04:08,760 --> 00:04:10,379
features um primarily we're going to

117
00:04:10,379 --> 00:04:13,439
focus on is deal with side loading

118
00:04:13,439 --> 00:04:15,420
um so this is the the miter text there's

119
00:04:15,420 --> 00:04:18,060
a little more in the miter attack page

120
00:04:18,060 --> 00:04:20,720
and it's minor

121
00:04:20,720 --> 00:04:22,860
t1574.002 and I'm sure everyone else has

122
00:04:22,860 --> 00:04:24,780
that memorized right

123
00:04:24,780 --> 00:04:26,639
um I always have to look it up but

124
00:04:26,639 --> 00:04:28,160
basically it's taking advantage of

125
00:04:28,160 --> 00:04:30,300
advantage of search order in order to

126
00:04:30,300 --> 00:04:31,800
load a deal

127
00:04:31,800 --> 00:04:34,259
um and why this is advantageous to us is

128
00:04:34,259 --> 00:04:36,419
reputation reputation is is everything

129
00:04:36,419 --> 00:04:38,580
when we're trying to get a beacon or

130
00:04:38,580 --> 00:04:41,520
execute our malware right and so if we

131
00:04:41,520 --> 00:04:44,100
can use something like Ms paint to load

132
00:04:44,100 --> 00:04:46,380
our malware versus an unsigned brand new

133
00:04:46,380 --> 00:04:49,500
executable that we have it's uh it's a

134
00:04:49,500 --> 00:04:51,479
lot better than just having something

135
00:04:51,479 --> 00:04:53,880
with no reputation so that's kind of the

136
00:04:53,880 --> 00:04:55,979
idea behind it this is kind of

137
00:04:55,979 --> 00:04:57,960
Microsoft's stance on on dll side

138
00:04:57,960 --> 00:04:59,940
loading um they wrote this blog post

139
00:04:59,940 --> 00:05:02,940
about triaging one of these

140
00:05:02,940 --> 00:05:04,320
um and they basically say it's a feature

141
00:05:04,320 --> 00:05:05,639
not a bug

142
00:05:05,639 --> 00:05:07,560
um this is a quote from that blog post

143
00:05:07,560 --> 00:05:09,360
it's actually a fantastic blog post from

144
00:05:09,360 --> 00:05:10,500
them

145
00:05:10,500 --> 00:05:13,979
um but uh it's kind of insane main

146
00:05:13,979 --> 00:05:16,740
um that they think you know this is the

147
00:05:16,740 --> 00:05:18,840
way things should work

148
00:05:18,840 --> 00:05:19,620
um

149
00:05:19,620 --> 00:05:20,940
so they talk about the yellow search

150
00:05:20,940 --> 00:05:23,280
order a lot and this is the order that

151
00:05:23,280 --> 00:05:25,620
it goes in where it's the directory from

152
00:05:25,620 --> 00:05:27,060
which the application is loaded and

153
00:05:27,060 --> 00:05:29,280
that's primarily what I want everyone to

154
00:05:29,280 --> 00:05:31,680
understand and focus on today

155
00:05:31,680 --> 00:05:33,600
um we'll be doing some some live demos

156
00:05:33,600 --> 00:05:35,699
and identifying dll side loading live

157
00:05:35,699 --> 00:05:37,919
and then a bit of a story about an

158
00:05:37,919 --> 00:05:39,900
engagement I did recently where I

159
00:05:39,900 --> 00:05:41,940
successfully did use a zero day on an

160
00:05:41,940 --> 00:05:44,520
engagement technically speaking as long

161
00:05:44,520 --> 00:05:48,660
as F5 considers it's a vulnerability so

162
00:05:48,660 --> 00:05:49,979
it's really you're really at the mercy

163
00:05:49,979 --> 00:05:52,560
of vendors for dll side loading and if

164
00:05:52,560 --> 00:05:54,479
they will fix it or not and if they

165
00:05:54,479 --> 00:05:55,979
don't fix it then I'll just keep using

166
00:05:55,979 --> 00:05:58,740
it right on red teams so

167
00:05:58,740 --> 00:06:00,960
there is quite a search order is quite

168
00:06:00,960 --> 00:06:02,400
tricky however

169
00:06:02,400 --> 00:06:05,340
um generally speaking uh this is kind of

170
00:06:05,340 --> 00:06:07,440
what dll side loading looks like where

171
00:06:07,440 --> 00:06:08,940
that current directory that we're

172
00:06:08,940 --> 00:06:12,360
executing it from uh we have uh Ms paint

173
00:06:12,360 --> 00:06:15,360
and then msfted Dot dll and we're seeing

174
00:06:15,360 --> 00:06:17,940
a message box pop here so due to search

175
00:06:17,940 --> 00:06:20,400
order it loads our unsigned dll with Ms

176
00:06:20,400 --> 00:06:23,160
paint and this is just a message box but

177
00:06:23,160 --> 00:06:25,440
you can really do whatever you want

178
00:06:25,440 --> 00:06:27,120
um you know in the code

179
00:06:27,120 --> 00:06:30,900
so now uh we'll go into a bit of

180
00:06:30,900 --> 00:06:33,000
developer usage and basically it's a

181
00:06:33,000 --> 00:06:35,940
feature and not a bug so

182
00:06:35,940 --> 00:06:37,740
we'll go over that there's really two

183
00:06:37,740 --> 00:06:40,319
API calls that you have to pay attention

184
00:06:40,319 --> 00:06:44,160
to and we'll look at uh essentially how

185
00:06:44,160 --> 00:06:47,580
a developer would introduce this feature

186
00:06:47,580 --> 00:06:48,780
because that's that's not a

187
00:06:48,780 --> 00:06:50,460
vulnerability right

188
00:06:50,460 --> 00:06:52,680
um so we have load Library demo exe.c

189
00:06:52,680 --> 00:06:55,380
basically we have our Delo main or win

190
00:06:55,380 --> 00:06:57,120
main function

191
00:06:57,120 --> 00:06:59,660
oh

192
00:07:02,580 --> 00:07:05,359
I am yeah

193
00:07:05,520 --> 00:07:10,620
I can unplug and replug yeah

194
00:07:16,500 --> 00:07:19,860
oh I guess I'm not mirroring my bed

195
00:07:19,860 --> 00:07:23,340
that'll be give me one second to fix

196
00:07:23,340 --> 00:07:25,319
this apologies

197
00:07:25,319 --> 00:07:27,180
um but essentially what we're gonna go

198
00:07:27,180 --> 00:07:29,220
over is

199
00:07:29,220 --> 00:07:29,520
[Music]

200
00:07:29,520 --> 00:07:30,539
um

201
00:07:30,539 --> 00:07:32,220
how a developer would potentially

202
00:07:32,220 --> 00:07:34,199
introduce this this sort of feature

203
00:07:34,199 --> 00:07:35,940
right

204
00:07:35,940 --> 00:07:38,060
um

205
00:07:42,259 --> 00:07:45,840
all right cool we're back

206
00:07:45,840 --> 00:07:48,360
hopefully that's the only demo fail that

207
00:07:48,360 --> 00:07:50,220
we'll have is video problems but we'll

208
00:07:50,220 --> 00:07:51,539
see

209
00:07:51,539 --> 00:07:54,180
um so essentially

210
00:07:54,180 --> 00:07:56,099
if when we have an executable like this

211
00:07:56,099 --> 00:07:57,539
we'll have our win main function our

212
00:07:57,539 --> 00:08:00,599
main function uh within the program and

213
00:08:00,599 --> 00:08:03,240
essentially uh what happens is a

214
00:08:03,240 --> 00:08:06,479
developer calls calls load library on a

215
00:08:06,479 --> 00:08:07,520
dll

216
00:08:07,520 --> 00:08:11,039
and so there are uh optional parameters

217
00:08:11,039 --> 00:08:12,660
for this where you can limit search

218
00:08:12,660 --> 00:08:14,400
order and say only load this from system

219
00:08:14,400 --> 00:08:16,919
32 and that would be the proper way to

220
00:08:16,919 --> 00:08:18,840
implement this as a developer if you're

221
00:08:18,840 --> 00:08:20,819
writing a program

222
00:08:20,819 --> 00:08:23,520
um and so then after that we have git

223
00:08:23,520 --> 00:08:25,319
proc address which is really just the

224
00:08:25,319 --> 00:08:28,319
export in the dll so if we were to go

225
00:08:28,319 --> 00:08:29,879
over to

226
00:08:29,879 --> 00:08:32,458
um Jill export side load we see we have

227
00:08:32,458 --> 00:08:35,039
this export of demo here and just

228
00:08:35,039 --> 00:08:36,958
popping a message box and we can see

229
00:08:36,958 --> 00:08:39,539
inside of dll main as well

230
00:08:39,539 --> 00:08:41,820
so I already have this compiled

231
00:08:41,820 --> 00:08:45,360
um and we could compile it but uh

232
00:08:45,360 --> 00:08:47,459
basically we'll just run dev.exe here

233
00:08:47,459 --> 00:08:49,140
and then we're going to see this where

234
00:08:49,140 --> 00:08:51,180
dll main is called like we just saw in

235
00:08:51,180 --> 00:08:53,220
the code popping that message box and

236
00:08:53,220 --> 00:08:55,920
then we have demo export called

237
00:08:55,920 --> 00:08:58,440
um so in general this is what we're

238
00:08:58,440 --> 00:09:00,660
looking for if we have just load library

239
00:09:00,660 --> 00:09:04,560
and no git proc address after it in a

240
00:09:04,560 --> 00:09:07,500
binary like Ms paint which we'll see in

241
00:09:07,500 --> 00:09:10,440
another demo then uh just load Library

242
00:09:10,440 --> 00:09:12,300
means just dll main that's the only

243
00:09:12,300 --> 00:09:13,680
place you're going to be able to execute

244
00:09:13,680 --> 00:09:16,019
code from I need to structure your dll

245
00:09:16,019 --> 00:09:18,360
accordingly if there's an export that's

246
00:09:18,360 --> 00:09:20,820
better because of loader lock within dll

247
00:09:20,820 --> 00:09:22,800
main there are limitations of what code

248
00:09:22,800 --> 00:09:25,019
you can and can't execute within dll

249
00:09:25,019 --> 00:09:27,660
main so if you find one that loads in

250
00:09:27,660 --> 00:09:29,339
export which is that git proc address

251
00:09:29,339 --> 00:09:31,980
that will be the name of the export

252
00:09:31,980 --> 00:09:34,260
um it's it's much better and less

253
00:09:34,260 --> 00:09:36,120
complex to get your your shell code to

254
00:09:36,120 --> 00:09:38,279
execute so that's just something to keep

255
00:09:38,279 --> 00:09:39,420
in mind

256
00:09:39,420 --> 00:09:42,360
and uh

257
00:09:42,360 --> 00:09:44,580
basically you know uh you find out it's

258
00:09:44,580 --> 00:09:46,380
a feature and not a bug

259
00:09:46,380 --> 00:09:47,820
so now we'll go through the process of

260
00:09:47,820 --> 00:09:49,800
manually identifying dll side loading

261
00:09:49,800 --> 00:09:51,600
within Ms paint

262
00:09:51,600 --> 00:09:53,880
um and I like using Ms paint as an

263
00:09:53,880 --> 00:09:55,560
example just because I think it's

264
00:09:55,560 --> 00:09:57,959
hilarious that you can use it to execute

265
00:09:57,959 --> 00:09:59,760
malware right

266
00:09:59,760 --> 00:10:01,080
um

267
00:10:01,080 --> 00:10:05,120
so just give me one second

268
00:10:12,600 --> 00:10:15,779
and we'll go ahead and open up Ms paint

269
00:10:15,779 --> 00:10:18,120
in a program called API monitor what API

270
00:10:18,120 --> 00:10:19,800
monitor does is really just instruments

271
00:10:19,800 --> 00:10:21,540
so that we can see the different Windows

272
00:10:21,540 --> 00:10:24,000
API calls that are happening right

273
00:10:24,000 --> 00:10:26,100
um so I guarantee everyone in this room

274
00:10:26,100 --> 00:10:29,279
can identify this and I have a dll there

275
00:10:29,279 --> 00:10:32,700
so we saw it load I should probably

276
00:10:32,700 --> 00:10:37,080
delete that and redo it but that's okay

277
00:10:37,080 --> 00:10:38,880
so it finished executing we're just

278
00:10:38,880 --> 00:10:41,880
going to go to modules and my resolution

279
00:10:41,880 --> 00:10:44,760
is not great here

280
00:10:44,760 --> 00:10:47,279
um so just give me a second to actually

281
00:10:47,279 --> 00:10:50,279
find Ms paint.exe I'm assuming you guys

282
00:10:50,279 --> 00:10:52,800
are seeing the same thing as me with it

283
00:10:52,800 --> 00:10:54,000
being

284
00:10:54,000 --> 00:10:56,279
kind of jumbled

285
00:10:56,279 --> 00:10:57,300
um

286
00:10:57,300 --> 00:10:59,279
that's okay we'll just go to to here

287
00:10:59,279 --> 00:11:01,320
usually it's a little easier to actually

288
00:11:01,320 --> 00:11:03,839
go into mspaint.exe versus another dll

289
00:11:03,839 --> 00:11:04,920
because there's going to be a lot of

290
00:11:04,920 --> 00:11:06,600
other stuff happening

291
00:11:06,600 --> 00:11:09,420
um related to Windows internals and on

292
00:11:09,420 --> 00:11:11,959
the side you can see there's API filter

293
00:11:11,959 --> 00:11:14,279
which basically I just checked all the

294
00:11:14,279 --> 00:11:15,959
boxes so if you don't know what you're

295
00:11:15,959 --> 00:11:18,240
doing you just download API monitor you

296
00:11:18,240 --> 00:11:19,500
check all these boxes and you're going

297
00:11:19,500 --> 00:11:20,760
to start it's going to instrument every

298
00:11:20,760 --> 00:11:23,040
single different Windows API call that

299
00:11:23,040 --> 00:11:25,200
it can that has definitions for

300
00:11:25,200 --> 00:11:27,300
essentially so

301
00:11:27,300 --> 00:11:27,959
um

302
00:11:27,959 --> 00:11:30,600
if we search for low Library we're going

303
00:11:30,600 --> 00:11:32,339
to see a lot of this

304
00:11:32,339 --> 00:11:35,279
um because I'm not actually within the

305
00:11:35,279 --> 00:11:38,519
MS paint thread oh I accidentally just

306
00:11:38,519 --> 00:11:40,800
clicked on it and found the the thread

307
00:11:40,800 --> 00:11:42,180
for it so

308
00:11:42,180 --> 00:11:44,760
um essentially uh we do load Library we

309
00:11:44,760 --> 00:11:47,279
see this GDI Plus

310
00:11:47,279 --> 00:11:48,800
and then we see

311
00:11:48,800 --> 00:11:52,980
msfted.dll right so we don't see any get

312
00:11:52,980 --> 00:11:54,839
proc address so that means we can only

313
00:11:54,839 --> 00:11:57,480
execute code within dll main with a dll

314
00:11:57,480 --> 00:11:59,060
name msft

315
00:11:59,060 --> 00:12:02,220
msfted dot dll in the same directory as

316
00:12:02,220 --> 00:12:03,360
Ms paint

317
00:12:03,360 --> 00:12:05,220
so we do have

318
00:12:05,220 --> 00:12:08,220
um a dll here and the same directory and

319
00:12:08,220 --> 00:12:10,680
I'll show you the code behind it

320
00:12:10,680 --> 00:12:13,740
um you can see dll main side load where

321
00:12:13,740 --> 00:12:15,720
similar this is literally a definition

322
00:12:15,720 --> 00:12:18,540
this this pool win API dll main this is

323
00:12:18,540 --> 00:12:20,100
straight from msdn straight from

324
00:12:20,100 --> 00:12:22,440
Microsoft and then we just add in a

325
00:12:22,440 --> 00:12:24,060
message box here

326
00:12:24,060 --> 00:12:26,519
so if we run Ms paint we should see dll

327
00:12:26,519 --> 00:12:28,740
main side load successful

328
00:12:28,740 --> 00:12:30,180
and this could be a double click you

329
00:12:30,180 --> 00:12:31,560
don't have to do this from command line

330
00:12:31,560 --> 00:12:33,060
so generally speaking we're doing this

331
00:12:33,060 --> 00:12:35,880
on engagements we either package this in

332
00:12:35,880 --> 00:12:38,040
like an encrypted zip or within an ISO

333
00:12:38,040 --> 00:12:40,800
file and then it's two it would be two

334
00:12:40,800 --> 00:12:43,740
user double clicks to get our Beacon or

335
00:12:43,740 --> 00:12:46,620
get our malware executed on the system

336
00:12:46,620 --> 00:12:48,420
is this this is making sense to everyone

337
00:12:48,420 --> 00:12:51,860
so far are we all on the same page

338
00:12:58,980 --> 00:13:03,060
correct it's looking for uh msfted.dll

339
00:13:03,060 --> 00:13:05,519
and I'll show you uh

340
00:13:05,519 --> 00:13:08,519
msfted.dll

341
00:13:11,880 --> 00:13:14,639
is actually in system 32. and so if we

342
00:13:14,639 --> 00:13:16,680
go back to our slides where

343
00:13:16,680 --> 00:13:19,079
um Microsoft talks about dll search

344
00:13:19,079 --> 00:13:22,079
order and how that happens it searches

345
00:13:22,079 --> 00:13:24,240
for the it for that dll and the current

346
00:13:24,240 --> 00:13:25,800
directory first

347
00:13:25,800 --> 00:13:27,720
now like I said before there are

348
00:13:27,720 --> 00:13:29,279
optional parameters for the library

349
00:13:29,279 --> 00:13:31,320
where you can limit to only search in

350
00:13:31,320 --> 00:13:34,200
system 32 and change the way it's going

351
00:13:34,200 --> 00:13:37,380
to do search order essentially so it's

352
00:13:37,380 --> 00:13:40,440
very important if you are doing uh

353
00:13:40,440 --> 00:13:42,420
Windows development and creating

354
00:13:42,420 --> 00:13:45,120
executables and you sign it by your

355
00:13:45,120 --> 00:13:48,000
company to limit this search order if

356
00:13:48,000 --> 00:13:49,320
you're using

357
00:13:49,320 --> 00:13:51,959
um some native API call from Microsoft

358
00:13:51,959 --> 00:13:53,760
so hopefully that makes sense and that

359
00:13:53,760 --> 00:13:55,980
answers your question

360
00:13:55,980 --> 00:13:56,940
um

361
00:13:56,940 --> 00:13:59,880
so um like I said my talk is mostly live

362
00:13:59,880 --> 00:14:01,920
demos um of just kind of explaining and

363
00:14:01,920 --> 00:14:03,120
making sure we're all on the same page

364
00:14:03,120 --> 00:14:04,920
and we all understand this and raising

365
00:14:04,920 --> 00:14:06,959
awareness about this topic

366
00:14:06,959 --> 00:14:08,720
um because it's really the only

367
00:14:08,720 --> 00:14:11,519
effective preventative measure for this

368
00:14:11,519 --> 00:14:15,240
would be doing application control or

369
00:14:15,240 --> 00:14:17,160
application allow listing and only

370
00:14:17,160 --> 00:14:19,079
allowing signed dlls on your system

371
00:14:19,079 --> 00:14:20,700
which is a lot easier said than done

372
00:14:20,700 --> 00:14:24,000
I've seen it twice in my 10 years of

373
00:14:24,000 --> 00:14:25,740
doing pen testing and red teaming yes

374
00:14:25,740 --> 00:14:30,500
sir okay this is this is uh

375
00:14:31,440 --> 00:14:34,440
so what a I or 80 actually

376
00:14:34,440 --> 00:14:37,200
uh no not not at all because uh you know

377
00:14:37,200 --> 00:14:39,959
uh Ms paint it is signed it's reputable

378
00:14:39,959 --> 00:14:41,820
it's been around for so many years I

379
00:14:41,820 --> 00:14:43,019
don't even know when Ms paint was

380
00:14:43,019 --> 00:14:44,399
written but

381
00:14:44,399 --> 00:14:46,440
um I started using Windows in like

382
00:14:46,440 --> 00:14:48,959
Windows 3.1 and Ms paint existed back

383
00:14:48,959 --> 00:14:51,500
then right

384
00:14:55,980 --> 00:14:58,740
shouldn't it detect that yeah

385
00:14:58,740 --> 00:15:01,440
um so uh it depends on where you're

386
00:15:01,440 --> 00:15:03,060
doing it from right

387
00:15:03,060 --> 00:15:04,800
um I would say if you're just like doing

388
00:15:04,800 --> 00:15:07,680
it out of the downloads folder maybe it

389
00:15:07,680 --> 00:15:10,079
might detect it pending the AV or EDR

390
00:15:10,079 --> 00:15:12,420
product there are certain ones I don't

391
00:15:12,420 --> 00:15:14,279
want to name names

392
00:15:14,279 --> 00:15:16,740
um or have any affiliation with a

393
00:15:16,740 --> 00:15:18,420
specific EDR

394
00:15:18,420 --> 00:15:20,220
um you know I'm agnostic as a consultant

395
00:15:20,220 --> 00:15:22,740
but we'll go over dll side loading

396
00:15:22,740 --> 00:15:24,959
detections as well there's a blog post

397
00:15:24,959 --> 00:15:28,500
from John Dwyer from the X4 thread our

398
00:15:28,500 --> 00:15:33,180
X-Force uh blue or IR side and he did a

399
00:15:33,180 --> 00:15:35,279
kind of a sister or brother blog post to

400
00:15:35,279 --> 00:15:38,579
mine uh where he wrote a Powershell

401
00:15:38,579 --> 00:15:40,860
script that would detect DLo side

402
00:15:40,860 --> 00:15:43,380
loading or forensically identify it

403
00:15:43,380 --> 00:15:46,139
right this happened even if you deleted

404
00:15:46,139 --> 00:15:50,399
the dll in the exe it still does it and

405
00:15:50,399 --> 00:15:51,959
the the tricky part about the detection

406
00:15:51,959 --> 00:15:54,839
side here is um

407
00:15:54,839 --> 00:15:57,899
dlls actually aren't stored in shim

408
00:15:57,899 --> 00:16:00,540
cache so you have to parse the mft to

409
00:16:00,540 --> 00:16:02,880
actually get all the information that

410
00:16:02,880 --> 00:16:05,639
you would want if you're doing uh an

411
00:16:05,639 --> 00:16:06,899
instant response investigation

412
00:16:06,899 --> 00:16:09,060
performing forensics on a machine and

413
00:16:09,060 --> 00:16:11,399
trying to identify how the malware was

414
00:16:11,399 --> 00:16:13,260
executed and maybe you have some other

415
00:16:13,260 --> 00:16:15,060
information that tips you to that right

416
00:16:15,060 --> 00:16:17,160
but if you're just looking in general

417
00:16:17,160 --> 00:16:20,160
and wanted to run it then you may get a

418
00:16:20,160 --> 00:16:22,440
few false positives but generally the

419
00:16:22,440 --> 00:16:26,040
idea is looking for excuse me is looking

420
00:16:26,040 --> 00:16:29,579
for a binary from system 32 or a dll

421
00:16:29,579 --> 00:16:33,180
from system 32 that executed or loaded

422
00:16:33,180 --> 00:16:36,120
outside of system 32 right

423
00:16:36,120 --> 00:16:37,500
um so you'd think it would be like this

424
00:16:37,500 --> 00:16:40,259
really easy detection and you know the

425
00:16:40,259 --> 00:16:43,079
AI and the Machine learning would be

426
00:16:43,079 --> 00:16:44,699
pretty to it but there are other

427
00:16:44,699 --> 00:16:46,620
scenarios where that's not successful

428
00:16:46,620 --> 00:16:48,720
right you could have a vendor binary

429
00:16:48,720 --> 00:16:51,420
that's loading a vendor dll and not

430
00:16:51,420 --> 00:16:52,860
loading a Windows deal all that

431
00:16:52,860 --> 00:16:55,199
originates from system 32. and then

432
00:16:55,199 --> 00:16:57,120
we're in this really tricky spot where

433
00:16:57,120 --> 00:16:59,279
that might actually regularly execute

434
00:16:59,279 --> 00:17:01,320
out of app data as well and we're doing

435
00:17:01,320 --> 00:17:03,720
something very very normal there and

436
00:17:03,720 --> 00:17:05,520
even if they're doing like Cloud machine

437
00:17:05,520 --> 00:17:07,260
learning and all that and pulling all

438
00:17:07,260 --> 00:17:08,520
this data

439
00:17:08,520 --> 00:17:09,780
um that's going to be a very normal

440
00:17:09,780 --> 00:17:12,540
behavior so the whole idea here

441
00:17:12,540 --> 00:17:14,339
um when you're if you use it effectively

442
00:17:14,339 --> 00:17:15,599
you're kind of the needle in the

443
00:17:15,599 --> 00:17:17,400
haystack where people aren't it's going

444
00:17:17,400 --> 00:17:19,319
to be very difficult to detect in

445
00:17:19,319 --> 00:17:22,500
certain scenarios especially uh vendor

446
00:17:22,500 --> 00:17:25,140
sign binaries with vendor dlls maybe you

447
00:17:25,140 --> 00:17:26,339
identify

448
00:17:26,339 --> 00:17:28,319
um you know a certain VPN and usage and

449
00:17:28,319 --> 00:17:30,179
you download that endpoint inspection

450
00:17:30,179 --> 00:17:32,280
agent and you find a zero day which

451
00:17:32,280 --> 00:17:34,500
we're going to do later right

452
00:17:34,500 --> 00:17:37,860
um in this case it's not the The best

453
00:17:37,860 --> 00:17:40,200
scenario well like I was talking about

454
00:17:40,200 --> 00:17:42,840
with a vendor dll as well it is

455
00:17:42,840 --> 00:17:44,820
something that loads from system 32 so

456
00:17:44,820 --> 00:17:46,500
that detection logic would work

457
00:17:46,500 --> 00:17:47,760
successfully

458
00:17:47,760 --> 00:17:49,140
so hopefully that answers your question

459
00:17:49,140 --> 00:17:51,559
as well

460
00:18:02,900 --> 00:18:05,280
correct yeah

461
00:18:05,280 --> 00:18:07,620
um yeah if you limited it to sign dlls

462
00:18:07,620 --> 00:18:09,000
which

463
00:18:09,000 --> 00:18:10,980
um is actually what happened on this

464
00:18:10,980 --> 00:18:13,080
engagement of like I found a zero day

465
00:18:13,080 --> 00:18:15,120
and then it didn't work so it sounds

466
00:18:15,120 --> 00:18:17,160
like it's a nice full story of like

467
00:18:17,160 --> 00:18:19,200
coming together but in this particular

468
00:18:19,200 --> 00:18:22,440
scenario it was blocked because of that

469
00:18:22,440 --> 00:18:25,500
um and it really funnels tradecraft into

470
00:18:25,500 --> 00:18:26,820
law bins

471
00:18:26,820 --> 00:18:29,400
um and you have a very limited set of

472
00:18:29,400 --> 00:18:30,960
law bins that you can use in that type

473
00:18:30,960 --> 00:18:32,400
of scenario

474
00:18:32,400 --> 00:18:35,400
um I would say a lot of uh lateral

475
00:18:35,400 --> 00:18:38,640
movement things like that rely on dlls

476
00:18:38,640 --> 00:18:41,220
um any other questions before we move on

477
00:18:41,220 --> 00:18:46,760
to the automated version of that foreign

478
00:18:49,940 --> 00:18:53,640
side loading and Ms paint and so I was

479
00:18:53,640 --> 00:18:54,960
like well what if there's a way to

480
00:18:54,960 --> 00:18:57,240
automate this so

481
00:18:57,240 --> 00:18:59,580
um I worked with someone in the audience

482
00:18:59,580 --> 00:19:02,280
uh Ruben from our team

483
00:19:02,280 --> 00:19:05,940
um fuzzy sack on on Twitter he uh helped

484
00:19:05,940 --> 00:19:10,559
me write a tool that uses Frida which is

485
00:19:10,559 --> 00:19:12,240
um generally like if how many people

486
00:19:12,240 --> 00:19:14,520
have heard of Frida before

487
00:19:14,520 --> 00:19:16,620
okay good amount so generally you're

488
00:19:16,620 --> 00:19:18,059
probably familiar with Frida for like

489
00:19:18,059 --> 00:19:20,400
mobile application testing right

490
00:19:20,400 --> 00:19:22,380
um well it's not just limited to that

491
00:19:22,380 --> 00:19:25,020
you you can use it for uh Windows things

492
00:19:25,020 --> 00:19:27,600
like this to instrument API calls like

493
00:19:27,600 --> 00:19:29,640
you would and mobile app testing to

494
00:19:29,640 --> 00:19:32,760
bypass cert pinning or something similar

495
00:19:32,760 --> 00:19:34,080
to that nature right that's kind of like

496
00:19:34,080 --> 00:19:36,120
the classic example where Frida would

497
00:19:36,120 --> 00:19:38,039
get introduced

498
00:19:38,039 --> 00:19:38,820
um

499
00:19:38,820 --> 00:19:41,400
however you can use it on Windows as

500
00:19:41,400 --> 00:19:42,539
well

501
00:19:42,539 --> 00:19:44,220
um so this is Windows feature Hunter

502
00:19:44,220 --> 00:19:47,460
it's not just it's not limited to just

503
00:19:47,460 --> 00:19:50,220
dll side loading and please let me know

504
00:19:50,220 --> 00:19:52,020
if the text is not big enough I can make

505
00:19:52,020 --> 00:19:53,520
it bigger

506
00:19:53,520 --> 00:19:55,620
um but uh

507
00:19:55,620 --> 00:19:59,340
let's go ahead and copy Ms paint so

508
00:19:59,340 --> 00:20:03,299
we'll use the same example

509
00:20:03,780 --> 00:20:06,419
and then we'll go ahead and there's a

510
00:20:06,419 --> 00:20:08,840
help menu in in Wiki and stuff as well

511
00:20:08,840 --> 00:20:10,980
but basically we're just gonna give it

512
00:20:10,980 --> 00:20:12,720
our Target which will just be Ms paint

513
00:20:12,720 --> 00:20:14,760
in the same directory and the mode will

514
00:20:14,760 --> 00:20:16,020
be dll

515
00:20:16,020 --> 00:20:18,559
foreign

516
00:20:30,020 --> 00:20:33,059
me making it bigger kind of

517
00:20:33,059 --> 00:20:35,940
fumbled some things there so let it run

518
00:20:35,940 --> 00:20:37,140
through again so everyone can see

519
00:20:37,140 --> 00:20:38,760
virtually as well

520
00:20:38,760 --> 00:20:40,320
but right now it's essentially just

521
00:20:40,320 --> 00:20:42,000
running Ms paint it's doing the same

522
00:20:42,000 --> 00:20:43,919
thing that API monitor is doing it's

523
00:20:43,919 --> 00:20:46,799
looking for these low Library calls and

524
00:20:46,799 --> 00:20:49,080
so here we get the raw log it also

525
00:20:49,080 --> 00:20:51,360
writes a CSV that you can open up and go

526
00:20:51,360 --> 00:20:53,400
look at it so if you wanted to run it

527
00:20:53,400 --> 00:20:55,620
against like all system 32 or every like

528
00:20:55,620 --> 00:20:57,780
Microsoft sign binary or vendor sign

529
00:20:57,780 --> 00:20:59,880
binary against it it does scale like

530
00:20:59,880 --> 00:21:01,559
that as well

531
00:21:01,559 --> 00:21:03,900
um so here you see two different calls

532
00:21:03,900 --> 00:21:05,580
and it's basically telling you this is

533
00:21:05,580 --> 00:21:07,500
potentially dll main side loading which

534
00:21:07,500 --> 00:21:08,760
obviously we already know because we

535
00:21:08,760 --> 00:21:11,100
identified it manually but it really

536
00:21:11,100 --> 00:21:12,780
limits the amount of time that we have

537
00:21:12,780 --> 00:21:14,460
to spend on these things especially say

538
00:21:14,460 --> 00:21:17,160
if you find some like AWS bucket and

539
00:21:17,160 --> 00:21:19,860
there's all these binaries at a client

540
00:21:19,860 --> 00:21:21,539
um and you have hundreds of binaries

541
00:21:21,539 --> 00:21:23,340
doing that manually is quite tedious

542
00:21:23,340 --> 00:21:24,780
right

543
00:21:24,780 --> 00:21:27,840
um it was probably later in 2019 you

544
00:21:27,840 --> 00:21:29,760
know I was obsessing over like how would

545
00:21:29,760 --> 00:21:31,860
I use the zero day I literally opened

546
00:21:31,860 --> 00:21:34,080
every single binary in system 32 an API

547
00:21:34,080 --> 00:21:36,960
monitor right pretty painful it took me

548
00:21:36,960 --> 00:21:39,780
days right to go through through and I

549
00:21:39,780 --> 00:21:41,940
was recording each one so whenever I

550
00:21:41,940 --> 00:21:44,039
came over to the app Sim team I worked

551
00:21:44,039 --> 00:21:45,720
with Ruben to have an automated solution

552
00:21:45,720 --> 00:21:48,120
for this where we could you know

553
00:21:48,120 --> 00:21:50,520
identify these rapidly

554
00:21:50,520 --> 00:21:52,320
um and you know use zero days on

555
00:21:52,320 --> 00:21:53,940
engagements

556
00:21:53,940 --> 00:21:55,020
so hopefully that makes sense to

557
00:21:55,020 --> 00:21:56,220
everyone

558
00:21:56,220 --> 00:21:58,620
um just uh the automated version of it

559
00:21:58,620 --> 00:22:00,900
where you know I spent a lot of time

560
00:22:00,900 --> 00:22:03,600
doing it uh and so

561
00:22:03,600 --> 00:22:05,100
now I'll go over detecting the yellow

562
00:22:05,100 --> 00:22:07,799
side loading um I know I touched on this

563
00:22:07,799 --> 00:22:09,240
briefly

564
00:22:09,240 --> 00:22:11,460
um the gentleman over here uh you know

565
00:22:11,460 --> 00:22:13,320
asked a great question about it with

566
00:22:13,320 --> 00:22:17,100
antivirus and EDR and you know won't the

567
00:22:17,100 --> 00:22:19,559
the AI or learning the machines catch it

568
00:22:19,559 --> 00:22:20,760
right

569
00:22:20,760 --> 00:22:22,200
um and and the answer really it just

570
00:22:22,200 --> 00:22:24,299
depends right so

571
00:22:24,299 --> 00:22:26,340
um if so in the case of like Ms paint

572
00:22:26,340 --> 00:22:29,159
the example that we've been using if we

573
00:22:29,159 --> 00:22:30,900
executed that out of like our download

574
00:22:30,900 --> 00:22:33,659
folder then 100 like

575
00:22:33,659 --> 00:22:35,580
that will probably be detected by

576
00:22:35,580 --> 00:22:37,620
certain edrs I know which ones it will

577
00:22:37,620 --> 00:22:39,480
be detected by but again I don't want to

578
00:22:39,480 --> 00:22:40,500
name names

579
00:22:40,500 --> 00:22:43,620
um in terms of eer vendors uh while I'm

580
00:22:43,620 --> 00:22:46,559
being recorded So if you come uh talk to

581
00:22:46,559 --> 00:22:48,000
me after the talk I'll tell you which

582
00:22:48,000 --> 00:22:50,039
ones are pretty good at detecting dll

583
00:22:50,039 --> 00:22:52,440
side loadings and which ones aren't

584
00:22:52,440 --> 00:22:54,840
um but essentially that's that's the

585
00:22:54,840 --> 00:22:58,919
idea if a binary from system 32 or a dll

586
00:22:58,919 --> 00:23:02,220
from system 32 executes or loads outside

587
00:23:02,220 --> 00:23:05,940
of system 32 it's probably bad but there

588
00:23:05,940 --> 00:23:07,620
are exceptions to it right just like

589
00:23:07,620 --> 00:23:09,840
everything else you really have to

590
00:23:09,840 --> 00:23:11,880
Baseline everything and that's where it

591
00:23:11,880 --> 00:23:13,799
gets really tricky like especially in

592
00:23:13,799 --> 00:23:16,380
like program files directories

593
00:23:16,380 --> 00:23:18,299
um it gets really complicated to

594
00:23:18,299 --> 00:23:20,580
actually detect that reliably

595
00:23:20,580 --> 00:23:21,900
so

596
00:23:21,900 --> 00:23:25,799
um we're going to use John Dwyer's

597
00:23:25,799 --> 00:23:28,740
tool and I will stay in this terminal so

598
00:23:28,740 --> 00:23:31,980
everyone can still see it but basically

599
00:23:31,980 --> 00:23:35,460
he has a Power Fill script that he

600
00:23:35,460 --> 00:23:37,320
released and we're just going to point

601
00:23:37,320 --> 00:23:40,140
it at that wfh directory

602
00:23:40,140 --> 00:23:42,600
um that we just executed Ms paint out of

603
00:23:42,600 --> 00:23:46,700
actually we'll point it at wwfh

604
00:23:46,700 --> 00:23:50,100
and uh we should see that Ms paint

605
00:23:50,100 --> 00:23:52,260
execution and potentially the whole

606
00:23:52,260 --> 00:23:54,720
developer usage demo as well

607
00:23:54,720 --> 00:23:56,460
so it's collecting all these user land

608
00:23:56,460 --> 00:23:57,900
dlls

609
00:23:57,900 --> 00:23:59,940
um basically comparing and seeing like

610
00:23:59,940 --> 00:24:03,840
did a dll from system 32 execute outside

611
00:24:03,840 --> 00:24:07,260
or get loaded outside of system 32.

612
00:24:07,260 --> 00:24:10,500
um so it creates a a folder and writes

613
00:24:10,500 --> 00:24:14,880
multiple CSV files and so if we open

614
00:24:14,880 --> 00:24:17,400
this up

615
00:24:17,400 --> 00:24:20,700
we should see Ms paint with msft edit in

616
00:24:20,700 --> 00:24:22,880
it

617
00:24:24,539 --> 00:24:27,740
six fan these out

618
00:24:28,559 --> 00:24:31,500
and so we can see the location

619
00:24:31,500 --> 00:24:35,340
as well as the side load the hash and if

620
00:24:35,340 --> 00:24:36,900
it's signed or not right and so this

621
00:24:36,900 --> 00:24:38,280
helps drill that drill down a little

622
00:24:38,280 --> 00:24:40,799
more like if it were the real msft edit

623
00:24:40,799 --> 00:24:42,059
it's going to be signed by Microsoft

624
00:24:42,059 --> 00:24:44,039
right where in this case like we just

625
00:24:44,039 --> 00:24:45,900
created this dll

626
00:24:45,900 --> 00:24:47,940
um and it loads it arbitrarily it

627
00:24:47,940 --> 00:24:50,520
doesn't care about reputation in terms

628
00:24:50,520 --> 00:24:51,960
of dlls

629
00:24:51,960 --> 00:24:53,100
so hopefully that makes sense to

630
00:24:53,100 --> 00:24:54,960
everyone

631
00:24:54,960 --> 00:24:55,980
um

632
00:24:55,980 --> 00:24:58,380
detecting dll side loading is is very

633
00:24:58,380 --> 00:24:59,700
difficult right

634
00:24:59,700 --> 00:25:02,100
um as I mentioned it really just depends

635
00:25:02,100 --> 00:25:03,720
on the scenario and how you're using it

636
00:25:03,720 --> 00:25:06,059
and so

637
00:25:06,059 --> 00:25:08,460
um hopefully I've conveyed how you can

638
00:25:08,460 --> 00:25:11,340
use it effectively so for example the

639
00:25:11,340 --> 00:25:13,500
like finding a vendor binary that loads

640
00:25:13,500 --> 00:25:16,980
a vendor dll that is also signed uh is

641
00:25:16,980 --> 00:25:19,500
your best scenario where if you want to

642
00:25:19,500 --> 00:25:21,419
evade detections it's going to be quite

643
00:25:21,419 --> 00:25:23,880
difficult especially I would say uh

644
00:25:23,880 --> 00:25:25,799
there's a treasure Trove of them in app

645
00:25:25,799 --> 00:25:30,120
data directories local or roaming and if

646
00:25:30,120 --> 00:25:33,059
you run wfh against those you'll find a

647
00:25:33,059 --> 00:25:35,580
lot of different side loads but in

648
00:25:35,580 --> 00:25:37,919
particular if you can find side loads

649
00:25:37,919 --> 00:25:41,400
that libraries that are written by the

650
00:25:41,400 --> 00:25:44,039
vendor themselves that's the best way

651
00:25:44,039 --> 00:25:45,539
you can use dll side loading really

652
00:25:45,539 --> 00:25:47,179
because it's going to be even trickier

653
00:25:47,179 --> 00:25:50,580
for EDR vendors and machine learning and

654
00:25:50,580 --> 00:25:53,279
all that and like you may see in the

655
00:25:53,279 --> 00:25:55,020
machine learning model within the EDR

656
00:25:55,020 --> 00:25:57,240
interface that the global prevalence of

657
00:25:57,240 --> 00:25:59,820
this executable is very high right so it

658
00:25:59,820 --> 00:26:01,799
has a lot of reputation that's what we

659
00:26:01,799 --> 00:26:03,059
want we're just trying to use something

660
00:26:03,059 --> 00:26:07,320
reputable to load our malware

661
00:26:07,320 --> 00:26:09,059
um so now

662
00:26:09,059 --> 00:26:10,080
um

663
00:26:10,080 --> 00:26:14,220
we are going to find one live

664
00:26:14,220 --> 00:26:15,539
um

665
00:26:15,539 --> 00:26:17,400
but we're just going to do it in the the

666
00:26:17,400 --> 00:26:19,559
real world example I could show you one

667
00:26:19,559 --> 00:26:22,200
another one from like system 32 or or

668
00:26:22,200 --> 00:26:24,059
something of that nature but I think the

669
00:26:24,059 --> 00:26:26,520
real world example really sells it a

670
00:26:26,520 --> 00:26:27,900
little more

671
00:26:27,900 --> 00:26:32,520
um so essentially I was doing a two to

672
00:26:32,520 --> 00:26:35,340
three month long red team uh recently

673
00:26:35,340 --> 00:26:38,880
and we were in the the Recon phase

674
00:26:38,880 --> 00:26:40,860
um so we were doing a bunch of passive

675
00:26:40,860 --> 00:26:43,260
reconnaissance and then event eventually

676
00:26:43,260 --> 00:26:47,159
active we had you know their IP spaces

677
00:26:47,159 --> 00:26:50,940
um we had done DNS uh Recon and we

678
00:26:50,940 --> 00:26:53,039
started taking screenshots of all of the

679
00:26:53,039 --> 00:26:55,260
sites that were out there and some of

680
00:26:55,260 --> 00:26:57,659
them browsing some of them found the

681
00:26:57,659 --> 00:27:01,940
client's uh VPN portal and it was F5 VPN

682
00:27:01,940 --> 00:27:04,500
and immediately I'm prompted to download

683
00:27:04,500 --> 00:27:07,020
the endpoint inspection agent I was like

684
00:27:07,020 --> 00:27:09,600
oh cool this is exactly what I want and

685
00:27:09,600 --> 00:27:11,580
so it was a cab file that contained many

686
00:27:11,580 --> 00:27:13,380
different cab files and I extracted

687
00:27:13,380 --> 00:27:16,260
every different exe out of it and ran

688
00:27:16,260 --> 00:27:19,500
wfh against it and to my uh surprise

689
00:27:19,500 --> 00:27:22,380
there's nothing right

690
00:27:22,380 --> 00:27:24,419
um it turns out there was a bug in wfh

691
00:27:24,419 --> 00:27:27,900
where I wasn't accounting uh Ruben and I

692
00:27:27,900 --> 00:27:30,419
discussed this it's it's quite tricky

693
00:27:30,419 --> 00:27:33,419
um we learned a few things uh about how

694
00:27:33,419 --> 00:27:35,640
well they're doing things but basically

695
00:27:35,640 --> 00:27:37,559
wasn't hooking enough of the low Library

696
00:27:37,559 --> 00:27:38,700
calls because there's many different

697
00:27:38,700 --> 00:27:40,200
versions of them some of them are for

698
00:27:40,200 --> 00:27:42,120
Unicode and things like that there's

699
00:27:42,120 --> 00:27:45,900
like exw EXA so on and so forth and

700
00:27:45,900 --> 00:27:49,200
there is like a source of Truth to that

701
00:27:49,200 --> 00:27:51,900
um but uh yeah it was it was a Miss on

702
00:27:51,900 --> 00:27:54,539
my part but I was like uh you know maybe

703
00:27:54,539 --> 00:27:56,760
the automation isn't working so I did

704
00:27:56,760 --> 00:27:59,400
open each one in API monitor just like I

705
00:27:59,400 --> 00:28:02,340
showed with Ms paint and eventually did

706
00:28:02,340 --> 00:28:05,360
find a side load in it that I will

707
00:28:05,360 --> 00:28:08,039
demonstrate to you guys live

708
00:28:08,039 --> 00:28:11,159
um I have fixed wfh to identify these in

709
00:28:11,159 --> 00:28:12,360
the future

710
00:28:12,360 --> 00:28:15,779
um so I think originally when I ran uh

711
00:28:15,779 --> 00:28:19,679
wfh against system 32 it was around like

712
00:28:19,679 --> 00:28:21,960
90 something results it's a little over

713
00:28:21,960 --> 00:28:24,600
a hundred now and then

714
00:28:24,600 --> 00:28:27,539
um not to tease but later this year I'll

715
00:28:27,539 --> 00:28:29,700
be releasing what I call the dried X

716
00:28:29,700 --> 00:28:32,520
version of wfh We're which jumps that

717
00:28:32,520 --> 00:28:35,840
number to around 960 out of system 32

718
00:28:35,840 --> 00:28:41,220
just by borrowing a trick from them

719
00:28:41,220 --> 00:28:44,039
so let me go ahead and go into the wfh

720
00:28:44,039 --> 00:28:47,700
directory and then we'll copy over

721
00:28:47,700 --> 00:28:49,559
sorry I'm not used to using this

722
00:28:49,559 --> 00:28:52,500
keyboard we'll copy

723
00:28:52,500 --> 00:28:56,159
F5 instance D over and I will go ahead

724
00:28:56,159 --> 00:28:59,940
and show you that it is signed by F5

725
00:28:59,940 --> 00:29:01,799
um

726
00:29:01,799 --> 00:29:03,720
just so you guys know I'm not like

727
00:29:03,720 --> 00:29:08,279
trying to bamboozle you or something uh

728
00:29:09,059 --> 00:29:12,240
so if we go to digital signatures we'll

729
00:29:12,240 --> 00:29:13,440
see

730
00:29:13,440 --> 00:29:15,539
uh

731
00:29:15,539 --> 00:29:17,279
maybe get authenticated signatures

732
00:29:17,279 --> 00:29:18,779
better

733
00:29:18,779 --> 00:29:20,840
um

734
00:29:23,760 --> 00:29:25,919
so you can see that it is signed um if

735
00:29:25,919 --> 00:29:27,419
we actually look at the signer of this

736
00:29:27,419 --> 00:29:30,419
it is signed by F5

737
00:29:30,419 --> 00:29:31,380
um

738
00:29:31,380 --> 00:29:34,860
but I guess for the sake of time uh I

739
00:29:34,860 --> 00:29:38,039
won't uh expand all options for git

740
00:29:38,039 --> 00:29:40,440
authentic code signature and it's hard

741
00:29:40,440 --> 00:29:42,960
to see in the Explorer GUI but it is

742
00:29:42,960 --> 00:29:44,100
signed by

743
00:29:44,100 --> 00:29:46,860
F5

744
00:29:46,860 --> 00:29:49,980
that F5 Networks Inc and you can see it

745
00:29:49,980 --> 00:29:51,659
right here right

746
00:29:51,659 --> 00:29:54,299
so it was signed in 2021

747
00:29:54,299 --> 00:29:56,820
very fresh very new

748
00:29:56,820 --> 00:29:57,600
um

749
00:29:57,600 --> 00:29:59,880
I don't think it's the latest version of

750
00:29:59,880 --> 00:30:01,919
this binary but it is a version of it

751
00:30:01,919 --> 00:30:05,580
and if we looked at it in API monitor

752
00:30:05,580 --> 00:30:07,919
you'll see that they were actually using

753
00:30:07,919 --> 00:30:09,419
the

754
00:30:09,419 --> 00:30:10,020
um

755
00:30:10,020 --> 00:30:11,880
you know only load this dll from system

756
00:30:11,880 --> 00:30:16,679
32 feature for most of the dlls that

757
00:30:16,679 --> 00:30:18,240
they're using for Microsoft and they

758
00:30:18,240 --> 00:30:20,820
just had one miss so that's all it takes

759
00:30:20,820 --> 00:30:22,799
is just like one miss of not doing that

760
00:30:22,799 --> 00:30:26,100
properly maybe you know it was a junior

761
00:30:26,100 --> 00:30:28,440
software engineer or something and they

762
00:30:28,440 --> 00:30:31,080
needed to put a new feature into it and

763
00:30:31,080 --> 00:30:33,960
they just did it so again we'll just use

764
00:30:33,960 --> 00:30:37,679
wfh and we'll point it at the F5 it's D

765
00:30:37,679 --> 00:30:41,100
binary and search for

766
00:30:41,100 --> 00:30:44,418
yellow side loading

767
00:30:46,260 --> 00:30:48,480
so freedom to do it is doing its thing

768
00:30:48,480 --> 00:30:50,520
it's instrumenting the windows API call

769
00:30:50,520 --> 00:30:52,440
so we know if load library or get proc

770
00:30:52,440 --> 00:30:53,640
address

771
00:30:53,640 --> 00:30:55,140
um is being called

772
00:30:55,140 --> 00:30:58,440
and here we can see we have WTS API

773
00:30:58,440 --> 00:31:02,100
32.dll that loaded out of system 32 and

774
00:31:02,100 --> 00:31:05,520
it called this uh WTS register session

775
00:31:05,520 --> 00:31:07,020
notification

776
00:31:07,020 --> 00:31:10,500
so as we saw previously

777
00:31:10,500 --> 00:31:15,020
if we go to our deal export side load

778
00:31:15,720 --> 00:31:18,360
to craft this the proper way we'll just

779
00:31:18,360 --> 00:31:21,480
go ahead and do a real hacker man thing

780
00:31:21,480 --> 00:31:24,720
here and copy paste that over

781
00:31:24,720 --> 00:31:27,779
and we'll make sure that uh

782
00:31:27,779 --> 00:31:29,279
we'll change this as well so we know

783
00:31:29,279 --> 00:31:31,260
what export is called

784
00:31:31,260 --> 00:31:34,679
and then we'll go ahead and craft a dll

785
00:31:34,679 --> 00:31:35,880
for this

786
00:31:35,880 --> 00:31:37,980
quickly

787
00:31:37,980 --> 00:31:40,100
um

788
00:31:45,240 --> 00:31:47,820
so our dual export side load and then we

789
00:31:47,820 --> 00:31:50,240
need to call it

790
00:31:50,240 --> 00:31:53,580
WTS API 32.dll

791
00:31:53,580 --> 00:31:55,980
so that's compiled now you can LS so

792
00:31:55,980 --> 00:31:58,320
we'll see it and then we'll grab that

793
00:31:58,320 --> 00:32:00,600
we'll go ahead and just throw it in the

794
00:32:00,600 --> 00:32:03,678
wfh directory

795
00:32:04,200 --> 00:32:07,260
and we'll just go into Explorer

796
00:32:07,260 --> 00:32:10,740
and go ahead and

797
00:32:10,740 --> 00:32:12,539
double click this

798
00:32:12,539 --> 00:32:14,880
actually I know exactly why this isn't

799
00:32:14,880 --> 00:32:17,279
working does anyone have an idea of why

800
00:32:17,279 --> 00:32:21,179
this just didn't work right like we

801
00:32:21,179 --> 00:32:24,179
found we saw the library we saw the

802
00:32:24,179 --> 00:32:26,220
export getting called I crafted the

803
00:32:26,220 --> 00:32:28,080
yellow appropriately does anyone have

804
00:32:28,080 --> 00:32:30,720
any ideas of what I did wrong to make

805
00:32:30,720 --> 00:32:34,279
sure that the two times

806
00:32:34,620 --> 00:32:36,960
they are in the same folder

807
00:32:36,960 --> 00:32:40,919
um if we go back to explore

808
00:32:40,919 --> 00:32:43,500
you can see it's there right and even if

809
00:32:43,500 --> 00:32:45,360
we opened up API monitor

810
00:32:45,360 --> 00:32:47,940
I would show you that it attempted to

811
00:32:47,940 --> 00:32:49,260
load that dll

812
00:32:49,260 --> 00:32:51,240
but the reason for it is I compiled it

813
00:32:51,240 --> 00:32:52,740
for 64-bit

814
00:32:52,740 --> 00:32:55,080
um because Ming I have 64 but Ming W in

815
00:32:55,080 --> 00:32:57,299
my path so

816
00:32:57,299 --> 00:32:59,640
I believe I do have

817
00:32:59,640 --> 00:33:01,760
uh

818
00:33:01,760 --> 00:33:05,360
32-bits main w

819
00:33:11,279 --> 00:33:15,539
ow this could have been G boss Plus

820
00:33:15,539 --> 00:33:20,880
um but we're going to have to sorry I

821
00:33:20,880 --> 00:33:23,279
didn't realize what directory I was in

822
00:33:23,279 --> 00:33:26,059
um so we'll just go to bin G plus plus

823
00:33:26,059 --> 00:33:29,700
and then we'll go ahead and uh compile

824
00:33:29,700 --> 00:33:32,760
that as a dll so it's shared and then

825
00:33:32,760 --> 00:33:38,360
the dll export side load and then

826
00:33:38,519 --> 00:33:41,039
we need the name so we'll output it to

827
00:33:41,039 --> 00:33:45,140
that WTS API 32.dll

828
00:33:46,500 --> 00:33:49,679
and then we'll go ahead and copy that

829
00:33:49,679 --> 00:33:52,799
into the wfh directory and now when we

830
00:33:52,799 --> 00:33:55,320
double click it there we go dll main

831
00:33:55,320 --> 00:33:56,700
called

832
00:33:56,700 --> 00:33:59,100
WTS registration session notification

833
00:33:59,100 --> 00:34:01,320
export called and there we go we just

834
00:34:01,320 --> 00:34:05,340
found a zero Day live if uh F5 would

835
00:34:05,340 --> 00:34:07,200
recognize it as a vulnerability so we're

836
00:34:07,200 --> 00:34:09,359
at the mercy of the vendor but uh you

837
00:34:09,359 --> 00:34:10,859
can kind of see like why this is

838
00:34:10,859 --> 00:34:12,839
dangerous you know

839
00:34:12,839 --> 00:34:14,339
um you know there's

840
00:34:14,339 --> 00:34:16,800
dll search order hijacking has been a

841
00:34:16,800 --> 00:34:18,960
known thing for a long time there's a

842
00:34:18,960 --> 00:34:20,460
lot of different ways that you can do it

843
00:34:20,460 --> 00:34:22,320
and if you're interested in it I would

844
00:34:22,320 --> 00:34:25,619
highly recommend going and reading about

845
00:34:25,619 --> 00:34:28,080
drydex's loader it's super interesting

846
00:34:28,080 --> 00:34:29,520
the way they do it they do it all in

847
00:34:29,520 --> 00:34:31,918
memory and essentially the way that it

848
00:34:31,918 --> 00:34:34,020
works is they look at the import address

849
00:34:34,020 --> 00:34:36,359
table of these exes instead of

850
00:34:36,359 --> 00:34:39,119
instrumenting uh the windows API calls

851
00:34:39,119 --> 00:34:42,060
like we're doing right and then you can

852
00:34:42,060 --> 00:34:44,399
also those also use search order right

853
00:34:44,399 --> 00:34:48,300
so any imported yellow you can also Dlow

854
00:34:48,300 --> 00:34:49,500
side load

855
00:34:49,500 --> 00:34:50,099
um

856
00:34:50,099 --> 00:34:52,739
if you want it's a lot easier said than

857
00:34:52,739 --> 00:34:55,020
done to automate that one

858
00:34:55,020 --> 00:34:58,380
um but uh uh it can be done

859
00:34:58,380 --> 00:35:00,480
um so right now you'd have to do like a

860
00:35:00,480 --> 00:35:01,920
very manual process I think maybe

861
00:35:01,920 --> 00:35:04,320
there's a couple tools uh out there for

862
00:35:04,320 --> 00:35:05,460
it

863
00:35:05,460 --> 00:35:08,460
um I can't remember who has one at the

864
00:35:08,460 --> 00:35:12,420
moment but uh it's not a new thing but

865
00:35:12,420 --> 00:35:14,400
it's something to pay attention to

866
00:35:14,400 --> 00:35:16,440
especially if you if you do red teaming

867
00:35:16,440 --> 00:35:18,420
then go check out drydex's loader

868
00:35:18,420 --> 00:35:19,619
because

869
00:35:19,619 --> 00:35:21,240
um they were doing some really really

870
00:35:21,240 --> 00:35:24,060
cool stuff uh even though they're a

871
00:35:24,060 --> 00:35:26,160
ransomware threat actor and we can learn

872
00:35:26,160 --> 00:35:27,300
from that

873
00:35:27,300 --> 00:35:29,460
foreign

874
00:35:29,460 --> 00:35:31,740
so I was like boom I use the zero day

875
00:35:31,740 --> 00:35:34,260
and then it was blocked because they had

876
00:35:34,260 --> 00:35:37,140
uh you know uh application control dll

877
00:35:37,140 --> 00:35:39,359
allow listing where I couldn't execute

878
00:35:39,359 --> 00:35:42,240
unsigned dlls and went over to the wall

879
00:35:42,240 --> 00:35:43,980
bins

880
00:35:43,980 --> 00:35:45,000
um

881
00:35:45,000 --> 00:35:46,460
so really if anyone has any questions

882
00:35:46,460 --> 00:35:48,660
I'm open

883
00:35:48,660 --> 00:35:50,460
um there's my my Discord and Twitter up

884
00:35:50,460 --> 00:35:53,880
there feel free to uh follow me or hit

885
00:35:53,880 --> 00:35:56,520
me up on Discord uh you know happy to

886
00:35:56,520 --> 00:35:58,320
collaborate and and share information

887
00:35:58,320 --> 00:36:01,500
about this and so I'll leave this slide

888
00:36:01,500 --> 00:36:03,540
up for questions and then I do have a

889
00:36:03,540 --> 00:36:05,339
references slide and I'll tweet out this

890
00:36:05,339 --> 00:36:07,980
deck uh after the talk

891
00:36:07,980 --> 00:36:10,619
yeah so you mentioned that you had you

892
00:36:10,619 --> 00:36:12,780
had gone through all the system 32 and

893
00:36:12,780 --> 00:36:15,180
found you said 900-ish right instances

894
00:36:15,180 --> 00:36:17,160
so if you guys kind of like built out a

895
00:36:17,160 --> 00:36:19,320
table of those opportunities for

896
00:36:19,320 --> 00:36:21,660
exploitation or

897
00:36:21,660 --> 00:36:23,119
yeah so

898
00:36:23,119 --> 00:36:27,599
sure sure yeah um so there is first I'll

899
00:36:27,599 --> 00:36:29,460
repeat your question

900
00:36:29,460 --> 00:36:32,940
um essentially the question is uh do we

901
00:36:32,940 --> 00:36:36,000
have a table of all of the potential dll

902
00:36:36,000 --> 00:36:38,280
side loads or validated dll side loads

903
00:36:38,280 --> 00:36:40,380
from system 32.

904
00:36:40,380 --> 00:36:43,320
um yes there is a CSV

905
00:36:43,320 --> 00:36:46,680
um in John Dwyer's repo on the X-Force

906
00:36:46,680 --> 00:36:48,180
IR GitHub

907
00:36:48,180 --> 00:36:51,240
there's a CSV and it uses the current

908
00:36:51,240 --> 00:36:53,700
wfh results so the one I mentioned where

909
00:36:53,700 --> 00:36:57,180
it's like 960 that will be the drydex

910
00:36:57,180 --> 00:36:58,980
Edition that I'll release later this

911
00:36:58,980 --> 00:37:00,720
year it's just not quite ready yet you

912
00:37:00,720 --> 00:37:01,500
know

913
00:37:01,500 --> 00:37:02,579
um I would have loved to show it off

914
00:37:02,579 --> 00:37:04,740
here but it's just not quite there I've

915
00:37:04,740 --> 00:37:07,140
got a few more things to do with it

916
00:37:07,140 --> 00:37:10,560
um but there is a CSV of like nine years

917
00:37:10,560 --> 00:37:15,140
so in the X-Force IR rebuild

918
00:37:16,380 --> 00:37:19,260
uh so when you load these dlls like

919
00:37:19,260 --> 00:37:21,000
doesn't it do something kind of bad

920
00:37:21,000 --> 00:37:24,000
process like like if it expects a real

921
00:37:24,000 --> 00:37:26,220
it's just a 32 dll or whatever you look

922
00:37:26,220 --> 00:37:28,859
great DOL right you're gonna like not

923
00:37:28,859 --> 00:37:30,599
get the functionality it's expecting it

924
00:37:30,599 --> 00:37:33,060
crash or something or yeah exactly right

925
00:37:33,060 --> 00:37:34,800
like some of them may crash some of them

926
00:37:34,800 --> 00:37:37,380
may not um so the answer is uh or the

927
00:37:37,380 --> 00:37:40,380
sorry the question is uh you know when

928
00:37:40,380 --> 00:37:42,300
you load these dlls like aren't you

929
00:37:42,300 --> 00:37:44,220
going to break the functionality of the

930
00:37:44,220 --> 00:37:45,599
application

931
00:37:45,599 --> 00:37:47,700
um in some cases yes you will

932
00:37:47,700 --> 00:37:49,320
um but we don't really care about that

933
00:37:49,320 --> 00:37:51,300
as red teamers right

934
00:37:51,300 --> 00:37:53,280
um where we just needed to load it and

935
00:37:53,280 --> 00:37:54,839
execute our code

936
00:37:54,839 --> 00:37:56,220
um so some of them are better than

937
00:37:56,220 --> 00:37:57,960
others where they crash like with Ms

938
00:37:57,960 --> 00:38:00,900
paint you saw it's like cannot create uh

939
00:38:00,900 --> 00:38:03,180
or cannot create a new text document or

940
00:38:03,180 --> 00:38:04,500
something there's a message box that

941
00:38:04,500 --> 00:38:07,500
pops up so some of them do straight up

942
00:38:07,500 --> 00:38:08,880
crash some of them don't some of them

943
00:38:08,880 --> 00:38:11,460
pop message boxes and so ideally you

944
00:38:11,460 --> 00:38:13,440
find one where it doesn't affect that

945
00:38:13,440 --> 00:38:16,020
functionality there are other ways to do

946
00:38:16,020 --> 00:38:19,920
it where you you can proxy those deal

947
00:38:19,920 --> 00:38:22,920
exports to the real dll so it will

948
00:38:22,920 --> 00:38:25,320
continue to function as intended and

949
00:38:25,320 --> 00:38:28,520
execute the code that you want

950
00:38:31,079 --> 00:38:34,040
any other questions

951
00:38:41,400 --> 00:38:44,780
correct yeah yeah

952
00:38:46,560 --> 00:38:48,420
that faster

953
00:38:48,420 --> 00:38:51,300
uh I mean you can execute whatever code

954
00:38:51,300 --> 00:38:53,220
you want inside of that exported

955
00:38:53,220 --> 00:38:54,720
function

956
00:38:54,720 --> 00:38:56,400
um so it's really just limited to your

957
00:38:56,400 --> 00:38:58,560
own creativity right

958
00:38:58,560 --> 00:39:01,560
you know could you just inject a portion

959
00:39:01,560 --> 00:39:06,060
in there like the original function and

960
00:39:06,060 --> 00:39:09,240
just add yeah yeah exactly

961
00:39:09,240 --> 00:39:11,240
um

962
00:39:11,420 --> 00:39:15,000
yeah so it's similar to his question

963
00:39:15,000 --> 00:39:18,119
um where if you proxy the functionality

964
00:39:18,119 --> 00:39:20,400
to the real dll the app will continue to

965
00:39:20,400 --> 00:39:23,280
function so you can do that and execute

966
00:39:23,280 --> 00:39:25,140
your code right so

967
00:39:25,140 --> 00:39:27,618
um yeah

968
00:39:30,020 --> 00:39:34,339
I can do both yeah absolutely

969
00:39:34,380 --> 00:39:39,060
any questions virtually or no no

970
00:39:39,060 --> 00:39:42,320
anyone have any other questions

971
00:39:43,140 --> 00:39:46,279
all right thank you so much

