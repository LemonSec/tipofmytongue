1
00:00:03,300 --> 00:00:04,799
so anyway we're starting here one

2
00:00:04,799 --> 00:00:06,779
o'clock Josh magry with hacking Azure

3
00:00:06,779 --> 00:00:09,660
services for bounties and credentials uh

4
00:00:09,660 --> 00:00:11,760
Josh is a security consultant at netspy

5
00:00:11,760 --> 00:00:13,500
where his main focus is azure testing

6
00:00:13,500 --> 00:00:15,299
includes contributing to the microburst

7
00:00:15,299 --> 00:00:16,680
project which is a collection of

8
00:00:16,680 --> 00:00:19,260
offensive security scripts for Azure uh

9
00:00:19,260 --> 00:00:20,699
he's doing research and developing new

10
00:00:20,699 --> 00:00:22,320
tools and techniques for attacking Azure

11
00:00:22,320 --> 00:00:24,180
Services uh he got started with the

12
00:00:24,180 --> 00:00:26,100
Azure stuff with a course from bhis was

13
00:00:26,100 --> 00:00:29,099
that both class yes Beau bolex class uh

14
00:00:29,099 --> 00:00:30,840
bhis that's not all the anti-site and

15
00:00:30,840 --> 00:00:32,340
stuff we've moved over

16
00:00:32,340 --> 00:00:34,320
um but old school bhis right and has

17
00:00:34,320 --> 00:00:35,760
since authored several tools and blog

18
00:00:35,760 --> 00:00:38,100
posts about Azure pen testing uh he's

19
00:00:38,100 --> 00:00:39,239
previously worked as a pen tester red

20
00:00:39,239 --> 00:00:41,219
teamer and an application security

21
00:00:41,219 --> 00:00:44,940
consultant holds the gsec gcih gcfa and

22
00:00:44,940 --> 00:00:47,520
oscp certifications Josh thanks for

23
00:00:47,520 --> 00:00:50,039
being here all to you thank you yeah hey

24
00:00:50,039 --> 00:00:51,480
everybody so this is hacking Azure

25
00:00:51,480 --> 00:00:53,399
services for bounties and credentials I

26
00:00:53,399 --> 00:00:55,320
submitted that uh bio a while ago so I

27
00:00:55,320 --> 00:00:57,059
actually work at IBM now

28
00:00:57,059 --> 00:01:00,180
um I'm on the red team at IBM IBM's I

29
00:01:00,180 --> 00:01:01,739
first read I was previously at Nets by

30
00:01:01,739 --> 00:01:03,840
where my focus was Azure fantastic thing

31
00:01:03,840 --> 00:01:06,000
so basically everything in this talk is

32
00:01:06,000 --> 00:01:07,380
from there there's a few new additions

33
00:01:07,380 --> 00:01:09,540
but the majority of the content is from

34
00:01:09,540 --> 00:01:12,000
a time and that's why uh you can find me

35
00:01:12,000 --> 00:01:14,460
on Twitter at pasta hash brown or GitHub

36
00:01:14,460 --> 00:01:17,280
same username with more characters a

37
00:01:17,280 --> 00:01:18,780
little about me I got a puppy about

38
00:01:18,780 --> 00:01:21,000
three months ago a little beagle mix

39
00:01:21,000 --> 00:01:24,060
um drives me crazy and I rode my bike

40
00:01:24,060 --> 00:01:25,500
across Iowa last summer look forward to

41
00:01:25,500 --> 00:01:26,820
doing it again this year it gets me away

42
00:01:26,820 --> 00:01:29,100
from the computer for a bit

43
00:01:29,100 --> 00:01:31,500
so quick agenda for today first we're

44
00:01:31,500 --> 00:01:32,759
going to Define our goals and cover some

45
00:01:32,759 --> 00:01:35,040
Azure Basics we're going to walk through

46
00:01:35,040 --> 00:01:37,560
an exploit I found in Azure logic apps

47
00:01:37,560 --> 00:01:39,540
an exploit I found in Azure Automation

48
00:01:39,540 --> 00:01:41,820
and then a few other minor techniques

49
00:01:41,820 --> 00:01:43,979
these are things that they're not Odes

50
00:01:43,979 --> 00:01:45,720
or anything they're kind of things I

51
00:01:45,720 --> 00:01:47,820
found throughout the year uh years that

52
00:01:47,820 --> 00:01:49,439
I've been doing Azure research and uh

53
00:01:49,439 --> 00:01:51,360
weren't big enough for blog posts but I

54
00:01:51,360 --> 00:01:54,479
thought I could get them all in here

55
00:01:54,479 --> 00:01:57,479
so first up why Azure uh Cloud's sort of

56
00:01:57,479 --> 00:01:58,920
the cool new thing right everybody's

57
00:01:58,920 --> 00:02:00,659
getting up in there uh the big three

58
00:02:00,659 --> 00:02:04,020
Azure AWS and gcp and Azure ID is a

59
00:02:04,020 --> 00:02:05,520
really popular offering so even

60
00:02:05,520 --> 00:02:07,560
companies that aren't using Azure for

61
00:02:07,560 --> 00:02:09,959
infrastructure as a service they may

62
00:02:09,959 --> 00:02:11,760
still be using Azure ID so a little bit

63
00:02:11,760 --> 00:02:12,959
of azure knowledge can get you a really

64
00:02:12,959 --> 00:02:15,000
long way on an engagement

65
00:02:15,000 --> 00:02:16,680
and Cloud's a really interesting Target

66
00:02:16,680 --> 00:02:18,720
because there's a lot of really weird

67
00:02:18,720 --> 00:02:20,520
things happening at scale and a lot of

68
00:02:20,520 --> 00:02:22,200
that is abstracted away from the user by

69
00:02:22,200 --> 00:02:24,420
Design so sometimes you find things that

70
00:02:24,420 --> 00:02:25,680
the developers didn't intend for you to

71
00:02:25,680 --> 00:02:27,120
see and you can kind of pull that thread

72
00:02:27,120 --> 00:02:28,140
a lot

73
00:02:28,140 --> 00:02:30,540
and in the event that you do compromise

74
00:02:30,540 --> 00:02:32,099
a service or something similar to that

75
00:02:32,099 --> 00:02:34,140
the impact is severe and immediate so

76
00:02:34,140 --> 00:02:36,060
when you find a bug in like on-prem 80

77
00:02:36,060 --> 00:02:38,640
it's not necessarily you sometimes need

78
00:02:38,640 --> 00:02:40,080
to be inside the environment first so

79
00:02:40,080 --> 00:02:41,700
there's a prerequisite but in Azure you

80
00:02:41,700 --> 00:02:43,440
compromise a service you've compromised

81
00:02:43,440 --> 00:02:46,400
everybody using that service

82
00:02:46,440 --> 00:02:48,420
I stole this picture from Andy Robbins

83
00:02:48,420 --> 00:02:50,280
at Waldo on Twitter he gave a talk

84
00:02:50,280 --> 00:02:52,860
earlier today uh and he did a Twitter

85
00:02:52,860 --> 00:02:54,780
Thread about this a little while ago and

86
00:02:54,780 --> 00:02:56,760
Azure is still relatively young I got

87
00:02:56,760 --> 00:02:59,640
into pen testing and I think 2016 2017

88
00:02:59,640 --> 00:03:02,580
so active directories are even exposed a

89
00:03:02,580 --> 00:03:04,140
lot of scrutiny you know it's like 20

90
00:03:04,140 --> 00:03:05,580
years of scrutiny what am I going to

91
00:03:05,580 --> 00:03:07,319
find in Azure or sorry an active

92
00:03:07,319 --> 00:03:09,599
directory but Azure is not quite the

93
00:03:09,599 --> 00:03:11,819
same we still have a lot of time before

94
00:03:11,819 --> 00:03:14,040
we before we get up against that same

95
00:03:14,040 --> 00:03:16,680
timeline as Azure sorry as on-prem may

96
00:03:16,680 --> 00:03:18,540
do and there's a lot more bugs to find

97
00:03:18,540 --> 00:03:20,640
as we're going to talk about

98
00:03:20,640 --> 00:03:22,739
so some recent Azure exploits this is

99
00:03:22,739 --> 00:03:24,480
not a comprehensive list but just some

100
00:03:24,480 --> 00:03:26,700
of the highlights uh chaosdb was a

101
00:03:26,700 --> 00:03:29,340
compromise of the cosmos DB service oh

102
00:03:29,340 --> 00:03:31,739
my God uh you could get rce on Azure

103
00:03:31,739 --> 00:03:34,379
Linux VMS by default and extra replica

104
00:03:34,379 --> 00:03:36,360
this one was like a week ago I think uh

105
00:03:36,360 --> 00:03:37,800
it was a service compromise of

106
00:03:37,800 --> 00:03:40,019
postgresql and these all three of these

107
00:03:40,019 --> 00:03:42,360
were from the team over at Wiz a crazy

108
00:03:42,360 --> 00:03:45,480
smart team over there Auto warp uh you

109
00:03:45,480 --> 00:03:46,920
were able to get cross-tenant managed

110
00:03:46,920 --> 00:03:49,140
identity tokens from Azure automation

111
00:03:49,140 --> 00:03:50,879
which was like one of the worst bugs

112
00:03:50,879 --> 00:03:53,879
you'd possibly find uh and cred Manifest

113
00:03:53,879 --> 00:03:55,680
this was found by my colleague at Nets

114
00:03:55,680 --> 00:03:57,599
by Carl fossen if you know Azure you

115
00:03:57,599 --> 00:03:58,620
probably know Carl

116
00:03:58,620 --> 00:04:00,599
and he found that they were leaking

117
00:04:00,599 --> 00:04:02,040
clear text credentials for automation

118
00:04:02,040 --> 00:04:04,379
accounts in Azure ID so any reader in

119
00:04:04,379 --> 00:04:06,659
Azure 80 could potentially get these uh

120
00:04:06,659 --> 00:04:08,819
these certificates and authenticate to

121
00:04:08,819 --> 00:04:10,620
subscriptions

122
00:04:10,620 --> 00:04:12,239
and this is sort of how I felt I've been

123
00:04:12,239 --> 00:04:13,439
working on this talk for a little while

124
00:04:13,439 --> 00:04:15,120
now and I've been watching all these

125
00:04:15,120 --> 00:04:16,380
people release these really awesome

126
00:04:16,380 --> 00:04:18,478
these really awesome exploits and

127
00:04:18,478 --> 00:04:19,858
getting paid tons of money and bounties

128
00:04:19,858 --> 00:04:21,060
and I'm over here with my two little

129
00:04:21,060 --> 00:04:25,680
exploits uh polishing them uh

130
00:04:25,680 --> 00:04:27,180
but I like them so hopefully you will

131
00:04:27,180 --> 00:04:28,560
too

132
00:04:28,560 --> 00:04:30,419
so before we get into that uh there's

133
00:04:30,419 --> 00:04:32,520
two kinds of azure bugs so there's

134
00:04:32,520 --> 00:04:34,020
exploits and there's abuses and this

135
00:04:34,020 --> 00:04:35,160
applies to everything in security really

136
00:04:35,160 --> 00:04:37,800
but so there's an exploit where it

137
00:04:37,800 --> 00:04:39,180
represents a flaw on behalf of the cloud

138
00:04:39,180 --> 00:04:40,860
provider so this is something they

139
00:04:40,860 --> 00:04:42,840
messed up and it gets fixed when it gets

140
00:04:42,840 --> 00:04:44,699
discovered so Auto warp chaosity these

141
00:04:44,699 --> 00:04:45,540
things we just talked about these are

142
00:04:45,540 --> 00:04:48,300
all exploits uh because they got fixed

143
00:04:48,300 --> 00:04:50,100
immediately and they it was a flaw on

144
00:04:50,100 --> 00:04:51,240
behalf of the providers it wasn't by

145
00:04:51,240 --> 00:04:52,080
Design

146
00:04:52,080 --> 00:04:54,780
but an abuse it's usually a feature we

147
00:04:54,780 --> 00:04:56,580
like to abuse features right it features

148
00:04:56,580 --> 00:04:59,160
it's a bug uh and it doesn't warrant a

149
00:04:59,160 --> 00:05:01,020
fix so for example everything in get AZ

150
00:05:01,020 --> 00:05:02,100
passwords which is part of the

151
00:05:02,100 --> 00:05:05,160
microburst project uh that's mostly of

152
00:05:05,160 --> 00:05:06,840
using features so dumping credentials

153
00:05:06,840 --> 00:05:09,060
from automation accounts uh if you have

154
00:05:09,060 --> 00:05:10,259
the proper rights to do it you know

155
00:05:10,259 --> 00:05:13,800
you're allowed to do it you can do it

156
00:05:13,800 --> 00:05:15,900
so really quickly go over some basics in

157
00:05:15,900 --> 00:05:17,160
Azure just so we're all on the same page

158
00:05:17,160 --> 00:05:19,740
some of this terminology so in Azure

159
00:05:19,740 --> 00:05:21,060
we're going to talk about Azure resource

160
00:05:21,060 --> 00:05:22,560
manager this is like instructor as a

161
00:05:22,560 --> 00:05:25,020
service platform as a service uh there's

162
00:05:25,020 --> 00:05:26,400
the root tenant this is the highest

163
00:05:26,400 --> 00:05:28,860
level in Azure then in the root tenant

164
00:05:28,860 --> 00:05:30,539
you have management groups under the

165
00:05:30,539 --> 00:05:31,380
management groups you can have

166
00:05:31,380 --> 00:05:33,300
subscriptions and billing happens at the

167
00:05:33,300 --> 00:05:34,680
subscription level so this is generally

168
00:05:34,680 --> 00:05:37,080
where things are logically grouped then

169
00:05:37,080 --> 00:05:38,400
in a subscription you have resource

170
00:05:38,400 --> 00:05:40,440
groups and in resource groups you have

171
00:05:40,440 --> 00:05:42,120
resources and that's the final of

172
00:05:42,120 --> 00:05:43,560
virtual machines a resource a database

173
00:05:43,560 --> 00:05:45,120
is a resource

174
00:05:45,120 --> 00:05:46,320
foreign

175
00:05:46,320 --> 00:05:48,600
we have a few roles in Azure the highest

176
00:05:48,600 --> 00:05:50,220
role is owner so owners have full

177
00:05:50,220 --> 00:05:52,080
control over resources you can assign

178
00:05:52,080 --> 00:05:53,160
roles you can change and delete

179
00:05:53,160 --> 00:05:54,479
resources

180
00:05:54,479 --> 00:05:56,220
contributors you can make changes to

181
00:05:56,220 --> 00:05:57,900
resources make new resources you can't

182
00:05:57,900 --> 00:05:59,759
assign roles on them though and then

183
00:05:59,759 --> 00:06:01,620
finally reader you can read information

184
00:06:01,620 --> 00:06:04,080
you can't read passwords or Keys though

185
00:06:04,080 --> 00:06:05,400
we're going to talk about why that's not

186
00:06:05,400 --> 00:06:07,740
always true and user access

187
00:06:07,740 --> 00:06:09,660
administrator is kind of a weird one so

188
00:06:09,660 --> 00:06:11,759
user access administrators can give

189
00:06:11,759 --> 00:06:14,100
themselves roles so functionally you're

190
00:06:14,100 --> 00:06:15,120
an owner if you have user access

191
00:06:15,120 --> 00:06:16,320
administrator you can just give yourself

192
00:06:16,320 --> 00:06:18,860
owner

193
00:06:20,120 --> 00:06:23,699
uh sorry and these roles can be assigned

194
00:06:23,699 --> 00:06:24,840
to any of those Scopes we talked about

195
00:06:24,840 --> 00:06:26,220
so you can have a subscription owner you

196
00:06:26,220 --> 00:06:27,479
can have a management group contributor

197
00:06:27,479 --> 00:06:28,800
uh you can mix and match those however

198
00:06:28,800 --> 00:06:30,660
you want and then to make it more

199
00:06:30,660 --> 00:06:32,880
complicated you can assign uh roles

200
00:06:32,880 --> 00:06:34,560
specific to services so you can have a

201
00:06:34,560 --> 00:06:36,539
virtual machine contributor in a

202
00:06:36,539 --> 00:06:38,160
subscription you can have a app Services

203
00:06:38,160 --> 00:06:40,199
reader in a management group that sort

204
00:06:40,199 --> 00:06:41,639
of thing so you mix and match these and

205
00:06:41,639 --> 00:06:42,960
that's sort of where this talk came from

206
00:06:42,960 --> 00:06:44,580
you get these really weird situations

207
00:06:44,580 --> 00:06:46,080
where you have this really weird role

208
00:06:46,080 --> 00:06:47,639
with like a few actions and you need to

209
00:06:47,639 --> 00:06:48,960
figure out you know how can we break out

210
00:06:48,960 --> 00:06:50,819
is what can we do

211
00:06:50,819 --> 00:06:52,139
so first up we're going to talk about

212
00:06:52,139 --> 00:06:54,900
Azure logic apps logic apps are a low no

213
00:06:54,900 --> 00:06:56,340
code service if you haven't heard this

214
00:06:56,340 --> 00:06:58,020
before it's kind of uh it's like a tool

215
00:06:58,020 --> 00:06:59,819
that enables non-technical users to

216
00:06:59,819 --> 00:07:01,319
create powerful workflows like a drop

217
00:07:01,319 --> 00:07:04,319
and drag a GUI so an example would be

218
00:07:04,319 --> 00:07:06,960
whenever an inbox gets an email parse

219
00:07:06,960 --> 00:07:08,580
the subject line and if it says hello we

220
00:07:08,580 --> 00:07:10,680
return world and you could drop and drag

221
00:07:10,680 --> 00:07:12,380
you know when email

222
00:07:12,380 --> 00:07:15,120
compare text do this thing

223
00:07:15,120 --> 00:07:16,500
and an important question to ask

224
00:07:16,500 --> 00:07:17,819
whenever we're working with any service

225
00:07:17,819 --> 00:07:19,319
in Azure is how is this service

226
00:07:19,319 --> 00:07:21,300
authenticating to other resources so an

227
00:07:21,300 --> 00:07:23,099
example above how is the logic app

228
00:07:23,099 --> 00:07:25,560
authenticating to that uh that email

229
00:07:25,560 --> 00:07:29,039
inbox and the answer is API connections

230
00:07:29,039 --> 00:07:31,740
so an API connection is just a Swagger

231
00:07:31,740 --> 00:07:33,780
API definition and we can actually

232
00:07:33,780 --> 00:07:35,400
create our own we're going to look at

233
00:07:35,400 --> 00:07:37,380
doing one of this one of these later and

234
00:07:37,380 --> 00:07:38,819
the official ones with like the nice

235
00:07:38,819 --> 00:07:40,259
pretty pictures and all that those are

236
00:07:40,259 --> 00:07:41,400
just ones that have been submitted to

237
00:07:41,400 --> 00:07:42,840
Microsoft for review or they were

238
00:07:42,840 --> 00:07:45,360
written by Microsoft so like AWS has one

239
00:07:45,360 --> 00:07:46,800
they wrote their own they submitted to

240
00:07:46,800 --> 00:07:49,620
Microsoft and then it got approved

241
00:07:49,620 --> 00:07:51,180
so you can actually fetch the Swagger

242
00:07:51,180 --> 00:07:52,560
definition it's kind of hard to see here

243
00:07:52,560 --> 00:07:53,940
this should be blown up in a later slide

244
00:07:53,940 --> 00:07:56,099
but we can make a request to the rest

245
00:07:56,099 --> 00:07:58,380
API and it spits out all the paths and

246
00:07:58,380 --> 00:08:00,360
all the actions so you have a get put

247
00:08:00,360 --> 00:08:01,800
delete and these all correspond to

248
00:08:01,800 --> 00:08:04,919
different logic app actions

249
00:08:04,919 --> 00:08:06,780
so before we talk about the exploit

250
00:08:06,780 --> 00:08:08,340
we're going to talk about API connection

251
00:08:08,340 --> 00:08:10,259
abuse I read a Blog about this a while

252
00:08:10,259 --> 00:08:11,759
ago you can find it on the Nets by blog

253
00:08:11,759 --> 00:08:13,860
so when you create an API connection you

254
00:08:13,860 --> 00:08:16,080
authenticate it and that you just sign

255
00:08:16,080 --> 00:08:18,240
in and then it it Associates that

256
00:08:18,240 --> 00:08:20,940
connection with your user and you create

257
00:08:20,940 --> 00:08:22,680
a connection when you want to create an

258
00:08:22,680 --> 00:08:25,259
action so for example you want to create

259
00:08:25,259 --> 00:08:26,879
a key Vault action you want to encrypt

260
00:08:26,879 --> 00:08:28,139
some value with a value in your key

261
00:08:28,139 --> 00:08:30,720
Vault so you make the action it says

262
00:08:30,720 --> 00:08:32,099
okay you need to make this connector you

263
00:08:32,099 --> 00:08:33,360
authenticate

264
00:08:33,360 --> 00:08:35,458
and the problem here is that you

265
00:08:35,458 --> 00:08:38,219
generally you make this action you make

266
00:08:38,219 --> 00:08:40,020
this connector for one action but you

267
00:08:40,020 --> 00:08:42,240
can use all of the other actions in a

268
00:08:42,240 --> 00:08:44,099
connector if you have access to it so

269
00:08:44,099 --> 00:08:46,680
for example if an attacker has access to

270
00:08:46,680 --> 00:08:47,880
this API connection but they don't have

271
00:08:47,880 --> 00:08:49,200
access to the key Vault so it's in

272
00:08:49,200 --> 00:08:50,100
another Resource Group another

273
00:08:50,100 --> 00:08:52,260
subscription they can use this API

274
00:08:52,260 --> 00:08:53,399
connection and they can use the list

275
00:08:53,399 --> 00:08:55,320
secret get secret action to dump out the

276
00:08:55,320 --> 00:08:57,000
key Vault and there's a ton of weird

277
00:08:57,000 --> 00:08:59,339
interactions uh every connector is

278
00:08:59,339 --> 00:09:00,959
different so for example another one is

279
00:09:00,959 --> 00:09:02,580
like you can dump out SharePoint files

280
00:09:02,580 --> 00:09:04,320
for another user

281
00:09:04,320 --> 00:09:06,240
and this we consider this an abuse the

282
00:09:06,240 --> 00:09:07,680
issue lies in the role assignments no

283
00:09:07,680 --> 00:09:09,120
like crazy exploit going on here it's

284
00:09:09,120 --> 00:09:11,880
not going to get fixed or anything

285
00:09:11,880 --> 00:09:13,860
some other considerations for logic apps

286
00:09:13,860 --> 00:09:14,760
sometimes you find plain text

287
00:09:14,760 --> 00:09:16,260
credentials in them for example this is

288
00:09:16,260 --> 00:09:18,360
the HTTP action you can see there's

289
00:09:18,360 --> 00:09:21,180
basic client search oauth raw managed

290
00:09:21,180 --> 00:09:23,279
identity and if you find these sometimes

291
00:09:23,279 --> 00:09:24,720
there's like service principle creds in

292
00:09:24,720 --> 00:09:26,399
here and there's a pretty quick win for

293
00:09:26,399 --> 00:09:27,899
readers

294
00:09:27,899 --> 00:09:29,760
and then also sometimes Secrets get

295
00:09:29,760 --> 00:09:32,279
leaked in the history Tab and again you

296
00:09:32,279 --> 00:09:34,080
only need reader access but for a key

297
00:09:34,080 --> 00:09:36,180
Vault action you see get secret here

298
00:09:36,180 --> 00:09:38,820
test secret value uh and you only need

299
00:09:38,820 --> 00:09:40,200
reader rights to do this and it doesn't

300
00:09:40,200 --> 00:09:42,540
get leaked until run time and there is a

301
00:09:42,540 --> 00:09:44,339
setting to so that you can obfuscate

302
00:09:44,339 --> 00:09:45,720
this but it's not turned on by default

303
00:09:45,720 --> 00:09:48,000
for some reason

304
00:09:48,000 --> 00:09:50,399
uh this is a something I want to talk

305
00:09:50,399 --> 00:09:52,440
about not the exploit but a funny little

306
00:09:52,440 --> 00:09:53,940
thing I found I reported to Microsoft

307
00:09:53,940 --> 00:09:55,380
they said not a vulnerability but I

308
00:09:55,380 --> 00:09:56,519
thought people might find it interesting

309
00:09:56,519 --> 00:09:58,860
uh there's an execute JavaScript code

310
00:09:58,860 --> 00:10:00,899
action and when you hear like execute

311
00:10:00,899 --> 00:10:02,459
code in the cloud it's like oh crap what

312
00:10:02,459 --> 00:10:03,480
can we do with that

313
00:10:03,480 --> 00:10:05,279
so the docs say that we're running in

314
00:10:05,279 --> 00:10:07,500
node uh and there's a Blog from netspy

315
00:10:07,500 --> 00:10:09,480
funnily enough uh about breaking out a

316
00:10:09,480 --> 00:10:10,980
node sandboxes

317
00:10:10,980 --> 00:10:12,420
and I tried to reproduce it for this

318
00:10:12,420 --> 00:10:13,740
talk I wasn't able to I don't have the

319
00:10:13,740 --> 00:10:14,940
screenshots anymore so you're going to

320
00:10:14,940 --> 00:10:17,220
take my word for it but the sandbox is

321
00:10:17,220 --> 00:10:18,899
using vm2 and I started looking for

322
00:10:18,899 --> 00:10:21,360
sandbox escapes I found this blog I put

323
00:10:21,360 --> 00:10:24,779
the link there and I took this command

324
00:10:24,779 --> 00:10:26,700
from there and you can see we can read

325
00:10:26,700 --> 00:10:29,339
uh read the directories on the file

326
00:10:29,339 --> 00:10:31,560
system and I was able to escalate this

327
00:10:31,560 --> 00:10:34,560
to rce at the time uh I couldn't get the

328
00:10:34,560 --> 00:10:36,540
payload working like I said but uh you

329
00:10:36,540 --> 00:10:39,420
could get rce from this and

330
00:10:39,420 --> 00:10:43,320
uh this also works with xslt via the

331
00:10:43,320 --> 00:10:45,660
transform XML action

332
00:10:45,660 --> 00:10:47,279
and Microsoft said it's not a bug

333
00:10:47,279 --> 00:10:49,500
because you land in a function app uh so

334
00:10:49,500 --> 00:10:51,720
it's a sandboxed environment really no

335
00:10:51,720 --> 00:10:53,579
harm done but it's a cool thing I got to

336
00:10:53,579 --> 00:10:54,779
look at some of Microsoft's code that

337
00:10:54,779 --> 00:10:56,519
they maybe didn't want people to see so

338
00:10:56,519 --> 00:10:58,680
that's kind of funny

339
00:10:58,680 --> 00:11:00,899
and one more bug in logic apps uh you

340
00:11:00,899 --> 00:11:03,779
can get uh ssrf by making your own

341
00:11:03,779 --> 00:11:05,760
custom connector you can point these at

342
00:11:05,760 --> 00:11:07,680
localhost not supposed to be able to you

343
00:11:07,680 --> 00:11:10,019
can see here that there's an error uh

344
00:11:10,019 --> 00:11:11,760
says you can't put it at localhost but

345
00:11:11,760 --> 00:11:13,079
this is just a front end restriction

346
00:11:13,079 --> 00:11:17,040
classic right so copy post request from

347
00:11:17,040 --> 00:11:18,180
the browser

348
00:11:18,180 --> 00:11:21,000
go into Powershell swap out ibm.com for

349
00:11:21,000 --> 00:11:22,079
localhost

350
00:11:22,079 --> 00:11:24,240
and then you see this 200 response at

351
00:11:24,240 --> 00:11:26,519
the bottom there

352
00:11:26,519 --> 00:11:29,820
and if we then run this we run the run a

353
00:11:29,820 --> 00:11:31,260
logic app with this connector we get a

354
00:11:31,260 --> 00:11:33,420
404 for localhost I was like oh okay I

355
00:11:33,420 --> 00:11:34,860
won't get anything here

356
00:11:34,860 --> 00:11:37,100
but then if you make a request to like

357
00:11:37,100 --> 00:11:39,420
localhost1234 or whatever then you get a

358
00:11:39,420 --> 00:11:40,560
totally different response you can see

359
00:11:40,560 --> 00:11:43,220
it resolved localhost to 127.001

360
00:11:43,220 --> 00:11:47,100
so this is an ssrf but not a bug you

361
00:11:47,100 --> 00:11:48,720
can't get to imds or internal Services

362
00:11:48,720 --> 00:11:51,600
uh so again just thought sort of a cool

363
00:11:51,600 --> 00:11:55,860
thing uh show it off here but not a bug

364
00:11:55,860 --> 00:11:59,279
and now the bug uh the juicy stuff so

365
00:11:59,279 --> 00:12:00,720
the scenario we were in is that we were

366
00:12:00,720 --> 00:12:02,459
in a client environment and they had an

367
00:12:02,459 --> 00:12:04,260
API connection for the Azure resource

368
00:12:04,260 --> 00:12:06,540
manager and we were authenticated as a

369
00:12:06,540 --> 00:12:08,100
user access admin at the root level so

370
00:12:08,100 --> 00:12:09,660
remember root level is the highest and

371
00:12:09,660 --> 00:12:11,519
user access administrator uh you can

372
00:12:11,519 --> 00:12:12,839
assign yourself owner so this is kind of

373
00:12:12,839 --> 00:12:14,459
the highest level you can have in Azure

374
00:12:14,459 --> 00:12:17,220
and our goal is to abuse this as much as

375
00:12:17,220 --> 00:12:18,720
possible and generally we want to get to

376
00:12:18,720 --> 00:12:20,339
owner on a subscription it's kind of

377
00:12:20,339 --> 00:12:21,959
like getting da on an internal pen test

378
00:12:21,959 --> 00:12:24,120
it's kind of oversimplified but it's

379
00:12:24,120 --> 00:12:25,620
like a really good tool to say like look

380
00:12:25,620 --> 00:12:28,680
I got da this is this is serious

381
00:12:28,680 --> 00:12:30,660
so we did some initial Recon uh looking

382
00:12:30,660 --> 00:12:32,519
at what actions were in this connector

383
00:12:32,519 --> 00:12:34,079
we found this create or update a

384
00:12:34,079 --> 00:12:35,339
resource and we thought well that sounds

385
00:12:35,339 --> 00:12:37,380
like a good starting place maybe we can

386
00:12:37,380 --> 00:12:40,500
create resources something like that

387
00:12:40,500 --> 00:12:42,660
and this is the same screenshot from

388
00:12:42,660 --> 00:12:44,459
earlier but I've highlighted uh the

389
00:12:44,459 --> 00:12:46,200
action that we're looking at so it's a

390
00:12:46,200 --> 00:12:48,600
request to uh subscription resource

391
00:12:48,600 --> 00:12:50,220
groups and then the provider and every

392
00:12:50,220 --> 00:12:51,959
resource in Azure has like a short ID

393
00:12:51,959 --> 00:12:54,060
and then you put that ID in for that

394
00:12:54,060 --> 00:12:57,120
resource and then it's a put request

395
00:12:57,120 --> 00:12:59,519
so some background around this is that

396
00:12:59,519 --> 00:13:01,260
this is basically just a wrapper around

397
00:13:01,260 --> 00:13:03,660
a wrapper so we're making connections to

398
00:13:03,660 --> 00:13:06,839
the arm API or the rest API with the arm

399
00:13:06,839 --> 00:13:09,540
API and so you make a request of the

400
00:13:09,540 --> 00:13:10,680
server the server makes a request to

401
00:13:10,680 --> 00:13:12,720
this this URL which is the same as was

402
00:13:12,720 --> 00:13:14,120
on the previous slide but just blown up

403
00:13:14,120 --> 00:13:16,380
and if we want to create a role

404
00:13:16,380 --> 00:13:18,360
assignment we can swap out that provider

405
00:13:18,360 --> 00:13:20,459
short resource ID for uh for that

406
00:13:20,459 --> 00:13:22,079
resource so the Microsoft authorization

407
00:13:22,079 --> 00:13:24,600
service and we can create role

408
00:13:24,600 --> 00:13:25,800
assignments this way you just need to

409
00:13:25,800 --> 00:13:27,240
give it the role ID and the principal ID

410
00:13:27,240 --> 00:13:29,220
but you can only make them at the

411
00:13:29,220 --> 00:13:30,540
resource Group level this is by Design

412
00:13:30,540 --> 00:13:33,060
if you saw earlier there's a resource

413
00:13:33,060 --> 00:13:34,740
Group field which is mandatory so you're

414
00:13:34,740 --> 00:13:35,579
not supposed to be able to make

415
00:13:35,579 --> 00:13:38,279
resources at subscription level

416
00:13:38,279 --> 00:13:40,680
but we can use a past reversal payload

417
00:13:40,680 --> 00:13:43,139
in the resource Group field and the

418
00:13:43,139 --> 00:13:44,820
reason this works is if we make it blank

419
00:13:44,820 --> 00:13:46,139
we get an error because it says well no

420
00:13:46,139 --> 00:13:48,300
there's no blank Resource Group so this

421
00:13:48,300 --> 00:13:50,040
isn't this doesn't work but with a

422
00:13:50,040 --> 00:13:51,899
password payload it validates against

423
00:13:51,899 --> 00:13:53,519
the Swagger definition it says okay this

424
00:13:53,519 --> 00:13:55,680
is a valid Swagger endpoint and then it

425
00:13:55,680 --> 00:13:57,959
passes that to the app and the app

426
00:13:57,959 --> 00:14:01,079
requests uh that full that full path

427
00:14:01,079 --> 00:14:03,120
with the traversal payload resolves and

428
00:14:03,120 --> 00:14:04,440
now we get a request made to

429
00:14:04,440 --> 00:14:06,300
subscription subscription ID and then

430
00:14:06,300 --> 00:14:08,880
the rest of our of our thing so the

431
00:14:08,880 --> 00:14:10,320
impact of this is we can make arbitrary

432
00:14:10,320 --> 00:14:12,600
resources at the subscription level in

433
00:14:12,600 --> 00:14:14,579
the context of the user and you can also

434
00:14:14,579 --> 00:14:16,500
put a password payload in the

435
00:14:16,500 --> 00:14:18,660
subscription field and you can hit the

436
00:14:18,660 --> 00:14:21,420
root tenant if you want to

437
00:14:21,420 --> 00:14:23,459
so this was all fine and good we could

438
00:14:23,459 --> 00:14:24,839
make a we could make a role assignment

439
00:14:24,839 --> 00:14:26,760
at the at the description level we meant

440
00:14:26,760 --> 00:14:28,740
ourselves owner uh clients happy but I

441
00:14:28,740 --> 00:14:29,940
went to reproduce this in the

442
00:14:29,940 --> 00:14:31,800
environment and it worked but then I

443
00:14:31,800 --> 00:14:33,240
noticed uh when you make the action

444
00:14:33,240 --> 00:14:34,620
there's like a drop down menu for

445
00:14:34,620 --> 00:14:36,839
subscriptions and it started populating

446
00:14:36,839 --> 00:14:38,279
with subscriptions I didn't have access

447
00:14:38,279 --> 00:14:39,720
to they're out of scope

448
00:14:39,720 --> 00:14:41,940
so I was curious a request is getting

449
00:14:41,940 --> 00:14:44,940
made uh to see these subscriptions I

450
00:14:44,940 --> 00:14:46,440
shouldn't see but I haven't run a logic

451
00:14:46,440 --> 00:14:48,060
app right so what's going on

452
00:14:48,060 --> 00:14:51,180
and like anything in Azure fire up burp

453
00:14:51,180 --> 00:14:52,860
burp is an amazing tool you can find so

454
00:14:52,860 --> 00:14:54,300
much weird stuff that's not really like

455
00:14:54,300 --> 00:14:56,100
it's not secret but you're not really

456
00:14:56,100 --> 00:14:57,180
supposed to see it it's abstracted away

457
00:14:57,180 --> 00:14:58,800
from you and sometimes that leads to

458
00:14:58,800 --> 00:15:01,500
weird things like this so a request is

459
00:15:01,500 --> 00:15:02,820
getting made to the dynamic invoke

460
00:15:02,820 --> 00:15:05,820
endpoint on that API connection

461
00:15:05,820 --> 00:15:07,440
and this is sort of an undocumented

462
00:15:07,440 --> 00:15:08,699
feature but it makes everything so much

463
00:15:08,699 --> 00:15:09,839
easier because you don't need to like

464
00:15:09,839 --> 00:15:11,699
make a logic app or on the logic app get

465
00:15:11,699 --> 00:15:14,100
the output so you can see the top

466
00:15:14,100 --> 00:15:16,199
screenshot is the request that's getting

467
00:15:16,199 --> 00:15:18,060
made it's that resource ID with uh

468
00:15:18,060 --> 00:15:20,279
Dynamic invoke at the end it has get

469
00:15:20,279 --> 00:15:22,500
method and the path of subscriptions and

470
00:15:22,500 --> 00:15:25,560
then we get a list of subscriptions back

471
00:15:25,560 --> 00:15:27,480
so anyway we submitted this to Microsoft

472
00:15:27,480 --> 00:15:29,399
back in October last year they fixed it

473
00:15:29,399 --> 00:15:31,440
in March uh we disclosed in a blog post

474
00:15:31,440 --> 00:15:33,300
and then they're fixed with the disallow

475
00:15:33,300 --> 00:15:35,760
path to Russell payloads I did look it

476
00:15:35,760 --> 00:15:38,100
no longer works the payload I used I

477
00:15:38,100 --> 00:15:39,839
haven't validated how good the fix is so

478
00:15:39,839 --> 00:15:41,459
if you want ten thousand dollars

479
00:15:41,459 --> 00:15:43,740
um maybe take a look

480
00:15:43,740 --> 00:15:45,600
so next up we're gonna talk about hybrid

481
00:15:45,600 --> 00:15:46,980
workers

482
00:15:46,980 --> 00:15:48,839
so hybrid workers are part of azure

483
00:15:48,839 --> 00:15:51,420
Automation and automation accounts in

484
00:15:51,420 --> 00:15:52,800
Azure their primary function is to run

485
00:15:52,800 --> 00:15:54,480
run books which are just small pieces of

486
00:15:54,480 --> 00:15:56,399
Powershell or python code and normally

487
00:15:56,399 --> 00:15:58,079
we use them to if you want to manage

488
00:15:58,079 --> 00:15:59,279
infrastructure so you want to like

489
00:15:59,279 --> 00:16:01,500
create a VM and apply things to it you

490
00:16:01,500 --> 00:16:03,480
can do this via automation

491
00:16:03,480 --> 00:16:06,540
uh and by default these run in a sandbox

492
00:16:06,540 --> 00:16:08,820
in Azure and those sandboxes have

493
00:16:08,820 --> 00:16:11,279
processing caps uh like it's with all

494
00:16:11,279 --> 00:16:12,660
those devops pipelines people are

495
00:16:12,660 --> 00:16:13,860
getting like free compute time mining

496
00:16:13,860 --> 00:16:15,300
crypto Microsoft doesn't want us to do

497
00:16:15,300 --> 00:16:17,940
that so the solution they gave us was we

498
00:16:17,940 --> 00:16:19,740
can run run books on our own virtual

499
00:16:19,740 --> 00:16:23,300
machines via hybrid workers

500
00:16:24,000 --> 00:16:25,620
so there's two types of hybrid workers

501
00:16:25,620 --> 00:16:27,540
there's user in system user hybrid

502
00:16:27,540 --> 00:16:28,800
workers are for running run books like

503
00:16:28,800 --> 00:16:30,660
we just talked about system are for

504
00:16:30,660 --> 00:16:31,980
things like update management another

505
00:16:31,980 --> 00:16:33,660
part of automation we're not going to

506
00:16:33,660 --> 00:16:35,639
talk about that uh they just don't have

507
00:16:35,639 --> 00:16:36,600
the rights to do the things we're

508
00:16:36,600 --> 00:16:38,639
interested in

509
00:16:38,639 --> 00:16:40,680
so some quick background about how

510
00:16:40,680 --> 00:16:42,660
automation accounts authenticate

511
00:16:42,660 --> 00:16:44,399
so there's a few options the first one

512
00:16:44,399 --> 00:16:46,680
you can just stick clear text passwords

513
00:16:46,680 --> 00:16:48,420
in the runbook uh you shouldn't do this

514
00:16:48,420 --> 00:16:51,660
but people do it all the time next up uh

515
00:16:51,660 --> 00:16:52,740
so the next three options are the

516
00:16:52,740 --> 00:16:54,660
supported options uh service principle

517
00:16:54,660 --> 00:16:56,160
credentials service principles are kind

518
00:16:56,160 --> 00:16:58,620
of like service accounts in on-prem ad

519
00:16:58,620 --> 00:17:00,959
you can create a service principle you

520
00:17:00,959 --> 00:17:02,579
put the credentials in the automation

521
00:17:02,579 --> 00:17:03,779
account there is a designated

522
00:17:03,779 --> 00:17:06,900
credentials field uh where like readers

523
00:17:06,900 --> 00:17:09,000
can't view them run as accounts

524
00:17:09,000 --> 00:17:10,319
basically the same thing it creates a

525
00:17:10,319 --> 00:17:11,640
service principle and it stores the

526
00:17:11,640 --> 00:17:13,380
certificate but it does it like

527
00:17:13,380 --> 00:17:14,640
automatically you just get the push one

528
00:17:14,640 --> 00:17:16,380
button uh which is kind of nice and it

529
00:17:16,380 --> 00:17:18,480
has contributor access by default

530
00:17:18,480 --> 00:17:20,339
and finally manage identities this is

531
00:17:20,339 --> 00:17:21,959
what Microsoft wants people to use and

532
00:17:21,959 --> 00:17:23,579
what people probably should be using it

533
00:17:23,579 --> 00:17:24,900
eliminates the problem of hard-coded

534
00:17:24,900 --> 00:17:26,760
credentials which is where so many Azure

535
00:17:26,760 --> 00:17:28,620
problems stem from the token gets

536
00:17:28,620 --> 00:17:30,120
fetched at runtime sometimes you need a

537
00:17:30,120 --> 00:17:31,320
secret to do this which is stored in

538
00:17:31,320 --> 00:17:33,240
environment variables and then you make

539
00:17:33,240 --> 00:17:34,860
a request to the instance metadata

540
00:17:34,860 --> 00:17:37,559
service like an AWS so this is what

541
00:17:37,559 --> 00:17:40,879
Microsoft is pushing people towards

542
00:17:40,980 --> 00:17:42,360
so creating a hybrid worker group is

543
00:17:42,360 --> 00:17:43,860
pretty easy like everything in Azure

544
00:17:43,860 --> 00:17:46,200
just a few button clicks and then you

545
00:17:46,200 --> 00:17:48,840
can add the hybrid worker you can add a

546
00:17:48,840 --> 00:17:50,280
virtual machine so when you actually

547
00:17:50,280 --> 00:17:52,500
install it it installs an extension on

548
00:17:52,500 --> 00:17:55,100
the virtual machine which is the

549
00:17:55,100 --> 00:17:58,260
hybridworkerservice.exe makes sense

550
00:17:58,260 --> 00:17:59,460
uh

551
00:17:59,460 --> 00:18:02,340
okay and then when you run a run book on

552
00:18:02,340 --> 00:18:05,460
that that uh hybrid worker it creates

553
00:18:05,460 --> 00:18:08,700
the orchestrator sandbox.exe process and

554
00:18:08,700 --> 00:18:09,900
right away we looked at the command line

555
00:18:09,900 --> 00:18:11,039
for this and we're like well that's

556
00:18:11,039 --> 00:18:12,660
pretty big command line and there's a

557
00:18:12,660 --> 00:18:14,220
few interesting fields

558
00:18:14,220 --> 00:18:15,539
so

559
00:18:15,539 --> 00:18:18,240
there's a job a runtime data service URI

560
00:18:18,240 --> 00:18:20,340
there's a Sandbox account ID and then

561
00:18:20,340 --> 00:18:21,660
there's a secret whenever you see a

562
00:18:21,660 --> 00:18:22,860
secret we're like okay well what can we

563
00:18:22,860 --> 00:18:26,640
do with this so we looked in memory I

564
00:18:26,640 --> 00:18:28,140
used to use process hacker really quick

565
00:18:28,140 --> 00:18:30,299
triage so go into the memory tab look at

566
00:18:30,299 --> 00:18:31,559
strings then you can search for like

567
00:18:31,559 --> 00:18:33,419
https see what all you're connecting to

568
00:18:33,419 --> 00:18:36,240
and the answer is it's this jrds

569
00:18:36,240 --> 00:18:37,919
endpoint the automation account has an

570
00:18:37,919 --> 00:18:40,140
ID and then there's automation accounts

571
00:18:40,140 --> 00:18:42,500
account ID

572
00:18:42,840 --> 00:18:45,600
and so to actually access this URL uh

573
00:18:45,600 --> 00:18:47,940
you can do it just like we saw

574
00:18:47,940 --> 00:18:49,620
you need a system assigned manage

575
00:18:49,620 --> 00:18:51,120
identity on the virtual machine which

576
00:18:51,120 --> 00:18:52,799
gets created automatically if one

577
00:18:52,799 --> 00:18:54,600
doesn't already exist you just get a

578
00:18:54,600 --> 00:18:56,280
token for that identity and then you can

579
00:18:56,280 --> 00:18:58,860
make a request to that endpoint so the

580
00:18:58,860 --> 00:19:01,740
request I'm making here is uh we're

581
00:19:01,740 --> 00:19:03,059
making a request to see if there's any

582
00:19:03,059 --> 00:19:05,520
new jobs for this sandbox and we get

583
00:19:05,520 --> 00:19:08,580
back nothing because there's no new jobs

584
00:19:08,580 --> 00:19:10,380
uh so we want to know what more we could

585
00:19:10,380 --> 00:19:12,480
do as we start reverse engineering it

586
00:19:12,480 --> 00:19:13,919
um but by reverse engineering I mean I

587
00:19:13,919 --> 00:19:15,960
just guessed uh and I hit the slash

588
00:19:15,960 --> 00:19:17,460
certificates endpoint and got back all

589
00:19:17,460 --> 00:19:18,600
the certificates for the Run for the

590
00:19:18,600 --> 00:19:21,059
automation account uh and if you just

591
00:19:21,059 --> 00:19:22,140
hit this endpoint it gives you all the

592
00:19:22,140 --> 00:19:23,340
certificates back

593
00:19:23,340 --> 00:19:24,840
same thing works for credentials you

594
00:19:24,840 --> 00:19:25,919
have to know the name of the credential

595
00:19:25,919 --> 00:19:27,600
but by default readers can see

596
00:19:27,600 --> 00:19:29,280
credentials uh you can see the names so

597
00:19:29,280 --> 00:19:31,620
this isn't really a barrier

598
00:19:31,620 --> 00:19:33,000
and this is what it looks like in the

599
00:19:33,000 --> 00:19:34,620
decompiled binary you can just drop this

600
00:19:34,620 --> 00:19:36,299
into dnspy that's probably the right way

601
00:19:36,299 --> 00:19:37,440
to do it instead of looking in process

602
00:19:37,440 --> 00:19:39,360
hacker but just automation accounts

603
00:19:39,360 --> 00:19:41,840
credentials

604
00:19:41,880 --> 00:19:43,620
so we submitted this to Microsoft we

605
00:19:43,620 --> 00:19:44,940
thought that this was like okay this is

606
00:19:44,940 --> 00:19:46,500
a privilege escalation from a user who

607
00:19:46,500 --> 00:19:48,600
has access to the virtual machine like a

608
00:19:48,600 --> 00:19:49,980
VM contributor and then they can

609
00:19:49,980 --> 00:19:51,419
escalate to a subscription contributor

610
00:19:51,419 --> 00:19:53,280
we wrote it up submitted it they didn't

611
00:19:53,280 --> 00:19:55,980
think it uh warranted a fix and they did

612
00:19:55,980 --> 00:19:57,840
add a warning to the documentation so I

613
00:19:57,840 --> 00:19:59,460
think it now says warning uh virtual

614
00:19:59,460 --> 00:20:01,679
machine contributors can pull creds

615
00:20:01,679 --> 00:20:03,179
and we didn't think anything of it went

616
00:20:03,179 --> 00:20:05,220
on researched other stuff and we saw

617
00:20:05,220 --> 00:20:07,799
this blog post from the azsec blog a

618
00:20:07,799 --> 00:20:09,000
really awesome blog if you're looking

619
00:20:09,000 --> 00:20:10,740
for some more Azure resources

620
00:20:10,740 --> 00:20:12,240
and his thesis is that you can

621
00:20:12,240 --> 00:20:14,160
compromise a virtual machine if you've

622
00:20:14,160 --> 00:20:15,720
read access to your subscription and

623
00:20:15,720 --> 00:20:17,640
then the admin will push a cert down and

624
00:20:17,640 --> 00:20:19,919
you can use that cert to authenticate

625
00:20:19,919 --> 00:20:22,140
but something that we might take away

626
00:20:22,140 --> 00:20:24,059
from this was his automation account

627
00:20:24,059 --> 00:20:25,559
Keys I've been pen testing in Azure for

628
00:20:25,559 --> 00:20:27,059
a year I'd never heard of this I kind of

629
00:20:27,059 --> 00:20:28,980
thought I was going crazy you only need

630
00:20:28,980 --> 00:20:31,620
reader access in Azure automation to get

631
00:20:31,620 --> 00:20:33,780
these keys and then you use these keys

632
00:20:33,780 --> 00:20:35,580
to add a hybrid worker

633
00:20:35,580 --> 00:20:38,039
so we sort of had like a series of

634
00:20:38,039 --> 00:20:40,440
epiphanies where hybrid workers can read

635
00:20:40,440 --> 00:20:41,760
credentials and certificates from the

636
00:20:41,760 --> 00:20:43,020
automation account

637
00:20:43,020 --> 00:20:44,700
you only need an automation account key

638
00:20:44,700 --> 00:20:46,559
to join a hybrid worker to an automation

639
00:20:46,559 --> 00:20:47,940
account

640
00:20:47,940 --> 00:20:49,620
you only need reader access to get that

641
00:20:49,620 --> 00:20:52,200
key so readers can join a hybrid worker

642
00:20:52,200 --> 00:20:53,160
and then read credentials and

643
00:20:53,160 --> 00:20:55,080
certificates

644
00:20:55,080 --> 00:20:56,700
and that was all great in theory to

645
00:20:56,700 --> 00:20:58,620
actually do this in practice there is

646
00:20:58,620 --> 00:21:00,360
allegedly a hybrid worker Powershell

647
00:21:00,360 --> 00:21:01,799
module I can't get it to work for the

648
00:21:01,799 --> 00:21:03,480
life of me so instead we took some

649
00:21:03,480 --> 00:21:05,039
source code from Microsoft in this

650
00:21:05,039 --> 00:21:08,039
Powershell DOC for Linux repo they have

651
00:21:08,039 --> 00:21:10,740
a register.py script and the bare

652
00:21:10,740 --> 00:21:12,299
minimum process is you generate a

653
00:21:12,299 --> 00:21:13,860
self-signed cert or use an existing one

654
00:21:13,860 --> 00:21:16,320
you get some information about the VM so

655
00:21:16,320 --> 00:21:17,940
like machine name IP address that sort

656
00:21:17,940 --> 00:21:19,799
of thing put all this into Json blob

657
00:21:19,799 --> 00:21:22,380
encrypt it and then you send the info to

658
00:21:22,380 --> 00:21:24,179
the agent SCC endpoint and this is the

659
00:21:24,179 --> 00:21:25,860
same as the endpoint we saw earlier you

660
00:21:25,860 --> 00:21:28,380
just swap out the subdomain

661
00:21:28,380 --> 00:21:30,240
so we can dump creds just like we did

662
00:21:30,240 --> 00:21:32,460
earlier just with one HD sorry one HTTP

663
00:21:32,460 --> 00:21:34,620
request uh you just need to have that

664
00:21:34,620 --> 00:21:36,120
system assigned manage identity and then

665
00:21:36,120 --> 00:21:37,620
if you have a run as accountant use this

666
00:21:37,620 --> 00:21:39,299
is a reader to contributor prevask right

667
00:21:39,299 --> 00:21:41,100
uh because run as accounts have

668
00:21:41,100 --> 00:21:43,980
contributor by default

669
00:21:43,980 --> 00:21:45,900
and managed identities are actually the

670
00:21:45,900 --> 00:21:47,520
fix for this uh so if you're using

671
00:21:47,520 --> 00:21:49,380
managed identities then it wasn't really

672
00:21:49,380 --> 00:21:51,240
a problem because you need that MSI

673
00:21:51,240 --> 00:21:53,640
secret to request credentials and you

674
00:21:53,640 --> 00:21:56,220
can only get the MSI secret if a job was

675
00:21:56,220 --> 00:21:58,200
run on your endpoint so if you weren't

676
00:21:58,200 --> 00:22:00,720
using hybrid workers but you were using

677
00:22:00,720 --> 00:22:02,760
manage identities then you were not at

678
00:22:02,760 --> 00:22:04,559
risk here

679
00:22:04,559 --> 00:22:06,299
and this is just the polling flow for

680
00:22:06,299 --> 00:22:08,039
hybrid workers like I just mentioned so

681
00:22:08,039 --> 00:22:10,620
you sign a run book to run they pull the

682
00:22:10,620 --> 00:22:12,720
this endpoint every 60 seconds first one

683
00:22:12,720 --> 00:22:15,179
to get the job runs it uh you hit this

684
00:22:15,179 --> 00:22:16,620
endpoint with the job ID and then you

685
00:22:16,620 --> 00:22:18,659
get the MSI Secret

686
00:22:18,659 --> 00:22:20,340
so we reported this to Microsoft in

687
00:22:20,340 --> 00:22:23,340
December uh they gave me a bounty on the

688
00:22:23,340 --> 00:22:25,320
31st so nice little Christmas gift there

689
00:22:25,320 --> 00:22:27,600
they apply to fix around the end of

690
00:22:27,600 --> 00:22:28,919
March I don't know if that's the exact

691
00:22:28,919 --> 00:22:30,419
day that's just when I checked it so it

692
00:22:30,419 --> 00:22:32,820
was fixed and we just closed in a blog

693
00:22:32,820 --> 00:22:35,039
on in April

694
00:22:35,039 --> 00:22:38,039
and I had to include this uh one person

695
00:22:38,039 --> 00:22:40,919
and I think 2019 opened an issue on the

696
00:22:40,919 --> 00:22:43,559
Azure GitHub docs repo and they said hey

697
00:22:43,559 --> 00:22:45,419
why does the reader have access to these

698
00:22:45,419 --> 00:22:46,919
automation account Keys the docs say

699
00:22:46,919 --> 00:22:48,179
they don't have access to credentials

700
00:22:48,179 --> 00:22:50,039
right and a Microsoft employee replied

701
00:22:50,039 --> 00:22:51,840
saying no they need to have access to

702
00:22:51,840 --> 00:22:54,539
those to view all resources

703
00:22:54,539 --> 00:22:55,620
um so this is just a good reminder

704
00:22:55,620 --> 00:22:57,480
sometimes Microsoft says something's

705
00:22:57,480 --> 00:23:00,179
okay uh that's not always true sometimes

706
00:23:00,179 --> 00:23:01,740
you get ten thousand dollars for uh

707
00:23:01,740 --> 00:23:03,960
wrong

708
00:23:03,960 --> 00:23:05,340
I really quickly want to talk about cred

709
00:23:05,340 --> 00:23:06,720
manifest a little more this was

710
00:23:06,720 --> 00:23:09,360
discovered by Carl Foss and that's by uh

711
00:23:09,360 --> 00:23:10,620
I just want to talk about this inside I

712
00:23:10,620 --> 00:23:11,760
didn't find this it was all him but I

713
00:23:11,760 --> 00:23:12,960
was I was in the room for it so I

714
00:23:12,960 --> 00:23:14,880
thought it was an interesting topic when

715
00:23:14,880 --> 00:23:16,200
you create a service principle like we

716
00:23:16,200 --> 00:23:17,760
talked about earlier it gets registered

717
00:23:17,760 --> 00:23:19,380
with Azure ID and that handles all the

718
00:23:19,380 --> 00:23:21,539
authentication and all app registrations

719
00:23:21,539 --> 00:23:23,400
in Azure have a manifest which is just a

720
00:23:23,400 --> 00:23:25,679
Json file containing some info about it

721
00:23:25,679 --> 00:23:27,720
and service principles get assigned

722
00:23:27,720 --> 00:23:29,640
credentials with certificates or

723
00:23:29,640 --> 00:23:31,919
passwords and manifests for service

724
00:23:31,919 --> 00:23:33,900
principles they have a key credentials

725
00:23:33,900 --> 00:23:35,700
entry if you use certificates with the

726
00:23:35,700 --> 00:23:37,200
public key supposed to be the public key

727
00:23:37,200 --> 00:23:38,760
but for a few months they're pushing

728
00:23:38,760 --> 00:23:41,100
down private keys so any user with

729
00:23:41,100 --> 00:23:42,780
reader access and Azure ID could pull

730
00:23:42,780 --> 00:23:44,460
this up this private key and then

731
00:23:44,460 --> 00:23:46,080
authenticate to the subscription as that

732
00:23:46,080 --> 00:23:47,760
service principal

733
00:23:47,760 --> 00:23:49,940
foreign

734
00:23:50,059 --> 00:23:51,900
we're kind of going to lightening round

735
00:23:51,900 --> 00:23:53,159
through a few of those techniques I

736
00:23:53,159 --> 00:23:54,539
talked about earlier

737
00:23:54,539 --> 00:23:56,340
um where they're not not huge things but

738
00:23:56,340 --> 00:23:58,320
just some neat neat tips and tricks that

739
00:23:58,320 --> 00:24:00,299
you might find useful

740
00:24:00,299 --> 00:24:02,460
so first up virtual machine extensions I

741
00:24:02,460 --> 00:24:03,840
like talking about this because I found

742
00:24:03,840 --> 00:24:07,320
this before I was like an Azure guy uh I

743
00:24:07,320 --> 00:24:09,600
was trying to do this thing Jake Carnes

744
00:24:09,600 --> 00:24:11,700
published a Blog a few years ago uh when

745
00:24:11,700 --> 00:24:13,320
you run a custom script extension on an

746
00:24:13,320 --> 00:24:15,360
Azure VM it stores the settings on the

747
00:24:15,360 --> 00:24:17,760
VM and then if you have a local admin

748
00:24:17,760 --> 00:24:19,620
you can dump those and sometimes you can

749
00:24:19,620 --> 00:24:22,140
find secrets in those settings pretty

750
00:24:22,140 --> 00:24:24,900
frequently actually and I wanted to to

751
00:24:24,900 --> 00:24:27,179
do this across a whole host of VMS but I

752
00:24:27,179 --> 00:24:28,320
didn't want to run it on all of them I

753
00:24:28,320 --> 00:24:30,120
wanted to know okay where do we have

754
00:24:30,120 --> 00:24:31,679
custom script extensions so we can kind

755
00:24:31,679 --> 00:24:33,960
of triage this and the VM extensions

756
00:24:33,960 --> 00:24:35,280
have a public and a private settings

757
00:24:35,280 --> 00:24:37,320
field so like I said the secret should

758
00:24:37,320 --> 00:24:38,520
go in the private settings field but

759
00:24:38,520 --> 00:24:39,659
sometimes they go in the public settings

760
00:24:39,659 --> 00:24:41,460
field I've seen this a lot with uh with

761
00:24:41,460 --> 00:24:43,740
DSC desire to State configuration a lot

762
00:24:43,740 --> 00:24:45,120
of storage account Keys sometimes get

763
00:24:45,120 --> 00:24:46,320
pushed in there

764
00:24:46,320 --> 00:24:47,940
you only need reader access to run this

765
00:24:47,940 --> 00:24:49,020
command it'll dump out all the

766
00:24:49,020 --> 00:24:50,880
extensions and then you can just grab

767
00:24:50,880 --> 00:24:53,520
through for secrets

768
00:24:53,520 --> 00:24:55,440
next up is policy definitions so

769
00:24:55,440 --> 00:24:57,120
policies in Azure you can use them to

770
00:24:57,120 --> 00:24:58,559
manage resources and make sure they

771
00:24:58,559 --> 00:25:00,900
conform to some standards so you have a

772
00:25:00,900 --> 00:25:02,100
bunch of VMS you want to say okay do

773
00:25:02,100 --> 00:25:03,900
these all have a certain patch for SQL

774
00:25:03,900 --> 00:25:05,400
Server installed you can write a policy

775
00:25:05,400 --> 00:25:07,380
for that and then if it doesn't have the

776
00:25:07,380 --> 00:25:08,580
correct patch you can apply a

777
00:25:08,580 --> 00:25:11,280
remediation action so and go ahead and

778
00:25:11,280 --> 00:25:12,720
install it yourself so sometimes

779
00:25:12,720 --> 00:25:14,580
credentials get leaked in the policy

780
00:25:14,580 --> 00:25:16,620
definitions or assignments these are two

781
00:25:16,620 --> 00:25:19,020
really uh really clunky commands these

782
00:25:19,020 --> 00:25:20,159
will dump out just all the policy

783
00:25:20,159 --> 00:25:21,960
definitions all the assignments convert

784
00:25:21,960 --> 00:25:24,600
them into Json dump them and again you

785
00:25:24,600 --> 00:25:26,039
can you can grab through these for

786
00:25:26,039 --> 00:25:28,380
passwords

787
00:25:28,380 --> 00:25:31,380
function at file systems are function

788
00:25:31,380 --> 00:25:32,700
apps or Windows and Linux containers

789
00:25:32,700 --> 00:25:34,380
they expose API functions that you can

790
00:25:34,380 --> 00:25:37,500
then call a part of the app Services uh

791
00:25:37,500 --> 00:25:39,419
service line and there's a file system

792
00:25:39,419 --> 00:25:40,799
you can interact with so if you want to

793
00:25:40,799 --> 00:25:42,240
publish your code you go and you publish

794
00:25:42,240 --> 00:25:44,760
it to an actual file system contributors

795
00:25:44,760 --> 00:25:46,740
can do this with the console tab but

796
00:25:46,740 --> 00:25:48,360
readers only have access to the app

797
00:25:48,360 --> 00:25:50,159
files tab and the output from this is

798
00:25:50,159 --> 00:25:51,600
not recursive

799
00:25:51,600 --> 00:25:53,220
so you can see here this is the app

800
00:25:53,220 --> 00:25:55,080
files tab you click on this drop down it

801
00:25:55,080 --> 00:25:58,100
shows you host.json super secret.json

802
00:25:58,100 --> 00:26:01,320
uh but if you make a request to the rest

803
00:26:01,320 --> 00:26:03,900
API manually you see there's actually a

804
00:26:03,900 --> 00:26:05,760
folder even more secrets which just

805
00:26:05,760 --> 00:26:07,980
doesn't get displayed to us

806
00:26:07,980 --> 00:26:09,960
and then you can make a second HTTP

807
00:26:09,960 --> 00:26:12,539
request to this folder and you can see

808
00:26:12,539 --> 00:26:14,039
okay well there's another super duper

809
00:26:14,039 --> 00:26:17,220
secret in there which we want so

810
00:26:17,220 --> 00:26:19,080
just a trick sometimes you can get like

811
00:26:19,080 --> 00:26:21,720
dlls or configuration files get stored

812
00:26:21,720 --> 00:26:24,240
in folders uh and in Azure we're just

813
00:26:24,240 --> 00:26:25,260
always looking for these weird little

814
00:26:25,260 --> 00:26:28,020
misconfigurations

815
00:26:28,020 --> 00:26:30,419
next up is service principle secrets

816
00:26:30,419 --> 00:26:31,980
I found this a few months ago I think I

817
00:26:31,980 --> 00:26:32,940
tweeted about it but I never really

818
00:26:32,940 --> 00:26:34,260
talked about it or did anything with it

819
00:26:34,260 --> 00:26:36,419
but basically uh service principle

820
00:26:36,419 --> 00:26:37,919
Secrets when you generate them they

821
00:26:37,919 --> 00:26:40,140
follow a certain format so it's five

822
00:26:40,140 --> 00:26:41,700
letters and then a tilde character I

823
00:26:41,700 --> 00:26:42,900
think a few months ago this was actually

824
00:26:42,900 --> 00:26:45,240
different but I can't remember for sure

825
00:26:45,240 --> 00:26:47,340
but so it may change but anyway after

826
00:26:47,340 --> 00:26:50,039
generating them uh you can see the first

827
00:26:50,039 --> 00:26:51,720
three characters of the passwords and

828
00:26:51,720 --> 00:26:53,279
that second screenshot and like the

829
00:26:53,279 --> 00:26:54,659
third column it's the first three

830
00:26:54,659 --> 00:26:56,700
characters and you can use these to hunt

831
00:26:56,700 --> 00:26:58,140
for passwords because you run your

832
00:26:58,140 --> 00:26:59,640
microverse tooling your powers your

833
00:26:59,640 --> 00:27:00,960
tooling all that you've dumped out all

834
00:27:00,960 --> 00:27:02,880
this stuff now you can grep for these

835
00:27:02,880 --> 00:27:04,440
three characters and if you find them

836
00:27:04,440 --> 00:27:07,020
then go ahead grab 32 characters the

837
00:27:07,020 --> 00:27:08,640
size of the the secret

838
00:27:08,640 --> 00:27:10,200
and you might actually be able to just

839
00:27:10,200 --> 00:27:11,520
automatically find service principle

840
00:27:11,520 --> 00:27:12,840
secrets

841
00:27:12,840 --> 00:27:14,820
and you can automatically validate them

842
00:27:14,820 --> 00:27:16,200
too which is really cool because we have

843
00:27:16,200 --> 00:27:18,000
this problem in Azure where it's hard to

844
00:27:18,000 --> 00:27:19,559
know when you found a credential without

845
00:27:19,559 --> 00:27:21,720
like a person Hands-On keyboard uh

846
00:27:21,720 --> 00:27:23,159
verifying it

847
00:27:23,159 --> 00:27:25,200
but since you already know that you have

848
00:27:25,200 --> 00:27:27,360
this credential and you have the app ID

849
00:27:27,360 --> 00:27:29,279
for the service principle you can use

850
00:27:29,279 --> 00:27:31,200
this snippet of Powershell code to dump

851
00:27:31,200 --> 00:27:33,120
out all the credentials and then you can

852
00:27:33,120 --> 00:27:35,159
run this connect AZ account which is how

853
00:27:35,159 --> 00:27:36,720
you authenticate as a service principle

854
00:27:36,720 --> 00:27:38,220
and if it works then you know you found

855
00:27:38,220 --> 00:27:40,740
a valid credential

856
00:27:40,740 --> 00:27:42,720
and this leads to some kind of cool

857
00:27:42,720 --> 00:27:44,279
possibilities it's kind of fragile you

858
00:27:44,279 --> 00:27:45,539
know because automated credential

859
00:27:45,539 --> 00:27:47,640
Discovery is always hard but uh when we

860
00:27:47,640 --> 00:27:49,320
find and validate it we can compare the

861
00:27:49,320 --> 00:27:51,539
permissions of our new user to our old

862
00:27:51,539 --> 00:27:53,580
user the one we're currently in and then

863
00:27:53,580 --> 00:27:55,380
if it has different privileges we can

864
00:27:55,380 --> 00:27:56,880
just rerun the tooling to get the new

865
00:27:56,880 --> 00:27:58,980
resources and you can do this ad nausea

866
00:27:58,980 --> 00:28:00,720
I'm assuming you keep finding resources

867
00:28:00,720 --> 00:28:03,179
or keep finding credentials and you can

868
00:28:03,179 --> 00:28:04,440
automatically pivot between different

869
00:28:04,440 --> 00:28:06,299
users and subscriptions I wrote a kind

870
00:28:06,299 --> 00:28:08,340
of crappy proof of concept called AZ

871
00:28:08,340 --> 00:28:10,440
Auto poem a while ago which you can see

872
00:28:10,440 --> 00:28:12,120
doing that so we we find a service

873
00:28:12,120 --> 00:28:14,580
principle credential in I think it was a

874
00:28:14,580 --> 00:28:17,220
app in a automation account and then

875
00:28:17,220 --> 00:28:18,480
there's one a function app or something

876
00:28:18,480 --> 00:28:19,679
like that and you can pivot between

877
00:28:19,679 --> 00:28:23,220
different subscriptions automatically

878
00:28:23,220 --> 00:28:25,620
and really quickly this is just a life

879
00:28:25,620 --> 00:28:28,140
hack for Azure uh this is using the rest

880
00:28:28,140 --> 00:28:29,880
API which kind of undergirds all of

881
00:28:29,880 --> 00:28:31,679
azure so anytime you're interacting with

882
00:28:31,679 --> 00:28:34,140
the Powershell commandlets or the CLI

883
00:28:34,140 --> 00:28:35,580
you're you're actually just using the

884
00:28:35,580 --> 00:28:38,279
rest API but it's abstracted away so you

885
00:28:38,279 --> 00:28:39,659
can find a lot of really weird stuff by

886
00:28:39,659 --> 00:28:41,880
just hitting the rest API manually so if

887
00:28:41,880 --> 00:28:43,860
you run this command it will just get

888
00:28:43,860 --> 00:28:45,659
all the resources in your Azure tenant

889
00:28:45,659 --> 00:28:47,220
and then you can go ahead and iterate

890
00:28:47,220 --> 00:28:48,539
through each one get all the information

891
00:28:48,539 --> 00:28:50,460
about them and sometimes you just find

892
00:28:50,460 --> 00:28:52,320
plain text passwords in there that like

893
00:28:52,320 --> 00:28:54,840
nobody's talked about before uh that

894
00:28:54,840 --> 00:28:56,940
sort of thing

895
00:28:56,940 --> 00:28:58,440
some really quick defensive

896
00:28:58,440 --> 00:29:01,200
considerations uh high-level things use

897
00:29:01,200 --> 00:29:03,120
managed identities wherever possible get

898
00:29:03,120 --> 00:29:05,279
out of using Renaissance counts like we

899
00:29:05,279 --> 00:29:06,299
talked about earlier they would have

900
00:29:06,299 --> 00:29:07,559
they would have saved people from that

901
00:29:07,559 --> 00:29:09,779
hybrid worker bug don't start with

902
00:29:09,779 --> 00:29:11,580
faster than Services it's hard but

903
00:29:11,580 --> 00:29:13,860
managed identities are the fix for that

904
00:29:13,860 --> 00:29:15,600
and then think of your Azure tenant in

905
00:29:15,600 --> 00:29:17,700
graphs uh Andy Robbins talks about this

906
00:29:17,700 --> 00:29:19,679
a lot with with Azure hounds

907
00:29:19,679 --> 00:29:20,820
um and I really do think it's the best

908
00:29:20,820 --> 00:29:22,200
way to think about it because if you

909
00:29:22,200 --> 00:29:23,520
have an automation account with global

910
00:29:23,520 --> 00:29:25,740
admin then all the contributors to this

911
00:29:25,740 --> 00:29:27,539
automation account or Global admin and

912
00:29:27,539 --> 00:29:29,039
like we saw you can get some really

913
00:29:29,039 --> 00:29:30,840
weird situations in Azure with weird

914
00:29:30,840 --> 00:29:33,179
permissions on weird resources and

915
00:29:33,179 --> 00:29:34,860
finally regularly audit access and

916
00:29:34,860 --> 00:29:37,320
revoke it when not needed if if you have

917
00:29:37,320 --> 00:29:38,580
an automation account that no longer

918
00:29:38,580 --> 00:29:40,860
needs access to this subscription then

919
00:29:40,860 --> 00:29:42,360
go ahead and revoke that there's good

920
00:29:42,360 --> 00:29:44,220
practice

921
00:29:44,220 --> 00:29:45,659
and these are a few resources if you

922
00:29:45,659 --> 00:29:46,620
want to learn more about Azure security

923
00:29:46,620 --> 00:29:49,200
uh like I mentioned Andy Robbins uh Carl

924
00:29:49,200 --> 00:29:52,440
fosten Lena lau and Jake Carnes

925
00:29:52,440 --> 00:29:54,840
and these are a few blogs so Specter Ops

926
00:29:54,840 --> 00:29:57,659
and that's by inverse code and the Aztec

927
00:29:57,659 --> 00:29:58,860
blog if you want to get up to date on

928
00:29:58,860 --> 00:30:00,960
Azure research you can you can get

929
00:30:00,960 --> 00:30:02,820
pretty pretty up to date just through

930
00:30:02,820 --> 00:30:04,799
these resources

931
00:30:04,799 --> 00:30:06,419
and that's all I have uh thank you so

932
00:30:06,419 --> 00:30:08,039
much for attending uh if there's any

933
00:30:08,039 --> 00:30:09,059
questions you can ask them now or you

934
00:30:09,059 --> 00:30:11,899
can find me afterwards

