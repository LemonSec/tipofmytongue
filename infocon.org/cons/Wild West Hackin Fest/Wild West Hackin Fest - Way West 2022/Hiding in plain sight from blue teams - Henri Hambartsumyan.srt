1
00:00:02,159 --> 00:00:05,119
foreign

2
00:00:05,420 --> 00:00:08,820
welcome to three o'clock and hiding in

3
00:00:08,820 --> 00:00:10,740
plain sight from Blue teams with Henry

4
00:00:10,740 --> 00:00:13,139
Henry's got a background in offensive

5
00:00:13,139 --> 00:00:14,759
security has been working in the area of

6
00:00:14,759 --> 00:00:16,440
pen testing and security assessments for

7
00:00:16,440 --> 00:00:18,600
about 10 years uh during this time he's

8
00:00:18,600 --> 00:00:19,980
been doing a large number of these

9
00:00:19,980 --> 00:00:22,140
projects worldwide one of the founders

10
00:00:22,140 --> 00:00:24,180
of Falcon Force which focuses on

11
00:00:24,180 --> 00:00:25,920
combining red and blue knowledge

12
00:00:25,920 --> 00:00:27,599
together kind of purple teething stuff

13
00:00:27,599 --> 00:00:29,580
uh he's been working on red team

14
00:00:29,580 --> 00:00:31,140
engagements for clients worldwide

15
00:00:31,140 --> 00:00:32,579
challenging environments strong blue

16
00:00:32,579 --> 00:00:35,040
teams a lot of experience trying to to

17
00:00:35,040 --> 00:00:36,719
hide in in plain sight here are going to

18
00:00:36,719 --> 00:00:38,640
learn from him about that today

19
00:00:38,640 --> 00:00:41,040
uh the The Blue Team knowledge there

20
00:00:41,040 --> 00:00:43,079
helps with the red team we feed each

21
00:00:43,079 --> 00:00:44,460
other right

22
00:00:44,460 --> 00:00:46,680
so this um The Experience he's got

23
00:00:46,680 --> 00:00:48,600
bypassing edrs and blue teams is

24
00:00:48,600 --> 00:00:50,039
directly used to build detections and

25
00:00:50,039 --> 00:00:51,360
the closed gaps that are left by the

26
00:00:51,360 --> 00:00:54,440
edrs uh in his spare time he enjoys

27
00:00:54,440 --> 00:00:56,879
low-level development like the rest of

28
00:00:56,879 --> 00:00:59,579
us right uh reverse engineering and

29
00:00:59,579 --> 00:01:01,620
occasionally he gets out of the office

30
00:01:01,620 --> 00:01:05,179
and races motorbikes okay

31
00:01:05,720 --> 00:01:07,619
thank you

32
00:01:07,619 --> 00:01:09,119
hi everyone

33
00:01:09,119 --> 00:01:11,460
um yeah so I think the whole intro was I

34
00:01:11,460 --> 00:01:12,540
was already there

35
00:01:12,540 --> 00:01:15,240
my name is Henry I do purple teaming at

36
00:01:15,240 --> 00:01:17,340
Falcon Force so I have a background in

37
00:01:17,340 --> 00:01:19,920
offensive security mostly I think for

38
00:01:19,920 --> 00:01:22,560
the last 10 years or so I guess I've

39
00:01:22,560 --> 00:01:25,200
been doing a lot of offensive work uh in

40
00:01:25,200 --> 00:01:26,820
the last two two and a half years I've

41
00:01:26,820 --> 00:01:29,820
also been inspired to do some some blue

42
00:01:29,820 --> 00:01:31,979
teaming work as well I've been doing

43
00:01:31,979 --> 00:01:34,320
quite some detection Engineering in the

44
00:01:34,320 --> 00:01:36,659
last uh well two two and a half years

45
00:01:36,659 --> 00:01:39,720
and trying to use all the all the red

46
00:01:39,720 --> 00:01:41,340
team tricks and all the red team

47
00:01:41,340 --> 00:01:44,640
knowledge to build uh detections for all

48
00:01:44,640 --> 00:01:47,400
those all those tricks

49
00:01:47,400 --> 00:01:49,619
um I have a focus on the Microsoft

50
00:01:49,619 --> 00:01:51,299
Stacks I work a lot with Sentinel

51
00:01:51,299 --> 00:01:53,040
Defender for endpoint defender of

52
00:01:53,040 --> 00:01:54,720
identity and all the other Defender 4

53
00:01:54,720 --> 00:01:57,240
products from Microsoft

54
00:01:57,240 --> 00:01:59,520
um I'm a first time speaker so it's the

55
00:01:59,520 --> 00:02:01,619
first time I'm speaking at least on a

56
00:02:01,619 --> 00:02:03,780
public conference

57
00:02:03,780 --> 00:02:04,920
um

58
00:02:04,920 --> 00:02:08,580
yeah so that's that's about it about me

59
00:02:08,580 --> 00:02:10,919
um I think the the outline for talk

60
00:02:10,919 --> 00:02:14,400
today what I mostly will talk about is

61
00:02:14,400 --> 00:02:17,640
uh software which is misbehaving

62
00:02:17,640 --> 00:02:19,340
um

63
00:02:19,340 --> 00:02:22,140
in in more detail of course but I think

64
00:02:22,140 --> 00:02:25,260
like 40 50 60 of the talk is is about

65
00:02:25,260 --> 00:02:28,620
it's are examples of software which are

66
00:02:28,620 --> 00:02:30,840
misbehaving uh and are behaving like

67
00:02:30,840 --> 00:02:32,520
malicious software basically while it's

68
00:02:32,520 --> 00:02:34,680
legit software and how you can abuse

69
00:02:34,680 --> 00:02:37,319
that as a as an attacker uh in your

70
00:02:37,319 --> 00:02:39,420
advantage

71
00:02:39,420 --> 00:02:41,459
um so that's what we'll talk about I'll

72
00:02:41,459 --> 00:02:43,379
give a short intro on that

73
00:02:43,379 --> 00:02:44,940
um we'll discuss how detections are

74
00:02:44,940 --> 00:02:46,800
built in general by blue team so how how

75
00:02:46,800 --> 00:02:48,780
they work and and why they need filters

76
00:02:48,780 --> 00:02:51,000
in their in their detections

77
00:02:51,000 --> 00:02:52,620
um we'll talk about

78
00:02:52,620 --> 00:02:54,120
um why we want to hide in plain sight

79
00:02:54,120 --> 00:02:55,620
because ninja of course all these

80
00:02:55,620 --> 00:02:57,660
awesome EDR bypasses so why do you want

81
00:02:57,660 --> 00:02:58,920
to hide in the first place you can just

82
00:02:58,920 --> 00:03:01,560
bypass the EDR

83
00:03:01,560 --> 00:03:03,620
um I'll touch upon

84
00:03:03,620 --> 00:03:05,760
most of the talk will be about how to

85
00:03:05,760 --> 00:03:07,620
hide what are the different tricks what

86
00:03:07,620 --> 00:03:09,480
are the different uh techniques to do

87
00:03:09,480 --> 00:03:12,300
that no no I have very short slide on

88
00:03:12,300 --> 00:03:13,860
how to improve the resilience of your

89
00:03:13,860 --> 00:03:15,720
detections so if you're if you're a blue

90
00:03:15,720 --> 00:03:18,000
teamers I think that this talk is mostly

91
00:03:18,000 --> 00:03:20,819
aimed for red team purposes

92
00:03:20,819 --> 00:03:22,200
um but I guess there will be some

93
00:03:22,200 --> 00:03:24,060
lessons learned as well for uh for blue

94
00:03:24,060 --> 00:03:26,340
teamers

95
00:03:26,340 --> 00:03:28,200
um so let's get let's get started I

96
00:03:28,200 --> 00:03:30,840
think the whole idea started with

97
00:03:30,840 --> 00:03:31,500
um

98
00:03:31,500 --> 00:03:35,220
me being an interacting project and

99
00:03:35,220 --> 00:03:37,200
thinking about well this this Behavior

100
00:03:37,200 --> 00:03:39,180
should never happen in in a in a real

101
00:03:39,180 --> 00:03:41,220
environment in production environment I

102
00:03:41,220 --> 00:03:42,840
think one example which I I very

103
00:03:42,840 --> 00:03:44,940
distinctly remember is

104
00:03:44,940 --> 00:03:48,659
um office macros which do win32 API

105
00:03:48,659 --> 00:03:51,299
calls I mean thing that never happens in

106
00:03:51,299 --> 00:03:52,500
the production environment right so it

107
00:03:52,500 --> 00:03:54,420
should be super easy to detect any kind

108
00:03:54,420 --> 00:03:55,860
of malicious software which is doing a

109
00:03:55,860 --> 00:03:57,900
virtual analog or doing uh doing create

110
00:03:57,900 --> 00:04:00,900
remote threat from a macro that never

111
00:04:00,900 --> 00:04:02,700
happens to production and then you start

112
00:04:02,700 --> 00:04:05,519
looking at the wait well it does happen

113
00:04:05,519 --> 00:04:07,739
Okay that's weird well

114
00:04:07,739 --> 00:04:09,900
my bad

115
00:04:09,900 --> 00:04:11,340
um and then you look into it a bit more

116
00:04:11,340 --> 00:04:13,080
trying to build an actual detection for

117
00:04:13,080 --> 00:04:14,640
those kind of things

118
00:04:14,640 --> 00:04:16,680
and you'll see that well it does happen

119
00:04:16,680 --> 00:04:18,660
it happens perhaps quite often but it's

120
00:04:18,660 --> 00:04:20,160
most like two or three or five different

121
00:04:20,160 --> 00:04:21,779
applications doing that kind of stuff so

122
00:04:21,779 --> 00:04:23,880
what you do as a detection engineer when

123
00:04:23,880 --> 00:04:26,520
you do as a as a soccer as a blue team

124
00:04:26,520 --> 00:04:29,580
is take the idea of the attack filter

125
00:04:29,580 --> 00:04:31,680
out all those misbehaving applications

126
00:04:31,680 --> 00:04:35,160
so the sap applications misbehaving so

127
00:04:35,160 --> 00:04:36,300
I'm going to skip that one from my

128
00:04:36,300 --> 00:04:39,900
filter or put that in my filter and skip

129
00:04:39,900 --> 00:04:42,540
um on alerting on that

130
00:04:42,540 --> 00:04:45,419
um and I have a working detection

131
00:04:45,419 --> 00:04:47,639
and then you do the same trick for it

132
00:04:47,639 --> 00:04:48,840
for a different environment for a

133
00:04:48,840 --> 00:04:49,800
different client and then you'll see

134
00:04:49,800 --> 00:04:51,180
wait a minute this is the same software

135
00:04:51,180 --> 00:04:52,919
doing the same thing so it's just this

136
00:04:52,919 --> 00:04:54,660
is just a generic behavior for this for

137
00:04:54,660 --> 00:04:56,280
this piece of software

138
00:04:56,280 --> 00:04:57,960
and at some point that well wait a

139
00:04:57,960 --> 00:05:00,240
minute if this happens and this is

140
00:05:00,240 --> 00:05:03,240
malicious behavior it's legit well it's

141
00:05:03,240 --> 00:05:05,220
legit software acting very malicious so

142
00:05:05,220 --> 00:05:07,320
I can also abuse that and that's where

143
00:05:07,320 --> 00:05:09,479
this whole idea started came from

144
00:05:09,479 --> 00:05:13,219
I just want to start off with an example

145
00:05:14,040 --> 00:05:16,259
um and I'll I'll show a lot of these

146
00:05:16,259 --> 00:05:18,000
screenshots here on the on the in the

147
00:05:18,000 --> 00:05:19,500
presentation these are the screenshots

148
00:05:19,500 --> 00:05:20,880
from Defender endpoint if you're not

149
00:05:20,880 --> 00:05:22,620
familiar with the product and I'll try

150
00:05:22,620 --> 00:05:24,000
to go through the queries because I'm

151
00:05:24,000 --> 00:05:25,800
I'm I guess not everyone is super

152
00:05:25,800 --> 00:05:27,180
familiar with the query language just

153
00:05:27,180 --> 00:05:28,820
just to show you what's what's going on

154
00:05:28,820 --> 00:05:31,620
so the first example on how this all

155
00:05:31,620 --> 00:05:33,180
started is

156
00:05:33,180 --> 00:05:35,820
um my initial assumption was no process

157
00:05:35,820 --> 00:05:37,740
should read the LSS memory because why

158
00:05:37,740 --> 00:05:39,600
would I don't know some random process

159
00:05:39,600 --> 00:05:41,699
need to read memory from else as it

160
00:05:41,699 --> 00:05:43,020
never happens right

161
00:05:43,020 --> 00:05:46,440
so I wrote a very simple query which

162
00:05:46,440 --> 00:05:49,259
looks at all the read process memory API

163
00:05:49,259 --> 00:05:51,720
calls where the target of the reproached

164
00:05:51,720 --> 00:05:54,120
memory is lsas and then I did a count

165
00:05:54,120 --> 00:05:55,919
and you see the number coming up it's

166
00:05:55,919 --> 00:05:58,560
like you know 99

167
00:05:58,560 --> 00:06:00,479
million or so now I don't even know it's

168
00:06:00,479 --> 00:06:03,060
it's a lot I was wondering why are all

169
00:06:03,060 --> 00:06:04,680
these processes reading elsewhere that

170
00:06:04,680 --> 00:06:07,139
shouldn't happen right well it does

171
00:06:07,139 --> 00:06:09,479
it clearly does so then go to the next

172
00:06:09,479 --> 00:06:11,460
idea and just see okay who is doing that

173
00:06:11,460 --> 00:06:13,259
so what I'm doing here is just looking

174
00:06:13,259 --> 00:06:15,000
at the read process memory API call

175
00:06:15,000 --> 00:06:19,199
again where the target of the read is LS

176
00:06:19,199 --> 00:06:22,319
and I'm summarizing by the file name

177
00:06:22,319 --> 00:06:24,180
which is actually reading Elsa's memory

178
00:06:24,180 --> 00:06:26,340
so this is like a group by if you're if

179
00:06:26,340 --> 00:06:28,680
you're more of a SQL guy so doing Group

180
00:06:28,680 --> 00:06:31,740
by on on file name just getting accounts

181
00:06:31,740 --> 00:06:34,560
and then you see that like 590 in this

182
00:06:34,560 --> 00:06:36,060
environment at least this is this is an

183
00:06:36,060 --> 00:06:37,560
example well this is a production

184
00:06:37,560 --> 00:06:40,020
environment from one of our clients

185
00:06:40,020 --> 00:06:42,660
you'll see at 590 unique files are

186
00:06:42,660 --> 00:06:45,660
reading LSS memory and this is and the

187
00:06:45,660 --> 00:06:47,100
count here indicates how often is that

188
00:06:47,100 --> 00:06:49,800
this has happened per file that's it's

189
00:06:49,800 --> 00:06:52,039
insane

190
00:06:52,039 --> 00:06:56,220
okay so how do we detect

191
00:06:56,220 --> 00:06:58,199
um credential dumps from LSS then if if

192
00:06:58,199 --> 00:07:01,020
there are so many files reading it well

193
00:07:01,020 --> 00:07:02,639
the next idea was

194
00:07:02,639 --> 00:07:04,259
what if you look at the number of bytes

195
00:07:04,259 --> 00:07:06,720
which are being read from uh from uh

196
00:07:06,720 --> 00:07:08,400
from the else's memory because the

197
00:07:08,400 --> 00:07:10,080
defender for endpoint product actually

198
00:07:10,080 --> 00:07:12,240
logs how many bytes are being read

199
00:07:12,240 --> 00:07:14,699
so if you do reprocess uh process memory

200
00:07:14,699 --> 00:07:16,020
and you read the number of whites it's

201
00:07:16,020 --> 00:07:18,780
actually being logged here

202
00:07:18,780 --> 00:07:21,300
okay well let's let's see how many of

203
00:07:21,300 --> 00:07:22,740
these

204
00:07:22,740 --> 00:07:24,660
um of this process is actually a really

205
00:07:24,660 --> 00:07:26,099
significant amount of memory because if

206
00:07:26,099 --> 00:07:27,900
you want to do a memory dump of lsas and

207
00:07:27,900 --> 00:07:29,699
get credentials out of it you need to

208
00:07:29,699 --> 00:07:31,259
dump well we need to create a core dump

209
00:07:31,259 --> 00:07:33,120
and that's usually I mean it depends on

210
00:07:33,120 --> 00:07:34,380
the system but that's usually I don't

211
00:07:34,380 --> 00:07:37,199
know like 10 15 megabytes at least and

212
00:07:37,199 --> 00:07:39,060
usually it's around 50 to 60 and if it's

213
00:07:39,060 --> 00:07:40,740
like a server with a lot of users on it

214
00:07:40,740 --> 00:07:43,139
it will probably be around 100 megabytes

215
00:07:43,139 --> 00:07:44,099
or so

216
00:07:44,099 --> 00:07:47,220
so that should stand out right

217
00:07:47,220 --> 00:07:50,160
um so we'll try with five first so what

218
00:07:50,160 --> 00:07:52,319
I'm what I'm doing here again for the

219
00:07:52,319 --> 00:07:55,740
non uh kql people just doing the same

220
00:07:55,740 --> 00:07:59,819
query looking at memory reads from lsas

221
00:07:59,819 --> 00:08:00,539
um

222
00:08:00,539 --> 00:08:02,160
and they're looking for the total bytes

223
00:08:02,160 --> 00:08:05,099
copied which is more than five times 124

224
00:08:05,099 --> 00:08:06,780
times 124 so more than five megabytes

225
00:08:06,780 --> 00:08:08,160
basically

226
00:08:08,160 --> 00:08:10,139
summarizing Group by again and I'll get

227
00:08:10,139 --> 00:08:11,819
a bunch of results

228
00:08:11,819 --> 00:08:13,919
um and you'll see msmp Angus is the

229
00:08:13,919 --> 00:08:15,539
biggest offender which makes sense right

230
00:08:15,539 --> 00:08:18,780
because MSM being is the defender for uh

231
00:08:18,780 --> 00:08:20,580
it's the defender AV agent so the

232
00:08:20,580 --> 00:08:22,379
Windows Defender agent is is that

233
00:08:22,379 --> 00:08:24,599
process it makes sense that that the AV

234
00:08:24,599 --> 00:08:26,580
product is reading uh reading process

235
00:08:26,580 --> 00:08:27,660
memory

236
00:08:27,660 --> 00:08:30,720
uh but then there's also wmi the the

237
00:08:30,720 --> 00:08:33,899
this is the wmi host process why is wmi

238
00:08:33,899 --> 00:08:35,219
reading that

239
00:08:35,219 --> 00:08:36,539
why is it reading more than five

240
00:08:36,539 --> 00:08:38,399
megabytes of memory from from elsewhere

241
00:08:38,399 --> 00:08:40,620
that's a bit weird but okay it is what

242
00:08:40,620 --> 00:08:42,179
it is and this is still too much to

243
00:08:42,179 --> 00:08:44,279
alert on

244
00:08:44,279 --> 00:08:46,680
if you build detection rule

245
00:08:46,680 --> 00:08:48,839
as a blue team or as a sock on with with

246
00:08:48,839 --> 00:08:51,120
this you'll just be flooded by alert I

247
00:08:51,120 --> 00:08:52,920
mean it's like

248
00:08:52,920 --> 00:08:54,480
um

249
00:08:54,480 --> 00:08:58,200
sorry it's like six well 1600 plus 300

250
00:08:58,200 --> 00:09:00,180
plus 100 all these alerts add up

251
00:09:00,180 --> 00:09:01,140
basically

252
00:09:01,140 --> 00:09:02,940
you don't want to do that

253
00:09:02,940 --> 00:09:04,560
so what if you set the threshold a bit

254
00:09:04,560 --> 00:09:08,040
higher so just randomly removing MSM

255
00:09:08,040 --> 00:09:09,180
being

256
00:09:09,180 --> 00:09:11,640
because that's the defender for the

257
00:09:11,640 --> 00:09:14,040
defender AV product and and this is the

258
00:09:14,040 --> 00:09:15,720
first filter already so you see what's

259
00:09:15,720 --> 00:09:18,720
going on here I'm just ignoring the

260
00:09:18,720 --> 00:09:22,080
defender AV agent or at least the file

261
00:09:22,080 --> 00:09:22,920
name

262
00:09:22,920 --> 00:09:24,120
you're looking for more than 15

263
00:09:24,120 --> 00:09:26,760
megabytes of memory read you still see

264
00:09:26,760 --> 00:09:28,820
there's some weird thing called

265
00:09:28,820 --> 00:09:31,080
scanner.xo which is reading more than 50

266
00:09:31,080 --> 00:09:35,339
Mega 15 megabytes of else's memory and

267
00:09:35,339 --> 00:09:37,560
there's also this display link hot desk

268
00:09:37,560 --> 00:09:41,820
service whatever.x which is also reading

269
00:09:41,820 --> 00:09:43,800
more than 15 megabytes of else's memory

270
00:09:43,800 --> 00:09:47,220
why does it do that well we don't know

271
00:09:47,220 --> 00:09:49,440
but then again if if I take a step back

272
00:09:49,440 --> 00:09:51,360
and look at it from a from a detection

273
00:09:51,360 --> 00:09:53,700
engineering point of view I do want to

274
00:09:53,700 --> 00:09:57,720
have a detection which detects a process

275
00:09:57,720 --> 00:10:00,720
reading this this amount of memory from

276
00:10:00,720 --> 00:10:02,459
LSS right because I'm trying to detect

277
00:10:02,459 --> 00:10:05,880
someone dumping credentials from LSS

278
00:10:05,880 --> 00:10:07,740
so what I'll probably end up doing and

279
00:10:07,740 --> 00:10:09,420
what I've seen most of the of the other

280
00:10:09,420 --> 00:10:11,580
detections uh detection engineers and

281
00:10:11,580 --> 00:10:14,760
and blue teams doing is just assume that

282
00:10:14,760 --> 00:10:16,260
this is this is okay or at least have a

283
00:10:16,260 --> 00:10:17,880
look into it see if it's okay if it is

284
00:10:17,880 --> 00:10:20,760
you just filter it and put it on a put

285
00:10:20,760 --> 00:10:23,940
it on a list which on a loud list

286
00:10:23,940 --> 00:10:25,620
um and then run the detection

287
00:10:25,620 --> 00:10:27,300
which is great and that works on

288
00:10:27,300 --> 00:10:28,920
Bluetooth perspective but also

289
00:10:28,920 --> 00:10:31,440
introduces an attack factor from uh from

290
00:10:31,440 --> 00:10:33,720
a retaining perspective

291
00:10:33,720 --> 00:10:37,019
this is the example I I started with

292
00:10:37,019 --> 00:10:38,940
um

293
00:10:38,940 --> 00:10:41,279
and and basically what what I came up

294
00:10:41,279 --> 00:10:43,200
with I mean well this is one specific

295
00:10:43,200 --> 00:10:45,120
thing about lsats but this kind of weird

296
00:10:45,120 --> 00:10:48,060
Behavior happens all the time with legit

297
00:10:48,060 --> 00:10:48,959
software

298
00:10:48,959 --> 00:10:52,079
so what if I can start building a kind

299
00:10:52,079 --> 00:10:54,060
of a database of all the weird behaviors

300
00:10:54,060 --> 00:10:56,040
of the different software which are out

301
00:10:56,040 --> 00:10:57,480
there which are legit but are still

302
00:10:57,480 --> 00:10:59,940
misbehaving and then for each type of

303
00:10:59,940 --> 00:11:01,980
technique or tactic I'll have a list of

304
00:11:01,980 --> 00:11:03,420
names of applications which are

305
00:11:03,420 --> 00:11:05,040
misbehaving and I can abuse that

306
00:11:05,040 --> 00:11:06,540
whenever I need

307
00:11:06,540 --> 00:11:08,399
so that's basically what this what this

308
00:11:08,399 --> 00:11:09,779
talk is about

309
00:11:09,779 --> 00:11:12,120
why do we need filters because basically

310
00:11:12,120 --> 00:11:13,980
what I mean if you've ever worked in a

311
00:11:13,980 --> 00:11:15,600
soccer field or build detections you'll

312
00:11:15,600 --> 00:11:17,399
see most of the rules which you build

313
00:11:17,399 --> 00:11:19,079
will come up with some kind of false

314
00:11:19,079 --> 00:11:21,000
positive one way or another false

315
00:11:21,000 --> 00:11:22,680
positives are basically inherent to your

316
00:11:22,680 --> 00:11:25,500
to building detections

317
00:11:25,500 --> 00:11:27,540
um and you will have to you will have to

318
00:11:27,540 --> 00:11:29,100
filter them

319
00:11:29,100 --> 00:11:31,500
um and there's always this one piece of

320
00:11:31,500 --> 00:11:32,880
weird software which which just

321
00:11:32,880 --> 00:11:34,620
misbehaves and creates as false

322
00:11:34,620 --> 00:11:36,000
positives

323
00:11:36,000 --> 00:11:37,680
um so there are almost no detections out

324
00:11:37,680 --> 00:11:39,660
there in in production which don't use

325
00:11:39,660 --> 00:11:42,300
any kind of filtering at all

326
00:11:42,300 --> 00:11:43,260
um

327
00:11:43,260 --> 00:11:45,740
another example is

328
00:11:45,740 --> 00:11:47,880
Office application spoiling child

329
00:11:47,880 --> 00:11:49,200
processes

330
00:11:49,200 --> 00:11:52,019
two three years ago naive as I was not

331
00:11:52,019 --> 00:11:53,880
having any kind of blue team experience

332
00:11:53,880 --> 00:11:56,459
I was thinking well why should any kind

333
00:11:56,459 --> 00:11:57,779
of Office application create child

334
00:11:57,779 --> 00:11:59,579
processes that's that's super suspicious

335
00:11:59,579 --> 00:12:00,600
to me

336
00:12:00,600 --> 00:12:02,940
turns out it's not well it is but not by

337
00:12:02,940 --> 00:12:05,160
all cases so if you actually try to

338
00:12:05,160 --> 00:12:07,680
build a detection for an office

339
00:12:07,680 --> 00:12:09,420
application which spawns the child

340
00:12:09,420 --> 00:12:11,700
process you'll end up with a huge list

341
00:12:11,700 --> 00:12:13,260
like like the previous ones I showed of

342
00:12:13,260 --> 00:12:15,120
all these things happening so you need

343
00:12:15,120 --> 00:12:17,040
to build some kind of filter to to

344
00:12:17,040 --> 00:12:19,110
manage the false positives

345
00:12:19,110 --> 00:12:19,620
[Music]

346
00:12:19,620 --> 00:12:20,579
um

347
00:12:20,579 --> 00:12:22,800
an example of that is so if you look at

348
00:12:22,800 --> 00:12:24,180
the filters here this is one of our

349
00:12:24,180 --> 00:12:26,040
examples which we order one of the rules

350
00:12:26,040 --> 00:12:27,959
which we which you actually are using as

351
00:12:27,959 --> 00:12:29,339
a detection

352
00:12:29,339 --> 00:12:30,600
so

353
00:12:30,600 --> 00:12:33,120
for uh these rules looks at the rule

354
00:12:33,120 --> 00:12:37,079
looks at the number of uh looks at the

355
00:12:37,079 --> 00:12:39,660
uh at office applications spawning child

356
00:12:39,660 --> 00:12:43,019
processes then tries to read out all the

357
00:12:43,019 --> 00:12:44,760
all the false positives are all the

358
00:12:44,760 --> 00:12:46,620
legit pieces of software which do that

359
00:12:46,620 --> 00:12:48,839
and you'll see here for example fox head

360
00:12:48,839 --> 00:12:50,639
reader is one of the child processes

361
00:12:50,639 --> 00:12:53,940
being being spawned uh other Microsoft

362
00:12:53,940 --> 00:12:55,680
Office products are being spawned

363
00:12:55,680 --> 00:12:57,420
Microsoft teams will make sense because

364
00:12:57,420 --> 00:12:59,579
if you click on an office link for

365
00:12:59,579 --> 00:13:00,720
example

366
00:13:00,720 --> 00:13:03,120
so if you have an Outlook invite which

367
00:13:03,120 --> 00:13:05,700
has a has a has a teams call in it if

368
00:13:05,700 --> 00:13:07,260
you click the link it actually spawns

369
00:13:07,260 --> 00:13:09,180
teams.exa so that's that's where it's

370
00:13:09,180 --> 00:13:10,740
coming from

371
00:13:10,740 --> 00:13:12,120
um but also this one's pretty

372
00:13:12,120 --> 00:13:14,100
interesting the software GUI for Windows

373
00:13:14,100 --> 00:13:15,959
well I was pretty interested in that the

374
00:13:15,959 --> 00:13:17,519
sub GUI for Windows is actually a child

375
00:13:17,519 --> 00:13:20,399
process of an office application and I

376
00:13:20,399 --> 00:13:22,440
think it's coming from word so these

377
00:13:22,440 --> 00:13:24,779
things happen constantly and basically

378
00:13:24,779 --> 00:13:27,000
any kind of blue theme or any kind of

379
00:13:27,000 --> 00:13:28,160
sock which

380
00:13:28,160 --> 00:13:30,540
relies on these kind of detections needs

381
00:13:30,540 --> 00:13:31,980
needs to have those kind of filters in

382
00:13:31,980 --> 00:13:33,360
place

383
00:13:33,360 --> 00:13:34,980
um and what we can do as as a red team

384
00:13:34,980 --> 00:13:37,440
resource attackers is basically abuse

385
00:13:37,440 --> 00:13:40,380
those those filters because everyone

386
00:13:40,380 --> 00:13:41,880
assumes nobody knows what I'm filtering

387
00:13:41,880 --> 00:13:42,899
but well

388
00:13:42,899 --> 00:13:44,339
turns out people do know what you're

389
00:13:44,339 --> 00:13:45,480
filtering

390
00:13:45,480 --> 00:13:48,139
and abuse those things and and

391
00:13:48,139 --> 00:13:50,279
slip into the correct place of your of

392
00:13:50,279 --> 00:13:52,440
your detection

393
00:13:52,440 --> 00:13:54,540
you don't even need to bypass the EDR

394
00:13:54,540 --> 00:13:56,880
you can just bypass the rules themselves

395
00:13:56,880 --> 00:13:58,500
we'll also see that this kind of logic

396
00:13:58,500 --> 00:14:01,920
also applies to AV itself and also

397
00:14:01,920 --> 00:14:04,860
applies to uh in in some sense it

398
00:14:04,860 --> 00:14:06,300
applies to

399
00:14:06,300 --> 00:14:09,000
the EDR products but also to attack

400
00:14:09,000 --> 00:14:10,740
service reduction and we'll come to that

401
00:14:10,740 --> 00:14:13,320
in a bit on how you can bypass the tax

402
00:14:13,320 --> 00:14:16,500
service reduction rules in the same way

403
00:14:16,500 --> 00:14:18,620
um

404
00:14:19,200 --> 00:14:20,880
so then the the next question you want

405
00:14:20,880 --> 00:14:22,320
to talk about is

406
00:14:22,320 --> 00:14:23,880
um why do we want to hide in the first

407
00:14:23,880 --> 00:14:25,920
place right I mean if you can easily

408
00:14:25,920 --> 00:14:28,380
bypass the or if you can bypass the EDR

409
00:14:28,380 --> 00:14:30,000
why do you want to do this kind of stuff

410
00:14:30,000 --> 00:14:31,920
and do like a guesstimate of what kind

411
00:14:31,920 --> 00:14:33,540
of software might be on a machine and

412
00:14:33,540 --> 00:14:34,920
then try to imitate that because that's

413
00:14:34,920 --> 00:14:36,540
what we're doing

414
00:14:36,540 --> 00:14:39,600
um and and the the simple answer to that

415
00:14:39,600 --> 00:14:41,820
I think is that

416
00:14:41,820 --> 00:14:42,720
um

417
00:14:42,720 --> 00:14:45,000
it's it's not a replacement for EDR

418
00:14:45,000 --> 00:14:46,440
bypass it's not a replacement for AV

419
00:14:46,440 --> 00:14:50,160
bypass but it's more meant as an extra

420
00:14:50,160 --> 00:14:52,680
tool in your toolbox depending on the

421
00:14:52,680 --> 00:14:55,440
situation to use it for so sometimes

422
00:14:55,440 --> 00:14:57,240
it's more useful to do EDR bypass

423
00:14:57,240 --> 00:14:59,579
sometimes it's more useful to just kill

424
00:14:59,579 --> 00:15:01,079
the whole EDR

425
00:15:01,079 --> 00:15:03,060
but sometimes it's easier or better or

426
00:15:03,060 --> 00:15:05,880
more useful to just imitate an existing

427
00:15:05,880 --> 00:15:09,060
application and try to hide basically in

428
00:15:09,060 --> 00:15:10,740
the in the filters instead of trying to

429
00:15:10,740 --> 00:15:14,720
just completely disable the EDR

430
00:15:14,880 --> 00:15:15,779
um

431
00:15:15,779 --> 00:15:17,540
and another

432
00:15:17,540 --> 00:15:19,560
another place where I use this quite

433
00:15:19,560 --> 00:15:21,480
often is for initial access when you

434
00:15:21,480 --> 00:15:24,720
don't have the foothold yet in your

435
00:15:24,720 --> 00:15:26,220
environment to do all these kind of

436
00:15:26,220 --> 00:15:27,959
advanced stuff like EDR killing and

437
00:15:27,959 --> 00:15:30,000
patching udw or all these tricks which

438
00:15:30,000 --> 00:15:32,639
are there to bypass cdrs but you only

439
00:15:32,639 --> 00:15:34,500
are starting off with your initial

440
00:15:34,500 --> 00:15:36,300
um with your macro so you have you have

441
00:15:36,300 --> 00:15:38,279
an office or an Office document with a

442
00:15:38,279 --> 00:15:40,079
macro in it

443
00:15:40,079 --> 00:15:42,360
uh you don't have the the Privileges yet

444
00:15:42,360 --> 00:15:44,459
to do all these kind of tricks so that

445
00:15:44,459 --> 00:15:46,260
that's where you can try to imitate some

446
00:15:46,260 --> 00:15:49,139
of the weird office behaviors of legit

447
00:15:49,139 --> 00:15:52,500
applications and just hoping to fall in

448
00:15:52,500 --> 00:15:56,360
the cracks of of the filters

449
00:15:57,240 --> 00:15:59,040
um and yeah as I said there's a lot of

450
00:15:59,040 --> 00:16:00,720
secure tooling which suffers from the

451
00:16:00,720 --> 00:16:02,220
same blind spots

452
00:16:02,220 --> 00:16:03,839
um all the security on which we've seen

453
00:16:03,839 --> 00:16:06,180
so far has has similar Behavior

454
00:16:06,180 --> 00:16:08,339
filtering false positives

455
00:16:08,339 --> 00:16:09,899
um I think the

456
00:16:09,899 --> 00:16:12,360
the end game configuration and the end

457
00:16:12,360 --> 00:16:14,279
game EDR configuration leaked a couple

458
00:16:14,279 --> 00:16:15,420
of months ago I think where someone

459
00:16:15,420 --> 00:16:17,339
published it online and there you could

460
00:16:17,339 --> 00:16:18,839
see the exact same behavior where there

461
00:16:18,839 --> 00:16:21,480
was some certain uh certain parts being

462
00:16:21,480 --> 00:16:24,600
being filtered by the EDR and not being

463
00:16:24,600 --> 00:16:26,940
modest malicious same holds for Defender

464
00:16:26,940 --> 00:16:28,199
for endpoint configuration the same

465
00:16:28,199 --> 00:16:30,420
holds for attack service reduction and

466
00:16:30,420 --> 00:16:31,800
the same holds for a lot of custom

467
00:16:31,800 --> 00:16:33,959
detections built by detection engineers

468
00:16:33,959 --> 00:16:37,019
in production socks

469
00:16:37,019 --> 00:16:38,759
um so again it's it's it's not a

470
00:16:38,759 --> 00:16:40,800
replacement of EDR bypass it's just more

471
00:16:40,800 --> 00:16:43,139
and a different technique

472
00:16:43,139 --> 00:16:47,480
to uh to accomplish similar things

473
00:16:49,079 --> 00:16:51,480
um so how do we do it let's send the

474
00:16:51,480 --> 00:16:52,620
next question what are the different

475
00:16:52,620 --> 00:16:54,420
ways to do it

476
00:16:54,420 --> 00:16:56,940
um there are a lot of ways but what I

477
00:16:56,940 --> 00:16:59,399
did for this song Just summarize uh five

478
00:16:59,399 --> 00:17:02,759
categories uh to to just show you how

479
00:17:02,759 --> 00:17:03,679
bad

480
00:17:03,679 --> 00:17:06,720
how bad it gets basically how bad uh

481
00:17:06,720 --> 00:17:09,059
real software is and how you can use

482
00:17:09,059 --> 00:17:11,939
that in your advantage in an attack

483
00:17:11,939 --> 00:17:14,339
I first want to talk about

484
00:17:14,339 --> 00:17:17,459
office mostly Financial access so all

485
00:17:17,459 --> 00:17:19,859
kinds of office nastiness which you can

486
00:17:19,859 --> 00:17:22,380
abuse in your advantage

487
00:17:22,380 --> 00:17:23,819
um I want to quickly touch upon process

488
00:17:23,819 --> 00:17:26,040
injection quickly show some things on

489
00:17:26,040 --> 00:17:28,679
dumping LSS

490
00:17:28,679 --> 00:17:30,419
um I'll give you some examples on run

491
00:17:30,419 --> 00:17:33,240
dll how you can abuse run dll if you

492
00:17:33,240 --> 00:17:35,400
want to run your uh

493
00:17:35,400 --> 00:17:38,880
run your implant in run dll 32

494
00:17:38,880 --> 00:17:41,280
um and I have a like a miscellaneous

495
00:17:41,280 --> 00:17:42,960
topic world just a bunch of different

496
00:17:42,960 --> 00:17:46,020
things yeah to show you which didn't fit

497
00:17:46,020 --> 00:17:48,480
in any of these categories it also

498
00:17:48,480 --> 00:17:50,580
includes some kind of nice ASR bypasses

499
00:17:50,580 --> 00:17:53,160
which which we found based on this on

500
00:17:53,160 --> 00:17:55,820
this research

501
00:17:56,400 --> 00:17:58,559
um just just to get started I think one

502
00:17:58,559 --> 00:18:00,120
of the nice tricks with in office which

503
00:18:00,120 --> 00:18:01,380
some of you might or might not be

504
00:18:01,380 --> 00:18:03,419
familiar with is using XLS and sometimes

505
00:18:03,419 --> 00:18:06,000
even wll files

506
00:18:06,000 --> 00:18:06,780
um

507
00:18:06,780 --> 00:18:08,820
so you basically send someone an xll

508
00:18:08,820 --> 00:18:12,000
file which is like an Excel dll if

509
00:18:12,000 --> 00:18:14,580
you're not familiar with it you can just

510
00:18:14,580 --> 00:18:16,559
double click an xll file window so we

511
00:18:16,559 --> 00:18:18,780
just happily load it into Excel and then

512
00:18:18,780 --> 00:18:21,780
run your code it's quite

513
00:18:21,780 --> 00:18:24,360
yeah widely used Tech technique at least

514
00:18:24,360 --> 00:18:26,460
in the interacting Community I know

515
00:18:26,460 --> 00:18:28,200
and I just wanted to do a very quick

516
00:18:28,200 --> 00:18:30,240
raise of hands on how often you think

517
00:18:30,240 --> 00:18:32,520
this happens in let's say in 30 days in

518
00:18:32,520 --> 00:18:35,160
an environment with I think around 50 50

519
00:18:35,160 --> 00:18:36,539
000 machines so let's say you have 50

520
00:18:36,539 --> 00:18:39,600
000 endpoints in an environment

521
00:18:39,600 --> 00:18:42,539
um how often are xll files or wll files

522
00:18:42,539 --> 00:18:44,100
being loaded in that environment in 30

523
00:18:44,100 --> 00:18:45,539
days so

524
00:18:45,539 --> 00:18:47,520
quick range of hands we think zero to

525
00:18:47,520 --> 00:18:50,059
100 times

526
00:18:50,340 --> 00:18:54,480
nobody 100 to 500 times

527
00:18:54,480 --> 00:18:56,640
okay one two

528
00:18:56,640 --> 00:18:59,720
five hundred two thousand

529
00:18:59,720 --> 00:19:02,820
uh ish okay so most of you think it's a

530
00:19:02,820 --> 00:19:05,659
thousand to five thousand

531
00:19:06,120 --> 00:19:08,039
yeah turns out you're more or less

532
00:19:08,039 --> 00:19:12,120
correct so it's like 1100 times in in uh

533
00:19:12,120 --> 00:19:14,820
in I think in 30 days

534
00:19:14,820 --> 00:19:16,620
so Eleven Hundred

535
00:19:16,620 --> 00:19:20,160
xll loads are performed in a real life

536
00:19:20,160 --> 00:19:22,080
environment so how are you going to

537
00:19:22,080 --> 00:19:25,679
detect a real xll being uh how going to

538
00:19:25,679 --> 00:19:30,000
distinguish between a legit xll and uh

539
00:19:30,000 --> 00:19:32,039
um and a malicious one

540
00:19:32,039 --> 00:19:34,559
everybody thinks XLR is a super uh

541
00:19:34,559 --> 00:19:35,820
obscure but it turns out they're not

542
00:19:35,820 --> 00:19:37,200
super obscure it turns out they're being

543
00:19:37,200 --> 00:19:38,520
used quite often in production

544
00:19:38,520 --> 00:19:41,120
environments

545
00:19:41,880 --> 00:19:45,000
um and these are the at least my well

546
00:19:45,000 --> 00:19:48,299
the the top xlrs being being used

547
00:19:48,299 --> 00:19:50,520
and you can use those two to hide in in

548
00:19:50,520 --> 00:19:52,080
plain sight basically because those are

549
00:19:52,080 --> 00:19:54,120
pretty common

550
00:19:54,120 --> 00:19:57,840
um there's one called pip C

551
00:19:57,840 --> 00:20:00,480
um but this one is even more widely used

552
00:20:00,480 --> 00:20:02,100
well not in this environment but it's

553
00:20:02,100 --> 00:20:04,620
the sap business objects I think

554
00:20:04,620 --> 00:20:07,020
so if you know your your client

555
00:20:07,020 --> 00:20:09,600
environment is using sap then it's

556
00:20:09,600 --> 00:20:10,980
pretty likely that they will have the

557
00:20:10,980 --> 00:20:15,539
sap business objects thing uh running

558
00:20:15,539 --> 00:20:17,880
um there's actually even one from uh

559
00:20:17,880 --> 00:20:19,679
from Microsoft but I'll just ignore that

560
00:20:19,679 --> 00:20:21,480
for now

561
00:20:21,480 --> 00:20:24,240
um there is there's some ESS base which

562
00:20:24,240 --> 00:20:26,460
is some kind of product there is uh well

563
00:20:26,460 --> 00:20:29,280
this uh this one is very nice it's from

564
00:20:29,280 --> 00:20:31,200
Bloomberg so there's a nice Bloomberg

565
00:20:31,200 --> 00:20:34,020
xll add-in so if you know your your

566
00:20:34,020 --> 00:20:35,640
environment as a financial institution

567
00:20:35,640 --> 00:20:37,500
they're using Bloomberg then well this

568
00:20:37,500 --> 00:20:39,780
might be a very nice name to uh to

569
00:20:39,780 --> 00:20:41,940
masquerade or to use in your in your

570
00:20:41,940 --> 00:20:44,460
attack and the same with this one so IBM

571
00:20:44,460 --> 00:20:47,580
cognosis basically I've seen it well I

572
00:20:47,580 --> 00:20:50,039
would say like 80 of our clients which

573
00:20:50,039 --> 00:20:52,200
have a reasonably sized environment

574
00:20:52,200 --> 00:20:54,780
they'll you'll see this one the IBM

575
00:20:54,780 --> 00:20:57,480
coconuts uh Office business intelligence

576
00:20:57,480 --> 00:20:59,640
xll stuff

577
00:20:59,640 --> 00:21:00,299
um

578
00:21:00,299 --> 00:21:02,520
so if you want to smuggle your xll in

579
00:21:02,520 --> 00:21:05,160
new one to find the right name for your

580
00:21:05,160 --> 00:21:07,320
xll to slip through the cracks just yeah

581
00:21:07,320 --> 00:21:09,240
for try try this if you want to try the

582
00:21:09,240 --> 00:21:11,820
caucus one it will pretty likely it will

583
00:21:11,820 --> 00:21:13,559
just go through the go through the the

584
00:21:13,559 --> 00:21:15,240
go to the cracks if they even have

585
00:21:15,240 --> 00:21:19,340
anything for a fractional loads

586
00:21:20,760 --> 00:21:24,299
um what do I have next I asked so so one

587
00:21:24,299 --> 00:21:25,620
other trick which detection Engineers

588
00:21:25,620 --> 00:21:27,240
often use is to look at the global

589
00:21:27,240 --> 00:21:28,980
prevalence of a file Global prevalence

590
00:21:28,980 --> 00:21:30,900
basically means uh at least in the

591
00:21:30,900 --> 00:21:32,460
context of Defender for endpoint it

592
00:21:32,460 --> 00:21:35,159
means how often has Microsoft seen this

593
00:21:35,159 --> 00:21:37,200
specific file based on the on the file

594
00:21:37,200 --> 00:21:40,320
hash uh in all their environments which

595
00:21:40,320 --> 00:21:42,179
they are monitoring so not only in your

596
00:21:42,179 --> 00:21:44,400
environment but in all the Microsoft

597
00:21:44,400 --> 00:21:46,440
monetary environments

598
00:21:46,440 --> 00:21:47,100
um

599
00:21:47,100 --> 00:21:48,900
so one of the tricks which which we use

600
00:21:48,900 --> 00:21:50,039
on a lot of our other detection

601
00:21:50,039 --> 00:21:51,659
Engineers use is to look at Global

602
00:21:51,659 --> 00:21:53,159
prevalence so if something has Global

603
00:21:53,159 --> 00:21:56,100
prevalence Which is less than 200 it

604
00:21:56,100 --> 00:21:57,659
means that Microsoft has seen it

605
00:21:57,659 --> 00:21:59,940
globally this filed on less than 200

606
00:21:59,940 --> 00:22:01,679
machines or less than 200 times on a

607
00:22:01,679 --> 00:22:03,799
machine

608
00:22:03,900 --> 00:22:05,700
um so those are like the unique files

609
00:22:05,700 --> 00:22:07,320
and if you are building your own malware

610
00:22:07,320 --> 00:22:09,240
which is which has an XL for your own

611
00:22:09,240 --> 00:22:12,000
implant which is an xll

612
00:22:12,000 --> 00:22:14,039
um then you'll have a pretty low Global

613
00:22:14,039 --> 00:22:16,200
prevalence but even with the low Global

614
00:22:16,200 --> 00:22:17,820
prevalence you still have like 14 unique

615
00:22:17,820 --> 00:22:20,039
files which are which are around

616
00:22:20,039 --> 00:22:22,500
so it's still worth to well take a look

617
00:22:22,500 --> 00:22:24,480
at what those things are and even IBM

618
00:22:24,480 --> 00:22:25,860
comes up here again

619
00:22:25,860 --> 00:22:28,380
with their cognos office business

620
00:22:28,380 --> 00:22:30,659
intelligence stuff

621
00:22:30,659 --> 00:22:32,220
um so just imitating those file names

622
00:22:32,220 --> 00:22:34,799
it's it's well not guaranteed but it's

623
00:22:34,799 --> 00:22:36,600
very likely to succeed and bypass all

624
00:22:36,600 --> 00:22:41,659
the potential detections for uh for xlls

625
00:22:41,659 --> 00:22:44,299
foreign

626
00:22:44,299 --> 00:22:47,400
some other ideas for uh for office if

627
00:22:47,400 --> 00:22:50,220
you're interested in that

628
00:22:50,220 --> 00:22:52,620
um so there is this in eventful endpoint

629
00:22:52,620 --> 00:22:55,320
there is this uh this action type stuff

630
00:22:55,320 --> 00:22:58,799
which which looks at the ASR rules as

631
00:22:58,799 --> 00:22:59,940
our rules are the attack service

632
00:22:59,940 --> 00:23:01,679
reduction rules and they have some

633
00:23:01,679 --> 00:23:05,580
specific rules to detect misbehavior of

634
00:23:05,580 --> 00:23:08,039
office applications so if someone trying

635
00:23:08,039 --> 00:23:10,799
to make an office application misbehave

636
00:23:10,799 --> 00:23:14,100
then these rules can cannot trigger

637
00:23:14,100 --> 00:23:16,200
and if this rules trigger either in

638
00:23:16,200 --> 00:23:18,059
audit mode or in block mode you'll get

639
00:23:18,059 --> 00:23:20,760
an event in your in your device events

640
00:23:20,760 --> 00:23:22,140
table and Defender friend point so you

641
00:23:22,140 --> 00:23:26,120
can build detections based on that

642
00:23:26,280 --> 00:23:28,740
um so sorry so looking at the query so

643
00:23:28,740 --> 00:23:31,260
what I do is I look for uh for all the

644
00:23:31,260 --> 00:23:32,940
device events which contain which have

645
00:23:32,940 --> 00:23:35,039
the action type which contain the word

646
00:23:35,039 --> 00:23:35,940
office

647
00:23:35,940 --> 00:23:38,400
so I'm looking for anything uh in the in

648
00:23:38,400 --> 00:23:40,679
the with the action type office so I'm

649
00:23:40,679 --> 00:23:42,419
doing a quick count based on the action

650
00:23:42,419 --> 00:23:43,799
type so I just want to get a feeling on

651
00:23:43,799 --> 00:23:46,320
how many different actions there are so

652
00:23:46,320 --> 00:23:50,039
what I see here is there are 23 000

653
00:23:50,039 --> 00:23:52,919
times there has been an ASR rule

654
00:23:52,919 --> 00:23:55,799
triggered which says office macros sorry

655
00:23:55,799 --> 00:23:58,559
office macro win32 API calls so that

656
00:23:58,559 --> 00:23:59,520
means

657
00:23:59,520 --> 00:24:03,840
that 32 000 oh sorry 23 000 times the

658
00:24:03,840 --> 00:24:07,860
Azar rule which is supposed to uh to

659
00:24:07,860 --> 00:24:11,340
block win32 API calls from Office macros

660
00:24:11,340 --> 00:24:12,419
has triggered

661
00:24:12,419 --> 00:24:13,559
so

662
00:24:13,559 --> 00:24:15,720
that's pretty interesting from attacking

663
00:24:15,720 --> 00:24:17,640
perspective

664
00:24:17,640 --> 00:24:19,260
um well same holds for all the other

665
00:24:19,260 --> 00:24:20,520
things so there's executable office

666
00:24:20,520 --> 00:24:23,400
content so if you try to drop an

667
00:24:23,400 --> 00:24:26,039
executable file on disk uh this the

668
00:24:26,039 --> 00:24:28,380
second as our rule will will trigger if

669
00:24:28,380 --> 00:24:31,140
you try to uh create a child process

670
00:24:31,140 --> 00:24:32,760
from an office macro then the third is

671
00:24:32,760 --> 00:24:34,740
our rule will trigger in well my

672
00:24:34,740 --> 00:24:36,299
assumption always used to be this is

673
00:24:36,299 --> 00:24:37,620
super unique it never happens in real

674
00:24:37,620 --> 00:24:39,539
life because why would any office macro

675
00:24:39,539 --> 00:24:42,780
in in a real application uh do winter to

676
00:24:42,780 --> 00:24:46,020
do API calls Well turns out it's heavily

677
00:24:46,020 --> 00:24:47,520
used

678
00:24:47,520 --> 00:24:48,240
um

679
00:24:48,240 --> 00:24:50,039
so we can we can leverage that for in in

680
00:24:50,039 --> 00:24:52,500
our advantage in in a red team to to

681
00:24:52,500 --> 00:24:54,960
blend in those those existing uh uh

682
00:24:54,960 --> 00:24:57,480
win32 API calls

683
00:24:57,480 --> 00:24:59,520
and again our favorite product shows up

684
00:24:59,520 --> 00:25:01,740
at least my favorite product which is uh

685
00:25:01,740 --> 00:25:05,100
sap so turns out that

686
00:25:05,100 --> 00:25:08,240
um in this specific case there has been

687
00:25:08,240 --> 00:25:12,600
940 instances of the sap what's it

688
00:25:12,600 --> 00:25:16,799
called sap script Word 2007 dot dot m a

689
00:25:16,799 --> 00:25:20,640
macro enabled uh Word document template

690
00:25:20,640 --> 00:25:23,880
which always resides in the in the

691
00:25:23,880 --> 00:25:26,940
user's roaming profile has triggered the

692
00:25:26,940 --> 00:25:29,480
ASR rule for win32

693
00:25:29,480 --> 00:25:31,679
API calls

694
00:25:31,679 --> 00:25:34,440
so if you want to run a macro

695
00:25:34,440 --> 00:25:38,460
and do win32 API calls and not stand out

696
00:25:38,460 --> 00:25:40,980
from the rest it's worth naming your

697
00:25:40,980 --> 00:25:45,840
your documents sap script word 2007.10

698
00:25:45,840 --> 00:25:48,500
it's pretty likely I will bypass

699
00:25:48,500 --> 00:25:51,480
a bunch of filters for for a bunch of

700
00:25:51,480 --> 00:25:53,700
subs and red teams

701
00:25:53,700 --> 00:25:55,860
it's the same for this one it's it's

702
00:25:55,860 --> 00:25:57,659
it's also pretty popular but slightly

703
00:25:57,659 --> 00:26:00,059
less I didn't know it but some kind of

704
00:26:00,059 --> 00:26:02,460
data collection software I don't know

705
00:26:02,460 --> 00:26:04,500
what it is I don't know what it does

706
00:26:04,500 --> 00:26:06,480
um but turns out it's pretty prevalent

707
00:26:06,480 --> 00:26:08,340
so might be might be worth looking at it

708
00:26:08,340 --> 00:26:09,600
I've blurred out all the other stuff

709
00:26:09,600 --> 00:26:11,100
because I was all client specific I

710
00:26:11,100 --> 00:26:12,740
didn't want to show that here of course

711
00:26:12,740 --> 00:26:15,240
but these two are pretty interesting and

712
00:26:15,240 --> 00:26:17,039
if you haven't your actual environment

713
00:26:17,039 --> 00:26:18,600
to play with I would highly recommend

714
00:26:18,600 --> 00:26:20,580
everyone just to have a quick look in

715
00:26:20,580 --> 00:26:22,200
their own environment to see how often

716
00:26:22,200 --> 00:26:23,340
these kind of things happen or what are

717
00:26:23,340 --> 00:26:24,840
interesting names in your environment to

718
00:26:24,840 --> 00:26:27,320
play around with

719
00:26:28,290 --> 00:26:28,919
[Music]

720
00:26:28,919 --> 00:26:29,460
um

721
00:26:29,460 --> 00:26:32,279
we had that oh yeah we had of course the

722
00:26:32,279 --> 00:26:33,960
Bloomberg stuff I forgot to mention that

723
00:26:33,960 --> 00:26:36,779
or there's the the Bloomberg UI dot xla

724
00:26:36,779 --> 00:26:38,940
which is another type of excel format

725
00:26:38,940 --> 00:26:40,020
which

726
00:26:40,020 --> 00:26:42,120
does this kind of things it also is

727
00:26:42,120 --> 00:26:42,960
doing

728
00:26:42,960 --> 00:26:45,000
all kinds of winter two API calls I

729
00:26:45,000 --> 00:26:47,960
don't know why but it does

730
00:26:48,600 --> 00:26:51,600
um there is some stuff called add-insoft

731
00:26:51,600 --> 00:26:53,580
to if you Google for it it's pretty it's

732
00:26:53,580 --> 00:26:55,080
pretty popular product

733
00:26:55,080 --> 00:26:57,360
which you can imitate to to do office

734
00:26:57,360 --> 00:26:59,820
macro stuff

735
00:26:59,820 --> 00:27:01,080
um so yeah there's a bunch of attack

736
00:27:01,080 --> 00:27:03,480
servers which you can just use to to

737
00:27:03,480 --> 00:27:05,820
just hide in the in the

738
00:27:05,820 --> 00:27:10,158
um in the filters of of the blue teams

739
00:27:12,659 --> 00:27:14,340
um

740
00:27:14,340 --> 00:27:16,980
next next one is about office

741
00:27:16,980 --> 00:27:18,900
applications creating child processes

742
00:27:18,900 --> 00:27:22,200
and you would guess that well by now I

743
00:27:22,200 --> 00:27:23,940
guess if you you know this happens

744
00:27:23,940 --> 00:27:25,500
pretty often

745
00:27:25,500 --> 00:27:27,960
um I try to run a query where I look at

746
00:27:27,960 --> 00:27:31,100
the all the process Creations basically

747
00:27:31,100 --> 00:27:34,559
I'm looking for process Creations where

748
00:27:34,559 --> 00:27:36,840
the parent is either Excel word or

749
00:27:36,840 --> 00:27:39,299
PowerPoint and where the process created

750
00:27:39,299 --> 00:27:41,880
is not Excel word or Outlook so

751
00:27:41,880 --> 00:27:43,200
basically looking for an office process

752
00:27:43,200 --> 00:27:46,020
which spawns a non-office process

753
00:27:46,020 --> 00:27:48,000
and I tried to do a quick summarize just

754
00:27:48,000 --> 00:27:49,799
to get a count of the number of times it

755
00:27:49,799 --> 00:27:51,960
has happened uh groups by file name and

756
00:27:51,960 --> 00:27:54,600
grouped by by the parent file name and I

757
00:27:54,600 --> 00:27:56,400
try to do a decount on device name which

758
00:27:56,400 --> 00:27:57,720
basically means how many unique devices

759
00:27:57,720 --> 00:28:00,000
did this happen on and all the command

760
00:28:00,000 --> 00:28:01,260
lines as well

761
00:28:01,260 --> 00:28:04,140
it says the result size exceeds exceeds

762
00:28:04,140 --> 00:28:06,120
the the the possibilities of Defender

763
00:28:06,120 --> 00:28:07,980
endpoint it was just so much a Defender

764
00:28:07,980 --> 00:28:11,460
endpoint couldn't even handle it

765
00:28:11,460 --> 00:28:13,320
um so I had to do it so this was for 30

766
00:28:13,320 --> 00:28:15,480
days so I had to get rid of the D count

767
00:28:15,480 --> 00:28:17,640
for the number of devices and go back to

768
00:28:17,640 --> 00:28:19,980
to seven days instead of 30 days to be

769
00:28:19,980 --> 00:28:21,659
able to get some meaningful results out

770
00:28:21,659 --> 00:28:23,039
of it

771
00:28:23,039 --> 00:28:25,200
um turns out these are like the the top

772
00:28:25,200 --> 00:28:30,179
contenders so Excel spawning SP SPL w o

773
00:28:30,179 --> 00:28:33,240
w 64 which I think is the windows uh

774
00:28:33,240 --> 00:28:36,539
spoiler service I'm not mistaking

775
00:28:36,539 --> 00:28:39,720
um so if you're running an Excel macro

776
00:28:39,720 --> 00:28:41,700
you want to spawn job process

777
00:28:41,700 --> 00:28:43,799
it's a pretty good idea to call your

778
00:28:43,799 --> 00:28:45,059
child process with your spawning they

779
00:28:45,059 --> 00:28:48,899
just call it the splwow64.xn

780
00:28:49,020 --> 00:28:52,760
it's likely won't it won't stand out

781
00:29:18,860 --> 00:29:22,320
okay thanks

782
00:29:22,320 --> 00:29:24,299
oh I just wanted

783
00:29:24,299 --> 00:29:24,960
um

784
00:29:24,960 --> 00:29:26,700
so yeah you know you'll see a bunch of

785
00:29:26,700 --> 00:29:28,860
other examples of child processes being

786
00:29:28,860 --> 00:29:31,679
spawned by by office applications

787
00:29:31,679 --> 00:29:33,440
um you also see

788
00:29:33,440 --> 00:29:36,360
csc.xim I'm not sure if you guys are

789
00:29:36,360 --> 00:29:37,980
familiar what that is but that's the

790
00:29:37,980 --> 00:29:41,520
c-sharp compiler for uh from uh from

791
00:29:41,520 --> 00:29:42,840
Microsoft

792
00:29:42,840 --> 00:29:45,299
um if you wonder why this Windward or

793
00:29:45,299 --> 00:29:48,840
Excel is calling the c-sharp compiler

794
00:29:48,840 --> 00:29:50,100
um it's because Defender find Point

795
00:29:50,100 --> 00:29:52,200
Defender for endpoint does some nasty

796
00:29:52,200 --> 00:29:54,899
stuff and it uses on the Fly the c-sharp

797
00:29:54,899 --> 00:29:56,880
compiler to compile some code from a

798
00:29:56,880 --> 00:29:58,620
temp folder so it's super nasty it took

799
00:29:58,620 --> 00:30:00,299
me like a week to figure out what was

800
00:30:00,299 --> 00:30:02,399
going on and why this was happening

801
00:30:02,399 --> 00:30:03,960
um but that's why there's sharp

802
00:30:03,960 --> 00:30:06,240
compilers in there

803
00:30:06,240 --> 00:30:08,220
um and then you see Excel spawning uh

804
00:30:08,220 --> 00:30:10,620
this is I think uh Power bi you see word

805
00:30:10,620 --> 00:30:13,740
spawning the school service MSO sync I

806
00:30:13,740 --> 00:30:15,600
think it's the uh it's part of the

807
00:30:15,600 --> 00:30:17,159
sharepoints or OneDrive sync or

808
00:30:17,159 --> 00:30:19,020
SharePoint thing I'm not even sure

809
00:30:19,020 --> 00:30:22,320
uh but this stuff happens a lot so if

810
00:30:22,320 --> 00:30:23,760
you're interested in doing child

811
00:30:23,760 --> 00:30:25,200
processes from from an office

812
00:30:25,200 --> 00:30:27,059
application just use one of those names

813
00:30:27,059 --> 00:30:28,980
and it's well you might have a fair

814
00:30:28,980 --> 00:30:30,840
chance to to bypass some of these

815
00:30:30,840 --> 00:30:32,580
filters

816
00:30:32,580 --> 00:30:34,320
um here's a bunch more I think this is

817
00:30:34,320 --> 00:30:36,240
like the first one

818
00:30:36,240 --> 00:30:38,820
seven eight ten this is like the next 10

819
00:30:38,820 --> 00:30:40,440
or 15 or so if you're if you're

820
00:30:40,440 --> 00:30:42,539
interested

821
00:30:42,539 --> 00:30:45,059
um their fault is a very nice one in

822
00:30:45,059 --> 00:30:46,980
general so if you wherefore there's the

823
00:30:46,980 --> 00:30:49,980
Windows error reporting application so

824
00:30:49,980 --> 00:30:52,500
every time a process crashes uh where

825
00:30:52,500 --> 00:30:54,000
fault kicks in and makes a memory done

826
00:30:54,000 --> 00:30:56,039
with your process

827
00:30:56,039 --> 00:30:58,260
um but because wherefore does this does

828
00:30:58,260 --> 00:31:00,720
this it's a very trusted process by

829
00:31:00,720 --> 00:31:03,000
windows by a bunch of other AV products

830
00:31:03,000 --> 00:31:05,820
so if you're looking for a nice file to

831
00:31:05,820 --> 00:31:07,679
masquerade or a nice file to inject into

832
00:31:07,679 --> 00:31:09,120
wherefore there's a very nice candidate

833
00:31:09,120 --> 00:31:11,399
to bypass a whole bunch of uh

834
00:31:11,399 --> 00:31:14,700
built-in and Custom detections

835
00:31:14,700 --> 00:31:17,880
and then there is for the the w win I

836
00:31:17,880 --> 00:31:20,220
think it's doctor no sorry dw20 is Dr

837
00:31:20,220 --> 00:31:22,860
Watson similar to air fault

838
00:31:22,860 --> 00:31:24,659
uh there are a bunch you've seen little

839
00:31:24,659 --> 00:31:27,480
X's being run well three well almost

840
00:31:27,480 --> 00:31:29,279
four thousand times so even running

841
00:31:29,279 --> 00:31:31,679
cnetics might not be that suspicious if

842
00:31:31,679 --> 00:31:33,840
you're coming from Excel and again this

843
00:31:33,840 --> 00:31:35,640
kind of stuff blew my mind before I was

844
00:31:35,640 --> 00:31:38,100
doing any kind of um any kind of blue

845
00:31:38,100 --> 00:31:40,380
team in detection work I was assumed

846
00:31:40,380 --> 00:31:42,360
that this stuff was only being done by

847
00:31:42,360 --> 00:31:44,460
malware but apparently it's not it's

848
00:31:44,460 --> 00:31:46,880
super common

849
00:31:47,760 --> 00:31:49,559
um

850
00:31:49,559 --> 00:31:51,960
yeah and there's the the well there's a

851
00:31:51,960 --> 00:31:55,380
bunch of stuff I mean there's FLT

852
00:31:55,380 --> 00:31:58,559
FLT l-dr is the the Microsoft filter

853
00:31:58,559 --> 00:32:01,200
loader so load some filters I don't know

854
00:32:01,200 --> 00:32:02,640
why it does that this is also super

855
00:32:02,640 --> 00:32:07,320
interesting so uh running net use so

856
00:32:07,320 --> 00:32:09,480
apparently people really do that in

857
00:32:09,480 --> 00:32:12,059
their macros and this is not malware I

858
00:32:12,059 --> 00:32:13,500
can I can guarantee you because I've

859
00:32:13,500 --> 00:32:15,899
looked into all this kind of stuff but

860
00:32:15,899 --> 00:32:17,279
this stuff really happens in in real

861
00:32:17,279 --> 00:32:19,440
life environments so don't be afraid to

862
00:32:19,440 --> 00:32:22,220
do this kind of stuff

863
00:32:23,039 --> 00:32:25,320
um oh no no one this is this is very

864
00:32:25,320 --> 00:32:26,700
nice so

865
00:32:26,700 --> 00:32:30,240
apparently there's a very widely used HP

866
00:32:30,240 --> 00:32:32,520
printer driver

867
00:32:32,520 --> 00:32:34,320
um if you print something from Office

868
00:32:34,320 --> 00:32:35,580
application and then your office

869
00:32:35,580 --> 00:32:37,740
applications needs to check the status

870
00:32:37,740 --> 00:32:40,919
of the printer or the print job it uses

871
00:32:40,919 --> 00:32:42,779
this one from HP and this is so widely

872
00:32:42,779 --> 00:32:46,559
used that even the ASR rule checking for

873
00:32:46,559 --> 00:32:49,200
office applications being spawn as child

874
00:32:49,200 --> 00:32:52,320
processes whitelists specifically this

875
00:32:52,320 --> 00:32:54,600
run dll command with the HP what is

876
00:32:54,600 --> 00:32:57,480
called HP Amazon version number of dll

877
00:32:57,480 --> 00:33:00,539
comma monitor print job status so if you

878
00:33:00,539 --> 00:33:01,980
want to do a run dll from your office

879
00:33:01,980 --> 00:33:03,659
application and you need a good file

880
00:33:03,659 --> 00:33:04,500
name

881
00:33:04,500 --> 00:33:08,460
go forward for this one HP MSN 120 or

882
00:33:08,460 --> 00:33:10,500
130 just drop the file on disk run it

883
00:33:10,500 --> 00:33:13,080
and you you it's pretty like you'll

884
00:33:13,080 --> 00:33:14,580
bypass a bunch of filters you'll

885
00:33:14,580 --> 00:33:16,019
definitely bypass a tech service

886
00:33:16,019 --> 00:33:17,700
reduction with it

887
00:33:17,700 --> 00:33:19,320
and I'll show you the screenshot in a

888
00:33:19,320 --> 00:33:21,439
while

889
00:33:22,679 --> 00:33:23,399
um

890
00:33:23,399 --> 00:33:25,320
cell not sure if any Consultants here

891
00:33:25,320 --> 00:33:27,299
it's a very popular tool Consultants

892
00:33:27,299 --> 00:33:29,460
things sell it allows you to quickly

893
00:33:29,460 --> 00:33:32,360
build some nice uh

894
00:33:32,360 --> 00:33:35,159
nice graphs in PowerPoint and Excel with

895
00:33:35,159 --> 00:33:36,299
things cells so that's also a popular

896
00:33:36,299 --> 00:33:39,480
offender in a lot of environments uh and

897
00:33:39,480 --> 00:33:41,220
this is uh this is actually this is a

898
00:33:41,220 --> 00:33:43,620
dump from the uh from the ASR rule so

899
00:33:43,620 --> 00:33:45,240
this decompiled as our Rule and there's

900
00:33:45,240 --> 00:33:47,820
this get command line exclusions so

901
00:33:47,820 --> 00:33:49,080
these are the things which the attack

902
00:33:49,080 --> 00:33:51,720
service reduction engine ignores and

903
00:33:51,720 --> 00:33:54,360
here you'll see it specifically ignores

904
00:33:54,360 --> 00:33:57,840
the Run dll 32 with the regex uh for uh

905
00:33:57,840 --> 00:34:00,120
the monitor print job status although it

906
00:34:00,120 --> 00:34:02,220
has this very specific version number in

907
00:34:02,220 --> 00:34:04,200
here but yeah

908
00:34:04,200 --> 00:34:07,019
so plenty of things which you can do and

909
00:34:07,019 --> 00:34:09,119
not send out

910
00:34:09,119 --> 00:34:11,219
let's go a bit quicker

911
00:34:11,219 --> 00:34:13,500
um so look at process injection

912
00:34:13,500 --> 00:34:15,960
um if I've I've seen a lot of red teams

913
00:34:15,960 --> 00:34:17,639
who are super afraid of doing create

914
00:34:17,639 --> 00:34:19,379
remote threat because credit remote

915
00:34:19,379 --> 00:34:22,159
threat stands out right and they much

916
00:34:22,159 --> 00:34:25,918
rather use things like Q user ABC or all

917
00:34:25,918 --> 00:34:27,659
the other things because that's way more

918
00:34:27,659 --> 00:34:30,179
stealthier you think

919
00:34:30,179 --> 00:34:32,280
well what we found out is that actually

920
00:34:32,280 --> 00:34:34,080
it's the it's the other way around if

921
00:34:34,080 --> 00:34:36,899
you're using this obscure apis to

922
00:34:36,899 --> 00:34:38,820
uh to do process injection you're

923
00:34:38,820 --> 00:34:40,260
standing out way more because nobody's

924
00:34:40,260 --> 00:34:41,820
using these obscure apis through price

925
00:34:41,820 --> 00:34:44,099
injection well everybody is using Create

926
00:34:44,099 --> 00:34:45,659
remote threat API to do process

927
00:34:45,659 --> 00:34:47,879
injection so if you do just

928
00:34:47,879 --> 00:34:50,639
run this query and again this this query

929
00:34:50,639 --> 00:34:52,080
looks for the

930
00:34:52,080 --> 00:34:53,940
device events where the action type

931
00:34:53,940 --> 00:34:55,980
contains the the word create remote

932
00:34:55,980 --> 00:34:58,859
threat and just as a quick summarize

933
00:34:58,859 --> 00:35:01,200
basically you can take account and it

934
00:35:01,200 --> 00:35:02,760
just makes a bunch of takes a bunch of

935
00:35:02,760 --> 00:35:04,680
properties of it

936
00:35:04,680 --> 00:35:07,500
um what you'll see is that these are all

937
00:35:07,500 --> 00:35:10,079
the creative mode threat API calls which

938
00:35:10,079 --> 00:35:11,579
are being logged by Defender so like the

939
00:35:11,579 --> 00:35:16,760
first one is the CRS CSS uh sorry

940
00:35:16,760 --> 00:35:18,720
just uh

941
00:35:18,720 --> 00:35:20,640
I think it's a Windows ability or I'm

942
00:35:20,640 --> 00:35:21,720
pretty sure it's a Windows built-in

943
00:35:21,720 --> 00:35:23,099
thing

944
00:35:23,099 --> 00:35:25,380
it well you see how often this has

945
00:35:25,380 --> 00:35:27,180
happened you see on how many unique

946
00:35:27,180 --> 00:35:29,220
devices it has happened and you see how

947
00:35:29,220 --> 00:35:31,020
many different files has acted upon so

948
00:35:31,020 --> 00:35:33,180
basically it means csrss injecting into

949
00:35:33,180 --> 00:35:35,940
one of those files and there are 2400

950
00:35:35,940 --> 00:35:39,119
unique files where csrss is injecting

951
00:35:39,119 --> 00:35:41,099
into with creative mode thread I'm not

952
00:35:41,099 --> 00:35:43,260
talking about the Q user APC or all the

953
00:35:43,260 --> 00:35:47,160
other nice tricks to to do that

954
00:35:47,160 --> 00:35:49,760
um another one which is very nice to to

955
00:35:49,760 --> 00:35:52,500
abuse in your red teams is the VMware

956
00:35:52,500 --> 00:35:55,320
tools uh demon the VMware tools demon is

957
00:35:55,320 --> 00:35:56,820
pretty nasty piece of software because

958
00:35:56,820 --> 00:35:58,200
it does some nasty stuff and it makes

959
00:35:58,200 --> 00:36:00,060
sense that it does it

960
00:36:00,060 --> 00:36:02,820
um but it's great that a great to hide

961
00:36:02,820 --> 00:36:04,920
in in the in the VMware tools demon if

962
00:36:04,920 --> 00:36:06,780
you want to do nasty stuff yourself

963
00:36:06,780 --> 00:36:08,700
you'll see here that the VMware tools

964
00:36:08,700 --> 00:36:11,400
demon has done 18

965
00:36:11,400 --> 00:36:15,000
000 creative mode thread calls in 208

966
00:36:15,000 --> 00:36:17,280
unique processes so it's pretty nice

967
00:36:17,280 --> 00:36:19,020
kind of to imitate if you want to create

968
00:36:19,020 --> 00:36:21,720
mode threat and don't want to stand out

969
00:36:21,720 --> 00:36:23,099
um and again the same holds for all the

970
00:36:23,099 --> 00:36:24,780
other things I'm going to go over all of

971
00:36:24,780 --> 00:36:26,220
them one by one but you'll just see it

972
00:36:26,220 --> 00:36:28,440
it happens super often and if you I I

973
00:36:28,440 --> 00:36:30,420
don't have the slides for the for the Q

974
00:36:30,420 --> 00:36:33,180
user APC uh API called the data is in

975
00:36:33,180 --> 00:36:35,040
Defender for endpoint oh but you'll see

976
00:36:35,040 --> 00:36:36,960
that it's significantly used

977
00:36:36,960 --> 00:36:39,599
significantly less than than here things

978
00:36:39,599 --> 00:36:41,820
stand out way more if you if you use Q

979
00:36:41,820 --> 00:36:44,579
user APC than if you use the Creator

980
00:36:44,579 --> 00:36:47,180
mode thread one

981
00:36:48,480 --> 00:36:51,720
um quickly talking about Elsa stamping

982
00:36:51,720 --> 00:36:52,619
um

983
00:36:52,619 --> 00:36:55,740
what I did here is looked at the uh

984
00:36:55,740 --> 00:36:57,119
again at the attack service reduction

985
00:36:57,119 --> 00:37:00,540
rule which is uh which is there to find

986
00:37:00,540 --> 00:37:02,640
Elsa's credential steps basically so if

987
00:37:02,640 --> 00:37:05,339
someone tries to dump else and ASR is

988
00:37:05,339 --> 00:37:06,420
enabled and in this environment

989
00:37:06,420 --> 00:37:09,359
environment it was then it logs an event

990
00:37:09,359 --> 00:37:13,079
that someone tries to access LSS memory

991
00:37:13,079 --> 00:37:15,140
um

992
00:37:15,599 --> 00:37:17,880
this is how often it has happened and

993
00:37:17,880 --> 00:37:21,540
again it it shocked me quite quite yeah

994
00:37:21,540 --> 00:37:23,160
it shocked me that this happened so

995
00:37:23,160 --> 00:37:27,480
often so in 30 days there have been 40 4

996
00:37:27,480 --> 00:37:31,020
600 unique files which have tried which

997
00:37:31,020 --> 00:37:33,000
have triggered this ASR Rule and this is

998
00:37:33,000 --> 00:37:34,380
how often they have triggered the azir

999
00:37:34,380 --> 00:37:35,220
rule

1000
00:37:35,220 --> 00:37:37,940
so apparently the wmi process

1001
00:37:37,940 --> 00:37:40,440
constantly tries to access LS memory and

1002
00:37:40,440 --> 00:37:41,880
read from it I don't know why but it

1003
00:37:41,880 --> 00:37:44,760
happens same for setup.xo which was

1004
00:37:44,760 --> 00:37:46,500
pretty nice actually set about X or MSI

1005
00:37:46,500 --> 00:37:48,839
exactly X just apparently triggers this

1006
00:37:48,839 --> 00:37:50,220
rule in well in this specific

1007
00:37:50,220 --> 00:37:51,720
environment I also cross check this

1008
00:37:51,720 --> 00:37:53,160
these file names with other environments

1009
00:37:53,160 --> 00:37:55,440
the numbers are different but the

1010
00:37:55,440 --> 00:37:57,900
setup.x1 keeps popping up it's pretty

1011
00:37:57,900 --> 00:38:00,119
popular and the same for MSI exec some

1012
00:38:00,119 --> 00:38:03,079
reason they did this happens

1013
00:38:06,599 --> 00:38:09,960
um so yeah if you want to dump else

1014
00:38:09,960 --> 00:38:10,859
um

1015
00:38:10,859 --> 00:38:13,560
you might consider looking at these file

1016
00:38:13,560 --> 00:38:15,060
names like I can tell you for sure that

1017
00:38:15,060 --> 00:38:17,880
just using these file names is is not

1018
00:38:17,880 --> 00:38:19,920
enough so if you just use the file names

1019
00:38:19,920 --> 00:38:21,420
which which are shown here you won't

1020
00:38:21,420 --> 00:38:23,940
bypass attack service reduction you

1021
00:38:23,940 --> 00:38:26,460
won't buy past Defender endpoint

1022
00:38:26,460 --> 00:38:28,740
but you might consider injecting into

1023
00:38:28,740 --> 00:38:30,660
one of those real processes and then you

1024
00:38:30,660 --> 00:38:31,760
might actually bypass

1025
00:38:31,760 --> 00:38:32,960
[Music]

1026
00:38:32,960 --> 00:38:35,339
attack service reduction and you might

1027
00:38:35,339 --> 00:38:36,540
bypass

1028
00:38:36,540 --> 00:38:39,359
the

1029
00:38:39,359 --> 00:38:43,279
individual endpoint detections

1030
00:38:44,280 --> 00:38:46,339
um

1031
00:38:46,500 --> 00:38:49,260
so quickly looking at run dll

1032
00:38:49,260 --> 00:38:49,920
um

1033
00:38:49,920 --> 00:38:53,640
I've seen quite some use of run dll in I

1034
00:38:53,640 --> 00:38:56,099
think in in like the real malware

1035
00:38:56,099 --> 00:38:58,440
samples and to some level of degree also

1036
00:38:58,440 --> 00:39:00,240
in red teams I think red teams usually

1037
00:39:00,240 --> 00:39:02,820
try to avoid run dll 32 because it's

1038
00:39:02,820 --> 00:39:05,579
pretty well known but in some cases it

1039
00:39:05,579 --> 00:39:07,140
is still used for for different kinds of

1040
00:39:07,140 --> 00:39:09,300
reasons and I think one of the most

1041
00:39:09,300 --> 00:39:11,640
legit reasons to still use it is if

1042
00:39:11,640 --> 00:39:13,560
you're emulating an adversary which is

1043
00:39:13,560 --> 00:39:16,079
not super advanced in that case it makes

1044
00:39:16,079 --> 00:39:17,760
sense to use on the other 32 because in

1045
00:39:17,760 --> 00:39:20,400
real life the less Advanced our

1046
00:39:20,400 --> 00:39:22,079
adversaries are also using around the

1047
00:39:22,079 --> 00:39:24,359
l32 so I was interested in building

1048
00:39:24,359 --> 00:39:26,820
compiling a list of file names which are

1049
00:39:26,820 --> 00:39:28,560
which are commonly used in in the real

1050
00:39:28,560 --> 00:39:30,240
environment and function names which are

1051
00:39:30,240 --> 00:39:32,339
commonly used in real environments and

1052
00:39:32,339 --> 00:39:33,839
to see what happens

1053
00:39:33,839 --> 00:39:36,119
so I got a pretty complicated query it's

1054
00:39:36,119 --> 00:39:37,680
not very interesting to go into detail

1055
00:39:37,680 --> 00:39:38,820
about what I basically do is just use

1056
00:39:38,820 --> 00:39:40,560
some regular Expressions to extract the

1057
00:39:40,560 --> 00:39:42,900
dll name and the function name of the

1058
00:39:42,900 --> 00:39:44,339
command line

1059
00:39:44,339 --> 00:39:46,320
and this is what you get so if you're

1060
00:39:46,320 --> 00:39:49,020
interested in using run dll32 as an

1061
00:39:49,020 --> 00:39:51,660
attacker I think your best bet is to to

1062
00:39:51,660 --> 00:39:54,300
to use one of those files so the the

1063
00:39:54,300 --> 00:39:56,480
duff the

1064
00:39:56,480 --> 00:39:59,960
dll I think that's the webdoc Handler

1065
00:39:59,960 --> 00:40:02,940
and the causal function offset cookie I

1066
00:40:02,940 --> 00:40:04,859
think this is this is by far the most

1067
00:40:04,859 --> 00:40:06,839
popular one in literally any environment

1068
00:40:06,839 --> 00:40:08,700
I've checked this on and the reason is

1069
00:40:08,700 --> 00:40:11,339
because this is probably heavily used by

1070
00:40:11,339 --> 00:40:13,859
um by SharePoint and by office 365. so

1071
00:40:13,859 --> 00:40:15,839
if you have endpoints of 365 running on

1072
00:40:15,839 --> 00:40:17,339
it and they do the wrapped off stuff

1073
00:40:17,339 --> 00:40:19,260
with office to sync files and to do this

1074
00:40:19,260 --> 00:40:23,160
this auto magic word save things and all

1075
00:40:23,160 --> 00:40:25,500
the new nice features in office I think

1076
00:40:25,500 --> 00:40:27,240
they all use this this stuff that's why

1077
00:40:27,240 --> 00:40:30,119
it's so so prevalent but again here you

1078
00:40:30,119 --> 00:40:33,180
have a list of other ideas of the file

1079
00:40:33,180 --> 00:40:35,579
names to

1080
00:40:35,579 --> 00:40:37,079
um to imitate if you're interested in

1081
00:40:37,079 --> 00:40:37,800
running

1082
00:40:37,800 --> 00:40:42,180
around the other 32 as an as a red team

1083
00:40:42,180 --> 00:40:43,619
um

1084
00:40:43,619 --> 00:40:45,960
this one is also pretty popular uh the

1085
00:40:45,960 --> 00:40:48,960
first I was a bit struggling why is

1086
00:40:48,960 --> 00:40:50,400
there this weird file name and this

1087
00:40:50,400 --> 00:40:53,520
weird function uh running it from even a

1088
00:40:53,520 --> 00:40:55,380
temp so there's the C Windows installer

1089
00:40:55,380 --> 00:40:57,240
temp so that's the file name of the dll

1090
00:40:57,240 --> 00:41:00,060
it's not even a dll and the function is

1091
00:41:00,060 --> 00:41:03,300
called zzz invoke manage custom action

1092
00:41:03,300 --> 00:41:04,500
out of proc

1093
00:41:04,500 --> 00:41:05,700
[Music]

1094
00:41:05,700 --> 00:41:07,740
pretty interesting and the command line

1095
00:41:07,740 --> 00:41:09,200
was something with msix

1096
00:41:09,200 --> 00:41:12,240
after a bunch of Googling around I

1097
00:41:12,240 --> 00:41:13,560
figured out that

1098
00:41:13,560 --> 00:41:16,440
there's this toolkit called Wix tool set

1099
00:41:16,440 --> 00:41:18,780
a Wix tools that is like a tool which

1100
00:41:18,780 --> 00:41:21,000
you can use to create an installer with

1101
00:41:21,000 --> 00:41:23,280
and if in your installer you want to

1102
00:41:23,280 --> 00:41:25,040
actually run some code

1103
00:41:25,040 --> 00:41:28,619
which is not during the install process

1104
00:41:28,619 --> 00:41:30,960
you can call this invoke managed custom

1105
00:41:30,960 --> 00:41:35,420
action out of proc function in your wix

1106
00:41:36,020 --> 00:41:38,940
and that will basically end up being

1107
00:41:38,940 --> 00:41:42,660
around dll call to this function in in

1108
00:41:42,660 --> 00:41:44,640
your installer and this one is pretty

1109
00:41:44,640 --> 00:41:47,820
popular as well so I mean

1110
00:41:47,820 --> 00:41:50,160
you might consider using these file

1111
00:41:50,160 --> 00:41:52,680
names for your own benefit if you're if

1112
00:41:52,680 --> 00:41:54,480
you're doing an attacker want to run run

1113
00:41:54,480 --> 00:41:58,880
dll 32 or yeah around the l32 detection

1114
00:41:59,040 --> 00:42:00,359
um and then some some music stuff and

1115
00:42:00,359 --> 00:42:02,280
I'll I'll try to wrap it up because I'm

1116
00:42:02,280 --> 00:42:05,520
almost through time

1117
00:42:05,520 --> 00:42:07,260
um there's one interesting thing which

1118
00:42:07,260 --> 00:42:09,180
still I'm not sure why it happens but it

1119
00:42:09,180 --> 00:42:11,700
does happen very often in a lot of

1120
00:42:11,700 --> 00:42:13,140
different environments

1121
00:42:13,140 --> 00:42:16,140
um what it is is that there is this

1122
00:42:16,140 --> 00:42:18,900
process being created by wmi so it comes

1123
00:42:18,900 --> 00:42:22,560
from the wmi prvse which is wmi house on

1124
00:42:22,560 --> 00:42:25,920
the Windows box it runs powershell.x and

1125
00:42:25,920 --> 00:42:27,540
and in the commands and it runs the

1126
00:42:27,540 --> 00:42:31,260
partial the PS1 file in ccnc Windows CCM

1127
00:42:31,260 --> 00:42:32,400
system temp

1128
00:42:32,400 --> 00:42:35,280
so this this kql query basically tries

1129
00:42:35,280 --> 00:42:37,440
to extract that and summarize it this is

1130
00:42:37,440 --> 00:42:38,579
what you'll get

1131
00:42:38,579 --> 00:42:41,520
so wmi is running this Powershell line

1132
00:42:41,520 --> 00:42:43,740
so it runs partial text so it will Dash

1133
00:42:43,740 --> 00:42:45,560
no logo no interactive and all the other

1134
00:42:45,560 --> 00:42:48,480
uh all the other flags

1135
00:42:48,480 --> 00:42:50,339
and I replace the random Goods here just

1136
00:42:50,339 --> 00:42:52,740
to get get the proper count

1137
00:42:52,740 --> 00:42:54,599
um but this is super popular so if

1138
00:42:54,599 --> 00:42:56,940
you're interested in doing uh lateral

1139
00:42:56,940 --> 00:43:00,000
movement using wmi and you want to hide

1140
00:43:00,000 --> 00:43:02,220
in the in the filters of the blue teams

1141
00:43:02,220 --> 00:43:05,400
just do wmi go for powershell.access

1142
00:43:05,400 --> 00:43:07,500
you're executable with these exact

1143
00:43:07,500 --> 00:43:09,780
command lines and put something in this

1144
00:43:09,780 --> 00:43:12,359
in the CCM folder

1145
00:43:12,359 --> 00:43:13,079
um

1146
00:43:13,079 --> 00:43:15,119
and you probably slipped through the

1147
00:43:15,119 --> 00:43:16,319
cracks

1148
00:43:16,319 --> 00:43:18,660
because there's nobody nobody can alert

1149
00:43:18,660 --> 00:43:19,800
on these things because these things

1150
00:43:19,800 --> 00:43:21,420
happen so often in Real Environment it's

1151
00:43:21,420 --> 00:43:22,800
impossible to alert on it so if someone

1152
00:43:22,800 --> 00:43:25,020
has a custom detection for uh that will

1153
00:43:25,020 --> 00:43:27,480
move into wmi this will definitely be in

1154
00:43:27,480 --> 00:43:30,319
their filter

1155
00:43:31,740 --> 00:43:33,599
um and these are the the actual commands

1156
00:43:33,599 --> 00:43:36,240
being run from the Powershell scripts

1157
00:43:36,240 --> 00:43:37,619
which are compounds that actually makes

1158
00:43:37,619 --> 00:43:40,020
sense console house robocopy this some

1159
00:43:40,020 --> 00:43:41,339
host blah blah blah a whole bunch of

1160
00:43:41,339 --> 00:43:43,680
stuff but that's what comes after after

1161
00:43:43,680 --> 00:43:46,560
you're running your Powershell

1162
00:43:46,560 --> 00:43:47,579
um

1163
00:43:47,579 --> 00:43:51,060
another one or oh sorry another trick

1164
00:43:51,060 --> 00:43:54,180
which is uh at least pretty interesting

1165
00:43:54,180 --> 00:43:56,220
to me is I want to do it again a raise

1166
00:43:56,220 --> 00:43:59,160
of hands how often is there a new item

1167
00:43:59,160 --> 00:44:01,079
created new file created in a startup

1168
00:44:01,079 --> 00:44:02,940
folder in an environment and just to

1169
00:44:02,940 --> 00:44:04,500
give a feeling before I do a raise of

1170
00:44:04,500 --> 00:44:07,920
hands it's I've looked at 30 days in an

1171
00:44:07,920 --> 00:44:11,339
environment with 60k endpoints so anyone

1172
00:44:11,339 --> 00:44:13,220
want to take a guess how often a new

1173
00:44:13,220 --> 00:44:15,660
folder is sorry a new file is being

1174
00:44:15,660 --> 00:44:18,180
created in the startup folder in the in

1175
00:44:18,180 --> 00:44:20,220
the start menu but it's like the most

1176
00:44:20,220 --> 00:44:22,319
low-tech persistent switch which exists

1177
00:44:22,319 --> 00:44:24,180
on Windows I guess

1178
00:44:24,180 --> 00:44:26,579
um zero to 100 times

1179
00:44:26,579 --> 00:44:33,599
any hands ah good 100 to 500 times

1180
00:44:33,599 --> 00:44:36,780
nobody five hundred two thousand

1181
00:44:36,780 --> 00:44:39,300
yeah okay three four people I think

1182
00:44:39,300 --> 00:44:41,940
that's all thousand to five thousand or

1183
00:44:41,940 --> 00:44:44,220
just Plus

1184
00:44:44,220 --> 00:44:46,500
yeah one two three

1185
00:44:46,500 --> 00:44:50,240
oh well five thousand plus

1186
00:44:50,339 --> 00:44:51,780
ah

1187
00:44:51,780 --> 00:44:56,040
good the actual number is 95 000. so uh

1188
00:44:56,040 --> 00:44:59,220
if you think that creating an item in

1189
00:44:59,220 --> 00:45:00,839
the startup menu is not stealthy or

1190
00:45:00,839 --> 00:45:03,540
think again because like 95 000 times

1191
00:45:03,540 --> 00:45:05,339
happening in an environment with 60k

1192
00:45:05,339 --> 00:45:08,040
endpoints so it's pretty common

1193
00:45:08,040 --> 00:45:10,400
um and the by far the biggest offender

1194
00:45:10,400 --> 00:45:13,520
is uh is this thing

1195
00:45:13,520 --> 00:45:16,680
office is super the office really really

1196
00:45:16,680 --> 00:45:19,140
really wants you to have the sent to

1197
00:45:19,140 --> 00:45:20,819
OneNote application started up on

1198
00:45:20,819 --> 00:45:23,160
Startup and it will put it there every

1199
00:45:23,160 --> 00:45:24,839
time you start up your machine

1200
00:45:24,839 --> 00:45:27,599
so if I if I look for the well run the

1201
00:45:27,599 --> 00:45:29,040
query and look specifically for the file

1202
00:45:29,040 --> 00:45:30,900
name contains one note because it's been

1203
00:45:30,900 --> 00:45:32,400
a bunch of languages here it has it's

1204
00:45:32,400 --> 00:45:35,160
localized you'll see it happens 35

1205
00:45:35,160 --> 00:45:36,660
000 times

1206
00:45:36,660 --> 00:45:39,599
so if you are interested in persistence

1207
00:45:39,599 --> 00:45:41,640
using the startup folder

1208
00:45:41,640 --> 00:45:45,420
in your start menu Mark go for send to

1209
00:45:45,420 --> 00:45:48,240
go for the file name send to onenote.lnk

1210
00:45:48,240 --> 00:45:50,640
it will definitely not stand out because

1211
00:45:50,640 --> 00:45:54,319
happens all the time

1212
00:45:54,359 --> 00:45:56,940
um some nice Azar bypass

1213
00:45:56,940 --> 00:45:57,720
um

1214
00:45:57,720 --> 00:46:01,200
so it's it's it's bit related not too

1215
00:46:01,200 --> 00:46:03,660
much but what we what we found

1216
00:46:03,660 --> 00:46:04,859
um I forgot the name of the guy but

1217
00:46:04,859 --> 00:46:05,819
someone

1218
00:46:05,819 --> 00:46:08,400
um managed to find a way to decompile to

1219
00:46:08,400 --> 00:46:10,859
extract and decompile the ASR rules he

1220
00:46:10,859 --> 00:46:12,599
put a bunch of those on GitHub but not

1221
00:46:12,599 --> 00:46:13,859
everything

1222
00:46:13,859 --> 00:46:16,260
um what we did is we we continued his

1223
00:46:16,260 --> 00:46:18,060
research and we just decompiled

1224
00:46:18,060 --> 00:46:22,500
everything and got all the ASR rules out

1225
00:46:22,500 --> 00:46:23,640
um I found quite some interesting things

1226
00:46:23,640 --> 00:46:25,920
so um well there's our rule for block

1227
00:46:25,920 --> 00:46:28,200
blocking Adobe from creating child

1228
00:46:28,200 --> 00:46:31,020
processes and this is the filter and

1229
00:46:31,020 --> 00:46:33,660
inside the asro it's a it's a Lua Lua

1230
00:46:33,660 --> 00:46:35,160
script

1231
00:46:35,160 --> 00:46:37,560
um there's the function called get bot

1232
00:46:37,560 --> 00:46:40,319
exclusions uh and these are all the

1233
00:46:40,319 --> 00:46:42,660
exclusions so if if you're if you're

1234
00:46:42,660 --> 00:46:44,460
creating I don't know this well this

1235
00:46:44,460 --> 00:46:46,980
specific one local update ah

1236
00:46:46,980 --> 00:46:50,880
send browser applications chrome.exe

1237
00:46:50,880 --> 00:46:52,560
um it will just bypass this this

1238
00:46:52,560 --> 00:46:55,020
specific as our rule

1239
00:46:55,020 --> 00:46:58,800
um this one is for dumping LSS and this

1240
00:46:58,800 --> 00:47:00,060
is I'm sure you guys are interested in

1241
00:47:00,060 --> 00:47:02,640
this one if you if your application is

1242
00:47:02,640 --> 00:47:04,500
uh you know called where fault security

1243
00:47:04,500 --> 00:47:07,079
X or called mrp.xo this specific path

1244
00:47:07,079 --> 00:47:10,140
you will bypass is a rule there is a

1245
00:47:10,140 --> 00:47:12,119
rule will not trigger on

1246
00:47:12,119 --> 00:47:14,280
um if you're if the executable you're

1247
00:47:14,280 --> 00:47:16,319
running is one of these and the

1248
00:47:16,319 --> 00:47:17,460
interesting ones which at least stand

1249
00:47:17,460 --> 00:47:19,200
out to me is also the Splunk one so I'm

1250
00:47:19,200 --> 00:47:20,579
not sure for some reason the Splunk

1251
00:47:20,579 --> 00:47:23,220
demon is also on the on the list

1252
00:47:23,220 --> 00:47:25,440
um there is a very fondly named called a

1253
00:47:25,440 --> 00:47:27,240
file name which is a very funny name

1254
00:47:27,240 --> 00:47:28,280
called

1255
00:47:28,280 --> 00:47:31,440
trolleyexpress.exim so uh I don't know

1256
00:47:31,440 --> 00:47:33,420
why but if your file is called trolley

1257
00:47:33,420 --> 00:47:35,460
express.xn it's in one of in this

1258
00:47:35,460 --> 00:47:37,500
Windows 10 folder

1259
00:47:37,500 --> 00:47:40,560
it will not trigger the ASR rule so

1260
00:47:40,560 --> 00:47:43,200
there you go

1261
00:47:43,200 --> 00:47:45,660
um so so basically what I'm trying to

1262
00:47:45,660 --> 00:47:47,160
the point I'm trying to make is that the

1263
00:47:47,160 --> 00:47:49,440
the same type of logic also applies to

1264
00:47:49,440 --> 00:47:51,180
just the built-in Microsoft products

1265
00:47:51,180 --> 00:47:53,940
being attack service reduction and the

1266
00:47:53,940 --> 00:47:56,400
same for for the defender for endpoints

1267
00:47:56,400 --> 00:47:57,300
so

1268
00:47:57,300 --> 00:47:59,280
we got the defender findpoint config at

1269
00:47:59,280 --> 00:48:01,200
some point and here you see the same

1270
00:48:01,200 --> 00:48:02,460
thing happening so this is this is part

1271
00:48:02,460 --> 00:48:04,319
of the defender endpoint config which is

1272
00:48:04,319 --> 00:48:06,000
logging Powershell commandlets so

1273
00:48:06,000 --> 00:48:07,440
basically doing Powershell script lock

1274
00:48:07,440 --> 00:48:09,839
logging more or less and what you'll see

1275
00:48:09,839 --> 00:48:12,619
here is that it hasn't it has a filter

1276
00:48:12,619 --> 00:48:14,880
which says

1277
00:48:14,880 --> 00:48:16,319
um let me look at it that's it the

1278
00:48:16,319 --> 00:48:17,700
operator is not

1279
00:48:17,700 --> 00:48:20,460
so it filters out everything which is

1280
00:48:20,460 --> 00:48:23,220
not coming from the process since ir.x

1281
00:48:23,220 --> 00:48:26,339
and has this CI called Integrity signing

1282
00:48:26,339 --> 00:48:29,640
level 12. so if you have if you make

1283
00:48:29,640 --> 00:48:31,020
sure that your binary has the original

1284
00:48:31,020 --> 00:48:33,240
file name of sense irotex which is

1285
00:48:33,240 --> 00:48:35,280
fairly easy to do and you have the right

1286
00:48:35,280 --> 00:48:37,079
signing level which is 12 I'm not sure

1287
00:48:37,079 --> 00:48:38,220
what it exactly means but I'm sure you

1288
00:48:38,220 --> 00:48:40,740
can get it signed on that level

1289
00:48:40,740 --> 00:48:43,680
you'll just bypass this whole EDR

1290
00:48:43,680 --> 00:48:46,140
collection rule

1291
00:48:46,140 --> 00:48:48,540
um so it's pretty useful to to have

1292
00:48:48,540 --> 00:48:51,119
those things as well

1293
00:48:51,119 --> 00:48:52,500
um and I want one final thought on how

1294
00:48:52,500 --> 00:48:54,960
to improve your your detections if

1295
00:48:54,960 --> 00:48:56,520
you're a blue team are listening on this

1296
00:48:56,520 --> 00:48:58,200
one I think it's pretty hard there's

1297
00:48:58,200 --> 00:49:00,300
there's no real way to avoid it as far

1298
00:49:00,300 --> 00:49:02,880
as I know or could think of the only

1299
00:49:02,880 --> 00:49:04,440
thing you can do is just try to minimize

1300
00:49:04,440 --> 00:49:06,900
the impact of of or the likelihood of

1301
00:49:06,900 --> 00:49:08,700
abuse

1302
00:49:08,700 --> 00:49:09,300
um

1303
00:49:09,300 --> 00:49:12,420
and to do that you can you can use full

1304
00:49:12,420 --> 00:49:14,040
parts or regular expressions for full

1305
00:49:14,040 --> 00:49:15,359
Parts instead of just using file names

1306
00:49:15,359 --> 00:49:17,040
because file names are super easy to to

1307
00:49:17,040 --> 00:49:19,319
copy paste having a full path in there

1308
00:49:19,319 --> 00:49:21,000
especially if the path is inside a

1309
00:49:21,000 --> 00:49:22,859
protected folder makes it already a bit

1310
00:49:22,859 --> 00:49:24,180
harder

1311
00:49:24,180 --> 00:49:25,859
um always assume that the attacker does

1312
00:49:25,859 --> 00:49:27,839
know what your filters are don't fall in

1313
00:49:27,839 --> 00:49:29,640
the Trap thinking well but no but no

1314
00:49:29,640 --> 00:49:31,740
attacker knows what filters I'm using so

1315
00:49:31,740 --> 00:49:33,660
he cannot bypass just assume he knows it

1316
00:49:33,660 --> 00:49:35,220
and he might or might not know it but at

1317
00:49:35,220 --> 00:49:37,859
least assume the worst

1318
00:49:37,859 --> 00:49:39,240
um

1319
00:49:39,240 --> 00:49:41,880
build separate detections to to detect

1320
00:49:41,880 --> 00:49:43,380
this kind of masquerading if you know

1321
00:49:43,380 --> 00:49:45,180
that you have filters in place which are

1322
00:49:45,180 --> 00:49:47,819
by possible that's okay but at least try

1323
00:49:47,819 --> 00:49:50,460
to build it as a rule on top of it which

1324
00:49:50,460 --> 00:49:52,500
tries to detect someone masquerading

1325
00:49:52,500 --> 00:49:54,480
these filters to bypass your detection

1326
00:49:54,480 --> 00:49:56,900
rules

1327
00:49:57,000 --> 00:49:58,740
um be redundant in your detections were

1328
00:49:58,740 --> 00:50:01,380
nearly impossible so sometimes there are

1329
00:50:01,380 --> 00:50:03,480
two three four five or ten ways to

1330
00:50:03,480 --> 00:50:05,099
detect something

1331
00:50:05,099 --> 00:50:05,940
um

1332
00:50:05,940 --> 00:50:07,920
try to at least have two or three ways

1333
00:50:07,920 --> 00:50:09,780
to detect uh certain attack type instead

1334
00:50:09,780 --> 00:50:11,040
of just having one rule and just be done

1335
00:50:11,040 --> 00:50:13,079
with it because that one rule might be

1336
00:50:13,079 --> 00:50:14,819
able to buy or someone might be able to

1337
00:50:14,819 --> 00:50:16,740
bypass that one detection rule but you

1338
00:50:16,740 --> 00:50:18,480
have two or three of those then might be

1339
00:50:18,480 --> 00:50:19,980
already significantly harder to bypass

1340
00:50:19,980 --> 00:50:21,180
if you detect it in two or three

1341
00:50:21,180 --> 00:50:23,160
different ways

1342
00:50:23,160 --> 00:50:24,480
um and the final one is to maintain your

1343
00:50:24,480 --> 00:50:26,160
filters what I often see happening is

1344
00:50:26,160 --> 00:50:27,060
that

1345
00:50:27,060 --> 00:50:29,040
filters are being added all the time to

1346
00:50:29,040 --> 00:50:30,839
detection so so there's new false

1347
00:50:30,839 --> 00:50:32,280
positive popping up after a month or two

1348
00:50:32,280 --> 00:50:34,079
months in production so someone adds a

1349
00:50:34,079 --> 00:50:35,700
new filter to the to the list of

1350
00:50:35,700 --> 00:50:37,740
existing filters but nobody ever removes

1351
00:50:37,740 --> 00:50:40,020
filters from detection rules and try to

1352
00:50:40,020 --> 00:50:42,180
think about it as well try to see like I

1353
00:50:42,180 --> 00:50:43,680
don't know like once every six months go

1354
00:50:43,680 --> 00:50:45,420
through all your filters and see if the

1355
00:50:45,420 --> 00:50:47,400
the filters are still needed and if

1356
00:50:47,400 --> 00:50:48,540
there are still false positives being

1357
00:50:48,540 --> 00:50:50,280
generated if you remove the filter if

1358
00:50:50,280 --> 00:50:52,619
it's not just get rid of it

1359
00:50:52,619 --> 00:50:54,000
um and the final one just don't overdo

1360
00:50:54,000 --> 00:50:56,160
it because I mean if if you start

1361
00:50:56,160 --> 00:50:58,200
filtering on file hash names you get

1362
00:50:58,200 --> 00:51:00,540
like insanely complex detections which

1363
00:51:00,540 --> 00:51:02,520
are not maintainable anymore so try to

1364
00:51:02,520 --> 00:51:04,920
find a kind of balance between uh I

1365
00:51:04,920 --> 00:51:06,720
guess maintainability and and and and

1366
00:51:06,720 --> 00:51:08,940
resilience because if you try to make

1367
00:51:08,940 --> 00:51:10,680
everything water tight it will just be

1368
00:51:10,680 --> 00:51:13,020
impossible to maintain

1369
00:51:13,020 --> 00:51:14,400
and that's all I had thanks for

1370
00:51:14,400 --> 00:51:16,700
listening

1371
00:51:21,900 --> 00:51:22,720
any questions

1372
00:51:22,720 --> 00:51:24,900
[Music]

1373
00:51:24,900 --> 00:51:27,300
okay one question online from V host V

1374
00:51:27,300 --> 00:51:29,880
host is asking uh do you have a top five

1375
00:51:29,880 --> 00:51:32,339
list of common law bins that adversaries

1376
00:51:32,339 --> 00:51:33,900
use like things that the blue team could

1377
00:51:33,900 --> 00:51:34,960
be hunting for

1378
00:51:34,960 --> 00:51:37,079
[Music]

1379
00:51:37,079 --> 00:51:39,960
um no I I I don't have a top five of

1380
00:51:39,960 --> 00:51:41,940
common law bins

1381
00:51:41,940 --> 00:51:44,460
um but I I personally try to avoid using

1382
00:51:44,460 --> 00:51:46,559
low bins because they stand out

1383
00:51:46,559 --> 00:51:48,300
um I mean low bands are pretty nice but

1384
00:51:48,300 --> 00:51:50,160
if you start using I don't know like

1385
00:51:50,160 --> 00:51:54,240
cert util to uh or you start using bits

1386
00:51:54,240 --> 00:51:56,099
transfer uh how is the tool is called

1387
00:51:56,099 --> 00:51:58,260
the bits admin to to download files it

1388
00:51:58,260 --> 00:52:00,000
stands out like like I mean it's nice

1389
00:52:00,000 --> 00:52:01,619
the function is there but nobody uses it

1390
00:52:01,619 --> 00:52:03,480
in real life if it's not being used in

1391
00:52:03,480 --> 00:52:05,760
real life it stands out as as a huge red

1392
00:52:05,760 --> 00:52:07,920
flag so in general I try to avoid using

1393
00:52:07,920 --> 00:52:10,500
using low bins and yeah try to blend in

1394
00:52:10,500 --> 00:52:11,640
with existing

1395
00:52:11,640 --> 00:52:13,440
stuff I just try to look at what's

1396
00:52:13,440 --> 00:52:14,700
happening in real life and try to

1397
00:52:14,700 --> 00:52:17,280
imitate that instead of using low bins

1398
00:52:17,280 --> 00:52:18,370
that answers the question

1399
00:52:18,370 --> 00:52:21,059
[Music]

1400
00:52:21,059 --> 00:52:23,400
any questions in the room

1401
00:52:23,400 --> 00:52:25,380
yeah have you seen any of this neutered

1402
00:52:25,380 --> 00:52:30,740
with uh Debbie Dak or with uh

1403
00:52:31,020 --> 00:52:32,640
um if it's being blocked you mean by a

1404
00:52:32,640 --> 00:52:34,020
uh

1405
00:52:34,020 --> 00:52:35,540
um

1406
00:52:35,540 --> 00:52:37,559
and I haven't looked into that to be

1407
00:52:37,559 --> 00:52:40,260
honest I I don't really know

1408
00:52:40,260 --> 00:52:44,839
um I I don't know I don't know

1409
00:52:49,280 --> 00:52:51,839
uh no I have not I have not I have not

1410
00:52:51,839 --> 00:52:54,059
so we looked at the ASR rules but it's

1411
00:52:54,059 --> 00:52:55,640
pretty complicated because you have to

1412
00:52:55,640 --> 00:52:58,200
extract them export them decompile them

1413
00:52:58,200 --> 00:53:01,319
uh before you get the kind of broken

1414
00:53:01,319 --> 00:53:03,900
lure code out of it uh but I don't think

1415
00:53:03,900 --> 00:53:06,420
it will be well I I haven't tried it but

1416
00:53:06,420 --> 00:53:07,680
I'm pretty sure it will be pretty hard

1417
00:53:07,680 --> 00:53:10,200
to just go back the whole chain because

1418
00:53:10,200 --> 00:53:11,760
I think these things are also signed so

1419
00:53:11,760 --> 00:53:15,440
I'm not sure you can easily modify those

1420
00:53:15,660 --> 00:53:17,640
but yeah there's a ton of gold to be to

1421
00:53:17,640 --> 00:53:19,500
be to we gotten from just looking at the

1422
00:53:19,500 --> 00:53:21,720
the compiled ASR code I mean the code is

1423
00:53:21,720 --> 00:53:23,339
just on GitHub so you can just pull the

1424
00:53:23,339 --> 00:53:24,780
code of GitHub and just decompile

1425
00:53:24,780 --> 00:53:27,359
yourself and look at all the

1426
00:53:27,359 --> 00:53:30,000
nice stuff which is in there for uh for

1427
00:53:30,000 --> 00:53:32,900
all your teamers here

1428
00:53:33,359 --> 00:53:35,779
yep

1429
00:53:37,740 --> 00:53:39,420
um I'll share it with you after a talk I

1430
00:53:39,420 --> 00:53:40,859
don't have it I don't have it ready I'll

1431
00:53:40,859 --> 00:53:42,059
share with you after talk I have it

1432
00:53:42,059 --> 00:53:44,300
somewhere

1433
00:53:46,980 --> 00:53:49,460
yep

1434
00:53:51,420 --> 00:53:53,359
all right

1435
00:53:53,359 --> 00:53:55,980
no I'm I'm I have to keep the Privacy

1436
00:53:55,980 --> 00:53:57,480
yeah I can't share all the answers I

1437
00:53:57,480 --> 00:53:58,800
also don't want to to share all this

1438
00:53:58,800 --> 00:54:00,540
stuff in the blog post because it's yeah

1439
00:54:00,540 --> 00:54:02,700
I'm a bit afraid it will be abused big

1440
00:54:02,700 --> 00:54:04,140
time by a lot of people so I just want

1441
00:54:04,140 --> 00:54:05,940
to share it here and everyone here can

1442
00:54:05,940 --> 00:54:07,140
know but I don't want to put it on the

1443
00:54:07,140 --> 00:54:09,180
internet so everyone can just start

1444
00:54:09,180 --> 00:54:10,920
playing around with it and and doing

1445
00:54:10,920 --> 00:54:15,440
this stuff in uh with malicious intent

1446
00:54:17,780 --> 00:54:21,780
[Laughter]

1447
00:54:23,520 --> 00:54:26,240
other questions

1448
00:54:27,920 --> 00:54:31,460
cool thanks everyone

