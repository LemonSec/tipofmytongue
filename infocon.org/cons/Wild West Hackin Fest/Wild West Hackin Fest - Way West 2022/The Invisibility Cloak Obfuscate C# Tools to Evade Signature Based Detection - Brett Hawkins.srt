1
00:00:02,879 --> 00:00:06,299
all right welcome to 6 p.m and the last

2
00:00:06,299 --> 00:00:07,980
Talk of the day for track two we got

3
00:00:07,980 --> 00:00:10,679
Brett Hawkins applying the invisibility

4
00:00:10,679 --> 00:00:13,259
cloak obfuscating c-sharp tools to evade

5
00:00:13,259 --> 00:00:17,220
signature-based detection Brett Brett is

6
00:00:17,220 --> 00:00:18,600
a he's been in the information security

7
00:00:18,600 --> 00:00:20,279
for a while now working for multiple

8
00:00:20,279 --> 00:00:22,080
Fortune 500 companies across different

9
00:00:22,080 --> 00:00:24,359
Industries currently on the adversary

10
00:00:24,359 --> 00:00:27,060
simulation team at X-Force red at IBM

11
00:00:27,060 --> 00:00:29,160
uh he's got some certifications he's

12
00:00:29,160 --> 00:00:30,900
spoken at conferences in the midwest

13
00:00:30,900 --> 00:00:33,420
apparently Derby con hackers teaching

14
00:00:33,420 --> 00:00:35,340
hackers in Columbus and uh besides

15
00:00:35,340 --> 00:00:36,960
Cleveland also a member of the open

16
00:00:36,960 --> 00:00:38,520
source Community contributed to lots of

17
00:00:38,520 --> 00:00:39,840
projects you're probably already using

18
00:00:39,840 --> 00:00:42,180
uh his knowledge and experience and

19
00:00:42,180 --> 00:00:43,800
breadth of information gives him a

20
00:00:43,800 --> 00:00:45,300
unique and well-rounded perspective that

21
00:00:45,300 --> 00:00:47,520
he's going to show off right now

22
00:00:47,520 --> 00:00:50,960
thank you very much thank you

23
00:00:51,000 --> 00:00:53,940
all right so uh for those that are here

24
00:00:53,940 --> 00:00:56,520
physically uh thanks for uh delaying

25
00:00:56,520 --> 00:00:58,440
your dinner tonight to uh come see the

26
00:00:58,440 --> 00:01:00,840
talks I I appreciate that uh for all

27
00:01:00,840 --> 00:01:02,160
those watching virtually you know thank

28
00:01:02,160 --> 00:01:03,780
you for for joining in

29
00:01:03,780 --> 00:01:06,119
uh yeah some of my talk uh applying the

30
00:01:06,119 --> 00:01:08,340
visibility cloak obfuscape C chart tools

31
00:01:08,340 --> 00:01:11,280
to evade signature based detection

32
00:01:11,280 --> 00:01:13,740
so um as you mentioned uh my name is

33
00:01:13,740 --> 00:01:15,720
Brett I'm on the adversary simulation

34
00:01:15,720 --> 00:01:18,960
team at IBM X-Force red uh we typically

35
00:01:18,960 --> 00:01:21,360
do like red team type of engagements so

36
00:01:21,360 --> 00:01:22,920
long term two three month type of

37
00:01:22,920 --> 00:01:25,740
engagements uh for typically pretty

38
00:01:25,740 --> 00:01:27,360
large clients both in the public and

39
00:01:27,360 --> 00:01:29,820
private sector uh you know focused on

40
00:01:29,820 --> 00:01:31,799
getting access to kind of an

41
00:01:31,799 --> 00:01:33,299
organization's kind of crown jewels

42
00:01:33,299 --> 00:01:35,040
while you know remaining stealthy not

43
00:01:35,040 --> 00:01:36,659
being detected

44
00:01:36,659 --> 00:01:39,659
um prior to X-Force red I was on the

45
00:01:39,659 --> 00:01:42,600
Mandy at Red Team uh doing uh adversary

46
00:01:42,600 --> 00:01:44,820
simulation and also Network pen testing

47
00:01:44,820 --> 00:01:47,820
for a while prior to that I was on the

48
00:01:47,820 --> 00:01:49,439
adversary simulation team at JPMorgan

49
00:01:49,439 --> 00:01:52,500
Chase and then prior to that uh I was at

50
00:01:52,500 --> 00:01:54,060
the James smucker company where I did

51
00:01:54,060 --> 00:01:55,860
both kind of blue team type work like I

52
00:01:55,860 --> 00:01:57,659
was in a sock and then also did Network

53
00:01:57,659 --> 00:01:59,220
penetration testing

54
00:01:59,220 --> 00:02:01,439
as far as stuff outside of work what do

55
00:02:01,439 --> 00:02:04,979
I like to do uh big sports fan so I'm

56
00:02:04,979 --> 00:02:07,860
from Ohio so I really like the Cavs

57
00:02:07,860 --> 00:02:10,020
basketball Browns football you know

58
00:02:10,020 --> 00:02:12,000
Buckeyes football that type of thing

59
00:02:12,000 --> 00:02:15,000
I really like playing Xbox so uh we our

60
00:02:15,000 --> 00:02:17,340
team really likes to play uh Halo a lot

61
00:02:17,340 --> 00:02:19,379
so uh play quite a bit of quite a bit

62
00:02:19,379 --> 00:02:21,900
Halo together also really into barbecue

63
00:02:21,900 --> 00:02:23,819
smoking so I have a smoker at home so

64
00:02:23,819 --> 00:02:25,680
brilliant you know smoking a pulled pork

65
00:02:25,680 --> 00:02:27,120
or brisket you know stuff like that

66
00:02:27,120 --> 00:02:28,800
really really into that when the weather

67
00:02:28,800 --> 00:02:30,840
is actually nice in Ohio which is not

68
00:02:30,840 --> 00:02:33,180
very often so

69
00:02:33,180 --> 00:02:35,879
uh so one thing I like to ask whenever

70
00:02:35,879 --> 00:02:37,980
like I go to talks and stuff is like I

71
00:02:37,980 --> 00:02:39,360
always like how did they come up with

72
00:02:39,360 --> 00:02:40,800
this like how they come with this

73
00:02:40,800 --> 00:02:43,379
research this idea uh so you know this

74
00:02:43,379 --> 00:02:44,940
specific research uh one of the main

75
00:02:44,940 --> 00:02:47,400
reasons was just advances improvements

76
00:02:47,400 --> 00:02:48,959
in security products and configurations

77
00:02:48,959 --> 00:02:50,519
over the years so

78
00:02:50,519 --> 00:02:52,140
specifically with like.net tradecraft

79
00:02:52,140 --> 00:02:54,239
you know five years ago it wasn't very

80
00:02:54,239 --> 00:02:57,540
good at all but products you know and

81
00:02:57,540 --> 00:02:58,739
you know a lot of security companies are

82
00:02:58,739 --> 00:03:01,500
up in their game uh which causes us as

83
00:03:01,500 --> 00:03:03,300
offensive security practitioners to also

84
00:03:03,300 --> 00:03:05,340
up our game second reason for this

85
00:03:05,340 --> 00:03:08,040
research uh there are cases so with our

86
00:03:08,040 --> 00:03:10,200
team for example like private tooling is

87
00:03:10,200 --> 00:03:11,879
King but there are cases I'll get into

88
00:03:11,879 --> 00:03:14,159
in a second where you want to use public

89
00:03:14,159 --> 00:03:16,920
c-sharp toolkits and you want to use

90
00:03:16,920 --> 00:03:19,019
those for uh activities without

91
00:03:19,019 --> 00:03:21,060
detection whether you're running them on

92
00:03:21,060 --> 00:03:22,980
disk you know dropping them to disk or

93
00:03:22,980 --> 00:03:24,659
you're running them in memory they're

94
00:03:24,659 --> 00:03:26,099
you know we need to be able to use these

95
00:03:26,099 --> 00:03:27,540
tool kits and we need to be able to use

96
00:03:27,540 --> 00:03:30,659
it like I said without getting detected

97
00:03:30,659 --> 00:03:33,659
this talk is for everybody uh Ted lasso

98
00:03:33,659 --> 00:03:35,220
it's for everybody uh so whether you're

99
00:03:35,220 --> 00:03:36,780
on offense whether in defense so

100
00:03:36,780 --> 00:03:38,159
obviously if you're on offense whether

101
00:03:38,159 --> 00:03:39,720
you do pen testing or anything like that

102
00:03:39,720 --> 00:03:41,819
uh you're gonna get a lot of this a lot

103
00:03:41,819 --> 00:03:43,739
of practical usage obviously

104
00:03:43,739 --> 00:03:45,599
um out of this talk defense you're gonna

105
00:03:45,599 --> 00:03:46,980
get a lot too so you're gonna see maybe

106
00:03:46,980 --> 00:03:48,659
how brittle some of these signatures can

107
00:03:48,659 --> 00:03:50,760
be uh for some of these tools some of

108
00:03:50,760 --> 00:03:52,260
the tooling that is out there so this

109
00:03:52,260 --> 00:03:53,940
talk is really for everybody and because

110
00:03:53,940 --> 00:03:56,040
I started out on defense I kind of

111
00:03:56,040 --> 00:03:57,780
always have kind of that defensive hat

112
00:03:57,780 --> 00:04:00,480
on so that's kind of the the scope that

113
00:04:00,480 --> 00:04:01,980
I usually go with whenever I'm doing

114
00:04:01,980 --> 00:04:03,360
anything offensive I always think about

115
00:04:03,360 --> 00:04:06,920
like the defensive side as well

116
00:04:07,560 --> 00:04:09,599
so as far as the agenda I'm going to go

117
00:04:09,599 --> 00:04:12,420
over a background on kind of uh you know

118
00:04:12,420 --> 00:04:14,340
c-sharp tools that are out there and

119
00:04:14,340 --> 00:04:15,659
then also

120
00:04:15,659 --> 00:04:17,160
I'm going to go over kind of what the

121
00:04:17,160 --> 00:04:18,839
kind of security control landscape looks

122
00:04:18,839 --> 00:04:21,600
like for for c-sharp tools and I'm going

123
00:04:21,600 --> 00:04:23,220
to go through some different static

124
00:04:23,220 --> 00:04:24,540
components and c-sharp tools that you

125
00:04:24,540 --> 00:04:26,520
can use to build a signature based

126
00:04:26,520 --> 00:04:28,199
detection I'm going to go through

127
00:04:28,199 --> 00:04:30,060
changing those static indicators

128
00:04:30,060 --> 00:04:31,259
manually

129
00:04:31,259 --> 00:04:32,460
and then I'm going to go through

130
00:04:32,460 --> 00:04:34,620
automating changing those indicators in

131
00:04:34,620 --> 00:04:36,000
the tools with a tool I wrote called

132
00:04:36,000 --> 00:04:38,160
invisibility cloak uh I've got some

133
00:04:38,160 --> 00:04:39,600
demos put together I've got five demos

134
00:04:39,600 --> 00:04:42,240
put together for you guys so

135
00:04:42,240 --> 00:04:43,620
um demo should be should be pretty cool

136
00:04:43,620 --> 00:04:45,300
hopefully you guys enjoy them

137
00:04:45,300 --> 00:04:46,680
gonna wrap it up then with some

138
00:04:46,680 --> 00:04:48,180
defensive considerations and then a

139
00:04:48,180 --> 00:04:50,600
conclusion

140
00:04:51,300 --> 00:04:53,880
so let's go over the background here so

141
00:04:53,880 --> 00:04:55,320
as I mentioned there are there are

142
00:04:55,320 --> 00:04:56,639
reasons that you want to use public C

143
00:04:56,639 --> 00:04:58,620
Sharp Tools um you know private tooling

144
00:04:58,620 --> 00:05:01,259
is King but there's a couple primary uh

145
00:05:01,259 --> 00:05:03,060
primary reasons to use public tools you

146
00:05:03,060 --> 00:05:04,500
know in my opinion

147
00:05:04,500 --> 00:05:07,380
the first one so every team right you

148
00:05:07,380 --> 00:05:09,780
have a finite amount of time and

149
00:05:09,780 --> 00:05:11,400
resources you have different priorities

150
00:05:11,400 --> 00:05:13,740
you don't always have time to develop

151
00:05:13,740 --> 00:05:15,419
some sort of functionality or some type

152
00:05:15,419 --> 00:05:17,940
of capability in-house right so you know

153
00:05:17,940 --> 00:05:19,259
your priorities are doing other things

154
00:05:19,259 --> 00:05:21,419
so public tooling is really good for

155
00:05:21,419 --> 00:05:22,979
being able to like you know take

156
00:05:22,979 --> 00:05:24,660
advantage of the kind of that capability

157
00:05:24,660 --> 00:05:27,720
Gap you have right second reason

158
00:05:27,720 --> 00:05:29,699
it was really around you know creating a

159
00:05:29,699 --> 00:05:31,680
private tool is not going to give you

160
00:05:31,680 --> 00:05:33,600
any benefit compared to like the public

161
00:05:33,600 --> 00:05:35,580
tool so for example rather than build

162
00:05:35,580 --> 00:05:38,160
your own kerberos-based attack tool why

163
00:05:38,160 --> 00:05:39,539
why not just rubius you know you're

164
00:05:39,539 --> 00:05:41,039
going to be Reinventing the wheel right

165
00:05:41,039 --> 00:05:42,660
so those are really the two primary

166
00:05:42,660 --> 00:05:44,580
reasons right in my opinion for kind of

167
00:05:44,580 --> 00:05:47,460
using public tooling I've listed four

168
00:05:47,460 --> 00:05:49,560
kind of popular you know public tools

169
00:05:49,560 --> 00:05:51,720
that are out there in c-sharp I've got

170
00:05:51,720 --> 00:05:53,100
some slides later on where I actually

171
00:05:53,100 --> 00:05:54,660
ran invisibility cloak against like 20

172
00:05:54,660 --> 00:05:55,979
different tools I'm going to go through

173
00:05:55,979 --> 00:05:58,440
some of those but uh for these here so

174
00:05:58,440 --> 00:05:59,880
like rubius is obviously a popular

175
00:05:59,880 --> 00:06:02,340
public c-sharp tool for doing Kerberos

176
00:06:02,340 --> 00:06:04,800
base attacks uh you've got a seat belt

177
00:06:04,800 --> 00:06:07,560
there uh also from the folks at Specter

178
00:06:07,560 --> 00:06:09,479
Ops for doing situation Awareness on

179
00:06:09,479 --> 00:06:12,600
Windows host uh also another Tool uh

180
00:06:12,600 --> 00:06:14,520
stand-in that's out there so Reuben

181
00:06:14,520 --> 00:06:17,100
Boone in on the X-Force red team wrote

182
00:06:17,100 --> 00:06:18,780
this so it's a really nice tool for

183
00:06:18,780 --> 00:06:20,639
doing after directory Recon and some

184
00:06:20,639 --> 00:06:23,220
attacks and then lastly a tool I wrote

185
00:06:23,220 --> 00:06:24,600
well as a mandiant sharper assist

186
00:06:24,600 --> 00:06:26,340
another one that's out there for doing

187
00:06:26,340 --> 00:06:28,680
like Windows based uh persistence both

188
00:06:28,680 --> 00:06:30,720
kind of user land and then also kind of

189
00:06:30,720 --> 00:06:33,919
like admin level persistence

190
00:06:34,800 --> 00:06:36,600
in terms of like security controls for

191
00:06:36,600 --> 00:06:38,340
c-sharp tools I kind of just break into

192
00:06:38,340 --> 00:06:40,620
three buckets so you've got the

193
00:06:40,620 --> 00:06:42,840
signature based detection on disk which

194
00:06:42,840 --> 00:06:45,240
is like your typical like antivirus type

195
00:06:45,240 --> 00:06:47,759
of thing uh then you've also got the

196
00:06:47,759 --> 00:06:50,340
signature based detection in memory

197
00:06:50,340 --> 00:06:52,319
so this was something I know the last

198
00:06:52,319 --> 00:06:53,479
few years this came about with

199
00:06:53,479 --> 00:06:56,039
amsyfer.net uh this was kind of a game

200
00:06:56,039 --> 00:06:57,840
changer from a defensive standpoint

201
00:06:57,840 --> 00:07:00,240
because a lot of the times like on our

202
00:07:00,240 --> 00:07:02,699
Ops we're operating in memory on systems

203
00:07:02,699 --> 00:07:04,500
uh with like for example Cobalt strike a

204
00:07:04,500 --> 00:07:06,300
popular C2 framework so when we're

205
00:07:06,300 --> 00:07:07,800
actually running these tools we're not

206
00:07:07,800 --> 00:07:09,660
like dropping them to disk right we're

207
00:07:09,660 --> 00:07:11,100
going to be running them in memory you

208
00:07:11,100 --> 00:07:12,960
know reflectively load into a process

209
00:07:12,960 --> 00:07:15,660
right and and run those so what

210
00:07:15,660 --> 00:07:18,720
amsifer.net allowed uh allowed like you

211
00:07:18,720 --> 00:07:21,180
know Windows to be able to do is analyze

212
00:07:21,180 --> 00:07:22,860
uh those.net assemblies that are being

213
00:07:22,860 --> 00:07:25,020
ran in memory so

214
00:07:25,020 --> 00:07:26,520
um this allowed you know gave the

215
00:07:26,520 --> 00:07:28,259
capability to you know instead of just

216
00:07:28,259 --> 00:07:30,720
doing detection on disk also having

217
00:07:30,720 --> 00:07:32,639
detection in memory so that was really a

218
00:07:32,639 --> 00:07:33,960
game changer and that was one of the

219
00:07:33,960 --> 00:07:36,360
main reasons you know us is kind of in

220
00:07:36,360 --> 00:07:37,919
the offensive security industry have had

221
00:07:37,919 --> 00:07:39,960
to step up our game because of how

222
00:07:39,960 --> 00:07:42,240
detections are you know how how much

223
00:07:42,240 --> 00:07:44,759
better detections are getting in memory

224
00:07:44,759 --> 00:07:47,099
and then lastly enhanced Telemetry so

225
00:07:47,099 --> 00:07:49,680
the more Telemetry the better uh so with

226
00:07:49,680 --> 00:07:51,960
uh event tracing for Windows etw that's

227
00:07:51,960 --> 00:07:54,120
also been uh been really good in terms

228
00:07:54,120 --> 00:07:56,759
of security controls uh again if these

229
00:07:56,759 --> 00:07:58,199
are kind of the three buckets that I I

230
00:07:58,199 --> 00:08:00,180
kind of divide these out into in terms

231
00:08:00,180 --> 00:08:01,919
of you know security controls for

232
00:08:01,919 --> 00:08:04,620
c-sharp tooling

233
00:08:04,620 --> 00:08:06,300
so let's go through some different

234
00:08:06,300 --> 00:08:08,099
static components and c-sharp tools that

235
00:08:08,099 --> 00:08:10,199
you could use and need to be aware of in

236
00:08:10,199 --> 00:08:12,060
terms of you know what could be used to

237
00:08:12,060 --> 00:08:13,680
build detections

238
00:08:13,680 --> 00:08:15,360
first one and this is not a very good

239
00:08:15,360 --> 00:08:18,180
one uh tool name right so name of tool

240
00:08:18,180 --> 00:08:20,039
can be used as a signature I have seen

241
00:08:20,039 --> 00:08:21,780
this before this is obviously not a very

242
00:08:21,780 --> 00:08:23,879
not a very good control uh not very good

243
00:08:23,879 --> 00:08:25,759
signature so for example I have

244
00:08:25,759 --> 00:08:27,780
safetycats.exe there which is a tool

245
00:08:27,780 --> 00:08:29,940
from the folks at spectrops as well uh

246
00:08:29,940 --> 00:08:31,560
and I'm just renaming it to totally not

247
00:08:31,560 --> 00:08:34,020
safety cats again not a great Standalone

248
00:08:34,020 --> 00:08:35,520
detection

249
00:08:35,520 --> 00:08:38,399
something that's a little better is the

250
00:08:38,399 --> 00:08:41,099
project good so in Visual Studio like

251
00:08:41,099 --> 00:08:42,779
when you have a c-sharp project each

252
00:08:42,779 --> 00:08:45,600
project is assigned a unique guid so for

253
00:08:45,600 --> 00:08:47,279
example if you pull down the seat belt

254
00:08:47,279 --> 00:08:49,140
project you know made some changes to

255
00:08:49,140 --> 00:08:50,640
the code and then recompiled it without

256
00:08:50,640 --> 00:08:52,440
changing that guide it's still going to

257
00:08:52,440 --> 00:08:54,060
have that that same kind of unique

258
00:08:54,060 --> 00:08:55,680
identifier right they're unique

259
00:08:55,680 --> 00:08:58,140
identifiers for a project so this is a

260
00:08:58,140 --> 00:08:59,940
little bit better but again those things

261
00:08:59,940 --> 00:09:02,399
can be changed so the screenshot there

262
00:09:02,399 --> 00:09:03,839
on the top

263
00:09:03,839 --> 00:09:06,060
you can see I'm just looking at the uh

264
00:09:06,060 --> 00:09:07,560
the the project you would for example

265
00:09:07,560 --> 00:09:09,600
for the seatbelt project and so when you

266
00:09:09,600 --> 00:09:11,519
would compile seat belt and then run a

267
00:09:11,519 --> 00:09:13,320
strings on it you would actually see

268
00:09:13,320 --> 00:09:15,839
that good right there um it's you know

269
00:09:15,839 --> 00:09:17,459
again that's going to be in the compiled

270
00:09:17,459 --> 00:09:20,399
tool it's a really great resource from

271
00:09:20,399 --> 00:09:23,760
Brian Wallace the link there basically

272
00:09:23,760 --> 00:09:26,399
talks about using.net Goods to help hunt

273
00:09:26,399 --> 00:09:28,740
malware

274
00:09:28,740 --> 00:09:31,080
pdb strings are another another piece a

275
00:09:31,080 --> 00:09:33,660
static component you could use so uh or

276
00:09:33,660 --> 00:09:35,940
programmable database file strings

277
00:09:35,940 --> 00:09:38,000
now these can give really good good

278
00:09:38,000 --> 00:09:40,440
descriptive names about where tools are

279
00:09:40,440 --> 00:09:44,160
compiled and uh the folks at mandians

280
00:09:44,160 --> 00:09:46,080
actually there's a great blog post here

281
00:09:46,080 --> 00:09:47,760
from Steve Miller when he was at mandian

282
00:09:47,760 --> 00:09:50,220
talks about how they actually use the

283
00:09:50,220 --> 00:09:52,200
pdb strings in terms of like tracking

284
00:09:52,200 --> 00:09:54,240
you know apt groups to help them kind of

285
00:09:54,240 --> 00:09:56,940
uh attribute malware and such so in an

286
00:09:56,940 --> 00:09:58,560
actual Visual Studio project if you

287
00:09:58,560 --> 00:10:00,240
actually open your project look at the

288
00:10:00,240 --> 00:10:01,980
projects the build settings you're going

289
00:10:01,980 --> 00:10:05,040
to see this pdb only and so that's kind

290
00:10:05,040 --> 00:10:07,140
of what's whenever you compile that pdb

291
00:10:07,140 --> 00:10:09,180
string is going to be in the tool so for

292
00:10:09,180 --> 00:10:11,120
example in this case we have sharp view

293
00:10:11,120 --> 00:10:13,440
compiled short View and you do a strings

294
00:10:13,440 --> 00:10:14,760
on Sharp view you're going to see that

295
00:10:14,760 --> 00:10:17,120
pdb string where the tool is actually

296
00:10:17,120 --> 00:10:19,140
compiled and I'll show you in some later

297
00:10:19,140 --> 00:10:20,760
slides how to turn that off so that the

298
00:10:20,760 --> 00:10:22,800
pdb string is not in your tool when you

299
00:10:22,800 --> 00:10:25,100
compile it

300
00:10:25,100 --> 00:10:27,480
variables and Method names are also

301
00:10:27,480 --> 00:10:29,760
really good for kind of static

302
00:10:29,760 --> 00:10:32,459
indicators so if you look in the slide

303
00:10:32,459 --> 00:10:34,320
there you can see we have the safety

304
00:10:34,320 --> 00:10:37,019
cats project open and there is a

305
00:10:37,019 --> 00:10:40,620
variable named compressed mimikat string

306
00:10:40,620 --> 00:10:43,080
in one of the class files so that's just

307
00:10:43,080 --> 00:10:44,579
another kind of static indicator you

308
00:10:44,579 --> 00:10:46,440
could use

309
00:10:46,440 --> 00:10:48,600
method names we have the sharp view

310
00:10:48,600 --> 00:10:52,019
project open uh there's a method there

311
00:10:52,019 --> 00:10:54,120
called find interesting domain share

312
00:10:54,120 --> 00:10:57,000
files so again another component that

313
00:10:57,000 --> 00:10:58,260
you could use really for all these

314
00:10:58,260 --> 00:11:00,300
things it's not about just using one

315
00:11:00,300 --> 00:11:02,640
it's about putting all them together to

316
00:11:02,640 --> 00:11:04,200
actually build that really good like

317
00:11:04,200 --> 00:11:05,880
kind of signature based detection for a

318
00:11:05,880 --> 00:11:08,180
tool

319
00:11:08,459 --> 00:11:10,320
strings and classes strings are really

320
00:11:10,320 --> 00:11:13,040
good uh a really good static indicator

321
00:11:13,040 --> 00:11:15,959
so you can see in the safety cats

322
00:11:15,959 --> 00:11:17,100
project

323
00:11:17,100 --> 00:11:19,200
uh it's got the that compressed mimikat

324
00:11:19,200 --> 00:11:20,240
string

325
00:11:20,240 --> 00:11:22,260
compressed mimikat string variable

326
00:11:22,260 --> 00:11:24,180
assigned to this string here uh what

327
00:11:24,180 --> 00:11:26,220
that string is is basically a uh it's

328
00:11:26,220 --> 00:11:28,680
like MiMi cats pipe through uh out

329
00:11:28,680 --> 00:11:31,200
compressed dll and then you have that

330
00:11:31,200 --> 00:11:33,180
string there and basically all safety

331
00:11:33,180 --> 00:11:35,220
cat says is is just a c-sharp wrapper to

332
00:11:35,220 --> 00:11:37,500
load mimikats essentially so this string

333
00:11:37,500 --> 00:11:39,300
here is is not gonna it's not gonna

334
00:11:39,300 --> 00:11:41,940
change you can change it but it's a

335
00:11:41,940 --> 00:11:43,860
really good static indicator and lots of

336
00:11:43,860 --> 00:11:45,540
tools strings are really great

337
00:11:45,540 --> 00:11:48,120
opportunities for detection uh one thing

338
00:11:48,120 --> 00:11:50,160
that I do in my tools now is I actually

339
00:11:50,160 --> 00:11:51,779
don't like for my c-sharp tools I don't

340
00:11:51,779 --> 00:11:53,760
put a help menu in there I just kind of

341
00:11:53,760 --> 00:11:55,440
say like see you know the documentation

342
00:11:55,440 --> 00:11:57,779
because help menus have tons of strings

343
00:11:57,779 --> 00:11:59,640
in them yeah it's good to give users

344
00:11:59,640 --> 00:12:01,620
switches and stuff but you refer them to

345
00:12:01,620 --> 00:12:03,660
the readme instead because the more

346
00:12:03,660 --> 00:12:05,459
strings the more opportunities for for

347
00:12:05,459 --> 00:12:06,839
building like a signature based

348
00:12:06,839 --> 00:12:08,959
detection

349
00:12:09,720 --> 00:12:11,640
class name so we have the seatbelt

350
00:12:11,640 --> 00:12:14,100
project open there you know seatbelt.cs

351
00:12:14,100 --> 00:12:16,380
seat belt argument parser you know

352
00:12:16,380 --> 00:12:18,060
anything kind of with the the tool name

353
00:12:18,060 --> 00:12:19,680
there you know classes again can be just

354
00:12:19,680 --> 00:12:22,440
another piece of that puzzle

355
00:12:22,440 --> 00:12:26,880
however they're static right uh so you

356
00:12:26,880 --> 00:12:28,680
can obviously change them right so let's

357
00:12:28,680 --> 00:12:31,019
actually go through looking at these

358
00:12:31,019 --> 00:12:32,880
static indicators these different things

359
00:12:32,880 --> 00:12:34,620
you know pdb strings classes and stuff

360
00:12:34,620 --> 00:12:35,940
like that let's go through actually kind

361
00:12:35,940 --> 00:12:37,320
of changing those

362
00:12:37,320 --> 00:12:40,019
manually

363
00:12:40,019 --> 00:12:41,760
so string manipulation I mentioned

364
00:12:41,760 --> 00:12:43,700
strings are a really great opportunity

365
00:12:43,700 --> 00:12:46,740
uh for for detection

366
00:12:46,740 --> 00:12:48,180
um so I'm gonna go through three

367
00:12:48,180 --> 00:12:49,800
different string manipulation techniques

368
00:12:49,800 --> 00:12:51,240
these are like you know really really

369
00:12:51,240 --> 00:12:53,220
basic there's tons of different ways

370
00:12:53,220 --> 00:12:55,019
that you can manipulate strings you know

371
00:12:55,019 --> 00:12:56,459
you can encrypt strings and stuff like

372
00:12:56,459 --> 00:12:57,959
that I'm going to go through three of

373
00:12:57,959 --> 00:12:59,519
them and these three are in invisibility

374
00:12:59,519 --> 00:13:01,680
cloak you're gonna see uh in in later

375
00:13:01,680 --> 00:13:05,100
slides so first one rot 13. it's just a

376
00:13:05,100 --> 00:13:07,320
simple letter substitution Cipher uh for

377
00:13:07,320 --> 00:13:08,760
a through z

378
00:13:08,760 --> 00:13:11,880
so if you can see the uh the screenshot

379
00:13:11,880 --> 00:13:14,160
on the left I'm taking uh this string

380
00:13:14,160 --> 00:13:17,220
testing this and I'm rotating each uh

381
00:13:17,220 --> 00:13:21,480
each letter by 13. so T goes to a g e

382
00:13:21,480 --> 00:13:24,360
rotates to an r s rotates to an f and so

383
00:13:24,360 --> 00:13:26,279
on and so forth so I'm taking that

384
00:13:26,279 --> 00:13:28,260
original string I'm obfuscating it to

385
00:13:28,260 --> 00:13:29,820
have this obfuscated string with Route

386
00:13:29,820 --> 00:13:32,100
13 and then in the screenshot on the

387
00:13:32,100 --> 00:13:34,019
right I'm taking that obfuscated string

388
00:13:34,019 --> 00:13:37,019
I'm de-obfuscating it at run time and to

389
00:13:37,019 --> 00:13:40,579
get the original string here

390
00:13:41,360 --> 00:13:43,800
base64 so this is something that's very

391
00:13:43,800 --> 00:13:45,360
popular obviously in infosec whether

392
00:13:45,360 --> 00:13:47,760
you're on offense or defense uh you take

393
00:13:47,760 --> 00:13:50,279
a ASCII string and you put it into its

394
00:13:50,279 --> 00:13:53,639
Radix 64 representation so screenshot on

395
00:13:53,639 --> 00:13:54,959
the left I have python I have that

396
00:13:54,959 --> 00:13:57,660
testing this string on base64 encoding

397
00:13:57,660 --> 00:14:00,540
it to get this this encoded string

398
00:14:00,540 --> 00:14:02,579
shot on the right and C sharp I'm just

399
00:14:02,579 --> 00:14:04,200
taking that obfuscated string that

400
00:14:04,200 --> 00:14:06,000
base64 encoded string and then I'm

401
00:14:06,000 --> 00:14:07,980
decoding it at runtime to get the

402
00:14:07,980 --> 00:14:10,380
original string

403
00:14:10,380 --> 00:14:12,420
the last one here and this is really my

404
00:14:12,420 --> 00:14:14,120
favorite this is my favorite method in

405
00:14:14,120 --> 00:14:16,920
invisibility cloak for a couple reasons

406
00:14:16,920 --> 00:14:19,019
I'll get into later uh but this one

407
00:14:19,019 --> 00:14:21,959
reverse string so just take a string and

408
00:14:21,959 --> 00:14:24,000
just reverse the order this works uh

409
00:14:24,000 --> 00:14:26,279
really great wonders uh for for string

410
00:14:26,279 --> 00:14:28,860
manipulation and in terms of evading uh

411
00:14:28,860 --> 00:14:29,940
you know kind of signature based

412
00:14:29,940 --> 00:14:32,820
detections so the screenshot on the left

413
00:14:32,820 --> 00:14:34,860
I had that testing this string and I'm

414
00:14:34,860 --> 00:14:37,620
just simply reversing the string so you

415
00:14:37,620 --> 00:14:38,880
can see here like the explanation point

416
00:14:38,880 --> 00:14:40,560
is at the beginning

417
00:14:40,560 --> 00:14:42,660
and then the screenshot on the right you

418
00:14:42,660 --> 00:14:44,279
can see that I'm taking that reverse

419
00:14:44,279 --> 00:14:45,899
string and then I'm putting in the prop

420
00:14:45,899 --> 00:14:47,519
order at runtime to get the original

421
00:14:47,519 --> 00:14:49,800
testing this string so again these are

422
00:14:49,800 --> 00:14:51,660
just three different string manipulation

423
00:14:51,660 --> 00:14:53,399
methods there's tons of different ways

424
00:14:53,399 --> 00:14:54,839
you could you could manipulate strings

425
00:14:54,839 --> 00:14:56,579
but these are three kind of really basic

426
00:14:56,579 --> 00:14:58,860
ones that are very effective and don't

427
00:14:58,860 --> 00:15:01,920
uh don't increase the the file size as

428
00:15:01,920 --> 00:15:03,000
significantly as something like

429
00:15:03,000 --> 00:15:05,959
encrypting strings

430
00:15:06,060 --> 00:15:08,459
the project what I mention each C sharp

431
00:15:08,459 --> 00:15:10,019
project is assigned like a unique guide

432
00:15:10,019 --> 00:15:12,480
so if you want to generate a new good to

433
00:15:12,480 --> 00:15:14,459
put in your project with just a couple

434
00:15:14,459 --> 00:15:16,620
lines of python uh you can see there in

435
00:15:16,620 --> 00:15:18,300
that screenshot just generating a new

436
00:15:18,300 --> 00:15:19,800
good

437
00:15:19,800 --> 00:15:22,260
now once you have that new guid there

438
00:15:22,260 --> 00:15:23,820
are three files that you need to place

439
00:15:23,820 --> 00:15:25,079
the new good

440
00:15:25,079 --> 00:15:26,639
the first one is going to be your Visual

441
00:15:26,639 --> 00:15:28,800
Studio solution file so you'll want to

442
00:15:28,800 --> 00:15:31,019
make sure that you place the uh the new

443
00:15:31,019 --> 00:15:33,779
good in there Additionally the c-sharp

444
00:15:33,779 --> 00:15:35,160
project file you're also going to make

445
00:15:35,160 --> 00:15:37,680
sure that you replace the good in that

446
00:15:37,680 --> 00:15:39,779
and lastly on the screenshot all the way

447
00:15:39,779 --> 00:15:42,000
on the right the assemblyinfo.cs file

448
00:15:42,000 --> 00:15:43,079
you want to make sure that you replace

449
00:15:43,079 --> 00:15:46,579
the guide in there as well

450
00:15:47,940 --> 00:15:50,880
tool name so again three spots you got

451
00:15:50,880 --> 00:15:52,800
to change the tool name in the visual

452
00:15:52,800 --> 00:15:54,300
studio solution file so you can see

453
00:15:54,300 --> 00:15:56,339
there in the top screenshot changing it

454
00:15:56,339 --> 00:15:58,740
to some new tool and what we're actually

455
00:15:58,740 --> 00:16:00,360
doing here the the project that we're

456
00:16:00,360 --> 00:16:01,980
modifying is the standard project I

457
00:16:01,980 --> 00:16:04,620
mentioned earlier which was written by

458
00:16:04,620 --> 00:16:07,680
Ruben boonin and then uh you also need

459
00:16:07,680 --> 00:16:09,899
to change it the c-sharp project file uh

460
00:16:09,899 --> 00:16:11,779
you need to change to the new tool name

461
00:16:11,779 --> 00:16:14,660
and lastly the

462
00:16:14,660 --> 00:16:16,860
assemblyinfo.cs file you also need to

463
00:16:16,860 --> 00:16:19,579
change the tool name

464
00:16:19,800 --> 00:16:21,420
also just make sure you change the file

465
00:16:21,420 --> 00:16:22,980
names of like the c-sharp project file

466
00:16:22,980 --> 00:16:24,480
on Visual Studio file as well to your

467
00:16:24,480 --> 00:16:25,740
some new tool

468
00:16:25,740 --> 00:16:27,899
and then lastly you've got all this

469
00:16:27,899 --> 00:16:29,579
stuff changed the c-sharp project file

470
00:16:29,579 --> 00:16:31,440
you've got the tool names the tool name

471
00:16:31,440 --> 00:16:33,420
change in those three files

472
00:16:33,420 --> 00:16:35,579
and then you can just compile it and you

473
00:16:35,579 --> 00:16:37,320
can see here this is no longer stand in

474
00:16:37,320 --> 00:16:40,740
this is just some new tool name uh that

475
00:16:40,740 --> 00:16:42,060
you that you have here so it's your new

476
00:16:42,060 --> 00:16:43,980
tool

477
00:16:43,980 --> 00:16:46,380
and then the last thing too are the pdb

478
00:16:46,380 --> 00:16:48,720
strings so I mentioned in that window in

479
00:16:48,720 --> 00:16:50,279
your your project it's gonna have that

480
00:16:50,279 --> 00:16:53,040
pdb only so what you can do is in the

481
00:16:53,040 --> 00:16:54,480
c-sharp project file for your project

482
00:16:54,480 --> 00:16:58,380
you just simply change that to none and

483
00:16:58,380 --> 00:16:59,940
then you can see when we're running

484
00:16:59,940 --> 00:17:02,220
strings on our compiled tool you're not

485
00:17:02,220 --> 00:17:04,980
going to see the pdb string there so

486
00:17:04,980 --> 00:17:06,780
this just kind of went through manually

487
00:17:06,780 --> 00:17:08,579
so we went through these are the

488
00:17:08,579 --> 00:17:10,079
different static indicators that could

489
00:17:10,079 --> 00:17:11,819
be used for detection like in your tools

490
00:17:11,819 --> 00:17:13,619
or in the public tools that you're using

491
00:17:13,619 --> 00:17:16,260
and then going through manually changing

492
00:17:16,260 --> 00:17:18,780
those static indicators

493
00:17:18,780 --> 00:17:20,939
so I started thinking about this I was

494
00:17:20,939 --> 00:17:23,699
like okay I can do all this manually but

495
00:17:23,699 --> 00:17:25,020
uh I don't really want to have to do

496
00:17:25,020 --> 00:17:26,819
this manually every single time for a

497
00:17:26,819 --> 00:17:28,740
public tool that I want to use so I

498
00:17:28,740 --> 00:17:30,059
started thinking about you know like

499
00:17:30,059 --> 00:17:32,400
could this be automated

500
00:17:32,400 --> 00:17:34,020
and that's where invisibility cloak came

501
00:17:34,020 --> 00:17:35,580
about

502
00:17:35,580 --> 00:17:38,580
so invisibility cloak uh also yes I'm a

503
00:17:38,580 --> 00:17:41,039
huge Harry Potter nerd so uh this is

504
00:17:41,039 --> 00:17:42,600
definitely a play on the movie uh Harry

505
00:17:42,600 --> 00:17:45,059
wearing his invisibility cloak there so

506
00:17:45,059 --> 00:17:47,340
that is where I got the name from uh so

507
00:17:47,340 --> 00:17:49,320
it's a proof of concept obfuscation

508
00:17:49,320 --> 00:17:52,740
toolkit for uh c-sharp tools uh changes

509
00:17:52,740 --> 00:17:54,900
the tool name changes the project good

510
00:17:54,900 --> 00:17:56,880
removes the pdb strings and then

511
00:17:56,880 --> 00:17:59,160
obfuscates uh strings as well based on

512
00:17:59,160 --> 00:18:00,960
the method you give it I've got the link

513
00:18:00,960 --> 00:18:02,880
posted there on the X-Force red GitHub

514
00:18:02,880 --> 00:18:04,860
page uh before this talk today I

515
00:18:04,860 --> 00:18:06,539
actually posted the slides and the demos

516
00:18:06,539 --> 00:18:07,980
I'm going to go over so if you want to

517
00:18:07,980 --> 00:18:09,419
you know pull you know after you know

518
00:18:09,419 --> 00:18:10,620
after you know when you get home from

519
00:18:10,620 --> 00:18:11,640
the conference whatever you want to take

520
00:18:11,640 --> 00:18:13,620
a look at them uh feel free they're up

521
00:18:13,620 --> 00:18:14,820
there on the repo

522
00:18:14,820 --> 00:18:16,440
I've also got a blog post that I wrote

523
00:18:16,440 --> 00:18:18,419
uh kind of going through some of the

524
00:18:18,419 --> 00:18:20,100
things I'm talking about today different

525
00:18:20,100 --> 00:18:22,260
static indicators manually changing them

526
00:18:22,260 --> 00:18:24,240
and also a few things on invisibility

527
00:18:24,240 --> 00:18:28,340
cloak so definitely check those out

528
00:18:29,160 --> 00:18:31,440
with this Tool uh you know there was

529
00:18:31,440 --> 00:18:33,000
there's three main goals in terms of

530
00:18:33,000 --> 00:18:34,679
obfuscation that that I was thinking

531
00:18:34,679 --> 00:18:37,020
about uh you know the first one is you

532
00:18:37,020 --> 00:18:38,520
want to maintain the Integrity or the

533
00:18:38,520 --> 00:18:39,539
functionality of the tool that you're

534
00:18:39,539 --> 00:18:41,700
obfuscating right you don't you you want

535
00:18:41,700 --> 00:18:43,140
you want to have the tool actually do

536
00:18:43,140 --> 00:18:45,179
what it was originally designed to do so

537
00:18:45,179 --> 00:18:47,880
if you're obfuscating a persistence

538
00:18:47,880 --> 00:18:49,740
toolkit like you don't want to you know

539
00:18:49,740 --> 00:18:51,380
not you don't want it to not work right

540
00:18:51,380 --> 00:18:53,760
that kind of defeats the purpose of

541
00:18:53,760 --> 00:18:56,760
doing the obfuscation and in terms of

542
00:18:56,760 --> 00:18:59,520
like string obfuscation you want to

543
00:18:59,520 --> 00:19:01,440
provide you know I wanted to provide as

544
00:19:01,440 --> 00:19:03,840
much coverage for as many strings as I

545
00:19:03,840 --> 00:19:06,240
possibly could without breaking the tool

546
00:19:06,240 --> 00:19:07,559
or not being able to compile it because

547
00:19:07,559 --> 00:19:09,059
the last thing you want to do is you

548
00:19:09,059 --> 00:19:10,200
want to you know run it through obfus

549
00:19:10,200 --> 00:19:11,220
station and then you've got a bunch of

550
00:19:11,220 --> 00:19:12,600
Errors you got to figure out manually

551
00:19:12,600 --> 00:19:14,940
right so there's really a balance there

552
00:19:14,940 --> 00:19:16,740
and office getting as much as you can

553
00:19:16,740 --> 00:19:19,620
for uh you know as much as you can and

554
00:19:19,620 --> 00:19:22,559
really with with C sharp you know not

555
00:19:22,559 --> 00:19:25,860
all strings can be dynamic uh some

556
00:19:25,860 --> 00:19:27,539
strings have to be like a static value

557
00:19:27,539 --> 00:19:30,660
so for example if you have like a a

558
00:19:30,660 --> 00:19:33,000
method header and one of the variables

559
00:19:33,000 --> 00:19:35,160
for the arguments you want to have like

560
00:19:35,160 --> 00:19:37,620
a a like a static string in there like

561
00:19:37,620 --> 00:19:39,120
you can't have that be like some sort of

562
00:19:39,120 --> 00:19:41,280
dynamically generated string

563
00:19:41,280 --> 00:19:43,380
um and then the last one specifically is

564
00:19:43,380 --> 00:19:46,980
around file size so Cobalt strike which

565
00:19:46,980 --> 00:19:48,299
they recently just increased the limit

566
00:19:48,299 --> 00:19:50,700
but uh in terms of running.net tools and

567
00:19:50,700 --> 00:19:51,539
memory

568
00:19:51,539 --> 00:19:53,280
made a one megabyte limit so if your

569
00:19:53,280 --> 00:19:55,380
tool is over one megabyte you couldn't

570
00:19:55,380 --> 00:19:58,080
run it in memory so with obfuscation

571
00:19:58,080 --> 00:19:59,400
you're obviously you're transferring

572
00:19:59,400 --> 00:20:00,840
like strings you're transforming strings

573
00:20:00,840 --> 00:20:02,820
and when you do that it's going to make

574
00:20:02,820 --> 00:20:05,280
it the tool bigger right so it's about

575
00:20:05,280 --> 00:20:07,380
managing that file size as well so those

576
00:20:07,380 --> 00:20:09,539
are the three goals that I had in mind

577
00:20:09,539 --> 00:20:11,400
when I was trying to to write this this

578
00:20:11,400 --> 00:20:13,460
tool

579
00:20:13,460 --> 00:20:16,500
there were challenges uh it definitely

580
00:20:16,500 --> 00:20:17,820
was not easy as I thought it was going

581
00:20:17,820 --> 00:20:19,679
to be uh took longer than I thought it

582
00:20:19,679 --> 00:20:21,000
was going to take

583
00:20:21,000 --> 00:20:23,640
um and I'm continually refining it uh

584
00:20:23,640 --> 00:20:25,440
first thing is like I mentioned there's

585
00:20:25,440 --> 00:20:26,820
there's many different ways to specify

586
00:20:26,820 --> 00:20:28,740
new strings and if you can imagine all

587
00:20:28,740 --> 00:20:30,600
kind of the different C Sharp Tools that

588
00:20:30,600 --> 00:20:32,160
are out there everybody has their own

589
00:20:32,160 --> 00:20:33,900
their own way like they like doing

590
00:20:33,900 --> 00:20:35,100
things right

591
00:20:35,100 --> 00:20:37,799
um so that was definitely a challenge uh

592
00:20:37,799 --> 00:20:38,940
tested against like 20 different

593
00:20:38,940 --> 00:20:40,620
projects that are out there

594
00:20:40,620 --> 00:20:43,500
and then another challenge was around uh

595
00:20:43,500 --> 00:20:44,820
evading signatures and Method or

596
00:20:44,820 --> 00:20:49,140
variables method or variable names so uh

597
00:20:49,140 --> 00:20:50,580
it's currently in the tool it does not

598
00:20:50,580 --> 00:20:52,679
obfuscate uh method names or variable

599
00:20:52,679 --> 00:20:54,840
names and you're going to see that here

600
00:20:54,840 --> 00:20:56,640
in the demo so still trying to think

601
00:20:56,640 --> 00:20:58,980
about how to do that uh definitely a

602
00:20:58,980 --> 00:21:01,020
pretty big task to to do that and not

603
00:21:01,020 --> 00:21:03,240
break things so those are kind of the

604
00:21:03,240 --> 00:21:04,679
two those are the two main challenges

605
00:21:04,679 --> 00:21:07,440
kind of with this project

606
00:21:07,440 --> 00:21:10,559
foreign so let's kind of go through uh

607
00:21:10,559 --> 00:21:12,840
kind of actually using it so for example

608
00:21:12,840 --> 00:21:13,980
obviously getting kind of a well

609
00:21:13,980 --> 00:21:17,039
signature Tool uh the krb relay up tool

610
00:21:17,039 --> 00:21:18,059
which I think everybody's pretty

611
00:21:18,059 --> 00:21:19,440
familiar with now after just being

612
00:21:19,440 --> 00:21:21,900
released for two weeks uh so here's an

613
00:21:21,900 --> 00:21:24,000
example of me running a visibility cloak

614
00:21:24,000 --> 00:21:26,700
on Caribbean relay up so not sure how

615
00:21:26,700 --> 00:21:28,080
quite you can good you can see that

616
00:21:28,080 --> 00:21:29,880
there in the the back but you can see

617
00:21:29,880 --> 00:21:31,919
here we're providing it the uh the

618
00:21:31,919 --> 00:21:33,000
directory where the visual studio

619
00:21:33,000 --> 00:21:34,559
project is

620
00:21:34,559 --> 00:21:36,059
um so it's going through right it's

621
00:21:36,059 --> 00:21:37,940
changing the the project guide

622
00:21:37,940 --> 00:21:40,860
it's also going to uh you know remove

623
00:21:40,860 --> 00:21:43,440
the pdb string and then it's also going

624
00:21:43,440 --> 00:21:44,940
to go through and actually go through an

625
00:21:44,940 --> 00:21:47,580
obfuscate strings in each of the c-sharp

626
00:21:47,580 --> 00:21:48,780
class files

627
00:21:48,780 --> 00:21:50,340
and you can see on here after running it

628
00:21:50,340 --> 00:21:52,380
uh our new tool is called let's go up

629
00:21:52,380 --> 00:21:55,500
and you can see that tool right there

630
00:21:55,500 --> 00:21:58,080
so now if we actually take take our new

631
00:21:58,080 --> 00:22:00,299
uh krb relayup tool that's that's called

632
00:22:00,299 --> 00:22:02,940
let's go up uh we're going to use uh

633
00:22:02,940 --> 00:22:04,740
Defender check in this example which is

634
00:22:04,740 --> 00:22:07,020
a tool wrote by Matt hand at specdrops

635
00:22:07,020 --> 00:22:08,100
and it's basically just kind of a

636
00:22:08,100 --> 00:22:09,720
wrapper around like Defender so you can

637
00:22:09,720 --> 00:22:11,520
like scan a file and say hey is this

638
00:22:11,520 --> 00:22:13,380
file detected and where the offending

639
00:22:13,380 --> 00:22:15,539
you know the signature for it uh so you

640
00:22:15,539 --> 00:22:17,159
can see here I'm running Defender check

641
00:22:17,159 --> 00:22:19,260
against krb relay up and this was like

642
00:22:19,260 --> 00:22:21,179
probably like I don't know uh not long

643
00:22:21,179 --> 00:22:22,679
after the tool was released but

644
00:22:22,679 --> 00:22:24,840
obviously the krb really up tool if

645
00:22:24,840 --> 00:22:26,340
you're not familiar it's kind of a local

646
00:22:26,340 --> 00:22:28,380
Windows crevesque uh tool that was

647
00:22:28,380 --> 00:22:30,780
released it's got a lot of attention uh

648
00:22:30,780 --> 00:22:32,700
you know and because of that uh

649
00:22:32,700 --> 00:22:33,900
obviously once the tool is public

650
00:22:33,900 --> 00:22:36,480
signatures are built so I'm running

651
00:22:36,480 --> 00:22:38,760
Defender check you see there it's uh it

652
00:22:38,760 --> 00:22:40,860
has some detections around that and then

653
00:22:40,860 --> 00:22:42,480
you can see me running Defender check

654
00:22:42,480 --> 00:22:44,460
against the version of

655
00:22:44,460 --> 00:22:46,080
um of krb really up that went through

656
00:22:46,080 --> 00:22:48,059
invisibility cloak uh called let's go up

657
00:22:48,059 --> 00:22:49,980
and you can see here that uh it's good

658
00:22:49,980 --> 00:22:52,140
to go right so just after and this I

659
00:22:52,140 --> 00:22:53,940
just did this uh last week I think it

660
00:22:53,940 --> 00:22:55,020
was

661
00:22:55,020 --> 00:22:59,340
um so um yeah we're just fine there

662
00:22:59,340 --> 00:23:01,380
also in terms of like signatures and

663
00:23:01,380 --> 00:23:04,380
memory uh so I mentioned amazon.net was

664
00:23:04,380 --> 00:23:06,360
kind of like a game changer

665
00:23:06,360 --> 00:23:08,940
um running the tool stand in here uh in

666
00:23:08,940 --> 00:23:11,039
memory so this uh first run here is me

667
00:23:11,039 --> 00:23:13,020
running stand in with Cobalt strikes

668
00:23:13,020 --> 00:23:14,820
execute assembly this is the one

669
00:23:14,820 --> 00:23:16,559
straight from the GitHub page and you

670
00:23:16,559 --> 00:23:17,940
can see here I get this error message

671
00:23:17,940 --> 00:23:19,679
failed to load assembly with this error

672
00:23:19,679 --> 00:23:21,240
message and what that is is that's

673
00:23:21,240 --> 00:23:23,640
actually uh that's actually AMC for.net

674
00:23:23,640 --> 00:23:24,659
picking that up and you can see the

675
00:23:24,659 --> 00:23:26,039
details right there

676
00:23:26,039 --> 00:23:28,500
so then I'm taking a version of Stand in

677
00:23:28,500 --> 00:23:30,059
called Stand Up that I ran in through

678
00:23:30,059 --> 00:23:31,799
invisibility cloak and you can see that

679
00:23:31,799 --> 00:23:33,480
I was able to run that no problem it got

680
00:23:33,480 --> 00:23:36,980
past the signatures that were there

681
00:23:37,380 --> 00:23:40,020
so as I mentioned I took 20 different

682
00:23:40,020 --> 00:23:41,940
kind of public tools that are kind of

683
00:23:41,940 --> 00:23:44,220
popular out there to actually run uh

684
00:23:44,220 --> 00:23:45,780
like run invisibility cloak through and

685
00:23:45,780 --> 00:23:48,539
do testing and for the most part all

686
00:23:48,539 --> 00:23:51,059
these that originally were detected uh

687
00:23:51,059 --> 00:23:52,919
running through invisibility cloak gets

688
00:23:52,919 --> 00:23:54,539
them past the detections and this is

689
00:23:54,539 --> 00:23:56,940
specifically for Microsoft Defender this

690
00:23:56,940 --> 00:23:59,640
is the free version uh and this was ran

691
00:23:59,640 --> 00:24:01,620
on April 14th so obviously things could

692
00:24:01,620 --> 00:24:03,900
have changed since April 14th but as of

693
00:24:03,900 --> 00:24:06,179
April 14th uh specifically with

694
00:24:06,179 --> 00:24:07,740
Microsoft Defender the free version

695
00:24:07,740 --> 00:24:10,919
these were the stats now these two

696
00:24:10,919 --> 00:24:13,679
problem Childs here rubius and sharp RDP

697
00:24:13,679 --> 00:24:15,480
I'm going to show you how to get around

698
00:24:15,480 --> 00:24:17,640
those in the demos so after running

699
00:24:17,640 --> 00:24:18,900
through invisibility cloak there's like

700
00:24:18,900 --> 00:24:20,580
one tweak you have to do to get it past

701
00:24:20,580 --> 00:24:23,100
Defender free version so I thought these

702
00:24:23,100 --> 00:24:24,480
statistics were really interesting

703
00:24:24,480 --> 00:24:26,640
there's a lot of really great tools out

704
00:24:26,640 --> 00:24:28,620
there you can see me this is obviously

705
00:24:28,620 --> 00:24:30,240
is an exhaustive list of you know all

706
00:24:30,240 --> 00:24:32,220
c-sharp tools that are out there these

707
00:24:32,220 --> 00:24:33,900
are just ones that are popular that I'm

708
00:24:33,900 --> 00:24:35,460
pretty familiar with

709
00:24:35,460 --> 00:24:36,900
um I know I know some of the authors of

710
00:24:36,900 --> 00:24:38,580
these as well I see in the audience so

711
00:24:38,580 --> 00:24:42,240
uh the uh but um but yeah so these are

712
00:24:42,240 --> 00:24:43,620
just just some really good good ones to

713
00:24:43,620 --> 00:24:45,600
test against uh that have kind of

714
00:24:45,600 --> 00:24:48,559
signatures in place

715
00:24:49,080 --> 00:24:51,360
another thing I I found interesting was

716
00:24:51,360 --> 00:24:53,580
the kind of the compiled c-sharp tool

717
00:24:53,580 --> 00:24:55,679
size so I mentioned in my three kind of

718
00:24:55,679 --> 00:24:57,960
obfuscation goals that file size is one

719
00:24:57,960 --> 00:24:59,700
of them you know you want to obviously

720
00:24:59,700 --> 00:25:01,679
provide the obfuscation but you don't

721
00:25:01,679 --> 00:25:03,659
want to increase the file size too much

722
00:25:03,659 --> 00:25:04,799
right that it's you're not gonna be able

723
00:25:04,799 --> 00:25:06,720
to run through execute assembly so in

724
00:25:06,720 --> 00:25:08,880
invisibility cloak there are three

725
00:25:08,880 --> 00:25:10,440
different uh string authentication

726
00:25:10,440 --> 00:25:14,100
message methods there is rot 13 base64

727
00:25:14,100 --> 00:25:16,679
and reverse string obfuscation and if

728
00:25:16,679 --> 00:25:18,000
you look at some of the stats there

729
00:25:18,000 --> 00:25:20,100
quickly you can see the really the the

730
00:25:20,100 --> 00:25:22,740
method that that uh increases the file

731
00:25:22,740 --> 00:25:24,659
size the most in general is going to be

732
00:25:24,659 --> 00:25:27,299
the rot 13. and the one that is going to

733
00:25:27,299 --> 00:25:29,580
increase the file size the least is

734
00:25:29,580 --> 00:25:32,039
reverse string obfuscation so in the

735
00:25:32,039 --> 00:25:34,860
example for example of like rubius uh

736
00:25:34,860 --> 00:25:37,320
rubius on office gate is 418 kilobytes

737
00:25:37,320 --> 00:25:39,900
when you run it through rot 13 it's

738
00:25:39,900 --> 00:25:42,659
going to go up to 605 kilobytes

739
00:25:42,659 --> 00:25:43,980
um compared to like reverse string

740
00:25:43,980 --> 00:25:47,400
obfuscation it's just 455 kilobytes uh

741
00:25:47,400 --> 00:25:49,320
seat belt right seat belt is probably

742
00:25:49,320 --> 00:25:51,720
the biggest jump so seat belt on office

743
00:25:51,720 --> 00:25:54,480
gate is 543 kilobytes and you can see

744
00:25:54,480 --> 00:25:56,279
running it through rot 13 it jumps way

745
00:25:56,279 --> 00:25:58,740
up to 904 kilobytes right so that's a

746
00:25:58,740 --> 00:25:59,880
pretty big jump it's still under one

747
00:25:59,880 --> 00:26:01,080
megabit that's a pretty big jump

748
00:26:01,080 --> 00:26:03,360
compared to like the reverse string

749
00:26:03,360 --> 00:26:06,419
obfuscation just increases it to 608

750
00:26:06,419 --> 00:26:08,400
kilobytes so there are some file size

751
00:26:08,400 --> 00:26:09,840
differences between the three different

752
00:26:09,840 --> 00:26:11,400
methods and so I just wanted to make

753
00:26:11,400 --> 00:26:13,140
sure that you know I found it

754
00:26:13,140 --> 00:26:14,159
interesting

755
00:26:14,159 --> 00:26:15,960
um in terms of the file sizes and really

756
00:26:15,960 --> 00:26:17,340
what's this this is going to be

757
00:26:17,340 --> 00:26:18,659
dependent on is like the number of

758
00:26:18,659 --> 00:26:20,760
strings so the more strings obviously

759
00:26:20,760 --> 00:26:22,559
get obfuscated like the difference is

760
00:26:22,559 --> 00:26:23,460
going to be bigger between these

761
00:26:23,460 --> 00:26:26,120
different methods

762
00:26:26,880 --> 00:26:29,340
there are alternate alternative options

763
00:26:29,340 --> 00:26:30,840
if I could talk

764
00:26:30,840 --> 00:26:33,600
um to obfuscation uh to invisibly cloak

765
00:26:33,600 --> 00:26:35,039
and also obfuscation

766
00:26:35,039 --> 00:26:38,039
so in terms of obstacation uh confuser X

767
00:26:38,039 --> 00:26:39,419
is a really good tool that's out there

768
00:26:39,419 --> 00:26:42,900
uh for doing obfuscation uh invisibility

769
00:26:42,900 --> 00:26:44,340
cloak is more of like a pre-build

770
00:26:44,340 --> 00:26:46,140
obfuscation so you're obfuscating the

771
00:26:46,140 --> 00:26:48,600
tool before you build it confuser X is

772
00:26:48,600 --> 00:26:50,520
like a post build obfuscation tool so

773
00:26:50,520 --> 00:26:52,020
after you've built your tool you'd

774
00:26:52,020 --> 00:26:54,120
Supply it like your compiled exe and

775
00:26:54,120 --> 00:26:55,500
then it would do kind of like a post

776
00:26:55,500 --> 00:26:58,380
build obfuscation on it Rossview skater

777
00:26:58,380 --> 00:27:01,620
is another good project uh from uh from

778
00:27:01,620 --> 00:27:04,380
Planck at uh the at trusted sec

779
00:27:04,380 --> 00:27:07,200
and uh basically this is um another

780
00:27:07,200 --> 00:27:09,000
another really great obfuscation tool

781
00:27:09,000 --> 00:27:11,340
for net tooling

782
00:27:11,340 --> 00:27:13,140
an alternative to obfuscation if you

783
00:27:13,140 --> 00:27:15,240
don't want to do obfuscation is you can

784
00:27:15,240 --> 00:27:18,120
simply disable amsie or disable etw

785
00:27:18,120 --> 00:27:20,220
those uh two buckets kind of I talked

786
00:27:20,220 --> 00:27:22,559
about a really great tool here inline

787
00:27:22,559 --> 00:27:24,960
execute assembly Sean Jones at xforce

788
00:27:24,960 --> 00:27:26,880
Red wrote this you're going to see this

789
00:27:26,880 --> 00:27:28,559
in the demo but uh basically in a line

790
00:27:28,559 --> 00:27:31,320
execute assembly allows you to run a.net

791
00:27:31,320 --> 00:27:33,179
assembly in your own process compared to

792
00:27:33,179 --> 00:27:35,159
like execute assembly and Cobalt strike

793
00:27:35,159 --> 00:27:37,140
it's like a fork and run you Fork a

794
00:27:37,140 --> 00:27:40,020
process and and run another Tool uh Fork

795
00:27:40,020 --> 00:27:41,940
a process to run your Tool uh and it's

796
00:27:41,940 --> 00:27:44,279
got the capability to disable amsie and

797
00:27:44,279 --> 00:27:45,299
etw

798
00:27:45,299 --> 00:27:48,240
and then uh inject etw bypass this is

799
00:27:48,240 --> 00:27:50,279
from Bobby cook who's also a member of

800
00:27:50,279 --> 00:27:51,960
the adversary summation team at X-Force

801
00:27:51,960 --> 00:27:54,960
red uh he has an inch inject etw bypass

802
00:27:54,960 --> 00:27:59,059
Tool uh that kind of gets around etw

803
00:28:00,659 --> 00:28:02,279
so here's just kind of showing a

804
00:28:02,279 --> 00:28:03,480
screenshot of running inline speed

805
00:28:03,480 --> 00:28:04,980
assembly and you're going to see this in

806
00:28:04,980 --> 00:28:07,740
the demo uh the the top on the top there

807
00:28:07,740 --> 00:28:09,000
we're running rubius straight from

808
00:28:09,000 --> 00:28:10,799
GitHub and you can see here that we're

809
00:28:10,799 --> 00:28:12,179
getting that failed to load assembly

810
00:28:12,179 --> 00:28:14,700
message uh which is again AMC for.net

811
00:28:14,700 --> 00:28:16,080
picking that up and then we're running

812
00:28:16,080 --> 00:28:17,880
the exact same rubius tool again this is

813
00:28:17,880 --> 00:28:19,559
straight from the GitHub page with

814
00:28:19,559 --> 00:28:21,299
inline execute assembly but we're

815
00:28:21,299 --> 00:28:23,220
passing in this dash dash amsy flag

816
00:28:23,220 --> 00:28:25,440
which disables amsy and you can see here

817
00:28:25,440 --> 00:28:26,640
that we're able to run the tool just

818
00:28:26,640 --> 00:28:28,820
fine

819
00:28:29,900 --> 00:28:32,820
with that I've got five demos here here

820
00:28:32,820 --> 00:28:35,360
to show you

821
00:28:35,880 --> 00:28:39,500
not not four but five

822
00:28:40,140 --> 00:28:43,380
all right cool all right so this first

823
00:28:43,380 --> 00:28:45,000
demo I'm gonna be running invisibility

824
00:28:45,000 --> 00:28:47,220
cloak through stand in

825
00:28:47,220 --> 00:28:51,059
so uh gonna start this video here

826
00:28:51,059 --> 00:28:52,980
so uh we're gonna run this through stand

827
00:28:52,980 --> 00:28:54,539
in and then we're gonna show kind of the

828
00:28:54,539 --> 00:28:56,760
the static uh signature detection with

829
00:28:56,760 --> 00:28:58,740
uh with the defender check

830
00:28:58,740 --> 00:29:00,900
so first thing I'm doing here I'm just

831
00:29:00,900 --> 00:29:03,299
opening the stand-in project uh kind of

832
00:29:03,299 --> 00:29:04,860
before the obfuscation just to show you

833
00:29:04,860 --> 00:29:07,559
that this is the uh the original like

834
00:29:07,559 --> 00:29:09,059
the original project just to kind of

835
00:29:09,059 --> 00:29:10,679
show you everything is looking normal

836
00:29:10,679 --> 00:29:12,059
before we actually run through the

837
00:29:12,059 --> 00:29:13,799
obfuscation

838
00:29:13,799 --> 00:29:15,059
as you can see here we're just kind of

839
00:29:15,059 --> 00:29:16,500
running through just to kind of show you

840
00:29:16,500 --> 00:29:18,539
okay this is this is the normal project

841
00:29:18,539 --> 00:29:20,580
you know all the strings look uh like

842
00:29:20,580 --> 00:29:21,539
normal strings they don't look like

843
00:29:21,539 --> 00:29:24,320
gibberish just yet

844
00:29:25,440 --> 00:29:27,419
so then uh what we're going to do is

845
00:29:27,419 --> 00:29:29,880
we're going to take invisibility cloak

846
00:29:29,880 --> 00:29:31,260
and then we're going to feed the

847
00:29:31,260 --> 00:29:34,340
stand-in project to it

848
00:29:38,159 --> 00:29:40,620
okay so we're going to give it the

849
00:29:40,620 --> 00:29:42,779
directory uh where the solution project

850
00:29:42,779 --> 00:29:45,179
is we're going to give it our

851
00:29:45,179 --> 00:29:46,740
obfuscation method which is going to be

852
00:29:46,740 --> 00:29:50,100
reverse and a new tool name of stand up

853
00:29:50,100 --> 00:29:51,539
so you can see here I'm going to

854
00:29:51,539 --> 00:29:53,700
highlight that uh you know it's

855
00:29:53,700 --> 00:29:55,380
generating a new project good it's going

856
00:29:55,380 --> 00:29:56,760
to place it in those three files I

857
00:29:56,760 --> 00:29:58,559
mentioned the solution file the c-sharp

858
00:29:58,559 --> 00:30:00,059
project file and the assembly info file

859
00:30:00,059 --> 00:30:02,340
it removes the pdb string from the

860
00:30:02,340 --> 00:30:03,659
project file

861
00:30:03,659 --> 00:30:06,179
it renames any class files that have the

862
00:30:06,179 --> 00:30:07,440
original tool name in it so you can see

863
00:30:07,440 --> 00:30:10,080
we're renaming h stand in.cs to h stand

864
00:30:10,080 --> 00:30:12,240
up.cs

865
00:30:12,240 --> 00:30:14,340
and then lastly it's going to go through

866
00:30:14,340 --> 00:30:16,679
uh the class files any on the class

867
00:30:16,679 --> 00:30:18,240
files and do obvious screen applications

868
00:30:18,240 --> 00:30:21,000
so this project only has two class files

869
00:30:21,000 --> 00:30:22,740
uh so it's just gonna obfuscate the

870
00:30:22,740 --> 00:30:25,320
strings in those two class files

871
00:30:25,320 --> 00:30:26,820
you can see here we have our our new

872
00:30:26,820 --> 00:30:29,760
project there uh so stand up and we're

873
00:30:29,760 --> 00:30:30,899
going to open this project and you're

874
00:30:30,899 --> 00:30:32,460
going to see the difference in these

875
00:30:32,460 --> 00:30:34,760
strings

876
00:30:36,000 --> 00:30:39,000
foreign

877
00:30:40,380 --> 00:30:43,740
all right so I'm going to open this up

878
00:30:43,740 --> 00:30:44,880
and things are going to look a lot

879
00:30:44,880 --> 00:30:47,159
different right so we're going to open

880
00:30:47,159 --> 00:30:49,020
this project

881
00:30:49,020 --> 00:30:50,700
obviously the strings look way different

882
00:30:50,700 --> 00:30:52,980
uh ran the reverse string obfuscation so

883
00:30:52,980 --> 00:30:55,559
all these strings are replaced uh as you

884
00:30:55,559 --> 00:30:56,700
can see there we took the original

885
00:30:56,700 --> 00:30:58,799
string reversed it and then kind of put

886
00:30:58,799 --> 00:31:01,500
a method after that so all these strings

887
00:31:01,500 --> 00:31:02,940
are what's going to happen though is at

888
00:31:02,940 --> 00:31:04,380
runtime these strings are going to get

889
00:31:04,380 --> 00:31:06,480
the obfuscated at runtime and they'll

890
00:31:06,480 --> 00:31:07,679
just be like normal and the tool

891
00:31:07,679 --> 00:31:09,480
function just like normal

892
00:31:09,480 --> 00:31:11,520
so you can see here obviously it looks a

893
00:31:11,520 --> 00:31:13,140
lot different

894
00:31:13,140 --> 00:31:14,700
so what we're going to do is we're going

895
00:31:14,700 --> 00:31:17,159
to go ahead and build this uh this

896
00:31:17,159 --> 00:31:18,059
project

897
00:31:18,059 --> 00:31:20,760
clean solution and rebuild

898
00:31:20,760 --> 00:31:21,899
and then we're going to do is we're

899
00:31:21,899 --> 00:31:23,760
going to take this newly obfuscated

900
00:31:23,760 --> 00:31:25,860
stand in tool and we're going to run

901
00:31:25,860 --> 00:31:27,720
Defender check against that and run it

902
00:31:27,720 --> 00:31:29,399
against the original Stand in to make

903
00:31:29,399 --> 00:31:31,080
sure that we get past the the static

904
00:31:31,080 --> 00:31:33,980
signatures on disk

905
00:31:34,380 --> 00:31:37,940
so we're going to take these two files

906
00:31:40,020 --> 00:31:41,640
all right take our stand-up tool and so

907
00:31:41,640 --> 00:31:43,380
you can see obviously the file side is

908
00:31:43,380 --> 00:31:45,240
going to increase a little bit from 162

909
00:31:45,240 --> 00:31:47,460
kilobytes to 189 kilobytes in this this

910
00:31:47,460 --> 00:31:49,500
instance

911
00:31:49,500 --> 00:31:50,880
so we're going to run Defender check

912
00:31:50,880 --> 00:31:53,039
against the stand up so this is again a

913
00:31:53,039 --> 00:31:55,200
stand-in Ransom visibility cloak and

914
00:31:55,200 --> 00:31:56,159
you're going to see here it's going to

915
00:31:56,159 --> 00:31:58,020
come back we're good to go good to use

916
00:31:58,020 --> 00:31:59,640
the tool

917
00:31:59,640 --> 00:32:00,840
and then we're going to run it through

918
00:32:00,840 --> 00:32:02,640
the uh stand in straight kind of from

919
00:32:02,640 --> 00:32:04,320
the GitHub and you're going to see it's

920
00:32:04,320 --> 00:32:05,880
going to have some offending bytes here

921
00:32:05,880 --> 00:32:09,260
so sorry Reuben

922
00:32:12,600 --> 00:32:16,219
we'll come back here yep

923
00:32:17,399 --> 00:32:19,260
all right so you can see there obviously

924
00:32:19,260 --> 00:32:21,059
it's got it does have a signature but

925
00:32:21,059 --> 00:32:21,779
you can see running it through

926
00:32:21,779 --> 00:32:25,220
invisibility cloak got us past that

927
00:32:25,919 --> 00:32:28,080
now the second demo

928
00:32:28,080 --> 00:32:30,419
I mentioned in that table that there

929
00:32:30,419 --> 00:32:31,860
were two problem Childs all right

930
00:32:31,860 --> 00:32:34,799
running invisibility clue cloak uh so

931
00:32:34,799 --> 00:32:36,720
rubius was still getting it detected by

932
00:32:36,720 --> 00:32:38,580
Defender the free version and so is

933
00:32:38,580 --> 00:32:40,020
sharp RDP

934
00:32:40,020 --> 00:32:42,120
so I'm going to show you how to get past

935
00:32:42,120 --> 00:32:44,418
that

936
00:32:44,460 --> 00:32:46,860
so we've got the rubius project uh again

937
00:32:46,860 --> 00:32:48,240
just going to kind of open it real quick

938
00:32:48,240 --> 00:32:49,919
here to show you

939
00:32:49,919 --> 00:32:51,480
um you know it's the original prod you

940
00:32:51,480 --> 00:32:53,039
know the kind of original project before

941
00:32:53,039 --> 00:32:55,919
all the string obfuscation

942
00:32:55,919 --> 00:32:58,200
um so I'm gonna just kind of forward

943
00:32:58,200 --> 00:33:00,419
through this here so yeah you can see

944
00:33:00,419 --> 00:33:01,380
here

945
00:33:01,380 --> 00:33:02,760
um something I do want to pause though

946
00:33:02,760 --> 00:33:05,700
uh there are some strings that are not

947
00:33:05,700 --> 00:33:07,740
included in obfuscation really we're

948
00:33:07,740 --> 00:33:09,240
just kind of edge cases that I came

949
00:33:09,240 --> 00:33:11,399
across in testing uh one of those

950
00:33:11,399 --> 00:33:15,360
problem Childs were a regex string so uh

951
00:33:15,360 --> 00:33:18,179
if a line has uh regex like a regex

952
00:33:18,179 --> 00:33:19,320
string on it it's not going to obviously

953
00:33:19,320 --> 00:33:21,120
get that regex string so in the GitHub

954
00:33:21,120 --> 00:33:22,860
page I have a list of like the strings

955
00:33:22,860 --> 00:33:24,720
that are not obfuscated but those were

956
00:33:24,720 --> 00:33:25,919
kind of one of the edge cases I came

957
00:33:25,919 --> 00:33:27,299
across I'm sure I'll be able to figure

958
00:33:27,299 --> 00:33:29,159
out here soon but uh just one of the

959
00:33:29,159 --> 00:33:30,899
edge cases I came across

960
00:33:30,899 --> 00:33:33,539
so we're going to run invisibility cloak

961
00:33:33,539 --> 00:33:35,399
against rubius here

962
00:33:35,399 --> 00:33:37,919
and again what I'm going to show you is

963
00:33:37,919 --> 00:33:39,480
that running through invisibility cloak

964
00:33:39,480 --> 00:33:40,919
is still going to get detected by

965
00:33:40,919 --> 00:33:42,659
Defender but then I'm going to show you

966
00:33:42,659 --> 00:33:44,220
one manual modification you have to make

967
00:33:44,220 --> 00:33:46,919
after doing that to get it past Defender

968
00:33:46,919 --> 00:33:49,260
so again just like the last one uh you

969
00:33:49,260 --> 00:33:50,700
know it's going through generating the

970
00:33:50,700 --> 00:33:52,799
new project guide uh putting in those

971
00:33:52,799 --> 00:33:54,600
three files removing the pdb string

972
00:33:54,600 --> 00:33:56,940
again runs runs all that goes through

973
00:33:56,940 --> 00:33:59,039
all the class files does the string

974
00:33:59,039 --> 00:34:00,720
obfuscation

975
00:34:00,720 --> 00:34:01,860
um you know goes through everything a

976
00:34:01,860 --> 00:34:03,299
lot more class files in this project

977
00:34:03,299 --> 00:34:05,460
obviously but it still runs pretty quick

978
00:34:05,460 --> 00:34:07,500
as you've seen

979
00:34:07,500 --> 00:34:10,159
so we've got our new tool which is hello

980
00:34:10,159 --> 00:34:13,980
wwhf hello Wild West hackenfest

981
00:34:13,980 --> 00:34:15,839
and so what we're going to do is we're

982
00:34:15,839 --> 00:34:17,099
going to open our new project and we're

983
00:34:17,099 --> 00:34:19,820
going to compile it

984
00:34:30,239 --> 00:34:31,918
all right so we're going to open this up

985
00:34:31,918 --> 00:34:33,060
and it's obviously going to look a lot

986
00:34:33,060 --> 00:34:35,159
different you know you can see there uh

987
00:34:35,159 --> 00:34:37,260
the strings are reversed and I also want

988
00:34:37,260 --> 00:34:40,199
to pause this here uh it also any

989
00:34:40,199 --> 00:34:42,540
strings that have the original tool name

990
00:34:42,540 --> 00:34:45,060
in it it will rename so this string that

991
00:34:45,060 --> 00:34:46,739
is right there it originally was

992
00:34:46,739 --> 00:34:49,020
unhandled rubius exception it is now

993
00:34:49,020 --> 00:34:51,659
unhandled uh hello hello Wild West hack

994
00:34:51,659 --> 00:34:54,500
and Fest exception

995
00:34:56,300 --> 00:34:58,380
so then we're going to open this

996
00:34:58,380 --> 00:34:59,760
Kerberos class right here because I want

997
00:34:59,760 --> 00:35:00,540
to show you what I was talking about

998
00:35:00,540 --> 00:35:03,000
with some strings aren't obfuscated

999
00:35:03,000 --> 00:35:05,160
so we're going to scroll down to the

1000
00:35:05,160 --> 00:35:08,280
line where the the regex was and you can

1001
00:35:08,280 --> 00:35:10,980
see there whoops right down there that's

1002
00:35:10,980 --> 00:35:14,280
uh let me wrote this yep so you can see

1003
00:35:14,280 --> 00:35:16,440
that highlighted so that's that line was

1004
00:35:16,440 --> 00:35:18,000
not obfuscating because the regex being

1005
00:35:18,000 --> 00:35:19,500
there again this is just an edge case

1006
00:35:19,500 --> 00:35:20,820
that I came across in testing against

1007
00:35:20,820 --> 00:35:22,020
you know a bunch of different tools that

1008
00:35:22,020 --> 00:35:24,440
are out there

1009
00:35:24,800 --> 00:35:27,540
so we got our new obscated code we're

1010
00:35:27,540 --> 00:35:28,440
going to go ahead and rebuild the

1011
00:35:28,440 --> 00:35:30,060
project and then we're going to take a

1012
00:35:30,060 --> 00:35:31,920
look to see if this gets past Defender

1013
00:35:31,920 --> 00:35:35,280
which it's not going to spoiler alert

1014
00:35:35,280 --> 00:35:37,460
foreign

1015
00:35:38,040 --> 00:35:40,099
and the reason for this as I mentioned

1016
00:35:40,099 --> 00:35:43,020
method and variable names uh I'm not

1017
00:35:43,020 --> 00:35:45,240
obfuscating or like randomizing an

1018
00:35:45,240 --> 00:35:49,020
invisibility cloak and uh specifically

1019
00:35:49,020 --> 00:35:51,480
with uh rubius uh you'll see the the

1020
00:35:51,480 --> 00:35:53,880
signature the signature that I missed

1021
00:35:53,880 --> 00:35:55,560
that I didn't cover was around a

1022
00:35:55,560 --> 00:35:57,060
variable name

1023
00:35:57,060 --> 00:35:58,260
so we're going to run Defender check

1024
00:35:58,260 --> 00:35:59,820
against the original rubius and

1025
00:35:59,820 --> 00:36:01,260
obviously there's going to be a

1026
00:36:01,260 --> 00:36:02,820
signature for it

1027
00:36:02,820 --> 00:36:04,079
and then we're going to run it through

1028
00:36:04,079 --> 00:36:07,339
our hello uh Wild West hacking Fest tool

1029
00:36:07,339 --> 00:36:09,540
and you're going to see that there's

1030
00:36:09,540 --> 00:36:11,460
still going to be that same signature uh

1031
00:36:11,460 --> 00:36:13,079
with the kind of get underscore tickets

1032
00:36:13,079 --> 00:36:16,079
and I'll explain that in a second

1033
00:36:16,079 --> 00:36:18,720
foreign

1034
00:36:18,720 --> 00:36:20,940
it's going to come back here it's going

1035
00:36:20,940 --> 00:36:22,800
to have the same the same signature so

1036
00:36:22,800 --> 00:36:25,260
get underscore tickets uh what that is

1037
00:36:25,260 --> 00:36:27,660
that's a get method for a tickets

1038
00:36:27,660 --> 00:36:30,000
variable so

1039
00:36:30,000 --> 00:36:31,619
um what we're going to do is open up the

1040
00:36:31,619 --> 00:36:33,420
project here so you can see that's still

1041
00:36:33,420 --> 00:36:35,160
there again I don't obfuscate the

1042
00:36:35,160 --> 00:36:38,520
variable names right you know right now

1043
00:36:38,520 --> 00:36:39,660
so we're going to search in the project

1044
00:36:39,660 --> 00:36:43,260
for any uh occurrence of tickets uh a

1045
00:36:43,260 --> 00:36:46,140
get method for a tickets variable

1046
00:36:46,140 --> 00:36:48,000
and it's going to come up with a couple

1047
00:36:48,000 --> 00:36:50,760
hits so this is additional tickets so

1048
00:36:50,760 --> 00:36:52,320
not that one

1049
00:36:52,320 --> 00:36:53,400
we're gonna search for the next

1050
00:36:53,400 --> 00:36:54,480
occurrence so they're gonna be two

1051
00:36:54,480 --> 00:36:55,740
occurrences right

1052
00:36:55,740 --> 00:36:56,880
so you can see there we're going to

1053
00:36:56,880 --> 00:36:59,760
rename that simply uh to I think I did

1054
00:36:59,760 --> 00:37:01,320
something else maybe we ran it to

1055
00:37:01,320 --> 00:37:02,640
something else yeah some other thing

1056
00:37:02,640 --> 00:37:03,839
right so we're naming it some other

1057
00:37:03,839 --> 00:37:04,980
thing

1058
00:37:04,980 --> 00:37:06,839
so that's renamed and then there's going

1059
00:37:06,839 --> 00:37:08,820
to be one other occurrence of this get

1060
00:37:08,820 --> 00:37:10,859
method for the tickets variable we're

1061
00:37:10,859 --> 00:37:13,680
renaming that uh this one I renamed to

1062
00:37:13,680 --> 00:37:15,240
something else I believe

1063
00:37:15,240 --> 00:37:18,060
yes all right and then we're going to

1064
00:37:18,060 --> 00:37:20,280
recompile the tool any guesses on

1065
00:37:20,280 --> 00:37:21,839
whether this gets past Defender

1066
00:37:21,839 --> 00:37:25,460
I already spoiled it yes it does

1067
00:37:26,180 --> 00:37:29,540
wrong sir

1068
00:37:29,760 --> 00:37:31,500
so yeah we got we got that here we're

1069
00:37:31,500 --> 00:37:34,880
gonna run Defender check against it

1070
00:37:39,060 --> 00:37:41,460
copy this over

1071
00:37:41,460 --> 00:37:44,040
again the file size didn't jump too too

1072
00:37:44,040 --> 00:37:45,599
much uh with the reverse string

1073
00:37:45,599 --> 00:37:48,140
obfuscation

1074
00:37:49,020 --> 00:37:50,220
all right so we're gonna run Defender

1075
00:37:50,220 --> 00:37:52,859
check against it good to go right we're

1076
00:37:52,859 --> 00:37:55,460
all good

1077
00:37:56,940 --> 00:37:59,880
sharp RDP this will be a quick one here

1078
00:37:59,880 --> 00:38:02,520
this was the other Problem Child uh that

1079
00:38:02,520 --> 00:38:05,520
we have to to address here uh so this

1080
00:38:05,520 --> 00:38:08,820
one has a signature in a method name

1081
00:38:08,820 --> 00:38:11,640
specifically with this tool so we're

1082
00:38:11,640 --> 00:38:12,900
gonna run invisibility cloak through

1083
00:38:12,900 --> 00:38:15,060
sharp RDP

1084
00:38:15,060 --> 00:38:16,560
and it's going to go through and do its

1085
00:38:16,560 --> 00:38:18,180
thing just like I showed previously go

1086
00:38:18,180 --> 00:38:20,640
through generate a new guid do all that

1087
00:38:20,640 --> 00:38:22,800
good stuff

1088
00:38:22,800 --> 00:38:25,320
we're going to call this uh past the

1089
00:38:25,320 --> 00:38:27,060
remote is going to be our new tool so

1090
00:38:27,060 --> 00:38:30,680
sharp RDP is now past the remote

1091
00:38:31,619 --> 00:38:33,359
and so we're going to compile this tool

1092
00:38:33,359 --> 00:38:34,380
and we're going to run Defender check

1093
00:38:34,380 --> 00:38:37,260
against it to see uh where the remaining

1094
00:38:37,260 --> 00:38:40,339
signature is that we need to change

1095
00:38:44,339 --> 00:38:46,859
so we've compiled the tool here uh we're

1096
00:38:46,859 --> 00:38:49,880
just going to copy it over

1097
00:38:52,260 --> 00:38:53,520
so you're going to see here again it's

1098
00:38:53,520 --> 00:38:55,079
it's going to still have a signature for

1099
00:38:55,079 --> 00:38:56,700
this tool and it's going to be in a

1100
00:38:56,700 --> 00:38:58,920
method name that we'll find out so if we

1101
00:38:58,920 --> 00:39:00,420
look at the end of that signature there

1102
00:39:00,420 --> 00:39:01,740
send text

1103
00:39:01,740 --> 00:39:03,720
so we're going to take send text and

1104
00:39:03,720 --> 00:39:05,880
we're going to search it in the visual

1105
00:39:05,880 --> 00:39:08,359
studio project

1106
00:39:12,359 --> 00:39:13,680
and you're going to see here that it's

1107
00:39:13,680 --> 00:39:16,460
actually a method name

1108
00:39:17,760 --> 00:39:19,859
so you can see there's syntax so we're

1109
00:39:19,859 --> 00:39:21,540
going to go to the where that method's

1110
00:39:21,540 --> 00:39:22,560
defined and we're just going to rename

1111
00:39:22,560 --> 00:39:24,480
it through the whole project so just

1112
00:39:24,480 --> 00:39:26,400
going to right click on it do a rename

1113
00:39:26,400 --> 00:39:29,460
in Visual Studio such a great IDE

1114
00:39:29,460 --> 00:39:31,380
um and then we're going to to rename it

1115
00:39:31,380 --> 00:39:33,560
here

1116
00:39:34,920 --> 00:39:38,420
and then we'll recompile the tool

1117
00:39:40,260 --> 00:39:41,700
all right you see there's obviously no

1118
00:39:41,700 --> 00:39:43,020
more occurrences of send text so we

1119
00:39:43,020 --> 00:39:45,619
should be good to go

1120
00:39:48,720 --> 00:39:52,759
through these are just warnings

1121
00:39:53,280 --> 00:39:56,599
still functions I swear

1122
00:39:58,380 --> 00:40:00,000
all right so you can see here it built

1123
00:40:00,000 --> 00:40:01,380
just successfully

1124
00:40:01,380 --> 00:40:03,240
we're going to copy it over

1125
00:40:03,240 --> 00:40:05,700
yep

1126
00:40:05,700 --> 00:40:09,319
yep run Defender check against it again

1127
00:40:17,700 --> 00:40:20,520
all right so we'll run it here

1128
00:40:20,520 --> 00:40:21,599
and you're going to see here it's going

1129
00:40:21,599 --> 00:40:25,339
to come up empty we're good to go

1130
00:40:26,700 --> 00:40:29,099
all right so two more demos so I kind of

1131
00:40:29,099 --> 00:40:31,740
showed the detections kind of uh on disk

1132
00:40:31,740 --> 00:40:32,820
so I'm just going to show you what it

1133
00:40:32,820 --> 00:40:34,500
looks like in memory two between the

1134
00:40:34,500 --> 00:40:35,700
kind of normal tools and then the

1135
00:40:35,700 --> 00:40:37,980
obfuscated tools so we have a Cobalt

1136
00:40:37,980 --> 00:40:39,300
strike Beacon here on Harry Potter's

1137
00:40:39,300 --> 00:40:40,920
machine he executed a payload for us

1138
00:40:40,920 --> 00:40:44,400
thank you Harry uh so uh we're gonna run

1139
00:40:44,400 --> 00:40:47,460
uh execute assembly to run uh stand in

1140
00:40:47,460 --> 00:40:49,320
to get a list of users with service

1141
00:40:49,320 --> 00:40:50,940
principal names that we could be able to

1142
00:40:50,940 --> 00:40:52,920
do curb roasting on

1143
00:40:52,920 --> 00:40:54,420
and this is again kind of standing

1144
00:40:54,420 --> 00:40:56,520
straight from the the GitHub repo and

1145
00:40:56,520 --> 00:40:57,720
what you're going to see here is you're

1146
00:40:57,720 --> 00:40:58,680
going to see we're going to get that

1147
00:40:58,680 --> 00:41:01,740
failed to load assembly message right so

1148
00:41:01,740 --> 00:41:03,660
and again that is amcfer.net picking

1149
00:41:03,660 --> 00:41:05,280
that up so we're going to actually go

1150
00:41:05,280 --> 00:41:06,960
over to our victim box look at the event

1151
00:41:06,960 --> 00:41:08,099
log

1152
00:41:08,099 --> 00:41:09,359
and you're going to see the actual event

1153
00:41:09,359 --> 00:41:10,920
log entry

1154
00:41:10,920 --> 00:41:13,380
for that right amcfer.net picking that

1155
00:41:13,380 --> 00:41:15,300
up it's got the signature there hey

1156
00:41:15,300 --> 00:41:17,099
you're trying to run standard memory you

1157
00:41:17,099 --> 00:41:19,560
know get off this box

1158
00:41:19,560 --> 00:41:21,720
so now we're going to do we're going to

1159
00:41:21,720 --> 00:41:23,400
run the version of stand-in that we ran

1160
00:41:23,400 --> 00:41:24,660
through invisibility cloak called Stand

1161
00:41:24,660 --> 00:41:26,400
Up and we're going to do do the same

1162
00:41:26,400 --> 00:41:27,900
thing just with that that obfuscated

1163
00:41:27,900 --> 00:41:30,119
tool

1164
00:41:30,119 --> 00:41:32,339
again run stand up get a list of users

1165
00:41:32,339 --> 00:41:35,299
with service principal names

1166
00:41:39,839 --> 00:41:41,400
what you're going to see here is that

1167
00:41:41,400 --> 00:41:43,320
we're able to run this no problem so

1168
00:41:43,320 --> 00:41:45,300
again we got rid of the signatures so

1169
00:41:45,300 --> 00:41:47,820
this tool is now good to go to run in

1170
00:41:47,820 --> 00:41:50,119
memory

1171
00:41:56,940 --> 00:41:58,920
yep you can see there we're good to go

1172
00:41:58,920 --> 00:42:01,020
uh we're gonna do this again with rubius

1173
00:42:01,020 --> 00:42:03,060
so run rubius straight from the GitHub

1174
00:42:03,060 --> 00:42:04,740
repo to try to do curb roasting attack

1175
00:42:04,740 --> 00:42:06,180
and you're going to see here we got the

1176
00:42:06,180 --> 00:42:08,040
failed to load assembly message uh again

1177
00:42:08,040 --> 00:42:11,540
that's amsy frenette picking that up

1178
00:42:11,760 --> 00:42:13,020
so we're gonna go to our victim box

1179
00:42:13,020 --> 00:42:15,119
again this is Harry's box and you can

1180
00:42:15,119 --> 00:42:16,680
see there it's got the signature for

1181
00:42:16,680 --> 00:42:19,020
rubius pick that up

1182
00:42:19,020 --> 00:42:20,339
then we're gonna do the same thing but

1183
00:42:20,339 --> 00:42:21,720
we're gonna use the version of rubius

1184
00:42:21,720 --> 00:42:23,160
that you I just showed that we did the

1185
00:42:23,160 --> 00:42:24,900
obfuscation on with the visibility cloak

1186
00:42:24,900 --> 00:42:26,940
and that kind of One manual modification

1187
00:42:26,940 --> 00:42:29,359
as well

1188
00:42:33,900 --> 00:42:35,099
all right so we're gonna go ahead and

1189
00:42:35,099 --> 00:42:37,460
run this

1190
00:42:41,040 --> 00:42:42,420
and what you're going to see here is

1191
00:42:42,420 --> 00:42:44,579
we're actually going to get the uh the

1192
00:42:44,579 --> 00:42:47,160
SQL admin hash back here so that we can

1193
00:42:47,160 --> 00:42:50,160
crack that and move on to do good things

1194
00:42:50,160 --> 00:42:52,079
so it's going to come up here in a

1195
00:42:52,079 --> 00:42:53,280
second

1196
00:42:53,280 --> 00:42:56,839
as you can see runs no problem

1197
00:42:57,599 --> 00:43:00,119
the last demo I have uh I mentioned

1198
00:43:00,119 --> 00:43:01,920
there are alternative options to

1199
00:43:01,920 --> 00:43:04,700
obfuscation right and one of those is

1200
00:43:04,700 --> 00:43:08,880
disabling amsi or disabling etw so what

1201
00:43:08,880 --> 00:43:10,800
we're going to do here is we are going

1202
00:43:10,800 --> 00:43:14,700
to run uh the kind of normal uh let me

1203
00:43:14,700 --> 00:43:16,200
kind of bring this up we're going to run

1204
00:43:16,200 --> 00:43:18,420
stand in again this is just standing

1205
00:43:18,420 --> 00:43:19,980
straight from the GitHub repo and you're

1206
00:43:19,980 --> 00:43:21,119
going to see you know kind of fast

1207
00:43:21,119 --> 00:43:22,319
forward this because we kind of showed

1208
00:43:22,319 --> 00:43:24,300
it getting detected here we're going to

1209
00:43:24,300 --> 00:43:25,680
get that failed to a load assembly

1210
00:43:25,680 --> 00:43:29,180
message uh here

1211
00:43:30,540 --> 00:43:32,099
and then we're going to do is we're

1212
00:43:32,099 --> 00:43:33,660
going to run the same tool but we're

1213
00:43:33,660 --> 00:43:35,099
going to run this is again this is

1214
00:43:35,099 --> 00:43:36,480
standing straight from the GitHub repo

1215
00:43:36,480 --> 00:43:39,000
we're going to use uh Sean's inline

1216
00:43:39,000 --> 00:43:41,040
execute assembly with the dash dash amsy

1217
00:43:41,040 --> 00:43:42,660
flag so what this is going to do is it's

1218
00:43:42,660 --> 00:43:44,280
going to disable amsy before kind of

1219
00:43:44,280 --> 00:43:46,140
running that tool in memory and what

1220
00:43:46,140 --> 00:43:47,819
you're going to see is uh we're able to

1221
00:43:47,819 --> 00:43:49,260
run this no problem in memory without

1222
00:43:49,260 --> 00:43:50,700
without any detections because we're

1223
00:43:50,700 --> 00:43:54,060
disabling AMZ uh before doing so

1224
00:43:54,060 --> 00:43:57,680
see there the tool runs no problem

1225
00:43:58,920 --> 00:44:00,480
and I have the same thing for rubius

1226
00:44:00,480 --> 00:44:01,980
right so

1227
00:44:01,980 --> 00:44:03,359
um I've showed rubius get detected

1228
00:44:03,359 --> 00:44:04,560
already

1229
00:44:04,560 --> 00:44:06,300
but what I'm going to show you then is

1230
00:44:06,300 --> 00:44:07,980
doing using rubia Straight From the

1231
00:44:07,980 --> 00:44:09,660
GitHub repo with inline execute assembly

1232
00:44:09,660 --> 00:44:12,000
so again we're going to run it from the

1233
00:44:12,000 --> 00:44:14,280
GitHub repo put that dash dash amsy flag

1234
00:44:14,280 --> 00:44:16,859
in there to disable amsy

1235
00:44:16,859 --> 00:44:20,359
go ahead and run that

1236
00:44:22,560 --> 00:44:24,300
and you're going to see that uh we're

1237
00:44:24,300 --> 00:44:26,160
gonna get that hashback again right so

1238
00:44:26,160 --> 00:44:29,598
all all is good

1239
00:44:33,599 --> 00:44:35,160
so just to kind of summarize what you

1240
00:44:35,160 --> 00:44:37,619
saw in the demos there

1241
00:44:37,619 --> 00:44:40,319
maybe yes uh just to kind of show you

1242
00:44:40,319 --> 00:44:41,579
and summarize what you know show you in

1243
00:44:41,579 --> 00:44:43,380
the demos first demo we ran standing

1244
00:44:43,380 --> 00:44:44,940
through invisible invisibility cloak got

1245
00:44:44,940 --> 00:44:47,579
past those signatures second demo with

1246
00:44:47,579 --> 00:44:49,619
rubius we ran through invisibility cloak

1247
00:44:49,619 --> 00:44:51,420
and we made one manual modification

1248
00:44:51,420 --> 00:44:53,640
after that to get it past the signatures

1249
00:44:53,640 --> 00:44:55,440
third demo we did similar thing with

1250
00:44:55,440 --> 00:44:57,180
sharp RDP we had to make one manual

1251
00:44:57,180 --> 00:44:58,740
modification in that method name after

1252
00:44:58,740 --> 00:45:00,780
running through invisibility cloak

1253
00:45:00,780 --> 00:45:02,400
demo four just kind of showed us running

1254
00:45:02,400 --> 00:45:04,380
those tools in memory just to kind of

1255
00:45:04,380 --> 00:45:05,520
show getting capacity of memory

1256
00:45:05,520 --> 00:45:06,720
detections

1257
00:45:06,720 --> 00:45:08,819
and then lastly an alternative approach

1258
00:45:08,819 --> 00:45:11,339
to obfuscation is just disabling AMZ

1259
00:45:11,339 --> 00:45:15,078
using inline execute assembly

1260
00:45:16,140 --> 00:45:18,780
in terms of defensive considerations uh

1261
00:45:18,780 --> 00:45:20,940
as far as attackers using these public

1262
00:45:20,940 --> 00:45:23,700
c-sharp tools out of the box uh make

1263
00:45:23,700 --> 00:45:24,960
sure that your host based security

1264
00:45:24,960 --> 00:45:27,599
product is fully up to date make sure

1265
00:45:27,599 --> 00:45:29,579
the.net framework version 4.8 is

1266
00:45:29,579 --> 00:45:30,960
installed the reason for that being is

1267
00:45:30,960 --> 00:45:33,540
that's when the amd4.net support came so

1268
00:45:33,540 --> 00:45:35,160
make sure that you have that installed

1269
00:45:35,160 --> 00:45:36,960
so you have that capability to try to

1270
00:45:36,960 --> 00:45:38,760
detect these these tools out of the box

1271
00:45:38,760 --> 00:45:40,319
being run a memory

1272
00:45:40,319 --> 00:45:42,660
and also make sure uh you know more

1273
00:45:42,660 --> 00:45:43,680
importantly make sure that your whatever

1274
00:45:43,680 --> 00:45:45,359
host based security product you're using

1275
00:45:45,359 --> 00:45:48,660
whatever vendor supports amazon.net in

1276
00:45:48,660 --> 00:45:50,040
their product

1277
00:45:50,040 --> 00:45:51,900
as far as attackers using these modified

1278
00:45:51,900 --> 00:45:53,940
public c-sharp tools

1279
00:45:53,940 --> 00:45:55,260
um you know as C Sharp Tools they're

1280
00:45:55,260 --> 00:45:57,060
public out there that are modified you

1281
00:45:57,060 --> 00:45:58,380
need to focus on the detection of the

1282
00:45:58,380 --> 00:46:00,660
techniques rather than the tools uh so

1283
00:46:00,660 --> 00:46:02,700
in the example of kerberosting rather

1284
00:46:02,700 --> 00:46:05,339
than focusing on detecting rubius you

1285
00:46:05,339 --> 00:46:07,560
know focus on what it actually does so

1286
00:46:07,560 --> 00:46:09,960
for example uh it has the capability to

1287
00:46:09,960 --> 00:46:11,520
do curb roasting attack right which is

1288
00:46:11,520 --> 00:46:14,420
uh this number I totally memorized uh

1289
00:46:14,420 --> 00:46:18,800
t1558.003 and miter attack framework

1290
00:46:19,500 --> 00:46:20,880
so just kind of wrap things up in

1291
00:46:20,880 --> 00:46:22,980
conclusion uh detections for c-sharp

1292
00:46:22,980 --> 00:46:24,839
tradecraft are getting better uh but

1293
00:46:24,839 --> 00:46:25,980
there's still work to be done as you can

1294
00:46:25,980 --> 00:46:28,020
see uh these static detections are

1295
00:46:28,020 --> 00:46:30,300
pretty brittle relatively easy to evade

1296
00:46:30,300 --> 00:46:31,740
with a few manual modifications or

1297
00:46:31,740 --> 00:46:33,660
running through invisibility cloak uh

1298
00:46:33,660 --> 00:46:35,280
and really you need to emphasize the

1299
00:46:35,280 --> 00:46:37,680
detections of the techniques over the

1300
00:46:37,680 --> 00:46:40,759
actual tools themselves

1301
00:46:41,000 --> 00:46:44,339
uh if you have any any questions uh and

1302
00:46:44,339 --> 00:46:46,200
you're not here physically

1303
00:46:46,200 --> 00:46:49,140
um feel free to message me on Twitter uh

1304
00:46:49,140 --> 00:46:51,240
or Discord I have my names right there

1305
00:46:51,240 --> 00:46:52,380
um that's it

1306
00:46:52,380 --> 00:46:53,440
any questions

1307
00:46:53,440 --> 00:46:56,949
[Applause]

1308
00:47:01,020 --> 00:47:03,060
I got two questions from online one of

1309
00:47:03,060 --> 00:47:06,060
them was um uh so the the changes that

1310
00:47:06,060 --> 00:47:09,420
you're making uh do those also help

1311
00:47:09,420 --> 00:47:11,400
evade network-based detections so if

1312
00:47:11,400 --> 00:47:12,660
we're transmitting the modified version

1313
00:47:12,660 --> 00:47:15,000
over a clear text protocol have you

1314
00:47:15,000 --> 00:47:17,520
tested to see if those signature based

1315
00:47:17,520 --> 00:47:20,520
detections are also disabled similarly

1316
00:47:20,520 --> 00:47:22,920
so that's a really good question uh so

1317
00:47:22,920 --> 00:47:25,020
uh my testing no so I'm specifically

1318
00:47:25,020 --> 00:47:26,520
focusing on like the host based

1319
00:47:26,520 --> 00:47:29,460
detection so uh with something like uh

1320
00:47:29,460 --> 00:47:31,079
you know I'm assuming they mean kind of

1321
00:47:31,079 --> 00:47:33,240
like an IDs or things like that uh you

1322
00:47:33,240 --> 00:47:34,800
know not sure about that but in terms of

1323
00:47:34,800 --> 00:47:37,319
like uh like like our team like how we

1324
00:47:37,319 --> 00:47:38,579
use these tools

1325
00:47:38,579 --> 00:47:40,440
um you know we're we're not kind of

1326
00:47:40,440 --> 00:47:41,940
transferring them across the network

1327
00:47:41,940 --> 00:47:43,740
we're kind of loading them onto the

1328
00:47:43,740 --> 00:47:45,599
machine in memory

1329
00:47:45,599 --> 00:47:48,359
um so uh but as far as yeah as far as do

1330
00:47:48,359 --> 00:47:49,980
these do these modifications if they

1331
00:47:49,980 --> 00:47:52,380
kind of network-based signatures I'm not

1332
00:47:52,380 --> 00:47:54,060
sure just because I haven't tested that

1333
00:47:54,060 --> 00:47:55,500
use case because I just haven't had that

1334
00:47:55,500 --> 00:47:57,720
use case

1335
00:47:57,720 --> 00:47:59,940
the second one from online was um is

1336
00:47:59,940 --> 00:48:02,220
there a way or is the question is which

1337
00:48:02,220 --> 00:48:03,960
c-sharp tools would be good candidates

1338
00:48:03,960 --> 00:48:06,599
for invisibility cloak assuming uh basic

1339
00:48:06,599 --> 00:48:09,119
low privileged user account or

1340
00:48:09,119 --> 00:48:10,920
um failing that is there like a way are

1341
00:48:10,920 --> 00:48:13,319
there certain tools or or properties of

1342
00:48:13,319 --> 00:48:14,940
tools that make this more effective or

1343
00:48:14,940 --> 00:48:18,300
at least less effective yeah so uh let

1344
00:48:18,300 --> 00:48:21,540
me see if I can back up these here

1345
00:48:21,540 --> 00:48:26,460
maybe yeah let's go to this here back

1346
00:48:26,460 --> 00:48:28,079
um so as far as tools that invisibly

1347
00:48:28,079 --> 00:48:30,480
cloak works really well with uh this

1348
00:48:30,480 --> 00:48:32,400
table here I have so some of the two the

1349
00:48:32,400 --> 00:48:33,780
tools I have there it works it works

1350
00:48:33,780 --> 00:48:35,700
really well uh on on these tools

1351
00:48:35,700 --> 00:48:37,500
obviously as of the 14th for Defender

1352
00:48:37,500 --> 00:48:40,380
specifically uh I think where what

1353
00:48:40,380 --> 00:48:41,880
properties of the tools that that

1354
00:48:41,880 --> 00:48:43,380
invisibility cloak provides the most

1355
00:48:43,380 --> 00:48:45,540
value I would say specifically with the

1356
00:48:45,540 --> 00:48:47,339
strings just because the amount of

1357
00:48:47,339 --> 00:48:48,540
string coverage that it's getting for

1358
00:48:48,540 --> 00:48:51,000
obfuscation is pretty decent

1359
00:48:51,000 --> 00:48:52,440
um you know it obviously lacks in some

1360
00:48:52,440 --> 00:48:53,700
properties like variable names and

1361
00:48:53,700 --> 00:48:54,720
Method names because it doesn't do that

1362
00:48:54,720 --> 00:48:56,880
but I would say the biggest strength

1363
00:48:56,880 --> 00:48:59,099
um in terms of this tool um kind of

1364
00:48:59,099 --> 00:49:01,800
using it is well the tool renaming but

1365
00:49:01,800 --> 00:49:04,920
also the the string obfuscation as well

1366
00:49:04,920 --> 00:49:06,859
foreign

1367
00:49:06,859 --> 00:49:09,000
that was it for online any questions in

1368
00:49:09,000 --> 00:49:10,200
the room

1369
00:49:10,200 --> 00:49:12,780
you sir

1370
00:49:12,780 --> 00:49:15,060
where do you think that the detection

1371
00:49:15,060 --> 00:49:16,200
cup

1372
00:49:16,200 --> 00:49:19,020
of Max now that you've focused on those

1373
00:49:19,020 --> 00:49:21,240
particular things instead of string in

1374
00:49:21,240 --> 00:49:23,640
variable names as if like the use of

1375
00:49:23,640 --> 00:49:26,520
obfuscation about 13 or use of

1376
00:49:26,520 --> 00:49:28,200
encryption or like where do you think

1377
00:49:28,200 --> 00:49:30,900
you'll evolve your career yeah so the

1378
00:49:30,900 --> 00:49:32,339
for those that are online the question

1379
00:49:32,339 --> 00:49:34,800
was kind of where do I see security

1380
00:49:34,800 --> 00:49:37,140
products and vendors focusing on now

1381
00:49:37,140 --> 00:49:38,760
that this Tool's been released in terms

1382
00:49:38,760 --> 00:49:40,619
of you know aspects of tools Edge detect

1383
00:49:40,619 --> 00:49:42,540
and such like that uh things that I can

1384
00:49:42,540 --> 00:49:44,700
do in the future to it to enhance it I

1385
00:49:44,700 --> 00:49:46,680
think obviously the the weak spot is the

1386
00:49:46,680 --> 00:49:48,900
variable in method name so I think if

1387
00:49:48,900 --> 00:49:50,280
they're focusing more on variable method

1388
00:49:50,280 --> 00:49:52,079
names that would be a good bet for

1389
00:49:52,079 --> 00:49:55,560
specifically this to obfuscating uh as

1390
00:49:55,560 --> 00:49:57,780
far as the specific type of obfuscation

1391
00:49:57,780 --> 00:49:59,099
that I'm using

1392
00:49:59,099 --> 00:50:00,900
um yeah I mean you could definitely you

1393
00:50:00,900 --> 00:50:01,980
know they could obviously put in

1394
00:50:01,980 --> 00:50:03,420
signatures for like if they have some

1395
00:50:03,420 --> 00:50:04,319
sort of string that they have a

1396
00:50:04,319 --> 00:50:06,359
signature for uh you know taking the

1397
00:50:06,359 --> 00:50:08,700
reverse of that string raw 13 they could

1398
00:50:08,700 --> 00:50:09,900
definitely add those signatures for sure

1399
00:50:09,900 --> 00:50:12,240
so they could definitely do that uh in

1400
00:50:12,240 --> 00:50:14,280
terms of other obfuscation techniques

1401
00:50:14,280 --> 00:50:16,560
four strings uh you could do something

1402
00:50:16,560 --> 00:50:17,880
like encryption but it's going to

1403
00:50:17,880 --> 00:50:19,440
increase the file size quite a bit

1404
00:50:19,440 --> 00:50:21,540
there's a bunch of different ways you

1405
00:50:21,540 --> 00:50:23,640
could do obfuscation other than the

1406
00:50:23,640 --> 00:50:25,319
three that I mentioned you could even

1407
00:50:25,319 --> 00:50:28,380
try to uh stack the it could even try to

1408
00:50:28,380 --> 00:50:30,119
stack obfuscation technique on top of

1409
00:50:30,119 --> 00:50:32,160
each other so if they're going to

1410
00:50:32,160 --> 00:50:34,440
implement uh detections for reverse

1411
00:50:34,440 --> 00:50:36,839
strings and for the specific reverse

1412
00:50:36,839 --> 00:50:39,000
strings or rot 13 obfuscated you could

1413
00:50:39,000 --> 00:50:41,040
do like you could take a string Route 13

1414
00:50:41,040 --> 00:50:43,260
obfuscate it and then reverse it or you

1415
00:50:43,260 --> 00:50:45,359
could take a revert reverse a string and

1416
00:50:45,359 --> 00:50:47,640
then base64 encode it right so like you

1417
00:50:47,640 --> 00:50:49,200
can just stack these methods on top of

1418
00:50:49,200 --> 00:50:50,460
each other and I think that would be

1419
00:50:50,460 --> 00:50:52,800
pretty effective

1420
00:50:52,800 --> 00:50:55,640
in that case

1421
00:51:08,660 --> 00:51:12,000
so so the question was uh to do that

1422
00:51:12,000 --> 00:51:13,500
could you just run invisibility cloak

1423
00:51:13,500 --> 00:51:15,000
twice like run reverse string

1424
00:51:15,000 --> 00:51:16,619
obfuscation on the project and then run

1425
00:51:16,619 --> 00:51:19,380
like route 13. uh not not in this case

1426
00:51:19,380 --> 00:51:21,599
no I would need to add support in there

1427
00:51:21,599 --> 00:51:23,640
to actually be able to do multiple

1428
00:51:23,640 --> 00:51:26,160
methods because let's say you run

1429
00:51:26,160 --> 00:51:27,900
invisibly cloak with reverse string it's

1430
00:51:27,900 --> 00:51:29,700
going to reverse the string and then

1431
00:51:29,700 --> 00:51:31,020
you're do you're taking that reverse

1432
00:51:31,020 --> 00:51:32,339
string and you're actually going to be

1433
00:51:32,339 --> 00:51:34,920
Route 13 it so

1434
00:51:34,920 --> 00:51:36,480
um it's not going to know how to get to

1435
00:51:36,480 --> 00:51:38,220
that kind of second level so that's

1436
00:51:38,220 --> 00:51:39,780
something that's a good idea though I

1437
00:51:39,780 --> 00:51:43,460
could I could add that in the tool

1438
00:51:43,500 --> 00:51:46,619
this is cool um do you have any chance

1439
00:51:46,619 --> 00:51:48,660
to like internally have some sort of

1440
00:51:48,660 --> 00:51:50,220
like high point for your regularly

1441
00:51:50,220 --> 00:51:52,640
pulling areas

1442
00:51:52,640 --> 00:51:55,619
yeah so so we actually do on our team we

1443
00:51:55,619 --> 00:51:58,020
do have a uh uh we do have that was an

1444
00:51:58,020 --> 00:51:59,640
excellent question and that's the guy

1445
00:51:59,640 --> 00:52:03,240
right there uh so so the question was do

1446
00:52:03,240 --> 00:52:05,579
you have any plans internally uh to have

1447
00:52:05,579 --> 00:52:07,140
like a devops pipeline to kind of do

1448
00:52:07,140 --> 00:52:08,880
this automatically and yes we do have a

1449
00:52:08,880 --> 00:52:11,160
pipeline uh where we kind of do kind of

1450
00:52:11,160 --> 00:52:12,599
the automated kind of build type of

1451
00:52:12,599 --> 00:52:13,319
thing

1452
00:52:13,319 --> 00:52:14,579
Um this can definitely be used obviously

1453
00:52:14,579 --> 00:52:16,559
as part of that so if you're building

1454
00:52:16,559 --> 00:52:19,200
that on your team uh we like using uh

1455
00:52:19,200 --> 00:52:20,880
Jenkins in terms of like that devops

1456
00:52:20,880 --> 00:52:22,800
Pipeline and you can that's your guy

1457
00:52:22,800 --> 00:52:25,319
right there Chris Spain yeah talk to him

1458
00:52:25,319 --> 00:52:27,180
afterwards he's built some crazy magic

1459
00:52:27,180 --> 00:52:30,500
yeah yeah definitely

1460
00:52:30,500 --> 00:52:32,760
yeah yeah I think I'll just hand yeah

1461
00:52:32,760 --> 00:52:34,319
I'm done now I'm gonna give it to Chris

1462
00:52:34,319 --> 00:52:36,000
you know like yeah he's gonna take over

1463
00:52:36,000 --> 00:52:37,859
for the next hour so uh but yeah

1464
00:52:37,859 --> 00:52:39,780
definitely definitely and I have some

1465
00:52:39,780 --> 00:52:41,280
some friends at other at other companies

1466
00:52:41,280 --> 00:52:42,420
and they have integrated into their

1467
00:52:42,420 --> 00:52:43,920
devops pipelines as well to kind of

1468
00:52:43,920 --> 00:52:46,020
doing an automated so pulling down tools

1469
00:52:46,020 --> 00:52:47,819
taking invisible Coke running through it

1470
00:52:47,819 --> 00:52:51,020
compiling it that type of stuff

1471
00:52:52,200 --> 00:52:54,900
any other questions

1472
00:52:54,900 --> 00:52:56,700
all right thanks everybody oh wait oh we

1473
00:52:56,700 --> 00:52:57,720
got one more

1474
00:52:57,720 --> 00:53:01,459
so when you're docking the code basis

1475
00:53:04,040 --> 00:53:06,720
what was the basement they hit where you

1476
00:53:06,720 --> 00:53:10,339
realized there were only so few things

1477
00:53:14,240 --> 00:53:16,920
yeah so the question was kind of how did

1478
00:53:16,920 --> 00:53:19,200
I basically kind of identify the things

1479
00:53:19,200 --> 00:53:20,640
that need to be changed what was kind of

1480
00:53:20,640 --> 00:53:22,140
the the basic level kind of

1481
00:53:22,140 --> 00:53:24,240
modifications how did I come to that uh

1482
00:53:24,240 --> 00:53:25,380
one of them was just kind of just

1483
00:53:25,380 --> 00:53:26,819
experience kind of doing this for a

1484
00:53:26,819 --> 00:53:28,079
while

1485
00:53:28,079 --> 00:53:30,839
um doing I've done C sharp tool Dev for

1486
00:53:30,839 --> 00:53:32,400
for a lot I'm not a developer at all

1487
00:53:32,400 --> 00:53:34,200
like I'm not a developer I just hack

1488
00:53:34,200 --> 00:53:36,359
stuff together and it works right

1489
00:53:36,359 --> 00:53:38,700
um but a lot of it was just just

1490
00:53:38,700 --> 00:53:40,140
experience with building tools and

1491
00:53:40,140 --> 00:53:42,180
knowing okay like

1492
00:53:42,180 --> 00:53:43,859
um this is a part of like the project

1493
00:53:43,859 --> 00:53:45,900
property you know I can change these

1494
00:53:45,900 --> 00:53:47,640
properties it's not going to change how

1495
00:53:47,640 --> 00:53:48,900
the tool works but it's going to change

1496
00:53:48,900 --> 00:53:51,180
how like I guess how it looks right that

1497
00:53:51,180 --> 00:53:52,680
you know changing like base these

1498
00:53:52,680 --> 00:53:54,240
properties isn't going to affect the

1499
00:53:54,240 --> 00:53:55,740
tool in a negative way type thing so a

1500
00:53:55,740 --> 00:53:57,000
lot of it's just kind of experiencing

1501
00:53:57,000 --> 00:53:58,859
just being into visual studio and taking

1502
00:53:58,859 --> 00:54:00,480
a look at oh like what's the c-sharp

1503
00:54:00,480 --> 00:54:02,220
project file you know what is in here

1504
00:54:02,220 --> 00:54:04,319
what can I change to not break the Tool

1505
00:54:04,319 --> 00:54:07,079
uh type of thing another thing too is

1506
00:54:07,079 --> 00:54:09,059
just like everybody's done a lot of

1507
00:54:09,059 --> 00:54:11,099
great research already on

1508
00:54:11,099 --> 00:54:12,540
um you know kind of great tool Dev

1509
00:54:12,540 --> 00:54:13,920
that's out there so just reading other

1510
00:54:13,920 --> 00:54:15,900
people's projects right taking a look at

1511
00:54:15,900 --> 00:54:17,220
their projects and and what could be

1512
00:54:17,220 --> 00:54:19,079
changed and things like that so and

1513
00:54:19,079 --> 00:54:20,640
playing with like Defender check right

1514
00:54:20,640 --> 00:54:22,559
just saying okay like I just pulled down

1515
00:54:22,559 --> 00:54:24,540
rubius it's attacking this okay what can

1516
00:54:24,540 --> 00:54:26,280
I change in this this uh this tool right

1517
00:54:26,280 --> 00:54:28,079
so a lot of it came down to just

1518
00:54:28,079 --> 00:54:29,700
experience and just kind of playing with

1519
00:54:29,700 --> 00:54:30,780
kind of visual studio in the different

1520
00:54:30,780 --> 00:54:32,640
projects to like okay I can change these

1521
00:54:32,640 --> 00:54:35,058
type of things

1522
00:54:35,940 --> 00:54:38,460
other questions

1523
00:54:38,460 --> 00:54:41,040
uh so the question was Eagles or cobras

1524
00:54:41,040 --> 00:54:43,980
so our team plays a lot of Halo and uh

1525
00:54:43,980 --> 00:54:45,599
the new Halo there's like team Eagles

1526
00:54:45,599 --> 00:54:47,460
and team cobras uh always team Eagles

1527
00:54:47,460 --> 00:54:50,400
forever uh yeah you know team Eagles

1528
00:54:50,400 --> 00:54:52,140
forever so

1529
00:54:52,140 --> 00:54:54,740
all right

1530
00:54:55,920 --> 00:54:57,240
all right now we're getting the weeds

1531
00:54:57,240 --> 00:54:59,660
all right

1532
00:54:59,819 --> 00:55:01,950
all right oh

1533
00:55:01,950 --> 00:55:02,579
[Music]

1534
00:55:02,579 --> 00:55:04,579
um

1535
00:55:07,760 --> 00:55:10,319
okay another another great question so

1536
00:55:10,319 --> 00:55:11,640
if I were to rename one of the binaries

1537
00:55:11,640 --> 00:55:13,859
would I rename it Eagles or cobras uh

1538
00:55:13,859 --> 00:55:15,660
for rubius I would name his cobras I

1539
00:55:15,660 --> 00:55:18,119
would want to get detected uh but uh

1540
00:55:18,119 --> 00:55:21,200
Eagle otherwise I do yeah Eagles so

1541
00:55:21,200 --> 00:55:25,220
I respectfully disagree

1542
00:55:25,559 --> 00:55:27,540
all right thank you everybody all right

1543
00:55:27,540 --> 00:55:29,300
thank you Brent very nice thank you

1544
00:55:29,300 --> 00:55:32,469
[Applause]

