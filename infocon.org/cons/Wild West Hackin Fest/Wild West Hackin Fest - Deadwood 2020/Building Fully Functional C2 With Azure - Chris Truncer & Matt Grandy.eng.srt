1
00:00:01,400 --> 00:00:06,619
I kind of had this weird way of dealing

2
00:00:04,759 --> 00:00:07,700
with people that are trying to start

3
00:00:06,620 --> 00:00:09,980
their own company

4
00:00:07,700 --> 00:00:12,500
I've sat down and talked to Tim Madine

5
00:00:09,980 --> 00:00:14,750
and I've talked with Chris and Matt to

6
00:00:12,500 --> 00:00:16,730
seyn a bunch of people and the

7
00:00:14,750 --> 00:00:18,380
conversation always starts out the same

8
00:00:16,730 --> 00:00:20,720
any time somebody's like yeah I'd like

9
00:00:18,380 --> 00:00:22,160
sort of company and can I pretty please

10
00:00:20,720 --> 00:00:25,220
just like sit down and have some of your

11
00:00:22,160 --> 00:00:27,980
time to learn how to do that and almost

12
00:00:25,220 --> 00:00:31,130
universally I say yeah okay so to start

13
00:00:27,980 --> 00:00:34,040
don't trying to start a business looks

14
00:00:31,130 --> 00:00:35,899
like it's absolutely fantastic and the

15
00:00:34,040 --> 00:00:39,170
reality of this situation is a lot of

16
00:00:35,899 --> 00:00:41,719
late nights and a tremendous lack of

17
00:00:39,170 --> 00:00:43,160
sleep white-knuckle fear when you wake

18
00:00:41,719 --> 00:00:44,860
up in the morning almost every single

19
00:00:43,160 --> 00:00:46,910
morning for the first six years of

20
00:00:44,860 --> 00:00:48,320
running your company whenever you hire

21
00:00:46,910 --> 00:00:50,718
people you're constantly worried about

22
00:00:48,320 --> 00:00:53,570
hiring the right people hiring friends

23
00:00:50,719 --> 00:00:55,100
can be great it can be a pitfall but I

24
00:00:53,570 --> 00:00:56,750
go through all of the different trials

25
00:00:55,100 --> 00:00:59,480
and tribulations that Eric and I went

26
00:00:56,750 --> 00:01:00,980
through when we started BH is as in you

27
00:00:59,480 --> 00:01:03,648
know starting a company in the economic

28
00:01:00,980 --> 00:01:06,469
collapse of 2008 basically had something

29
00:01:03,649 --> 00:01:08,630
like $30,000 in credit card debt we were

30
00:01:06,469 --> 00:01:11,538
down to one vehicle that was a mouse

31
00:01:08,630 --> 00:01:13,399
infested then that I mean seriously we

32
00:01:11,539 --> 00:01:16,670
put down now sticky trap so he kept like

33
00:01:13,399 --> 00:01:18,889
12 or 13 mice and night it was it was

34
00:01:16,670 --> 00:01:22,099
insane and everything was just

35
00:01:18,889 --> 00:01:23,060
absolutely falling apart and really

36
00:01:22,099 --> 00:01:25,819
starting to think that it was an

37
00:01:23,060 --> 00:01:28,130
incredibly bad idea to to start this

38
00:01:25,819 --> 00:01:30,049
company and to try to kick it off but

39
00:01:28,130 --> 00:01:31,759
slowly things started happening you know

40
00:01:30,049 --> 00:01:33,909
we started getting more Sans conferences

41
00:01:31,759 --> 00:01:38,090
and started getting contract gigs and

42
00:01:33,909 --> 00:01:39,499
over time it got better but I think it's

43
00:01:38,090 --> 00:01:40,429
always important whenever you talk to

44
00:01:39,499 --> 00:01:42,439
somebody that's trying to start a

45
00:01:40,429 --> 00:01:45,139
business to let them know that they

46
00:01:42,439 --> 00:01:46,639
should not start their own business it

47
00:01:45,139 --> 00:01:49,158
is absolutely terrifying and it's

48
00:01:46,639 --> 00:01:52,339
horrible and it's evil and then I kind

49
00:01:49,159 --> 00:01:54,049
of sit and I wait and get a feel for

50
00:01:52,340 --> 00:01:55,219
what that person's thinking and I've

51
00:01:54,049 --> 00:01:56,329
actually talked to some people that were

52
00:01:55,219 --> 00:01:59,298
talking about starting their own

53
00:01:56,329 --> 00:02:01,818
business and they had no idea on how to

54
00:01:59,299 --> 00:02:04,819
get work we had no idea for templates

55
00:02:01,819 --> 00:02:06,619
they had no idea about insurance and the

56
00:02:04,819 --> 00:02:07,939
correct answer whenever you're talking

57
00:02:06,619 --> 00:02:11,460
with me about starting your own business

58
00:02:07,939 --> 00:02:14,280
is to go away and just don't do that

59
00:02:11,460 --> 00:02:16,530
chris is one of those people that after

60
00:02:14,280 --> 00:02:19,500
I gave him the whole long spiel about

61
00:02:16,530 --> 00:02:21,360
how hard it is to start a company he was

62
00:02:19,500 --> 00:02:24,090
still there and he was excited and he

63
00:02:21,360 --> 00:02:26,070
was willing to do the things that

64
00:02:24,090 --> 00:02:28,710
absolutely needed to be done and you

65
00:02:26,070 --> 00:02:31,980
know face the pear hole I suppose and do

66
00:02:28,710 --> 00:02:34,110
it without loss of enthusiasm and never

67
00:02:31,980 --> 00:02:35,730
once have I seen him lose the smile on

68
00:02:34,110 --> 00:02:38,670
his face for all the things that he's

69
00:02:35,730 --> 00:02:40,590
done we are very proud fact that we get

70
00:02:38,670 --> 00:02:42,780
to work with Chris and his team I am

71
00:02:40,590 --> 00:02:44,580
very proud of the fact that I can say

72
00:02:42,780 --> 00:02:48,180
that Chris is somebody that we

73
00:02:44,580 --> 00:02:50,850
absolutely work with and our people go

74
00:02:48,180 --> 00:02:52,800
and do his training it is without

75
00:02:50,850 --> 00:02:55,440
question one of the better relationships

76
00:02:52,800 --> 00:02:57,840
4bh is on a professional level but also

77
00:02:55,440 --> 00:02:58,770
on a personal level you couldn't find a

78
00:02:57,840 --> 00:03:01,140
better person

79
00:02:58,770 --> 00:03:02,460
to be partnered up with and I know that

80
00:03:01,140 --> 00:03:04,529
he's had white knuckle feared

81
00:03:02,460 --> 00:03:06,570
Knights I know that he's been afraid and

82
00:03:04,530 --> 00:03:08,190
we've been trying our best to kind of

83
00:03:06,570 --> 00:03:10,109
help each other through being small

84
00:03:08,190 --> 00:03:11,790
businesses and trying to navigate the

85
00:03:10,110 --> 00:03:15,210
waters of information security

86
00:03:11,790 --> 00:03:17,250
pentesting so with that I'm very happy

87
00:03:15,210 --> 00:03:18,660
to announce Chris and Matt and they're

88
00:03:17,250 --> 00:03:20,820
gonna be talking about building a fully

89
00:03:18,660 --> 00:03:23,250
functional command and control with the

90
00:03:20,820 --> 00:03:25,890
juror so Chris is your mic fired up and

91
00:03:23,250 --> 00:03:27,300
ready to go sir yes sir I am ready all

92
00:03:25,890 --> 00:03:29,130
right we'll take it away thank you so

93
00:03:27,300 --> 00:03:30,690
much thank you so much John thank you

94
00:03:29,130 --> 00:03:32,549
for those kind words and I think the

95
00:03:30,690 --> 00:03:34,680
biggest thing I took away at that is at

96
00:03:32,550 --> 00:03:37,050
least finally after six years I can stop

97
00:03:34,680 --> 00:03:40,080
having as much fear at least every day

98
00:03:37,050 --> 00:03:42,090
when I wake up thank you again for the

99
00:03:40,080 --> 00:03:43,740
introduction myself and Matt green

100
00:03:42,090 --> 00:03:46,080
you're here and we are here to talk

101
00:03:43,740 --> 00:03:47,400
about as your functions these are what I

102
00:03:46,080 --> 00:03:49,050
would saying probably the two least

103
00:03:47,400 --> 00:03:50,520
important slides you're about to see

104
00:03:49,050 --> 00:03:51,990
because we're gonna get into the content

105
00:03:50,520 --> 00:03:54,120
shortly but just to give some background

106
00:03:51,990 --> 00:03:57,060
why we feel like we can talk about this

107
00:03:54,120 --> 00:03:58,770
is ah my name is Chris hunter I'm one of

108
00:03:57,060 --> 00:04:01,320
the cofounders of a security company

109
00:03:58,770 --> 00:04:03,300
called 40 north security I am our

110
00:04:01,320 --> 00:04:05,700
offensive security lead I've started as

111
00:04:03,300 --> 00:04:08,460
a sysadmin played with servers for quite

112
00:04:05,700 --> 00:04:10,079
some time and I've slowly learned over

113
00:04:08,460 --> 00:04:12,030
my career to try to write some code and

114
00:04:10,080 --> 00:04:14,250
hopefully make sure that it that it

115
00:04:12,030 --> 00:04:16,108
works I like to contribute a lot of code

116
00:04:14,250 --> 00:04:18,209
back to open-source community so I've

117
00:04:16,108 --> 00:04:20,310
worked on projects like Vale I witness

118
00:04:18,209 --> 00:04:22,590
women in plan in a couple other one it's

119
00:04:20,310 --> 00:04:24,210
what I like to do and I enjoy coding

120
00:04:22,590 --> 00:04:24,710
Matt I'll turn it over to you real quick

121
00:04:24,210 --> 00:04:27,620
my

122
00:04:24,710 --> 00:04:29,960
aimes man granny I'm a senior offensive

123
00:04:27,620 --> 00:04:33,949
security engineer at forty North I came

124
00:04:29,960 --> 00:04:36,138
on 240 North who probably half a year

125
00:04:33,949 --> 00:04:37,099
ago now something like that I've loved

126
00:04:36,139 --> 00:04:40,099
it here ever since

127
00:04:37,099 --> 00:04:43,009
I say I'm a Python c-sharp developer

128
00:04:40,099 --> 00:04:45,250
with quotes because I'm I'm not good at

129
00:04:43,009 --> 00:04:48,410
all I think Google and Stack Overflow

130
00:04:45,250 --> 00:04:49,849
saved my life every day but I'm working

131
00:04:48,410 --> 00:04:51,530
on it and you know getting better every

132
00:04:49,849 --> 00:04:54,380
day with that and and love doing that

133
00:04:51,530 --> 00:04:56,599
that developer work as well and living

134
00:04:54,380 --> 00:04:59,180
in Colorado I have to say that I love

135
00:04:56,599 --> 00:05:01,400
the outdoors and and I love backpacking

136
00:04:59,180 --> 00:05:02,960
and and all that stuff as well yeah

137
00:05:01,400 --> 00:05:05,210
that's fair I think all of us are pretty

138
00:05:02,960 --> 00:05:07,099
merely smile included a Google Stack

139
00:05:05,210 --> 00:05:08,750
Overflow and github just praying someone

140
00:05:07,099 --> 00:05:11,300
else has some code that I can use so I

141
00:05:08,750 --> 00:05:13,220
feel you there all right so let's talk

142
00:05:11,300 --> 00:05:16,099
what does this talk about we're gonna

143
00:05:13,220 --> 00:05:17,720
dive in just not really dive in but talk

144
00:05:16,099 --> 00:05:19,699
at a high level about what is your is

145
00:05:17,720 --> 00:05:22,880
we're gonna talk or discuss red team

146
00:05:19,699 --> 00:05:25,460
infrastructure how it works and how it

147
00:05:22,880 --> 00:05:26,930
you can use it with integer and finally

148
00:05:25,460 --> 00:05:29,239
we're gonna discuss at a high level what

149
00:05:26,930 --> 00:05:31,280
does situ infrastructure look like what

150
00:05:29,240 --> 00:05:33,199
does the traffic flow from a victim

151
00:05:31,280 --> 00:05:36,138
system to all the way back to our

152
00:05:33,199 --> 00:05:38,509
command control server and can we

153
00:05:36,139 --> 00:05:40,400
replace redirect errs or can we replace

154
00:05:38,509 --> 00:05:42,169
them with something else so that's we're

155
00:05:40,400 --> 00:05:44,299
gonna discuss today amongst an extra

156
00:05:42,169 --> 00:05:46,460
section that Matt is gonna add in at the

157
00:05:44,300 --> 00:05:49,370
end that's a cool little trick so let's

158
00:05:46,460 --> 00:05:51,650
talk sure so as your is Microsoft's

159
00:05:49,370 --> 00:05:54,259
cloud service offering this is obviously

160
00:05:51,650 --> 00:05:57,440
a competitor to Amazon's AWS cloud

161
00:05:54,259 --> 00:05:59,240
services most people think about AWS or

162
00:05:57,440 --> 00:06:01,610
is your what sort of functionality do

163
00:05:59,240 --> 00:06:04,009
people usually think about a really any

164
00:06:01,610 --> 00:06:06,110
cloud provider what's usually always on

165
00:06:04,009 --> 00:06:08,630
capability if we need it right high

166
00:06:06,110 --> 00:06:10,280
availability I hope that my code that I

167
00:06:08,630 --> 00:06:12,259
have running somewhere or a server is

168
00:06:10,280 --> 00:06:13,729
never gonna go down that's not something

169
00:06:12,259 --> 00:06:15,740
that I should really have to worry about

170
00:06:13,729 --> 00:06:17,479
it now obviously that's not always the

171
00:06:15,740 --> 00:06:19,550
case but also along with that we are

172
00:06:17,479 --> 00:06:21,289
talking a lot about computing resources

173
00:06:19,550 --> 00:06:23,599
right like that's probably the first

174
00:06:21,289 --> 00:06:26,449
thing that I think of with really any

175
00:06:23,599 --> 00:06:29,599
sort of cloud provider out there is just

176
00:06:26,449 --> 00:06:32,900
the ability to offload servers or

177
00:06:29,599 --> 00:06:34,370
computers or virtual machines so people

178
00:06:32,900 --> 00:06:36,840
probably are used to seeing something

179
00:06:34,370 --> 00:06:38,580
like this if you've ever used a sure

180
00:06:36,840 --> 00:06:40,349
long story short this is just basically

181
00:06:38,580 --> 00:06:42,810
what you're going to see I'm looking at

182
00:06:40,350 --> 00:06:44,700
the status of a specific virtual machine

183
00:06:42,810 --> 00:06:48,510
that you have running within a sure

184
00:06:44,700 --> 00:06:50,580
obviously ec2 and Amazon has their own

185
00:06:48,510 --> 00:06:52,169
portal page that you would use to as

186
00:06:50,580 --> 00:06:53,760
well but that's not to focus what we're

187
00:06:52,169 --> 00:06:55,620
talking about today so computing is

188
00:06:53,760 --> 00:06:57,510
really the first capability that most

189
00:06:55,620 --> 00:06:58,980
people associate with cloud service if

190
00:06:57,510 --> 00:07:00,300
that's not true then that's at least for

191
00:06:58,980 --> 00:07:02,940
everyone that's at least true for me

192
00:07:00,300 --> 00:07:04,440
that's what I usually look to it's

193
00:07:02,940 --> 00:07:07,500
typically going to be a core offering of

194
00:07:04,440 --> 00:07:09,270
every cloud provider as well but the

195
00:07:07,500 --> 00:07:11,790
good thing to note is that there's a lot

196
00:07:09,270 --> 00:07:13,770
more out there than that that assure and

197
00:07:11,790 --> 00:07:16,200
other providers can offer obviously

198
00:07:13,770 --> 00:07:18,090
storage is one storage is also something

199
00:07:16,200 --> 00:07:20,370
that people can miss configure as

200
00:07:18,090 --> 00:07:22,710
everyone is aware you can always

201
00:07:20,370 --> 00:07:24,210
encounter companies or always seen the

202
00:07:22,710 --> 00:07:27,120
news it seems like some company has left

203
00:07:24,210 --> 00:07:29,638
their s3 bucket in secure and accessible

204
00:07:27,120 --> 00:07:31,889
by everyone however when done properly

205
00:07:29,639 --> 00:07:33,840
you can legitimately store data in the

206
00:07:31,889 --> 00:07:35,760
cloud and have it fairly locked out

207
00:07:33,840 --> 00:07:37,888
there's also database services that you

208
00:07:35,760 --> 00:07:39,810
can use well another one that attackers

209
00:07:37,889 --> 00:07:41,340
and offensive security professionals

210
00:07:39,810 --> 00:07:44,220
have started to really dive into

211
00:07:41,340 --> 00:07:47,429
recently our CDN or content delivery

212
00:07:44,220 --> 00:07:50,669
networks assure is super useful because

213
00:07:47,430 --> 00:07:54,150
it can provide you access to multiple CD

214
00:07:50,669 --> 00:07:56,280
ends so Microsoft has their own content

215
00:07:54,150 --> 00:07:58,349
delivery network you can also use

216
00:07:56,280 --> 00:08:00,150
Verizon's content delivery network

217
00:07:58,350 --> 00:08:01,919
straight through sir the other

218
00:08:00,150 --> 00:08:03,870
interesting one is Akamai when I was

219
00:08:01,919 --> 00:08:05,940
looking a while ago to try to figure out

220
00:08:03,870 --> 00:08:08,280
how can i leverage Akamai for domain

221
00:08:05,940 --> 00:08:10,800
fronting or to just legitimately use the

222
00:08:08,280 --> 00:08:13,109
CDN I was trying to find online like

223
00:08:10,800 --> 00:08:15,090
places that I can register for it Akamai

224
00:08:13,110 --> 00:08:17,010
zone site or other resellers of access

225
00:08:15,090 --> 00:08:20,429
to the cen and it seemed either

226
00:08:17,010 --> 00:08:22,590
incredibly hard to become a part of like

227
00:08:20,430 --> 00:08:24,210
you had to basically upfront pay a lot

228
00:08:22,590 --> 00:08:27,060
of money to have these services on

229
00:08:24,210 --> 00:08:28,530
retainer or I just it wasn't easy to

230
00:08:27,060 --> 00:08:30,900
figure out like how to disdain access to

231
00:08:28,530 --> 00:08:33,029
the service and I just happen to look on

232
00:08:30,900 --> 00:08:35,549
Microsoft's as your earth excuse me on

233
00:08:33,029 --> 00:08:37,320
as your to check out the different CDN

234
00:08:35,549 --> 00:08:39,240
provider so you can select from and lo

235
00:08:37,320 --> 00:08:41,550
and behold Akamai is actually one of

236
00:08:39,240 --> 00:08:43,440
them you're ever looking to use a CDN

237
00:08:41,549 --> 00:08:45,780
especially from an offensive 3d

238
00:08:43,440 --> 00:08:47,400
perspective my other concern was what's

239
00:08:45,780 --> 00:08:48,630
the cost of this going to be I'm sending

240
00:08:47,400 --> 00:08:50,670
traffic back and forth when I'm

241
00:08:48,630 --> 00:08:51,930
performing my assessments what

242
00:08:50,670 --> 00:08:53,699
what am I looking at price range wise

243
00:08:51,930 --> 00:08:56,849
and remember the first time I used

244
00:08:53,700 --> 00:08:58,650
Akamai I was a little worried cuz I had

245
00:08:56,850 --> 00:09:00,090
no idea what it was but I wanted to I

246
00:08:58,650 --> 00:09:01,620
was gonna heat the cost whatever was

247
00:09:00,090 --> 00:09:03,480
because I would I need to know what sort

248
00:09:01,620 --> 00:09:06,060
of price range or Enid look at when

249
00:09:03,480 --> 00:09:07,830
using these and after about a month pass

250
00:09:06,060 --> 00:09:09,239
and a successful test where we were

251
00:09:07,830 --> 00:09:11,100
sending a lot of data back and forth

252
00:09:09,240 --> 00:09:13,920
finally got the bill and I think it was

253
00:09:11,100 --> 00:09:15,840
like 73 cents so it's it's incredibly

254
00:09:13,920 --> 00:09:17,699
cheap to use and assure makes it very

255
00:09:15,840 --> 00:09:20,100
accessible so I would highly recommend

256
00:09:17,700 --> 00:09:22,560
checking that out if you're looking to

257
00:09:20,100 --> 00:09:24,930
gain access to that see ya so why do we

258
00:09:22,560 --> 00:09:28,219
care about CD ends though well let's

259
00:09:24,930 --> 00:09:31,050
talk a high level c2 attacker tradecraft

260
00:09:28,220 --> 00:09:32,370
so here's a my personal example of a

261
00:09:31,050 --> 00:09:34,620
person that doesn't know how to use

262
00:09:32,370 --> 00:09:37,590
vizio trying to make a document a

263
00:09:34,620 --> 00:09:40,410
graphic through it but uh typically the

264
00:09:37,590 --> 00:09:42,120
way c2 traffic is usually done and most

265
00:09:40,410 --> 00:09:44,400
people may already know this is when a

266
00:09:42,120 --> 00:09:46,380
system is compromised it obviously works

267
00:09:44,400 --> 00:09:48,510
this way force to the firewall and the

268
00:09:46,380 --> 00:09:50,910
goal is obviously to get back to the d2

269
00:09:48,510 --> 00:09:52,620
server that the attacker controls well

270
00:09:50,910 --> 00:09:54,030
if we're doing this properly the last

271
00:09:52,620 --> 00:09:55,800
thing that we ever want to do is have a

272
00:09:54,030 --> 00:09:57,360
direct connection straight from the

273
00:09:55,800 --> 00:09:59,430
system that's compromised directly to

274
00:09:57,360 --> 00:10:02,010
the team server you generally want to

275
00:09:59,430 --> 00:10:04,770
hide your a team server whatever your

276
00:10:02,010 --> 00:10:06,960
end c2 server is that you're using from

277
00:10:04,770 --> 00:10:08,579
the victim system because it there's a

278
00:10:06,960 --> 00:10:10,530
lot of ramifications that can come from

279
00:10:08,580 --> 00:10:12,390
it we're talking their investigations

280
00:10:10,530 --> 00:10:14,699
into it we're talking about straight-up

281
00:10:12,390 --> 00:10:16,790
blocking that traffic there's a bunch of

282
00:10:14,700 --> 00:10:18,050
things you'd have to account for

283
00:10:16,790 --> 00:10:20,000
so the normal way that most people

284
00:10:18,050 --> 00:10:22,849
typically establish command and control

285
00:10:20,000 --> 00:10:24,140
is they will have the victim system go

286
00:10:22,850 --> 00:10:26,360
once it goes through the firewall

287
00:10:24,140 --> 00:10:28,160
through something called like a redirect

288
00:10:26,360 --> 00:10:30,800
ER and this can be a dumb redirector

289
00:10:28,160 --> 00:10:33,920
such as like iptables where any traffic

290
00:10:30,800 --> 00:10:36,560
that comes in on let's say port 443 for

291
00:10:33,920 --> 00:10:38,870
HTTPS is going to be is going to be

292
00:10:36,560 --> 00:10:40,579
immediately redirected to the team

293
00:10:38,870 --> 00:10:42,200
server and then whenever the team server

294
00:10:40,580 --> 00:10:45,260
responds it goes back through that

295
00:10:42,200 --> 00:10:46,910
redirector back to that victim PC you

296
00:10:45,260 --> 00:10:48,560
can have something such as a smart

297
00:10:46,910 --> 00:10:50,750
redirector where maybe you are using

298
00:10:48,560 --> 00:10:53,479
apache rewrite rules maybe you have

299
00:10:50,750 --> 00:10:55,400
nginx configured to look for incoming

300
00:10:53,480 --> 00:10:57,740
web requests and then route them

301
00:10:55,400 --> 00:11:00,110
appropriately to the team server only if

302
00:10:57,740 --> 00:11:01,550
it is a legitimate request from a system

303
00:11:00,110 --> 00:11:03,860
that you have compromised if there's

304
00:11:01,550 --> 00:11:05,900
anything that's off about that request

305
00:11:03,860 --> 00:11:08,000
send it to some other third party site

306
00:11:05,900 --> 00:11:09,860
so that's obviously we're applying some

307
00:11:08,000 --> 00:11:11,930
logic to the rules in the way that

308
00:11:09,860 --> 00:11:13,730
traffic is sent well a couple years ago

309
00:11:11,930 --> 00:11:16,339
this concept of domain fronting came out

310
00:11:13,730 --> 00:11:18,530
and it's it's pretty awesome I think

311
00:11:16,340 --> 00:11:20,300
most assessments that we do today we are

312
00:11:18,530 --> 00:11:22,010
using domain fronting I think most

313
00:11:20,300 --> 00:11:23,510
people that I've worked with also like

314
00:11:22,010 --> 00:11:25,730
to use them in fronting and the nice

315
00:11:23,510 --> 00:11:28,970
thing about that is we can use highly

316
00:11:25,730 --> 00:11:30,890
reputable domains to basically send our

317
00:11:28,970 --> 00:11:32,840
command and control traffic to our team

318
00:11:30,890 --> 00:11:35,449
server in the way that we're able to do

319
00:11:32,840 --> 00:11:38,090
that is by taking advantage of how CDN

320
00:11:35,450 --> 00:11:39,350
it works we're gonna get into a slide

321
00:11:38,090 --> 00:11:41,330
discussing that at high level real

322
00:11:39,350 --> 00:11:44,000
quickly but the big takeaway from this

323
00:11:41,330 --> 00:11:45,800
is domain fronting can act as our own

324
00:11:44,000 --> 00:11:48,080
redirector in that case as well we don't

325
00:11:45,800 --> 00:11:50,930
actually need a a physical server or a

326
00:11:48,080 --> 00:11:53,180
virtual server to forward our traffic

327
00:11:50,930 --> 00:11:55,310
the the cloud the content delivery

328
00:11:53,180 --> 00:11:57,530
network can do that for us so domain

329
00:11:55,310 --> 00:12:00,319
fronting lets us use highly reputable

330
00:11:57,530 --> 00:12:02,480
domains to hide our c2 traffic so it's

331
00:12:00,320 --> 00:12:05,030
great because we can have our victim

332
00:12:02,480 --> 00:12:07,270
system look like it's making a web a web

333
00:12:05,030 --> 00:12:10,370
request to a sub domain of cnn.com

334
00:12:07,270 --> 00:12:12,250
Microsoft com any basically highly

335
00:12:10,370 --> 00:12:14,750
reputable domain that you can think of

336
00:12:12,250 --> 00:12:17,180
however because of the way that the host

337
00:12:14,750 --> 00:12:18,770
header works in the web request when

338
00:12:17,180 --> 00:12:20,660
that request gets to the content

339
00:12:18,770 --> 00:12:22,340
delivery network rather than going to

340
00:12:20,660 --> 00:12:24,290
the legitimate location that it's

341
00:12:22,340 --> 00:12:26,750
supposed to go to we can basically

342
00:12:24,290 --> 00:12:29,510
hijack that request and have it sent to

343
00:12:26,750 --> 00:12:30,649
our malicious server that way the cloud

344
00:12:29,510 --> 00:12:32,209
or the CDN excuse

345
00:12:30,649 --> 00:12:34,519
is basically acting as their own

346
00:12:32,209 --> 00:12:37,008
redirector this is nice because it

347
00:12:34,519 --> 00:12:40,220
eliminates the need for a virtual system

348
00:12:37,009 --> 00:12:42,619
and the reputable domain and the CDN

349
00:12:40,220 --> 00:12:44,449
itself really is our own redirector in

350
00:12:42,619 --> 00:12:46,639
the space so if we're going to look at

351
00:12:44,449 --> 00:12:48,469
how this works again relatively high

352
00:12:46,639 --> 00:12:50,869
level in this case we have our victim

353
00:12:48,470 --> 00:12:53,990
system that is making a web request to

354
00:12:50,869 --> 00:12:56,329
CNN tech live out front dock or cnn.com

355
00:12:53,990 --> 00:12:57,920
when this hits the CDN if we have not

356
00:12:56,329 --> 00:12:59,839
modified the host header in any way and

357
00:12:57,920 --> 00:13:02,179
it's a legitimate request it would go

358
00:12:59,839 --> 00:13:04,189
the cloud excusing the CDN would just

359
00:13:02,179 --> 00:13:07,129
forward it on to the actual server owned

360
00:13:04,189 --> 00:13:09,248
by CNN or the endpoint owned by CNN and

361
00:13:07,129 --> 00:13:12,139
the content will come back like normal

362
00:13:09,249 --> 00:13:13,999
however if we modify our request and

363
00:13:12,139 --> 00:13:16,339
actually change it to point to our

364
00:13:13,999 --> 00:13:18,619
malicious server it'll still look like

365
00:13:16,339 --> 00:13:21,559
from a web request perspective that this

366
00:13:18,619 --> 00:13:24,619
victim system made a request to CNN Tech

367
00:13:21,559 --> 00:13:26,809
live dodd-frank comm but with the host

368
00:13:24,619 --> 00:13:29,179
header sending it to a different c2

369
00:13:26,809 --> 00:13:32,029
server specifically in this case attack

370
00:13:29,179 --> 00:13:34,100
your endpoint claw front on net the CN

371
00:13:32,029 --> 00:13:36,709
is going to send it over to our server

372
00:13:34,100 --> 00:13:38,870
where we can stage commands so we can

373
00:13:36,709 --> 00:13:41,268
tell the victim system to return us a

374
00:13:38,870 --> 00:13:43,730
process listing take a screen shot let's

375
00:13:41,269 --> 00:13:46,370
download a file the big thing is we are

376
00:13:43,730 --> 00:13:49,370
just leveraging legitimate functionality

377
00:13:46,370 --> 00:13:51,439
and how a CDN works to make sure that

378
00:13:49,370 --> 00:13:54,709
the web traffic goes to us instead of

379
00:13:51,439 --> 00:13:57,860
the real location all while using the

380
00:13:54,709 --> 00:14:00,170
highly reputable domain as our c2 domain

381
00:13:57,860 --> 00:14:02,269
so domain fronting gives us the ability

382
00:14:00,170 --> 00:14:04,160
to use again highly reputable domains

383
00:14:02,269 --> 00:14:05,540
for c2 another takeaway is that

384
00:14:04,160 --> 00:14:07,999
eliminates the need for an actual

385
00:14:05,540 --> 00:14:10,009
redirect or system we can build in

386
00:14:07,999 --> 00:14:12,259
special rules to help filter incoming

387
00:14:10,009 --> 00:14:13,939
requests Steve boards actually written a

388
00:14:12,259 --> 00:14:15,949
bunch of great blog post on using Azure

389
00:14:13,939 --> 00:14:18,709
and the premium functionality of your

390
00:14:15,949 --> 00:14:21,559
CDN to write rules do you can almost

391
00:14:18,709 --> 00:14:23,599
make a smart redirector similar to

392
00:14:21,559 --> 00:14:25,699
Apache rewrite rules or different nginx

393
00:14:23,600 --> 00:14:28,399
configurations all within the CDN to

394
00:14:25,699 --> 00:14:30,920
filter traffic based upon the incoming

395
00:14:28,399 --> 00:14:32,720
requests the nice thing is it's not a

396
00:14:30,920 --> 00:14:35,269
single server system that can go down

397
00:14:32,720 --> 00:14:36,740
and break all of your comps between you

398
00:14:35,269 --> 00:14:38,660
and the systems that you've compromised

399
00:14:36,740 --> 00:14:40,160
you have a single system close to summer

400
00:14:38,660 --> 00:14:41,709
and that's handling all your traffic and

401
00:14:40,160 --> 00:14:43,980
for whatever reason it gets corrupt

402
00:14:41,709 --> 00:14:46,290
until you change

403
00:14:43,980 --> 00:14:48,750
DNS records and stayin up another server

404
00:14:46,290 --> 00:14:50,219
all comms are down that's really not the

405
00:14:48,750 --> 00:14:52,860
case with the CDM because there's not a

406
00:14:50,220 --> 00:14:55,890
single system that the CDN resides on

407
00:14:52,860 --> 00:14:57,570
it's in the cloud well so with speaking

408
00:14:55,890 --> 00:14:59,520
of this there any really other cloud

409
00:14:57,570 --> 00:15:01,260
functionality that can give similar

410
00:14:59,520 --> 00:15:04,079
capabilities not necessarily maybe the

411
00:15:01,260 --> 00:15:06,360
same or maybe more or just something

412
00:15:04,080 --> 00:15:09,090
close to it as your functions can

413
00:15:06,360 --> 00:15:11,550
present another option for people out

414
00:15:09,090 --> 00:15:15,240
here let's talk about a juror function

415
00:15:11,550 --> 00:15:18,209
the what are the observer functions you

416
00:15:15,240 --> 00:15:21,870
can think of R as serverless code right

417
00:15:18,210 --> 00:15:24,150
so this is Microsoft Azure version of aw

418
00:15:21,870 --> 00:15:26,280
slander they are event-driven functions

419
00:15:24,150 --> 00:15:28,740
which do something so you provide code

420
00:15:26,280 --> 00:15:30,720
and it will run your code it will run

421
00:15:28,740 --> 00:15:32,460
whatever function that you provide the

422
00:15:30,720 --> 00:15:35,070
nice thing about using their functions

423
00:15:32,460 --> 00:15:36,720
is that they support a wide rank range

424
00:15:35,070 --> 00:15:38,730
of languages for you to develop

425
00:15:36,720 --> 00:15:43,290
something in so we're talking c-sharp

426
00:15:38,730 --> 00:15:44,130
Python PowerShell node JavaScript PHP I

427
00:15:43,290 --> 00:15:47,219
think there are a couple other options

428
00:15:44,130 --> 00:15:49,200
as well before talking about trying to

429
00:15:47,220 --> 00:15:51,630
replace the redirector or Howry

430
00:15:49,200 --> 00:15:53,730
directors work right now why should we

431
00:15:51,630 --> 00:15:56,280
have to deploy an entire virtual machine

432
00:15:53,730 --> 00:15:59,400
so stain up our own virtual server that

433
00:15:56,280 --> 00:16:02,730
just does Apache smart rewrite rules or

434
00:15:59,400 --> 00:16:04,560
is a dumb redirector with IP tables why

435
00:16:02,730 --> 00:16:06,990
stand of an entire virtual machine a

436
00:16:04,560 --> 00:16:10,199
virtual server somewhere to form that

437
00:16:06,990 --> 00:16:13,020
role when all we need is really 25 lines

438
00:16:10,200 --> 00:16:15,060
of Python code that can perform the same

439
00:16:13,020 --> 00:16:17,069
exact functionality well the nice thing

440
00:16:15,060 --> 00:16:19,140
is all we need to do is write that code

441
00:16:17,070 --> 00:16:21,390
which conducts any action that we need

442
00:16:19,140 --> 00:16:23,880
it to perform and then have a trigger

443
00:16:21,390 --> 00:16:26,370
which invokes our function or code to

444
00:16:23,880 --> 00:16:28,680
run we can do that with azure of

445
00:16:26,370 --> 00:16:30,480
functions we think of what a redirector

446
00:16:28,680 --> 00:16:32,609
needs to do right what does it need to

447
00:16:30,480 --> 00:16:34,140
do so as a request comes in it just

448
00:16:32,610 --> 00:16:36,150
forwards that request on to the team

449
00:16:34,140 --> 00:16:38,040
server and then it receives the response

450
00:16:36,150 --> 00:16:40,199
and sends it back to the victim system

451
00:16:38,040 --> 00:16:41,430
so it's pretty easy or I'm a Python

452
00:16:40,200 --> 00:16:44,640
coding or really any language

453
00:16:41,430 --> 00:16:47,760
perspective to write code that receives

454
00:16:44,640 --> 00:16:49,890
an incoming web request makes another

455
00:16:47,760 --> 00:16:52,200
web request and then once it receives

456
00:16:49,890 --> 00:16:53,880
that responsive returns that responds to

457
00:16:52,200 --> 00:16:56,350
the original request we're kind of

458
00:16:53,880 --> 00:16:59,110
almost man-in-the-middle een our own

459
00:16:56,350 --> 00:17:00,640
request but not really well we have code

460
00:16:59,110 --> 00:17:01,870
that can accomplish that the next

461
00:17:00,640 --> 00:17:03,640
question would be well how can we

462
00:17:01,870 --> 00:17:05,349
trigger it well thankfully a juror

463
00:17:03,640 --> 00:17:08,440
functions have a lot of different

464
00:17:05,349 --> 00:17:09,790
options for you to trigger your code one

465
00:17:08,440 --> 00:17:11,440
of the hard things with functions if

466
00:17:09,790 --> 00:17:14,050
when it comes to trying to deploy them

467
00:17:11,440 --> 00:17:17,680
is to packaging it up in a way that's

468
00:17:14,050 --> 00:17:19,419
digestible visor and making it easy to

469
00:17:17,680 --> 00:17:21,820
just like throw it all in a zip and

470
00:17:19,420 --> 00:17:24,460
upload it to a shirt well thankfully

471
00:17:21,819 --> 00:17:26,490
Microsoft writes software obviously that

472
00:17:24,460 --> 00:17:29,380
most people probably know called vs code

473
00:17:26,490 --> 00:17:33,100
visual studio code makes it incredibly

474
00:17:29,380 --> 00:17:36,550
easy to package your as your function

475
00:17:33,100 --> 00:17:39,010
code in a format that works for sure and

476
00:17:36,550 --> 00:17:41,139
uploads it to assure itself like all you

477
00:17:39,010 --> 00:17:43,629
basically need to do is click a single

478
00:17:41,140 --> 00:17:45,310
button total to deploy and then vias

479
00:17:43,630 --> 00:17:48,220
code will handle everything else and get

480
00:17:45,310 --> 00:17:50,290
it uploaded into Azure and get your code

481
00:17:48,220 --> 00:17:51,970
running there are multiple triggers that

482
00:17:50,290 --> 00:17:54,730
you can use like I mentioned anytime a

483
00:17:51,970 --> 00:17:57,250
trigger hits and is basically run or

484
00:17:54,730 --> 00:17:59,470
invoked that trigger will then target

485
00:17:57,250 --> 00:18:01,090
your function and tell it to run so

486
00:17:59,470 --> 00:18:03,220
here's just a quick example or just a

487
00:18:01,090 --> 00:18:05,129
show Visual Studio code as everyone

488
00:18:03,220 --> 00:18:08,380
knows probably has large number of

489
00:18:05,130 --> 00:18:10,360
different functionality or plugins that

490
00:18:08,380 --> 00:18:12,820
you can add to it one of them being an

491
00:18:10,360 --> 00:18:15,250
official plugin from Microsoft Azure

492
00:18:12,820 --> 00:18:17,050
they have one specifically for functions

493
00:18:15,250 --> 00:18:18,640
do you ever want to play with the share

494
00:18:17,050 --> 00:18:20,950
of functions and test out deploying

495
00:18:18,640 --> 00:18:22,270
function code into Azure

496
00:18:20,950 --> 00:18:23,680
this would be what you want to use

497
00:18:22,270 --> 00:18:25,780
because all you need to do is just

498
00:18:23,680 --> 00:18:28,390
install it you can ask you to log into

499
00:18:25,780 --> 00:18:30,460
yours your account and then you'll be

500
00:18:28,390 --> 00:18:31,900
provided with options with just a single

501
00:18:30,460 --> 00:18:34,390
button up here that all you need to do

502
00:18:31,900 --> 00:18:36,580
is click it and it will push your code

503
00:18:34,390 --> 00:18:37,690
into Azure so kept talking about

504
00:18:36,580 --> 00:18:39,340
different triggers that are available

505
00:18:37,690 --> 00:18:41,230
let's discuss some of these like how

506
00:18:39,340 --> 00:18:42,699
these work there are multiple triggers

507
00:18:41,230 --> 00:18:45,010
that you can choose from when building

508
00:18:42,700 --> 00:18:46,060
yours your function to require piece of

509
00:18:45,010 --> 00:18:47,560
your function you can't just write

510
00:18:46,060 --> 00:18:49,570
function code that is never triggered

511
00:18:47,560 --> 00:18:51,100
something it's basically like a piece

512
00:18:49,570 --> 00:18:52,810
that has to go along with it you have to

513
00:18:51,100 --> 00:18:55,000
provide some sort of a trigger that

514
00:18:52,810 --> 00:18:57,040
exists that will cause it to be invoked

515
00:18:55,000 --> 00:18:59,260
timers are an option you can kind of

516
00:18:57,040 --> 00:19:01,720
think of this as a scheduled task that

517
00:18:59,260 --> 00:19:04,270
will that is scheduled to run you're a

518
00:19:01,720 --> 00:19:07,300
function at a specific time or day or

519
00:19:04,270 --> 00:19:09,820
something like that you have blob

520
00:19:07,300 --> 00:19:12,220
storage as a measure of function or

521
00:19:09,820 --> 00:19:15,100
you can have your your functional code

522
00:19:12,220 --> 00:19:17,470
run anytime as your blob files are

523
00:19:15,100 --> 00:19:20,379
written or modified or some store some

524
00:19:17,470 --> 00:19:22,359
how storage data is the one that we're

525
00:19:20,379 --> 00:19:24,488
going to use in this case is an HTTP

526
00:19:22,359 --> 00:19:26,739
trigger this is probably at least in my

527
00:19:24,489 --> 00:19:27,850
opinion one of the easiest triggers that

528
00:19:26,739 --> 00:19:30,009
you can work with right

529
00:19:27,850 --> 00:19:32,978
whenever a web request comes in to a

530
00:19:30,009 --> 00:19:34,389
specific URL that can invoke your code

531
00:19:32,979 --> 00:19:35,580
nothing you can probably see where we're

532
00:19:34,389 --> 00:19:38,168
going with this in relation to

533
00:19:35,580 --> 00:19:40,570
redirecting here's an example when you

534
00:19:38,169 --> 00:19:42,669
are creating it is your a function it'll

535
00:19:40,570 --> 00:19:44,590
ask you what type of trigger do you want

536
00:19:42,669 --> 00:19:46,239
to use you can pick in all of these

537
00:19:44,590 --> 00:19:47,949
different triggers here the one that we

538
00:19:46,239 --> 00:19:50,889
are using and probably what most people

539
00:19:47,950 --> 00:19:54,070
would use for a c2 platform if you will

540
00:19:50,889 --> 00:19:56,080
is going to be an HTTP trigger right

541
00:19:54,070 --> 00:19:58,269
over here is actually that button you

542
00:19:56,080 --> 00:20:00,309
can see this nice up arrow whenever your

543
00:19:58,269 --> 00:20:02,169
code is done and saved and you want to

544
00:20:00,309 --> 00:20:05,529
deploy it all you need to do is click

545
00:20:02,169 --> 00:20:08,409
that and BS code is incredibly kind and

546
00:20:05,529 --> 00:20:10,749
easy and we'll upload it to Azure so if

547
00:20:08,409 --> 00:20:13,090
you want to do another slightly harder

548
00:20:10,749 --> 00:20:15,099
way and create a function right through

549
00:20:13,090 --> 00:20:17,168
the portal with integer it's pretty easy

550
00:20:15,099 --> 00:20:20,320
to do it's just all within all services

551
00:20:17,169 --> 00:20:21,789
the compute section of a sure and then

552
00:20:20,320 --> 00:20:24,158
you can see there is this option for

553
00:20:21,789 --> 00:20:25,629
creating a function and app all you do

554
00:20:24,159 --> 00:20:27,489
is once you create a function app and

555
00:20:25,629 --> 00:20:29,619
get into that area is just click the big

556
00:20:27,489 --> 00:20:31,239
old plus button this add option here on

557
00:20:29,619 --> 00:20:32,918
the side and then it's gonna start

558
00:20:31,239 --> 00:20:34,450
walking you through okay what do you

559
00:20:32,919 --> 00:20:36,849
want to do like what should your

560
00:20:34,450 --> 00:20:39,220
function build keep in mind we're gonna

561
00:20:36,849 --> 00:20:41,739
show the GUI portal way if you use

562
00:20:39,220 --> 00:20:43,330
Visual Studio code it's gonna walk you

563
00:20:41,739 --> 00:20:45,789
through these most of these exact same

564
00:20:43,330 --> 00:20:47,228
steps so once you get here this is going

565
00:20:45,789 --> 00:20:49,389
to be once you hit this plus button

566
00:20:47,229 --> 00:20:51,159
excuse me to add a function you're going

567
00:20:49,389 --> 00:20:52,449
to be presented with this screen it's

568
00:20:51,159 --> 00:20:54,700
gonna have to you some of the basics

569
00:20:52,450 --> 00:20:55,720
that just like any is your resource that

570
00:20:54,700 --> 00:20:57,639
you want to build like what's your

571
00:20:55,720 --> 00:20:59,080
subscription what resource group do you

572
00:20:57,639 --> 00:21:01,059
wanted to go under or you can create a

573
00:20:59,080 --> 00:21:02,949
new one the big one here is where you're

574
00:21:01,059 --> 00:21:05,408
gonna provide a function name in this

575
00:21:02,950 --> 00:21:06,429
case we have for security and what we're

576
00:21:05,409 --> 00:21:07,869
going to talk about is what are you

577
00:21:06,429 --> 00:21:10,299
going to publish what is your is your

578
00:21:07,869 --> 00:21:12,449
function going to do is it code or is it

579
00:21:10,299 --> 00:21:14,609
a docker container that's right

580
00:21:12,450 --> 00:21:16,799
for this example and our proof of

581
00:21:14,609 --> 00:21:18,418
concept code that we've published we are

582
00:21:16,799 --> 00:21:20,429
going to just use code pretty easy

583
00:21:18,419 --> 00:21:22,559
enough or once we select code you can

584
00:21:20,429 --> 00:21:24,480
drop down and see what languages are

585
00:21:22,559 --> 00:21:26,519
available to you in this case we have

586
00:21:24,480 --> 00:21:28,710
gotten that core node Python Java

587
00:21:26,519 --> 00:21:31,379
powershell core but there are other

588
00:21:28,710 --> 00:21:33,029
languages supported such as c-sharp in

589
00:21:31,379 --> 00:21:34,889
this case we can actually even select

590
00:21:33,029 --> 00:21:37,139
the version of python that we want to

591
00:21:34,889 --> 00:21:38,820
use and we can specify the region that

592
00:21:37,139 --> 00:21:40,678
it's going to be deployed the really

593
00:21:38,820 --> 00:21:43,470
nice thing about this and what's makes

594
00:21:40,679 --> 00:21:45,629
as your functions pretty nice from an

595
00:21:43,470 --> 00:21:48,600
attackers perspective is you get to use

596
00:21:45,629 --> 00:21:51,149
these your websites dotnet domain for c2

597
00:21:48,600 --> 00:21:53,549
you can establish your own subdomain

598
00:21:51,149 --> 00:21:56,248
that gets published within that as your

599
00:21:53,549 --> 00:21:57,509
web sites dotnet domain this is pretty

600
00:21:56,249 --> 00:22:00,029
awesome from an attackers perspective

601
00:21:57,509 --> 00:22:02,279
because we are still going to be writing

602
00:22:00,029 --> 00:22:04,889
upon a a pretty reputable website or

603
00:22:02,279 --> 00:22:06,269
seething in pretty reputable domain so

604
00:22:04,889 --> 00:22:07,949
you might want to pick something related

605
00:22:06,269 --> 00:22:11,070
to your client right like if I'm testing

606
00:22:07,950 --> 00:22:13,379
pH is maybe I want to have like pH is

607
00:22:11,070 --> 00:22:16,559
code repo and then it would be my

608
00:22:13,379 --> 00:22:19,408
function name and the URL would be pH is

609
00:22:16,559 --> 00:22:20,759
code repo assure web sites not that or

610
00:22:19,409 --> 00:22:23,220
maybe you want to have a standard

611
00:22:20,759 --> 00:22:25,799
service like Microsoft Update or just

612
00:22:23,220 --> 00:22:29,100
something that does not stain out dead

613
00:22:25,799 --> 00:22:30,629
at all like web delivery CDN delivery

614
00:22:29,100 --> 00:22:33,748
anything like that that just looks like

615
00:22:30,629 --> 00:22:35,070
very standard boring web traffic once

616
00:22:33,749 --> 00:22:36,779
you did create that's all you really

617
00:22:35,070 --> 00:22:38,340
need to do and now you can start working

618
00:22:36,779 --> 00:22:41,039
on building out your is your function

619
00:22:38,340 --> 00:22:43,139
code for this presentation for the code

620
00:22:41,039 --> 00:22:45,419
that we published online which will link

621
00:22:43,139 --> 00:22:47,488
to at the end of this presentation we

622
00:22:45,419 --> 00:22:49,289
wrote ours in Python because most people

623
00:22:47,489 --> 00:22:51,539
seem to usually have some understanding

624
00:22:49,289 --> 00:22:52,980
of Python very quite obviously you could

625
00:22:51,539 --> 00:22:55,649
translate this into any other language

626
00:22:52,980 --> 00:22:57,149
supported by assure functions so in this

627
00:22:55,649 --> 00:22:58,830
case as you can see when you create your

628
00:22:57,149 --> 00:23:01,709
function app name though

629
00:22:58,830 --> 00:23:04,408
this is where you get to pick the sub

630
00:23:01,710 --> 00:23:06,269
domain of your website's net it's really

631
00:23:04,409 --> 00:23:08,489
nice because as you change this it will

632
00:23:06,269 --> 00:23:10,169
tell you if it's taken or not and so you

633
00:23:08,489 --> 00:23:12,149
can really just test out pretty easily

634
00:23:10,169 --> 00:23:13,169
what what's a really good stuff to me

635
00:23:12,149 --> 00:23:15,600
that you might want to use that you

636
00:23:13,169 --> 00:23:18,330
think is not gonna stand out as if

637
00:23:15,600 --> 00:23:21,029
anyone is inspects these web requests so

638
00:23:18,330 --> 00:23:23,249
one thing to note is you are going to

639
00:23:21,029 --> 00:23:25,799
have the ability to set the sub domain

640
00:23:23,249 --> 00:23:26,460
for your assure function but a juror is

641
00:23:25,799 --> 00:23:28,950
going to

642
00:23:26,460 --> 00:23:31,290
you a URI based off of your function

643
00:23:28,950 --> 00:23:33,630
name so you can think of this as like

644
00:23:31,290 --> 00:23:35,670
the overall function container and this

645
00:23:33,630 --> 00:23:38,070
is the obviously the subdomain is going

646
00:23:35,670 --> 00:23:41,640
to be used within this overall container

647
00:23:38,070 --> 00:23:44,340
you may have multiple functions so like

648
00:23:41,640 --> 00:23:47,010
one function may be for get requests one

649
00:23:44,340 --> 00:23:50,129
function may be for a post request so

650
00:23:47,010 --> 00:23:52,500
those sub functions for lack of a better

651
00:23:50,130 --> 00:23:55,070
term are going to be included in the URI

652
00:23:52,500 --> 00:23:59,310
that flow of your web trigger that

653
00:23:55,070 --> 00:24:01,679
invokes your code so if you are using

654
00:23:59,310 --> 00:24:03,480
cobalt strike when you work on

655
00:24:01,680 --> 00:24:04,920
developing your valuable profile if you

656
00:24:03,480 --> 00:24:07,500
want to use this for command and control

657
00:24:04,920 --> 00:24:09,570
you're probably gonna have to write your

658
00:24:07,500 --> 00:24:12,480
function code first and then build out

659
00:24:09,570 --> 00:24:15,120
your malleable profile for c2 that is

660
00:24:12,480 --> 00:24:17,460
because it's just to make sure that the

661
00:24:15,120 --> 00:24:19,709
you are eyes match up for your get

662
00:24:17,460 --> 00:24:22,050
requests or your post requests with the

663
00:24:19,710 --> 00:24:23,970
web triggers of your as your functions

664
00:24:22,050 --> 00:24:25,800
as they as you continue you're probably

665
00:24:23,970 --> 00:24:28,020
going to need three separate sub

666
00:24:25,800 --> 00:24:30,090
functions that that you're gonna use in

667
00:24:28,020 --> 00:24:32,639
your overall function when you use

668
00:24:30,090 --> 00:24:34,320
cobalt strike so what those might what

669
00:24:32,640 --> 00:24:36,300
might those be well one is probably

670
00:24:34,320 --> 00:24:38,939
going to be for posting data like as

671
00:24:36,300 --> 00:24:40,770
your c2 receives data like maybe you

672
00:24:38,940 --> 00:24:42,480
took a screen shot maybe you have

673
00:24:40,770 --> 00:24:44,580
different process listings that you want

674
00:24:42,480 --> 00:24:46,260
to or maybe you asked it to give me a

675
00:24:44,580 --> 00:24:47,669
process listing and you're gonna receive

676
00:24:46,260 --> 00:24:49,230
that all that data back well you need to

677
00:24:47,670 --> 00:24:51,660
have a poster press light right because

678
00:24:49,230 --> 00:24:53,340
that data is sent back to you in a post

679
00:24:51,660 --> 00:24:56,280
request you're probably gonna want a get

680
00:24:53,340 --> 00:24:59,340
request because that is how beacon looks

681
00:24:56,280 --> 00:25:01,860
for tasking you may also want different

682
00:24:59,340 --> 00:25:04,139
stages like a request for each stage or

683
00:25:01,860 --> 00:25:07,139
depending upon how you plan on dressing

684
00:25:04,140 --> 00:25:09,210
up your valuable C to really the limit

685
00:25:07,140 --> 00:25:12,440
here is just up to your imagination you

686
00:25:09,210 --> 00:25:14,790
can do as many or as few as you want to

687
00:25:12,440 --> 00:25:16,860
one thing to also note especially if

688
00:25:14,790 --> 00:25:18,149
you're using coal while strike is you

689
00:25:16,860 --> 00:25:21,899
were probably going to want to pass your

690
00:25:18,150 --> 00:25:24,060
beacon ID or metadata as cookies or just

691
00:25:21,900 --> 00:25:26,400
as a header sense in the web request

692
00:25:24,060 --> 00:25:28,530
because it's gonna be pretty easy to go

693
00:25:26,400 --> 00:25:31,050
ahead and parse those with your function

694
00:25:28,530 --> 00:25:33,420
code it's not going to be easy if you're

695
00:25:31,050 --> 00:25:35,220
using your I append now obviously you

696
00:25:33,420 --> 00:25:36,720
can add some logic to your function but

697
00:25:35,220 --> 00:25:38,640
at this point you're starting to

698
00:25:36,720 --> 00:25:39,929
complicate things I like stuff that's

699
00:25:38,640 --> 00:25:41,940
fairly simple

700
00:25:39,929 --> 00:25:43,409
so no we talked a lot about this from a

701
00:25:41,940 --> 00:25:46,019
fact perspective let's like start

702
00:25:43,409 --> 00:25:48,330
looking at some code this is going to be

703
00:25:46,019 --> 00:25:50,070
what you're seeing when you first build

704
00:25:48,330 --> 00:25:52,439
out not this code but you're gonna have

705
00:25:50,070 --> 00:25:55,379
just a couple basic imports listed here

706
00:25:52,440 --> 00:25:57,950
for your base template for your is your

707
00:25:55,379 --> 00:26:00,990
function what I wanted to do is make

708
00:25:57,950 --> 00:26:03,720
basically a function that just forwards

709
00:26:00,990 --> 00:26:05,940
on my web request and so that's exactly

710
00:26:03,720 --> 00:26:08,789
what I'm doing here in this case I'm

711
00:26:05,940 --> 00:26:10,590
basically monkey patching SSL to tell it

712
00:26:08,789 --> 00:26:12,899
to ignore unsigned certs just for the

713
00:26:10,590 --> 00:26:16,889
sake of this demo and what you can see

714
00:26:12,899 --> 00:26:19,949
is I'm setting this IP address and this

715
00:26:16,889 --> 00:26:21,748
URL for where my get request is going to

716
00:26:19,950 --> 00:26:23,789
go to what's happening then the next up

717
00:26:21,749 --> 00:26:26,580
is as this requite web request comes in

718
00:26:23,789 --> 00:26:28,649
so I'm going to burst all the headers

719
00:26:26,580 --> 00:26:31,379
that are sent to me in the web request

720
00:26:28,649 --> 00:26:33,600
set to my user function so that I can

721
00:26:31,379 --> 00:26:35,610
contain that data why do I need to have

722
00:26:33,600 --> 00:26:37,949
those headers again well that's how

723
00:26:35,610 --> 00:26:40,168
Colts strike and possibly other see two

724
00:26:37,950 --> 00:26:42,029
frameworks uniquely identify each

725
00:26:40,169 --> 00:26:43,950
incoming beacon they need to have that

726
00:26:42,029 --> 00:26:45,720
data stored somewhere right so one of

727
00:26:43,950 --> 00:26:48,809
the easiest places can be in the header

728
00:26:45,720 --> 00:26:50,789
of a request after I've gotten all of

729
00:26:48,809 --> 00:26:53,100
this data from the incoming request that

730
00:26:50,789 --> 00:26:55,139
comes into my function well I'm gonna go

731
00:26:53,100 --> 00:26:57,748
ahead and basically recreate that

732
00:26:55,139 --> 00:26:59,100
request to my team server so all I'm

733
00:26:57,749 --> 00:27:01,230
doing is making a get request to the

734
00:26:59,100 --> 00:27:03,119
team server passing along all the

735
00:27:01,230 --> 00:27:05,249
headers that came in and then once I

736
00:27:03,119 --> 00:27:07,889
receive the response back send that back

737
00:27:05,249 --> 00:27:10,019
to the original requesting system same

738
00:27:07,889 --> 00:27:11,668
concept with post request the only

739
00:27:10,019 --> 00:27:14,490
difference here is that I'm going to be

740
00:27:11,669 --> 00:27:16,470
making a post we are getting the body of

741
00:27:14,490 --> 00:27:18,869
the post request sent into this function

742
00:27:16,470 --> 00:27:21,059
and then we are making that same post

743
00:27:18,869 --> 00:27:23,399
request to our team server at this

744
00:27:21,059 --> 00:27:25,440
location right here you'll notice there

745
00:27:23,399 --> 00:27:28,080
are the URLs our scene of your eyes are

746
00:27:25,440 --> 00:27:29,850
obviously slightly different we're going

747
00:27:28,080 --> 00:27:31,678
to dive into this a little bit more and

748
00:27:29,850 --> 00:27:33,980
we're gonna have a video demo that will

749
00:27:31,679 --> 00:27:35,929
show how this works

750
00:27:33,980 --> 00:27:38,960
this is the same concept again for if

751
00:27:35,929 --> 00:27:40,940
I'm stating if I want to have sure

752
00:27:38,960 --> 00:27:42,590
functions act as my redirector for any

753
00:27:40,940 --> 00:27:44,659
station request you can do that exact

754
00:27:42,590 --> 00:27:46,490
same thing and in this case we don't

755
00:27:44,659 --> 00:27:49,159
have to worry about necessarily the

756
00:27:46,490 --> 00:27:50,899
headers we can just pass forward on the

757
00:27:49,159 --> 00:27:53,630
request or see the response or I turn it

758
00:27:50,899 --> 00:27:55,908
back to the requesting system one thing

759
00:27:53,630 --> 00:27:58,220
to note is when you write your functions

760
00:27:55,909 --> 00:28:01,100
they're going to have a function JSON

761
00:27:58,220 --> 00:28:03,289
file that is included with your base

762
00:28:01,100 --> 00:28:04,789
template to make life really easy on you

763
00:28:03,289 --> 00:28:06,350
guys whenever you if you do start

764
00:28:04,789 --> 00:28:09,559
deciding to play with us your functions

765
00:28:06,350 --> 00:28:11,809
just use the base template and like use

766
00:28:09,559 --> 00:28:13,700
Visual Studio code and it will build out

767
00:28:11,809 --> 00:28:15,260
all of these like base files that you

768
00:28:13,700 --> 00:28:16,370
need and so you have like a template

769
00:28:15,260 --> 00:28:18,440
that you can start with and it makes

770
00:28:16,370 --> 00:28:20,239
life so much easier because it has

771
00:28:18,440 --> 00:28:21,529
everything that you need to work up and

772
00:28:20,240 --> 00:28:23,179
going from from the beginning that you

773
00:28:21,529 --> 00:28:25,340
created one of those files again is

774
00:28:23,179 --> 00:28:27,019
going to be this function not JSON file

775
00:28:25,340 --> 00:28:29,209
one of the attributes of this file is

776
00:28:27,019 --> 00:28:31,460
like how is your function allowed to be

777
00:28:29,210 --> 00:28:33,889
accessed like what is allowed to trigger

778
00:28:31,460 --> 00:28:35,269
it do you want any one table to trigger

779
00:28:33,889 --> 00:28:37,219
it or do you have to provide like a

780
00:28:35,269 --> 00:28:39,529
password if you all probably the top

781
00:28:37,220 --> 00:28:42,649
three ways at least when it comes to a

782
00:28:39,529 --> 00:28:44,360
web request to set up like what access

783
00:28:42,649 --> 00:28:47,029
is allowed is going to be through either

784
00:28:44,360 --> 00:28:49,309
a functional key a master key or

785
00:28:47,029 --> 00:28:50,899
anonymous the functional key the way

786
00:28:49,309 --> 00:28:53,960
that this works is you can think of it

787
00:28:50,899 --> 00:28:56,479
as remember for each sub function so not

788
00:28:53,960 --> 00:28:57,889
the overall function but each sub

789
00:28:56,480 --> 00:29:00,260
function that's contained within your

790
00:28:57,889 --> 00:29:02,840
function container you can generate what

791
00:29:00,260 --> 00:29:04,220
is similar to an API key it's not an API

792
00:29:02,840 --> 00:29:06,439
key but it's similar to that and

793
00:29:04,220 --> 00:29:09,260
anything that makes a request to that

794
00:29:06,440 --> 00:29:12,320
function has to pass that API key along

795
00:29:09,260 --> 00:29:14,570
with it it's not included then it will

796
00:29:12,320 --> 00:29:16,070
not run your code it will not trigger it

797
00:29:14,570 --> 00:29:17,029
it will basically just ignore it there

798
00:29:16,070 --> 00:29:19,189
is a master key

799
00:29:17,029 --> 00:29:22,760
so a master key you can think of it as

800
00:29:19,190 --> 00:29:25,460
an API key at the overall function

801
00:29:22,760 --> 00:29:27,889
container level you must have an API key

802
00:29:25,460 --> 00:29:29,690
that can trigger any Azura function app

803
00:29:27,889 --> 00:29:32,149
and in order to use that you would just

804
00:29:29,690 --> 00:29:33,860
generate one with integer and then pass

805
00:29:32,149 --> 00:29:36,229
that along with your rebel press web

806
00:29:33,860 --> 00:29:38,269
request to do not pass that along then

807
00:29:36,230 --> 00:29:40,429
function will never be triggered what we

808
00:29:38,269 --> 00:29:43,909
like Li one is this last option

809
00:29:40,429 --> 00:29:46,010
anonymous request just like it sounds it

810
00:29:43,909 --> 00:29:47,940
does not require a key at all it is just

811
00:29:46,010 --> 00:29:49,950
something that anytime anyone hits it

812
00:29:47,940 --> 00:29:51,390
then it will just trigger your code and

813
00:29:49,950 --> 00:29:53,340
you're good to go so that's probably was

814
00:29:51,390 --> 00:29:55,020
going to work best for us at least in

815
00:29:53,340 --> 00:29:57,060
this initial POC that we published for

816
00:29:55,020 --> 00:29:59,520
everyone when trying to use Azure

817
00:29:57,060 --> 00:30:01,889
functions here's an example within the

818
00:29:59,520 --> 00:30:03,690
function JSON file is where you would

819
00:30:01,890 --> 00:30:05,250
provide the authentication level

820
00:30:03,690 --> 00:30:07,560
requirement you would either provide

821
00:30:05,250 --> 00:30:09,900
functional master key or you can specify

822
00:30:07,560 --> 00:30:13,050
you want to be anonymous and once you

823
00:30:09,900 --> 00:30:15,060
push this code to assure anyone that has

824
00:30:13,050 --> 00:30:17,159
the URL to trigger your code will be

825
00:30:15,060 --> 00:30:19,110
able to trigger it here is where in the

826
00:30:17,160 --> 00:30:21,420
event that you wanted to actually build

827
00:30:19,110 --> 00:30:24,000
out let's say a functional key this is

828
00:30:21,420 --> 00:30:27,000
it within a jurors partl this would be

829
00:30:24,000 --> 00:30:29,280
the overall high level project it is one

830
00:30:27,000 --> 00:30:31,740
of the sub functions within this overall

831
00:30:29,280 --> 00:30:33,960
function and then within the manage

832
00:30:31,740 --> 00:30:36,240
section of your sub function you can

833
00:30:33,960 --> 00:30:37,590
click to add a and build a functional

834
00:30:36,240 --> 00:30:39,630
key which would be passing your request

835
00:30:37,590 --> 00:30:42,000
now this is only if you want to have

836
00:30:39,630 --> 00:30:43,740
that requirement that boat API key for

837
00:30:42,000 --> 00:30:45,570
lack of a better term in order to

838
00:30:43,740 --> 00:30:47,790
trigger your code you don't need to do

839
00:30:45,570 --> 00:30:49,740
this if you are using anonymous access

840
00:30:47,790 --> 00:30:51,240
so again like I mentioned if you're

841
00:30:49,740 --> 00:30:53,040
coding your function in Visual Studio

842
00:30:51,240 --> 00:30:54,240
code it just makes life so easy for

843
00:30:53,040 --> 00:30:56,399
pushing it you don't have to worry about

844
00:30:54,240 --> 00:30:57,990
packaging anything up this usually built

845
00:30:56,400 --> 00:31:00,390
in as your function authenticate to

846
00:30:57,990 --> 00:31:01,800
Azure through Visual Studio code and

847
00:31:00,390 --> 00:31:03,540
once you're happy with it code will

848
00:31:01,800 --> 00:31:05,520
automate pushing and deploying it to

849
00:31:03,540 --> 00:31:07,500
sure and will make life super easy for

850
00:31:05,520 --> 00:31:09,720
you you can see at the bottom in this

851
00:31:07,500 --> 00:31:11,970
case we were playing with the function

852
00:31:09,720 --> 00:31:14,700
name the overall one called web delivery

853
00:31:11,970 --> 00:31:16,440
online and this is after I've pushed it

854
00:31:14,700 --> 00:31:18,600
at the very end of deploying everything

855
00:31:16,440 --> 00:31:20,400
it says these are your trigger URLs if

856
00:31:18,600 --> 00:31:23,429
you make a get request to any of these

857
00:31:20,400 --> 00:31:25,350
it will trigger the function code behind

858
00:31:23,430 --> 00:31:27,330
that and here's just another example

859
00:31:25,350 --> 00:31:29,790
where we can find like what is that base

860
00:31:27,330 --> 00:31:32,520
high-level URL that we would use in this

861
00:31:29,790 --> 00:31:34,590
case it is web delivery online but to

862
00:31:32,520 --> 00:31:36,540
actually trigger it we would use include

863
00:31:34,590 --> 00:31:38,939
the rest of these URLs within our

864
00:31:36,540 --> 00:31:40,950
request so the big thing is now let's

865
00:31:38,940 --> 00:31:42,630
say you do have your is your function

866
00:31:40,950 --> 00:31:44,910
code published everything's looking good

867
00:31:42,630 --> 00:31:46,290
we now have these are the trigger URLs

868
00:31:44,910 --> 00:31:48,480
which will basically forward on a

869
00:31:46,290 --> 00:31:51,060
request whether it's a get request post

870
00:31:48,480 --> 00:31:52,530
request or staging request well now

871
00:31:51,060 --> 00:31:53,940
you're gonna have to modify your

872
00:31:52,530 --> 00:31:56,280
malleable profile you need to make sure

873
00:31:53,940 --> 00:31:59,130
that the URI is used by your HTTP GET

874
00:31:56,280 --> 00:32:01,710
sections your HTTP POST sections work

875
00:31:59,130 --> 00:32:03,870
and our functional compatible

876
00:32:01,710 --> 00:32:05,909
the code that you have set up based off

877
00:32:03,870 --> 00:32:07,559
yours your functions and the big things

878
00:32:05,909 --> 00:32:10,500
make sure your metadata which uniquely

879
00:32:07,559 --> 00:32:12,928
identifies each beacon is stored in this

880
00:32:10,500 --> 00:32:14,399
case for our proof of concept within the

881
00:32:12,929 --> 00:32:16,740
header because you're already passing

882
00:32:14,399 --> 00:32:18,510
all headers along with your weber class

883
00:32:16,740 --> 00:32:20,520
and then global strikes has everything

884
00:32:18,510 --> 00:32:23,250
that it needs in order to so here's an

885
00:32:20,520 --> 00:32:25,379
example we have HTTP GET the URI in this

886
00:32:23,250 --> 00:32:27,600
case we were setting API slash get and

887
00:32:25,380 --> 00:32:30,240
there including our metadata within a

888
00:32:27,600 --> 00:32:32,969
Heather in this case we have our stager

889
00:32:30,240 --> 00:32:35,809
code we are setting specific URIs for

890
00:32:32,970 --> 00:32:38,070
the x86 or 64-bit versions of it and

891
00:32:35,809 --> 00:32:40,289
it's just included in that section of

892
00:32:38,070 --> 00:32:42,330
our valuable profile same concept with

893
00:32:40,289 --> 00:32:44,100
post has exactly what we need there and

894
00:32:42,330 --> 00:32:46,139
now when it comes to how do you set up

895
00:32:44,100 --> 00:32:47,459
your COBOL strike listener well the nice

896
00:32:46,140 --> 00:32:49,830
thing is all you need to do is just

897
00:32:47,460 --> 00:32:51,630
specify that top-level subdomain are the

898
00:32:49,830 --> 00:32:53,460
whole domain including your own

899
00:32:51,630 --> 00:32:55,500
subdomain that you're using that you

900
00:32:53,460 --> 00:32:57,090
define with your function and that's all

901
00:32:55,500 --> 00:32:58,740
that's needed you can just specify port

902
00:32:57,090 --> 00:33:00,750
443 and then in this case we're

903
00:32:58,740 --> 00:33:03,690
providing that the host and the beacon

904
00:33:00,750 --> 00:33:06,149
to go to is web delivery online that is

905
00:33:03,690 --> 00:33:07,950
your website's net so let's talk

906
00:33:06,149 --> 00:33:09,840
everyone through an example and how this

907
00:33:07,950 --> 00:33:12,059
works and we'll get our beacon so in

908
00:33:09,840 --> 00:33:14,610
this case I'm showing that we have our

909
00:33:12,059 --> 00:33:15,240
get code right here that is the location

910
00:33:14,610 --> 00:33:17,969
of it

911
00:33:15,240 --> 00:33:19,830
we are forwarding on our request to this

912
00:33:17,970 --> 00:33:21,600
is the location of our team server if

913
00:33:19,830 --> 00:33:24,750
you notice the difference is we are not

914
00:33:21,600 --> 00:33:27,299
using API within our call or within the

915
00:33:24,750 --> 00:33:29,909
URL it is using 40 North we're capturing

916
00:33:27,299 --> 00:33:31,289
all the headers here we are making our

917
00:33:29,909 --> 00:33:33,120
request so after we capture those

918
00:33:31,289 --> 00:33:35,309
headers for them on in our get request

919
00:33:33,120 --> 00:33:36,928
once we get the response back send that

920
00:33:35,309 --> 00:33:39,090
back to the original requesting server

921
00:33:36,929 --> 00:33:41,730
you can see right here in our HTTP GET

922
00:33:39,090 --> 00:33:45,720
code block it is using the 40 north I

923
00:33:41,730 --> 00:33:47,760
get it for the URL and that is basically

924
00:33:45,720 --> 00:33:49,860
our get request same exact concept here

925
00:33:47,760 --> 00:33:51,480
with our post request we just have a

926
00:33:49,860 --> 00:33:53,070
slightly different URL we are still

927
00:33:51,480 --> 00:33:56,490
capturing all the headers because that

928
00:33:53,070 --> 00:33:57,658
uniquely identifies our beacon we're

929
00:33:56,490 --> 00:34:00,630
gonna probably scroll down and show you

930
00:33:57,659 --> 00:34:03,250
it yep so here's a code block where we

931
00:34:00,630 --> 00:34:05,169
set the URI to match our

932
00:34:03,250 --> 00:34:06,610
function code the big difference here is

933
00:34:05,169 --> 00:34:09,010
obviously we're getting all the data

934
00:34:06,610 --> 00:34:10,540
sent in the post request we are making

935
00:34:09,010 --> 00:34:13,389
sure that we are forwarding all that

936
00:34:10,540 --> 00:34:15,460
data from our function to our team

937
00:34:13,389 --> 00:34:16,780
server and then again just capturing the

938
00:34:15,460 --> 00:34:19,300
response from the team server and

939
00:34:16,780 --> 00:34:21,820
sending it back to the original

940
00:34:19,300 --> 00:34:23,139
requesting beacon finally and this

941
00:34:21,820 --> 00:34:25,210
section is where we just have with a car

942
00:34:23,139 --> 00:34:27,310
staging code we're just showing that in

943
00:34:25,210 --> 00:34:30,879
this case we're only setting a URI 4 out

944
00:34:27,310 --> 00:34:32,918
of the x86 staging beacon and same

945
00:34:30,879 --> 00:34:34,598
concept as a get request all we're doing

946
00:34:32,918 --> 00:34:36,368
is just tap churring all the data from

947
00:34:34,599 --> 00:34:38,200
the original request boarding it onto

948
00:34:36,369 --> 00:34:39,790
our team server and then sending it back

949
00:34:38,199 --> 00:34:42,250
to us

950
00:34:39,790 --> 00:34:44,859
there is an example I'm going to go

951
00:34:42,250 --> 00:34:46,929
ahead I believe and push this code to

952
00:34:44,859 --> 00:34:49,509
this function that I call a redirecting

953
00:34:46,929 --> 00:34:51,820
function on line I'm going to click this

954
00:34:49,510 --> 00:34:53,290
deployed a function app I'm gonna select

955
00:34:51,820 --> 00:34:55,240
my subscription in this case the

956
00:34:53,290 --> 00:34:57,220
pay-as-you-go I'm gonna have it used my

957
00:34:55,239 --> 00:34:59,200
redirecting function that was created

958
00:34:57,220 --> 00:35:00,669
and it asked me do I want to make sure

959
00:34:59,200 --> 00:35:03,549
that I'm going to deploy this there as

960
00:35:00,670 --> 00:35:05,200
click yes and telleth deploy and then

961
00:35:03,550 --> 00:35:07,720
visual studio code is going to start

962
00:35:05,200 --> 00:35:08,919
just doing its magic make life super

963
00:35:07,720 --> 00:35:11,770
easy and it's going to package

964
00:35:08,920 --> 00:35:13,990
everything up in a way that I sure can

965
00:35:11,770 --> 00:35:14,890
handle as you can see right now there

966
00:35:13,990 --> 00:35:17,169
are no beacons

967
00:35:14,890 --> 00:35:18,660
there's nothing checking in yet so we're

968
00:35:17,170 --> 00:35:20,530
just trying to show that it is empty

969
00:35:18,660 --> 00:35:22,629
what I'm going to do is go ahead and

970
00:35:20,530 --> 00:35:25,240
just really quickly create a PowerShell

971
00:35:22,630 --> 00:35:27,130
one-liner that we can test and make sure

972
00:35:25,240 --> 00:35:29,919
our function code does work and does

973
00:35:27,130 --> 00:35:32,200
actually forward our request to the team

974
00:35:29,920 --> 00:35:33,820
server and we do get our beacon so I'm

975
00:35:32,200 --> 00:35:36,730
saving that to disk and you're about to

976
00:35:33,820 --> 00:35:38,740
see me open up and capture or seize me

977
00:35:36,730 --> 00:35:41,109
copy and paste that as your function

978
00:35:38,740 --> 00:35:43,689
code which right here is just in as

979
00:35:41,109 --> 00:35:45,069
payload text file so I'm just going to

980
00:35:43,690 --> 00:35:46,810
go ahead and copy and paste that entire

981
00:35:45,070 --> 00:35:50,130
power spelled one-liner and we're going

982
00:35:46,810 --> 00:35:52,529
to run it on a Windows virtual machine

983
00:35:50,130 --> 00:35:55,200
so over here is our windows VM I'm just

984
00:35:52,530 --> 00:35:57,720
going to open up a command prompt right

985
00:35:55,200 --> 00:35:59,990
here and paste this code in once we base

986
00:35:57,720 --> 00:35:59,990
it in

987
00:36:00,300 --> 00:36:04,050
opening tasks inators just to show that

988
00:36:01,770 --> 00:36:06,540
powershell does open and you're going to

989
00:36:04,050 --> 00:36:09,330
see that we are getting a beacon through

990
00:36:06,540 --> 00:36:10,529
powershell on this very pasting it and i

991
00:36:09,330 --> 00:36:12,060
think before we do this i'm going to go

992
00:36:10,530 --> 00:36:12,900
back here and i'm going to check that i

993
00:36:12,060 --> 00:36:14,940
actually did

994
00:36:12,900 --> 00:36:16,800
everything is deployed we can see the

995
00:36:14,940 --> 00:36:19,950
ever your eyes the difference here

996
00:36:16,800 --> 00:36:23,070
though is it does show flash API is

997
00:36:19,950 --> 00:36:24,899
within our uri right we can see all the

998
00:36:23,070 --> 00:36:27,510
different functions trigger urls but i

999
00:36:24,900 --> 00:36:30,690
don't want to use api but that is the

1000
00:36:27,510 --> 00:36:32,760
default what's set by is your functions

1001
00:36:30,690 --> 00:36:35,790
with integer the nice thing is you can

1002
00:36:32,760 --> 00:36:38,310
change that value if we modify the host

1003
00:36:35,790 --> 00:36:40,710
JSON value you can change it in this

1004
00:36:38,310 --> 00:36:42,750
case I have it set to 40 north well the

1005
00:36:40,710 --> 00:36:45,270
interesting thing is if you look in the

1006
00:36:42,750 --> 00:36:48,840
azure portal it actually does show that

1007
00:36:45,270 --> 00:36:51,390
my you are my trigger URL does actually

1008
00:36:48,840 --> 00:36:53,370
use 40 north it's a small bug I think in

1009
00:36:51,390 --> 00:36:56,670
Visual Studio code because it doesn't

1010
00:36:53,370 --> 00:36:59,460
actually print out the proper URL if you

1011
00:36:56,670 --> 00:37:02,010
change that API value long story short

1012
00:36:59,460 --> 00:37:04,170
we run our powershell one-liner and you

1013
00:37:02,010 --> 00:37:07,110
can see that our beacon did indeed check

1014
00:37:04,170 --> 00:37:10,620
in and this is all being forwarded back

1015
00:37:07,110 --> 00:37:14,570
and forth to us to the team server from

1016
00:37:10,620 --> 00:37:14,569
my victim system using integer

1017
00:37:16,150 --> 00:37:19,959
that's that

1018
00:37:17,890 --> 00:37:23,009
Matt I'm gonna hand everything over to

1019
00:37:19,959 --> 00:37:26,078
you for the next part in addition to

1020
00:37:23,009 --> 00:37:29,049
using those as your functions which are

1021
00:37:26,079 --> 00:37:31,989
pretty great you could also use end Rock

1022
00:37:29,049 --> 00:37:35,950
for serving up some local infrastructure

1023
00:37:31,989 --> 00:37:39,069
for for your red teaming so kind of some

1024
00:37:35,950 --> 00:37:41,468
some background on the tool itself it's

1025
00:37:39,069 --> 00:37:45,190
an easy way to trump tunnel traffic from

1026
00:37:41,469 --> 00:37:47,619
a VM or some other like local machine to

1027
00:37:45,190 --> 00:37:48,969
an external address you can reach you

1028
00:37:47,619 --> 00:37:52,059
know over the Internet

1029
00:37:48,969 --> 00:37:55,989
the tunnel is encrypted which is really

1030
00:37:52,059 --> 00:37:58,660
nice and there's a if you get the I

1031
00:37:55,989 --> 00:38:00,969
guess the paid version of it you can use

1032
00:37:58,660 --> 00:38:03,308
custom domains which I'll kind of talk

1033
00:38:00,969 --> 00:38:06,279
through later here and it also gives you

1034
00:38:03,309 --> 00:38:08,920
the option to run multiple concurrent

1035
00:38:06,279 --> 00:38:11,890
tunnels at one time with just one config

1036
00:38:08,920 --> 00:38:13,180
file that I'll also show you here in a

1037
00:38:11,890 --> 00:38:15,879
few slides as well

1038
00:38:13,180 --> 00:38:18,969
so some of the pros to using and grok

1039
00:38:15,880 --> 00:38:20,739
can quickly set up any type of local

1040
00:38:18,969 --> 00:38:23,559
infrastructure and you can make it

1041
00:38:20,739 --> 00:38:26,259
reusable as well so there's no need to

1042
00:38:23,559 --> 00:38:29,440
use domain fronting really this and grok

1043
00:38:26,259 --> 00:38:30,940
cool acts as your redirector and one

1044
00:38:29,440 --> 00:38:33,640
thing I kind of learned is going through

1045
00:38:30,940 --> 00:38:36,819
this is you know some ETR products don't

1046
00:38:33,640 --> 00:38:38,979
usually follow a cname record which is

1047
00:38:36,819 --> 00:38:42,219
what you set up when you set up a custom

1048
00:38:38,979 --> 00:38:44,439
domain to use with an grukk which I'll

1049
00:38:42,219 --> 00:38:47,709
show is well coming up and I don't know

1050
00:38:44,440 --> 00:38:50,049
exactly how often it rolls it but Angra

1051
00:38:47,709 --> 00:38:53,078
usually rolls its external IP de IP

1052
00:38:50,049 --> 00:38:55,239
address pretty regularly I want to say

1053
00:38:53,079 --> 00:38:58,089
every couple days or something similar

1054
00:38:55,239 --> 00:38:59,650
to that there's a one inside out use

1055
00:38:58,089 --> 00:39:01,359
case that I'll talk about here but I

1056
00:38:59,650 --> 00:39:03,249
know there's a lot more and there's a

1057
00:39:01,359 --> 00:39:05,589
ton of other things you could do with an

1058
00:39:03,249 --> 00:39:08,288
grok as well you can you know serve up a

1059
00:39:05,589 --> 00:39:10,989
local directory for file sharing you can

1060
00:39:08,289 --> 00:39:12,670
set up HTTP authentication a bunch of

1061
00:39:10,989 --> 00:39:14,829
different things it's really really

1062
00:39:12,670 --> 00:39:17,979
powerful tool and some of the downsides

1063
00:39:14,829 --> 00:39:19,599
to using this you you can use domain

1064
00:39:17,979 --> 00:39:21,910
fronting with it but it's kind of just

1065
00:39:19,599 --> 00:39:24,579
like unnecessary step just because

1066
00:39:21,910 --> 00:39:26,649
you'll be using that custom domain and

1067
00:39:24,579 --> 00:39:29,410
that's what you'll use as your you know

1068
00:39:26,650 --> 00:39:31,299
redirector another downside is the

1069
00:39:29,410 --> 00:39:31,810
infrastructure is probably going to be

1070
00:39:31,299 --> 00:39:34,660
running

1071
00:39:31,810 --> 00:39:36,490
local VM so if that VM dies or something

1072
00:39:34,660 --> 00:39:39,609
gets shut down on your local network

1073
00:39:36,490 --> 00:39:41,799
that tunnel dies that Angra tunnel will

1074
00:39:39,610 --> 00:39:44,110
die so that's something to be aware of

1075
00:39:41,800 --> 00:39:47,170
it's not really meant for extended red

1076
00:39:44,110 --> 00:39:48,750
teams just a way to kind of quickly set

1077
00:39:47,170 --> 00:39:50,800
up infrastructure and get it going

1078
00:39:48,750 --> 00:39:53,320
another thing that I noticed during

1079
00:39:50,800 --> 00:39:56,230
testing is your external IP address

1080
00:39:53,320 --> 00:39:58,300
doesn't get recognized in cobalt strike

1081
00:39:56,230 --> 00:40:00,130
I'm sure there's a way around this to

1082
00:39:58,300 --> 00:40:02,470
pass that through another way

1083
00:40:00,130 --> 00:40:04,750
just having taken the time to try to fix

1084
00:40:02,470 --> 00:40:06,160
that or look for any solution yet and

1085
00:40:04,750 --> 00:40:08,680
then kind of with all red teaming you

1086
00:40:06,160 --> 00:40:11,200
have to plan a little bit before just to

1087
00:40:08,680 --> 00:40:12,850
be aware of you know what ports and

1088
00:40:11,200 --> 00:40:15,279
services you aren't running what where

1089
00:40:12,850 --> 00:40:18,310
do you want your beacon beacon to call

1090
00:40:15,280 --> 00:40:20,500
back to everything like that and so kind

1091
00:40:18,310 --> 00:40:22,750
of to set everything up you'll probably

1092
00:40:20,500 --> 00:40:24,520
want to pay to count and that way you'll

1093
00:40:22,750 --> 00:40:27,070
be able to use a custom domain that you

1094
00:40:24,520 --> 00:40:29,170
have you'll be able to categorize it age

1095
00:40:27,070 --> 00:40:31,180
it you know whatever you need to do

1096
00:40:29,170 --> 00:40:33,760
depending on you know your situation

1097
00:40:31,180 --> 00:40:35,740
there and it's it's really easy to get

1098
00:40:33,760 --> 00:40:37,810
set up after that all you have to do is

1099
00:40:35,740 --> 00:40:40,569
you know create an account download this

1100
00:40:37,810 --> 00:40:43,870
in binary and then just follow this

1101
00:40:40,570 --> 00:40:45,640
Authenticator the dashboard to authorize

1102
00:40:43,870 --> 00:40:48,069
it which is just you know one command

1103
00:40:45,640 --> 00:40:50,319
the only thing that you will have to

1104
00:40:48,070 --> 00:40:52,650
note is later on I'll show you a config

1105
00:40:50,320 --> 00:40:55,090
file here you will have to have that

1106
00:40:52,650 --> 00:40:57,310
authorization key inside your config

1107
00:40:55,090 --> 00:40:59,440
file even if you already authorized like

1108
00:40:57,310 --> 00:41:01,840
your local system you'll still need that

1109
00:40:59,440 --> 00:41:03,880
key in that file and then you want to

1110
00:41:01,840 --> 00:41:05,770
reserve whatever custom domain you're

1111
00:41:03,880 --> 00:41:08,200
going to be using on the Angharad

1112
00:41:05,770 --> 00:41:11,380
dashboard and then you'll set the the

1113
00:41:08,200 --> 00:41:13,750
cname record in your DNS for that so

1114
00:41:11,380 --> 00:41:15,670
this is kind of what you'll see on the

1115
00:41:13,750 --> 00:41:17,830
ingre dashboard you'll see that we're

1116
00:41:15,670 --> 00:41:20,650
just using my healthy clinic as a test

1117
00:41:17,830 --> 00:41:21,220
here and I set a that cname record that

1118
00:41:20,650 --> 00:41:23,590
it gave me

1119
00:41:21,220 --> 00:41:25,540
and once DNS propagates and everything

1120
00:41:23,590 --> 00:41:27,880
there's a way to and just click check

1121
00:41:25,540 --> 00:41:30,009
status and once it's correct you know

1122
00:41:27,880 --> 00:41:32,230
everything's working and you start

1123
00:41:30,010 --> 00:41:34,150
setting everything up after that so what

1124
00:41:32,230 --> 00:41:37,000
we want to do as well as we'll set up a

1125
00:41:34,150 --> 00:41:39,190
TCP address so we can use cobalt strike

1126
00:41:37,000 --> 00:41:42,610
and have other people connect remotely

1127
00:41:39,190 --> 00:41:44,650
to our our local infrastructure here so

1128
00:41:42,610 --> 00:41:45,369
one thing you could do is just test that

1129
00:41:44,650 --> 00:41:48,640
anger acts where

1130
00:41:45,369 --> 00:41:51,519
can write confusing this HTTP protocol

1131
00:41:48,640 --> 00:41:53,710
option specifying your custom domain and

1132
00:41:51,519 --> 00:41:55,569
then just over port 80 you'll see

1133
00:41:53,710 --> 00:41:58,690
something similar to this if you're not

1134
00:41:55,569 --> 00:42:00,130
serving up like Apache or Apaches and

1135
00:41:58,690 --> 00:42:01,420
running or anything like that you'll see

1136
00:42:00,130 --> 00:42:03,579
something similar to this error message

1137
00:42:01,420 --> 00:42:05,529
but then you know that the tunnel is

1138
00:42:03,579 --> 00:42:06,880
actually working correctly so the next

1139
00:42:05,529 --> 00:42:09,279
thing you'll probably want to do is we

1140
00:42:06,880 --> 00:42:11,469
want to set up some certificates you

1141
00:42:09,279 --> 00:42:13,059
want to make sure your domain is you

1142
00:42:11,469 --> 00:42:14,559
know is actually protected and you know

1143
00:42:13,059 --> 00:42:17,170
when people go to it they see that

1144
00:42:14,559 --> 00:42:18,969
little black icon which makes you know

1145
00:42:17,170 --> 00:42:21,430
everything's secure right but what's

1146
00:42:18,969 --> 00:42:23,229
nice about this is you can run cert bots

1147
00:42:21,430 --> 00:42:25,569
locally so you'll just have to have

1148
00:42:23,229 --> 00:42:28,359
interact running with that last command

1149
00:42:25,569 --> 00:42:31,089
over port 80 and then you can run cert

1150
00:42:28,359 --> 00:42:33,880
bot which I'll do a challenge you can

1151
00:42:31,089 --> 00:42:36,219
you specify the HTTP challenge and it

1152
00:42:33,880 --> 00:42:38,979
once that's done running you can test it

1153
00:42:36,219 --> 00:42:41,769
out with the TLS option and then just de

1154
00:42:38,979 --> 00:42:44,319
specify board 443 with that and

1155
00:42:41,769 --> 00:42:46,899
hopefully when you go to your custom

1156
00:42:44,319 --> 00:42:50,319
domain you'll see something similar to

1157
00:42:46,900 --> 00:42:53,559
this and you'll see like HTTP as well

1158
00:42:50,319 --> 00:42:55,989
for that or if you say serve up a web

1159
00:42:53,559 --> 00:42:59,619
page with Apache that should serve that

1160
00:42:55,989 --> 00:43:02,319
the search should should work out so

1161
00:42:59,619 --> 00:43:04,539
this is an option for the config file

1162
00:43:02,319 --> 00:43:07,329
that we have set up we just have a

1163
00:43:04,539 --> 00:43:08,829
couple different ones here so you can

1164
00:43:07,329 --> 00:43:11,950
see at the top that you have to specify

1165
00:43:08,829 --> 00:43:14,380
the auth token in there I think that it

1166
00:43:11,950 --> 00:43:16,808
took me a little while to figure out but

1167
00:43:14,380 --> 00:43:18,249
the next kind of the three sections are

1168
00:43:16,809 --> 00:43:20,920
different tunnels that we have

1169
00:43:18,249 --> 00:43:23,769
so we're for this we're using HTTP we

1170
00:43:20,920 --> 00:43:26,890
can htps beacon and the the team server

1171
00:43:23,769 --> 00:43:27,368
address we're serving up a TCP port

1172
00:43:26,890 --> 00:43:30,788
there

1173
00:43:27,369 --> 00:43:33,219
so for course that HTTP you'll want to

1174
00:43:30,789 --> 00:43:35,410
specify whatever hostname you're using

1175
00:43:33,219 --> 00:43:37,509
before we were using my healthy clinic

1176
00:43:35,410 --> 00:43:40,390
we're just making sure that we want to

1177
00:43:37,509 --> 00:43:42,640
bind TLS and then specify the TLS

1178
00:43:40,390 --> 00:43:45,430
protocol for the next one pretty much

1179
00:43:42,640 --> 00:43:47,950
the same thing except we'll set false

1180
00:43:45,430 --> 00:43:50,319
bad TLS to false and then the protocol

1181
00:43:47,950 --> 00:43:53,558
is just HTTP and then this team server

1182
00:43:50,319 --> 00:43:55,599
access as we'll be showing you in a

1183
00:43:53,559 --> 00:43:57,910
second here what we want to take note of

1184
00:43:55,599 --> 00:43:58,960
is this remote address we'll use that

1185
00:43:57,910 --> 00:44:02,230
for connecting

1186
00:43:58,960 --> 00:44:05,020
to the cobalt strike team server if you

1187
00:44:02,230 --> 00:44:07,450
want it might make it easy to serve up a

1188
00:44:05,020 --> 00:44:09,100
local directory just for you no file

1189
00:44:07,450 --> 00:44:11,140
sharing or easy access to whatever

1190
00:44:09,100 --> 00:44:13,180
payloads you have depending on your

1191
00:44:11,140 --> 00:44:15,220
situation but you could also just add

1192
00:44:13,180 --> 00:44:18,640
that into the config file as like

1193
00:44:15,220 --> 00:44:20,919
another option and here we have we're

1194
00:44:18,640 --> 00:44:23,740
just calling and rock with the the start

1195
00:44:20,920 --> 00:44:25,210
lag specifying whatever config file we

1196
00:44:23,740 --> 00:44:27,640
have and then you just have to specify

1197
00:44:25,210 --> 00:44:29,290
the tunnel names that you want it to

1198
00:44:27,640 --> 00:44:31,060
create and then it'll look something

1199
00:44:29,290 --> 00:44:35,170
similar to this you can see that it's

1200
00:44:31,060 --> 00:44:37,660
forwarding these these URLs to our

1201
00:44:35,170 --> 00:44:40,540
localhost and so the next thing you want

1202
00:44:37,660 --> 00:44:42,339
to do is is connect to your cobalt

1203
00:44:40,540 --> 00:44:44,890
select team server that you have running

1204
00:44:42,340 --> 00:44:46,720
on your local system and here's where

1205
00:44:44,890 --> 00:44:49,540
you kind of want to take note of that a

1206
00:44:46,720 --> 00:44:51,580
remote remote address so this host is

1207
00:44:49,540 --> 00:44:52,660
usually always going to be the same but

1208
00:44:51,580 --> 00:44:55,840
the port is what's going to change

1209
00:44:52,660 --> 00:44:58,000
that's what you specify and in that

1210
00:44:55,840 --> 00:45:01,270
config file and this is the port that's

1211
00:44:58,000 --> 00:45:03,730
given to you when you reserve TCP

1212
00:45:01,270 --> 00:45:05,740
address through your in grok dashboard

1213
00:45:03,730 --> 00:45:07,240
and so the next thing you want to do is

1214
00:45:05,740 --> 00:45:09,669
just create your listeners make sure

1215
00:45:07,240 --> 00:45:11,680
everything is is working right this is

1216
00:45:09,670 --> 00:45:13,510
probably something that a lot of you

1217
00:45:11,680 --> 00:45:15,910
have already done it's pretty similar to

1218
00:45:13,510 --> 00:45:18,760
you know setting up any other listener

1219
00:45:15,910 --> 00:45:22,180
for any other like redirector pretty

1220
00:45:18,760 --> 00:45:24,250
much the same for HTTP yes and then once

1221
00:45:22,180 --> 00:45:25,660
you get this all set up you want to test

1222
00:45:24,250 --> 00:45:28,440
it out just to make sure everything's

1223
00:45:25,660 --> 00:45:30,879
connecting properly and as you saw in

1224
00:45:28,440 --> 00:45:32,800
Chris's demo our go-to is kind of like a

1225
00:45:30,880 --> 00:45:34,840
powershell one-liner just makes it super

1226
00:45:32,800 --> 00:45:37,120
easy to test out and this is what you'll

1227
00:45:34,840 --> 00:45:39,340
see once you get a beacon back you can

1228
00:45:37,120 --> 00:45:41,440
see the external IP address doesn't

1229
00:45:39,340 --> 00:45:43,480
really populate it doesn't know what to

1230
00:45:41,440 --> 00:45:45,340
do with that once again there's probably

1231
00:45:43,480 --> 00:45:47,350
a way around it but I just I haven't

1232
00:45:45,340 --> 00:45:49,390
looked into it but you should be able to

1233
00:45:47,350 --> 00:45:51,190
interact with that you know get a

1234
00:45:49,390 --> 00:45:53,259
process list everything like that but

1235
00:45:51,190 --> 00:45:55,180
it'll be going through that

1236
00:45:53,260 --> 00:45:57,250
Angra tunnel that you have set up so

1237
00:45:55,180 --> 00:46:00,339
another interesting way that you could

1238
00:45:57,250 --> 00:46:03,130
use this is more of like an inside out

1239
00:46:00,340 --> 00:46:05,470
approach so yeah like docking web shells

1240
00:46:03,130 --> 00:46:07,960
you know in 2020 that's crazy

1241
00:46:05,470 --> 00:46:11,109
but it it does require dropping the

1242
00:46:07,960 --> 00:46:12,760
ingre XP executable on whatever your

1243
00:46:11,110 --> 00:46:15,490
victim system is or what

1244
00:46:12,760 --> 00:46:18,100
like the server you're targeting but

1245
00:46:15,490 --> 00:46:20,080
that binary is not malicious there

1246
00:46:18,100 --> 00:46:22,839
shouldn't be any malicious code in there

1247
00:46:20,080 --> 00:46:24,790
it also requires you to serve up a local

1248
00:46:22,840 --> 00:46:26,920
page on that system which is your web

1249
00:46:24,790 --> 00:46:28,920
shell at least me I'm paranoid you're

1250
00:46:26,920 --> 00:46:31,780
probably gonna want to set up

1251
00:46:28,920 --> 00:46:34,540
multiplication mechanisms for this so

1252
00:46:31,780 --> 00:46:37,030
maybe one authentication mechanism with

1253
00:46:34,540 --> 00:46:39,460
your web shell and one for the TCP

1254
00:46:37,030 --> 00:46:42,490
tunnel Thangaraj depending on how you

1255
00:46:39,460 --> 00:46:45,370
you want to do that so some pros to this

1256
00:46:42,490 --> 00:46:46,569
are you don't need to drop any any

1257
00:46:45,370 --> 00:46:49,299
payloads on the system there's no

1258
00:46:46,570 --> 00:46:51,670
malicious code if you do use like a

1259
00:46:49,300 --> 00:46:53,770
default web shell that might get flagged

1260
00:46:51,670 --> 00:46:55,450
that might get caught but if you roll

1261
00:46:53,770 --> 00:46:57,310
your own you know that it shouldn't get

1262
00:46:55,450 --> 00:46:59,319
caught at all it's not something I don't

1263
00:46:57,310 --> 00:47:01,870
think anything really looks for and it

1264
00:46:59,320 --> 00:47:03,790
should traverse the firewall not just

1265
00:47:01,870 --> 00:47:06,700
because it's kind of poking a hole from

1266
00:47:03,790 --> 00:47:09,130
the inside out final thoughts for like

1267
00:47:06,700 --> 00:47:11,140
using anger act as a redirector of

1268
00:47:09,130 --> 00:47:12,880
course you know modify any of this to

1269
00:47:11,140 --> 00:47:15,129
suit your needs a lot of it you know can

1270
00:47:12,880 --> 00:47:17,260
be customized pretty easily you can

1271
00:47:15,130 --> 00:47:19,600
serve whatever other other ports you

1272
00:47:17,260 --> 00:47:22,390
want you can you know serve up a local

1273
00:47:19,600 --> 00:47:25,990
directory set up some authentication for

1274
00:47:22,390 --> 00:47:27,730
phrase GP or ACPs you could like we just

1275
00:47:25,990 --> 00:47:29,350
talked you could use this as a form of

1276
00:47:27,730 --> 00:47:32,260
persistence which is kind of like an

1277
00:47:29,350 --> 00:47:34,180
inside-out approach to this does it

1278
00:47:32,260 --> 00:47:36,370
require dropping you know a couple files

1279
00:47:34,180 --> 00:47:39,009
on the system but you know if you're

1280
00:47:36,370 --> 00:47:40,210
using registry persistence or something

1281
00:47:39,010 --> 00:47:42,730
else you're probably going to be

1282
00:47:40,210 --> 00:47:44,410
dropping a file on there anyways and you

1283
00:47:42,730 --> 00:47:47,050
know just make sure that you set up

1284
00:47:44,410 --> 00:47:48,819
authentication with this definitely

1285
00:47:47,050 --> 00:47:51,430
because you're you're serving up that

1286
00:47:48,820 --> 00:47:53,890
local file and if you're not setting up

1287
00:47:51,430 --> 00:47:55,359
any authentication on your angry octonal

1288
00:47:53,890 --> 00:47:57,910
you could be serving that up to the

1289
00:47:55,360 --> 00:48:00,850
world so make sure make sure to you set

1290
00:47:57,910 --> 00:48:02,440
up a denigration and you can one nice

1291
00:48:00,850 --> 00:48:04,480
thing is you can easily modify your

1292
00:48:02,440 --> 00:48:07,690
tunnel that config file that we have set

1293
00:48:04,480 --> 00:48:09,850
up you can easily modify that too to

1294
00:48:07,690 --> 00:48:12,700
serve up other domains so you could have

1295
00:48:09,850 --> 00:48:14,860
several domains set up you know it act

1296
00:48:12,700 --> 00:48:17,470
act as like several redirect you know

1297
00:48:14,860 --> 00:48:20,470
one domain gets locked you can have your

1298
00:48:17,470 --> 00:48:22,180
beacon you know set to check these

1299
00:48:20,470 --> 00:48:25,359
several different domains to call back

1300
00:48:22,180 --> 00:48:26,589
on so you can use kind of one local

1301
00:48:25,360 --> 00:48:30,070
infrastructure for

1302
00:48:26,590 --> 00:48:31,930
several different redirect errs so yeah

1303
00:48:30,070 --> 00:48:34,060
I think that's that's all I had

1304
00:48:31,930 --> 00:48:36,460
yeah thanks a lot Matt hopefully

1305
00:48:34,060 --> 00:48:39,070
everyone was able to take something away

1306
00:48:36,460 --> 00:48:40,570
from this talk and rock is really really

1307
00:48:39,070 --> 00:48:42,190
but there's a whole lot of different

1308
00:48:40,570 --> 00:48:43,990
ways that you can apply that technology

1309
00:48:42,190 --> 00:48:45,610
both from an outside perspective and

1310
00:48:43,990 --> 00:48:47,379
like Matt was talking about from an

1311
00:48:45,610 --> 00:48:49,000
inside perspective there's a lot of fun

1312
00:48:47,380 --> 00:48:50,770
things that you can do with the same

1313
00:48:49,000 --> 00:48:52,840
thing with as your functions like why

1314
00:48:50,770 --> 00:48:56,050
deploy entire bps is when you don't need

1315
00:48:52,840 --> 00:48:58,120
to why not just let a jury decide to

1316
00:48:56,050 --> 00:49:00,700
deploy your code and use it anywhere

1317
00:48:58,120 --> 00:49:03,730
within its cloud environment we're

1318
00:49:00,700 --> 00:49:05,859
needed we obviously showed a demo of a

1319
00:49:03,730 --> 00:49:08,140
fairly basic you can almost argue like a

1320
00:49:05,860 --> 00:49:10,450
dumb redirector at this point with our

1321
00:49:08,140 --> 00:49:12,879
Python code within the azure function

1322
00:49:10,450 --> 00:49:15,220
however you can obviously dress that up

1323
00:49:12,880 --> 00:49:16,060
you can add your own capabilities

1324
00:49:15,220 --> 00:49:18,399
looking at it

1325
00:49:16,060 --> 00:49:19,690
dudas I like do further inspection on

1326
00:49:18,400 --> 00:49:22,270
the requests coming it like is it coming

1327
00:49:19,690 --> 00:49:24,100
with a an own user agent that you expect

1328
00:49:22,270 --> 00:49:25,930
isn't from known IP ranges you can

1329
00:49:24,100 --> 00:49:28,540
affect basically anything you can do in

1330
00:49:25,930 --> 00:49:30,730
Python you can do to help inspect

1331
00:49:28,540 --> 00:49:33,220
traffic filter out as needed before you

1332
00:49:30,730 --> 00:49:35,440
send it on to your team server location

1333
00:49:33,220 --> 00:49:37,689
otherwise I hope everyone enjoyed this

1334
00:49:35,440 --> 00:49:39,790
thank you so much for your time we did

1335
00:49:37,690 --> 00:49:41,200
publish proof of concept code on github

1336
00:49:39,790 --> 00:49:43,000
so if you want to look at with that

1337
00:49:41,200 --> 00:49:44,770
basic as your function code looks like

1338
00:49:43,000 --> 00:49:46,720
go ahead and check it out we also

1339
00:49:44,770 --> 00:49:48,460
published a blog post trying to explain

1340
00:49:46,720 --> 00:49:50,200
a lot of these similar concepts on our

1341
00:49:48,460 --> 00:49:52,750
website otherwise thank you very much

1342
00:49:50,200 --> 00:49:54,339
and hope you enjoy this talk and thank

1343
00:49:52,750 --> 00:49:55,960
you very much once again great

1344
00:49:54,340 --> 00:49:58,990
presentation there's nothing like a a

1345
00:49:55,960 --> 00:50:04,180
POC on a mic drop what is the proper way

1346
00:49:58,990 --> 00:50:05,740
to pronounce your I say is your I

1347
00:50:04,180 --> 00:50:07,810
probably mispronounced it multiple times

1348
00:50:05,740 --> 00:50:09,759
throughout it I say sure and I'm sure

1349
00:50:07,810 --> 00:50:12,730
that there's someone going to make fun

1350
00:50:09,760 --> 00:50:14,860
of me about that though so who knows any

1351
00:50:12,730 --> 00:50:17,440
tips on hunting this besides looking for

1352
00:50:14,860 --> 00:50:19,810
is your website's dotnet maybe secondary

1353
00:50:17,440 --> 00:50:22,120
indicators that's a great question I

1354
00:50:19,810 --> 00:50:24,400
think it's it's hard be right because

1355
00:50:22,120 --> 00:50:25,870
anyone can write their own custom coast

1356
00:50:24,400 --> 00:50:27,430
you don't necessarily know what's going

1357
00:50:25,870 --> 00:50:29,830
on on the back end and what they're

1358
00:50:27,430 --> 00:50:32,169
doing I think the biggest thing is right

1359
00:50:29,830 --> 00:50:34,900
now the only sub domain that I've ever

1360
00:50:32,170 --> 00:50:36,790
seen anyone or domain that has been used

1361
00:50:34,900 --> 00:50:39,550
for as your functions is these your

1362
00:50:36,790 --> 00:50:40,000
website's net so I would start with that

1363
00:50:39,550 --> 00:50:42,070
if you

1364
00:50:40,000 --> 00:50:45,040
seen that use then it's not necessarily

1365
00:50:42,070 --> 00:50:46,840
indicative of evil but you can check out

1366
00:50:45,040 --> 00:50:49,600
to see what's making web requests to

1367
00:50:46,840 --> 00:50:52,720
that additionally if you're seeing that

1368
00:50:49,600 --> 00:50:55,299
slash API in the URL to that as your

1369
00:50:52,720 --> 00:50:57,310
website's net domain then it's likely

1370
00:50:55,300 --> 00:50:59,110
that there's a web trigger going on

1371
00:50:57,310 --> 00:51:01,750
someone's using it and they're using

1372
00:50:59,110 --> 00:51:03,310
like the default setup like that I think

1373
00:51:01,750 --> 00:51:05,020
right now just because of the

1374
00:51:03,310 --> 00:51:07,570
customization capabilities that you have

1375
00:51:05,020 --> 00:51:09,820
that the main thing that I would look

1376
00:51:07,570 --> 00:51:12,310
for is what's talking to those as your

1377
00:51:09,820 --> 00:51:14,620
website's net subdomains and trying to

1378
00:51:12,310 --> 00:51:18,090
see what else I can do to determine what

1379
00:51:14,620 --> 00:51:18,089
it what it may be doing on the back end

