1
00:00:01,839 --> 00:00:06,398
hello everybody

2
00:00:03,199 --> 00:00:07,119
welcome to the last talk of track 2 for

3
00:00:06,399 --> 00:00:08,720
day one

4
00:00:07,120 --> 00:00:10,320
we really appreciate you being here it's

5
00:00:08,720 --> 00:00:12,160
been a long and really good day

6
00:00:10,320 --> 00:00:13,599
for those of you on the east coast it's

7
00:00:12,160 --> 00:00:14,960
almost seven o'clock at night

8
00:00:13,599 --> 00:00:17,440
and for those of you on the west coast

9
00:00:14,960 --> 00:00:20,640
it's 4 o'clock in the afternoon

10
00:00:17,440 --> 00:00:22,000
i think right that's how math works so

11
00:00:20,640 --> 00:00:23,840
we're here with phil young phil's going

12
00:00:22,000 --> 00:00:26,240
to give a talk called

13
00:00:23,840 --> 00:00:26,880
not just evil hacking mainframes with

14
00:00:26,240 --> 00:00:29,359
network

15
00:00:26,880 --> 00:00:31,119
job entry thank you for being here phil

16
00:00:29,359 --> 00:00:32,719
go ahead and take it away and i will

17
00:00:31,119 --> 00:00:34,320
uh come back and i'll be here if you

18
00:00:32,719 --> 00:00:36,160
have any issues so feel free to

19
00:00:34,320 --> 00:00:37,440
all right well thank you thanks for

20
00:00:36,160 --> 00:00:40,239
having me everyone

21
00:00:37,440 --> 00:00:41,120
this is a a talk i've been wanted to do

22
00:00:40,239 --> 00:00:43,279
for a while

23
00:00:41,120 --> 00:00:44,640
so bri get started i have to always put

24
00:00:43,280 --> 00:00:46,719
the disclaimer

25
00:00:44,640 --> 00:00:48,640
i'm not here representing my employer or

26
00:00:46,719 --> 00:00:49,680
speaking in the name of my employer so

27
00:00:48,640 --> 00:00:51,199
there we go disclaimer out of the way

28
00:00:49,680 --> 00:00:52,800
okay so that's all

29
00:00:51,199 --> 00:00:54,239
in fact most of my mainframe hacking

30
00:00:52,800 --> 00:00:57,519
career started

31
00:00:54,239 --> 00:00:58,640
when i was working at visa and i saw a

32
00:00:57,520 --> 00:01:01,920
developer

33
00:00:58,640 --> 00:01:04,319
uh create a new user on one system

34
00:01:01,920 --> 00:01:06,240
but like they were on a dev system and

35
00:01:04,319 --> 00:01:08,000
that user was created in production

36
00:01:06,240 --> 00:01:09,439
and i was like how how is this possible

37
00:01:08,000 --> 00:01:10,960
like how did you do that

38
00:01:09,439 --> 00:01:12,559
better than an ssh in they didn't have

39
00:01:10,960 --> 00:01:12,880
like remote control and it looked like

40
00:01:12,560 --> 00:01:13,920
this

41
00:01:12,880 --> 00:01:15,679
this is exactly what it looks so they

42
00:01:13,920 --> 00:01:17,759
have this this jcl that they're going to

43
00:01:15,680 --> 00:01:19,840
use they're going to submit it

44
00:01:17,759 --> 00:01:21,040
and it's going to add a user on this

45
00:01:19,840 --> 00:01:23,439
other system

46
00:01:21,040 --> 00:01:24,880
and it runs and then you get some

47
00:01:23,439 --> 00:01:27,360
messages that came back and it ran

48
00:01:24,880 --> 00:01:30,079
successfully and now that user

49
00:01:27,360 --> 00:01:30,799
is created in production so how does all

50
00:01:30,079 --> 00:01:32,158
that work

51
00:01:30,799 --> 00:01:34,720
that's what this whole talk is going to

52
00:01:32,159 --> 00:01:37,840
be about so a little bit about me

53
00:01:34,720 --> 00:01:40,479
i i put hacker here but i was an x25

54
00:01:37,840 --> 00:01:41,119
network adventurist explorer maybe i

55
00:01:40,479 --> 00:01:42,960
worked at

56
00:01:41,119 --> 00:01:44,640
help desk for a major canadian tv

57
00:01:42,960 --> 00:01:46,240
network for a bit i used to be an

58
00:01:44,640 --> 00:01:47,119
auditor for one of the big four audit

59
00:01:46,240 --> 00:01:48,559
firms

60
00:01:47,119 --> 00:01:49,840
and then i worked at visa for about five

61
00:01:48,560 --> 00:01:51,119
years which is really where that kicked

62
00:01:49,840 --> 00:01:53,520
off sort of my

63
00:01:51,119 --> 00:01:54,560
my passion for mainframe cyber security

64
00:01:53,520 --> 00:01:57,840
because it was there

65
00:01:54,560 --> 00:02:00,240
sort of how i saw how bad

66
00:01:57,840 --> 00:02:01,759
mainframe security was at the time like

67
00:02:00,240 --> 00:02:02,719
everyone like up until then everyone was

68
00:02:01,759 --> 00:02:04,000
always touting how the

69
00:02:02,719 --> 00:02:06,079
mainframes were and how secure and they

70
00:02:04,000 --> 00:02:08,080
were unhackable and then

71
00:02:06,079 --> 00:02:09,119
i was able to get my hands on my own and

72
00:02:08,080 --> 00:02:10,640
then from there i was just like well

73
00:02:09,119 --> 00:02:11,599
it's not really it's just that no tools

74
00:02:10,639 --> 00:02:12,958
exist and

75
00:02:11,599 --> 00:02:14,799
the information's not out there they're

76
00:02:12,959 --> 00:02:16,480
hackable it's just no one knows how

77
00:02:14,800 --> 00:02:18,239
i've spoken a lot of conferences except

78
00:02:16,480 --> 00:02:19,760
for the the cast computer congress

79
00:02:18,239 --> 00:02:22,080
because i'm not going to europe

80
00:02:19,760 --> 00:02:23,359
between christmas and new year okay so i

81
00:02:22,080 --> 00:02:25,680
also teach a class

82
00:02:23,360 --> 00:02:26,959
with a good friend of mine big indian

83
00:02:25,680 --> 00:02:28,400
smalls

84
00:02:26,959 --> 00:02:30,480
you may know him he is the world's

85
00:02:28,400 --> 00:02:32,879
number one mainframe hacker

86
00:02:30,480 --> 00:02:34,560
i teach a class called evil mainframe

87
00:02:32,879 --> 00:02:37,440
with him where we bring in

88
00:02:34,560 --> 00:02:39,040
an actual mainframe and it has labs the

89
00:02:37,440 --> 00:02:40,079
first day's focused on

90
00:02:39,040 --> 00:02:41,280
how does the mainframe work and the

91
00:02:40,080 --> 00:02:42,879
second day is how do you hack the

92
00:02:41,280 --> 00:02:43,840
mainframe and then there's a ctf with

93
00:02:42,879 --> 00:02:45,120
everything you learn

94
00:02:43,840 --> 00:02:47,280
we're teaching at blackhead this year

95
00:02:45,120 --> 00:02:48,239
we're very excited this talk

96
00:02:47,280 --> 00:02:50,319
like i said this is a talk that we

97
00:02:48,239 --> 00:02:53,040
wanted to do for like three

98
00:02:50,319 --> 00:02:54,238
four years now it's a very technical

99
00:02:53,040 --> 00:02:56,799
deep dive

100
00:02:54,239 --> 00:02:58,879
into network job injury it's based i

101
00:02:56,800 --> 00:03:00,239
posted in in the discord already

102
00:02:58,879 --> 00:03:02,000
if you wanna if you wanna keep up you

103
00:03:00,239 --> 00:03:02,560
wanna follow along there's an article i

104
00:03:02,000 --> 00:03:06,080
wrote

105
00:03:02,560 --> 00:03:09,280
many years ago for poc or gtfo

106
00:03:06,080 --> 00:03:09,760
to 12. so that issue covers sort of all

107
00:03:09,280 --> 00:03:11,360
of

108
00:03:09,760 --> 00:03:12,560
of this talk what we're going to talk

109
00:03:11,360 --> 00:03:14,080
about it doesn't have some of the demos

110
00:03:12,560 --> 00:03:15,920
it doesn't have so many information

111
00:03:14,080 --> 00:03:17,120
but sort of keep up if you want to read

112
00:03:15,920 --> 00:03:18,238
after the fact

113
00:03:17,120 --> 00:03:19,519
we're going to talk about job control

114
00:03:18,239 --> 00:03:20,959
language we're going to talk about

115
00:03:19,519 --> 00:03:22,959
network job entry

116
00:03:20,959 --> 00:03:24,080
we're going to look at trusted nodes and

117
00:03:22,959 --> 00:03:24,720
then we're going to talk about node

118
00:03:24,080 --> 00:03:26,720
takeover

119
00:03:24,720 --> 00:03:27,920
with a python library job control

120
00:03:26,720 --> 00:03:29,760
language this is probably

121
00:03:27,920 --> 00:03:31,119
every talk i give unless i'm talking at

122
00:03:29,760 --> 00:03:33,440
a mainframe conference i sort of have to

123
00:03:31,120 --> 00:03:36,640
give a primer on job control language

124
00:03:33,440 --> 00:03:38,720
it is the most important component

125
00:03:36,640 --> 00:03:40,238
of sort of mainframe hacking you can

126
00:03:38,720 --> 00:03:42,080
avoid it as long as you want

127
00:03:40,239 --> 00:03:43,360
but it's very important when we talk

128
00:03:42,080 --> 00:03:44,560
about when i'm talking about mainframe

129
00:03:43,360 --> 00:03:46,159
i'm not talking about

130
00:03:44,560 --> 00:03:48,159
as400 so i'm going to be talking to you

131
00:03:46,159 --> 00:03:50,159
about as400 i'm not going to talk about

132
00:03:48,159 --> 00:03:52,879
unisys or hp non-stop

133
00:03:50,159 --> 00:03:53,280
i'm going to be talking about cos sort

134
00:03:52,879 --> 00:03:56,399
of like

135
00:03:53,280 --> 00:03:57,200
the ibm's flagship mainframe operating

136
00:03:56,400 --> 00:03:59,920
system

137
00:03:57,200 --> 00:04:00,720
it is a current day modern operating

138
00:03:59,920 --> 00:04:02,079
system

139
00:04:00,720 --> 00:04:03,519
when people hear mainframe just like

140
00:04:02,080 --> 00:04:04,959
before the stock when people hear the

141
00:04:03,519 --> 00:04:07,519
word mainframe they think

142
00:04:04,959 --> 00:04:09,519
oh it's like giant spools of tape

143
00:04:07,519 --> 00:04:10,879
spinning around in a closet somewhere

144
00:04:09,519 --> 00:04:13,840
that's not the case

145
00:04:10,879 --> 00:04:16,399
these are very fast very purpose-built

146
00:04:13,840 --> 00:04:18,399
machines to handle transactions at speed

147
00:04:16,399 --> 00:04:20,320
when i was at visa one mainframe could

148
00:04:18,399 --> 00:04:22,078
handle all the global processing

149
00:04:20,320 --> 00:04:24,000
for every visa transaction around the

150
00:04:22,079 --> 00:04:26,000
planet just one box

151
00:04:24,000 --> 00:04:27,199
right so it's very powerful it runs a

152
00:04:26,000 --> 00:04:30,320
whole bunch of things

153
00:04:27,199 --> 00:04:31,759
but okay so rinse tso which stands for

154
00:04:30,320 --> 00:04:34,800
time sharing option

155
00:04:31,759 --> 00:04:35,919
and this is the bin bash of zls just

156
00:04:34,800 --> 00:04:37,120
well i'm not going to spend i have given

157
00:04:35,919 --> 00:04:39,198
so many talks

158
00:04:37,120 --> 00:04:40,800
about tso and navigating tso we're not

159
00:04:39,199 --> 00:04:42,080
going to talk about tso at all

160
00:04:40,800 --> 00:04:44,400
except for some of the examples that we

161
00:04:42,080 --> 00:04:46,639
use jcl but know that it's like

162
00:04:44,400 --> 00:04:48,239
a bash shell so like you run commands

163
00:04:46,639 --> 00:04:50,240
and you get responses back

164
00:04:48,240 --> 00:04:51,440
kicks so you might have heard kicks or

165
00:04:50,240 --> 00:04:53,120
cics

166
00:04:51,440 --> 00:04:54,960
when it's when it comes to mainframes

167
00:04:53,120 --> 00:04:56,560
maybe a kicks web transaction server or

168
00:04:54,960 --> 00:04:57,840
somewhere in the back end there's a kix

169
00:04:56,560 --> 00:04:59,520
json server

170
00:04:57,840 --> 00:05:01,359
you know you can do queries and api

171
00:04:59,520 --> 00:05:03,520
calls or rest call whatever you want to

172
00:05:01,360 --> 00:05:05,199
do with that so so that runs on the

173
00:05:03,520 --> 00:05:06,080
mainframe so if you've interacted with

174
00:05:05,199 --> 00:05:08,320
kicks

175
00:05:06,080 --> 00:05:10,400
maybe this is something you didn't know

176
00:05:08,320 --> 00:05:12,960
is running on mayfair but kicks the ics

177
00:05:10,400 --> 00:05:14,239
and and then just two so just two is

178
00:05:12,960 --> 00:05:17,039
pretty much what the rest

179
00:05:14,240 --> 00:05:17,759
of this talk is almost about we do talk

180
00:05:17,039 --> 00:05:21,199
about jcl

181
00:05:17,759 --> 00:05:23,120
a lot but jez2 is sort of sort of

182
00:05:21,199 --> 00:05:24,400
the most important part of the operating

183
00:05:23,120 --> 00:05:26,960
system today so

184
00:05:24,400 --> 00:05:28,960
jez2 stands for job entry subsystem

185
00:05:26,960 --> 00:05:32,080
there is a jazz 3

186
00:05:28,960 --> 00:05:35,120
but it it not it's not owned by ibm

187
00:05:32,080 --> 00:05:37,840
so so while just 3 does exist

188
00:05:35,120 --> 00:05:38,320
it's not really like python to python

189
00:05:37,840 --> 00:05:39,840
three

190
00:05:38,320 --> 00:05:40,960
in terms of of like oh it's the same

191
00:05:39,840 --> 00:05:42,638
people no it's a totally different

192
00:05:40,960 --> 00:05:44,719
product made by different people

193
00:05:42,639 --> 00:05:46,000
ibm owned it for a while and they either

194
00:05:44,720 --> 00:05:47,440
they're getting rid of it now or they

195
00:05:46,000 --> 00:05:49,919
just sold it

196
00:05:47,440 --> 00:05:51,520
so basically you have this job entry

197
00:05:49,919 --> 00:05:54,080
subsystem

198
00:05:51,520 --> 00:05:55,840
and jobs are submitted to the job entry

199
00:05:54,080 --> 00:05:56,800
subsystem and they queue based on their

200
00:05:55,840 --> 00:05:57,840
priority

201
00:05:56,800 --> 00:05:59,360
so you have jobs that are higher

202
00:05:57,840 --> 00:06:00,638
priority so say you have payroll at

203
00:05:59,360 --> 00:06:04,080
midnight

204
00:06:00,639 --> 00:06:05,759
and that payroll needs to run

205
00:06:04,080 --> 00:06:07,840
no matter what well that will have a

206
00:06:05,759 --> 00:06:09,440
higher priority than phil wants to add a

207
00:06:07,840 --> 00:06:10,560
new user so that when they show up in

208
00:06:09,440 --> 00:06:13,199
the morning they have an account

209
00:06:10,560 --> 00:06:14,720
that can run any time jez is handling

210
00:06:13,199 --> 00:06:16,160
the input and output so you tell it

211
00:06:14,720 --> 00:06:17,759
where the input's going to be you tell

212
00:06:16,160 --> 00:06:19,520
it where the outputs are supposed to be

213
00:06:17,759 --> 00:06:20,880
and it sort of handles all that

214
00:06:19,520 --> 00:06:23,280
all that setting it up and setting up

215
00:06:20,880 --> 00:06:25,360
the memory and stuff like that

216
00:06:23,280 --> 00:06:26,719
this is a pretty good diagram that

217
00:06:25,360 --> 00:06:29,360
explains

218
00:06:26,720 --> 00:06:30,400
jcl so when we get to the actual jobs

219
00:06:29,360 --> 00:06:32,160
you'll see in a minute

220
00:06:30,400 --> 00:06:34,080
it's called a job card especially the

221
00:06:32,160 --> 00:06:36,880
first so every line

222
00:06:34,080 --> 00:06:37,919
of a job is actually a card that's why

223
00:06:36,880 --> 00:06:40,080
this picture here

224
00:06:37,919 --> 00:06:41,198
is of cards so you have like a whole

225
00:06:40,080 --> 00:06:42,880
bunch of cards that

226
00:06:41,199 --> 00:06:44,319
explain now this is an old holdover from

227
00:06:42,880 --> 00:06:45,840
back when they used to use cards they

228
00:06:44,319 --> 00:06:48,160
don't use cards anymore

229
00:06:45,840 --> 00:06:49,198
but when you write your jcl you put

230
00:06:48,160 --> 00:06:51,039
slash slash

231
00:06:49,199 --> 00:06:53,199
and then whatever you want to do that's

232
00:06:51,039 --> 00:06:56,000
almost like a new card in your stack

233
00:06:53,199 --> 00:06:57,680
when you've written up your jcl you put

234
00:06:56,000 --> 00:06:59,599
it in through jcl and the mjcl

235
00:06:57,680 --> 00:07:00,240
interpreter it interprets it it pulls in

236
00:06:59,599 --> 00:07:02,560
like

237
00:07:00,240 --> 00:07:03,520
it'll do so sometimes you have like

238
00:07:02,560 --> 00:07:04,800
symbols

239
00:07:03,520 --> 00:07:06,560
that you have in there you can set

240
00:07:04,800 --> 00:07:08,880
symbols you can set variables

241
00:07:06,560 --> 00:07:10,319
and it does the interpretation it makes

242
00:07:08,880 --> 00:07:10,800
make sure all the syntax is going to

243
00:07:10,319 --> 00:07:12,240
work out

244
00:07:10,800 --> 00:07:14,000
right so it doesn't bother running it if

245
00:07:12,240 --> 00:07:17,199
the syntax isn't going to be good

246
00:07:14,000 --> 00:07:20,080
other times like you might have rules

247
00:07:17,199 --> 00:07:21,599
that that say only users with this

248
00:07:20,080 --> 00:07:23,039
usually can run jobs that's

249
00:07:21,599 --> 00:07:24,400
this is where it's going to get checked

250
00:07:23,039 --> 00:07:25,360
and then proc live like you might have

251
00:07:24,400 --> 00:07:27,039
procedures

252
00:07:25,360 --> 00:07:28,639
that you pull in that fill in a bunch of

253
00:07:27,039 --> 00:07:29,440
things automatically in your job so

254
00:07:28,639 --> 00:07:30,720
that's where

255
00:07:29,440 --> 00:07:33,520
you would have like a proc live or a

256
00:07:30,720 --> 00:07:35,120
procedure get that pulled in as well

257
00:07:33,520 --> 00:07:36,799
then it goes in the queue this is all

258
00:07:35,120 --> 00:07:37,360
run by jets right this is all run by

259
00:07:36,800 --> 00:07:39,199
jest

260
00:07:37,360 --> 00:07:40,800
you put in the queue and then once it

261
00:07:39,199 --> 00:07:42,880
gets to the queue it goes and executes

262
00:07:40,800 --> 00:07:44,479
and it pulls in the data sets or unix

263
00:07:42,880 --> 00:07:45,440
files are in line you'll see what inline

264
00:07:44,479 --> 00:07:47,440
is in a minute

265
00:07:45,440 --> 00:07:48,879
but it pulls all that in does what it

266
00:07:47,440 --> 00:07:49,759
needs to do and then spits out the

267
00:07:48,879 --> 00:07:51,440
output

268
00:07:49,759 --> 00:07:53,280
you can have what's called steps you

269
00:07:51,440 --> 00:07:55,280
have multiple steps in a job

270
00:07:53,280 --> 00:07:56,799
that has input and output and one job

271
00:07:55,280 --> 00:07:58,559
step can lead to another job step but

272
00:07:56,800 --> 00:08:00,160
this is like a high level overview of

273
00:07:58,560 --> 00:08:03,039
jess

274
00:08:00,160 --> 00:08:03,840
we have the job control language so each

275
00:08:03,039 --> 00:08:08,080
job

276
00:08:03,840 --> 00:08:10,719
is made up of a job card then the steps

277
00:08:08,080 --> 00:08:12,560
then the input and output for that step

278
00:08:10,720 --> 00:08:13,919
and there's so many forward slashes

279
00:08:12,560 --> 00:08:15,919
there's a billion i've heard the rumor

280
00:08:13,919 --> 00:08:18,000
that like it has forward slashes

281
00:08:15,919 --> 00:08:19,120
because it needed a way for the card

282
00:08:18,000 --> 00:08:21,759
reader to grip i don't

283
00:08:19,120 --> 00:08:23,280
look it just it's full of flashes okay

284
00:08:21,759 --> 00:08:25,120
so here's an example now i

285
00:08:23,280 --> 00:08:26,960
already know because i wrote this before

286
00:08:25,120 --> 00:08:27,680
i took the screenshot that this one

287
00:08:26,960 --> 00:08:30,400
won't work

288
00:08:27,680 --> 00:08:31,599
this job won't work because it's missing

289
00:08:30,400 --> 00:08:33,439
a comma somewhere

290
00:08:31,599 --> 00:08:35,120
but you can see there's slashes on every

291
00:08:33,440 --> 00:08:36,719
line except for the system so

292
00:08:35,120 --> 00:08:38,959
so here we're going to walk through this

293
00:08:36,719 --> 00:08:42,240
piece of jcl right now

294
00:08:38,958 --> 00:08:45,920
so first we have the job card so this

295
00:08:42,240 --> 00:08:47,519
is the high level like the first thing

296
00:08:45,920 --> 00:08:48,399
that it needs to process it's got the

297
00:08:47,519 --> 00:08:50,240
job name

298
00:08:48,399 --> 00:08:52,240
it has the word job it has accounting

299
00:08:50,240 --> 00:08:53,519
data it has you know the name of the

300
00:08:52,240 --> 00:08:55,839
person running it

301
00:08:53,519 --> 00:08:57,279
and like if you want to read the details

302
00:08:55,839 --> 00:08:58,880
of what all this does

303
00:08:57,279 --> 00:09:00,959
the tutorial point has a really good

304
00:08:58,880 --> 00:09:02,640
primer on the job card and

305
00:09:00,959 --> 00:09:04,719
all of the things you need for a job

306
00:09:02,640 --> 00:09:06,720
card but that's the job card now notice

307
00:09:04,720 --> 00:09:09,040
i have commas that do line continuation

308
00:09:06,720 --> 00:09:12,000
i am missing a comma at the end here

309
00:09:09,040 --> 00:09:13,519
when i took the screenshot but know that

310
00:09:12,000 --> 00:09:15,360
in the later demos you'll see a comma

311
00:09:13,519 --> 00:09:18,880
here but basically it means

312
00:09:15,360 --> 00:09:21,360
you have this job that is owned by

313
00:09:18,880 --> 00:09:23,760
this job name and it this is the comment

314
00:09:21,360 --> 00:09:25,920
it's owned by this person

315
00:09:23,760 --> 00:09:27,279
next you have the step so this is the

316
00:09:25,920 --> 00:09:28,000
job step that's going to run this is the

317
00:09:27,279 --> 00:09:29,519
first step

318
00:09:28,000 --> 00:09:30,880
you can have multiple steps but this is

319
00:09:29,519 --> 00:09:31,920
really the first step that's going to

320
00:09:30,880 --> 00:09:34,160
execute

321
00:09:31,920 --> 00:09:36,000
once that job gets submitted i called

322
00:09:34,160 --> 00:09:37,680
the step run cmd

323
00:09:36,000 --> 00:09:39,600
you could call it whatever you want i

324
00:09:37,680 --> 00:09:41,199
was just being clever you could call it

325
00:09:39,600 --> 00:09:42,480
step one you could thought now mind you

326
00:09:41,200 --> 00:09:43,440
can only call it something that's eight

327
00:09:42,480 --> 00:09:44,880
characters long

328
00:09:43,440 --> 00:09:46,560
or short you can't call it anything

329
00:09:44,880 --> 00:09:48,480
longer than eight characters so you

330
00:09:46,560 --> 00:09:50,479
would have like a job

331
00:09:48,480 --> 00:09:52,000
one two three four five six right you

332
00:09:50,480 --> 00:09:54,320
could have maybe can't start with a

333
00:09:52,000 --> 00:09:55,839
number but you have all kinds of things

334
00:09:54,320 --> 00:09:58,160
less than eight characters and then you

335
00:09:55,839 --> 00:09:59,680
have an execute and then you have like a

336
00:09:58,160 --> 00:10:01,040
program and the program here is the

337
00:09:59,680 --> 00:10:04,160
program that's gonna run so we're gonna

338
00:10:01,040 --> 00:10:05,079
execute program and the program is

339
00:10:04,160 --> 00:10:07,439
called

340
00:10:05,079 --> 00:10:09,439
ikjeff01 wrestling skills yes i'll make

341
00:10:07,440 --> 00:10:13,600
the slides available after the talk

342
00:10:09,440 --> 00:10:14,160
and so f01 ikjeff01 is a program that

343
00:10:13,600 --> 00:10:17,200
runs

344
00:10:14,160 --> 00:10:20,560
commands in tso so this is a job

345
00:10:17,200 --> 00:10:21,600
that will run commands in tso next we

346
00:10:20,560 --> 00:10:23,680
have the output

347
00:10:21,600 --> 00:10:25,120
where is the output from our job going

348
00:10:23,680 --> 00:10:26,800
to go and right now we're just pointing

349
00:10:25,120 --> 00:10:29,040
it to sysout which is like

350
00:10:26,800 --> 00:10:30,479
a log and you can go view the logs for

351
00:10:29,040 --> 00:10:33,760
all your jobs

352
00:10:30,480 --> 00:10:36,800
and then you have the input so so c

353
00:10:33,760 --> 00:10:38,399
cis ts in is kind of like

354
00:10:36,800 --> 00:10:40,079
it's like a flag so here's the input and

355
00:10:38,399 --> 00:10:40,800
now this is inline data so you see that

356
00:10:40,079 --> 00:10:41,760
star

357
00:10:40,800 --> 00:10:44,319
and then we have the commands we're

358
00:10:41,760 --> 00:10:47,279
going to run lu and list cat

359
00:10:44,320 --> 00:10:47,839
okay these two together imagine so like

360
00:10:47,279 --> 00:10:49,519
when i

361
00:10:47,839 --> 00:10:51,600
explain this to people imagine this is

362
00:10:49,519 --> 00:10:55,600
like i'm on bash and i type

363
00:10:51,600 --> 00:10:58,959
i type ikjeff01 space

364
00:10:55,600 --> 00:11:02,000
dash cis tsprt equals

365
00:10:58,959 --> 00:11:05,518
you know var log space

366
00:11:02,000 --> 00:11:06,640
dash cis tsn equals and then in quotes

367
00:11:05,519 --> 00:11:08,000
these two commands

368
00:11:06,640 --> 00:11:09,920
right that's how you sort of read this

369
00:11:08,000 --> 00:11:12,399
if you're coming from like a linux

370
00:11:09,920 --> 00:11:13,519
unixy type world which is where i came

371
00:11:12,399 --> 00:11:15,440
from but that's how you have to

372
00:11:13,519 --> 00:11:16,720
understand this

373
00:11:15,440 --> 00:11:18,240
there's all kinds of things you can do

374
00:11:16,720 --> 00:11:20,320
with jobs that are really impressive you

375
00:11:18,240 --> 00:11:22,399
can submit jobs as other users so here

376
00:11:20,320 --> 00:11:23,040
for example we put in the user equals

377
00:11:22,399 --> 00:11:26,240
play

378
00:11:23,040 --> 00:11:29,040
now there are controls in place so

379
00:11:26,240 --> 00:11:30,720
you can't just submit a job as any user

380
00:11:29,040 --> 00:11:32,800
on the planet

381
00:11:30,720 --> 00:11:34,480
right you have to submit jobs that

382
00:11:32,800 --> 00:11:35,279
you're allowed to submit users ads this

383
00:11:34,480 --> 00:11:38,160
is called

384
00:11:35,279 --> 00:11:40,480
surrogate authority on in rack f if i

385
00:11:38,160 --> 00:11:42,240
put user equals play and i don't have

386
00:11:40,480 --> 00:11:44,640
the authority to submit jobs of that

387
00:11:42,240 --> 00:11:46,160
user then the job won't run it'll come

388
00:11:44,640 --> 00:11:49,199
back and say access denied

389
00:11:46,160 --> 00:11:51,439
unless i add the other option here

390
00:11:49,200 --> 00:11:53,200
of password i can put user equals plague

391
00:11:51,440 --> 00:11:55,839
comma password equals love

392
00:11:53,200 --> 00:11:57,600
and now i can submit jobs as that user

393
00:11:55,839 --> 00:11:59,040
but we'll see that's not always the case

394
00:11:57,600 --> 00:11:59,839
as we stop start talking about network

395
00:11:59,040 --> 00:12:02,560
job entry

396
00:11:59,839 --> 00:12:04,320
and how we can take advantage of that so

397
00:12:02,560 --> 00:12:05,599
you saw already we said those dd

398
00:12:04,320 --> 00:12:07,120
statements let me go back here you see

399
00:12:05,600 --> 00:12:10,079
this dd here

400
00:12:07,120 --> 00:12:12,160
right these are called data disposition

401
00:12:10,079 --> 00:12:13,839
and that says like where is

402
00:12:12,160 --> 00:12:15,680
the input and where is the output so

403
00:12:13,839 --> 00:12:18,399
like if you say

404
00:12:15,680 --> 00:12:19,760
if it's expecting data then the dd sort

405
00:12:18,399 --> 00:12:21,519
of defined where that data is going to

406
00:12:19,760 --> 00:12:25,040
come from so you have like

407
00:12:21,519 --> 00:12:26,800
a dsn equals some place so let's say for

408
00:12:25,040 --> 00:12:30,079
example i'm going to do sis out

409
00:12:26,800 --> 00:12:33,279
i'm going to do this at cist

410
00:12:30,079 --> 00:12:36,319
prt which stands for print

411
00:12:33,279 --> 00:12:39,240
i'm going to put that in a file called

412
00:12:36,320 --> 00:12:40,639
so dsn equals data set name equals

413
00:12:39,240 --> 00:12:41,680
wildwesthackingfest.jobad right that's

414
00:12:40,639 --> 00:12:43,040
where i'm going to put

415
00:12:41,680 --> 00:12:44,719
the output instead of putting in the log

416
00:12:43,040 --> 00:12:46,480
i'm going to dump it there you can put

417
00:12:44,720 --> 00:12:48,000
it to a temporary data set and when the

418
00:12:46,480 --> 00:12:49,600
job is done running that temporary data

419
00:12:48,000 --> 00:12:52,560
set gets destroyed

420
00:12:49,600 --> 00:12:53,600
you have cis out equals that's like the

421
00:12:52,560 --> 00:12:57,359
output log

422
00:12:53,600 --> 00:12:59,200
and then you have star right star means

423
00:12:57,360 --> 00:13:01,600
anything now you can't do star for

424
00:12:59,200 --> 00:13:03,040
output but you can do star for input

425
00:13:01,600 --> 00:13:05,120
that means basically anything until it

426
00:13:03,040 --> 00:13:07,680
hits another

427
00:13:05,120 --> 00:13:08,720
job card like a slash slash just read it

428
00:13:07,680 --> 00:13:10,239
as inline data

429
00:13:08,720 --> 00:13:12,720
there's all kinds of fun programs that

430
00:13:10,240 --> 00:13:13,440
you can run in jcl the ieb jenner is

431
00:13:12,720 --> 00:13:16,399
like create

432
00:13:13,440 --> 00:13:17,040
move files do all kinds of cool stuff

433
00:13:16,399 --> 00:13:20,320
copy

434
00:13:17,040 --> 00:13:21,279
delete bpx batch is execute commands in

435
00:13:20,320 --> 00:13:22,480
unix

436
00:13:21,279 --> 00:13:24,399
i don't really have the time in this

437
00:13:22,480 --> 00:13:25,839
talk to get around like talk about units

438
00:13:24,399 --> 00:13:27,200
in detail but know that unix is part of

439
00:13:25,839 --> 00:13:28,800
the z os operating system and it

440
00:13:27,200 --> 00:13:30,000
controls networking

441
00:13:28,800 --> 00:13:32,000
it's a part of the operating system it's

442
00:13:30,000 --> 00:13:36,639
not like a vm or something

443
00:13:32,000 --> 00:13:39,600
and then isr c which stands for super c

444
00:13:36,639 --> 00:13:40,720
which is a diff and grep married

445
00:13:39,600 --> 00:13:42,480
together

446
00:13:40,720 --> 00:13:44,399
so if you have if you want to find like

447
00:13:42,480 --> 00:13:46,079
the word password in a bunch of data

448
00:13:44,399 --> 00:13:46,639
sets you would use super c to do that

449
00:13:46,079 --> 00:13:49,599
search

450
00:13:46,639 --> 00:13:50,079
and then finally iafbr 14 which is the

451
00:13:49,600 --> 00:13:52,800
the

452
00:13:50,079 --> 00:13:54,000
knot of jcl programs it literally does

453
00:13:52,800 --> 00:13:56,560
nothing it just returns

454
00:13:54,000 --> 00:13:58,160
zero it has no function other than that

455
00:13:56,560 --> 00:14:00,160
but that exists because then you can do

456
00:13:58,160 --> 00:14:02,639
things with input and output data like

457
00:14:00,160 --> 00:14:04,240
create new data sets or copy a data set

458
00:14:02,639 --> 00:14:05,680
or delete a data set like i don't want

459
00:14:04,240 --> 00:14:07,600
to then i'm going to do some

460
00:14:05,680 --> 00:14:09,439
i'm just going to use ifr 14 to do some

461
00:14:07,600 --> 00:14:11,040
stuff once you have your job

462
00:14:09,440 --> 00:14:12,480
all set to go once you've written it all

463
00:14:11,040 --> 00:14:15,680
up and it's ready to go

464
00:14:12,480 --> 00:14:17,040
you submit when you submit a job it runs

465
00:14:15,680 --> 00:14:18,800
as your user id

466
00:14:17,040 --> 00:14:20,560
in the inside the operating system

467
00:14:18,800 --> 00:14:23,760
there's a job header that says

468
00:14:20,560 --> 00:14:25,760
this job was submitted by this user in

469
00:14:23,760 --> 00:14:26,959
nje we'll talk about that header when we

470
00:14:25,760 --> 00:14:28,319
get to it but

471
00:14:26,959 --> 00:14:30,000
that's how it runs so you submit a job

472
00:14:28,320 --> 00:14:32,079
it runs as your user id unless

473
00:14:30,000 --> 00:14:33,760
you have the user equals then it goes

474
00:14:32,079 --> 00:14:37,279
into your user id and then checks

475
00:14:33,760 --> 00:14:38,639
is this user allowed to turn into this

476
00:14:37,279 --> 00:14:41,040
other user and if not

477
00:14:38,639 --> 00:14:42,000
then no they can't do that right and

478
00:14:41,040 --> 00:14:43,439
then

479
00:14:42,000 --> 00:14:44,639
and then you just type submit in tsl

480
00:14:43,440 --> 00:14:46,000
youtube submit and it goes so this is

481
00:14:44,639 --> 00:14:48,079
this is going to be an example of us

482
00:14:46,000 --> 00:14:49,760
submitting a job submit so here's a job

483
00:14:48,079 --> 00:14:52,399
it just lists

484
00:14:49,760 --> 00:14:54,319
my user id like who am i and then this

485
00:14:52,399 --> 00:14:56,240
the catalog was like an ls almost

486
00:14:54,320 --> 00:14:59,760
and now we're in sdsf and now we can

487
00:14:56,240 --> 00:15:02,320
view the output of the log here

488
00:14:59,760 --> 00:15:03,920
and if you go to to the output of the

489
00:15:02,320 --> 00:15:06,560
step run cmd

490
00:15:03,920 --> 00:15:08,639
you can see there's my user id and

491
00:15:06,560 --> 00:15:11,439
here's a whole bunch of information

492
00:15:08,639 --> 00:15:12,000
that's running in this in this script

493
00:15:11,440 --> 00:15:13,440
right so

494
00:15:12,000 --> 00:15:16,399
so it's just running tso commands

495
00:15:13,440 --> 00:15:16,399
running in sdsf

496
00:15:16,560 --> 00:15:21,439
now jcl is very powerful most people are

497
00:15:20,160 --> 00:15:24,959
surprised to find out

498
00:15:21,440 --> 00:15:27,920
that you can run a high level assembler

499
00:15:24,959 --> 00:15:29,758
in through jcl the room metasploit like

500
00:15:27,920 --> 00:15:32,399
from metasploit

501
00:15:29,759 --> 00:15:33,920
so if you if if you have metasploit on

502
00:15:32,399 --> 00:15:34,720
your system right now you can look up

503
00:15:33,920 --> 00:15:37,839
this won't this

504
00:15:34,720 --> 00:15:39,120
this exploit it's the ftp one and you

505
00:15:37,839 --> 00:15:41,920
can actually generate

506
00:15:39,120 --> 00:15:43,279
uh high levels of payloads that will run

507
00:15:41,920 --> 00:15:45,759
on z os

508
00:15:43,279 --> 00:15:46,720
through like using jcl so it'll create

509
00:15:45,759 --> 00:15:48,880
jcl

510
00:15:46,720 --> 00:15:49,759
and in jcl you have like compile link

511
00:15:48,880 --> 00:15:52,000
and go

512
00:15:49,759 --> 00:15:53,680
jcl which will compile the program then

513
00:15:52,000 --> 00:15:55,440
link it and then run it

514
00:15:53,680 --> 00:15:57,120
and then delete it from from memory when

515
00:15:55,440 --> 00:15:58,959
it's done running so so here's an

516
00:15:57,120 --> 00:16:01,839
example of metasploit

517
00:15:58,959 --> 00:16:03,199
using ftp creds getting a reverse shell

518
00:16:01,839 --> 00:16:05,199
on a mainframe

519
00:16:03,199 --> 00:16:06,639
super i mean as long as you have if you

520
00:16:05,199 --> 00:16:08,560
have ftp credentials to make frame you

521
00:16:06,639 --> 00:16:10,320
can get a reverse shell

522
00:16:08,560 --> 00:16:12,319
this is this is this was done by big

523
00:16:10,320 --> 00:16:13,839
endian smalls as well he wrote this

524
00:16:12,320 --> 00:16:14,800
module from edit floyd he did all the

525
00:16:13,839 --> 00:16:16,320
work here but again

526
00:16:14,800 --> 00:16:18,880
that goes by real fast so i'll show you

527
00:16:16,320 --> 00:16:21,120
the two again here we go we're connected

528
00:16:18,880 --> 00:16:22,320
we have we have a this is a bind shell

529
00:16:21,120 --> 00:16:24,639
that i used

530
00:16:22,320 --> 00:16:26,639
and now i'm running as these are phil

531
00:16:24,639 --> 00:16:28,560
and i'm running on zls so you can see

532
00:16:26,639 --> 00:16:30,320
i'm running in z os

533
00:16:28,560 --> 00:16:32,160
to summarize about jcl because it's

534
00:16:30,320 --> 00:16:33,839
important to understand jcl's we get

535
00:16:32,160 --> 00:16:35,920
because that's what that's what jazz

536
00:16:33,839 --> 00:16:36,959
does and network job entry is running on

537
00:16:35,920 --> 00:16:39,680
jets

538
00:16:36,959 --> 00:16:41,359
jsl is used to control jobs how the

539
00:16:39,680 --> 00:16:44,079
steps and input and output

540
00:16:41,360 --> 00:16:45,279
you can run tso and or unix commands

541
00:16:44,079 --> 00:16:48,000
through jcl

542
00:16:45,279 --> 00:16:49,439
you can compile code and it runs as your

543
00:16:48,000 --> 00:16:51,680
user unless you put user equals in the

544
00:16:49,440 --> 00:16:54,399
job card so that's all you need to know

545
00:16:51,680 --> 00:16:55,439
for for this now i don't see any

546
00:16:54,399 --> 00:16:56,720
questions in the chat so i'm going to

547
00:16:55,440 --> 00:16:58,560
keep going here

548
00:16:56,720 --> 00:17:00,160
if if what we've talked about so far

549
00:16:58,560 --> 00:17:01,839
wasn't dense

550
00:17:00,160 --> 00:17:03,600
then good because it's about to get even

551
00:17:01,839 --> 00:17:05,039
more dense when i submitted this i

552
00:17:03,600 --> 00:17:06,319
submitted this as a very technical talk

553
00:17:05,039 --> 00:17:08,079
so buckle up

554
00:17:06,319 --> 00:17:10,240
so imagine if you will you're at a

555
00:17:08,079 --> 00:17:11,438
corporation and you have offices in

556
00:17:10,240 --> 00:17:14,079
miami

557
00:17:11,439 --> 00:17:16,079
and orlando and you have some data in

558
00:17:14,079 --> 00:17:17,599
orlando that you want to do some work on

559
00:17:16,079 --> 00:17:19,280
but you're connected locally to the

560
00:17:17,599 --> 00:17:21,198
mainframe in miami

561
00:17:19,280 --> 00:17:22,559
so you're going to use network job entry

562
00:17:21,199 --> 00:17:24,079
this is what it was designed for it was

563
00:17:22,559 --> 00:17:25,760
designed so that you if you have local

564
00:17:24,079 --> 00:17:27,359
processing power or a smaller machine

565
00:17:25,760 --> 00:17:28,960
you have a bigger machine somewhere else

566
00:17:27,359 --> 00:17:30,639
no need to connect to it just submit the

567
00:17:28,960 --> 00:17:31,440
job and then it'll come back when it's

568
00:17:30,640 --> 00:17:34,120
done

569
00:17:31,440 --> 00:17:35,600
right so here's an example job again

570
00:17:34,120 --> 00:17:38,479
ikjeff01

571
00:17:35,600 --> 00:17:39,280
going to be running a command lu on a

572
00:17:38,480 --> 00:17:40,559
different system

573
00:17:39,280 --> 00:17:44,080
the important thing is here that it's

574
00:17:40,559 --> 00:17:44,080
going to run in orlando so

575
00:17:44,240 --> 00:17:48,799
here we are map of florida we have one

576
00:17:45,760 --> 00:17:51,280
mainframe we have another mainframe

577
00:17:48,799 --> 00:17:51,918
i'm gonna send a job up so that job that

578
00:17:51,280 --> 00:17:54,160
we have here

579
00:17:51,919 --> 00:17:55,840
it's gonna run on a target system called

580
00:17:54,160 --> 00:17:57,200
orlando that's the name of the system

581
00:17:55,840 --> 00:18:00,480
that we're gonna run it on

582
00:17:57,200 --> 00:18:02,400
so we have orlando it's going to go up

583
00:18:00,480 --> 00:18:03,520
to orlando it's going to do what it

584
00:18:02,400 --> 00:18:04,720
needs to do

585
00:18:03,520 --> 00:18:07,760
and it's going to come back with the

586
00:18:04,720 --> 00:18:09,679
results that's all network job entry

587
00:18:07,760 --> 00:18:11,919
is really doing so that's network job

588
00:18:09,679 --> 00:18:13,440
entry the way it works is what we're

589
00:18:11,919 --> 00:18:16,720
going to talk about in a few minutes

590
00:18:13,440 --> 00:18:18,960
but know that all it's really is for is

591
00:18:16,720 --> 00:18:21,280
i have a job i want to run it somewhere

592
00:18:18,960 --> 00:18:22,720
else and get the results back

593
00:18:21,280 --> 00:18:24,639
and most companies have more than one

594
00:18:22,720 --> 00:18:25,760
mainframe and so they use network job

595
00:18:24,640 --> 00:18:26,480
entry to control all the different

596
00:18:25,760 --> 00:18:28,480
mainframes

597
00:18:26,480 --> 00:18:29,919
instead of having to log into like all

598
00:18:28,480 --> 00:18:31,600
ten of your lpars

599
00:18:29,919 --> 00:18:33,200
some terminology that that we have here

600
00:18:31,600 --> 00:18:35,360
so so nje

601
00:18:33,200 --> 00:18:36,320
stands for network job entry you have

602
00:18:35,360 --> 00:18:39,039
the node

603
00:18:36,320 --> 00:18:40,240
which is the name of a system running ng

604
00:18:39,039 --> 00:18:43,760
you need to know the node

605
00:18:40,240 --> 00:18:47,039
you have our host which is sort of i'm

606
00:18:43,760 --> 00:18:49,280
miami connecting into orlando then i

607
00:18:47,039 --> 00:18:50,160
they our host would be orlando and my o

608
00:18:49,280 --> 00:18:53,039
host

609
00:18:50,160 --> 00:18:53,520
would be maya does that like that this

610
00:18:53,039 --> 00:18:54,960
is

611
00:18:53,520 --> 00:18:56,720
it's always confusing to me i always get

612
00:18:54,960 --> 00:18:59,280
it wrong until i look it up

613
00:18:56,720 --> 00:19:00,880
but our hosts on oas are very very very

614
00:18:59,280 --> 00:19:02,160
important okay so how does it work

615
00:19:00,880 --> 00:19:04,000
so first you got to set it up in just

616
00:19:02,160 --> 00:19:04,880
two on both systems

617
00:19:04,000 --> 00:19:06,000
and then we're going to talk about the

618
00:19:04,880 --> 00:19:07,760
protocol and we're going to talk about a

619
00:19:06,000 --> 00:19:10,240
python library that i've created

620
00:19:07,760 --> 00:19:11,200
to make working with nje easier for

621
00:19:10,240 --> 00:19:14,080
everyone else

622
00:19:11,200 --> 00:19:15,679
so first just2 runs on tcp i mean it

623
00:19:14,080 --> 00:19:18,879
also runs an sna

624
00:19:15,679 --> 00:19:19,440
but most people run it over tcp it needs

625
00:19:18,880 --> 00:19:21,440
to know

626
00:19:19,440 --> 00:19:22,799
its own node name so it has its own node

627
00:19:21,440 --> 00:19:23,600
name it needs to know and it needs to

628
00:19:22,799 --> 00:19:25,440
know

629
00:19:23,600 --> 00:19:26,879
where to connect and who to accept

630
00:19:25,440 --> 00:19:28,720
connections from

631
00:19:26,880 --> 00:19:30,320
that's and that's really just done in a

632
00:19:28,720 --> 00:19:32,480
simple config so you have

633
00:19:30,320 --> 00:19:33,360
uh this is it this is all it takes to to

634
00:19:32,480 --> 00:19:35,520
run

635
00:19:33,360 --> 00:19:37,120
network job entry so you have how many

636
00:19:35,520 --> 00:19:39,200
nodes you're going to have the node num

637
00:19:37,120 --> 00:19:40,559
your hum you know your own node like

638
00:19:39,200 --> 00:19:42,320
what's your node number you know number

639
00:19:40,559 --> 00:19:43,840
one or you know number ten

640
00:19:42,320 --> 00:19:45,678
and then how many lines do you have you

641
00:19:43,840 --> 00:19:47,760
have one line you have ten lines

642
00:19:45,679 --> 00:19:49,600
and then you're going to define the

643
00:19:47,760 --> 00:19:50,320
nodes so in some places so for example

644
00:19:49,600 --> 00:19:51,678
the reason

645
00:19:50,320 --> 00:19:53,200
really this kicked off is because when i

646
00:19:51,679 --> 00:19:54,320
was at visa they had a whole bunch of

647
00:19:53,200 --> 00:19:57,039
nodes in here

648
00:19:54,320 --> 00:19:58,000
and a bunch of them were were

649
00:19:57,039 --> 00:20:00,879
decommissioned

650
00:19:58,000 --> 00:20:02,159
but they were still running inside the

651
00:20:00,880 --> 00:20:02,960
environment right so they were still

652
00:20:02,159 --> 00:20:05,360
waiting like

653
00:20:02,960 --> 00:20:06,720
the mainframe like nje network was

654
00:20:05,360 --> 00:20:07,439
waiting for connections from those

655
00:20:06,720 --> 00:20:09,360
systems

656
00:20:07,440 --> 00:20:11,840
even though they didn't exist anymore so

657
00:20:09,360 --> 00:20:14,000
you have your nodes so node one node two

658
00:20:11,840 --> 00:20:15,039
and then netserv you set up you know the

659
00:20:14,000 --> 00:20:17,679
sockets and whatnot

660
00:20:15,039 --> 00:20:18,320
and the bottom here socket water node

661
00:20:17,679 --> 00:20:20,960
two

662
00:20:18,320 --> 00:20:22,480
so we're gonna to use note2 to connect

663
00:20:20,960 --> 00:20:25,200
to this ip address

664
00:20:22,480 --> 00:20:26,880
this is not white listing this is not a

665
00:20:25,200 --> 00:20:29,120
a way to

666
00:20:26,880 --> 00:20:30,480
say if only accept connections from this

667
00:20:29,120 --> 00:20:30,959
ip address that's not how this works

668
00:20:30,480 --> 00:20:32,320
what this

669
00:20:30,960 --> 00:20:34,720
what this is saying down here with the

670
00:20:32,320 --> 00:20:37,360
ip address equals down down here

671
00:20:34,720 --> 00:20:39,440
is when you're ready i will try to

672
00:20:37,360 --> 00:20:40,399
connect to that system on that ip

673
00:20:39,440 --> 00:20:41,919
address

674
00:20:40,400 --> 00:20:43,840
but if it comes from any other ip

675
00:20:41,919 --> 00:20:45,360
address cool even better

676
00:20:43,840 --> 00:20:47,039
like if it connects in from a different

677
00:20:45,360 --> 00:20:48,959
like a 10 10 10 10

678
00:20:47,039 --> 00:20:50,400
cool i'll accept that connection right

679
00:20:48,960 --> 00:20:51,840
so it's not white listing it's just you

680
00:20:50,400 --> 00:20:52,960
can also add other things in here like a

681
00:20:51,840 --> 00:20:54,799
password

682
00:20:52,960 --> 00:20:56,080
so in the config file there is a

683
00:20:54,799 --> 00:20:58,320
password that you can set

684
00:20:56,080 --> 00:20:59,918
you can also set it up to use a tls

685
00:20:58,320 --> 00:21:01,600
security if you wanted to

686
00:20:59,919 --> 00:21:02,799
you can also the best way to do it

687
00:21:01,600 --> 00:21:03,760
really if you're going to set up if you

688
00:21:02,799 --> 00:21:05,918
look at nge

689
00:21:03,760 --> 00:21:07,280
is you really want um certificate

690
00:21:05,919 --> 00:21:08,240
authentication right

691
00:21:07,280 --> 00:21:09,600
lots of places don't have any

692
00:21:08,240 --> 00:21:10,400
authentication if they do have

693
00:21:09,600 --> 00:21:12,480
authentication

694
00:21:10,400 --> 00:21:13,520
it's authentication with a password but

695
00:21:12,480 --> 00:21:15,039
the password is

696
00:21:13,520 --> 00:21:16,960
in the config file so you can just read

697
00:21:15,039 --> 00:21:18,320
it and lots of places say oh read only

698
00:21:16,960 --> 00:21:18,720
that's not a that's not a big deal who

699
00:21:18,320 --> 00:21:20,799
cares

700
00:21:18,720 --> 00:21:22,480
right that's all you need to set up

701
00:21:20,799 --> 00:21:24,400
network job entry starting it up

702
00:21:22,480 --> 00:21:25,760
this is i'm only putting this out there

703
00:21:24,400 --> 00:21:26,400
in case anyone really wants to do this

704
00:21:25,760 --> 00:21:28,320
at home

705
00:21:26,400 --> 00:21:29,360
very rare but this is what so this is

706
00:21:28,320 --> 00:21:30,080
what it looks like when you start it up

707
00:21:29,360 --> 00:21:31,678
so you start up

708
00:21:30,080 --> 00:21:33,600
you turn on all the communication

709
00:21:31,679 --> 00:21:34,880
protocols and then you say i want to

710
00:21:33,600 --> 00:21:38,080
connect this node

711
00:21:34,880 --> 00:21:39,760
on line one to the mainframe water

712
00:21:38,080 --> 00:21:41,360
and then it'll start going right so we

713
00:21:39,760 --> 00:21:41,840
have these two nodes here so so if i'm

714
00:21:41,360 --> 00:21:44,320
smog

715
00:21:41,840 --> 00:21:45,760
it'll connect into water at this point

716
00:21:44,320 --> 00:21:46,399
it's just listening so if water didn't

717
00:21:45,760 --> 00:21:49,280
exist

718
00:21:46,400 --> 00:21:52,320
it tries to connect like three one like

719
00:21:49,280 --> 00:21:54,320
whatever 3.3.3.3 and it doesn't exist

720
00:21:52,320 --> 00:21:56,399
so then it just waits and it sits and it

721
00:21:54,320 --> 00:21:58,960
listens on port 175.

722
00:21:56,400 --> 00:21:59,600
back in see do i talk about the yeah

723
00:21:58,960 --> 00:22:03,440
okay

724
00:21:59,600 --> 00:22:04,480
so back a few years ago i wrote a probe

725
00:22:03,440 --> 00:22:06,640
for nmap

726
00:22:04,480 --> 00:22:08,159
and then ibm pushed an update and now

727
00:22:06,640 --> 00:22:09,679
that pro doesn't work anymore so just

728
00:22:08,159 --> 00:22:13,200
know if you're on port 175

729
00:22:09,679 --> 00:22:16,640
or 2252 that's likely nje

730
00:22:13,200 --> 00:22:19,679
on the mainframe okay now

731
00:22:16,640 --> 00:22:22,320
time to get real into the protocol for

732
00:22:19,679 --> 00:22:24,400
network job entry

733
00:22:22,320 --> 00:22:26,879
this is this this is the sort of stack

734
00:22:24,400 --> 00:22:29,039
so on top of tcpip so you have all your

735
00:22:26,880 --> 00:22:30,000
tcp handshakes and session handling and

736
00:22:29,039 --> 00:22:31,679
all that stuff

737
00:22:30,000 --> 00:22:33,200
but now we're going to talk about i see

738
00:22:31,679 --> 00:22:34,640
your chats beginning small

739
00:22:33,200 --> 00:22:37,440
we're going to talk about the open of

740
00:22:34,640 --> 00:22:40,720
the connection sending all the data

741
00:22:37,440 --> 00:22:42,559
and why how would you use the uh

742
00:22:40,720 --> 00:22:43,840
a response for the open handshake to do

743
00:22:42,559 --> 00:22:46,158
brute forcing stuff

744
00:22:43,840 --> 00:22:47,120
but looking at the eye record so there's

745
00:22:46,159 --> 00:22:49,840
all kinds of

746
00:22:47,120 --> 00:22:51,280
control records and then and then ctf

747
00:22:49,840 --> 00:22:52,399
our ttb compression all this stuff we're

748
00:22:51,280 --> 00:22:55,600
gonna talk all about this

749
00:22:52,400 --> 00:22:56,320
in the next like 20 minutes so first we

750
00:22:55,600 --> 00:23:00,080
have to connect

751
00:22:56,320 --> 00:23:02,320
on on port 175 and unlike most protocols

752
00:23:00,080 --> 00:23:03,439
you connect there's nothing there's

753
00:23:02,320 --> 00:23:06,399
literally nothing

754
00:23:03,440 --> 00:23:07,039
there's no there's no information all

755
00:23:06,400 --> 00:23:09,280
you have is an

756
00:23:07,039 --> 00:23:10,879
open socket and until even and if you

757
00:23:09,280 --> 00:23:11,678
send garbage data it doesn't send any

758
00:23:10,880 --> 00:23:12,880
data back

759
00:23:11,679 --> 00:23:15,360
you have to act you have to send an

760
00:23:12,880 --> 00:23:18,400
exact initialization packet

761
00:23:15,360 --> 00:23:21,520
to get everything moving right so

762
00:23:18,400 --> 00:23:23,039
that's called the the connection request

763
00:23:21,520 --> 00:23:25,039
right so when you when you open up a

764
00:23:23,039 --> 00:23:26,400
first connection you have to send a

765
00:23:25,039 --> 00:23:29,840
packet that is

766
00:23:26,400 --> 00:23:31,440
33 bytes in length exactly and it has to

767
00:23:29,840 --> 00:23:32,639
have all this information in it so you

768
00:23:31,440 --> 00:23:34,880
have to have

769
00:23:32,640 --> 00:23:35,679
the type am i going to be open ack or

770
00:23:34,880 --> 00:23:39,440
mac

771
00:23:35,679 --> 00:23:41,200
what type like what's my name am i

772
00:23:39,440 --> 00:23:42,720
is it miami is it someone else so say

773
00:23:41,200 --> 00:23:45,440
for example another example

774
00:23:42,720 --> 00:23:46,480
water and smog i'm i'm water connecting

775
00:23:45,440 --> 00:23:49,679
into smog

776
00:23:46,480 --> 00:23:50,000
i would my r host is water and the o

777
00:23:49,679 --> 00:23:52,480
host

778
00:23:50,000 --> 00:23:53,840
is smog and then we have our ip address

779
00:23:52,480 --> 00:23:57,120
and their ip address

780
00:23:53,840 --> 00:24:00,879
in hex and then the reason code back

781
00:23:57,120 --> 00:24:02,799
in version 113 of z os

782
00:24:00,880 --> 00:24:04,159
the reason code would come that

783
00:24:02,799 --> 00:24:05,520
different if

784
00:24:04,159 --> 00:24:07,840
so say for example there used to be a

785
00:24:05,520 --> 00:24:11,440
way to brute force a mainframe's

786
00:24:07,840 --> 00:24:13,439
co-host because the r the reason code

787
00:24:11,440 --> 00:24:16,240
would come back with a two

788
00:24:13,440 --> 00:24:17,600
if if you got so like it would assume i

789
00:24:16,240 --> 00:24:19,919
guess that you had

790
00:24:17,600 --> 00:24:22,000
flipped the o host and r host in the

791
00:24:19,919 --> 00:24:24,240
submission and would come back and say

792
00:24:22,000 --> 00:24:25,600
oh the reason code is is two and that

793
00:24:24,240 --> 00:24:27,200
reason code meant you've

794
00:24:25,600 --> 00:24:28,639
swapped you have you have the right

795
00:24:27,200 --> 00:24:30,480
information you just have them backwards

796
00:24:28,640 --> 00:24:32,720
so you could use that to brute force

797
00:24:30,480 --> 00:24:35,200
the old host of a system can't do that

798
00:24:32,720 --> 00:24:37,440
anymore because ibm silently fixed that

799
00:24:35,200 --> 00:24:38,640
but you can still brute force you know

800
00:24:37,440 --> 00:24:39,600
the system's all hosts you can still

801
00:24:38,640 --> 00:24:41,760
brute force it

802
00:24:39,600 --> 00:24:43,760
our hosts that exist looking at with

803
00:24:41,760 --> 00:24:45,200
wireshark you can actually capture this

804
00:24:43,760 --> 00:24:46,480
in wireshark so if you're using the

805
00:24:45,200 --> 00:24:47,520
clear text protocol this is what it

806
00:24:46,480 --> 00:24:50,480
would look like

807
00:24:47,520 --> 00:24:52,080
in wireshark a lot of acts i know

808
00:24:50,480 --> 00:24:53,679
because big onion smalls is watching

809
00:24:52,080 --> 00:24:55,840
that he already knows that this is

810
00:24:53,679 --> 00:24:58,159
ebcdic because there's lots of 40s

811
00:24:55,840 --> 00:24:59,600
which is at an ascii and i know that

812
00:24:58,159 --> 00:25:00,960
like anyone who does anything with the

813
00:24:59,600 --> 00:25:03,279
mainframe and looking at

814
00:25:00,960 --> 00:25:04,080
at hex you know that if you see a lot of

815
00:25:03,279 --> 00:25:06,960
acts

816
00:25:04,080 --> 00:25:07,918
chances are it's it's ebcdic so when

817
00:25:06,960 --> 00:25:10,000
that happens

818
00:25:07,919 --> 00:25:11,039
i just go into wireshark and i turn

819
00:25:10,000 --> 00:25:12,640
ascii off

820
00:25:11,039 --> 00:25:14,320
and set it to exit you can see there's

821
00:25:12,640 --> 00:25:16,480
episodic right here and i'm just going

822
00:25:14,320 --> 00:25:18,720
to turn on exedic

823
00:25:16,480 --> 00:25:20,880
and now i can see that it's water

824
00:25:18,720 --> 00:25:24,080
communicating trying to open up

825
00:25:20,880 --> 00:25:25,679
a connection to smog right so this is

826
00:25:24,080 --> 00:25:27,120
the initialization handshape like this

827
00:25:25,679 --> 00:25:30,000
is the initialization packet

828
00:25:27,120 --> 00:25:32,239
to connect into a you know mainframe nje

829
00:25:30,000 --> 00:25:34,000
session

830
00:25:32,240 --> 00:25:36,320
so what we we send it open and then it

831
00:25:34,000 --> 00:25:39,600
sends an ack if it doesn't work

832
00:25:36,320 --> 00:25:41,279
if you have the wrong o host or our host

833
00:25:39,600 --> 00:25:43,279
or anything wrong it'll send back a

834
00:25:41,279 --> 00:25:44,880
knack right so

835
00:25:43,279 --> 00:25:46,880
so you can you can use that to your

836
00:25:44,880 --> 00:25:48,559
advantage to try to brute force things

837
00:25:46,880 --> 00:25:51,039
if you know the o-host

838
00:25:48,559 --> 00:25:52,080
next we send what's called a start of

839
00:25:51,039 --> 00:25:55,200
header

840
00:25:52,080 --> 00:25:56,080
and an inquiry packet there's a bunch of

841
00:25:55,200 --> 00:25:57,919
other stuff that goes

842
00:25:56,080 --> 00:25:59,918
into this packet but we have to send a

843
00:25:57,919 --> 00:26:01,840
startup header and an inquiry

844
00:25:59,919 --> 00:26:04,000
but before we do that we have to start

845
00:26:01,840 --> 00:26:07,600
building it's it's like it's like

846
00:26:04,000 --> 00:26:10,720
stacks on top of stacks so you have tcp

847
00:26:07,600 --> 00:26:12,480
and on top of that runs nje so

848
00:26:10,720 --> 00:26:14,240
everything in here is controlling the

849
00:26:12,480 --> 00:26:18,080
length of data length of headers

850
00:26:14,240 --> 00:26:19,520
so we have a ttb and a ttr and the name

851
00:26:18,080 --> 00:26:21,678
i say these are really not they're

852
00:26:19,520 --> 00:26:22,158
documented what they what they do like

853
00:26:21,679 --> 00:26:23,360
how they

854
00:26:22,159 --> 00:26:25,520
they work otherwise i wouldn't have

855
00:26:23,360 --> 00:26:28,080
these slides but the name

856
00:26:25,520 --> 00:26:29,600
is not documented anywhere it doesn't

857
00:26:28,080 --> 00:26:31,199
like i tried to like figure out like i

858
00:26:29,600 --> 00:26:32,959
just assume that the b stands for block

859
00:26:31,200 --> 00:26:36,320
and the r stands for record

860
00:26:32,960 --> 00:26:39,520
so you so you have a ttb which is eight

861
00:26:36,320 --> 00:26:42,559
bytes long of which it only uses

862
00:26:39,520 --> 00:26:43,520
two of those bytes and that contains the

863
00:26:42,559 --> 00:26:46,639
length

864
00:26:43,520 --> 00:26:47,039
of of the whole packet right so you have

865
00:26:46,640 --> 00:26:49,919
like

866
00:26:47,039 --> 00:26:50,960
this packet is going to be x bytes long

867
00:26:49,919 --> 00:26:54,000
here you go

868
00:26:50,960 --> 00:26:55,440
and that's the ttb right and then you

869
00:26:54,000 --> 00:26:59,200
have a ttr

870
00:26:55,440 --> 00:27:00,320
each ttb or block can have multiple

871
00:26:59,200 --> 00:27:03,760
records

872
00:27:00,320 --> 00:27:05,760
and the the records are going to be

873
00:27:03,760 --> 00:27:06,960
they're two bytes for length so you have

874
00:27:05,760 --> 00:27:10,240
to have a ttb

875
00:27:06,960 --> 00:27:11,520
and a ttr so this is our this is the

876
00:27:10,240 --> 00:27:12,080
next thing we have to send so we send

877
00:27:11,520 --> 00:27:14,080
the open

878
00:27:12,080 --> 00:27:15,520
get the app back now we have to send

879
00:27:14,080 --> 00:27:18,720
this start of header

880
00:27:15,520 --> 00:27:20,320
and inquiry like two two bytes but now

881
00:27:18,720 --> 00:27:22,640
we gotta surround it with all this other

882
00:27:20,320 --> 00:27:24,799
information right so we have the ttb

883
00:27:22,640 --> 00:27:25,760
so this is 18 because it includes its

884
00:27:24,799 --> 00:27:28,480
itself

885
00:27:25,760 --> 00:27:30,000
right so this is 18 and you have this

886
00:27:28,480 --> 00:27:31,679
whole length here

887
00:27:30,000 --> 00:27:33,760
that includes the ttr and then a footer

888
00:27:31,679 --> 00:27:35,360
which is always zeros it's always zeros

889
00:27:33,760 --> 00:27:38,240
just four zeros

890
00:27:35,360 --> 00:27:39,918
at this point we can start doing what's

891
00:27:38,240 --> 00:27:43,360
called the sign on request

892
00:27:39,919 --> 00:27:45,360
using network connection control records

893
00:27:43,360 --> 00:27:46,559
i told you it's gonna get dense so a

894
00:27:45,360 --> 00:27:50,240
network control record

895
00:27:46,559 --> 00:27:52,960
is gonna be made up i j k l m

896
00:27:50,240 --> 00:27:55,360
n or b don't care about any of these i

897
00:27:52,960 --> 00:27:57,600
only care about initial sign on

898
00:27:55,360 --> 00:27:59,760
and sign on reply and close connection

899
00:27:57,600 --> 00:28:00,959
so sometimes like so in the

900
00:27:59,760 --> 00:28:02,960
the python script that we're going to

901
00:28:00,960 --> 00:28:04,640
talk about later

902
00:28:02,960 --> 00:28:06,399
it sends closed connection because it's

903
00:28:04,640 --> 00:28:07,600
connects does its thing and then it

904
00:28:06,399 --> 00:28:10,320
sends the closed connection so that

905
00:28:07,600 --> 00:28:12,240
other systems other systems can connect

906
00:28:10,320 --> 00:28:13,600
so i record is made up of a whole bunch

907
00:28:12,240 --> 00:28:15,200
of different fields

908
00:28:13,600 --> 00:28:16,959
but the most important fields within the

909
00:28:15,200 --> 00:28:18,799
eye record are that password that i was

910
00:28:16,960 --> 00:28:22,080
talking about so you can actually have

911
00:28:18,799 --> 00:28:23,520
a password like this is my password and

912
00:28:22,080 --> 00:28:25,520
you're expecting this password so you

913
00:28:23,520 --> 00:28:27,840
can send two separate passwords

914
00:28:25,520 --> 00:28:28,879
in the in the connection request that

915
00:28:27,840 --> 00:28:30,480
are set up in the config so you can

916
00:28:28,880 --> 00:28:32,640
actually set up the config and say

917
00:28:30,480 --> 00:28:34,240
my password is one two three four five

918
00:28:32,640 --> 00:28:35,279
and that system's password is six seven

919
00:28:34,240 --> 00:28:37,919
eight nine ten

920
00:28:35,279 --> 00:28:38,480
and it has to know both when you when

921
00:28:37,919 --> 00:28:40,480
you set up

922
00:28:38,480 --> 00:28:42,240
imagine the nightmare of configuring and

923
00:28:40,480 --> 00:28:44,240
setting all that up though right

924
00:28:42,240 --> 00:28:45,679
so so most people don't do that but if

925
00:28:44,240 --> 00:28:46,559
you wanted to you could try to brute

926
00:28:45,679 --> 00:28:47,840
force those

927
00:28:46,559 --> 00:28:50,240
and that's called the i record so this

928
00:28:47,840 --> 00:28:52,320
is the initialization record to connect

929
00:28:50,240 --> 00:28:54,159
these passwords again are stored in the

930
00:28:52,320 --> 00:28:55,360
config file and to any mainframes or

931
00:28:54,159 --> 00:28:56,960
mainframers watching this

932
00:28:55,360 --> 00:28:58,719
other than big endian smalls after the

933
00:28:56,960 --> 00:29:00,559
fact know that

934
00:28:58,720 --> 00:29:02,080
whenever i say config file i mean harm

935
00:29:00,559 --> 00:29:03,600
lib but

936
00:29:02,080 --> 00:29:06,320
no one no one's going to know what a

937
00:29:03,600 --> 00:29:09,520
parallel i did so i keep using that term

938
00:29:06,320 --> 00:29:12,080
so far we've covered the ttb the ttr

939
00:29:09,520 --> 00:29:13,760
from here on out every packet is going

940
00:29:12,080 --> 00:29:14,720
to have what's called like a dle and an

941
00:29:13,760 --> 00:29:16,799
stx

942
00:29:14,720 --> 00:29:18,159
these are just like ascii control

943
00:29:16,799 --> 00:29:20,320
characters they're control characters

944
00:29:18,159 --> 00:29:22,880
they're in epsodic they're an ascii

945
00:29:20,320 --> 00:29:24,320
it's transmission control so what what

946
00:29:22,880 --> 00:29:26,240
it really means is

947
00:29:24,320 --> 00:29:27,520
we got the last message so like

948
00:29:26,240 --> 00:29:29,520
acknowledge it's like an ax

949
00:29:27,520 --> 00:29:31,039
sin almost like it's it's it's yeah i

950
00:29:29,520 --> 00:29:32,240
acknowledge i got the last message here

951
00:29:31,039 --> 00:29:35,600
comes more data

952
00:29:32,240 --> 00:29:36,480
okay that's what that stands for bcb so

953
00:29:35,600 --> 00:29:39,439
every record

954
00:29:36,480 --> 00:29:40,000
the block control byte is used to track

955
00:29:39,440 --> 00:29:42,960
the current

956
00:29:40,000 --> 00:29:44,640
sequence that we're in this is used so

957
00:29:42,960 --> 00:29:45,840
that you can't just jump on and spoof

958
00:29:44,640 --> 00:29:48,399
and say hey on this

959
00:29:45,840 --> 00:29:49,918
this packet it keeps strict control of

960
00:29:48,399 --> 00:29:52,879
the current sequence

961
00:29:49,919 --> 00:29:53,520
of nje records sending back and forth

962
00:29:52,880 --> 00:29:55,200
when we do the

963
00:29:53,520 --> 00:29:57,440
but it only starts when we send the

964
00:29:55,200 --> 00:29:59,919
first initialization record so if

965
00:29:57,440 --> 00:30:01,200
if i connect into a system my first

966
00:29:59,919 --> 00:30:04,399
one's going to be 80

967
00:30:01,200 --> 00:30:06,559
like hex 80. after that it's hex 80

968
00:30:04,399 --> 00:30:07,918
modulo like whatever the number is so

969
00:30:06,559 --> 00:30:10,720
like number 10 12

970
00:30:07,919 --> 00:30:11,679
whatever it is modulo 16. right so when

971
00:30:10,720 --> 00:30:13,279
i connect

972
00:30:11,679 --> 00:30:15,200
i start off so you'll see in a second

973
00:30:13,279 --> 00:30:17,039
like our first initial like our bcb

974
00:30:15,200 --> 00:30:18,559
is 80. as we start doing more

975
00:30:17,039 --> 00:30:22,879
communications it goes up

976
00:30:18,559 --> 00:30:25,120
and then circles around the fcs

977
00:30:22,880 --> 00:30:26,399
fcs is the function control sequence

978
00:30:25,120 --> 00:30:29,360
it's two bytes long

979
00:30:26,399 --> 00:30:30,239
and it's the current stream so when

980
00:30:29,360 --> 00:30:31,439
you're connected in

981
00:30:30,240 --> 00:30:34,080
and you're communicating data back and

982
00:30:31,440 --> 00:30:36,799
forth it just identifies as this stream

983
00:30:34,080 --> 00:30:38,399
is this data that's all that's all that

984
00:30:36,799 --> 00:30:39,520
means it's the identifier for that

985
00:30:38,399 --> 00:30:41,760
stream

986
00:30:39,520 --> 00:30:42,720
now we so that's that's the just the

987
00:30:41,760 --> 00:30:44,480
header

988
00:30:42,720 --> 00:30:46,480
right and and and now we're getting the

989
00:30:44,480 --> 00:30:49,039
interesting thing so the rcb

990
00:30:46,480 --> 00:30:50,480
which is the record control byte there's

991
00:30:49,039 --> 00:30:53,200
a whole bunch here

992
00:30:50,480 --> 00:30:54,000
that talks about what kind of record is

993
00:30:53,200 --> 00:30:56,159
coming up

994
00:30:54,000 --> 00:30:57,120
do we have is it the is the start of a

995
00:30:56,159 --> 00:31:00,880
stream

996
00:30:57,120 --> 00:31:03,199
uh can i start a stream bcb air so a bcb

997
00:31:00,880 --> 00:31:04,240
air would be i'm sending in and i think

998
00:31:03,200 --> 00:31:06,640
i'm sequence 12

999
00:31:04,240 --> 00:31:08,480
but you think i'm sequence 14 and it'll

1000
00:31:06,640 --> 00:31:09,600
come back and say yeah i just i just

1001
00:31:08,480 --> 00:31:13,360
ignored

1002
00:31:09,600 --> 00:31:15,199
ignored all that and

1003
00:31:13,360 --> 00:31:16,799
i'm going to say that you're at a

1004
00:31:15,200 --> 00:31:17,440
sequence and we'll renegotiate a

1005
00:31:16,799 --> 00:31:19,440
sequence

1006
00:31:17,440 --> 00:31:20,799
a control record that's the i record

1007
00:31:19,440 --> 00:31:22,799
right that's what we're talking about

1008
00:31:20,799 --> 00:31:23,918
now is the control record so i'm going

1009
00:31:22,799 --> 00:31:27,360
to send at you know

1010
00:31:23,919 --> 00:31:28,880
hex f0 and get

1011
00:31:27,360 --> 00:31:31,519
that means this is going to be a control

1012
00:31:28,880 --> 00:31:32,640
record and then you have nodal message

1013
00:31:31,519 --> 00:31:34,320
records which i'm going to talk about

1014
00:31:32,640 --> 00:31:37,840
when we get some tooling

1015
00:31:34,320 --> 00:31:39,279
and then cis in and sysop that's the rcb

1016
00:31:37,840 --> 00:31:42,879
now every rcb

1017
00:31:39,279 --> 00:31:46,080
has a source our source rcb

1018
00:31:42,880 --> 00:31:49,120
why they have two i don't know but

1019
00:31:46,080 --> 00:31:51,600
um every rcb must have an srcb

1020
00:31:49,120 --> 00:31:52,799
because of ibm and rcbs can be all kinds

1021
00:31:51,600 --> 00:31:54,639
of rings so like

1022
00:31:52,799 --> 00:31:56,399
it's like if you have an rcb of f0 then

1023
00:31:54,640 --> 00:31:59,919
you would send an i record

1024
00:31:56,399 --> 00:32:01,600
if you have like a rcb of 9a which was

1025
00:31:59,919 --> 00:32:03,360
you know control records then you have a

1026
00:32:01,600 --> 00:32:05,279
source rcb00

1027
00:32:03,360 --> 00:32:08,719
if you have like cis in then it's going

1028
00:32:05,279 --> 00:32:10,320
to be the type of data that's coming in

1029
00:32:08,720 --> 00:32:12,399
and then now the data this is where it

1030
00:32:10,320 --> 00:32:16,480
gets really fun because

1031
00:32:12,399 --> 00:32:19,360
ttrs have a max length of 255 bytes

1032
00:32:16,480 --> 00:32:19,760
each record must include the rcb and the

1033
00:32:19,360 --> 00:32:23,360
source

1034
00:32:19,760 --> 00:32:25,120
the source rcb which means we have a max

1035
00:32:23,360 --> 00:32:27,519
length of 253 bytes

1036
00:32:25,120 --> 00:32:28,239
for data so what does ibm do they

1037
00:32:27,519 --> 00:32:30,399
implement

1038
00:32:28,240 --> 00:32:31,519
compression except for some in ccr

1039
00:32:30,399 --> 00:32:32,479
records they don't need to be compressed

1040
00:32:31,519 --> 00:32:34,720
but everything else needs to be

1041
00:32:32,480 --> 00:32:36,799
compressed

1042
00:32:34,720 --> 00:32:38,399
so they they create this compression

1043
00:32:36,799 --> 00:32:42,240
called string control bytes

1044
00:32:38,399 --> 00:32:44,719
so that basically means is you

1045
00:32:42,240 --> 00:32:45,600
take either a repeating character or

1046
00:32:44,720 --> 00:32:48,559
spaces

1047
00:32:45,600 --> 00:32:50,158
or everything from here to here is just

1048
00:32:48,559 --> 00:32:53,279
straight uncompressed data

1049
00:32:50,159 --> 00:32:55,120
skip x bytes ahead and i implemented

1050
00:32:53,279 --> 00:32:57,039
this compression algorithm in python and

1051
00:32:55,120 --> 00:32:58,559
i'm happy to say that mine is one byte

1052
00:32:57,039 --> 00:33:00,320
shorter than ibm's

1053
00:32:58,559 --> 00:33:02,240
but that's how it works so you have a

1054
00:33:00,320 --> 00:33:04,320
byte that starts with like 101 and then

1055
00:33:02,240 --> 00:33:06,720
like one one one one with the x

1056
00:33:04,320 --> 00:33:08,000
characters repeated x times

1057
00:33:06,720 --> 00:33:11,120
right the following character is going

1058
00:33:08,000 --> 00:33:14,880
to repeat whatever times

1059
00:33:11,120 --> 00:33:16,719
so let's take a look at how this packet

1060
00:33:14,880 --> 00:33:18,240
looks on like a real life system so

1061
00:33:16,720 --> 00:33:21,039
first we have the i

1062
00:33:18,240 --> 00:33:21,760
record no this is an example of an eye

1063
00:33:21,039 --> 00:33:24,080
record sorry

1064
00:33:21,760 --> 00:33:26,399
first we have the ttb so this is the

1065
00:33:24,080 --> 00:33:28,960
total length of the entire package

1066
00:33:26,399 --> 00:33:30,399
that's coming across the line next we

1067
00:33:28,960 --> 00:33:33,200
have the ttr

1068
00:33:30,399 --> 00:33:35,600
which is going to be of this length this

1069
00:33:33,200 --> 00:33:38,320
is how long this entire record is

1070
00:33:35,600 --> 00:33:40,080
then we have our dle stx which is saying

1071
00:33:38,320 --> 00:33:42,320
yep i got whatever message you sent

1072
00:33:40,080 --> 00:33:43,760
here's some more data now remember i

1073
00:33:42,320 --> 00:33:45,760
told you the bcb

1074
00:33:43,760 --> 00:33:46,960
is our first initial initial handshake

1075
00:33:45,760 --> 00:33:50,960
so it's

1076
00:33:46,960 --> 00:33:53,279
80 it's you know zero-ish right it's 80.

1077
00:33:50,960 --> 00:33:54,880
and then we have our function control

1078
00:33:53,279 --> 00:33:59,360
packets and then f0

1079
00:33:54,880 --> 00:34:01,519
f0 is nccr right that's the rcb

1080
00:33:59,360 --> 00:34:02,959
and the source rcb is the letter i which

1081
00:34:01,519 --> 00:34:03,600
is the i record that's what we're using

1082
00:34:02,960 --> 00:34:06,240
to connect

1083
00:34:03,600 --> 00:34:06,959
into this environment and then notice

1084
00:34:06,240 --> 00:34:08,159
here

1085
00:34:06,960 --> 00:34:09,918
so the rest of it is a whole bunch of

1086
00:34:08,159 --> 00:34:11,119
headers but this is where the two

1087
00:34:09,918 --> 00:34:13,918
passwords would be

1088
00:34:11,119 --> 00:34:16,399
and i know 40 is space in ebcdic so

1089
00:34:13,918 --> 00:34:19,040
essentially if you don't set a password

1090
00:34:16,399 --> 00:34:20,799
the default password is all spaces right

1091
00:34:19,040 --> 00:34:22,960
everything is padded with spaces

1092
00:34:20,800 --> 00:34:24,399
so when you connect and if there's no

1093
00:34:22,960 --> 00:34:25,839
password provided it just passed it out

1094
00:34:24,399 --> 00:34:28,239
of the spaces

1095
00:34:25,839 --> 00:34:29,679
so you set an eye record it sends a j

1096
00:34:28,239 --> 00:34:31,439
record now you're

1097
00:34:29,679 --> 00:34:32,879
you're now you're cooking with fire like

1098
00:34:31,440 --> 00:34:35,040
now you're in

1099
00:34:32,879 --> 00:34:36,719
anything from here on out you're doing

1100
00:34:35,040 --> 00:34:38,719
you've been authenticated essentially to

1101
00:34:36,719 --> 00:34:40,319
the system

1102
00:34:38,719 --> 00:34:41,598
now we can send one if we can do one we

1103
00:34:40,320 --> 00:34:42,720
can do a lot more than this but for the

1104
00:34:41,599 --> 00:34:44,399
sake of argument we can do these two

1105
00:34:42,719 --> 00:34:46,000
things we can do nodal messages

1106
00:34:44,399 --> 00:34:47,440
which are just two commands so what that

1107
00:34:46,000 --> 00:34:50,560
means is i

1108
00:34:47,440 --> 00:34:52,560
send a command into the

1109
00:34:50,560 --> 00:34:54,399
the jez2 environment of a different

1110
00:34:52,560 --> 00:34:55,359
system i can look up jobs i can look up

1111
00:34:54,399 --> 00:34:57,279
what's running

1112
00:34:55,359 --> 00:34:59,279
i can look up all kinds of stuff and

1113
00:34:57,280 --> 00:35:00,560
then or i can turn off just two if i

1114
00:34:59,280 --> 00:35:01,680
have that authority

1115
00:35:00,560 --> 00:35:04,240
right like you can control some

1116
00:35:01,680 --> 00:35:06,078
permissions but i could submit a job in

1117
00:35:04,240 --> 00:35:08,160
i could submit commands in

1118
00:35:06,079 --> 00:35:09,200
to just just turn off just two on

1119
00:35:08,160 --> 00:35:11,118
another mainframe that would be

1120
00:35:09,200 --> 00:35:13,279
devastating please don't do that

1121
00:35:11,119 --> 00:35:14,400
but that's the power that you have this

1122
00:35:13,280 --> 00:35:16,960
in is

1123
00:35:14,400 --> 00:35:18,240
we can send one job from one node to

1124
00:35:16,960 --> 00:35:20,960
another node

1125
00:35:18,240 --> 00:35:22,879
so if i'm going to send one job from

1126
00:35:20,960 --> 00:35:25,440
from one place to another

1127
00:35:22,880 --> 00:35:26,560
then i can use system data this is where

1128
00:35:25,440 --> 00:35:28,880
we start talking about ng

1129
00:35:26,560 --> 00:35:31,040
so that's network job entry from a high

1130
00:35:28,880 --> 00:35:31,440
level now we can start talking about

1131
00:35:31,040 --> 00:35:34,079
like

1132
00:35:31,440 --> 00:35:36,160
what you need to do nje hacking so

1133
00:35:34,079 --> 00:35:38,720
really this is a very long list

1134
00:35:36,160 --> 00:35:40,078
of everything you need to hack network

1135
00:35:38,720 --> 00:35:42,959
job entry on a mainframe

1136
00:35:40,079 --> 00:35:44,079
that you have found you need a no host

1137
00:35:42,960 --> 00:35:46,079
and you need

1138
00:35:44,079 --> 00:35:47,359
an r host that's it that's all you

1139
00:35:46,079 --> 00:35:48,079
really need i mean you need a little bit

1140
00:35:47,359 --> 00:35:50,480
more

1141
00:35:48,079 --> 00:35:52,160
but you need our host and a host and

1142
00:35:50,480 --> 00:35:52,880
thankfully you can if you know the o

1143
00:35:52,160 --> 00:35:55,598
host

1144
00:35:52,880 --> 00:35:57,200
of a system there's an nmap script

1145
00:35:55,599 --> 00:36:00,560
called nge node brood

1146
00:35:57,200 --> 00:36:04,160
that will try to brute force the names

1147
00:36:00,560 --> 00:36:05,920
of other of the r hosts for other l

1148
00:36:04,160 --> 00:36:07,440
parts that it'll accept connections from

1149
00:36:05,920 --> 00:36:08,960
so here we did a scan

1150
00:36:07,440 --> 00:36:10,720
against a mainframe and you can see

1151
00:36:08,960 --> 00:36:12,480
it'll accept connections from

1152
00:36:10,720 --> 00:36:14,399
a mainframe water will accept

1153
00:36:12,480 --> 00:36:17,839
connections from a mainframe name smog

1154
00:36:14,400 --> 00:36:19,440
or a mainframe named wwhf right so if i

1155
00:36:17,839 --> 00:36:20,720
pretend to be if smog is already

1156
00:36:19,440 --> 00:36:22,640
connected now

1157
00:36:20,720 --> 00:36:24,480
only one system is allowed to connect at

1158
00:36:22,640 --> 00:36:26,160
a time and they they usually stay

1159
00:36:24,480 --> 00:36:27,680
connected for a long time so

1160
00:36:26,160 --> 00:36:28,879
if i try to connect with smog you'll

1161
00:36:27,680 --> 00:36:30,640
just say no i'm or you're already

1162
00:36:28,880 --> 00:36:33,520
connected what are you doing

1163
00:36:30,640 --> 00:36:34,400
but if wwhf is not connected then i can

1164
00:36:33,520 --> 00:36:36,000
connect in

1165
00:36:34,400 --> 00:36:38,320
that system and pretend to be that

1166
00:36:36,000 --> 00:36:41,280
system so we know the r host

1167
00:36:38,320 --> 00:36:43,520
we know the o host let's talk about how

1168
00:36:41,280 --> 00:36:44,960
we can take advantage of the system data

1169
00:36:43,520 --> 00:36:46,560
so

1170
00:36:44,960 --> 00:36:49,040
remember way back at the beginning of

1171
00:36:46,560 --> 00:36:51,680
the talk we talked about jcl

1172
00:36:49,040 --> 00:36:52,800
and when jc when we send jcl from one

1173
00:36:51,680 --> 00:36:54,799
system to another

1174
00:36:52,800 --> 00:36:57,359
when you submit it in it records the

1175
00:36:54,800 --> 00:36:59,280
user that's going to be in there right

1176
00:36:57,359 --> 00:37:01,520
so when you send a job from one system

1177
00:36:59,280 --> 00:37:03,760
to another there's all these job headers

1178
00:37:01,520 --> 00:37:05,839
for network job entry that go into this

1179
00:37:03,760 --> 00:37:06,960
you have general scheduling job

1180
00:37:05,839 --> 00:37:08,720
accounting and

1181
00:37:06,960 --> 00:37:10,800
security security is what we're going to

1182
00:37:08,720 --> 00:37:12,319
talk about here for a bit now

1183
00:37:10,800 --> 00:37:14,000
look for the sake of time we're only

1184
00:37:12,320 --> 00:37:16,560
going to talk about two headers there's

1185
00:37:14,000 --> 00:37:18,720
19 headers in just the security section

1186
00:37:16,560 --> 00:37:20,480
but there's two headers that we really

1187
00:37:18,720 --> 00:37:22,078
care about the two user and the two

1188
00:37:20,480 --> 00:37:23,599
group and if you know that

1189
00:37:22,079 --> 00:37:25,839
and on every system that runs racket

1190
00:37:23,599 --> 00:37:27,520
there's an ibm ibm user

1191
00:37:25,839 --> 00:37:29,040
and chances are they're still connected

1192
00:37:27,520 --> 00:37:30,560
to group sys1

1193
00:37:29,040 --> 00:37:32,640
you have you already know a user it's on

1194
00:37:30,560 --> 00:37:34,400
the system

1195
00:37:32,640 --> 00:37:35,759
that's how the job is going to run so if

1196
00:37:34,400 --> 00:37:39,680
you can control

1197
00:37:35,760 --> 00:37:41,839
the njh 2 user and the njh2 group

1198
00:37:39,680 --> 00:37:43,919
you cannot you can control what user

1199
00:37:41,839 --> 00:37:47,040
you're running the jobs as

1200
00:37:43,920 --> 00:37:47,280
so all we need is to do this hacking is

1201
00:37:47,040 --> 00:37:50,079
an

1202
00:37:47,280 --> 00:37:51,520
o host an r hosts an ip address a

1203
00:37:50,079 --> 00:37:53,119
username and a group and once we have

1204
00:37:51,520 --> 00:37:53,839
that oh we also need one more thing

1205
00:37:53,119 --> 00:37:55,520
before i get

1206
00:37:53,839 --> 00:37:57,200
we need a mainframe right we need a

1207
00:37:55,520 --> 00:37:59,119
mainframe to do all this hacking

1208
00:37:57,200 --> 00:38:01,118
except that's not true because we can

1209
00:37:59,119 --> 00:38:02,000
just do it with a python library that i

1210
00:38:01,119 --> 00:38:05,280
wrote

1211
00:38:02,000 --> 00:38:07,359
over many months so

1212
00:38:05,280 --> 00:38:08,880
yeah just go out quick buy a mainframe

1213
00:38:07,359 --> 00:38:11,440
you'll be fine

1214
00:38:08,880 --> 00:38:13,119
they're cheap you can use this library

1215
00:38:11,440 --> 00:38:14,400
it's available today

1216
00:38:13,119 --> 00:38:16,560
it's been it's been available for many

1217
00:38:14,400 --> 00:38:18,160
years but you know only beginning of

1218
00:38:16,560 --> 00:38:20,400
this month i've been using it

1219
00:38:18,160 --> 00:38:21,200
it includes attack tools that i built to

1220
00:38:20,400 --> 00:38:23,240
demonstrate

1221
00:38:21,200 --> 00:38:26,319
some of the capabilities you have uh the

1222
00:38:23,240 --> 00:38:29,839
injector.py you have jcl.py

1223
00:38:26,320 --> 00:38:31,359
and analyze pos so injector will send

1224
00:38:29,839 --> 00:38:33,520
command and control messages

1225
00:38:31,359 --> 00:38:34,880
so for example if i don't know the users

1226
00:38:33,520 --> 00:38:37,040
that are running on a system but i can

1227
00:38:34,880 --> 00:38:39,359
connect in with nje

1228
00:38:37,040 --> 00:38:40,800
i can see how many users are running on

1229
00:38:39,359 --> 00:38:42,400
smog

1230
00:38:40,800 --> 00:38:44,640
so this is an example of me running

1231
00:38:42,400 --> 00:38:44,960
injector and you can see down here so i

1232
00:38:44,640 --> 00:38:46,799
run

1233
00:38:44,960 --> 00:38:48,880
this is the command that i'm running so

1234
00:38:46,800 --> 00:38:51,520
display all all

1235
00:38:48,880 --> 00:38:52,079
tsu so any job that starts with tsu

1236
00:38:51,520 --> 00:38:54,880
which

1237
00:38:52,079 --> 00:38:56,400
is a tso job if i run that command it'll

1238
00:38:54,880 --> 00:38:59,359
show me that fill and play

1239
00:38:56,400 --> 00:39:01,040
are logged into the system and then i

1240
00:38:59,359 --> 00:39:03,279
can use the jcl program

1241
00:39:01,040 --> 00:39:04,800
that will submit jcl as any user i pass

1242
00:39:03,280 --> 00:39:06,800
it in the command line so from cali this

1243
00:39:04,800 --> 00:39:10,320
is just cali

1244
00:39:06,800 --> 00:39:13,280
i can i can submit run the python

1245
00:39:10,320 --> 00:39:14,160
i tell it the o host i tell it the r

1246
00:39:13,280 --> 00:39:16,880
host

1247
00:39:14,160 --> 00:39:18,640
so like who am i who are you the ip

1248
00:39:16,880 --> 00:39:20,160
address and then a user that i want to

1249
00:39:18,640 --> 00:39:21,359
run and it includes a bunch of jcl so

1250
00:39:20,160 --> 00:39:22,160
i'm not expecting you to write your own

1251
00:39:21,359 --> 00:39:23,759
jcl

1252
00:39:22,160 --> 00:39:25,839
it includes a bunch of jcl that you can

1253
00:39:23,760 --> 00:39:27,359
run um that will do

1254
00:39:25,839 --> 00:39:29,279
you know bare bones things and then the

1255
00:39:27,359 --> 00:39:32,160
user i want to run this as it's play

1256
00:39:29,280 --> 00:39:33,359
so here we have the example of me i'll

1257
00:39:32,160 --> 00:39:34,319
show you a demo since i have time i

1258
00:39:33,359 --> 00:39:35,279
didn't know how much time i was going to

1259
00:39:34,320 --> 00:39:37,200
have

1260
00:39:35,280 --> 00:39:38,800
but looks like i got about four minutes

1261
00:39:37,200 --> 00:39:40,839
left i can show you some live demos

1262
00:39:38,800 --> 00:39:42,400
and then analyze if you have packet

1263
00:39:40,839 --> 00:39:44,560
captures from

1264
00:39:42,400 --> 00:39:46,160
a network job entry going back and forth

1265
00:39:44,560 --> 00:39:49,040
you can actually extract those

1266
00:39:46,160 --> 00:39:50,399
like the packet data and run that

1267
00:39:49,040 --> 00:39:52,400
through an analysis program and it'll

1268
00:39:50,400 --> 00:39:56,800
show you the output so here's an example

1269
00:39:52,400 --> 00:39:58,560
where we had a i record right so i had

1270
00:39:56,800 --> 00:39:59,599
captured down the pack after and i saved

1271
00:39:58,560 --> 00:40:01,680
the packet data

1272
00:39:59,599 --> 00:40:03,040
for an eye record and you can see here

1273
00:40:01,680 --> 00:40:05,839
it's breaking it down

1274
00:40:03,040 --> 00:40:07,359
into you know this is the total length

1275
00:40:05,839 --> 00:40:08,640
the record length

1276
00:40:07,359 --> 00:40:10,640
here's the compressed record here's the

1277
00:40:08,640 --> 00:40:13,920
record type so rcb is

1278
00:40:10,640 --> 00:40:16,000
f0 the type you know it's an ng and it

1279
00:40:13,920 --> 00:40:17,359
tells you it's an initial sign-on record

1280
00:40:16,000 --> 00:40:19,119
and if this had a password in it you

1281
00:40:17,359 --> 00:40:22,078
would just see the password in

1282
00:40:19,119 --> 00:40:24,480
clear text and ebcdic okay so let's

1283
00:40:22,079 --> 00:40:29,920
let's see some demos here

1284
00:40:24,480 --> 00:40:29,920
of using network job entry let's go here

1285
00:40:31,440 --> 00:40:35,119
so we have already have it all queued up

1286
00:40:33,119 --> 00:40:36,960
ready to go so again

1287
00:40:35,119 --> 00:40:38,800
so i'm going to connect into a system

1288
00:40:36,960 --> 00:40:40,240
see if this works and then i'm going to

1289
00:40:38,800 --> 00:40:43,359
connect into a system

1290
00:40:40,240 --> 00:40:45,359
as www hf

1291
00:40:43,359 --> 00:40:47,520
smog on the ip address and i'm going to

1292
00:40:45,359 --> 00:40:49,279
run actually i'll show you what that jcl

1293
00:40:47,520 --> 00:40:53,280
looks like

1294
00:40:49,280 --> 00:40:54,800
just cut it

1295
00:40:53,280 --> 00:40:56,560
super simple like it's not even that

1296
00:40:54,800 --> 00:40:58,000
many lines but it's two jobs it's two

1297
00:40:56,560 --> 00:41:00,880
steps it's one job

1298
00:40:58,000 --> 00:41:01,920
this is the job card here up top and

1299
00:41:00,880 --> 00:41:03,040
then i'm gonna i'm telling you it

1300
00:41:01,920 --> 00:41:04,160
doesn't this doesn't really matter this

1301
00:41:03,040 --> 00:41:05,920
is just more

1302
00:41:04,160 --> 00:41:07,359
for performance like you delete that

1303
00:41:05,920 --> 00:41:09,040
line it's going on two jobs it's gonna

1304
00:41:07,359 --> 00:41:11,839
run the unix command job

1305
00:41:09,040 --> 00:41:13,839
and it's gonna run the tso command step

1306
00:41:11,839 --> 00:41:16,799
so the unix command step

1307
00:41:13,839 --> 00:41:19,119
and the tso command step let's uh so

1308
00:41:16,800 --> 00:41:20,560
let's run that

1309
00:41:19,119 --> 00:41:22,480
and it takes a while so it's gonna it's

1310
00:41:20,560 --> 00:41:24,560
trying to connect in so first it's gonna

1311
00:41:22,480 --> 00:41:27,280
connect

1312
00:41:24,560 --> 00:41:29,599
to take a little while and now it's

1313
00:41:27,280 --> 00:41:29,599
running

1314
00:41:30,480 --> 00:41:34,160
and it's gonna wait to get the response

1315
00:41:32,000 --> 00:41:35,280
back from the system

1316
00:41:34,160 --> 00:41:36,560
because it thinks we're a mainframe now

1317
00:41:35,280 --> 00:41:37,440
it thinks we're a mainframe that's part

1318
00:41:36,560 --> 00:41:40,640
of the node network

1319
00:41:37,440 --> 00:41:41,119
so it's it gives us the reply back and

1320
00:41:40,640 --> 00:41:43,118
this is

1321
00:41:41,119 --> 00:41:44,560
all job information like you normally

1322
00:41:43,119 --> 00:41:46,640
see this in sdsf

1323
00:41:44,560 --> 00:41:48,319
it's the job log for this whole job but

1324
00:41:46,640 --> 00:41:48,960
really what we care about is down here

1325
00:41:48,319 --> 00:41:50,880
where

1326
00:41:48,960 --> 00:41:52,319
here's the output of the unix so if you

1327
00:41:50,880 --> 00:41:53,520
look at

1328
00:41:52,319 --> 00:41:56,160
when we counted the program it's going

1329
00:41:53,520 --> 00:41:56,960
to run id who and you name dash a so id

1330
00:41:56,160 --> 00:41:58,720
and you name like

1331
00:41:56,960 --> 00:42:00,000
no one else is right on the system but

1332
00:41:58,720 --> 00:42:03,118
id and you name

1333
00:42:00,000 --> 00:42:06,560
so that's the output here is i

1334
00:42:03,119 --> 00:42:07,040
am still i lost it up a little bit there

1335
00:42:06,560 --> 00:42:09,920
it goes

1336
00:42:07,040 --> 00:42:11,839
so that's the user id and the system is

1337
00:42:09,920 --> 00:42:12,960
smog and it's running this version of

1338
00:42:11,839 --> 00:42:15,200
unix

1339
00:42:12,960 --> 00:42:16,640
and then the next one runs in tso the

1340
00:42:15,200 --> 00:42:19,279
next step is going to run

1341
00:42:16,640 --> 00:42:20,400
in tso which runs the lu and i'm running

1342
00:42:19,280 --> 00:42:22,880
as user play

1343
00:42:20,400 --> 00:42:23,599
i could do that as let's see all right

1344
00:42:22,880 --> 00:42:27,359
let's see if i

1345
00:42:23,599 --> 00:42:30,800
if i can remember zero

1346
00:42:27,359 --> 00:42:32,078
cool and see if i if i put them on here

1347
00:42:30,800 --> 00:42:33,760
you could run this as any user you don't

1348
00:42:32,079 --> 00:42:35,280
need another password because the way

1349
00:42:33,760 --> 00:42:38,160
this works is because

1350
00:42:35,280 --> 00:42:39,599
we've set up rack f um and a lot of

1351
00:42:38,160 --> 00:42:41,040
places do this where they trust the

1352
00:42:39,599 --> 00:42:41,839
nodes all the nodes in the environment

1353
00:42:41,040 --> 00:42:43,839
are trusted

1354
00:42:41,839 --> 00:42:45,040
and so yeah so this user doesn't exist

1355
00:42:43,839 --> 00:42:46,560
so

1356
00:42:45,040 --> 00:42:48,480
what that means is because a lot of

1357
00:42:46,560 --> 00:42:50,400
places do this if you authenticate

1358
00:42:48,480 --> 00:42:52,000
on one system it's assumed that you're

1359
00:42:50,400 --> 00:42:53,520
good and if that user account

1360
00:42:52,000 --> 00:42:55,920
from that system exists on the other

1361
00:42:53,520 --> 00:42:58,079
system then it'll just run the job

1362
00:42:55,920 --> 00:42:59,200
right there's cases where you might have

1363
00:42:58,079 --> 00:43:01,040
a user named

1364
00:42:59,200 --> 00:43:02,960
john smith on one system and username

1365
00:43:01,040 --> 00:43:05,759
jennifer smith on another system

1366
00:43:02,960 --> 00:43:06,960
and no and if you use first initial last

1367
00:43:05,760 --> 00:43:09,200
name

1368
00:43:06,960 --> 00:43:10,720
that and have nje then those users could

1369
00:43:09,200 --> 00:43:11,598
run jobs as the other user on both

1370
00:43:10,720 --> 00:43:13,118
systems

1371
00:43:11,599 --> 00:43:15,599
right because it's just using the user

1372
00:43:13,119 --> 00:43:17,200
id to submit those jobs

1373
00:43:15,599 --> 00:43:20,000
let's show uh let's see if i have an

1374
00:43:17,200 --> 00:43:22,000
example of an injector here

1375
00:43:20,000 --> 00:43:24,480
yeah okay so we'll we'll i'll show you

1376
00:43:22,000 --> 00:43:27,119
what that looks like so injector runs

1377
00:43:24,480 --> 00:43:28,000
and it will run message control commands

1378
00:43:27,119 --> 00:43:30,240
so this is running

1379
00:43:28,000 --> 00:43:31,200
in on a mainframe environment i could

1380
00:43:30,240 --> 00:43:34,560
show you

1381
00:43:31,200 --> 00:43:36,240
what that looks like see here let's

1382
00:43:34,560 --> 00:43:38,078
see if i can get this up there we go so

1383
00:43:36,240 --> 00:43:41,680
if i connect in here

1384
00:43:38,079 --> 00:43:45,119
to to the mainframe

1385
00:43:41,680 --> 00:43:45,118
let's see if i can run my password

1386
00:43:45,200 --> 00:43:50,480
and if i go into uh sd that's probably

1387
00:43:48,640 --> 00:43:55,680
hard to see

1388
00:43:50,480 --> 00:43:58,160
let's see color scheme if i go in here

1389
00:43:55,680 --> 00:43:58,720
and i go and show the job output or

1390
00:43:58,160 --> 00:44:00,799
actually

1391
00:43:58,720 --> 00:44:02,319
let's see we want to run this whole

1392
00:44:00,800 --> 00:44:05,359
command here so we're going to run

1393
00:44:02,319 --> 00:44:05,359
this exact command

1394
00:44:07,200 --> 00:44:13,118
in the same place and it comes out back

1395
00:44:11,119 --> 00:44:14,720
and it's going to run it shows there's a

1396
00:44:13,119 --> 00:44:18,480
bunch of stuff running

1397
00:44:14,720 --> 00:44:18,480
right if i look at the log let's see

1398
00:44:18,880 --> 00:44:23,119
see here i'm the only user logged in

1399
00:44:20,720 --> 00:44:24,480
right now so

1400
00:44:23,119 --> 00:44:26,240
and actually i wasn't logged in so this

1401
00:44:24,480 --> 00:44:29,359
output wouldn't have

1402
00:44:26,240 --> 00:44:29,359
had any output anyways

1403
00:44:33,760 --> 00:44:36,960
i want to say huge thank you to wellness

1404
00:44:35,520 --> 00:44:37,759
hackingfest for having me come and give

1405
00:44:36,960 --> 00:44:39,599
this talk

1406
00:44:37,760 --> 00:44:40,800
um i was really nervous about going to

1407
00:44:39,599 --> 00:44:42,079
the physical conference

1408
00:44:40,800 --> 00:44:43,920
just based on all the news that's going

1409
00:44:42,079 --> 00:44:44,960
around so i'm super happy they were able

1410
00:44:43,920 --> 00:44:48,240
to pull off this

1411
00:44:44,960 --> 00:44:50,240
um virtual conference it's been great

1412
00:44:48,240 --> 00:44:51,598
obviously i spent a lot of time putting

1413
00:44:50,240 --> 00:44:53,359
this network job and figuring out and

1414
00:44:51,599 --> 00:44:55,680
understanding network job entry

1415
00:44:53,359 --> 00:44:56,720
so it was um being able to give this

1416
00:44:55,680 --> 00:44:58,240
talk is

1417
00:44:56,720 --> 00:44:59,359
is huge for me because i really wanted

1418
00:44:58,240 --> 00:44:59,759
to talk about this for a while and give

1419
00:44:59,359 --> 00:45:01,920
a real

1420
00:44:59,760 --> 00:45:02,960
detailed deep dive into the protocol i

1421
00:45:01,920 --> 00:45:04,720
want to say thanks to the computer

1422
00:45:02,960 --> 00:45:06,720
history museum they scan

1423
00:45:04,720 --> 00:45:08,399
all these old pamphlets all the graphics

1424
00:45:06,720 --> 00:45:08,720
that you saw throughout the talk were

1425
00:45:08,400 --> 00:45:11,119
from

1426
00:45:08,720 --> 00:45:12,078
old ibm pamphlets from like the 70s and

1427
00:45:11,119 --> 00:45:14,560
80s

1428
00:45:12,079 --> 00:45:15,119
or older even the background was from an

1429
00:45:14,560 --> 00:45:18,160
old

1430
00:45:15,119 --> 00:45:19,359
tape drive pamphlet and if if this talk

1431
00:45:18,160 --> 00:45:21,920
was interesting to you

1432
00:45:19,359 --> 00:45:22,400
in any way then and you want to learn

1433
00:45:21,920 --> 00:45:24,160
more

1434
00:45:22,400 --> 00:45:25,680
or you want you wanted more detail than

1435
00:45:24,160 --> 00:45:26,160
i was able to talk about i would go read

1436
00:45:25,680 --> 00:45:29,200
the

1437
00:45:26,160 --> 00:45:30,960
the proof of concept or gtfo

1438
00:45:29,200 --> 00:45:33,118
issue 12 which goes into a lot more

1439
00:45:30,960 --> 00:45:35,119
detail around

1440
00:45:33,119 --> 00:45:36,240
how how to use this and how you can take

1441
00:45:35,119 --> 00:45:37,760
advantage of this

1442
00:45:36,240 --> 00:45:40,000
if if you want i mean there's no reason

1443
00:45:37,760 --> 00:45:41,200
why you couldn't compile like use msf

1444
00:45:40,000 --> 00:45:43,680
venom to generate

1445
00:45:41,200 --> 00:45:45,279
big indian smalls payload the high

1446
00:45:43,680 --> 00:45:47,359
levels of payload

1447
00:45:45,280 --> 00:45:48,720
and then use and submit that with this

1448
00:45:47,359 --> 00:45:50,078
and get a root shell

1449
00:45:48,720 --> 00:45:51,919
from that right there's no there's no

1450
00:45:50,079 --> 00:45:53,599
reason that wouldn't work but

1451
00:45:51,920 --> 00:45:55,280
but i think i think that's it i think

1452
00:45:53,599 --> 00:45:56,720
that's all i've got and thank you for

1453
00:45:55,280 --> 00:45:58,319
having me

1454
00:45:56,720 --> 00:45:59,759
awesome phil thanks for being here i'm

1455
00:45:58,319 --> 00:46:00,000
gonna follow up with you in the next

1456
00:45:59,760 --> 00:46:02,400
week

1457
00:46:00,000 --> 00:46:03,359
or so to have you come back and do this

1458
00:46:02,400 --> 00:46:06,400
as a webcast

1459
00:46:03,359 --> 00:46:07,040
for a larger audience i would love to so

1460
00:46:06,400 --> 00:46:08,560
i would say

1461
00:46:07,040 --> 00:46:10,319
about a month or two from now you know

1462
00:46:08,560 --> 00:46:11,119
because we're going to stagger them out

1463
00:46:10,319 --> 00:46:12,960
so that way

1464
00:46:11,119 --> 00:46:14,480
we can get this information out to a

1465
00:46:12,960 --> 00:46:16,240
wider audience as well

1466
00:46:14,480 --> 00:46:17,839
great thank you for being here all right

1467
00:46:16,240 --> 00:46:19,839
everyone i'll be in the chat

1468
00:46:17,839 --> 00:46:21,119
i'll be in the chat for a bit if anyone

1469
00:46:19,839 --> 00:46:22,078
has any questions but

1470
00:46:21,119 --> 00:46:24,480
but thank you very much thanks for

1471
00:46:22,079 --> 00:46:24,480
having me

