1
00:00:01,040 --> 00:00:05,339
introduction for rook I feel bad I

2
00:00:03,540 --> 00:00:08,039
should be introducing Jeff McJunkin as

3
00:00:05,339 --> 00:00:10,980
well but Derek is relatively new

4
00:00:08,039 --> 00:00:12,120
like in my universe I think it was

5
00:00:10,980 --> 00:00:13,380
probably about a year ago or two years

6
00:00:12,120 --> 00:00:14,549
ago I mean there's been sands

7
00:00:13,380 --> 00:00:16,830
conferences right but as far as the

8
00:00:14,550 --> 00:00:20,160
attention maybe two years kind of into

9
00:00:16,830 --> 00:00:22,439
that process yeah something like that

10
00:00:20,160 --> 00:00:26,160
yeah and I got a chance to co-teach with

11
00:00:22,440 --> 00:00:27,420
him in a sans hackfest in DC and I got

12
00:00:26,160 --> 00:00:28,890
to be honest like within the first 10

13
00:00:27,420 --> 00:00:31,710
minutes of him teaching I'm like I'm

14
00:00:28,890 --> 00:00:33,960
unnecessary in this entire equation and

15
00:00:31,710 --> 00:00:36,450
he was actually a big reason why I

16
00:00:33,960 --> 00:00:40,290
stepped away from sans PI before I know

17
00:00:36,450 --> 00:00:42,480
that that sounds ominous so stepping

18
00:00:40,290 --> 00:00:44,190
away from sans 504 one of the big things

19
00:00:42,480 --> 00:00:45,779
that I really wanted to have was an

20
00:00:44,190 --> 00:00:47,849
incredibly strong person to hand the

21
00:00:45,780 --> 00:00:49,980
class to and we got that and Josh Josh

22
00:00:47,850 --> 00:00:51,989
has done a rocking job and then I wanted

23
00:00:49,980 --> 00:00:54,239
to have a large number of instructors

24
00:00:51,989 --> 00:00:56,519
that I knew could just kick ass and I

25
00:00:54,239 --> 00:00:58,468
think Brooke was the tipping point like

26
00:00:56,520 --> 00:01:00,300
once I saw rook and we have Nick Douglas

27
00:00:58,469 --> 00:01:01,649
and a whole bunch of other people it was

28
00:01:00,300 --> 00:01:03,839
like yeah this class is gonna be fine

29
00:01:01,649 --> 00:01:06,000
and that was a great opportunity for me

30
00:01:03,840 --> 00:01:07,890
to step back and as far as stepping back

31
00:01:06,000 --> 00:01:10,549
I'm gonna step back now and let him talk

32
00:01:07,890 --> 00:01:14,670
about web hacking beyond simple alerts

33
00:01:10,549 --> 00:01:16,229
John thank you so much I am I'm unworthy

34
00:01:14,670 --> 00:01:18,360
of that introduction I really do

35
00:01:16,229 --> 00:01:20,070
appreciate it so welcome everybody I am

36
00:01:18,360 --> 00:01:22,380
glad that you could join me virtually

37
00:01:20,070 --> 00:01:24,389
I'm a little bummed that you're not here

38
00:01:22,380 --> 00:01:26,250
physically with me as I am in San Diego

39
00:01:24,390 --> 00:01:27,990
but you can't see outside it's actually

40
00:01:26,250 --> 00:01:30,960
raining and it's gonna be raining pretty

41
00:01:27,990 --> 00:01:32,908
much all week weekend so not really

42
00:01:30,960 --> 00:01:35,729
missing out on the great San Diego

43
00:01:32,909 --> 00:01:38,610
weather but uh welcome to my talk web

44
00:01:35,729 --> 00:01:40,908
hacking beyond basic alerts and this

45
00:01:38,610 --> 00:01:43,619
talk is is a few different things for me

46
00:01:40,909 --> 00:01:45,240
it's a introduction it is something I'm

47
00:01:43,619 --> 00:01:46,890
very passionate about which is which is

48
00:01:45,240 --> 00:01:50,789
breaking into websites and and

49
00:01:46,890 --> 00:01:52,860
compromising the perimeter of enterprise

50
00:01:50,790 --> 00:01:56,009
networks and computer networks through a

51
00:01:52,860 --> 00:01:57,750
web website it's also a chance for me to

52
00:01:56,009 --> 00:02:00,360
help explain some of the nuances of web

53
00:01:57,750 --> 00:02:03,030
attacks I do a lot of interviewing I run

54
00:02:00,360 --> 00:02:05,369
on I run a team and part of my interview

55
00:02:03,030 --> 00:02:07,439
process is some questions and I see a

56
00:02:05,369 --> 00:02:09,590
lot of repeated mistakes and

57
00:02:07,439 --> 00:02:12,388
misunderstandings of how websites work

58
00:02:09,590 --> 00:02:13,680
okay so as part of this I've tweeted a

59
00:02:12,389 --> 00:02:14,790
couple times that this is going to be a

60
00:02:13,680 --> 00:02:17,370
very high

61
00:02:14,790 --> 00:02:19,170
hands-on very demo driven presentation I

62
00:02:17,370 --> 00:02:20,430
do have slides to help introduce some

63
00:02:19,170 --> 00:02:22,828
things but it's also going to be very

64
00:02:20,430 --> 00:02:25,260
demo driven so we have our first demo

65
00:02:22,829 --> 00:02:29,250
already right off the title slide so

66
00:02:25,260 --> 00:02:33,599
let's jump right into that my totally

67
00:02:29,250 --> 00:02:35,099
not tore password into Kali and the the

68
00:02:33,599 --> 00:02:37,319
web application that I'm going to be

69
00:02:35,099 --> 00:02:39,450
using today for my demonstration is rook

70
00:02:37,319 --> 00:02:41,760
aviary services it's something that I

71
00:02:39,450 --> 00:02:43,950
originally wrote to help with sans 504

72
00:02:41,760 --> 00:02:46,138
to kind of upgrade the level AB a little

73
00:02:43,950 --> 00:02:47,280
bit but it's it's evolving into

74
00:02:46,139 --> 00:02:49,260
something much bigger than that

75
00:02:47,280 --> 00:02:52,730
so it's a vulnerable Y design web

76
00:02:49,260 --> 00:02:56,040
application it is very small it's very

77
00:02:52,730 --> 00:02:57,629
simple there's not a lot of really

78
00:02:56,040 --> 00:02:59,548
complex challenges to it yet I'm

79
00:02:57,629 --> 00:03:01,230
building some in but it's it's more

80
00:02:59,549 --> 00:03:03,530
illustrative right it's it's to

81
00:03:01,230 --> 00:03:06,030
illustrate problems and to illustrate

82
00:03:03,530 --> 00:03:07,980
vulnerable code as well as taking

83
00:03:06,030 --> 00:03:09,480
advantage of that vulnerable code and so

84
00:03:07,980 --> 00:03:13,138
this talk is going to be pretty

85
00:03:09,480 --> 00:03:14,819
illustrative rather than then then like

86
00:03:13,139 --> 00:03:16,889
super realistic by passing a lot of

87
00:03:14,819 --> 00:03:21,899
filters and whatnot but it we can't go

88
00:03:16,889 --> 00:03:24,000
beyond XSS found until we start with XSS

89
00:03:21,900 --> 00:03:30,190
found so I want to do a quick

90
00:03:24,000 --> 00:03:32,020
demonstration of a JavaScript alert

91
00:03:30,190 --> 00:03:33,579
just to kind of show like where we're

92
00:03:32,020 --> 00:03:35,830
starting from right and this is a very

93
00:03:33,580 --> 00:03:39,550
basic cross-site scripting that you

94
00:03:35,830 --> 00:03:42,760
might find in a like a bug bounty or

95
00:03:39,550 --> 00:03:45,100
something and it's just we find

96
00:03:42,760 --> 00:03:46,359
something that if we actually let me

97
00:03:45,100 --> 00:03:47,920
show you what it looks like before we

98
00:03:46,360 --> 00:03:50,410
take and exploit it if we want to search

99
00:03:47,920 --> 00:03:52,630
for cats right and we run the search and

100
00:03:50,410 --> 00:03:55,630
it's like no risk no results for cats

101
00:03:52,630 --> 00:03:58,359
we're seeing that our our input is being

102
00:03:55,630 --> 00:04:00,880
reflected back to us and so if we see

103
00:03:58,360 --> 00:04:03,970
that we might be able to reflect code

104
00:04:00,880 --> 00:04:08,740
back to us and we'll explain why this

105
00:04:03,970 --> 00:04:10,120
works in just a second but if we put in

106
00:04:08,740 --> 00:04:11,590
a little bit of JavaScript and all this

107
00:04:10,120 --> 00:04:13,840
does is say hey we've got some

108
00:04:11,590 --> 00:04:15,130
JavaScript here it's coming and then we

109
00:04:13,840 --> 00:04:16,660
put a little bit of JavaScript and it's

110
00:04:15,130 --> 00:04:18,969
just I want to pop an alert box that

111
00:04:16,660 --> 00:04:21,519
says XSS valent and then we're gonna

112
00:04:18,970 --> 00:04:24,730
close out our script tag when we submit

113
00:04:21,519 --> 00:04:26,560
that it gets reflected back to us and we

114
00:04:24,730 --> 00:04:31,180
get this pop-up box so this JavaScript

115
00:04:26,560 --> 00:04:34,690
runs alright and when we click OK and we

116
00:04:31,180 --> 00:04:37,510
can look at the source here and if we

117
00:04:34,690 --> 00:04:39,520
scroll down we actually see let's see if

118
00:04:37,510 --> 00:04:40,930
I can blow this up a bit when we blow

119
00:04:39,520 --> 00:04:42,880
this up here we actually see that our

120
00:04:40,930 --> 00:04:45,790
content is being reflected back to us

121
00:04:42,880 --> 00:04:47,620
but since browsers run JavaScript it's

122
00:04:45,790 --> 00:04:49,750
actually going to run this code that we

123
00:04:47,620 --> 00:04:51,669
created that we put into it so this is a

124
00:04:49,750 --> 00:04:54,010
content injection vulnerability and

125
00:04:51,669 --> 00:04:56,590
cross-site scripting is an injection

126
00:04:54,010 --> 00:04:59,320
vulnerability and it's running our code

127
00:04:56,590 --> 00:05:01,900
so that's XSS val right so now that we

128
00:04:59,320 --> 00:05:03,700
kind of have an idea of how that works

129
00:05:01,900 --> 00:05:05,560
and what's going on there we can now

130
00:05:03,700 --> 00:05:08,530
move beyond that so let's go ahead and

131
00:05:05,560 --> 00:05:11,650
move beyond that so let's talk about

132
00:05:08,530 --> 00:05:13,929
let's talk about why why why this talk

133
00:05:11,650 --> 00:05:16,419
well the big thing is that the web is

134
00:05:13,930 --> 00:05:19,390
the perimeter all right the when you

135
00:05:16,419 --> 00:05:21,789
have a big organization or even a small

136
00:05:19,390 --> 00:05:24,789
organization a lot of times companies

137
00:05:21,790 --> 00:05:26,560
obey this kind of shell egg shell model

138
00:05:24,790 --> 00:05:29,560
of security which is they have a really

139
00:05:26,560 --> 00:05:32,830
hard crunchy exterior but the inside is

140
00:05:29,560 --> 00:05:35,169
really soft and gooey and while a lot of

141
00:05:32,830 --> 00:05:37,990
their critical assets are inside of the

142
00:05:35,169 --> 00:05:39,580
firewall we web applications by design

143
00:05:37,990 --> 00:05:42,400
because they're public information

144
00:05:39,580 --> 00:05:44,109
distribution engines they have to be

145
00:05:42,400 --> 00:05:45,760
outside

146
00:05:44,110 --> 00:05:48,130
and then on top of that a lot of modern

147
00:05:45,760 --> 00:05:50,140
web applications are dynamically

148
00:05:48,130 --> 00:05:52,719
generated right they're data-driven and

149
00:05:50,140 --> 00:05:54,669
so they're often connected to databases

150
00:05:52,720 --> 00:05:56,560
now you don't want a database just

151
00:05:54,670 --> 00:05:58,240
hanging out in the wind right you don't

152
00:05:56,560 --> 00:06:00,310
want it out in the public so the

153
00:05:58,240 --> 00:06:02,140
database is usually inside like behind

154
00:06:00,310 --> 00:06:04,600
the firewall and they have to poke holes

155
00:06:02,140 --> 00:06:07,570
to allow that public web server to

156
00:06:04,600 --> 00:06:09,640
connect into that database and even if

157
00:06:07,570 --> 00:06:13,150
it's not like you know it gives us a

158
00:06:09,640 --> 00:06:15,250
foothold into their IP space so some of

159
00:06:13,150 --> 00:06:17,590
the things I've seen actually is maybe I

160
00:06:15,250 --> 00:06:18,970
don't get to jump directly from a web

161
00:06:17,590 --> 00:06:20,859
server directly into their internal

162
00:06:18,970 --> 00:06:23,290
network but they'll have some sort of

163
00:06:20,860 --> 00:06:25,480
you know explicit allow or lockdown

164
00:06:23,290 --> 00:06:27,760
cloud environments that only allow

165
00:06:25,480 --> 00:06:31,330
connections from their IP space and I

166
00:06:27,760 --> 00:06:33,460
have seen companies include their DMZ

167
00:06:31,330 --> 00:06:36,159
where their web servers are in that

168
00:06:33,460 --> 00:06:39,640
allow lists and so you can jump from

169
00:06:36,160 --> 00:06:42,040
their public DMZ web servers into their

170
00:06:39,640 --> 00:06:44,349
like like super lockdown cloud

171
00:06:42,040 --> 00:06:47,050
environment so the web's the perimeter

172
00:06:44,350 --> 00:06:49,570
and also web as ubiquitous right so web

173
00:06:47,050 --> 00:06:51,430
servers are everywhere content is being

174
00:06:49,570 --> 00:06:53,830
served by web servers or web like

175
00:06:51,430 --> 00:06:56,020
servers all over the place and even a

176
00:06:53,830 --> 00:06:59,169
lot of mobile applications are really

177
00:06:56,020 --> 00:07:01,000
just reskin web sites they're like web

178
00:06:59,170 --> 00:07:03,940
applications that are being served from

179
00:07:01,000 --> 00:07:05,680
within like a wrapper app and so if you

180
00:07:03,940 --> 00:07:07,120
get really good at breaking web

181
00:07:05,680 --> 00:07:09,940
applications if you understand how web

182
00:07:07,120 --> 00:07:12,250
applications work you're not instantly

183
00:07:09,940 --> 00:07:14,830
ready for mobile pen testing but it's a

184
00:07:12,250 --> 00:07:18,070
good jumping-off point okay

185
00:07:14,830 --> 00:07:19,750
so let's talk about the mistakes that I

186
00:07:18,070 --> 00:07:21,430
see a lot this is pretty straightforward

187
00:07:19,750 --> 00:07:23,680
a lot of people know that there's like

188
00:07:21,430 --> 00:07:25,210
server-side code and client-side code

189
00:07:23,680 --> 00:07:27,160
and a little bit about the differences

190
00:07:25,210 --> 00:07:28,510
between them but I want to cover it real

191
00:07:27,160 --> 00:07:31,270
quick before we jump into more of the

192
00:07:28,510 --> 00:07:33,400
nuances so on the server side the

193
00:07:31,270 --> 00:07:35,169
server-side technologies that happen is

194
00:07:33,400 --> 00:07:37,239
you've got the web applications like the

195
00:07:35,170 --> 00:07:40,330
Apache or the web servers excuse me

196
00:07:37,240 --> 00:07:42,640
so like Apache or nginx flask has like a

197
00:07:40,330 --> 00:07:45,010
dev web server included with it PHP has

198
00:07:42,640 --> 00:07:47,140
a dev web server included with it but

199
00:07:45,010 --> 00:07:50,469
that's where the server itself lives

200
00:07:47,140 --> 00:07:53,440
we've got the server-side code right so

201
00:07:50,470 --> 00:07:55,480
PHP Python it hurts me to say this but

202
00:07:53,440 --> 00:07:57,640
javascript can be ran on the server a

203
00:07:55,480 --> 00:07:58,000
little weird but we've got server-side

204
00:07:57,640 --> 00:08:00,880
code

205
00:07:58,000 --> 00:08:03,010
and then also along with the server area

206
00:08:00,880 --> 00:08:06,250
we tend to think of like databases are

207
00:08:03,010 --> 00:08:07,560
also like server-side we'll get into

208
00:08:06,250 --> 00:08:10,060
that in a minute

209
00:08:07,560 --> 00:08:11,980
additionally we've got client site right

210
00:08:10,060 --> 00:08:14,650
and that's where the browser is

211
00:08:11,980 --> 00:08:16,990
rendering like javascript and HTML and

212
00:08:14,650 --> 00:08:20,590
CSS and things like that so it's only

213
00:08:16,990 --> 00:08:22,750
rendering the client-side code and this

214
00:08:20,590 --> 00:08:27,039
is going to be important as we go

215
00:08:22,750 --> 00:08:30,310
further down the road but web browsers

216
00:08:27,040 --> 00:08:32,979
run HTML Javascript CSS some other stuff

217
00:08:30,310 --> 00:08:34,780
sometimes but mostly those and then the

218
00:08:32,979 --> 00:08:36,789
server's are running what are running

219
00:08:34,780 --> 00:08:40,030
the PHP and the Python and the Ruby and

220
00:08:36,789 --> 00:08:42,848
the go and the Java etc etc etc so also

221
00:08:40,030 --> 00:08:45,400
none of these charts are supposed to be

222
00:08:42,849 --> 00:08:46,630
exhaustive right so if your favorite web

223
00:08:45,400 --> 00:08:47,500
framework doesn't show up when one of

224
00:08:46,630 --> 00:08:50,020
these charts I'm sorry

225
00:08:47,500 --> 00:08:52,300
I could do an entire talk just on web

226
00:08:50,020 --> 00:08:54,579
frameworks but here's some nuance right

227
00:08:52,300 --> 00:08:57,790
here's the more more nuance right so

228
00:08:54,580 --> 00:09:00,880
really the the server side is much

229
00:08:57,790 --> 00:09:02,469
deeper than this right so on the server

230
00:09:00,880 --> 00:09:04,750
side we've really got a couple different

231
00:09:02,470 --> 00:09:06,670
layers that are going on first of all as

232
00:09:04,750 --> 00:09:09,940
I said there's like the Apache server or

233
00:09:06,670 --> 00:09:12,819
the engine X server as well as the PHP

234
00:09:09,940 --> 00:09:14,500
or the Python code and we kind of split

235
00:09:12,820 --> 00:09:16,990
those up into two different sections as

236
00:09:14,500 --> 00:09:19,120
well what happens is the server itself

237
00:09:16,990 --> 00:09:22,240
whatever is acting as the server that's

238
00:09:19,120 --> 00:09:24,160
actually binding to 80 or 443 receives

239
00:09:22,240 --> 00:09:24,310
the request and does some processing on

240
00:09:24,160 --> 00:09:26,800
it

241
00:09:24,310 --> 00:09:30,459
it decodes the URL encoding so that

242
00:09:26,800 --> 00:09:33,640
percent 20% 3d kind of stuff it decodes

243
00:09:30,460 --> 00:09:35,500
that it parses out the incoming path and

244
00:09:33,640 --> 00:09:37,600
the variables so it actually does that

245
00:09:35,500 --> 00:09:40,360
first so it parses out the path and then

246
00:09:37,600 --> 00:09:42,760
parses out the decodes the URL encoding

247
00:09:40,360 --> 00:09:44,589
it decodes the request based on what the

248
00:09:42,760 --> 00:09:47,610
application type is things like that and

249
00:09:44,589 --> 00:09:49,990
the exploits available at this layer is

250
00:09:47,610 --> 00:09:52,420
you know like really just against the

251
00:09:49,990 --> 00:09:54,910
server code itself so malformed request

252
00:09:52,420 --> 00:09:57,280
attacks request smuggling happens here

253
00:09:54,910 --> 00:10:00,310
denial of service boss against the

254
00:09:57,280 --> 00:10:03,699
server etc etc etc below that and this

255
00:10:00,310 --> 00:10:05,770
is still server-side but below that is a

256
00:10:03,700 --> 00:10:09,880
business logic okay and the business

257
00:10:05,770 --> 00:10:11,769
logic is where the path gets routed down

258
00:10:09,880 --> 00:10:13,839
to the code that's executing

259
00:10:11,769 --> 00:10:16,660
and the actual server-side code runs

260
00:10:13,839 --> 00:10:20,709
right so this is the go Java Python Ruby

261
00:10:16,660 --> 00:10:22,540
PHP etc it parses the data that's coming

262
00:10:20,709 --> 00:10:24,758
in from the request and then it

263
00:10:22,540 --> 00:10:26,110
formulates its response it it I don't

264
00:10:24,759 --> 00:10:29,199
want to say compiles because it's not

265
00:10:26,110 --> 00:10:31,179
compiling code but it compiles all of

266
00:10:29,199 --> 00:10:33,399
the data that needs to that it needs to

267
00:10:31,179 --> 00:10:35,230
send to the browser

268
00:10:33,399 --> 00:10:37,360
puts it into languages that the browser

269
00:10:35,230 --> 00:10:39,429
can understand so HTML Javascript CSS

270
00:10:37,360 --> 00:10:42,519
etc and then sends it back down the pipe

271
00:10:39,429 --> 00:10:45,759
this is where a lot of the server-side

272
00:10:42,519 --> 00:10:47,529
exploits come from right so exploits we

273
00:10:45,759 --> 00:10:49,569
got injection attacks include attacks

274
00:10:47,529 --> 00:10:51,579
uploads either arbitrary uploads or

275
00:10:49,569 --> 00:10:55,748
upload bypassing server-side request

276
00:10:51,579 --> 00:10:58,660
forgery etc etc etc etc once that

277
00:10:55,749 --> 00:11:01,179
browser readable code comes down the

278
00:10:58,660 --> 00:11:02,920
comes down in the pipeline the browser

279
00:11:01,179 --> 00:11:05,619
receives it processes all the

280
00:11:02,920 --> 00:11:07,360
client-side languages JavaScript CSS etc

281
00:11:05,619 --> 00:11:10,360
it presents the information to the user

282
00:11:07,360 --> 00:11:12,249
it's often inside a sandbox okay so in

283
00:11:10,360 --> 00:11:14,410
fact pone two owned and various other

284
00:11:12,249 --> 00:11:16,389
polling competitions happen and offer

285
00:11:14,410 --> 00:11:18,759
hundreds of thousands or millions of

286
00:11:16,389 --> 00:11:21,970
dollars to escape the sandbox in

287
00:11:18,759 --> 00:11:24,040
browsers and so I sometimes see in

288
00:11:21,970 --> 00:11:26,589
interviews where people try and do like

289
00:11:24,040 --> 00:11:27,939
code execution with JavaScript and if

290
00:11:26,589 --> 00:11:30,009
that's on the browser side it's not

291
00:11:27,939 --> 00:11:32,618
going to do what you think it's going to

292
00:11:30,009 --> 00:11:34,569
do unless you're a really really good

293
00:11:32,619 --> 00:11:36,399
hacker but browser exploits which are

294
00:11:34,569 --> 00:11:37,839
pretty rare cross-site scripting and

295
00:11:36,399 --> 00:11:39,459
social engineering a lot of time those

296
00:11:37,839 --> 00:11:40,509
are combined those are the types of

297
00:11:39,459 --> 00:11:43,929
attacks that you're seeing at the

298
00:11:40,509 --> 00:11:45,069
browser level I promised a lot of demos

299
00:11:43,929 --> 00:11:46,749
and we'll talk about that and we're

300
00:11:45,069 --> 00:11:49,809
about to jump into another demo right

301
00:11:46,749 --> 00:11:52,139
now but let's talk about the attack that

302
00:11:49,809 --> 00:11:55,749
we're going to pull off so this is a a

303
00:11:52,139 --> 00:11:57,669
representative attack path of something

304
00:11:55,749 --> 00:11:59,679
that I did any bug bounty ain't not too

305
00:11:57,669 --> 00:12:01,689
long ago it was a large payout though

306
00:11:59,679 --> 00:12:03,279
the platform that I did it on wasn't

307
00:12:01,689 --> 00:12:05,410
isn't really known for a large payouts

308
00:12:03,279 --> 00:12:08,410
but it was about 50% more than the

309
00:12:05,410 --> 00:12:10,360
maximum then the what is normally

310
00:12:08,410 --> 00:12:12,399
allowed for this type of exploit so it

311
00:12:10,360 --> 00:12:14,290
was a pretty cool novel attack it

312
00:12:12,399 --> 00:12:16,299
required a lot of different hoops to

313
00:12:14,290 --> 00:12:18,939
jump through and we'll we'll go through

314
00:12:16,299 --> 00:12:20,980
those hoops the code that I use the

315
00:12:18,939 --> 00:12:22,899
application that we're attacking the

316
00:12:20,980 --> 00:12:24,369
exact exploits that we're going to be

317
00:12:22,899 --> 00:12:25,300
that I'm going to be showing are not the

318
00:12:24,369 --> 00:12:27,430
same right they

319
00:12:25,300 --> 00:12:29,829
particular they don't participate in

320
00:12:27,430 --> 00:12:31,660
public disclosure so you know names and

321
00:12:29,830 --> 00:12:33,700
and whatnot have been changed but this

322
00:12:31,660 --> 00:12:36,430
is a very similar path it's also a

323
00:12:33,700 --> 00:12:38,529
similar represents a lot of attacks that

324
00:12:36,430 --> 00:12:41,439
I do on pen test pretty often so this is

325
00:12:38,529 --> 00:12:43,209
these are all you know real-world though

326
00:12:41,440 --> 00:12:47,260
more illustrative than realistic kind of

327
00:12:43,209 --> 00:12:48,729
attacks the first the first real demo

328
00:12:47,260 --> 00:12:49,870
other than the you know cross-site

329
00:12:48,730 --> 00:12:53,470
scripting one that I told you we're

330
00:12:49,870 --> 00:12:56,470
going beyond is is an interesting one so

331
00:12:53,470 --> 00:12:58,570
when we do like white box pen testing a

332
00:12:56,470 --> 00:13:03,010
lot of times we get the code to analyze

333
00:12:58,570 --> 00:13:06,300
and that code is extremely useful to us

334
00:13:03,010 --> 00:13:08,860
to try and hunt down vulnerabilities and

335
00:13:06,300 --> 00:13:10,569
we're gonna start off we're gonna start

336
00:13:08,860 --> 00:13:13,810
off with some enumeration right so

337
00:13:10,570 --> 00:13:16,000
obviously if you saw my last talk at

338
00:13:13,810 --> 00:13:17,529
Wilde was hacking fest this is a covert

339
00:13:16,000 --> 00:13:20,709
pen test you're not going to be throwing

340
00:13:17,529 --> 00:13:23,529
nmap at targets but this is not a covert

341
00:13:20,709 --> 00:13:25,560
pen test so we're going to start off

342
00:13:23,529 --> 00:13:25,560
with

343
00:13:25,840 --> 00:13:29,529
we're going to start off with a nmap

344
00:13:27,730 --> 00:13:31,360
scan of port we know it's a web

345
00:13:29,529 --> 00:13:33,610
application so we're going to just run

346
00:13:31,360 --> 00:13:35,260
port 80

347
00:13:33,610 --> 00:13:36,730
I'm going to do a - a which is going to

348
00:13:35,260 --> 00:13:39,779
do service detection and run some

349
00:13:36,730 --> 00:13:41,399
default scripts and things like that

350
00:13:39,779 --> 00:13:44,870
and we'll make this a little bit bigger

351
00:13:41,399 --> 00:13:44,870
this is gonna be a lot of output

352
00:13:47,660 --> 00:13:54,160
and in this output we see something very

353
00:13:51,140 --> 00:13:57,560
interesting there is a dot git folder

354
00:13:54,160 --> 00:13:59,360
accompanying this web application now

355
00:13:57,560 --> 00:14:01,250
for those of you who are not familiar

356
00:13:59,360 --> 00:14:03,230
git is a source code repository of

357
00:14:01,250 --> 00:14:05,300
software that handles version control

358
00:14:03,230 --> 00:14:07,280
and it's great because it allows us to

359
00:14:05,300 --> 00:14:09,469
make changes and track changes to our

360
00:14:07,280 --> 00:14:11,089
web application and and multiple

361
00:14:09,470 --> 00:14:13,130
developers can participate in the

362
00:14:11,090 --> 00:14:15,830
application development at the same time

363
00:14:13,130 --> 00:14:18,410
and it's super great however this should

364
00:14:15,830 --> 00:14:21,920
never be reflected in prod ok you should

365
00:14:18,410 --> 00:14:24,160
never copy just like get check out and

366
00:14:21,920 --> 00:14:26,599
then or get clone and then you know

367
00:14:24,160 --> 00:14:28,640
directly into VAR dub dub dub okay you

368
00:14:26,600 --> 00:14:31,460
should be copying the code over or

369
00:14:28,640 --> 00:14:34,160
removing the get files or and whatnot

370
00:14:31,460 --> 00:14:37,630
okay so this is a mistake this is a

371
00:14:34,160 --> 00:14:40,819
problem right now so I created a

372
00:14:37,630 --> 00:14:44,480
directory specifically for Wild West a

373
00:14:40,820 --> 00:14:46,010
confessed and will CD into that and when

374
00:14:44,480 --> 00:14:48,230
you see something like this this does

375
00:14:46,010 --> 00:14:50,870
this does happen from time to time I've

376
00:14:48,230 --> 00:14:52,430
seen this in the wild on a bug bounty so

377
00:14:50,870 --> 00:14:53,570
when you see something like this you can

378
00:14:52,430 --> 00:14:58,199
take advantage of this you can actually

379
00:14:53,570 --> 00:14:59,970
download the entire tree

380
00:14:58,200 --> 00:15:02,670
with double you get and so we're gonna

381
00:14:59,970 --> 00:15:04,139
double you get recursive we're not going

382
00:15:02,670 --> 00:15:05,969
to go into parents so if we see any

383
00:15:04,139 --> 00:15:07,110
symlinks that takes us up in the tree

384
00:15:05,970 --> 00:15:09,810
we're not going to go to that because we

385
00:15:07,110 --> 00:15:15,449
don't want it and we're going to

386
00:15:09,810 --> 00:15:17,939
download it have used a border DNS name

387
00:15:15,449 --> 00:15:19,290
for this but we're gonna download the

388
00:15:17,940 --> 00:15:23,810
get directory and I'll show you what

389
00:15:19,290 --> 00:15:23,810
we'll do with it in a moment do

390
00:15:27,180 --> 00:15:31,819
I know it's a directory come on

391
00:15:33,630 --> 00:15:40,220
is happening I literally just did this

392
00:15:36,950 --> 00:15:40,220
last night

393
00:15:42,560 --> 00:15:44,589
ah

394
00:15:46,240 --> 00:15:55,170
come on demo guards

395
00:15:49,200 --> 00:15:56,730
what is happening here w get - R and P

396
00:15:55,170 --> 00:15:59,189
so it might be time to start

397
00:15:56,730 --> 00:16:02,040
slaughtering chickens yeah if anybody

398
00:15:59,190 --> 00:16:04,790
can help with the the demo God's

399
00:16:02,040 --> 00:16:07,480
sacrificing I'd be great

400
00:16:04,790 --> 00:16:07,480
hmm

401
00:16:07,690 --> 00:16:13,140
okay let's do this I happen to have

402
00:16:13,500 --> 00:16:17,760
code for this website right here and so

403
00:16:16,350 --> 00:16:19,800
what's great about this is I actually

404
00:16:17,760 --> 00:16:24,950
have a if you don't have get here's how

405
00:16:19,800 --> 00:16:27,089
we can Oh somebody helped me here ah

406
00:16:24,950 --> 00:16:28,860
that's exactly what happened I dropped

407
00:16:27,090 --> 00:16:29,400
the C in Corbett SEC net thank you very

408
00:16:28,860 --> 00:16:32,210
much

409
00:16:29,400 --> 00:16:32,209
anonymous person

410
00:16:33,190 --> 00:16:40,010
there we go okay now we're recursively

411
00:16:35,720 --> 00:16:41,990
downloading it helps if you type the web

412
00:16:40,010 --> 00:16:46,010
directory correctly but as you can see

413
00:16:41,990 --> 00:16:48,860
we're downloading a ton of files from in

414
00:16:46,010 --> 00:16:51,319
this dot git directory now this is all

415
00:16:48,860 --> 00:16:53,780
metadata that's used by get to track

416
00:16:51,320 --> 00:16:57,410
changes and whatnot but what's really

417
00:16:53,780 --> 00:17:00,620
cool about this so if we CD into the

418
00:16:57,410 --> 00:17:02,569
correct corvid Sekhmet and if we run an

419
00:17:00,620 --> 00:17:06,190
LS all we have is the dot get directory

420
00:17:02,570 --> 00:17:10,670
we don't have any code yet all right but

421
00:17:06,190 --> 00:17:13,490
from here we can actually

422
00:17:10,670 --> 00:17:16,910
get the code so we can take a look at

423
00:17:13,490 --> 00:17:19,400
like what's going on by using git log

424
00:17:16,910 --> 00:17:22,280
and we're gonna do - - pretty just kind

425
00:17:19,400 --> 00:17:25,370
of pretty up a little bit and we want

426
00:17:22,280 --> 00:17:27,290
all of the git commits in one line with

427
00:17:25,369 --> 00:17:28,699
this repository it's not a big deal

428
00:17:27,290 --> 00:17:30,560
because there's only two commits but

429
00:17:28,700 --> 00:17:32,390
this really helps when there's you know

430
00:17:30,560 --> 00:17:34,520
like thousands of commits or hundreds of

431
00:17:32,390 --> 00:17:36,350
so we see two different commits now we

432
00:17:34,520 --> 00:17:38,540
see a commit here that's removing the

433
00:17:36,350 --> 00:17:40,310
database creds from files and adding you

434
00:17:38,540 --> 00:17:42,620
know credential file to get ignore and

435
00:17:40,310 --> 00:17:44,480
like doing some general cleanup and this

436
00:17:42,620 --> 00:17:46,310
is actually also pretty common so we

437
00:17:44,480 --> 00:17:47,840
actually want to revert a little earlier

438
00:17:46,310 --> 00:17:51,530
so we can get all the juicy stuff ready

439
00:17:47,840 --> 00:17:53,389
we're gonna do a git checkout we're

440
00:17:51,530 --> 00:17:56,530
gonna check out this commit right here

441
00:17:53,390 --> 00:17:56,530
that's identified by this hash

442
00:17:56,930 --> 00:18:04,010
do a get reset hard and that's gonna

443
00:18:00,290 --> 00:18:07,190
bring us to the actual format that it

444
00:18:04,010 --> 00:18:10,310
was in for that commit and so now we

445
00:18:07,190 --> 00:18:12,920
have all of the code that's associated

446
00:18:10,310 --> 00:18:14,330
with this website at this time right and

447
00:18:12,920 --> 00:18:16,310
we can start looking around and seeing

448
00:18:14,330 --> 00:18:18,679
all kinds of fancy stuff but we're not

449
00:18:16,310 --> 00:18:21,649
quite there yet in our in our

450
00:18:18,680 --> 00:18:24,140
demonstration what happens if we don't

451
00:18:21,650 --> 00:18:27,110
have yet we don't find a doc you

452
00:18:24,140 --> 00:18:29,000
director e well if we have local file

453
00:18:27,110 --> 00:18:31,250
include and it's a PHP site which the

454
00:18:29,000 --> 00:18:33,830
site happens to be and most of the

455
00:18:31,250 --> 00:18:35,960
internet is because WordPress is PHP if

456
00:18:33,830 --> 00:18:39,710
it's a PHP site we can actually use a

457
00:18:35,960 --> 00:18:41,210
built in PHP feature to also exfiltrate

458
00:18:39,710 --> 00:18:42,710
code and I'll show you what that looks

459
00:18:41,210 --> 00:18:45,500
like in just a second but we're gonna

460
00:18:42,710 --> 00:18:47,360
make use of these PHP wrappers or these

461
00:18:45,500 --> 00:18:50,030
PHP filters that are used in the PHP

462
00:18:47,360 --> 00:18:52,129
wrapper okay so this is what the exploit

463
00:18:50,030 --> 00:18:55,910
looks like and we'll will jump in in

464
00:18:52,130 --> 00:18:58,490
just a second to demo that if you notice

465
00:18:55,910 --> 00:19:00,680
up in and it's a little hard to see I

466
00:18:58,490 --> 00:19:03,740
can't actually zoom that but if you

467
00:19:00,680 --> 00:19:06,260
notice up in the URL window we have a

468
00:19:03,740 --> 00:19:11,840
page equals insight equals search dot

469
00:19:06,260 --> 00:19:14,240
PHP that is a little contrived but very

470
00:19:11,840 --> 00:19:15,949
similar to what we see a lot in PHP

471
00:19:14,240 --> 00:19:17,450
sites where you have like one main index

472
00:19:15,950 --> 00:19:19,850
page that's controlling the formatting

473
00:19:17,450 --> 00:19:22,970
and you're just including code in there

474
00:19:19,850 --> 00:19:25,850
what happens and you see this a lot is

475
00:19:22,970 --> 00:19:27,410
like we you know put in a bunch of dot

476
00:19:25,850 --> 00:19:30,590
dot slash dot dot slash dot dot slash

477
00:19:27,410 --> 00:19:32,150
and then Etsy password and here it's

478
00:19:30,590 --> 00:19:32,629
like oh look at C password that's so

479
00:19:32,150 --> 00:19:34,730
cool

480
00:19:32,630 --> 00:19:37,520
but yeah I mean that's great for a demo

481
00:19:34,730 --> 00:19:40,930
I guess but what else can you do with it

482
00:19:37,520 --> 00:19:40,930
well we're gonna try an exfiltration

483
00:19:47,020 --> 00:19:52,400
including the site here right and when

484
00:19:50,720 --> 00:19:54,440
we include the site it's running the

485
00:19:52,400 --> 00:19:56,180
code we don't actually get access to the

486
00:19:54,440 --> 00:19:58,190
code which is unfortunate because we

487
00:19:56,180 --> 00:20:00,530
want access to the code well this is

488
00:19:58,190 --> 00:20:03,650
where those PHP e filters come in

489
00:20:00,530 --> 00:20:07,460
instead of putting in site search PHP

490
00:20:03,650 --> 00:20:10,809
we're going to do PHP colon slash slash

491
00:20:07,460 --> 00:20:14,860
filter / invert

492
00:20:10,809 --> 00:20:16,240
dot base64 encode slash and basically

493
00:20:14,860 --> 00:20:18,549
what we're doing is we're saying hey in

494
00:20:16,240 --> 00:20:20,559
the PHP wrapper we have some filters

495
00:20:18,549 --> 00:20:23,408
that we can use and one of them is to

496
00:20:20,559 --> 00:20:25,149
convert into base64 now shout out to

497
00:20:23,409 --> 00:20:27,240
Geoff McJunkin for first teaching me

498
00:20:25,149 --> 00:20:29,620
about this capability and it's been

499
00:20:27,240 --> 00:20:31,929
gangbusters ever since it's been super

500
00:20:29,620 --> 00:20:34,120
useful so we're going to convert all of

501
00:20:31,929 --> 00:20:35,889
the content for the resource that we're

502
00:20:34,120 --> 00:20:37,539
about to ask for in fact resources that

503
00:20:35,889 --> 00:20:38,678
the next thing we type in the resource

504
00:20:37,539 --> 00:20:41,139
that we asked for we're going to convert

505
00:20:38,679 --> 00:20:45,309
it all into basic c4 the reason for this

506
00:20:41,139 --> 00:20:48,070
is that when a PHP when a server that's

507
00:20:45,309 --> 00:20:50,470
configured to show P run PHP code sees

508
00:20:48,070 --> 00:20:52,059
PHP code it runs it and we don't want it

509
00:20:50,470 --> 00:20:54,639
to run it we want it to just print it

510
00:20:52,059 --> 00:20:56,889
out and if it sees base64 that's not PHP

511
00:20:54,639 --> 00:21:00,219
code right so it's actually going to

512
00:20:56,889 --> 00:21:04,129
print out the base64 for us when we hit

513
00:21:00,220 --> 00:21:06,080
run it kind of tanks for a little bit

514
00:21:04,130 --> 00:21:08,600
let's do this on a command line where

515
00:21:06,080 --> 00:21:11,139
it's a little easier to deal with and if

516
00:21:08,600 --> 00:21:11,139
we curl this

517
00:21:12,120 --> 00:21:17,428
oh there is

518
00:21:14,860 --> 00:21:17,428
to be a

519
00:21:17,899 --> 00:21:24,268
there we go and when we look at this we

520
00:21:20,909 --> 00:21:25,830
see this beautiful huge block of base64

521
00:21:24,269 --> 00:21:27,389
encoding and we're going to make this

522
00:21:25,830 --> 00:21:29,820
text a little bit smaller so we can see

523
00:21:27,389 --> 00:21:31,649
it all in one screen

524
00:21:29,820 --> 00:21:34,470
and this huge block of base64 encoding

525
00:21:31,650 --> 00:21:38,370
great what do we do with this but we're

526
00:21:34,470 --> 00:21:42,060
going to decode it right so we copy this

527
00:21:38,370 --> 00:21:45,439
and we're about to do some really ugly

528
00:21:42,060 --> 00:21:45,440
hacky Python

529
00:21:46,260 --> 00:21:50,790
apologize in advance for showing you

530
00:21:48,630 --> 00:21:53,610
this but it's a really straightforward

531
00:21:50,790 --> 00:21:55,889
way to get it done so when we copied it

532
00:21:53,610 --> 00:21:59,939
there were a bunch of new lines embedded

533
00:21:55,890 --> 00:22:01,800
into B into the code and we can see

534
00:21:59,940 --> 00:22:03,150
these here so there's a new line here

535
00:22:01,800 --> 00:22:04,320
there's a new line here there's a new

536
00:22:03,150 --> 00:22:11,340
line here and that's going to disrupt

537
00:22:04,320 --> 00:22:14,790
our base64 encoding so if we base64 we

538
00:22:11,340 --> 00:22:22,280
need to import base64 imported 864 m a

539
00:22:14,790 --> 00:22:27,770
base64 dot b64 decode and we're going to

540
00:22:22,280 --> 00:22:27,770
join a split

541
00:22:29,710 --> 00:22:34,750
at new line don't worry I'll explain

542
00:22:33,040 --> 00:22:36,670
what this god-awful code is doing in a

543
00:22:34,750 --> 00:22:38,890
second okay so what we're doing here is

544
00:22:36,670 --> 00:22:40,450
we're taking a which has all the new

545
00:22:38,890 --> 00:22:43,210
lines in it and we're splitting it into

546
00:22:40,450 --> 00:22:44,380
a list of strings and we're breaking it

547
00:22:43,210 --> 00:22:48,010
at the new line to get rid of the new

548
00:22:44,380 --> 00:22:49,660
ones and then we're joining with nothing

549
00:22:48,010 --> 00:22:51,070
now you could do like a search and

550
00:22:49,660 --> 00:22:52,930
replace and a bunch of other functions

551
00:22:51,070 --> 00:22:56,770
but this is a pretty quick way to do it

552
00:22:52,930 --> 00:23:00,910
and when we do that we get this now this

553
00:22:56,770 --> 00:23:02,350
is the actual code for index.php all

554
00:23:00,910 --> 00:23:05,260
right so all we're doing really is just

555
00:23:02,350 --> 00:23:07,120
editing the file to get pure base 64 and

556
00:23:05,260 --> 00:23:08,710
then decoding that basic ste for we're

557
00:23:07,120 --> 00:23:12,159
seeing things like cookies being said

558
00:23:08,710 --> 00:23:14,410
and we see some different logic based on

559
00:23:12,160 --> 00:23:16,540
what post parameters are included and

560
00:23:14,410 --> 00:23:19,000
things like that so this is actually the

561
00:23:16,540 --> 00:23:21,460
code of index

562
00:23:19,000 --> 00:23:24,850
so again if we don't have a git

563
00:23:21,460 --> 00:23:29,380
directory we can use lfi or other things

564
00:23:24,850 --> 00:23:30,699
to get that code if possible let's jump

565
00:23:29,380 --> 00:23:34,810
back into the deck for a couple minutes

566
00:23:30,700 --> 00:23:36,820
we're about halfway through the attack

567
00:23:34,810 --> 00:23:40,419
path that we used for the bug bounty and

568
00:23:36,820 --> 00:23:41,919
now we've got code now what do we look

569
00:23:40,420 --> 00:23:43,960
for once we have the code because you

570
00:23:41,920 --> 00:23:45,490
could spend you know a week or two weeks

571
00:23:43,960 --> 00:23:47,590
or depending on how big the application

572
00:23:45,490 --> 00:23:49,270
is a month doing a code audit you just

573
00:23:47,590 --> 00:23:51,100
go line by line by line like seeing

574
00:23:49,270 --> 00:23:52,960
where all the bugs are but nobody's got

575
00:23:51,100 --> 00:23:55,209
time for that right I don't know any pen

576
00:23:52,960 --> 00:23:57,700
tests firm that that regularly gets like

577
00:23:55,210 --> 00:23:59,110
you know five six week engagements where

578
00:23:57,700 --> 00:24:01,380
they can just take their time and do

579
00:23:59,110 --> 00:24:03,969
things correctly we need quick wits and

580
00:24:01,380 --> 00:24:06,970
some of the quickest wins are looking

581
00:24:03,970 --> 00:24:08,620
for code execution paths or you know

582
00:24:06,970 --> 00:24:11,020
sequel injection paths looking for

583
00:24:08,620 --> 00:24:13,000
filters and things like that but the two

584
00:24:11,020 --> 00:24:14,830
biggest really are our code execution

585
00:24:13,000 --> 00:24:16,750
and there are two types of code

586
00:24:14,830 --> 00:24:20,260
execution there's system calls and like

587
00:24:16,750 --> 00:24:22,600
eval calls so system calls are examples

588
00:24:20,260 --> 00:24:25,660
of a server-side code passing your input

589
00:24:22,600 --> 00:24:29,320
or passing parameters directly down to

590
00:24:25,660 --> 00:24:31,510
the operating system itself okay so it

591
00:24:29,320 --> 00:24:33,669
passes the parameters down to the OS for

592
00:24:31,510 --> 00:24:36,610
OS execution and this is an example of

593
00:24:33,670 --> 00:24:37,540
command injection all right this is

594
00:24:36,610 --> 00:24:40,209
great stuff

595
00:24:37,540 --> 00:24:41,560
by the way a system calls and system

596
00:24:40,210 --> 00:24:43,630
execution are exactly what we're going

597
00:24:41,560 --> 00:24:45,700
to be doing in this demonstration the

598
00:24:43,630 --> 00:24:47,860
bug bounding itself was actually an eval

599
00:24:45,700 --> 00:24:50,380
call and that was where the server-side

600
00:24:47,860 --> 00:24:53,050
code in that case it was Perl I did my

601
00:24:50,380 --> 00:24:55,540
time as a Perl developer and in my old

602
00:24:53,050 --> 00:24:57,040
Linux s admin days and I feel like I

603
00:24:55,540 --> 00:24:59,320
have a right to complain about it what

604
00:24:57,040 --> 00:25:01,930
we found was eval calls that were

605
00:24:59,320 --> 00:25:04,360
actually evaluating the server-side code

606
00:25:01,930 --> 00:25:07,630
in our input and so we were able to

607
00:25:04,360 --> 00:25:09,639
inject at that point Perl code to change

608
00:25:07,630 --> 00:25:11,230
the the way that the web application

609
00:25:09,640 --> 00:25:12,610
worked and they were filtering a bunch

610
00:25:11,230 --> 00:25:14,830
of stuff but they weren't filtering a

611
00:25:12,610 --> 00:25:17,469
parenthesis so we were able to pull

612
00:25:14,830 --> 00:25:19,899
together this this really ugly system

613
00:25:17,470 --> 00:25:22,690
call with parentheses but this is an

614
00:25:19,900 --> 00:25:24,340
example of code execution okay it passes

615
00:25:22,690 --> 00:25:26,980
the parameters to the code interpreter

616
00:25:24,340 --> 00:25:30,429
not to the operating system back to

617
00:25:26,980 --> 00:25:32,980
demos so now that we've got some

618
00:25:30,430 --> 00:25:34,930
we kind of want to take a look at what

619
00:25:32,980 --> 00:25:37,330
the code looks like now we again we

620
00:25:34,930 --> 00:25:39,430
don't want to search we don't want to do

621
00:25:37,330 --> 00:25:40,899
a line by line code evaluation so we're

622
00:25:39,430 --> 00:25:42,520
just going to use grep right we're just

623
00:25:40,900 --> 00:25:45,190
going to use make that a little bigger

624
00:25:42,520 --> 00:25:47,379
we're gonna use grep to search for

625
00:25:45,190 --> 00:25:51,100
different search terms in our

626
00:25:47,380 --> 00:25:52,180
application now this is a presentation

627
00:25:51,100 --> 00:25:54,280
I'm trying to keep this relatively

628
00:25:52,180 --> 00:25:56,020
real-world but this is a presentation so

629
00:25:54,280 --> 00:25:57,970
I've got things a little scripted I know

630
00:25:56,020 --> 00:26:00,220
ahead of time that shell exec is being

631
00:25:57,970 --> 00:26:02,440
used in one of the applications what

632
00:26:00,220 --> 00:26:04,210
would you what would you search for well

633
00:26:02,440 --> 00:26:06,610
it's it was on the previous slide right

634
00:26:04,210 --> 00:26:08,680
we're gonna be looking for system and

635
00:26:06,610 --> 00:26:12,250
pass through an exec and P open and eval

636
00:26:08,680 --> 00:26:15,130
and exec it really depends on what the

637
00:26:12,250 --> 00:26:17,320
server-side language you're attacking is

638
00:26:15,130 --> 00:26:18,910
right so whatever the framework you're

639
00:26:17,320 --> 00:26:21,159
attacking is you would do some googling

640
00:26:18,910 --> 00:26:23,730
to see you know what you know what

641
00:26:21,160 --> 00:26:25,900
possible code execution sequel injection

642
00:26:23,730 --> 00:26:26,530
raises et cetera that you're gonna be

643
00:26:25,900 --> 00:26:29,200
looking for

644
00:26:26,530 --> 00:26:31,360
so in here using this grep we can see

645
00:26:29,200 --> 00:26:34,290
that connection checker is running a

646
00:26:31,360 --> 00:26:37,179
ping command for us now we know that

647
00:26:34,290 --> 00:26:39,310
looking at this PHP code we know that

648
00:26:37,180 --> 00:26:42,250
it's taking our input from a post

649
00:26:39,310 --> 00:26:45,129
parameter and putting it directly into a

650
00:26:42,250 --> 00:26:46,870
shell exec statement running a ping

651
00:26:45,130 --> 00:26:48,760
against a target right so it's it's

652
00:26:46,870 --> 00:26:51,070
helping troubleshoot some connectivity

653
00:26:48,760 --> 00:26:52,840
issues maybe but they're not sanitizing

654
00:26:51,070 --> 00:26:54,340
input they're not doing anything but

655
00:26:52,840 --> 00:26:57,699
taking our input and putting it directly

656
00:26:54,340 --> 00:26:59,470
into the application so let's check that

657
00:26:57,700 --> 00:27:01,810
out we're going to go to the

658
00:26:59,470 --> 00:27:03,490
connectivity checker we see that it

659
00:27:01,810 --> 00:27:04,960
allows us to ping other computers and

660
00:27:03,490 --> 00:27:06,010
it's meant to assist troubleshooting and

661
00:27:04,960 --> 00:27:08,740
we shouldn't use it for any nefarious

662
00:27:06,010 --> 00:27:10,000
activities and you know pen testers and

663
00:27:08,740 --> 00:27:15,480
hackers always listen to instructions

664
00:27:10,000 --> 00:27:15,480
right so super basic

665
00:27:15,950 --> 00:27:20,690
super basic payload here we're gonna use

666
00:27:18,260 --> 00:27:23,600
a semicolon to escape out of the command

667
00:27:20,690 --> 00:27:26,630
that was being presented we're going to

668
00:27:23,600 --> 00:27:28,639
run ide and an hostname and end date now

669
00:27:26,630 --> 00:27:30,380
these are commands that i typically use

670
00:27:28,639 --> 00:27:32,959
in my reports because it lets us know

671
00:27:30,380 --> 00:27:36,230
who we're running as what we're running

672
00:27:32,960 --> 00:27:38,659
on and the the date that it was ran and

673
00:27:36,230 --> 00:27:40,340
it's just fairly good proof internally

674
00:27:38,659 --> 00:27:42,230
we use a another few commands to give

675
00:27:40,340 --> 00:27:43,820
more information about the target about

676
00:27:42,230 --> 00:27:47,090
bug bounties this is typically enough

677
00:27:43,820 --> 00:27:48,950
this is a very straightforward payload

678
00:27:47,090 --> 00:27:49,908
if it was doing any filtering at all

679
00:27:48,950 --> 00:27:52,159
we'd have to start getting a little

680
00:27:49,909 --> 00:27:54,019
creative but it's not built for that

681
00:27:52,159 --> 00:27:55,639
it's built for you know demonstrations

682
00:27:54,019 --> 00:27:57,799
this is a very straightforward payload

683
00:27:55,639 --> 00:27:59,299
now the great thing about what we did

684
00:27:57,799 --> 00:28:02,029
and pulling the code is if there were

685
00:27:59,299 --> 00:28:04,070
filters we'd know about them so even if

686
00:28:02,029 --> 00:28:06,110
we saw this connection checker earlier

687
00:28:04,070 --> 00:28:07,428
and it's like oh well this is this

688
00:28:06,110 --> 00:28:09,769
should be vulnerable but we can't get

689
00:28:07,429 --> 00:28:11,450
anything executing on it once we get

690
00:28:09,769 --> 00:28:13,580
access to the code we can see what the

691
00:28:11,450 --> 00:28:16,309
filters are and start devising ways to

692
00:28:13,580 --> 00:28:18,620
to get around them okay so instead of

693
00:28:16,309 --> 00:28:20,840
using ampersands and semicolons we'll

694
00:28:18,620 --> 00:28:22,189
use pipes or we'll use you know sub

695
00:28:20,840 --> 00:28:24,889
shells or something like that whatever

696
00:28:22,190 --> 00:28:26,710
they're not guarding against will we'll

697
00:28:24,889 --> 00:28:28,810
utilize

698
00:28:26,710 --> 00:28:31,000
which is why explicit deny filters are

699
00:28:28,810 --> 00:28:33,040
never good because eventually somebody's

700
00:28:31,000 --> 00:28:37,060
gonna figure it out but if we submit

701
00:28:33,040 --> 00:28:40,000
this we see that our our code is running

702
00:28:37,060 --> 00:28:42,700
so we get our UUID of dub dub dub data

703
00:28:40,000 --> 00:28:45,040
and here's the host name and here's the

704
00:28:42,700 --> 00:28:46,810
day in UTC because that's the only time

705
00:28:45,040 --> 00:28:48,820
zone computers care about let's take

706
00:28:46,810 --> 00:28:52,210
this a step further so what happens if

707
00:28:48,820 --> 00:28:54,760
there is no exec okay what happens if

708
00:28:52,210 --> 00:28:56,680
there's no exec well luckily there's

709
00:28:54,760 --> 00:28:58,290
ways around that - or this we're gonna

710
00:28:56,680 --> 00:29:01,810
need to talk about a little bit more

711
00:28:58,290 --> 00:29:04,810
nuance between the difference of a file

712
00:29:01,810 --> 00:29:07,780
include in a file open now and include

713
00:29:04,810 --> 00:29:09,909
in most languages actually includes code

714
00:29:07,780 --> 00:29:11,560
it's an import it's an include it's a

715
00:29:09,910 --> 00:29:15,790
whatever and it's trying to pull in

716
00:29:11,560 --> 00:29:17,740
blocks of code into its running behavior

717
00:29:15,790 --> 00:29:19,480
to extend that running behavior these

718
00:29:17,740 --> 00:29:22,090
are the libraries or just functions or

719
00:29:19,480 --> 00:29:24,490
whatever this code is interpreted and it

720
00:29:22,090 --> 00:29:26,199
will result in local file include and

721
00:29:24,490 --> 00:29:28,720
execution based on code

722
00:29:26,200 --> 00:29:32,230
there are also file opens okay and these

723
00:29:28,720 --> 00:29:35,530
are for opening log files or writing to

724
00:29:32,230 --> 00:29:37,660
log files or a manipulation of data and

725
00:29:35,530 --> 00:29:39,460
exploits here are really for like data

726
00:29:37,660 --> 00:29:41,890
leakage and data corruption you're not

727
00:29:39,460 --> 00:29:45,670
going to get execution out of this what

728
00:29:41,890 --> 00:29:48,580
we did earlier where we included a you

729
00:29:45,670 --> 00:29:50,230
know the the index dot PHP this is what

730
00:29:48,580 --> 00:29:51,220
it should have happened the file include

731
00:29:50,230 --> 00:29:53,830
should have happened that code should

732
00:29:51,220 --> 00:29:55,510
have been interpreted but we encoded it

733
00:29:53,830 --> 00:29:57,669
so it wasn't recognized as valid code

734
00:29:55,510 --> 00:29:59,740
what we're going to use a file include

735
00:29:57,670 --> 00:30:02,980
we're gonna do a tactic called blog

736
00:29:59,740 --> 00:30:05,980
pollution to pollute a log that is

737
00:30:02,980 --> 00:30:09,070
opened for writing and then include it

738
00:30:05,980 --> 00:30:11,770
using the lfi that we got earlier and

739
00:30:09,070 --> 00:30:13,510
Elif I really especially in PHP is just

740
00:30:11,770 --> 00:30:15,280
the gift that keeps on giving it's so

741
00:30:13,510 --> 00:30:18,129
versatile

742
00:30:15,280 --> 00:30:20,290
so for this we're going to open burp and

743
00:30:18,130 --> 00:30:24,330
I have burp open here I'm going to

744
00:30:20,290 --> 00:30:24,330
configure my firefox to use burp

745
00:30:24,640 --> 00:30:30,910
and we're going to visit the admin page

746
00:30:27,300 --> 00:30:35,590
when we visit the admin page we see that

747
00:30:30,910 --> 00:30:37,570
it is logging access to our user agent

748
00:30:35,590 --> 00:30:39,429
say it says unauthorized attempt and

749
00:30:37,570 --> 00:30:42,460
then it's logging access attempt and it

750
00:30:39,430 --> 00:30:46,570
says the user agent here if we go into

751
00:30:42,460 --> 00:30:49,900
our code which we have and we let the

752
00:30:46,570 --> 00:30:51,370
admin endpoint admin we're gonna see the

753
00:30:49,900 --> 00:30:52,870
cookie that it needs to be but we'll

754
00:30:51,370 --> 00:30:55,149
ignore the fact that the cookie is is

755
00:30:52,870 --> 00:30:58,750
listed here and look down and we

756
00:30:55,150 --> 00:31:01,810
actually see that we're setting a user

757
00:30:58,750 --> 00:31:04,540
agent log and then we're going to open

758
00:31:01,810 --> 00:31:07,210
and write to it when we need to do

759
00:31:04,540 --> 00:31:09,100
logging of access attempts so user agent

760
00:31:07,210 --> 00:31:11,670
dot log is the file that we're going to

761
00:31:09,100 --> 00:31:11,669
be targeting

762
00:31:12,100 --> 00:31:16,090
in our history here we see that we went

763
00:31:14,140 --> 00:31:18,940
to the admin page and we're going to

764
00:31:16,090 --> 00:31:21,189
utilize a burp feature called repeater

765
00:31:18,940 --> 00:31:23,290
and this is the way I do most of my work

766
00:31:21,190 --> 00:31:25,570
some people do the intercept and

767
00:31:23,290 --> 00:31:27,970
intercept and interact with their

768
00:31:25,570 --> 00:31:30,340
requests like live that's not really the

769
00:31:27,970 --> 00:31:32,590
way I work I tend to get something into

770
00:31:30,340 --> 00:31:34,659
my HTTP history and then shunt it over a

771
00:31:32,590 --> 00:31:36,520
repeater then I can very quickly iterate

772
00:31:34,660 --> 00:31:39,760
through and fuzz through things manually

773
00:31:36,520 --> 00:31:41,230
since it's recording or user agent we're

774
00:31:39,760 --> 00:31:46,080
going to remove that user agent and

775
00:31:41,230 --> 00:31:46,080
we're going to put in our own code

776
00:31:46,510 --> 00:31:52,480
okay now the user-agent is used to tell

777
00:31:50,230 --> 00:31:54,040
the web server what information about

778
00:31:52,480 --> 00:31:56,590
our client right but it's also

779
00:31:54,040 --> 00:31:57,909
controlled by the client and this is

780
00:31:56,590 --> 00:31:59,709
something that a lot of web developers

781
00:31:57,910 --> 00:32:02,049
fall into is that you should never trust

782
00:31:59,710 --> 00:32:06,050
code that's coming from the client so

783
00:32:02,049 --> 00:32:08,120
we're going to send this

784
00:32:06,050 --> 00:32:12,500
to the admin endpoint and if we scroll

785
00:32:08,120 --> 00:32:15,020
down we see like you see unauthorized

786
00:32:12,500 --> 00:32:19,880
access attempt logging attempts logging

787
00:32:15,020 --> 00:32:22,760
access attempt by and then here we can

788
00:32:19,880 --> 00:32:27,230
assume that this has been now passed

789
00:32:22,760 --> 00:32:29,330
into that that file and if it's been

790
00:32:27,230 --> 00:32:31,490
passed into that file then we should be

791
00:32:29,330 --> 00:32:35,780
able to include that file and actually

792
00:32:31,490 --> 00:32:38,420
have the PHP run okay so there's PHP now

793
00:32:35,780 --> 00:32:43,010
in this web or I'm sorry inside this

794
00:32:38,420 --> 00:32:46,280
text file and when a PHP server sees PHP

795
00:32:43,010 --> 00:32:49,100
files our PHP code it tries to run it

796
00:32:46,280 --> 00:32:50,480
this is kind of a server miss

797
00:32:49,100 --> 00:32:53,120
configuration though it's a default

798
00:32:50,480 --> 00:32:55,370
server miss configuration in that PHP

799
00:32:53,120 --> 00:32:58,070
server should only be interpreting PHP

800
00:32:55,370 --> 00:33:00,469
and like dot PHP files or dot PHP 5 or

801
00:32:58,070 --> 00:33:04,040
anything like that but by default PHP

802
00:33:00,470 --> 00:33:06,110
looks for PHP code almost anywhere

803
00:33:04,040 --> 00:33:08,809
including you can like embed PHP code

804
00:33:06,110 --> 00:33:10,459
inside of an image file and maybe not by

805
00:33:08,809 --> 00:33:12,440
default anymore but for a long time by

806
00:33:10,460 --> 00:33:14,679
default it would actually interpret that

807
00:33:12,440 --> 00:33:18,350
PHP code inside that image file so

808
00:33:14,679 --> 00:33:20,570
instead of including the admin PHP

809
00:33:18,350 --> 00:33:22,740
information we're going to use the user

810
00:33:20,570 --> 00:33:25,379
agent that log

811
00:33:22,740 --> 00:33:28,730
we're gonna include that and when we hit

812
00:33:25,380 --> 00:33:31,770
enter we should see the ID information

813
00:33:28,730 --> 00:33:35,520
dub-dub-dub data pop up inside the

814
00:33:31,770 --> 00:33:39,399
access log and here we see our failed X

815
00:33:35,520 --> 00:33:41,710
our failed login attempts both times

816
00:33:39,399 --> 00:33:43,839
and then we also see the output from our

817
00:33:41,710 --> 00:33:46,210
command injection and so this is another

818
00:33:43,839 --> 00:33:48,039
way if we're able to get lfi and we're

819
00:33:46,210 --> 00:33:51,339
able to pollute the log in some way

820
00:33:48,039 --> 00:33:54,609
generally this is by you know accessing

821
00:33:51,339 --> 00:33:58,330
a page with like you know like percent

822
00:33:54,609 --> 00:34:01,269
20 pH you know PHP e and then you put

823
00:33:58,330 --> 00:34:03,399
your PHP code in the URL itself and then

824
00:34:01,269 --> 00:34:04,719
you include like the access log or

825
00:34:03,399 --> 00:34:06,609
something like that but if you're able

826
00:34:04,719 --> 00:34:08,889
to pollute a log that you can then

827
00:34:06,609 --> 00:34:11,078
include you can get command and

828
00:34:08,889 --> 00:34:13,450
execution without yet having like a

829
00:34:11,079 --> 00:34:17,109
system or a guzik or eval or something

830
00:34:13,449 --> 00:34:18,750
like that in the code so what are the

831
00:34:17,109 --> 00:34:22,049
takeaways

832
00:34:18,750 --> 00:34:27,839
the takeaways here are that web apps are

833
00:34:22,050 --> 00:34:31,679
are very complex and has many different

834
00:34:27,839 --> 00:34:33,690
layers right a lot of the a lot of the

835
00:34:31,679 --> 00:34:36,119
mistakes that I see when I get interview

836
00:34:33,690 --> 00:34:37,829
like pre-screen question backs back or

837
00:34:36,119 --> 00:34:40,020
talk of talk to people in interviews

838
00:34:37,829 --> 00:34:42,179
I'll give them a filter to bypass and

839
00:34:40,020 --> 00:34:45,300
it'll be like okay well you know here's

840
00:34:42,179 --> 00:34:48,359
a code execution vulnerability but it's

841
00:34:45,300 --> 00:34:51,389
filtering semicolons and the answer I'll

842
00:34:48,359 --> 00:34:54,719
get back is like semicolon URL encoded

843
00:34:51,389 --> 00:34:57,690
and that shows a fundamental

844
00:34:54,719 --> 00:34:59,790
misunderstanding of up the slide back up

845
00:34:57,690 --> 00:35:01,619
here shows a fundamental fundamental

846
00:34:59,790 --> 00:35:04,170
understand this understanding of how the

847
00:35:01,619 --> 00:35:06,839
web applications themselves work okay

848
00:35:04,170 --> 00:35:09,540
because the URL gets decoded like when

849
00:35:06,839 --> 00:35:11,849
the server first receives the the

850
00:35:09,540 --> 00:35:14,670
request okay and regardless of what

851
00:35:11,849 --> 00:35:17,400
server that is it's the it interprets

852
00:35:14,670 --> 00:35:21,020
the URL and then decodes URL encoding

853
00:35:17,400 --> 00:35:24,839
the purpose of URL encoding is to not

854
00:35:21,020 --> 00:35:27,450
corrupt the the URL itself because

855
00:35:24,839 --> 00:35:29,578
inside of various different things you

856
00:35:27,450 --> 00:35:32,310
could have slashes and question marks

857
00:35:29,579 --> 00:35:34,920
and semicolons and things that mean

858
00:35:32,310 --> 00:35:37,259
something to a web server right if you

859
00:35:34,920 --> 00:35:38,579
put a slash in your get parameter does

860
00:35:37,260 --> 00:35:41,130
that mean that it's a different

861
00:35:38,579 --> 00:35:43,230
directory that the web server should be

862
00:35:41,130 --> 00:35:46,290
dealing with or is that just part of the

863
00:35:43,230 --> 00:35:48,660
input code what is that slash for so we

864
00:35:46,290 --> 00:35:50,609
use URL encoding to say hey when you're

865
00:35:48,660 --> 00:35:52,859
interpreting the path do not interpret

866
00:35:50,609 --> 00:35:54,720
this as a path component interpret the

867
00:35:52,859 --> 00:35:55,529
path first then decode this and you can

868
00:35:54,720 --> 00:35:59,098
pass it along

869
00:35:55,530 --> 00:36:01,079
so URL encoding happens way over here

870
00:35:59,099 --> 00:36:02,700
and then when it decodes the request

871
00:36:01,079 --> 00:36:04,020
application then it passes it down to

872
00:36:02,700 --> 00:36:08,149
the business logic where the actual

873
00:36:04,020 --> 00:36:11,310
filters are okay so you can use some

874
00:36:08,150 --> 00:36:14,130
nifty stuff to do malformed requests and

875
00:36:11,310 --> 00:36:16,140
bypass some some server functionality

876
00:36:14,130 --> 00:36:17,880
behavior but the majority of your

877
00:36:16,140 --> 00:36:20,879
filtering is going to happen inside the

878
00:36:17,880 --> 00:36:23,130
business logic and that's after URL

879
00:36:20,880 --> 00:36:25,619
decoding has happened so web servers

880
00:36:23,130 --> 00:36:28,530
have many layers and it's important to

881
00:36:25,619 --> 00:36:30,810
understand how the application is

882
00:36:28,530 --> 00:36:32,320
working and the true capabilities of the

883
00:36:30,810 --> 00:36:34,630
web application and

884
00:36:32,320 --> 00:36:36,190
the language underlying that LED

885
00:36:34,630 --> 00:36:39,030
application to be able to exploit

886
00:36:36,190 --> 00:36:42,190
knowing these PHP wrapper filters

887
00:36:39,030 --> 00:36:44,560
knowing that the difference between

888
00:36:42,190 --> 00:36:47,530
opening a file and including a file or

889
00:36:44,560 --> 00:36:49,930
importing a file allows you to make lfi

890
00:36:47,530 --> 00:36:53,050
more than just something that reads NC

891
00:36:49,930 --> 00:36:55,839
password right it allows you to export

892
00:36:53,050 --> 00:36:58,420
code it allows you to actually run code

893
00:36:55,840 --> 00:37:00,610
it allows you to do many different

894
00:36:58,420 --> 00:37:04,150
things just from a local file include I

895
00:37:00,610 --> 00:37:05,080
see a shrek gif in the in discord and

896
00:37:04,150 --> 00:37:06,790
I'm glad yes

897
00:37:05,080 --> 00:37:08,259
yes there are layers that is a Shrek

898
00:37:06,790 --> 00:37:09,820
reference I tried to put like a Shrek

899
00:37:08,260 --> 00:37:12,220
picture in there I know I don't have any

900
00:37:09,820 --> 00:37:14,380
memes in this I apologize but then also

901
00:37:12,220 --> 00:37:16,870
chaining exploits right it is very

902
00:37:14,380 --> 00:37:18,310
tempting to once you pop an LF I to just

903
00:37:16,870 --> 00:37:21,880
write up the bug binary report and send

904
00:37:18,310 --> 00:37:23,860
it off and yes definitely when you find

905
00:37:21,880 --> 00:37:26,710
the LF I write up the bug bounty report

906
00:37:23,860 --> 00:37:29,560
and get it ready but don't stop there

907
00:37:26,710 --> 00:37:32,350
okay don't stop there you can move into

908
00:37:29,560 --> 00:37:34,029
other types of exploits and now make

909
00:37:32,350 --> 00:37:35,589
sure that you're obeying the the rules

910
00:37:34,030 --> 00:37:37,660
of engagement and whatnot in your state

911
00:37:35,590 --> 00:37:39,700
staying within the scope of work but you

912
00:37:37,660 --> 00:37:41,799
can chain exploits into each other and

913
00:37:39,700 --> 00:37:43,419
get some really nifty attacks and get

914
00:37:41,800 --> 00:37:45,460
bigger payouts and and whatnot

915
00:37:43,420 --> 00:37:47,170
the next slide is the thank-you slide I

916
00:37:45,460 --> 00:37:49,630
want to try and get through this bonus

917
00:37:47,170 --> 00:37:51,640
demo real fast so there's another neat

918
00:37:49,630 --> 00:37:53,110
attack that I've talked about in the

919
00:37:51,640 --> 00:37:55,779
past and this is actually something in

920
00:37:53,110 --> 00:37:57,130
security 504 but a lot of people kind of

921
00:37:55,780 --> 00:37:59,020
like tilt their heads and like yeah

922
00:37:57,130 --> 00:38:00,460
right does this really exist but it's

923
00:37:59,020 --> 00:38:02,830
it's like second-order across site

924
00:38:00,460 --> 00:38:05,500
scripting and it's attacking admin

925
00:38:02,830 --> 00:38:07,750
applications and this is a shout-out to

926
00:38:05,500 --> 00:38:11,860
Moses Frost for pointing this out for

927
00:38:07,750 --> 00:38:13,990
the first time when we go to the admin

928
00:38:11,860 --> 00:38:16,480
page we see that it's logging the access

929
00:38:13,990 --> 00:38:18,339
attempt now it's a reasonable assumption

930
00:38:16,480 --> 00:38:19,540
or it's it is an assumption that you can

931
00:38:18,340 --> 00:38:22,210
make that this is going to be displayed

932
00:38:19,540 --> 00:38:24,220
to someone right a lot of times people

933
00:38:22,210 --> 00:38:26,740
have Splunk or elk or something like

934
00:38:24,220 --> 00:38:30,850
that in the background and that's how

935
00:38:26,740 --> 00:38:33,490
admins look at logs these applications

936
00:38:30,850 --> 00:38:35,290
Splunk and graph fauna and Kabana and

937
00:38:33,490 --> 00:38:37,270
all these different applications have

938
00:38:35,290 --> 00:38:39,370
all at some point had cross-site

939
00:38:37,270 --> 00:38:41,050
scripting vulnerabilities in them which

940
00:38:39,370 --> 00:38:44,500
means at some point they were displaying

941
00:38:41,050 --> 00:38:46,220
an unfiltered output to someone that

942
00:38:44,500 --> 00:38:48,470
someone generally being an admin

943
00:38:46,220 --> 00:38:50,240
traitor and so we can use a similar

944
00:38:48,470 --> 00:38:53,180
attack to what we did with log pollution

945
00:38:50,240 --> 00:38:55,939
but instead of adding PHP to our user

946
00:38:53,180 --> 00:38:58,779
agent we're actually going to put in

947
00:38:55,940 --> 00:38:58,780
JavaScript

948
00:39:00,660 --> 00:39:06,609
and so when we send this

949
00:39:03,700 --> 00:39:08,710
we scroll down and we see that there's

950
00:39:06,609 --> 00:39:13,029
an unauthorized attempt and it says it's

951
00:39:08,710 --> 00:39:16,300
logging our our information now I'm

952
00:39:13,030 --> 00:39:18,520
gonna pretend to be an admin real quick

953
00:39:16,300 --> 00:39:21,910
I'm going to open up the developer

954
00:39:18,520 --> 00:39:24,730
console and document if you don't know

955
00:39:21,910 --> 00:39:26,440
that you can do this by the way this is

956
00:39:24,730 --> 00:39:27,880
super rad you can set your cookies

957
00:39:26,440 --> 00:39:29,290
through the developer console you can

958
00:39:27,880 --> 00:39:30,849
also set it through if you go into like

959
00:39:29,290 --> 00:39:34,410
network storage and then double-click

960
00:39:30,849 --> 00:39:39,790
and whatnot but you can do this 8 6 7-5

961
00:39:34,410 --> 00:39:41,680
309 is the cookie we hit enter and that

962
00:39:39,790 --> 00:39:43,240
set our cookie for this so normally our

963
00:39:41,680 --> 00:39:45,520
cookie if you remember from the code if

964
00:39:43,240 --> 00:39:47,229
you were sharp-eyed you saw that index

965
00:39:45,520 --> 00:39:49,599
was setting our cookie to user equals 2

966
00:39:47,230 --> 00:39:53,470
all the time but if our user equals 8 6

967
00:39:49,599 --> 00:39:55,720
75 309 then we can actually access the

968
00:39:53,470 --> 00:39:58,149
admin page and we actually get an alert

969
00:39:55,720 --> 00:40:01,990
pop-up now what's happening here is that

970
00:39:58,150 --> 00:40:04,869
we're abusing a file open to inject

971
00:40:01,990 --> 00:40:07,089
client-side code that is going to be

972
00:40:04,869 --> 00:40:10,930
stored somewhere and eventually seen by

973
00:40:07,089 --> 00:40:13,569
an administrator now if we put a cross

974
00:40:10,930 --> 00:40:15,640
site scripting payload that shovels this

975
00:40:13,569 --> 00:40:18,700
person's cookies off to a malicious

976
00:40:15,640 --> 00:40:22,150
server we now have administrator cookies

977
00:40:18,700 --> 00:40:25,060
for an administrative panel ok so this

978
00:40:22,150 --> 00:40:27,250
is an extremely effective attack and

979
00:40:25,060 --> 00:40:29,078
like I said Moses profs pointed this

980
00:40:27,250 --> 00:40:31,750
first point of this tactic out to me and

981
00:40:29,079 --> 00:40:33,550
ever since I took his class the web

982
00:40:31,750 --> 00:40:35,380
application penance in class I have

983
00:40:33,550 --> 00:40:38,440
always had cross-site scripting payloads

984
00:40:35,380 --> 00:40:40,060
in almost every header of in inside my

985
00:40:38,440 --> 00:40:42,520
burp so it was just automatically

986
00:40:40,060 --> 00:40:44,980
replacing like my user agent and you

987
00:40:42,520 --> 00:40:46,270
know our the except language and things

988
00:40:44,980 --> 00:40:49,180
like that with cross-site scripting

989
00:40:46,270 --> 00:40:52,240
payloads that I can have up in another

990
00:40:49,180 --> 00:40:54,490
window and just some time two days three

991
00:40:52,240 --> 00:40:55,899
days four days later I suddenly get a

992
00:40:54,490 --> 00:40:57,819
ping back to my a command-and-control

993
00:40:55,900 --> 00:41:00,069
saying hey somebody displayed this

994
00:40:57,819 --> 00:41:03,130
cross-site scripting payload so another

995
00:41:00,069 --> 00:41:04,720
super neat kind of little bonus lab for

996
00:41:03,130 --> 00:41:06,190
you it's not something that I did in

997
00:41:04,720 --> 00:41:08,020
that particular bug bounty but it is a

998
00:41:06,190 --> 00:41:10,599
very useful pen testing technique and

999
00:41:08,020 --> 00:41:14,109
it's a super super rad one it pulled off

1000
00:41:10,599 --> 00:41:15,880
now I disclaimer there are I'm unaware

1001
00:41:14,109 --> 00:41:17,560
of any cross-site scripting

1002
00:41:15,880 --> 00:41:20,650
vulnerabilities in you know

1003
00:41:17,560 --> 00:41:22,029
longer or kibana right now doesn't mean

1004
00:41:20,650 --> 00:41:23,890
they're not there but I'm not trying to

1005
00:41:22,030 --> 00:41:25,360
talk trash on those particular pieces of

1006
00:41:23,890 --> 00:41:26,920
software but every time I demo there's

1007
00:41:25,360 --> 00:41:28,330
somebody's like yeah right that doesn't

1008
00:41:26,920 --> 00:41:30,520
really happen it's like no no go back

1009
00:41:28,330 --> 00:41:32,710
and look at you know Splunk CBE's there

1010
00:41:30,520 --> 00:41:34,870
is definitely cross-site scripting

1011
00:41:32,710 --> 00:41:36,370
vulnerabilities in its past so this is

1012
00:41:34,870 --> 00:41:37,350
something that does work in the real

1013
00:41:36,370 --> 00:41:40,150
world

1014
00:41:37,350 --> 00:41:43,330
anyways that brings us three minutes to

1015
00:41:40,150 --> 00:41:45,370
spare so I'm going to sign off now I

1016
00:41:43,330 --> 00:41:47,740
have feedback if you're willing to scan

1017
00:41:45,370 --> 00:41:49,690
this QR code I was gonna say if anybody

1018
00:41:47,740 --> 00:41:51,729
has any questions now's a really good

1019
00:41:49,690 --> 00:41:53,260
time to ask absolutely I was actually

1020
00:41:51,730 --> 00:41:55,660
gonna move to the track one voice

1021
00:41:53,260 --> 00:41:57,520
channel but we can do it here too yeah

1022
00:41:55,660 --> 00:42:00,339
it'll be recorded that way so I'm good

1023
00:41:57,520 --> 00:42:04,900
with whatever everyone noticed that you

1024
00:42:00,340 --> 00:42:06,220
had a typo yeah that was it I think

1025
00:42:04,900 --> 00:42:10,150
that's literally the only thing that

1026
00:42:06,220 --> 00:42:12,879
people I think will point it out I were

1027
00:42:10,150 --> 00:42:15,040
a couple questions in discord let's see

1028
00:42:12,880 --> 00:42:16,840
so hypothetical situation developer X

1029
00:42:15,040 --> 00:42:19,090
says that his web app or wave API is

1030
00:42:16,840 --> 00:42:20,890
unexploited unexploited because it

1031
00:42:19,090 --> 00:42:23,220
requires audacity authentication and

1032
00:42:20,890 --> 00:42:25,089
read-only what do you say to him/her

1033
00:42:23,220 --> 00:42:28,029
authentication as we saw if we're able

1034
00:42:25,090 --> 00:42:30,220
to dump code authentication is really

1035
00:42:28,030 --> 00:42:32,170
not that big of a deal it also that

1036
00:42:30,220 --> 00:42:34,540
assumption makes the assumption that you

1037
00:42:32,170 --> 00:42:35,920
don't have rogue employees or that you

1038
00:42:34,540 --> 00:42:38,290
know an employee doesn't sell some

1039
00:42:35,920 --> 00:42:40,120
information it's a it's it's part of

1040
00:42:38,290 --> 00:42:42,130
that egg model right authentication is

1041
00:42:40,120 --> 00:42:44,290
certainly a barrier but it shouldn't be

1042
00:42:42,130 --> 00:42:46,630
a substitution for secured code

1043
00:42:44,290 --> 00:42:48,550
practicing read-only is great actually I

1044
00:42:46,630 --> 00:42:49,960
love that it's read-only but again as we

1045
00:42:48,550 --> 00:42:51,910
saw there are client-side attacks that

1046
00:42:49,960 --> 00:42:54,640
can attack admins that leverage into

1047
00:42:51,910 --> 00:42:57,310
wider information what Terminal am I

1048
00:42:54,640 --> 00:42:59,470
using that's just bash I use a custom

1049
00:42:57,310 --> 00:43:00,220
bash prompt to show me some more

1050
00:42:59,470 --> 00:43:03,009
information

1051
00:43:00,220 --> 00:43:04,629
there's tons of bash prompt generators

1052
00:43:03,010 --> 00:43:06,730
on the internet if you want one that's

1053
00:43:04,630 --> 00:43:08,260
really really cool check out fish you

1054
00:43:06,730 --> 00:43:10,210
want a really nice prompt that has like

1055
00:43:08,260 --> 00:43:11,980
autocomplete for commands and

1056
00:43:10,210 --> 00:43:13,930
autocomplete within switches for

1057
00:43:11,980 --> 00:43:16,420
commands I really like fish for people

1058
00:43:13,930 --> 00:43:18,580
that are getting started oh yeah I tend

1059
00:43:16,420 --> 00:43:21,250
to stick with although because it's it's

1060
00:43:18,580 --> 00:43:24,670
you know like it's common everywhere

1061
00:43:21,250 --> 00:43:26,800
it's and more time and other people's

1062
00:43:24,670 --> 00:43:28,930
computers than my own so I try not to

1063
00:43:26,800 --> 00:43:31,420
get too hung up on custom stuff but yeah

1064
00:43:28,930 --> 00:43:33,098
fish is great does XSS work

1065
00:43:31,420 --> 00:43:35,140
any input field or is there a specific

1066
00:43:33,099 --> 00:43:36,670
type that you need to look for what

1067
00:43:35,140 --> 00:43:39,730
you're looking for for cross-site

1068
00:43:36,670 --> 00:43:41,859
scripting is typically your your

1069
00:43:39,730 --> 00:43:43,960
information your input being reflected

1070
00:43:41,859 --> 00:43:46,180
back at you if you type something into a

1071
00:43:43,960 --> 00:43:48,490
web application and then it is shown to

1072
00:43:46,180 --> 00:43:49,899
you you're on the right path then you

1073
00:43:48,490 --> 00:43:51,819
can look at the source and see if it's

1074
00:43:49,900 --> 00:43:53,920
being encoded or something like that but

1075
00:43:51,819 --> 00:43:55,390
that's that's the right that's that

1076
00:43:53,920 --> 00:43:57,250
you're on the right path if you see it

1077
00:43:55,390 --> 00:43:58,868
reflected back at you and then as we saw

1078
00:43:57,250 --> 00:44:01,210
in the second-order cross-site scripting

1079
00:43:58,869 --> 00:44:03,549
if you see something that you have

1080
00:44:01,210 --> 00:44:05,859
control of so such as your user agent

1081
00:44:03,549 --> 00:44:07,450
that's being logged or you have a

1082
00:44:05,859 --> 00:44:09,549
suspicion that it might be displayed to

1083
00:44:07,450 --> 00:44:11,140
someone later you can start fuzzing that

1084
00:44:09,549 --> 00:44:12,180
and putting X cross-site scripting in

1085
00:44:11,140 --> 00:44:14,348
there as well

1086
00:44:12,180 --> 00:44:15,759
there's another question I thought was a

1087
00:44:14,349 --> 00:44:18,130
good one it was said how could I get

1088
00:44:15,760 --> 00:44:21,010
rook to explain everything to me and

1089
00:44:18,130 --> 00:44:24,700
that's literally just X 504 not ever

1090
00:44:21,010 --> 00:44:26,500
it's a good start it's a big chunk yeah

1091
00:44:24,700 --> 00:44:29,890
it's okay it's six days of me just like

1092
00:44:26,500 --> 00:44:31,540
preaching and and you know pontificating

1093
00:44:29,890 --> 00:44:33,700
about why can't we all just get along

1094
00:44:31,540 --> 00:44:36,250
and how can we just head start a hacker

1095
00:44:33,700 --> 00:44:38,200
hippie commune and things like that so

1096
00:44:36,250 --> 00:44:39,819
here's one I like this quant this

1097
00:44:38,200 --> 00:44:41,618
question when hiring for an F SEC

1098
00:44:39,819 --> 00:44:44,799
analyst what do you think is the most

1099
00:44:41,619 --> 00:44:45,220
important interview question oh let's

1100
00:44:44,799 --> 00:44:47,410
see

1101
00:44:45,220 --> 00:44:48,910
one thing that I've started asking

1102
00:44:47,410 --> 00:44:50,759
pretty much every candidate no matter

1103
00:44:48,910 --> 00:44:54,670
what I enter what I'm interviewing for

1104
00:44:50,760 --> 00:44:57,250
these days is explain something to me

1105
00:44:54,670 --> 00:44:58,660
that you know a lot about and I try to

1106
00:44:57,250 --> 00:45:00,430
make the caveat I'm like look if it's

1107
00:44:58,660 --> 00:45:02,589
tech that's great if it's not tech

1108
00:45:00,430 --> 00:45:05,618
that's fine too because what I'm really

1109
00:45:02,589 --> 00:45:08,828
looking for is that curiosity that

1110
00:45:05,619 --> 00:45:12,130
drives people to understand not just the

1111
00:45:08,829 --> 00:45:14,230
what and how but the why the thing I

1112
00:45:12,130 --> 00:45:18,430
think I see a lot of people fall over on

1113
00:45:14,230 --> 00:45:20,349
is they understand the what and then

1114
00:45:18,430 --> 00:45:21,970
they'll might even get the wat in like

1115
00:45:20,349 --> 00:45:24,309
the how they're like oh well it does

1116
00:45:21,970 --> 00:45:26,740
this by doing this thing and you're like

1117
00:45:24,309 --> 00:45:29,170
but why why does it do that and if I see

1118
00:45:26,740 --> 00:45:31,779
people really take that extra step to

1119
00:45:29,170 --> 00:45:33,940
find out the why of something then they

1120
00:45:31,780 --> 00:45:37,030
have that curiosity and passion that I'm

1121
00:45:33,940 --> 00:45:38,770
able to that I'm able to build on and

1122
00:45:37,030 --> 00:45:40,480
and even if they're junior I can teach

1123
00:45:38,770 --> 00:45:42,790
them tech principle I can teach them

1124
00:45:40,480 --> 00:45:44,820
tech all of that stuff I can teach them

1125
00:45:42,790 --> 00:45:47,040
but the curiosity is really

1126
00:45:44,820 --> 00:45:49,650
difficult to teach and so I just wanted

1127
00:45:47,040 --> 00:45:50,910
I just also I it shows communication

1128
00:45:49,650 --> 00:45:51,120
skills if they can explain something to

1129
00:45:50,910 --> 00:45:52,859
me

1130
00:45:51,120 --> 00:45:54,420
I don't I'm not expecting them to be a

1131
00:45:52,860 --> 00:45:57,300
polished speaker because nobody's born a

1132
00:45:54,420 --> 00:45:59,340
polished speaker but it looking for

1133
00:45:57,300 --> 00:46:02,250
their ability to explain concepts to

1134
00:45:59,340 --> 00:46:04,200
people is also really important one of

1135
00:46:02,250 --> 00:46:05,490
my favorite questions is what is the

1136
00:46:04,200 --> 00:46:08,129
difference between cross-site scripting

1137
00:46:05,490 --> 00:46:10,109
and cross-site request forgery and I

1138
00:46:08,130 --> 00:46:11,850
want to make it clear that would only be

1139
00:46:10,110 --> 00:46:14,220
a question I would ask somebody that is

1140
00:46:11,850 --> 00:46:16,230
applying for a knapsack position like

1141
00:46:14,220 --> 00:46:19,500
they come in they say that they've done

1142
00:46:16,230 --> 00:46:21,690
this for a long time and you know Jeff

1143
00:46:19,500 --> 00:46:23,220
saying whoo-hoo-hoo and we also use this

1144
00:46:21,690 --> 00:46:25,410
as kind of an acid test for sans

1145
00:46:23,220 --> 00:46:27,500
instructors yeah because there's there's

1146
00:46:25,410 --> 00:46:30,629
things that you know in your head and

1147
00:46:27,500 --> 00:46:32,730
even if you do app sack and you do it

1148
00:46:30,630 --> 00:46:33,840
quite regularly you may know the

1149
00:46:32,730 --> 00:46:35,130
difference between cross-site scripting

1150
00:46:33,840 --> 00:46:36,720
and cross-site request forgery but can

1151
00:46:35,130 --> 00:46:39,330
you actually boil it down in such a way

1152
00:46:36,720 --> 00:46:42,419
can you examine it easily digestable for

1153
00:46:39,330 --> 00:46:45,960
somebody else and I think I was gonna

1154
00:46:42,420 --> 00:46:47,670
say I actually asked in AB SEC and

1155
00:46:45,960 --> 00:46:48,810
specifically I'll ask apps like people

1156
00:46:47,670 --> 00:46:50,970
that are gonna deal with web because

1157
00:46:48,810 --> 00:46:52,529
it's a very web focused question but I

1158
00:46:50,970 --> 00:46:55,709
asked an abstract person that one time

1159
00:46:52,530 --> 00:46:57,240
and they started off with well you see

1160
00:46:55,710 --> 00:46:59,190
used to feel the cookie and I was like

1161
00:46:57,240 --> 00:47:02,279
whoa I was like hold on like you might

1162
00:46:59,190 --> 00:47:05,670
you I understand like ya know the

1163
00:47:02,280 --> 00:47:07,260
interviews are stressful and it's very

1164
00:47:05,670 --> 00:47:08,400
easy to confuse these two topics so I'm

1165
00:47:07,260 --> 00:47:10,800
just gonna give you a second to kind of

1166
00:47:08,400 --> 00:47:12,660
reset and you can start again and he's

1167
00:47:10,800 --> 00:47:15,090
like no I'm good and then just launches

1168
00:47:12,660 --> 00:47:16,470
into it and I was like we're like we're

1169
00:47:15,090 --> 00:47:17,940
like five minutes into this cross-site

1170
00:47:16,470 --> 00:47:20,759
scripting discussion and I asked you

1171
00:47:17,940 --> 00:47:22,920
what cross-site request forgery is and I

1172
00:47:20,760 --> 00:47:24,420
start kind of like demoing you know like

1173
00:47:22,920 --> 00:47:26,880
drawing up that stereotypical like

1174
00:47:24,420 --> 00:47:29,100
here's a bank website and he's like no

1175
00:47:26,880 --> 00:47:31,170
that's not what it is and I was like bro

1176
00:47:29,100 --> 00:47:32,730
this is this is the one time I make a

1177
00:47:31,170 --> 00:47:34,110
lot of jokes about me saying do you know

1178
00:47:32,730 --> 00:47:36,750
who I am but this is like the first time

1179
00:47:34,110 --> 00:47:40,530
I was like do you know what I do do you

1180
00:47:36,750 --> 00:47:42,360
understand like this here and later on

1181
00:47:40,530 --> 00:47:45,330
he told me to google it he's like well

1182
00:47:42,360 --> 00:47:46,680
maybe you just want to google it and so

1183
00:47:45,330 --> 00:47:47,970
we sat down I was like okay well you've

1184
00:47:46,680 --> 00:47:50,399
got about 10 minutes left and I want to

1185
00:47:47,970 --> 00:47:51,899
give you time to ask questions and so

1186
00:47:50,400 --> 00:47:53,250
he's like so what you know what's your

1187
00:47:51,900 --> 00:47:55,440
role here I was like well I run the

1188
00:47:53,250 --> 00:47:57,540
offensive security team he's like yeah

1189
00:47:55,440 --> 00:47:58,500
but like what is that and was like well

1190
00:47:57,540 --> 00:48:01,650
we do

1191
00:47:58,500 --> 00:48:03,600
about pentesting like daily like we do

1192
00:48:01,650 --> 00:48:04,830
this oh and on the side I'm a sans

1193
00:48:03,600 --> 00:48:08,220
instructor where I teach this to people

1194
00:48:04,830 --> 00:48:11,009
so and he was like oh oh I was like yeah

1195
00:48:08,220 --> 00:48:13,020
man yeah he didn't get the job somebody

1196
00:48:11,010 --> 00:48:14,310
was saying you know whoa my god what's

1197
00:48:13,020 --> 00:48:16,200
the resource to answer that it's

1198
00:48:14,310 --> 00:48:17,279
actually pretty basic whenever you're

1199
00:48:16,200 --> 00:48:18,930
talking about cross-site request forgery

1200
00:48:17,280 --> 00:48:20,730
and cross-site scripting it's where the

1201
00:48:18,930 --> 00:48:22,319
code ultimately execute in cross-site

1202
00:48:20,730 --> 00:48:23,370
scripting it's going to execute in the

1203
00:48:22,320 --> 00:48:25,410
victims browser and cross-site request

1204
00:48:23,370 --> 00:48:26,910
forgery it's going to pass it to a

1205
00:48:25,410 --> 00:48:29,759
server where it's going to be executed

1206
00:48:26,910 --> 00:48:31,170
that's the quickest easiest answer for

1207
00:48:29,760 --> 00:48:32,760
it and there's some really cool things

1208
00:48:31,170 --> 00:48:35,070
where you can use cross-site scripting

1209
00:48:32,760 --> 00:48:37,320
to execute cross-site request forgery as

1210
00:48:35,070 --> 00:48:39,120
well so those are great bug bounty

1211
00:48:37,320 --> 00:48:40,440
write-ups by the way that's huge

1212
00:48:39,120 --> 00:48:41,850
cross-site scripting in there cross-site

1213
00:48:40,440 --> 00:48:43,920
request forgery somebody asked if you

1214
00:48:41,850 --> 00:48:46,290
got the job listen I'm all about people

1215
00:48:43,920 --> 00:48:48,780
challenging me in interviews just be

1216
00:48:46,290 --> 00:48:50,820
just be correct like it like I get I'm

1217
00:48:48,780 --> 00:48:52,980
wrong just as often as everybody else is

1218
00:48:50,820 --> 00:48:54,900
and sometimes I get caught up and

1219
00:48:52,980 --> 00:48:56,340
whatnot but if you'd like double and

1220
00:48:54,900 --> 00:48:59,310
triple and quadruple down when I'm

1221
00:48:56,340 --> 00:49:00,990
giving you outs and you're not you're

1222
00:48:59,310 --> 00:49:03,930
not you're not gonna get the job what

1223
00:49:00,990 --> 00:49:05,459
you hate to be that way but I think the

1224
00:49:03,930 --> 00:49:07,890
willingness to kind of back down and say

1225
00:49:05,460 --> 00:49:10,500
I don't know is more important I mean

1226
00:49:07,890 --> 00:49:11,819
because at this point seriously rook you

1227
00:49:10,500 --> 00:49:13,110
can you can tell when somebody's just

1228
00:49:11,820 --> 00:49:15,360
pulling things out of their ass

1229
00:49:13,110 --> 00:49:16,950
yeah and that's and somebody asked about

1230
00:49:15,360 --> 00:49:19,230
my favorite like the best questions to

1231
00:49:16,950 --> 00:49:21,029
ask my interviews are always push them

1232
00:49:19,230 --> 00:49:23,520
to the edge of what they know and then

1233
00:49:21,030 --> 00:49:25,320
push them a little bit farther and I'm

1234
00:49:23,520 --> 00:49:26,730
looking for critical thinking and them

1235
00:49:25,320 --> 00:49:28,590
saying they don't know is fine I'm like

1236
00:49:26,730 --> 00:49:30,000
cool you don't know let's think it

1237
00:49:28,590 --> 00:49:31,560
through like let's talk about it and

1238
00:49:30,000 --> 00:49:33,240
sometimes I don't know like sometimes

1239
00:49:31,560 --> 00:49:36,660
I'm just like hey let's let's talk about

1240
00:49:33,240 --> 00:49:38,100
it you know but I've been around long

1241
00:49:36,660 --> 00:49:39,210
enough that even if I don't know which

1242
00:49:38,100 --> 00:49:41,190
there's a lot of things I don't know I

1243
00:49:39,210 --> 00:49:44,970
can tell if you're just making stuff up

1244
00:49:41,190 --> 00:49:47,730
it's very apparent to me so my favorite

1245
00:49:44,970 --> 00:49:49,319
story that is years ago whenever they

1246
00:49:47,730 --> 00:49:51,150
were kicking out the new web app

1247
00:49:49,320 --> 00:49:53,430
pentesting class that's an you yo.hannes

1248
00:49:51,150 --> 00:49:56,040
myself and I can't remember who else we

1249
00:49:53,430 --> 00:49:57,839
were murder boarding Jonathan ham and

1250
00:49:56,040 --> 00:50:00,029
that was tough right because that's a

1251
00:49:57,840 --> 00:50:02,190
really tough group of people and the

1252
00:50:00,030 --> 00:50:04,770
sands Institute's way of vetting

1253
00:50:02,190 --> 00:50:06,270
instructors used to be that exactly what

1254
00:50:04,770 --> 00:50:07,830
you just said Derrick you're gonna push

1255
00:50:06,270 --> 00:50:09,270
people up to the point where you feel

1256
00:50:07,830 --> 00:50:10,500
like they're about to break and then

1257
00:50:09,270 --> 00:50:12,330
you're gonna shove them off the edge

1258
00:50:10,500 --> 00:50:15,060
because you really need to see how

1259
00:50:12,330 --> 00:50:16,710
people fail and there's good failures

1260
00:50:15,060 --> 00:50:19,680
and there's bad failures just talking

1261
00:50:16,710 --> 00:50:20,790
out your butt is a bad failure but going

1262
00:50:19,680 --> 00:50:22,230
through and saying you know what I don't

1263
00:50:20,790 --> 00:50:23,610
know hey everybody let's open up Google

1264
00:50:22,230 --> 00:50:25,470
and let's check it out and let's kind of

1265
00:50:23,610 --> 00:50:28,080
pull it together is there's better

1266
00:50:25,470 --> 00:50:30,299
failures right and we were murder

1267
00:50:28,080 --> 00:50:32,670
boarding Jonathan ham and Jonathan was

1268
00:50:30,300 --> 00:50:34,260
doing a good job he was answering all

1269
00:50:32,670 --> 00:50:36,480
the questions technically accurate and

1270
00:50:34,260 --> 00:50:39,060
Johannes when it was all done at this

1271
00:50:36,480 --> 00:50:42,870
great great quote he goes well Jonathan

1272
00:50:39,060 --> 00:50:44,759
I think I think you did okay you got all

1273
00:50:42,870 --> 00:50:46,200
the answers technically correct but it

1274
00:50:44,760 --> 00:50:50,220
sounds like you were making it up the

1275
00:50:46,200 --> 00:50:51,600
whole time a hard time about it but

1276
00:50:50,220 --> 00:50:53,220
that's just the way we used to do things

1277
00:50:51,600 --> 00:50:55,670
it's Ann's back when we weren't the

1278
00:50:53,220 --> 00:51:00,029
kinder gentler precious snowflakes Ann's

1279
00:50:55,670 --> 00:51:02,670
murder boy was Ed SCOTUS Mike Merc Evan

1280
00:51:00,030 --> 00:51:04,680
Fiske is Adrian de beaupré and Lisa

1281
00:51:02,670 --> 00:51:06,540
in fact jumped in on it yeah Lisa

1282
00:51:04,680 --> 00:51:08,279
actually started heckling as well which

1283
00:51:06,540 --> 00:51:10,830
I was pretty proud of but yeah it was

1284
00:51:08,280 --> 00:51:13,770
rough yeah and that's the way it should

1285
00:51:10,830 --> 00:51:15,960
be right I mean Jeff McJunkin the link

1286
00:51:13,770 --> 00:51:18,240
guy he's the only person in the history

1287
00:51:15,960 --> 00:51:21,330
of me doing murder boards that came back

1288
00:51:18,240 --> 00:51:23,100
like five times like he just kept coming

1289
00:51:21,330 --> 00:51:24,480
back again and again and he's like I got

1290
00:51:23,100 --> 00:51:26,970
to get this I got to get this I got to

1291
00:51:24,480 --> 00:51:28,800
get this and you know he's like it he's

1292
00:51:26,970 --> 00:51:31,529
like he's like a monster a shout-out to

1293
00:51:28,800 --> 00:51:33,900
jeff huge help at the conference this

1294
00:51:31,530 --> 00:51:35,190
conference but also Jeff helped me prep

1295
00:51:33,900 --> 00:51:36,750
for my murder board it's just a

1296
00:51:35,190 --> 00:51:39,960
generally all-around guy and just

1297
00:51:36,750 --> 00:51:42,590
doesn't quit being a good guy yeah it's

1298
00:51:39,960 --> 00:51:42,590
just in his DNA

