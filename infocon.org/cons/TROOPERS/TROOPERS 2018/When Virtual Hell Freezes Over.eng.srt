1
00:00:04,400 --> 00:00:12,090
all right good<font color="#E5E5E5"> morning everybody</font><font color="#CCCCCC"> I'm</font>

2
00:00:07,230 --> 00:00:15,289
very pleased to<font color="#E5E5E5"> see so many people</font><font color="#CCCCCC"> after</font>

3
00:00:12,090 --> 00:00:17,609
the conference dinner on the<font color="#E5E5E5"> first track</font>

4
00:00:15,289 --> 00:00:20,698
<font color="#CCCCCC">we will start with something lightweight</font>

5
00:00:17,609 --> 00:00:25,409
<font color="#E5E5E5">like</font><font color="#CCCCCC"> c++</font><font color="#E5E5E5"> reverse engineering for</font><font color="#CCCCCC"> the</font>

6
00:00:20,699 --> 00:00:28,159
morning<font color="#E5E5E5"> and gal is our next speaker and</font>

7
00:00:25,409 --> 00:00:28,159
<font color="#CCCCCC">gal the stage is yours</font>

8
00:00:29,130 --> 00:00:33,930
so my presentation<font color="#E5E5E5"> is called when</font>

9
00:00:31,440 --> 00:00:37,320
<font color="#E5E5E5">virtual hell freezes over</font><font color="#CCCCCC"> returning C++</font>

10
00:00:33,930 --> 00:00:39,450
code so first I'm gonna start<font color="#E5E5E5"> with who I</font>

11
00:00:37,320 --> 00:00:41,400
am<font color="#E5E5E5"> my name is</font><font color="#CCCCCC"> Cal</font><font color="#E5E5E5"> I'm a liberal engineer</font>

12
00:00:39,450 --> 00:00:44,700
and work as a security<font color="#E5E5E5"> researcher at</font>

13
00:00:41,400 --> 00:00:48,239
<font color="#CCCCCC">biosecurity GU</font><font color="#E5E5E5"> I'm my spare time also</font>

14
00:00:44,700 --> 00:00:50,190
<font color="#E5E5E5">like sewing and this is my own private</font>

15
00:00:48,239 --> 00:00:54,780
research that I've done at<font color="#E5E5E5"> home in</font><font color="#CCCCCC"> my</font>

16
00:00:50,190 --> 00:00:57,059
spare time so there is a few parts for

17
00:00:54,780 --> 00:00:58,470
this presentation there will<font color="#E5E5E5"> be the</font>

18
00:00:57,059 --> 00:01:01,199
<font color="#E5E5E5">research part</font><font color="#CCCCCC"> that I'm going to</font><font color="#E5E5E5"> talk</font>

19
00:00:58,470 --> 00:01:04,379
<font color="#CCCCCC">about reversing</font><font color="#E5E5E5"> C++ the</font><font color="#CCCCCC"> C++ internals</font>

20
00:01:01,199 --> 00:01:07,320
I'm going to show some concept of why

21
00:01:04,379 --> 00:01:09,570
C++ is so hard to<font color="#E5E5E5"> ever and the second</font>

22
00:01:07,320 --> 00:01:12,270
part is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> my tool that I've</font>

23
00:01:09,570 --> 00:01:15,149
written<font color="#E5E5E5"> I'm going to talk about either</font>

24
00:01:12,270 --> 00:01:17,399
Python and tool data<font color="#CCCCCC"> what</font><font color="#E5E5E5"> that's called</font>

25
00:01:15,150 --> 00:01:21,150
via Twitter<font color="#CCCCCC"> it helps with</font>

26
00:01:17,400 --> 00:01:22,040
validation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> zippers past</font><font color="#E5E5E5"> so what is</font>

27
00:01:21,150 --> 00:01:26,430
the problem

28
00:01:22,040 --> 00:01:29,460
rebuilding<font color="#E5E5E5"> C++ is held let's see some</font>

29
00:01:26,430 --> 00:01:32,760
examples<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I just want to mention one</font>

30
00:01:29,460 --> 00:01:36,600
<font color="#CCCCCC">more thing this all what I'm going</font><font color="#E5E5E5"> to</font>

31
00:01:32,760 --> 00:01:38,910
show is MSB see a compiler<font color="#E5E5E5"> and not</font><font color="#CCCCCC"> three</font>

32
00:01:36,600 --> 00:01:42,119
plus plus<font color="#E5E5E5"> there is some differences</font>

33
00:01:38,910 --> 00:01:44,910
between<font color="#E5E5E5"> the compilers so if we want to</font>

34
00:01:42,120 --> 00:01:49,650
adjust my tool afterwards it's possible

35
00:01:44,910 --> 00:01:51,390
but<font color="#E5E5E5"> for now it's only support MSB C so</font>

36
00:01:49,650 --> 00:01:54,330
the third thing I want<font color="#E5E5E5"> to talk about is</font>

37
00:01:51,390 --> 00:01:56,040
dynamic object creation so in this in

38
00:01:54,330 --> 00:01:58,380
this code you can see it's a<font color="#E5E5E5"> simple code</font>

39
00:01:56,040 --> 00:02:00,960
there<font color="#CCCCCC"> is one</font><font color="#E5E5E5"> function called one class</font>

40
00:01:58,380 --> 00:02:03,509
called<font color="#E5E5E5"> the father a it has one int</font>

41
00:02:00,960 --> 00:02:06,059
member which is<font color="#E5E5E5"> the age and</font><font color="#CCCCCC"> two virtual</font>

42
00:02:03,510 --> 00:02:09,780
<font color="#CCCCCC">functions one is gas age and the second</font>

43
00:02:06,060 --> 00:02:12,590
one is print<font color="#E5E5E5"> age in the main you can see</font>

44
00:02:09,780 --> 00:02:18,220
that the<font color="#E5E5E5"> object was</font><font color="#CCCCCC"> created dynamically</font>

45
00:02:12,590 --> 00:02:20,410
<font color="#CCCCCC">the first part is the new this in this</font>

46
00:02:18,220 --> 00:02:22,780
in this part what happens is that<font color="#E5E5E5"> we</font>

47
00:02:20,410 --> 00:02:25,299
allocate<font color="#CCCCCC"> bytes on</font><font color="#E5E5E5"> the hip in order to</font>

48
00:02:22,780 --> 00:02:27,640
create<font color="#E5E5E5"> our object in this case a twice</font>

49
00:02:25,300 --> 00:02:31,180
<font color="#CCCCCC">in this case eight bytes and the</font>

50
00:02:27,640 --> 00:02:34,899
function operator<font color="#E5E5E5"> new is called</font><font color="#CCCCCC"> further</font>

51
00:02:31,180 --> 00:02:37,060
<font color="#E5E5E5">one is the name</font><font color="#CCCCCC"> of the class</font><font color="#E5E5E5"> nature you</font>

52
00:02:34,900 --> 00:02:40,060
<font color="#E5E5E5">see</font><font color="#CCCCCC"> the constructor that</font><font color="#E5E5E5"> was called</font>

53
00:02:37,060 --> 00:02:42,790
<font color="#CCCCCC">its</font><font color="#E5E5E5"> name for the one constructor and</font>

54
00:02:40,060 --> 00:02:45,520
after this function<font color="#CCCCCC"> was called the</font>

55
00:02:42,790 --> 00:02:50,410
return value<font color="#CCCCCC"> is the pointer to the</font>

56
00:02:45,520 --> 00:02:53,140
<font color="#CCCCCC">object</font><font color="#E5E5E5"> so let's summarize it in a small</font>

57
00:02:50,410 --> 00:02:54,910
like table the<font color="#E5E5E5"> lift to action happened</font>

58
00:02:53,140 --> 00:02:57,309
when we create an object<font color="#E5E5E5"> the first one</font>

59
00:02:54,910 --> 00:02:59,170
is the location<font color="#E5E5E5"> the heap allocation and</font>

60
00:02:57,310 --> 00:03:02,500
the<font color="#E5E5E5"> second one is the construction call</font>

61
00:02:59,170 --> 00:03:04,480
so construct alcohol and you can see in

62
00:03:02,500 --> 00:03:05,890
the right side you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> there's</font>

63
00:03:04,480 --> 00:03:09,340
<font color="#CCCCCC">nothing</font><font color="#E5E5E5"> in the left side you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> the</font>

64
00:03:05,890 --> 00:03:11,140
action<font color="#E5E5E5"> as we have seen before</font><font color="#CCCCCC"> but we</font>

65
00:03:09,340 --> 00:03:14,950
want<font color="#E5E5E5"> to know more</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the constructor</font>

66
00:03:11,140 --> 00:03:17,109
<font color="#CCCCCC">so here we have the small small assembly</font>

67
00:03:14,950 --> 00:03:19,149
part form a constructor a basic

68
00:03:17,110 --> 00:03:22,420
construct<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> you can see the first full</font>

69
00:03:19,150 --> 00:03:25,060
byte assigned to the V table<font color="#E5E5E5"> in the</font>

70
00:03:22,420 --> 00:03:27,880
<font color="#E5E5E5">object and the second full byte in this</font>

71
00:03:25,060 --> 00:03:30,040
case assigned to a member in this case

72
00:03:27,880 --> 00:03:34,150
it's a float member you can see it by

73
00:03:30,040 --> 00:03:37,420
<font color="#CCCCCC">the XM m f0</font><font color="#E5E5E5"> register which</font><font color="#CCCCCC"> is really</font>

74
00:03:34,150 --> 00:03:39,650
<font color="#E5E5E5">related to a float floating</font><font color="#CCCCCC"> point</font>

75
00:03:37,420 --> 00:03:41,659
numbers

76
00:03:39,650 --> 00:03:44,390
in<font color="#CCCCCC"> case stories want more</font><font color="#E5E5E5"> than one</font>

77
00:03:41,659 --> 00:03:46,730
<font color="#CCCCCC">member what happens that you have one</font>

78
00:03:44,390 --> 00:03:51,319
<font color="#E5E5E5">four bytes for</font><font color="#CCCCCC"> vegetables and then all</font>

79
00:03:46,730 --> 00:03:54,290
the members of the relevant objects so

80
00:03:51,319 --> 00:03:57,890
<font color="#CCCCCC">we talked about objects and about</font><font color="#E5E5E5"> the</font>

81
00:03:54,290 --> 00:04:00,530
<font color="#E5E5E5">constructors but the main and purpose of</font>

82
00:03:57,890 --> 00:04:02,119
<font color="#E5E5E5">this talk is V tables and this is the</font>

83
00:04:00,530 --> 00:04:04,849
main thing in C++

84
00:04:02,120 --> 00:04:07,879
so how does the V table really looks

85
00:04:04,849 --> 00:04:10,578
<font color="#CCCCCC">like</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can see here we have two</font>

86
00:04:07,879 --> 00:04:14,239
functions<font color="#CCCCCC"> for the 0 and fodder a further</font>

87
00:04:10,579 --> 00:04:17,239
a inherits form for the<font color="#CCCCCC"> 0 and there is a</font>

88
00:04:14,239 --> 00:04:20,000
few<font color="#E5E5E5"> functions that are the same for both</font>

89
00:04:17,238 --> 00:04:22,219
<font color="#E5E5E5">of them since father a inherits from</font>

90
00:04:20,000 --> 00:04:25,610
father<font color="#CCCCCC"> 0 it means that it also inherits</font>

91
00:04:22,220 --> 00:04:27,919
the functions<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> implemented in</font>

92
00:04:25,610 --> 00:04:29,810
father<font color="#CCCCCC"> 0 but in this case you can see</font>

93
00:04:27,919 --> 00:04:30,380
print hello me which is a<font color="#CCCCCC"> virtual</font>

94
00:04:29,810 --> 00:04:33,380
function

95
00:04:30,380 --> 00:04:36,770
it was also<font color="#E5E5E5"> implemented in father a so</font>

96
00:04:33,380 --> 00:04:39,229
in this case we have you can see<font color="#E5E5E5"> down</font>

97
00:04:36,770 --> 00:04:42,049
<font color="#CCCCCC">the down in the</font><font color="#E5E5E5"> slides you have the</font>

98
00:04:39,229 --> 00:04:44,389
tables<font color="#E5E5E5"> that show the V table so what</font>

99
00:04:42,050 --> 00:04:46,430
let's<font color="#CCCCCC"> lv</font><font color="#E5E5E5"> father's they all be table</font><font color="#CCCCCC"> you</font>

100
00:04:44,389 --> 00:04:49,130
have<font color="#CCCCCC"> the print hello which is the</font>

101
00:04:46,430 --> 00:04:51,200
function implemented in father<font color="#CCCCCC"> zero and</font>

102
00:04:49,130 --> 00:04:53,719
then<font color="#E5E5E5"> you have their</font><font color="#CCCCCC"> plain hello me in</font>

103
00:04:51,200 --> 00:04:56,630
this<font color="#E5E5E5"> case it's the the functional was</font>

104
00:04:53,720 --> 00:04:59,180
implemented in father 0 also<font color="#E5E5E5"> but if</font><font color="#CCCCCC"> we</font>

105
00:04:56,630 --> 00:05:01,430
look at father<font color="#CCCCCC"> av table you have print</font>

106
00:04:59,180 --> 00:05:03,140
hello<font color="#CCCCCC"> which was not</font><font color="#E5E5E5"> implemented in the</font>

107
00:05:01,430 --> 00:05:06,050
code in father<font color="#E5E5E5"> a and</font>

108
00:05:03,140 --> 00:05:07,880
it's just inherit the function form

109
00:05:06,050 --> 00:05:10,640
father<font color="#E5E5E5"> zero so in this case both of</font>

110
00:05:07,880 --> 00:05:13,010
those<font color="#E5E5E5"> functions are the same but we have</font>

111
00:05:10,640 --> 00:05:15,950
the second<font color="#CCCCCC"> function which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> rental Oh</font>

112
00:05:13,010 --> 00:05:20,390
me<font color="#E5E5E5"> in this case father a implemented</font>

113
00:05:15,950 --> 00:05:22,400
this function so<font color="#CCCCCC"> in in order to</font><font color="#E5E5E5"> so the</font>

114
00:05:20,390 --> 00:05:25,820
<font color="#CCCCCC">variable is</font><font color="#E5E5E5"> different because now</font><font color="#CCCCCC"> this</font>

115
00:05:22,400 --> 00:05:27,500
<font color="#E5E5E5">function is</font><font color="#CCCCCC"> not the same as father 0v</font>

116
00:05:25,820 --> 00:05:30,230
table as far<font color="#E5E5E5"> as they all function</font>

117
00:05:27,500 --> 00:05:32,870
because both of<font color="#E5E5E5"> them implemented this</font>

118
00:05:30,230 --> 00:05:36,620
function the third function you can sing

119
00:05:32,870 --> 00:05:39,200
<font color="#CCCCCC">V</font><font color="#E5E5E5"> a father a readable</font><font color="#CCCCCC"> is print num which</font>

120
00:05:36,620 --> 00:05:41,150
is a function<font color="#CCCCCC"> death was only created</font><font color="#E5E5E5"> in</font>

121
00:05:39,200 --> 00:05:43,580
father a so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the reason</font><font color="#CCCCCC"> you can</font>

122
00:05:41,150 --> 00:05:46,190
only see it in father a so this<font color="#E5E5E5"> is in</font>

123
00:05:43,580 --> 00:05:48,500
<font color="#CCCCCC">general how the</font><font color="#E5E5E5"> V table look</font><font color="#CCCCCC"> like it</font>

124
00:05:46,190 --> 00:05:50,330
sounds a little complicated<font color="#E5E5E5"> but if you</font>

125
00:05:48,500 --> 00:05:53,420
look at it in either this<font color="#E5E5E5"> is just an</font>

126
00:05:50,330 --> 00:05:56,150
<font color="#CCCCCC">array of of</font><font color="#E5E5E5"> function just a list with</font>

127
00:05:53,420 --> 00:05:59,300
functions<font color="#E5E5E5"> and this is how a V table</font>

128
00:05:56,150 --> 00:06:02,690
really look like<font color="#CCCCCC"> the problem is that you</font>

129
00:05:59,300 --> 00:06:04,550
don't<font color="#CCCCCC"> really know what when you do a</font>

130
00:06:02,690 --> 00:06:06,440
<font color="#CCCCCC">virtual call</font><font color="#E5E5E5"> you don't really know what</font>

131
00:06:04,550 --> 00:06:09,400
function was called<font color="#E5E5E5"> because as you can</font>

132
00:06:06,440 --> 00:06:12,260
<font color="#E5E5E5">see here you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> three important</font>

133
00:06:09,400 --> 00:06:15,169
instructions that I mark the<font color="#E5E5E5"> first one</font>

134
00:06:12,260 --> 00:06:17,630
is the assignment<font color="#E5E5E5"> of the V table to EDX</font>

135
00:06:15,170 --> 00:06:20,270
the this is the first<font color="#E5E5E5"> instruction that</font>

136
00:06:17,630 --> 00:06:22,460
is important<font color="#E5E5E5"> you</font><font color="#CCCCCC"> take the first</font><font color="#E5E5E5"> four</font>

137
00:06:20,270 --> 00:06:25,280
<font color="#E5E5E5">bytes with the Vita will form the object</font>

138
00:06:22,460 --> 00:06:25,880
here<font color="#E5E5E5"> is told in</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> egg and movie</font><font color="#CCCCCC"> two</font>

139
00:06:25,280 --> 00:06:27,979
<font color="#CCCCCC">edicts</font>

140
00:06:25,880 --> 00:06:30,170
so now<font color="#CCCCCC"> EDX has the pointer to the V</font>

141
00:06:27,980 --> 00:06:31,440
table the second instruction that<font color="#E5E5E5"> are</font>

142
00:06:30,170 --> 00:06:34,920
<font color="#E5E5E5">marked E</font>

143
00:06:31,440 --> 00:06:38,850
the assignment<font color="#E5E5E5"> of the function from EDX</font>

144
00:06:34,920 --> 00:06:41,070
<font color="#E5E5E5">the vtable</font><font color="#CCCCCC"> to eight</font><font color="#E5E5E5"> in this case you</font>

145
00:06:38,850 --> 00:06:43,530
have offset<font color="#CCCCCC"> four</font><font color="#E5E5E5"> which means</font><font color="#CCCCCC"> it's the</font>

146
00:06:41,070 --> 00:06:45,930
<font color="#E5E5E5">second function inside the</font><font color="#CCCCCC"> V table</font><font color="#E5E5E5"> and</font>

147
00:06:43,530 --> 00:06:48,809
the third one the third instruction is

148
00:06:45,930 --> 00:06:51,000
Kali eight here if you can see this code

149
00:06:48,810 --> 00:06:52,950
<font color="#E5E5E5">you</font><font color="#CCCCCC"> don't really know what function was</font>

150
00:06:51,000 --> 00:06:55,290
called<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can't see the V table</font>

151
00:06:52,950 --> 00:06:57,270
and you can see the functions<font color="#E5E5E5"> you only</font>

152
00:06:55,290 --> 00:06:59,250
see registers and you know they stole

153
00:06:57,270 --> 00:07:01,620
some kind of an address<font color="#CCCCCC"> but you don't</font>

154
00:06:59,250 --> 00:07:04,140
really know what<font color="#E5E5E5"> address so this is a</font>

155
00:07:01,620 --> 00:07:06,450
very big program<font color="#E5E5E5"> as reversals because</font>

156
00:07:04,140 --> 00:07:10,320
all the visualization<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> have in</font>

157
00:07:06,450 --> 00:07:12,120
C++<font color="#E5E5E5"> must be researched dynamically and a</font>

158
00:07:10,320 --> 00:07:13,890
lot of<font color="#CCCCCC"> time</font><font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> run your code</font>

159
00:07:12,120 --> 00:07:19,290
again and<font color="#E5E5E5"> again in order</font><font color="#CCCCCC"> to get all of</font>

160
00:07:13,890 --> 00:07:21,360
those<font color="#E5E5E5"> things</font><font color="#CCCCCC"> so one more last big issue</font>

161
00:07:19,290 --> 00:07:23,820
that<font color="#E5E5E5"> we have is also multiple</font>

162
00:07:21,360 --> 00:07:26,130
<font color="#E5E5E5">inheritance we talked about inheritance</font>

163
00:07:23,820 --> 00:07:27,780
that<font color="#E5E5E5"> one class can inherit from a</font>

164
00:07:26,130 --> 00:07:29,430
<font color="#E5E5E5">different class but what happens when</font>

165
00:07:27,780 --> 00:07:32,400
one<font color="#E5E5E5"> class inherits from two different</font>

166
00:07:29,430 --> 00:07:33,870
<font color="#E5E5E5">classes so in this case it's a list</font><font color="#CCCCCC"> I</font>

167
00:07:32,400 --> 00:07:36,719
believe a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> code here but I'll</font>

168
00:07:33,870 --> 00:07:39,840
<font color="#CCCCCC">explain it like what happens here we</font>

169
00:07:36,720 --> 00:07:42,660
have<font color="#E5E5E5"> to to func two classes father be</font>

170
00:07:39,840 --> 00:07:45,750
father<font color="#E5E5E5"> A and Class</font><font color="#CCCCCC"> C inherits from both</font>

171
00:07:42,660 --> 00:07:47,370
of<font color="#CCCCCC"> them so there is a lot of problems</font>

172
00:07:45,750 --> 00:07:50,010
that<font color="#E5E5E5"> happens with multiple inheritance</font>

173
00:07:47,370 --> 00:07:52,230
I'm only<font color="#CCCCCC"> gonna focus on one thing that</font>

174
00:07:50,010 --> 00:07:54,060
showing<font color="#E5E5E5"> you how</font><font color="#CCCCCC"> it looks in Ida and how</font>

175
00:07:52,230 --> 00:07:57,390
we look<font color="#E5E5E5"> how it</font><font color="#CCCCCC"> looks after it was</font>

176
00:07:54,060 --> 00:07:59,580
compiled<font color="#E5E5E5"> so in this case we have two</font>

177
00:07:57,390 --> 00:08:03,060
<font color="#E5E5E5">virtual functions that are both</font>

178
00:07:59,580 --> 00:08:06,150
implemented in<font color="#E5E5E5"> B and in a but in C we</font>

179
00:08:03,060 --> 00:08:08,350
have one more function called<font color="#CCCCCC"> photo that</font>

180
00:08:06,150 --> 00:08:13,090
was only created<font color="#E5E5E5"> in</font>

181
00:08:08,350 --> 00:08:15,310
in classic so how multiple inheritance

182
00:08:13,090 --> 00:08:17,229
really look like<font color="#E5E5E5"> we talked about the</font>

183
00:08:15,310 --> 00:08:19,780
<font color="#E5E5E5">object and how the object</font><font color="#CCCCCC"> looked</font><font color="#E5E5E5"> like</font>

184
00:08:17,230 --> 00:08:22,060
when we created<font color="#E5E5E5"> but now we have multiple</font>

185
00:08:19,780 --> 00:08:26,409
<font color="#E5E5E5">inheritance and this means that</font><font color="#CCCCCC"> we have</font>

186
00:08:22,060 --> 00:08:29,260
<font color="#E5E5E5">two fathers for the same object</font><font color="#CCCCCC"> so in</font>

187
00:08:26,410 --> 00:08:32,110
this case what happens<font color="#CCCCCC"> is we create</font>

188
00:08:29,260 --> 00:08:34,330
<font color="#E5E5E5">father a object and then father B and</font>

189
00:08:32,110 --> 00:08:37,990
just at<font color="#E5E5E5"> the end we</font><font color="#CCCCCC"> add all the members</font>

190
00:08:34,330 --> 00:08:41,770
<font color="#CCCCCC">of the current sons</font><font color="#E5E5E5"> object which means</font>

191
00:08:37,990 --> 00:08:43,870
<font color="#CCCCCC">in case we have C so the first thing</font>

192
00:08:41,770 --> 00:08:47,110
<font color="#CCCCCC">that happened is we create</font><font color="#E5E5E5"> therefore</font>

193
00:08:43,870 --> 00:08:49,990
first<font color="#E5E5E5"> byte of a V table for see if if if</font>

194
00:08:47,110 --> 00:08:52,810
it only inherits from father a then we

195
00:08:49,990 --> 00:08:55,000
add all of the a members the second

196
00:08:52,810 --> 00:08:58,119
thing we are going<font color="#E5E5E5"> to show</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> is</font>

197
00:08:55,000 --> 00:09:00,400
the B table for see<font color="#E5E5E5"> if</font><font color="#CCCCCC"> it only</font><font color="#E5E5E5"> inherit</font>

198
00:08:58,120 --> 00:09:02,770
zombie and then<font color="#E5E5E5"> we have all the B</font>

199
00:09:00,400 --> 00:09:05,680
members and the sector<font color="#E5E5E5"> part is their</font>

200
00:09:02,770 --> 00:09:07,930
team members<font color="#CCCCCC"> because C is</font><font color="#E5E5E5"> also an object</font>

201
00:09:05,680 --> 00:09:14,160
<font color="#CCCCCC">it has its own members then we have all</font>

202
00:09:07,930 --> 00:09:14,160
the<font color="#E5E5E5"> members that C</font><font color="#CCCCCC"> has so</font>

203
00:09:14,590 --> 00:09:21,340
<font color="#E5E5E5">okay so one more thing and is the</font>

204
00:09:19,300 --> 00:09:23,439
function calls in multiple<font color="#CCCCCC"> inheritance</font>

205
00:09:21,340 --> 00:09:25,300
it might look very<font color="#CCCCCC"> complicated because</font>

206
00:09:23,440 --> 00:09:27,760
there is lots of objects<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and like</font>

207
00:09:25,300 --> 00:09:30,670
all the relationship between them<font color="#E5E5E5"> but</font>

208
00:09:27,760 --> 00:09:32,620
one simple<font color="#E5E5E5"> thing is that if you have to</font>

209
00:09:30,670 --> 00:09:34,569
inherit<font color="#E5E5E5"> two father's you need to</font>

210
00:09:32,620 --> 00:09:36,820
explicitly<font color="#E5E5E5"> say which father you are</font>

211
00:09:34,570 --> 00:09:39,730
<font color="#E5E5E5">going to use which function you need to</font>

212
00:09:36,820 --> 00:09:41,680
use so as you can<font color="#CCCCCC"> see in here in the</font>

213
00:09:39,730 --> 00:09:44,529
<font color="#E5E5E5">highlighted part you explicitly said</font>

214
00:09:41,680 --> 00:09:46,959
father<font color="#CCCCCC"> a and the functioning</font><font color="#E5E5E5"> and as you</font>

215
00:09:44,529 --> 00:09:49,150
<font color="#E5E5E5">can see in there's</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> the name of the</font>

216
00:09:46,960 --> 00:09:50,620
function<font color="#E5E5E5"> is</font><font color="#CCCCCC"> exactly the name that's</font>

217
00:09:49,150 --> 00:09:53,160
supposed to be<font color="#E5E5E5"> called it's not a virtual</font>

218
00:09:50,620 --> 00:09:56,589
call just a call<font color="#E5E5E5"> so in this case it's</font>

219
00:09:53,160 --> 00:09:58,810
easier<font color="#E5E5E5"> sometimes to look at because</font><font color="#CCCCCC"> you</font>

220
00:09:56,589 --> 00:10:01,270
can just see the<font color="#E5E5E5"> float of the program</font>

221
00:09:58,810 --> 00:10:04,479
<font color="#E5E5E5">the problem comes when you look at the</font>

222
00:10:01,270 --> 00:10:07,000
fifth call which is who - it's a virtual

223
00:10:04,480 --> 00:10:09,150
call that was implemented<font color="#CCCCCC"> in C so in</font>

224
00:10:07,000 --> 00:10:11,650
here<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see in the</font><font color="#E5E5E5"> last instruction</font>

225
00:10:09,150 --> 00:10:14,800
<font color="#E5E5E5">colleagues</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is an address</font><font color="#CCCCCC"> that we</font>

226
00:10:11,650 --> 00:10:16,790
cannot know statically<font color="#E5E5E5"> where it points</font>

227
00:10:14,800 --> 00:10:18,859
to

228
00:10:16,790 --> 00:10:21,050
so<font color="#CCCCCC"> let's you might obtain like it</font>

229
00:10:18,860 --> 00:10:22,790
requires a lot of work to<font color="#CCCCCC"> reverse C++</font>

230
00:10:21,050 --> 00:10:25,069
<font color="#E5E5E5">you</font><font color="#CCCCCC"> had lots of stuff you need to</font>

231
00:10:22,790 --> 00:10:27,469
consider<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> have lots of stuff you</font>

232
00:10:25,070 --> 00:10:29,330
need to<font color="#E5E5E5"> walk on and know before you even</font>

233
00:10:27,470 --> 00:10:34,370
<font color="#E5E5E5">start to look at the logic of the</font>

234
00:10:29,330 --> 00:10:36,980
program<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to make it fluffy so I</font>

235
00:10:34,370 --> 00:10:39,710
wanted<font color="#E5E5E5"> to use tools that are really easy</font>

236
00:10:36,980 --> 00:10:42,980
to<font color="#CCCCCC"> you to use them but it's also</font><font color="#E5E5E5"> very</font>

237
00:10:39,710 --> 00:10:45,140
powerful<font color="#CCCCCC"> in powerful</font><font color="#E5E5E5"> tools so what it</font>

238
00:10:42,980 --> 00:10:47,660
<font color="#CCCCCC">shows is either</font><font color="#E5E5E5"> Python</font><font color="#CCCCCC"> 96 was trivial</font>

239
00:10:45,140 --> 00:10:48,319
<font color="#E5E5E5">for me because I already knew them from</font>

240
00:10:47,660 --> 00:10:53,209
<font color="#CCCCCC">before</font>

241
00:10:48,320 --> 00:10:56,600
this is tools data<font color="#E5E5E5"> only the Ida they was</font>

242
00:10:53,210 --> 00:10:59,750
created by<font color="#E5E5E5"> Idaho and it can be used to</font>

243
00:10:56,600 --> 00:11:01,030
program<font color="#E5E5E5"> some automation for reverse</font>

244
00:10:59,750 --> 00:11:03,980
<font color="#CCCCCC">engineering</font>

245
00:11:01,030 --> 00:11:06,439
so<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Python is easy-peasy</font><font color="#E5E5E5"> to white</font>

246
00:11:03,980 --> 00:11:09,410
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it has</font><font color="#E5E5E5"> lots of examples because</font>

247
00:11:06,440 --> 00:11:12,590
<font color="#E5E5E5">well everyone like to write code in</font>

248
00:11:09,410 --> 00:11:14,329
<font color="#E5E5E5">Python and then there is lots of</font>

249
00:11:12,590 --> 00:11:16,040
examples the code is<font color="#CCCCCC"> very easy to</font><font color="#E5E5E5"> write</font>

250
00:11:14,330 --> 00:11:18,740
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> also you don't have to</font>

251
00:11:16,040 --> 00:11:21,230
think<font color="#E5E5E5"> about all the things that C needs</font>

252
00:11:18,740 --> 00:11:22,580
to needs to be think we<font color="#E5E5E5"> don't need to</font>

253
00:11:21,230 --> 00:11:26,000
<font color="#CCCCCC">think</font><font color="#E5E5E5"> about all the things</font><font color="#CCCCCC"> that you need</font>

254
00:11:22,580 --> 00:11:30,320
<font color="#CCCCCC">to</font><font color="#E5E5E5"> think about if you got in C and an</font>

255
00:11:26,000 --> 00:11:32,780
<font color="#E5E5E5">IDC is more like a sleepwalking language</font>

256
00:11:30,320 --> 00:11:35,870
that is has its own compiler that<font color="#E5E5E5"> Ida</font>

257
00:11:32,780 --> 00:11:37,459
created<font color="#E5E5E5"> it's more extensive extensive it</font>

258
00:11:35,870 --> 00:11:39,380
has more stuff because<font color="#E5E5E5"> it's more</font>

259
00:11:37,460 --> 00:11:42,260
low-level so it's connected to the API

260
00:11:39,380 --> 00:11:44,150
<font color="#E5E5E5">that either provides but it's hard to</font>

261
00:11:42,260 --> 00:11:46,040
<font color="#CCCCCC">know how</font><font color="#E5E5E5"> to write stuff there is no</font>

262
00:11:44,150 --> 00:11:49,560
documentation<font color="#CCCCCC"> oh there is a little</font>

263
00:11:46,040 --> 00:11:51,599
<font color="#E5E5E5">documentation but there is no</font><font color="#CCCCCC"> example</font>

264
00:11:49,560 --> 00:11:55,109
so you<font color="#E5E5E5"> really need</font><font color="#CCCCCC"> to go deep into</font><font color="#E5E5E5"> the</font>

265
00:11:51,600 --> 00:11:57,810
files in<font color="#E5E5E5"> order to</font><font color="#CCCCCC"> light IDC so this is</font>

266
00:11:55,110 --> 00:11:59,940
that way all<font color="#E5E5E5"> began</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to write</font>

267
00:11:57,810 --> 00:12:02,550
something<font color="#E5E5E5"> that will help me rebuild C++</font>

268
00:11:59,940 --> 00:12:04,290
<font color="#E5E5E5">because</font><font color="#CCCCCC"> when I reverse the plus pass I</font>

269
00:12:02,550 --> 00:12:06,420
<font color="#E5E5E5">had all this built realization program</font>

270
00:12:04,290 --> 00:12:09,329
and<font color="#E5E5E5"> into</font><font color="#CCCCCC"> I told the structures by myself</font>

271
00:12:06,420 --> 00:12:12,089
and I said like there must<font color="#E5E5E5"> be some</font><font color="#CCCCCC"> way</font>

272
00:12:09,330 --> 00:12:15,630
to automate<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of these forces</font><font color="#E5E5E5"> in order</font>

273
00:12:12,090 --> 00:12:17,580
<font color="#E5E5E5">to make it to</font><font color="#CCCCCC"> make it easier for me as a</font>

274
00:12:15,630 --> 00:12:19,820
reversal to continue and go<font color="#CCCCCC"> into the</font>

275
00:12:17,580 --> 00:12:22,290
logic<font color="#E5E5E5"> instead of going into the</font>

276
00:12:19,820 --> 00:12:24,210
<font color="#E5E5E5">framework for like</font><font color="#CCCCCC"> all that stuff walk</font>

277
00:12:22,290 --> 00:12:27,300
<font color="#E5E5E5">so I said like</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> fine I'll find a way</font>

278
00:12:24,210 --> 00:12:29,670
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is how it began</font><font color="#CCCCCC"> I took a white</font>

279
00:12:27,300 --> 00:12:32,670
<font color="#CCCCCC">board and just light</font><font color="#E5E5E5"> everything I wanted</font>

280
00:12:29,670 --> 00:12:34,949
<font color="#E5E5E5">and add everything that I thought about</font>

281
00:12:32,670 --> 00:12:37,920
<font color="#E5E5E5">to the board and then I also got like a</font>

282
00:12:34,950 --> 00:12:41,250
nice print like a nice painting here

283
00:12:37,920 --> 00:12:43,290
from one of<font color="#CCCCCC"> my friends</font><font color="#E5E5E5"> so then I</font>

284
00:12:41,250 --> 00:12:45,090
continued<font color="#CCCCCC"> and came up with the trailer</font>

285
00:12:43,290 --> 00:12:47,880
<font color="#E5E5E5">which is the tool</font><font color="#CCCCCC"> that I'm gonna</font><font color="#E5E5E5"> speak</font>

286
00:12:45,090 --> 00:12:50,400
about so the first thing I thought<font color="#E5E5E5"> about</font>

287
00:12:47,880 --> 00:12:52,710
is like automating either<font color="#E5E5E5"> Tracy because</font>

288
00:12:50,400 --> 00:12:56,579
I'd already<font color="#CCCCCC"> hair so I think we can maybe</font>

289
00:12:52,710 --> 00:12:58,620
take this in use<font color="#E5E5E5"> I defy tone in order to</font>

290
00:12:56,580 --> 00:13:02,970
to automate all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this process and</font>

291
00:12:58,620 --> 00:13:04,830
create automated trace and so what I

292
00:13:02,970 --> 00:13:07,200
want<font color="#CCCCCC"> to do is create trace</font><font color="#E5E5E5"> break</font><font color="#CCCCCC"> points</font>

293
00:13:04,830 --> 00:13:09,340
on the virtual calls and then<font color="#E5E5E5"> pass the</font>

294
00:13:07,200 --> 00:13:12,970
trace file that was created

295
00:13:09,340 --> 00:13:15,880
and<font color="#E5E5E5"> that's it</font><font color="#CCCCCC"> mother was a problem since</font>

296
00:13:12,970 --> 00:13:18,340
Tracy<font color="#CCCCCC"> might sounds like a good</font><font color="#E5E5E5"> solution</font>

297
00:13:15,880 --> 00:13:20,290
<font color="#E5E5E5">but you</font><font color="#CCCCCC"> didn't give me a</font><font color="#E5E5E5"> little time</font>

298
00:13:18,340 --> 00:13:23,529
solution<font color="#E5E5E5"> you need to finish all of the</font>

299
00:13:20,290 --> 00:13:26,680
running<font color="#CCCCCC"> and then just to manually</font><font color="#E5E5E5"> power</font>

300
00:13:23,529 --> 00:13:29,200
<font color="#E5E5E5">press on day and save the file</font>

301
00:13:26,680 --> 00:13:31,510
pass the file and it's not what I wanted

302
00:13:29,200 --> 00:13:33,610
<font color="#CCCCCC">it's also give me only</font><font color="#E5E5E5"> the specific</font>

303
00:13:31,510 --> 00:13:35,800
<font color="#CCCCCC">function that</font><font color="#E5E5E5"> was called and not all the</font>

304
00:13:33,610 --> 00:13:38,890
<font color="#CCCCCC">vtable</font><font color="#E5E5E5"> you can only see one function so</font>

305
00:13:35,800 --> 00:13:42,040
it created<font color="#CCCCCC"> problem states didn't</font><font color="#E5E5E5"> give me</font>

306
00:13:38,890 --> 00:13:44,680
the whole<font color="#CCCCCC"> solution that I wanted those</font>

307
00:13:42,040 --> 00:13:46,770
are like<font color="#E5E5E5"> okay fine I must may have some</font>

308
00:13:44,680 --> 00:13:49,510
dynamic<font color="#E5E5E5"> solution I must find some</font>

309
00:13:46,770 --> 00:13:51,610
solution for it so I decided<font color="#CCCCCC"> to take</font>

310
00:13:49,510 --> 00:13:53,860
<font color="#E5E5E5">that well which mean go backward</font><font color="#CCCCCC"> in the</font>

311
00:13:51,610 --> 00:13:57,550
<font color="#E5E5E5">instruction look at the registers values</font>

312
00:13:53,860 --> 00:14:00,460
and then find<font color="#E5E5E5"> the right assignment of</font>

313
00:13:57,550 --> 00:14:01,569
the<font color="#CCCCCC"> vtable to the register</font><font color="#E5E5E5"> in the cases</font>

314
00:14:00,460 --> 00:14:05,410
we've seen before<font color="#E5E5E5"> it will for example</font>

315
00:14:01,570 --> 00:14:07,810
<font color="#CCCCCC">EDX</font><font color="#E5E5E5"> but it can be a lot it depends on a</font>

316
00:14:05,410 --> 00:14:10,360
lot of<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> and the second thing I</font>

317
00:14:07,810 --> 00:14:13,209
wanted<font color="#CCCCCC"> to create structures of the V</font>

318
00:14:10,360 --> 00:14:15,100
table based on<font color="#E5E5E5"> the V table pointer so I</font>

319
00:14:13,210 --> 00:14:17,830
wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create the structure</font><font color="#CCCCCC"> in either</font>

320
00:14:15,100 --> 00:14:19,570
of the V<font color="#CCCCCC"> tables and I also wanted to</font>

321
00:14:17,830 --> 00:14:21,280
correlate between the<font color="#E5E5E5"> assembly and</font><font color="#CCCCCC"> the</font>

322
00:14:19,570 --> 00:14:23,710
structure because I wanted a way<font color="#CCCCCC"> to</font>

323
00:14:21,280 --> 00:14:27,880
connect between<font color="#E5E5E5"> them and see how they</font>

324
00:14:23,710 --> 00:14:29,890
<font color="#CCCCCC">are really related</font><font color="#E5E5E5"> so the first thing I</font>

325
00:14:27,880 --> 00:14:33,070
thought about<font color="#CCCCCC"> is breakpoints</font><font color="#E5E5E5"> it's a good</font>

326
00:14:29,890 --> 00:14:35,590
solution<font color="#CCCCCC"> it gives me an option to cook</font>

327
00:14:33,070 --> 00:14:38,830
some<font color="#CCCCCC"> places and have</font>

328
00:14:35,590 --> 00:14:41,740
and have like and can<font color="#CCCCCC"> I'll never be able</font>

329
00:14:38,830 --> 00:14:43,510
<font color="#CCCCCC">to run</font><font color="#E5E5E5"> my code</font><font color="#CCCCCC"> so how</font><font color="#E5E5E5"> you create a</font>

330
00:14:41,740 --> 00:14:46,090
<font color="#CCCCCC">breakpoint this is the basic thing in</font>

331
00:14:43,510 --> 00:14:48,520
<font color="#E5E5E5">either Python there is a just like one</font>

332
00:14:46,090 --> 00:14:51,070
command you can just write either API<font color="#E5E5E5"> a</font>

333
00:14:48,520 --> 00:14:53,050
breakpoint<font color="#CCCCCC"> you add the address the</font>

334
00:14:51,070 --> 00:14:55,120
number<font color="#CCCCCC"> of bytes that</font><font color="#E5E5E5"> you want for</font><font color="#CCCCCC"> the</font>

335
00:14:53,050 --> 00:14:57,490
<font color="#E5E5E5">breakpoints and the type of</font><font color="#CCCCCC"> point in</font>

336
00:14:55,120 --> 00:15:00,190
<font color="#E5E5E5">software breakpoint what I have here is</font>

337
00:14:57,490 --> 00:15:01,870
not really<font color="#CCCCCC"> relevant</font><font color="#E5E5E5"> because just in how</font>

338
00:15:00,190 --> 00:15:04,480
in how<font color="#E5E5E5"> little break point you can had</font>

339
00:15:01,870 --> 00:15:06,280
the number<font color="#E5E5E5"> of bytes you want but in</font>

340
00:15:04,480 --> 00:15:08,370
software<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> really relevant</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> 0</font>

341
00:15:06,280 --> 00:15:11,829
it's a different one which<font color="#E5E5E5"> means</font><font color="#CCCCCC"> 4 bytes</font>

342
00:15:08,370 --> 00:15:13,930
so until now it sounds like nice it's

343
00:15:11,830 --> 00:15:16,300
<font color="#E5E5E5">just like a</font><font color="#CCCCCC"> breakpoint and the second</font>

344
00:15:13,930 --> 00:15:18,099
thing I wanted is to<font color="#CCCCCC"> look at the</font>

345
00:15:16,300 --> 00:15:19,449
condition of the<font color="#E5E5E5"> by point which I'm</font>

346
00:15:18,100 --> 00:15:22,180
going to talk<font color="#CCCCCC"> about now</font>

347
00:15:19,450 --> 00:15:24,430
so before we are talking about

348
00:15:22,180 --> 00:15:28,449
conditional<font color="#E5E5E5"> breakpoint</font><font color="#CCCCCC"> I'm going to talk</font>

349
00:15:24,430 --> 00:15:31,359
<font color="#E5E5E5">about I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the variable pointers so</font>

350
00:15:28,450 --> 00:15:33,400
at<font color="#E5E5E5"> first we want to find</font><font color="#CCCCCC"> all the virtual</font>

351
00:15:31,360 --> 00:15:36,730
calls because we need to hook the

352
00:15:33,400 --> 00:15:41,380
relevant<font color="#E5E5E5"> path in order to get the</font><font color="#CCCCCC"> V</font>

353
00:15:36,730 --> 00:15:43,720
tables<font color="#E5E5E5"> so this code is going through the</font>

354
00:15:41,380 --> 00:15:45,700
<font color="#E5E5E5">colon search for virtual real course</font>

355
00:15:43,720 --> 00:15:47,230
it's not a very complicated one<font color="#E5E5E5"> I know</font>

356
00:15:45,700 --> 00:15:49,660
there is a lot of code<font color="#E5E5E5"> here but I'm</font>

357
00:15:47,230 --> 00:15:51,760
going<font color="#CCCCCC"> to publish my mic too late get up</font>

358
00:15:49,660 --> 00:15:54,130
afterwards so if someone<font color="#CCCCCC"> needs instead</font>

359
00:15:51,760 --> 00:15:56,140
you can just go<font color="#E5E5E5"> and see what is there</font>

360
00:15:54,130 --> 00:15:59,380
and

361
00:15:56,140 --> 00:16:01,899
so if I add<font color="#E5E5E5"> breakpoints on the visible</font>

362
00:15:59,380 --> 00:16:03,850
assignment I<font color="#CCCCCC"> can get the pointer to the</font>

363
00:16:01,899 --> 00:16:06,149
<font color="#CCCCCC">B table</font><font color="#E5E5E5"> and then get all the functions</font>

364
00:16:03,850 --> 00:16:09,040
<font color="#E5E5E5">you know what I thought about so</font>

365
00:16:06,149 --> 00:16:12,010
conditional breakpoint is<font color="#E5E5E5"> well it was my</font>

366
00:16:09,040 --> 00:16:13,390
way of<font color="#E5E5E5"> hooking this code because one</font><font color="#CCCCCC"> of</font>

367
00:16:12,010 --> 00:16:15,339
the things that I have over it is

368
00:16:13,390 --> 00:16:17,140
conditional breakpoint in every

369
00:16:15,339 --> 00:16:19,779
breakpoint that you have you can<font color="#CCCCCC"> add a</font>

370
00:16:17,140 --> 00:16:23,949
<font color="#CCCCCC">condition which</font><font color="#E5E5E5"> means you can write code</font>

371
00:16:19,779 --> 00:16:27,519
that<font color="#E5E5E5"> if it's it was like correcto so the</font>

372
00:16:23,950 --> 00:16:29,950
breakpoint is<font color="#CCCCCC"> hated and break</font><font color="#E5E5E5"> but in</font>

373
00:16:27,519 --> 00:16:33,010
case it's not<font color="#E5E5E5"> and the condition is</font><font color="#CCCCCC"> false</font>

374
00:16:29,950 --> 00:16:35,560
<font color="#E5E5E5">just continue what I wanted to do is</font>

375
00:16:33,010 --> 00:16:37,480
write code with<font color="#E5E5E5"> a false condition</font><font color="#CCCCCC"> it</font>

376
00:16:35,560 --> 00:16:40,060
will always<font color="#E5E5E5"> be false so the breakpoint</font>

377
00:16:37,480 --> 00:16:43,360
would never stop but my code will<font color="#E5E5E5"> still</font>

378
00:16:40,060 --> 00:16:45,969
run<font color="#CCCCCC"> switch mean I can hook places</font><font color="#E5E5E5"> run my</font>

379
00:16:43,360 --> 00:16:48,130
code on them and then just<font color="#CCCCCC"> continue with</font>

380
00:16:45,970 --> 00:16:49,930
the<font color="#E5E5E5"> flow of the program</font><font color="#CCCCCC"> so when you run</font>

381
00:16:48,130 --> 00:16:52,750
the<font color="#E5E5E5"> code when you run my tool</font>

382
00:16:49,930 --> 00:16:55,420
none of the user doesn't<font color="#E5E5E5"> the user which</font>

383
00:16:52,750 --> 00:16:57,940
<font color="#CCCCCC">is the person doesn't</font><font color="#E5E5E5"> need to stop the</font>

384
00:16:55,420 --> 00:17:00,459
<font color="#CCCCCC">program while trance just can do stuff</font>

385
00:16:57,940 --> 00:17:03,279
<font color="#E5E5E5">on the program on your</font><font color="#CCCCCC"> C++ program</font><font color="#E5E5E5"> and</font>

386
00:17:00,459 --> 00:17:06,609
then on the background your<font color="#E5E5E5"> IDP is being</font>

387
00:17:03,279 --> 00:17:09,909
fooled with the comments<font color="#CCCCCC"> the structures</font>

388
00:17:06,609 --> 00:17:13,250
the<font color="#CCCCCC"> V tables</font><font color="#E5E5E5"> everything</font>

389
00:17:09,909 --> 00:17:15,380
so conditional<font color="#CCCCCC"> breakpoint and neither</font>

390
00:17:13,250 --> 00:17:18,319
<font color="#E5E5E5">Python there was a small problem</font>

391
00:17:15,380 --> 00:17:21,350
a small but annoying one the conditions

392
00:17:18,319 --> 00:17:24,799
<font color="#CCCCCC">that either can</font><font color="#E5E5E5"> discipline right beside</font>

393
00:17:21,349 --> 00:17:27,529
<font color="#CCCCCC">a fight</font><font color="#E5E5E5"> on our only IDC so it means that</font>

394
00:17:24,799 --> 00:17:29,059
all<font color="#E5E5E5"> I can write is conditions University</font>

395
00:17:27,529 --> 00:17:31,399
<font color="#E5E5E5">so in general I don't have problem with</font>

396
00:17:29,059 --> 00:17:33,200
<font color="#E5E5E5">it I can</font><font color="#CCCCCC"> just write it in IDC</font><font color="#E5E5E5"> the</font>

397
00:17:31,399 --> 00:17:34,518
problem was<font color="#CCCCCC"> that all the functionalities</font>

398
00:17:33,200 --> 00:17:38,120
<font color="#CCCCCC">that on the functions</font><font color="#E5E5E5"> and the</font>

399
00:17:34,519 --> 00:17:40,490
functionality<font color="#CCCCCC"> I needed was in IBC those</font>

400
00:17:38,120 --> 00:17:42,739
IDC<font color="#CCCCCC"> files that you need to include to</font>

401
00:17:40,490 --> 00:17:45,649
your code<font color="#E5E5E5"> the problem is that in</font>

402
00:17:42,740 --> 00:17:48,620
conditions you cannot include files in

403
00:17:45,649 --> 00:17:50,719
IDC so here<font color="#E5E5E5"> I can</font><font color="#CCCCCC"> only do the basic</font>

404
00:17:48,620 --> 00:17:52,908
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> I cannot create structures I</font>

405
00:17:50,720 --> 00:17:54,860
cannot correlate the structure with the

406
00:17:52,909 --> 00:17:57,019
<font color="#E5E5E5">assembly and then like it's not what</font><font color="#CCCCCC"> I</font>

407
00:17:54,860 --> 00:18:00,199
wanted I can just use the tracing flow

408
00:17:57,019 --> 00:18:03,529
before<font color="#E5E5E5"> and I must as I have so like I</font>

409
00:18:00,200 --> 00:18:05,960
must<font color="#E5E5E5"> find</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> solution so I said</font><font color="#CCCCCC"> okay</font>

410
00:18:03,529 --> 00:18:07,519
<font color="#E5E5E5">let's dive to Ida Python and find a way</font>

411
00:18:05,960 --> 00:18:12,440
to change<font color="#E5E5E5"> the condition to either fight</font>

412
00:18:07,519 --> 00:18:14,929
on so this<font color="#E5E5E5"> is the code that set the</font>

413
00:18:12,440 --> 00:18:17,330
breakpoint condition<font color="#CCCCCC"> I looked inside the</font>

414
00:18:14,929 --> 00:18:20,000
code and there is no reference<font color="#E5E5E5"> to the</font>

415
00:18:17,330 --> 00:18:23,480
language<font color="#E5E5E5"> of the condition just add the</font>

416
00:18:20,000 --> 00:18:27,950
condition<font color="#E5E5E5"> it doesn't have any any and</font>

417
00:18:23,480 --> 00:18:29,990
any<font color="#E5E5E5"> thing about like language so I</font>

418
00:18:27,950 --> 00:18:31,669
wanted<font color="#CCCCCC"> to I want to</font><font color="#E5E5E5"> change the language</font>

419
00:18:29,990 --> 00:18:33,889
<font color="#E5E5E5">so it was fine</font>

420
00:18:31,669 --> 00:18:36,500
let's try to look at IDC<font color="#E5E5E5"> it might</font>

421
00:18:33,889 --> 00:18:39,049
<font color="#E5E5E5">contain something that will help</font><font color="#CCCCCC"> me so I</font>

422
00:18:36,500 --> 00:18:40,490
<font color="#E5E5E5">looked in IDC you have class by</font><font color="#CCCCCC"> point in</font>

423
00:18:39,049 --> 00:18:43,309
IDC

424
00:18:40,490 --> 00:18:46,429
and one<font color="#CCCCCC"> of the attributes is Elon</font><font color="#E5E5E5"> as you</font>

425
00:18:43,309 --> 00:18:49,580
can see there on top<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

426
00:18:46,429 --> 00:18:52,130
language of<font color="#E5E5E5"> the condition</font><font color="#CCCCCC"> her</font><font color="#E5E5E5"> third fine</font>

427
00:18:49,580 --> 00:18:55,220
<font color="#CCCCCC">if it's an</font><font color="#E5E5E5"> ID thing I must find a</font><font color="#CCCCCC"> place</font>

428
00:18:52,130 --> 00:18:59,000
in<font color="#E5E5E5"> either that</font><font color="#CCCCCC"> also has this in either</font>

429
00:18:55,220 --> 00:19:03,590
<font color="#E5E5E5">Python so what I found is in a a P I</font>

430
00:18:59,000 --> 00:19:06,980
which is<font color="#E5E5E5"> one of the</font><font color="#CCCCCC"> module States</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> defy</font>

431
00:19:03,590 --> 00:19:09,830
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Python there is a lung attribute but</font>

432
00:19:06,980 --> 00:19:11,840
there is no function that change it so I

433
00:19:09,830 --> 00:19:14,870
saw like<font color="#E5E5E5"> fine I'll just create this</font>

434
00:19:11,840 --> 00:19:16,760
<font color="#E5E5E5">class</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> changed</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the attributes</font>

435
00:19:14,870 --> 00:19:19,909
<font color="#E5E5E5">manually and</font><font color="#CCCCCC"> then I have a break point</font>

436
00:19:16,760 --> 00:19:21,890
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> right language</font><font color="#E5E5E5"> so this is how</font>

437
00:19:19,910 --> 00:19:24,650
you create<font color="#CCCCCC"> a break point</font><font color="#E5E5E5"> with changing</font>

438
00:19:21,890 --> 00:19:29,600
<font color="#CCCCCC">the language in the play</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the marked</font>

439
00:19:24,650 --> 00:19:33,470
box<font color="#E5E5E5"> you can see the change the changes</font>

440
00:19:29,600 --> 00:19:37,719
they<font color="#CCCCCC"> made I created this this</font><font color="#E5E5E5"> object and</font>

441
00:19:33,470 --> 00:19:42,650
then I change manually the VPT<font color="#E5E5E5"> dot elong</font>

442
00:19:37,720 --> 00:19:44,990
to my self<font color="#CCCCCC"> nakute self dot Ilan which</font>

443
00:19:42,650 --> 00:19:47,300
means this one is<font color="#E5E5E5"> part of a bigger class</font>

444
00:19:44,990 --> 00:19:50,840
<font color="#E5E5E5">and this class has options for both</font>

445
00:19:47,300 --> 00:19:53,240
<font color="#E5E5E5">conditions in Python and in IDC the</font>

446
00:19:50,840 --> 00:19:55,159
default<font color="#E5E5E5"> option is</font><font color="#CCCCCC"> that self dot a</font>

447
00:19:53,240 --> 00:19:59,150
language Python<font color="#E5E5E5"> but you can as a user</font>

448
00:19:55,160 --> 00:20:02,660
who use my tool can change it<font color="#CCCCCC"> to IDC</font>

449
00:19:59,150 --> 00:20:05,540
<font color="#E5E5E5">so again here we</font><font color="#CCCCCC"> have a break point</font><font color="#E5E5E5"> that</font>

450
00:20:02,660 --> 00:20:06,770
you can<font color="#CCCCCC"> create</font><font color="#E5E5E5"> with Python condition</font><font color="#CCCCCC"> so</font>

451
00:20:05,540 --> 00:20:09,100
<font color="#E5E5E5">yay</font>

452
00:20:06,770 --> 00:20:11,470
this is like what<font color="#E5E5E5"> we wanted</font>

453
00:20:09,100 --> 00:20:14,260
the hook purpose<font color="#CCCCCC"> now we have all the</font>

454
00:20:11,470 --> 00:20:17,500
tools in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create the hook</font>

455
00:20:14,260 --> 00:20:20,110
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we have the places with</font><font color="#E5E5E5"> the</font>

456
00:20:17,500 --> 00:20:22,570
virtual course we have the places with

457
00:20:20,110 --> 00:20:25,000
<font color="#E5E5E5">the</font><font color="#CCCCCC"> V tables assignment we also have</font>

458
00:20:22,570 --> 00:20:27,790
<font color="#CCCCCC">break points and</font><font color="#E5E5E5"> we also have conditions</font>

459
00:20:25,000 --> 00:20:32,110
in Python<font color="#E5E5E5"> so what we want now is</font><font color="#CCCCCC"> to</font>

460
00:20:27,790 --> 00:20:34,149
write<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hook so we I mentioned a</font><font color="#CCCCCC"> few</font>

461
00:20:32,110 --> 00:20:37,449
times<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> create the other</font>

462
00:20:34,150 --> 00:20:39,940
structures of the V tables<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> a</font>

463
00:20:37,450 --> 00:20:42,520
connect structures with<font color="#CCCCCC"> the virtual</font>

464
00:20:39,940 --> 00:20:44,950
<font color="#CCCCCC">poles</font><font color="#E5E5E5"> in the index</font><font color="#CCCCCC"> M Blee and I also</font>

465
00:20:42,520 --> 00:20:47,320
want to add<font color="#E5E5E5"> comments both to the</font>

466
00:20:44,950 --> 00:20:48,820
structure<font color="#E5E5E5"> and the assembly</font><font color="#CCCCCC"> the other</font>

467
00:20:47,320 --> 00:20:51,850
thing you want<font color="#CCCCCC"> to do is to correlate the</font>

468
00:20:48,820 --> 00:20:54,159
<font color="#CCCCCC">V table pointer with with the stuff</font><font color="#E5E5E5"> I'm</font>

469
00:20:51,850 --> 00:20:56,010
going<font color="#CCCCCC"> to show more</font><font color="#E5E5E5"> is the future I'm</font>

470
00:20:54,160 --> 00:21:00,820
<font color="#E5E5E5">going to show you exactly what I mean</font>

471
00:20:56,010 --> 00:21:03,150
the<font color="#E5E5E5"> hook location so the hook is is a</font>

472
00:21:00,820 --> 00:21:05,800
break point<font color="#CCCCCC"> as I said</font><font color="#E5E5E5"> and it's located</font>

473
00:21:03,150 --> 00:21:08,590
<font color="#CCCCCC">in the assignment of the relevant</font>

474
00:21:05,800 --> 00:21:12,310
function into the register in this case

475
00:21:08,590 --> 00:21:14,830
it<font color="#CCCCCC"> ye</font><font color="#E5E5E5"> and you see that EDX plus</font><font color="#CCCCCC"> 4 is the</font>

476
00:21:12,310 --> 00:21:17,110
relevant function edicts contains the<font color="#E5E5E5"> B</font>

477
00:21:14,830 --> 00:21:19,600
table<font color="#CCCCCC"> 4 is the</font><font color="#E5E5E5"> officers inside the</font><font color="#CCCCCC"> V</font>

478
00:21:17,110 --> 00:21:21,129
table which means<font color="#E5E5E5"> that the second</font>

479
00:21:19,600 --> 00:21:23,409
function from the V table is<font color="#CCCCCC"> being</font>

480
00:21:21,130 --> 00:21:26,710
assigned<font color="#E5E5E5"> to it this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> where we have the</font>

481
00:21:23,410 --> 00:21:29,770
<font color="#CCCCCC">hook first we want to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> the B table</font>

482
00:21:26,710 --> 00:21:31,810
<font color="#E5E5E5">pointer so edicts contains the V table</font>

483
00:21:29,770 --> 00:21:34,190
<font color="#E5E5E5">we just</font><font color="#CCCCCC"> need to get the value for mediax</font>

484
00:21:31,810 --> 00:21:35,720
and then we have the variable pointer

485
00:21:34,190 --> 00:21:39,110
one thing that<font color="#E5E5E5"> I'm gonna just like</font>

486
00:21:35,720 --> 00:21:41,960
mention you see here this code<font color="#CCCCCC"> that I</font>

487
00:21:39,110 --> 00:21:44,030
wrote is either Python who creates

488
00:21:41,960 --> 00:21:46,880
<font color="#E5E5E5">either Python this is why it looks</font><font color="#CCCCCC"> a</font>

489
00:21:44,030 --> 00:21:49,820
little weird<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just had fire bells with</font>

490
00:21:46,880 --> 00:21:52,520
dead register with the register<font color="#CCCCCC"> of a</font>

491
00:21:49,820 --> 00:21:55,580
table in this case<font color="#CCCCCC"> EDX is a format</font>

492
00:21:52,520 --> 00:21:57,410
previous code that I've written and this

493
00:21:55,580 --> 00:21:59,570
part is<font color="#E5E5E5"> only the hook itself</font>

494
00:21:57,410 --> 00:22:01,940
in<font color="#E5E5E5"> order to write</font><font color="#CCCCCC"> the hook I need to</font>

495
00:21:59,570 --> 00:22:04,879
like consider all the variables that<font color="#E5E5E5"> I</font>

496
00:22:01,940 --> 00:22:07,070
already already have from creating this

497
00:22:04,880 --> 00:22:08,630
break point which is the location of<font color="#E5E5E5"> the</font>

498
00:22:07,070 --> 00:22:11,720
<font color="#CCCCCC">breakpoint the register that are</font>

499
00:22:08,630 --> 00:22:14,830
<font color="#CCCCCC">involved in</font><font color="#E5E5E5"> the office so in this case</font>

500
00:22:11,720 --> 00:22:19,790
we<font color="#CCCCCC"> take the register</font><font color="#E5E5E5"> and offset and we</font>

501
00:22:14,830 --> 00:22:22,730
assign<font color="#CCCCCC"> to pv table and the right value</font>

502
00:22:19,790 --> 00:22:25,430
and<font color="#E5E5E5"> to pv function address the relevant</font>

503
00:22:22,730 --> 00:22:28,310
function that was assigned to<font color="#CCCCCC"> eight this</font>

504
00:22:25,430 --> 00:22:30,680
<font color="#E5E5E5">is</font><font color="#CCCCCC"> how the hook looks like after we run</font>

505
00:22:28,310 --> 00:22:34,610
the previous code<font color="#E5E5E5"> you see that window</font>

506
00:22:30,680 --> 00:22:36,830
was<font color="#E5E5E5"> reg value</font><font color="#CCCCCC"> the reg</font><font color="#E5E5E5"> D tables</font><font color="#CCCCCC"> it's just</font>

507
00:22:34,610 --> 00:22:39,020
changed<font color="#E5E5E5"> to EDX and the offset from</font>

508
00:22:36,830 --> 00:22:42,350
<font color="#E5E5E5">before I'll show you again</font><font color="#CCCCCC"> you see the</font>

509
00:22:39,020 --> 00:22:44,900
offset<font color="#E5E5E5"> and the register the table is</font>

510
00:22:42,350 --> 00:22:47,060
<font color="#E5E5E5">changed to EDX and</font><font color="#CCCCCC"> four so this is</font>

511
00:22:44,900 --> 00:22:49,730
<font color="#E5E5E5">something that you're going to see a lot</font>

512
00:22:47,060 --> 00:22:51,409
in the<font color="#CCCCCC"> future slides</font><font color="#E5E5E5"> because I'm</font><font color="#CCCCCC"> going</font>

513
00:22:49,730 --> 00:22:53,900
<font color="#E5E5E5">to show you the code that creates the</font>

514
00:22:51,410 --> 00:22:57,870
hook and<font color="#E5E5E5"> not the hook eaters</font>

515
00:22:53,900 --> 00:23:00,090
so<font color="#E5E5E5"> get functions from</font><font color="#CCCCCC"> vtable</font>

516
00:22:57,870 --> 00:23:01,409
<font color="#E5E5E5">so this is a very complicated part</font>

517
00:23:00,090 --> 00:23:03,540
because you need to consider a<font color="#CCCCCC"> few</font>

518
00:23:01,410 --> 00:23:06,870
things<font color="#CCCCCC"> this is only a small part</font><font color="#E5E5E5"> of this</font>

519
00:23:03,540 --> 00:23:09,629
code<font color="#E5E5E5"> this gets the functions from before</font>

520
00:23:06,870 --> 00:23:11,610
the<font color="#E5E5E5"> function</font><font color="#CCCCCC"> that was assigned to each</font>

521
00:23:09,630 --> 00:23:14,100
<font color="#E5E5E5">go backward take all the functions and</font>

522
00:23:11,610 --> 00:23:15,929
add it to<font color="#CCCCCC"> a list after this part you</font>

523
00:23:14,100 --> 00:23:18,659
also have a<font color="#CCCCCC"> path to take all the</font>

524
00:23:15,930 --> 00:23:19,590
functions<font color="#E5E5E5"> from the function to the</font><font color="#CCCCCC"> end</font>

525
00:23:18,660 --> 00:23:22,220
of the<font color="#E5E5E5"> vita bella'</font>

526
00:23:19,590 --> 00:23:26,550
also added to the append it to the list

527
00:23:22,220 --> 00:23:28,380
<font color="#E5E5E5">you then you have a whole big list which</font>

528
00:23:26,550 --> 00:23:31,830
is very similar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a V table actually</font>

529
00:23:28,380 --> 00:23:33,210
<font color="#CCCCCC">it's a visible it's a nice functions so</font>

530
00:23:31,830 --> 00:23:37,889
this<font color="#E5E5E5"> is exactly what I create here I</font>

531
00:23:33,210 --> 00:23:40,890
create arrays of functions so yeah we

532
00:23:37,890 --> 00:23:43,320
have the V table but we need to create

533
00:23:40,890 --> 00:23:45,030
<font color="#E5E5E5">structures and</font><font color="#CCCCCC"> everything else</font><font color="#E5E5E5"> so we</font>

534
00:23:43,320 --> 00:23:48,000
want to create<font color="#CCCCCC"> the structure this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

535
00:23:45,030 --> 00:23:49,800
command in<font color="#CCCCCC"> Ida 500 create structure the</font>

536
00:23:48,000 --> 00:23:52,950
structure<font color="#CCCCCC"> of food</font><font color="#E5E5E5"> after we create it</font>

537
00:23:49,800 --> 00:23:55,590
looks like the right side in<font color="#E5E5E5"> here what I</font>

538
00:23:52,950 --> 00:23:57,960
wanted to create is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> visible underscore</font>

539
00:23:55,590 --> 00:24:00,149
and then the<font color="#CCCCCC"> address of the</font><font color="#E5E5E5"> V table so</font>

540
00:23:57,960 --> 00:24:03,800
after you run your code you can also go

541
00:24:00,150 --> 00:24:10,320
back<font color="#E5E5E5"> and see where the V table was was</font>

542
00:24:03,800 --> 00:24:12,990
<font color="#E5E5E5">quoting the code okay so we also want to</font>

543
00:24:10,320 --> 00:24:15,990
<font color="#CCCCCC">add to the structure that we created</font><font color="#E5E5E5"> the</font>

544
00:24:12,990 --> 00:24:18,270
<font color="#E5E5E5">members so</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> members are the</font>

545
00:24:15,990 --> 00:24:21,210
functions that we already<font color="#CCCCCC"> added in the</font>

546
00:24:18,270 --> 00:24:23,430
list in the old functions list in<font color="#E5E5E5"> here</font>

547
00:24:21,210 --> 00:24:27,450
we just<font color="#E5E5E5"> go through the functions and add</font>

548
00:24:23,430 --> 00:24:29,850
one<font color="#E5E5E5"> more one member at a</font><font color="#CCCCCC"> time to the</font><font color="#E5E5E5"> to</font>

549
00:24:27,450 --> 00:24:31,920
the Vita<font color="#E5E5E5"> to the V table structure the</font>

550
00:24:29,850 --> 00:24:33,570
functions could<font color="#E5E5E5"> I added</font>

551
00:24:31,920 --> 00:24:37,950
<font color="#E5E5E5">we underscore and then the name of the</font>

552
00:24:33,570 --> 00:24:40,200
<font color="#E5E5E5">function</font><font color="#CCCCCC"> I just wanted to to show you</font>

553
00:24:37,950 --> 00:24:42,720
here that<font color="#CCCCCC"> you have two</font><font color="#E5E5E5"> options</font>

554
00:24:40,200 --> 00:24:45,390
if<font color="#E5E5E5"> you function the functions names that</font>

555
00:24:42,720 --> 00:24:47,400
is taken is<font color="#CCCCCC"> the functions</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> for my</font>

556
00:24:45,390 --> 00:24:50,580
<font color="#CCCCCC">DES so if you change for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> a</font>

557
00:24:47,400 --> 00:24:52,740
<font color="#CCCCCC">function</font><font color="#E5E5E5"> to you research staff you</font>

558
00:24:50,580 --> 00:24:55,770
reversed a few decided this function

559
00:24:52,740 --> 00:24:57,540
does calculate<font color="#E5E5E5"> the size of</font><font color="#CCCCCC"> something and</font>

560
00:24:55,770 --> 00:24:59,820
this<font color="#E5E5E5"> is the name</font><font color="#CCCCCC"> that you chose so we</font>

561
00:24:57,540 --> 00:25:02,670
take the name that<font color="#E5E5E5"> you've written so</font>

562
00:24:59,820 --> 00:25:04,950
it's not<font color="#CCCCCC"> only taking addresses it also</font>

563
00:25:02,670 --> 00:25:07,830
<font color="#E5E5E5">takes the names of the function so</font><font color="#CCCCCC"> it's</font>

564
00:25:04,950 --> 00:25:10,250
really easy as a river<font color="#E5E5E5"> so to look at it</font>

565
00:25:07,830 --> 00:25:12,780
<font color="#E5E5E5">afterwards and see what you have</font>

566
00:25:10,250 --> 00:25:14,790
<font color="#E5E5E5">anything what I mean</font><font color="#CCCCCC"> home this is a</font>

567
00:25:12,780 --> 00:25:16,710
structure that<font color="#E5E5E5"> was created and this is</font>

568
00:25:14,790 --> 00:25:19,050
how the structure look now so here you

569
00:25:16,710 --> 00:25:21,870
have the<font color="#E5E5E5"> V table and the address and</font><font color="#CCCCCC"> the</font>

570
00:25:19,050 --> 00:25:23,639
members underneath<font color="#E5E5E5"> them you have for</font>

571
00:25:21,870 --> 00:25:26,040
<font color="#CCCCCC">example here you have</font><font color="#E5E5E5"> two functions one</font>

572
00:25:23,640 --> 00:25:28,350
<font color="#CCCCCC">is a function with the name</font><font color="#E5E5E5"> that you as</font>

573
00:25:26,040 --> 00:25:29,760
<font color="#E5E5E5">the researcher have changed in either</font>

574
00:25:28,350 --> 00:25:32,760
and the second one is the default

575
00:25:29,760 --> 00:25:35,879
function<font color="#E5E5E5"> name that was not result</font><font color="#CCCCCC"> yet</font>

576
00:25:32,760 --> 00:25:38,190
<font color="#E5E5E5">and then you have a nice structure</font>

577
00:25:35,880 --> 00:25:41,190
but not good enough like we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font>

578
00:25:38,190 --> 00:25:43,890
<font color="#E5E5E5">it fluffier because we also want comment</font>

579
00:25:41,190 --> 00:25:46,740
we need to correlate everything so we

580
00:25:43,890 --> 00:25:48,870
still have some<font color="#CCCCCC"> work to do</font><font color="#E5E5E5"> we can add</font>

581
00:25:46,740 --> 00:25:51,929
comment to the structure but we need to

582
00:25:48,870 --> 00:25:54,928
think<font color="#CCCCCC"> about this time</font><font color="#E5E5E5"> two things if you</font>

583
00:25:51,929 --> 00:25:57,419
have<font color="#CCCCCC"> a function</font><font color="#E5E5E5"> it could be called from</font>

584
00:25:54,929 --> 00:25:59,490
more than one place<font color="#CCCCCC"> so you need to add</font>

585
00:25:57,419 --> 00:26:01,890
all the places<font color="#CCCCCC"> that with this</font><font color="#E5E5E5"> function</font>

586
00:25:59,490 --> 00:26:04,070
was called<font color="#E5E5E5"> so this is also something</font>

587
00:26:01,890 --> 00:26:06,390
<font color="#CCCCCC">that I</font><font color="#E5E5E5"> consider when I wrote everything</font>

588
00:26:04,070 --> 00:26:08,250
<font color="#E5E5E5">the first part is when you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have</font>

589
00:26:06,390 --> 00:26:11,610
<font color="#E5E5E5">this function was not called we just</font>

590
00:26:08,250 --> 00:26:14,220
write a comment<font color="#E5E5E5"> but in case there was</font>

591
00:26:11,610 --> 00:26:17,158
<font color="#E5E5E5">already a call for the function</font><font color="#CCCCCC"> I add</font>

592
00:26:14,220 --> 00:26:20,010
all the old addresses<font color="#E5E5E5"> so you can see all</font>

593
00:26:17,159 --> 00:26:23,940
of them<font color="#E5E5E5"> after this after the</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> I</font>

594
00:26:20,010 --> 00:26:25,890
<font color="#CCCCCC">stopped being to stop it man so this is</font>

595
00:26:23,940 --> 00:26:29,400
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> add new comment and add</font>

596
00:26:25,890 --> 00:26:32,200
functions name to exist in common

597
00:26:29,400 --> 00:26:36,010
so this is the code in either item that

598
00:26:32,200 --> 00:26:38,350
creates the<font color="#E5E5E5"> hook and the second thing</font>

599
00:26:36,010 --> 00:26:40,360
the one you want to<font color="#E5E5E5"> do to add comments</font>

600
00:26:38,350 --> 00:26:42,129
<font color="#E5E5E5">that's empty because we cannot</font><font color="#CCCCCC"> only</font>

601
00:26:40,360 --> 00:26:44,020
write comments<font color="#E5E5E5"> on the structure we also</font>

602
00:26:42,130 --> 00:26:46,690
need to write comments on the assembly

603
00:26:44,020 --> 00:26:49,540
itself<font color="#E5E5E5"> so what I do is just like go to</font>

604
00:26:46,690 --> 00:26:52,840
<font color="#E5E5E5">the to the function assignment and just</font>

605
00:26:49,540 --> 00:26:56,050
correlate it right from which we table

606
00:26:52,840 --> 00:26:58,090
the function was was assigned so then

607
00:26:56,050 --> 00:27:02,620
you have in the structures you<font color="#CCCCCC"> have</font>

608
00:26:58,090 --> 00:27:04,449
<font color="#CCCCCC">lifted the</font><font color="#E5E5E5"> future</font><font color="#CCCCCC"> calls that relevant to</font>

609
00:27:02,620 --> 00:27:06,100
the functions in the<font color="#E5E5E5"> structure</font><font color="#CCCCCC"> and in</font>

610
00:27:04,450 --> 00:27:08,020
the<font color="#CCCCCC"> assembly you have all the details</font>

611
00:27:06,100 --> 00:27:09,580
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the functions in the</font><font color="#CCCCCC"> readable</font>

612
00:27:08,020 --> 00:27:13,629
structure that<font color="#E5E5E5"> are relevant for the</font>

613
00:27:09,580 --> 00:27:16,649
virtual call you're looking at<font color="#E5E5E5"> and one</font>

614
00:27:13,630 --> 00:27:18,910
<font color="#E5E5E5">last thing to add we are</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> we want to</font>

615
00:27:16,650 --> 00:27:21,280
create<font color="#E5E5E5"> an actual offset and false</font>

616
00:27:18,910 --> 00:27:23,950
<font color="#E5E5E5">condition so the first condition is what</font>

617
00:27:21,280 --> 00:27:27,250
I said you want<font color="#E5E5E5"> to stop the code from</font>

618
00:27:23,950 --> 00:27:29,650
<font color="#E5E5E5">form stopping so you have a false</font>

619
00:27:27,250 --> 00:27:32,440
condition<font color="#E5E5E5"> and then the code that I wrote</font>

620
00:27:29,650 --> 00:27:35,140
is being run but the<font color="#E5E5E5"> breakpoint is not</font>

621
00:27:32,440 --> 00:27:37,090
being stopped it not being braked

622
00:27:35,140 --> 00:27:39,610
<font color="#E5E5E5">so it's a breakpoint that doesn't really</font>

623
00:27:37,090 --> 00:27:41,919
break<font color="#E5E5E5"> the second thing is structure</font>

624
00:27:39,610 --> 00:27:45,399
<font color="#E5E5E5">offset you can say that a specific</font>

625
00:27:41,920 --> 00:27:48,090
<font color="#CCCCCC">address register or whatever</font><font color="#E5E5E5"> can is</font>

626
00:27:45,400 --> 00:27:50,410
really<font color="#CCCCCC"> is related to a specific</font>

627
00:27:48,090 --> 00:27:52,419
structure this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a tool that I</font><font color="#E5E5E5"> know</font>

628
00:27:50,410 --> 00:27:53,830
provides but then you can<font color="#E5E5E5"> look at that</font>

629
00:27:52,420 --> 00:27:57,370
someday and see which function was

630
00:27:53,830 --> 00:27:59,290
called<font color="#E5E5E5"> from EDX</font><font color="#CCCCCC"> +44 number will</font><font color="#E5E5E5"> not look</font>

631
00:27:57,370 --> 00:28:01,860
<font color="#CCCCCC">like that</font><font color="#E5E5E5"> it will have the function name</font>

632
00:27:59,290 --> 00:28:04,590
<font color="#E5E5E5">so we also need to add this</font>

633
00:28:01,860 --> 00:28:07,428
ability to<font color="#E5E5E5"> to the code so this is a</font>

634
00:28:04,590 --> 00:28:10,709
simple lines can just do<font color="#E5E5E5"> it</font>

635
00:28:07,429 --> 00:28:13,860
and now the hook is finished<font color="#E5E5E5"> yay we can</font>

636
00:28:10,710 --> 00:28:15,929
continue so this is how the hook<font color="#CCCCCC"> looked</font>

637
00:28:13,860 --> 00:28:17,879
like it's more but you just<font color="#CCCCCC"> wanna I just</font>

638
00:28:15,929 --> 00:28:19,980
<font color="#E5E5E5">want to show you like if giant there is</font>

639
00:28:17,880 --> 00:28:22,410
lots of stuff<font color="#E5E5E5"> inside and I didn't even</font>

640
00:28:19,980 --> 00:28:25,230
show all the stuff and

641
00:28:22,410 --> 00:28:30,420
this is how the hook which is<font color="#E5E5E5"> just the</font>

642
00:28:25,230 --> 00:28:33,030
condition<font color="#E5E5E5"> inside it so this is</font><font color="#CCCCCC"> how the</font>

643
00:28:30,420 --> 00:28:36,030
code looks before<font color="#CCCCCC"> it just like assembly</font>

644
00:28:33,030 --> 00:28:39,660
<font color="#E5E5E5">you have virtual</font><font color="#CCCCCC"> calls little marked in</font>

645
00:28:36,030 --> 00:28:41,840
in yellow and this is how it looked

646
00:28:39,660 --> 00:28:45,570
before<font color="#E5E5E5"> it's really</font><font color="#CCCCCC"> how to look</font><font color="#E5E5E5"> at it</font>

647
00:28:41,840 --> 00:28:47,669
this<font color="#E5E5E5"> is after you want the</font><font color="#CCCCCC"> day tool</font><font color="#E5E5E5"> you</font>

648
00:28:45,570 --> 00:28:51,750
have the<font color="#CCCCCC"> vtable</font><font color="#E5E5E5"> structures that were</font>

649
00:28:47,670 --> 00:28:54,120
created you see there is 2<font color="#E5E5E5"> v2 virtual</font>

650
00:28:51,750 --> 00:28:57,030
tables here with<font color="#CCCCCC"> 2 functions in every</font>

651
00:28:54,120 --> 00:28:59,070
virtual table in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

652
00:28:57,030 --> 00:29:01,560
code from<font color="#CCCCCC"> before we've seen with father</font>

653
00:28:59,070 --> 00:29:05,280
a and father B also you can see there is

654
00:29:01,560 --> 00:29:09,600
comments that every a function has like

655
00:29:05,280 --> 00:29:11,820
<font color="#E5E5E5">was called phone and another's and this</font>

656
00:29:09,600 --> 00:29:14,669
is the disassembly after the tool was

657
00:29:11,820 --> 00:29:22,370
<font color="#CCCCCC">run you see there is comments inside the</font>

658
00:29:14,670 --> 00:29:26,480
assembly<font color="#E5E5E5"> and also did in in way</font><font color="#CCCCCC"> it</font>

659
00:29:22,370 --> 00:29:26,479
oops all these

660
00:29:39,280 --> 00:29:42,280
solving

661
00:29:43,960 --> 00:29:48,090
<font color="#E5E5E5">okay fine</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just wanted the laser</font>

662
00:29:49,930 --> 00:30:02,970
<font color="#E5E5E5">okay so we will we will deal with it</font>

663
00:29:52,570 --> 00:30:02,970
like that<font color="#E5E5E5"> I guess okay</font><font color="#CCCCCC"> k niceties</font><font color="#E5E5E5"> okay</font>

664
00:30:03,470 --> 00:30:12,780
<font color="#E5E5E5">okay fine wait yeah yeah it was so okay</font>

665
00:30:09,690 --> 00:30:15,510
<font color="#CCCCCC">here you have</font><font color="#E5E5E5"> okay here this is what I</font>

666
00:30:12,780 --> 00:30:19,050
<font color="#E5E5E5">said about structural offset in instead</font>

667
00:30:15,510 --> 00:30:21,240
<font color="#CCCCCC">of edx plus</font><font color="#E5E5E5"> four here you have idiqs</font>

668
00:30:19,050 --> 00:30:23,100
plus<font color="#CCCCCC"> V table and the name</font><font color="#E5E5E5"> of the</font>

669
00:30:21,240 --> 00:30:25,320
function that was called<font color="#E5E5E5"> so it's easier</font>

670
00:30:23,100 --> 00:30:28,199
just<font color="#CCCCCC"> see the function</font><font color="#E5E5E5"> don't need to use</font>

671
00:30:25,320 --> 00:30:30,179
<font color="#E5E5E5">this weird offset that says nothing to</font>

672
00:30:28,200 --> 00:30:33,540
us<font color="#CCCCCC"> it</font><font color="#E5E5E5"> just has the name of the function</font>

673
00:30:30,180 --> 00:30:35,880
that we use it also adds the<font color="#E5E5E5"> a comment</font>

674
00:30:33,540 --> 00:30:39,960
form the<font color="#E5E5E5"> V table and then you can see</font>

675
00:30:35,880 --> 00:30:42,060
that<font color="#CCCCCC"> this this address and this address</font>

676
00:30:39,960 --> 00:30:45,660
here which is the virtual call are the

677
00:30:42,060 --> 00:30:49,500
<font color="#E5E5E5">same also</font><font color="#CCCCCC"> in the virtual call you have</font>

678
00:30:45,660 --> 00:30:53,280
the V table structure is visible in<font color="#E5E5E5"> one</font>

679
00:30:49,500 --> 00:30:55,050
<font color="#CCCCCC">two seven</font><font color="#E5E5E5"> whatever address so you have</font>

680
00:30:53,280 --> 00:30:57,810
all the correlations<font color="#E5E5E5"> between the code</font>

681
00:30:55,050 --> 00:31:00,240
assembly the structure everything is now

682
00:30:57,810 --> 00:31:02,460
connected<font color="#CCCCCC"> and now all you have to do is</font>

683
00:31:00,240 --> 00:31:07,470
look<font color="#E5E5E5"> at the code you already has all the</font>

684
00:31:02,460 --> 00:31:08,910
flow and<font color="#CCCCCC"> just start reversing so but</font>

685
00:31:07,470 --> 00:31:11,100
there is<font color="#E5E5E5"> some stuff that I wanted to add</font>

686
00:31:08,910 --> 00:31:11,460
and this is what I want to<font color="#E5E5E5"> do in the</font>

687
00:31:11,100 --> 00:31:14,100
future

688
00:31:11,460 --> 00:31:16,470
<font color="#CCCCCC">the first thing is it's only the V table</font>

689
00:31:14,100 --> 00:31:18,179
and the object is not created

690
00:31:16,470 --> 00:31:21,570
automatically which is<font color="#CCCCCC"> also a big</font><font color="#E5E5E5"> part</font>

691
00:31:18,180 --> 00:31:23,850
of C++<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's possible</font><font color="#CCCCCC"> so the second</font>

692
00:31:21,570 --> 00:31:26,490
<font color="#E5E5E5">thing I'm going to do in the future is</font>

693
00:31:23,850 --> 00:31:28,959
<font color="#CCCCCC">as the object so</font><font color="#E5E5E5"> you also have automatic</font>

694
00:31:26,490 --> 00:31:32,140
creation of the<font color="#CCCCCC"> object</font>

695
00:31:28,960 --> 00:31:34,720
and the second thing is that<font color="#E5E5E5"> if you have</font>

696
00:31:32,140 --> 00:31:37,480
a function with strings<font color="#E5E5E5"> inside with</font>

697
00:31:34,720 --> 00:31:39,940
calls<font color="#E5E5E5"> so maybe you can change the name</font>

698
00:31:37,480 --> 00:31:42,340
<font color="#E5E5E5">so inside the structure of the V table</font>

699
00:31:39,940 --> 00:31:45,100
you will also<font color="#E5E5E5"> have the names the</font>

700
00:31:42,340 --> 00:31:47,590
relevant names instead of sub underscore

701
00:31:45,100 --> 00:31:49,659
and<font color="#E5E5E5"> others you'll have maybe something</font>

702
00:31:47,590 --> 00:31:52,449
related<font color="#E5E5E5"> to the strings inside or</font><font color="#CCCCCC"> to the</font>

703
00:31:49,660 --> 00:31:57,150
calls inside and so there's<font color="#E5E5E5"> two</font><font color="#CCCCCC"> things</font>

704
00:31:52,450 --> 00:31:57,360
that<font color="#E5E5E5"> I thought</font><font color="#CCCCCC"> about Eddie and thank you</font>

705
00:31:57,150 --> 00:32:02,009
[Applause]

706
00:31:57,360 --> 00:32:02,008
[Music]

707
00:32:04,690 --> 00:32:08,679
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right any</font><font color="#CCCCCC"> questions</font>

708
00:32:11,300 --> 00:32:17,100
<font color="#E5E5E5">second row</font><font color="#CCCCCC"> I'm glad that</font><font color="#E5E5E5"> it's second row</font>

709
00:32:14,810 --> 00:32:19,530
have you<font color="#E5E5E5"> thought about combining this</font>

710
00:32:17,100 --> 00:32:22,530
with<font color="#E5E5E5"> symbolic or can colic execution to</font>

711
00:32:19,530 --> 00:32:25,170
improve the<font color="#E5E5E5"> vtable discovery process so</font>

712
00:32:22,530 --> 00:32:27,720
what happens like<font color="#E5E5E5"> I said it uses</font><font color="#CCCCCC"> the</font>

713
00:32:25,170 --> 00:32:29,640
names inside the<font color="#CCCCCC"> IDB</font><font color="#E5E5E5"> so if you have</font>

714
00:32:27,720 --> 00:32:33,500
symbols connected to the<font color="#E5E5E5"> IDB already</font>

715
00:32:29,640 --> 00:32:33,500
takes all the names with the symbols

716
00:32:36,320 --> 00:32:44,840
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> so yes if you want I can</font><font color="#E5E5E5"> explain</font>

717
00:32:41,190 --> 00:32:44,840
<font color="#E5E5E5">you more like how and stuff</font>

718
00:32:46,830 --> 00:32:49,550
more questions

719
00:32:51,210 --> 00:33:03,300
first rule<font color="#CCCCCC"> do you plan on supporting</font><font color="#E5E5E5"> the</font>

720
00:32:58,620 --> 00:33:06,419
other platforms or instruction sets so

721
00:33:03,300 --> 00:33:08,790
now it's 886<font color="#CCCCCC"> in the future I might had</font>

722
00:33:06,420 --> 00:33:15,150
more<font color="#CCCCCC"> staff when I wanna</font><font color="#E5E5E5"> focus and make</font>

723
00:33:08,790 --> 00:33:17,450
this<font color="#CCCCCC"> 886 m SVC</font><font color="#E5E5E5"> tool like the best it can</font>

724
00:33:15,150 --> 00:33:19,740
<font color="#CCCCCC">be in the future after I'll be like</font>

725
00:33:17,450 --> 00:33:21,860
extremely<font color="#E5E5E5"> satisfied</font><font color="#CCCCCC"> with how it looks</font>

726
00:33:19,740 --> 00:33:27,170
like<font color="#CCCCCC"> become when kind of a perfectionist</font>

727
00:33:21,860 --> 00:33:31,050
<font color="#CCCCCC">its thing and so then I might add more</font>

728
00:33:27,170 --> 00:33:35,250
architectures and more compilers<font color="#E5E5E5"> okay</font>

729
00:33:31,050 --> 00:33:40,919
<font color="#E5E5E5">thank you more questions</font><font color="#CCCCCC"> from the first</font>

730
00:33:35,250 --> 00:33:42,840
or second row have you<font color="#E5E5E5"> looked at how</font>

731
00:33:40,920 --> 00:33:44,550
different<font color="#E5E5E5"> the register allocations are</font>

732
00:33:42,840 --> 00:33:46,709
for other compilers and<font color="#E5E5E5"> how easy that</font>

733
00:33:44,550 --> 00:33:49,649
would be to<font color="#E5E5E5"> just like kind of abstract</font>

734
00:33:46,710 --> 00:33:51,420
away<font color="#E5E5E5"> so I know the differences there is</font>

735
00:33:49,650 --> 00:33:54,180
<font color="#CCCCCC">a small difference but</font><font color="#E5E5E5"> you can't use</font>

736
00:33:51,420 --> 00:33:57,270
<font color="#CCCCCC">this like as it is</font><font color="#E5E5E5"> it's just small</font>

737
00:33:54,180 --> 00:33:59,520
changes<font color="#CCCCCC"> not a lot of them but there need</font>

738
00:33:57,270 --> 00:34:02,070
to be some<font color="#CCCCCC"> adjustments I mean between</font>

739
00:33:59,520 --> 00:34:05,490
<font color="#CCCCCC">three</font><font color="#E5E5E5"> plus plus for example and</font><font color="#CCCCCC"> MSB</font>

740
00:34:02,070 --> 00:34:09,290
<font color="#E5E5E5">series like different but you can</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> it</font>

741
00:34:05,490 --> 00:34:09,290
it's<font color="#CCCCCC"> what is it</font><font color="#E5E5E5"> visible visible</font>

742
00:34:11,239 --> 00:34:13,989
more questions

743
00:34:15,668 --> 00:34:22,719
more crescents last<font color="#E5E5E5"> row</font><font color="#CCCCCC"> no okay then</font>

744
00:34:20,349 --> 00:34:24,179
<font color="#E5E5E5">thank you gal nice talk</font>

745
00:34:22,719 --> 00:34:34,098
thanks again

746
00:34:24,179 --> 00:34:34,099
[Applause]

