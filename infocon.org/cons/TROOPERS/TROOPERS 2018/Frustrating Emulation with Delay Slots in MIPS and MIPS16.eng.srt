1
00:00:03,060 --> 00:00:09,100
<font color="#CCCCCC">you could add your own</font><font color="#E5E5E5"> you can have it</font>

2
00:00:05,710 --> 00:00:10,600
just<font color="#CCCCCC"> XOR a bunch</font><font color="#E5E5E5"> of bits</font><font color="#CCCCCC"> to mix up the</font>

3
00:00:09,100 --> 00:00:13,360
disassembler or you could make<font color="#E5E5E5"> it jump</font>

4
00:00:10,600 --> 00:00:16,509
ahead<font color="#E5E5E5"> six words so that</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> comes</font>

5
00:00:13,360 --> 00:00:18,580
after<font color="#CCCCCC"> it doesn't apply</font><font color="#E5E5E5"> and all of this</font>

6
00:00:16,509 --> 00:00:21,820
can<font color="#CCCCCC"> be done simply by writing the</font>

7
00:00:18,580 --> 00:00:25,540
interrupt handler to look at the<font color="#E5E5E5"> return</font>

8
00:00:21,820 --> 00:00:27,640
location<font color="#E5E5E5"> and the stack and similar</font>

9
00:00:25,540 --> 00:00:30,340
things and<font color="#E5E5E5"> then repairing it this is a</font>

10
00:00:27,640 --> 00:00:33,660
<font color="#E5E5E5">pocket</font><font color="#CCCCCC"> GTFO article in which a fellow</font>

11
00:00:30,340 --> 00:00:36,490
wrote a tool that would do this for

12
00:00:33,660 --> 00:00:39,160
desktop<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> so that you can just tell</font>

13
00:00:36,490 --> 00:00:42,280
an application not to crash and whenever

14
00:00:39,160 --> 00:00:43,929
it triggers<font color="#E5E5E5"> a</font><font color="#CCCCCC"> sig fault or a sig buzz</font><font color="#E5E5E5"> it</font>

15
00:00:42,280 --> 00:00:46,810
just sort of jumps a few bytes further

16
00:00:43,930 --> 00:00:49,630
in hopes that it's good<font color="#E5E5E5"> to execute don't</font>

17
00:00:46,810 --> 00:00:51,220
recommend<font color="#E5E5E5"> it but you know</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> it was good</font>

18
00:00:49,630 --> 00:00:54,100
<font color="#E5E5E5">enough for Visual Basic 6 it's good</font>

19
00:00:51,220 --> 00:00:55,930
enough<font color="#CCCCCC"> for me ship it so we</font><font color="#E5E5E5"> took this</font>

20
00:00:54,100 --> 00:00:58,030
same trick and we said<font color="#E5E5E5"> okay well it</font>

21
00:00:55,930 --> 00:01:00,670
<font color="#E5E5E5">doesn't</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> on thumb</font><font color="#CCCCCC"> too but let's try</font>

22
00:00:58,030 --> 00:01:05,019
<font color="#CCCCCC">it</font><font color="#E5E5E5"> out on</font><font color="#CCCCCC"> mips 16 right</font><font color="#E5E5E5"> and so that was</font>

23
00:01:00,670 --> 00:01:09,100
<font color="#E5E5E5">our</font><font color="#CCCCCC"> next target and it doesn't work well</font>

24
00:01:05,019 --> 00:01:12,610
so to read this F<font color="#E5E5E5"> zero zero zero</font><font color="#CCCCCC"> is a</font>

25
00:01:09,100 --> 00:01:15,789
prefix word<font color="#E5E5E5"> that changes nothing in the</font>

26
00:01:12,610 --> 00:01:19,560
instruction<font color="#CCCCCC"> that follows</font><font color="#E5E5E5"> it is like a</font>

27
00:01:15,790 --> 00:01:22,690
prefix word that doesn't<font color="#CCCCCC"> highs no change</font>

28
00:01:19,560 --> 00:01:25,630
<font color="#CCCCCC">sixty five</font><font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> is the no</font><font color="#E5E5E5"> op so what</font>

29
00:01:22,690 --> 00:01:28,179
<font color="#E5E5E5">this</font><font color="#CCCCCC"> means is extend the no op with a</font>

30
00:01:25,630 --> 00:01:31,658
longer immediate value and that value<font color="#E5E5E5"> is</font>

31
00:01:28,180 --> 00:01:35,229
<font color="#E5E5E5">0 but</font><font color="#CCCCCC"> the no</font><font color="#E5E5E5"> op doesn't actually use an</font>

32
00:01:31,659 --> 00:01:37,869
immediate<font color="#CCCCCC"> value and they were smart</font>

33
00:01:35,229 --> 00:01:40,270
<font color="#E5E5E5">enough to look for this so the</font><font color="#CCCCCC"> CPU will</font>

34
00:01:37,869 --> 00:01:41,619
actually<font color="#CCCCCC"> recognize that the prefix is</font>

35
00:01:40,270 --> 00:01:45,070
not compatible with this particular

36
00:01:41,619 --> 00:01:46,450
instruction that they you can't<font color="#E5E5E5"> extend</font>

37
00:01:45,070 --> 00:01:48,520
an immediate when<font color="#E5E5E5"> you don't have an</font>

38
00:01:46,450 --> 00:01:50,890
immediate<font color="#E5E5E5"> and it triggers an illegal in</font>

39
00:01:48,520 --> 00:01:52,509
instruction error<font color="#E5E5E5"> so what we found is</font>

40
00:01:50,890 --> 00:01:54,220
that<font color="#E5E5E5"> you have to be careful you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

41
00:01:52,510 --> 00:01:56,740
only<font color="#E5E5E5"> be extending ones that can take</font>

42
00:01:54,220 --> 00:01:57,580
immediate<font color="#E5E5E5"> sin this case so we went back</font>

43
00:01:56,740 --> 00:01:59,798
<font color="#CCCCCC">to the manual</font>

44
00:01:57,580 --> 00:02:01,240
realized we couldn't<font color="#CCCCCC"> just do this in a</font>

45
00:01:59,799 --> 00:02:03,310
bar one night we<font color="#CCCCCC"> actually had to get</font><font color="#E5E5E5"> out</font>

46
00:02:01,240 --> 00:02:06,009
the<font color="#E5E5E5"> manual and we found it in fact it</font>

47
00:02:03,310 --> 00:02:07,909
was sort of funny we we<font color="#E5E5E5"> found</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> old</font>

48
00:02:06,009 --> 00:02:10,009
copy of it but<font color="#E5E5E5"> we're</font>

49
00:02:07,909 --> 00:02:14,300
you know can we<font color="#E5E5E5"> get</font><font color="#CCCCCC"> a book and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

50
00:02:10,008 --> 00:02:16,548
try if<font color="#E5E5E5"> we look</font><font color="#CCCCCC"> down here</font><font color="#E5E5E5"> to get it be a</font>

51
00:02:14,300 --> 00:02:18,500
fax that's very long manual then we were

52
00:02:16,549 --> 00:02:21,769
<font color="#E5E5E5">practicing our slides in a bar and</font><font color="#CCCCCC"> we</font>

53
00:02:18,500 --> 00:02:23,390
actually<font color="#E5E5E5"> called these numbers the 800</font>

54
00:02:21,769 --> 00:02:26,330
<font color="#E5E5E5">number had been disconnected but the</font>

55
00:02:23,390 --> 00:02:27,349
<font color="#CCCCCC">International number was</font><font color="#E5E5E5"> joy</font><font color="#CCCCCC"> cauldron</font>

56
00:02:26,330 --> 00:02:29,840
<font color="#E5E5E5">joy yeah</font>

57
00:02:27,349 --> 00:02:31,280
joy did<font color="#E5E5E5"> not enjoy being woken up at 4:30</font>

58
00:02:29,840 --> 00:02:35,840
<font color="#CCCCCC">in the morning</font><font color="#E5E5E5"> and we'd like</font><font color="#CCCCCC"> to</font>

59
00:02:31,280 --> 00:02:38,120
<font color="#CCCCCC">apologize to</font><font color="#E5E5E5"> joy for the interruption so</font>

60
00:02:35,840 --> 00:02:41,209
just saying<font color="#E5E5E5"> the these will not work</font><font color="#CCCCCC"> and</font>

61
00:02:38,120 --> 00:02:42,410
<font color="#E5E5E5">neither does the FTP</font><font color="#CCCCCC"> or anything</font><font color="#E5E5E5"> in this</font>

62
00:02:41,209 --> 00:02:46,280
case<font color="#CCCCCC"> any but this might be</font><font color="#E5E5E5"> salvageable</font>

63
00:02:42,410 --> 00:02:48,349
<font color="#E5E5E5">because you know the the prefix word</font>

64
00:02:46,280 --> 00:02:50,239
even though it's adding immediate values

65
00:02:48,349 --> 00:02:54,078
of<font color="#CCCCCC"> zero like even though it has no net</font>

66
00:02:50,239 --> 00:02:57,140
effect<font color="#E5E5E5"> it also changes I mean it's still</font>

67
00:02:54,079 --> 00:02:59,180
there<font color="#CCCCCC"> it's not like it's a no op it does</font>

68
00:02:57,140 --> 00:03:01,390
<font color="#E5E5E5">something it's enough to crash so maybe</font>

69
00:02:59,180 --> 00:03:05,000
we could find like the the<font color="#E5E5E5"> worst time to</font>

70
00:03:01,390 --> 00:03:06,679
<font color="#CCCCCC">actually use this instruction so</font><font color="#E5E5E5"> we go</font>

71
00:03:05,000 --> 00:03:09,260
back<font color="#CCCCCC"> to our computer architecture buff</font>

72
00:03:06,680 --> 00:03:12,019
quiet or<font color="#E5E5E5"> class and and Travis really</font>

73
00:03:09,260 --> 00:03:13,489
<font color="#E5E5E5">enjoyed that and and</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is a simple</font>

74
00:03:12,019 --> 00:03:15,560
example<font color="#E5E5E5"> that we'll show you in</font><font color="#CCCCCC"> a moment</font>

75
00:03:13,489 --> 00:03:17,989
what a real pipeline<font color="#E5E5E5"> looks like but</font><font color="#CCCCCC"> for</font>

76
00:03:15,560 --> 00:03:20,239
the sake of argument<font color="#CCCCCC"> we'll talk about a</font>

77
00:03:17,989 --> 00:03:23,450
simple<font color="#E5E5E5"> five stage</font><font color="#CCCCCC"> mips pipeline right</font>

78
00:03:20,239 --> 00:03:24,889
<font color="#E5E5E5">and as I'm</font><font color="#CCCCCC"> sure most of you remember you</font>

79
00:03:23,450 --> 00:03:26,388
have it step through<font color="#E5E5E5"> and there's</font>

80
00:03:24,889 --> 00:03:28,489
multiple<font color="#CCCCCC"> things go and</font><font color="#E5E5E5"> see the pipeline</font>

81
00:03:26,389 --> 00:03:30,709
at once<font color="#E5E5E5"> and instruction fetches and then</font>

82
00:03:28,489 --> 00:03:33,440
instruction decodes then execute<font color="#CCCCCC"> the</font>

83
00:03:30,709 --> 00:03:37,250
instruction accesses<font color="#CCCCCC"> memory does the</font>

84
00:03:33,440 --> 00:03:40,519
right back<font color="#E5E5E5"> eccentric</font><font color="#CCCCCC"> center and we're</font>

85
00:03:37,250 --> 00:03:42,169
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> take advantage</font><font color="#CCCCCC"> of one</font><font color="#E5E5E5"> of the</font>

86
00:03:40,519 --> 00:03:44,269
architectural properties from this so

87
00:03:42,169 --> 00:03:46,519
the actual stages<font color="#E5E5E5"> are more complicated</font>

88
00:03:44,269 --> 00:03:48,620
<font color="#CCCCCC">but look before</font><font color="#E5E5E5"> you hit it the five</font>

89
00:03:46,519 --> 00:03:51,109
stages here<font color="#CCCCCC"> are instruction fetch</font>

90
00:03:48,620 --> 00:03:53,389
meaning that the CPU grabs the

91
00:03:51,109 --> 00:03:55,609
instruction off of memory<font color="#E5E5E5"> the</font>

92
00:03:53,389 --> 00:03:57,950
instruction decode which is when<font color="#CCCCCC"> it</font>

93
00:03:55,609 --> 00:04:00,639
actually<font color="#CCCCCC"> converts that</font><font color="#E5E5E5"> to its internal</font>

94
00:03:57,950 --> 00:04:03,380
expanded representation that it can<font color="#E5E5E5"> run</font>

95
00:04:00,639 --> 00:04:07,299
execute which is where it performs<font color="#E5E5E5"> the</font>

96
00:04:03,380 --> 00:04:10,760
operation<font color="#E5E5E5"> if it's a register operation</font>

97
00:04:07,299 --> 00:04:12,500
mem which is the memory<font color="#E5E5E5"> operation so if</font>

98
00:04:10,760 --> 00:04:15,290
it's<font color="#E5E5E5"> not an internal operation but it's</font>

99
00:04:12,500 --> 00:04:17,358
actually reading from<font color="#E5E5E5"> or writing to</font>

100
00:04:15,290 --> 00:04:19,019
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> as a data access this is where</font>

101
00:04:17,358 --> 00:04:21,180
the data<font color="#CCCCCC"> access happens</font>

102
00:04:19,019 --> 00:04:22,710
and then right back<font color="#CCCCCC"> which is where the</font>

103
00:04:21,180 --> 00:04:25,349
result is written back into the

104
00:04:22,710 --> 00:04:27,239
registers<font color="#CCCCCC"> and this is when the</font><font color="#E5E5E5"> world</font>

105
00:04:25,349 --> 00:04:30,628
changes this is when the<font color="#E5E5E5"> the state is</font>

106
00:04:27,240 --> 00:04:32,639
recorded<font color="#E5E5E5"> and it's called a pipeline</font>

107
00:04:30,629 --> 00:04:36,810
because multiple stages are happening at

108
00:04:32,639 --> 00:04:39,090
once<font color="#E5E5E5"> in time slot to</font><font color="#CCCCCC"> the first</font>

109
00:04:36,810 --> 00:04:43,650
instruction<font color="#CCCCCC"> is decoding</font><font color="#E5E5E5"> while the second</font>

110
00:04:39,090 --> 00:04:47,549
instruction is<font color="#E5E5E5"> being fetched and in in</font>

111
00:04:43,650 --> 00:04:50,099
<font color="#CCCCCC">timeslot three the second one has moved</font>

112
00:04:47,550 --> 00:04:55,710
each one moves on and then they execute

113
00:04:50,099 --> 00:04:57,690
in<font color="#CCCCCC"> parallel and this allows your code to</font>

114
00:04:55,710 --> 00:04:58,888
<font color="#CCCCCC">be faster because you can do</font><font color="#E5E5E5"> multiple</font>

115
00:04:57,690 --> 00:05:00,330
things at the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> time you can</font><font color="#E5E5E5"> be</font>

116
00:04:58,889 --> 00:05:02,580
fetching one instruction while<font color="#E5E5E5"> you're</font>

117
00:05:00,330 --> 00:05:07,710
<font color="#CCCCCC">executing another and storing the result</font>

118
00:05:02,580 --> 00:05:09,568
of a third<font color="#E5E5E5"> all at once so first to take</font>

119
00:05:07,710 --> 00:05:12,180
a quick look<font color="#E5E5E5"> right the</font><font color="#CCCCCC"> pipelines are</font>

120
00:05:09,569 --> 00:05:14,940
<font color="#E5E5E5">more like</font><font color="#CCCCCC"> fifteen sixteen</font><font color="#E5E5E5"> stages in MIPS</font>

121
00:05:12,180 --> 00:05:17,490
<font color="#E5E5E5">by fourteen four fifteen I guess so so</font>

122
00:05:14,940 --> 00:05:20,610
thanks to<font color="#CCCCCC"> ang for the</font><font color="#E5E5E5"> POC or gtfo</font>

123
00:05:17,490 --> 00:05:22,889
article where he<font color="#E5E5E5"> Illustrated what a true</font>

124
00:05:20,610 --> 00:05:25,110
pipeline<font color="#E5E5E5"> looks like complete with chutes</font>

125
00:05:22,889 --> 00:05:28,800
and ladders for your optional game

126
00:05:25,110 --> 00:05:30,030
playing pleasure<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> pipeline is it</font>

127
00:05:28,800 --> 00:05:34,979
chutes and ladders or snakes and<font color="#CCCCCC"> ladders</font>

128
00:05:30,030 --> 00:05:37,380
<font color="#E5E5E5">here snakes</font><font color="#CCCCCC"> okay yeah in this case</font><font color="#E5E5E5"> like</font>

129
00:05:34,979 --> 00:05:40,349
they actually<font color="#CCCCCC"> go down different paths</font>

130
00:05:37,380 --> 00:05:43,590
<font color="#E5E5E5">right and it varies by their wit's</font><font color="#CCCCCC"> so</font>

131
00:05:40,349 --> 00:05:44,940
the the three ones over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> those are</font>

132
00:05:43,590 --> 00:05:46,349
<font color="#CCCCCC">only used for variable</font><font color="#E5E5E5"> length</font>

133
00:05:44,940 --> 00:05:50,550
instructions is<font color="#E5E5E5"> they're only used for</font>

134
00:05:46,349 --> 00:05:53,039
mid<font color="#CCCCCC"> 16 it's too</font><font color="#E5E5E5"> complicated to</font><font color="#CCCCCC"> think</font>

135
00:05:50,550 --> 00:05:55,020
about all of<font color="#CCCCCC"> the different stages</font><font color="#E5E5E5"> that</font>

136
00:05:53,039 --> 00:05:57,090
<font color="#E5E5E5">are</font><font color="#CCCCCC"> in this diagram unless you're</font>

137
00:05:55,020 --> 00:05:59,729
actually<font color="#E5E5E5"> implementing the chip or you</font>

138
00:05:57,090 --> 00:06:01,619
need a perfectly accurate emulator which

139
00:05:59,729 --> 00:06:03,270
is why we reason about<font color="#CCCCCC"> it with the</font><font color="#E5E5E5"> five</font>

140
00:06:01,620 --> 00:06:06,419
stage<font color="#E5E5E5"> pipeline even though we know that</font>

141
00:06:03,270 --> 00:06:08,490
<font color="#E5E5E5">that's a fiction so from either of these</font>

142
00:06:06,419 --> 00:06:09,900
pipelines<font color="#E5E5E5"> we take away</font><font color="#CCCCCC"> a core</font>

143
00:06:08,490 --> 00:06:11,479
architectural concept and we're not

144
00:06:09,900 --> 00:06:15,179
<font color="#CCCCCC">going to read this</font><font color="#E5E5E5"> to you</font><font color="#CCCCCC"> because we're</font>

145
00:06:11,479 --> 00:06:17,219
humane<font color="#E5E5E5"> but the key thing</font><font color="#CCCCCC"> to take away is</font>

146
00:06:15,180 --> 00:06:19,620
that<font color="#E5E5E5"> there's a branch delay slot in MIPS</font>

147
00:06:17,219 --> 00:06:21,840
which<font color="#E5E5E5"> means architectural</font><font color="#CCCCCC"> II after</font>

148
00:06:19,620 --> 00:06:25,050
something like<font color="#CCCCCC"> a return or branch</font>

149
00:06:21,840 --> 00:06:28,138
instruction<font color="#E5E5E5"> the next instruction word</font>

150
00:06:25,050 --> 00:06:29,490
will execute and<font color="#E5E5E5"> this is just a</font>

151
00:06:28,139 --> 00:06:32,310
<font color="#E5E5E5">consideration it comes out of the</font>

152
00:06:29,490 --> 00:06:35,219
pipelining and<font color="#CCCCCC"> so forth so</font>

153
00:06:32,310 --> 00:06:38,849
after<font color="#E5E5E5"> Brandt's after a return these will</font>

154
00:06:35,219 --> 00:06:42,180
still<font color="#E5E5E5"> run so for example an x86 if you</font>

155
00:06:38,849 --> 00:06:44,849
had like let's say you're<font color="#E5E5E5"> calling a</font>

156
00:06:42,180 --> 00:06:48,330
<font color="#CCCCCC">function with a parameter of</font><font color="#E5E5E5"> zero in x86</font>

157
00:06:44,849 --> 00:06:49,560
<font color="#CCCCCC">you move the zero value into the</font>

158
00:06:48,330 --> 00:06:52,469
<font color="#E5E5E5">location that's used by</font><font color="#CCCCCC"> the first</font>

159
00:06:49,560 --> 00:06:56,280
<font color="#CCCCCC">parameter and then you do the function</font>

160
00:06:52,469 --> 00:07:00,629
call in MIPS<font color="#CCCCCC"> you do the call and then</font>

161
00:06:56,280 --> 00:07:02,938
<font color="#E5E5E5">you zero the register and you do it out</font>

162
00:07:00,629 --> 00:07:06,919
of<font color="#CCCCCC"> order</font><font color="#E5E5E5"> because the register will be</font>

163
00:07:02,939 --> 00:07:11,460
zeroed by the time<font color="#E5E5E5"> the next function</font><font color="#CCCCCC"> be</font>

164
00:07:06,919 --> 00:07:14,039
has<font color="#E5E5E5"> been called and this little extra</font>

165
00:07:11,460 --> 00:07:17,099
slot allows for a<font color="#E5E5E5"> performance benefit of</font>

166
00:07:14,039 --> 00:07:20,188
<font color="#CCCCCC">10% or so</font><font color="#E5E5E5"> if you do not have out</font><font color="#CCCCCC"> of</font>

167
00:07:17,099 --> 00:07:23,759
order<font color="#CCCCCC"> execution</font><font color="#E5E5E5"> so it keeps your CPUs</font>

168
00:07:20,189 --> 00:07:25,409
simpler<font color="#E5E5E5"> and so let's take a look at how</font>

169
00:07:23,759 --> 00:07:27,870
this<font color="#CCCCCC"> is used</font><font color="#E5E5E5"> right so in a simple</font>

170
00:07:25,409 --> 00:07:30,090
compiler that<font color="#CCCCCC"> is not taking advantage of</font>

171
00:07:27,870 --> 00:07:32,159
this increase or if it can't for this

172
00:07:30,090 --> 00:07:34,138
function<font color="#CCCCCC"> for whatever reason it'll put a</font>

173
00:07:32,159 --> 00:07:37,830
no op in<font color="#E5E5E5"> the slot right so you'll see a</font>

174
00:07:34,139 --> 00:07:39,449
return<font color="#CCCCCC"> ei to zero</font><font color="#E5E5E5"> and then right after</font>

175
00:07:37,830 --> 00:07:42,029
that<font color="#E5E5E5"> you'll get that same no op we saw</font>

176
00:07:39,449 --> 00:07:45,300
again nothing happens<font color="#E5E5E5"> perfectly harmless</font>

177
00:07:42,029 --> 00:07:48,419
but say you have the<font color="#E5E5E5"> return value</font><font color="#CCCCCC"> v-0</font>

178
00:07:45,300 --> 00:07:50,599
<font color="#CCCCCC">and you want to add one to it right</font><font color="#E5E5E5"> so</font>

179
00:07:48,419 --> 00:07:54,180
this<font color="#CCCCCC"> is the instruction for a</font><font color="#E5E5E5"> zero one</font>

180
00:07:50,599 --> 00:07:55,830
which<font color="#CCCCCC"> just adds one to</font><font color="#E5E5E5"> that register</font><font color="#CCCCCC"> and</font>

181
00:07:54,180 --> 00:07:57,930
<font color="#CCCCCC">so what will happen is by the time</font>

182
00:07:55,830 --> 00:07:59,699
<font color="#E5E5E5">wherever this</font><font color="#CCCCCC"> as Travis was saying by</font>

183
00:07:57,930 --> 00:08:02,430
<font color="#E5E5E5">the time</font><font color="#CCCCCC"> that wherever</font><font color="#E5E5E5"> this is returning</font>

184
00:07:59,699 --> 00:08:04,259
to gets execution<font color="#E5E5E5"> and starts to</font><font color="#CCCCCC"> write</font>

185
00:08:02,430 --> 00:08:07,050
run<font color="#CCCCCC"> it</font><font color="#E5E5E5"> stages that actually care about</font>

186
00:08:04,259 --> 00:08:09,389
<font color="#E5E5E5">looking in this register the execute</font>

187
00:08:07,050 --> 00:08:13,650
stage<font color="#E5E5E5"> and in this case it will have</font>

188
00:08:09,389 --> 00:08:15,930
<font color="#E5E5E5">already modified it and added one so we</font>

189
00:08:13,650 --> 00:08:17,758
started looking<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> what could we put</font>

190
00:08:15,930 --> 00:08:20,279
here right we saw earlier that<font color="#E5E5E5"> if we</font>

191
00:08:17,759 --> 00:08:23,039
just extended and no op in general it

192
00:08:20,279 --> 00:08:26,159
didn't work<font color="#CCCCCC"> I realized that the</font><font color="#E5E5E5"> hardware</font>

193
00:08:23,039 --> 00:08:27,688
caught that was not legal but and<font color="#E5E5E5"> that's</font>

194
00:08:26,159 --> 00:08:30,089
what you'll<font color="#E5E5E5"> see you're seeing here</font><font color="#CCCCCC"> right</font>

195
00:08:27,689 --> 00:08:31,919
we put<font color="#E5E5E5"> a prefix word on a no op we got a</font>

196
00:08:30,089 --> 00:08:34,198
boss there<font color="#E5E5E5"> as we said we tried all</font>

197
00:08:31,919 --> 00:08:36,000
different<font color="#E5E5E5"> types of variants of this also</font>

198
00:08:34,198 --> 00:08:38,789
<font color="#E5E5E5">got boss errors because it was illegal</font>

199
00:08:36,000 --> 00:08:41,140
<font color="#E5E5E5">what if we have a prefix word in the</font>

200
00:08:38,789 --> 00:08:46,600
delay slot<font color="#E5E5E5"> what if we have</font>

201
00:08:41,140 --> 00:08:49,660
<font color="#CCCCCC">a to instruction</font><font color="#E5E5E5"> long instruction in the</font>

202
00:08:46,600 --> 00:08:53,440
delay slot<font color="#E5E5E5"> which</font><font color="#CCCCCC"> only has room</font><font color="#E5E5E5"> for one</font>

203
00:08:49,660 --> 00:08:55,240
instruction word the two ways to guess

204
00:08:53,440 --> 00:08:57,340
that this might behave you might assume

205
00:08:55,240 --> 00:09:00,670
that<font color="#E5E5E5"> either the entire</font><font color="#CCCCCC"> instruction is</font>

206
00:08:57,340 --> 00:09:03,490
executed<font color="#CCCCCC"> or you might assume</font><font color="#E5E5E5"> that the</font>

207
00:09:00,670 --> 00:09:06,370
<font color="#E5E5E5">single instruction then the</font><font color="#CCCCCC"> prefix word</font>

208
00:09:03,490 --> 00:09:10,000
then applies to whatever instruction is

209
00:09:06,370 --> 00:09:15,220
next in the<font color="#CCCCCC"> caller function</font><font color="#E5E5E5"> but neither</font>

210
00:09:10,000 --> 00:09:18,250
is<font color="#E5E5E5"> what happens so delay slots are a</font>

211
00:09:15,220 --> 00:09:21,250
hardware<font color="#E5E5E5"> efficiency hack</font><font color="#CCCCCC"> they are a</font>

212
00:09:18,250 --> 00:09:24,010
cheap way for<font color="#E5E5E5"> the CPU designer to get a</font>

213
00:09:21,250 --> 00:09:26,620
small performance<font color="#E5E5E5"> benefit by pushing the</font>

214
00:09:24,010 --> 00:09:28,990
complexity<font color="#E5E5E5"> out of the CPU and into the</font>

215
00:09:26,620 --> 00:09:30,910
assembler<font color="#E5E5E5"> so the assembler has to know</font>

216
00:09:28,990 --> 00:09:33,700
to reorder the instructions<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

217
00:09:30,910 --> 00:09:36,400
<font color="#E5E5E5">CPU doesn't need to be able to reorder</font>

218
00:09:33,700 --> 00:09:39,610
instructions<font color="#E5E5E5"> this saves you space in</font>

219
00:09:36,400 --> 00:09:42,090
silicon<font color="#E5E5E5"> but it also means that pieces of</font>

220
00:09:39,610 --> 00:09:44,860
the CPUs internal design and

221
00:09:42,090 --> 00:09:49,150
architecture are<font color="#E5E5E5"> exposed to the machine</font>

222
00:09:44,860 --> 00:09:51,670
<font color="#CCCCCC">language program so because they're an</font>

223
00:09:49,150 --> 00:09:56,350
efficiency hack<font color="#E5E5E5"> only one word is</font>

224
00:09:51,670 --> 00:09:59,170
<font color="#E5E5E5">actually fetched by the hardware sort of</font>

225
00:09:56,350 --> 00:10:02,200
what actually<font color="#E5E5E5"> happens is that more than</font>

226
00:09:59,170 --> 00:10:04,689
<font color="#CCCCCC">just the next instruction are loaded the</font>

227
00:10:02,200 --> 00:10:07,390
next<font color="#E5E5E5"> several are loaded in order to fill</font>

228
00:10:04,690 --> 00:10:09,790
the<font color="#E5E5E5"> pipeline but they're blasted away in</font>

229
00:10:07,390 --> 00:10:13,150
what's called a pipeline flush<font color="#E5E5E5"> where</font>

230
00:10:09,790 --> 00:10:14,650
<font color="#E5E5E5">everything that is early in the pipeline</font>

231
00:10:13,150 --> 00:10:18,850
<font color="#E5E5E5">everything except for the very next</font>

232
00:10:14,650 --> 00:10:21,130
pipeline stage<font color="#E5E5E5"> is wiped away and the</font>

233
00:10:18,850 --> 00:10:23,980
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> for that is that</font><font color="#E5E5E5"> the delay slot</font>

234
00:10:21,130 --> 00:10:26,980
has already finished<font color="#E5E5E5"> executing by the</font>

235
00:10:23,980 --> 00:10:30,100
time the branch occurs it just hasn't

236
00:10:26,980 --> 00:10:32,260
been able<font color="#E5E5E5"> to write its results back</font><font color="#CCCCCC"> so</font>

237
00:10:30,100 --> 00:10:35,050
it's<font color="#E5E5E5"> not that one extra instruction is</font>

238
00:10:32,260 --> 00:10:37,150
being executed<font color="#CCCCCC"> it's that one instruction</font>

239
00:10:35,050 --> 00:10:40,599
is allowed to<font color="#E5E5E5"> live while the rest are</font>

240
00:10:37,150 --> 00:10:45,730
<font color="#E5E5E5">being flushed away and murdered so in</font>

241
00:10:40,600 --> 00:10:48,660
the case of this switch the next

242
00:10:45,730 --> 00:10:51,449
instruction is only<font color="#E5E5E5"> executed if</font>

243
00:10:48,660 --> 00:10:53,550
is<font color="#E5E5E5"> already finished which means if</font><font color="#CCCCCC"> it's</font>

244
00:10:51,449 --> 00:10:56,599
results are ready to be<font color="#E5E5E5"> written back and</font>

245
00:10:53,550 --> 00:10:58,709
these prefix words<font color="#E5E5E5"> are a bit special</font>

246
00:10:56,600 --> 00:11:00,750
<font color="#CCCCCC">they don't actually do anything</font>

247
00:10:58,709 --> 00:11:03,089
<font color="#CCCCCC">themselves</font><font color="#E5E5E5"> they hang</font><font color="#CCCCCC"> around in</font><font color="#E5E5E5"> the</font>

248
00:11:00,750 --> 00:11:06,060
instruction<font color="#E5E5E5"> decoder to rewrite the next</font>

249
00:11:03,089 --> 00:11:08,970
instruction in line and when they do

250
00:11:06,060 --> 00:11:10,979
this they<font color="#CCCCCC"> let her know up</font><font color="#E5E5E5"> bubble as</font><font color="#CCCCCC"> it's</font>

251
00:11:08,970 --> 00:11:14,850
called<font color="#E5E5E5"> continue to move on in the</font>

252
00:11:10,980 --> 00:11:16,470
pipeline in<font color="#E5E5E5"> their place yep and so let's</font>

253
00:11:14,850 --> 00:11:18,420
<font color="#E5E5E5">look at some</font><font color="#CCCCCC"> of the test cases right so</font>

254
00:11:16,470 --> 00:11:22,050
we started coding<font color="#E5E5E5"> this</font><font color="#CCCCCC"> up we'd try these</font>

255
00:11:18,420 --> 00:11:24,628
<font color="#E5E5E5">both on real</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> also in an</font>

256
00:11:22,050 --> 00:11:26,670
emulator<font color="#CCCCCC"> in this case Q</font><font color="#E5E5E5"> Mew</font><font color="#CCCCCC"> we tried a</font>

257
00:11:24,629 --> 00:11:30,060
few<font color="#E5E5E5"> others they have similar</font><font color="#CCCCCC"> results but</font>

258
00:11:26,670 --> 00:11:32,040
<font color="#E5E5E5">are more of a pain to</font><font color="#CCCCCC"> work with so first</font>

259
00:11:30,060 --> 00:11:33,420
of all right let's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> do the return</font>

260
00:11:32,040 --> 00:11:34,949
and<font color="#E5E5E5"> Noah right this was the one we</font>

261
00:11:33,420 --> 00:11:37,469
showed you<font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> this is the control</font>

262
00:11:34,949 --> 00:11:39,060
case nothing<font color="#CCCCCC"> of interest right</font><font color="#E5E5E5"> we're</font>

263
00:11:37,470 --> 00:11:40,740
<font color="#E5E5E5">going to return and by the way the</font>

264
00:11:39,060 --> 00:11:42,540
instruction we're running<font color="#CCCCCC"> before this is</font>

265
00:11:40,740 --> 00:11:45,329
to populate<font color="#CCCCCC"> the return register with a</font>

266
00:11:42,540 --> 00:11:47,069
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> right just for a</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> thing so we</font>

267
00:11:45,329 --> 00:11:50,250
move to<font color="#E5E5E5"> zero to V zero which is the</font>

268
00:11:47,069 --> 00:11:53,370
return register in MIPS<font color="#E5E5E5"> we then ran and</font>

269
00:11:50,250 --> 00:11:55,319
we turn<font color="#E5E5E5"> followed by a no op thankfully</font>

270
00:11:53,370 --> 00:11:57,029
<font color="#E5E5E5">it returns</font><font color="#CCCCCC"> zero we're all</font><font color="#E5E5E5"> happy</font>

271
00:11:55,319 --> 00:11:58,860
<font color="#E5E5E5">all right and we expect these two to be</font>

272
00:11:57,029 --> 00:12:01,769
<font color="#E5E5E5">the same because you know this is like</font>

273
00:11:58,860 --> 00:12:03,810
our control case if if the emulator

274
00:12:01,769 --> 00:12:09,240
messed up this instruction nothing would

275
00:12:03,810 --> 00:12:12,109
<font color="#CCCCCC">work so then next we took an input the</font>

276
00:12:09,240 --> 00:12:14,310
<font color="#CCCCCC">extend of a no op</font><font color="#E5E5E5"> in the delay slot</font>

277
00:12:12,110 --> 00:12:16,410
interestingly this<font color="#E5E5E5"> is where we start to</font>

278
00:12:14,310 --> 00:12:19,018
<font color="#CCCCCC">see a difference right</font><font color="#E5E5E5"> the hardware is</font>

279
00:12:16,410 --> 00:12:20,610
like nothing<font color="#E5E5E5"> happens</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> this is</font>

280
00:12:19,019 --> 00:12:23,370
what Travis<font color="#E5E5E5"> was just alluding to where</font>

281
00:12:20,610 --> 00:12:25,709
it becomes basically<font color="#CCCCCC"> a</font><font color="#E5E5E5"> no op bubble in</font>

282
00:12:23,370 --> 00:12:27,750
the pipeline<font color="#E5E5E5"> because the second in the</font>

283
00:12:25,709 --> 00:12:29,849
third<font color="#E5E5E5"> word third instruction word in</font>

284
00:12:27,750 --> 00:12:33,029
this<font color="#E5E5E5"> case never is really processed by</font>

285
00:12:29,850 --> 00:12:34,380
by the<font color="#E5E5E5"> hardware but</font><font color="#CCCCCC"> qumu was like yeah</font>

286
00:12:33,029 --> 00:12:36,660
I'm<font color="#E5E5E5"> gonna try to run this but it</font>

287
00:12:34,380 --> 00:12:38,279
emulated it<font color="#E5E5E5"> correctly it crashed right</font>

288
00:12:36,660 --> 00:12:40,019
<font color="#E5E5E5">it</font><font color="#CCCCCC"> threw a bus there it's like</font><font color="#E5E5E5"> you I</font>

289
00:12:38,279 --> 00:12:42,389
mean<font color="#E5E5E5"> I did that which I</font><font color="#CCCCCC"> send it to</font><font color="#E5E5E5"> done</font>

290
00:12:40,019 --> 00:12:44,230
but but you can't do<font color="#E5E5E5"> that so I'm going</font>

291
00:12:42,389 --> 00:12:46,570
<font color="#CCCCCC">to crash</font>

292
00:12:44,230 --> 00:12:48,910
and<font color="#E5E5E5"> then we that</font><font color="#CCCCCC"> you saw</font><font color="#E5E5E5"> this case</font>

293
00:12:46,570 --> 00:12:51,160
earlier we talked<font color="#E5E5E5"> about this not after a</font>

294
00:12:48,910 --> 00:12:52,270
<font color="#E5E5E5">return</font><font color="#CCCCCC"> both will filibuster right so</font>

295
00:12:51,160 --> 00:12:56,819
<font color="#E5E5E5">that's what if we have in there to</font>

296
00:12:52,270 --> 00:12:58,900
explain the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> behavior of the above</font>

297
00:12:56,820 --> 00:13:00,790
<font color="#CCCCCC">but</font><font color="#E5E5E5"> then we were like</font><font color="#CCCCCC"> well you don't</font>

298
00:12:58,900 --> 00:13:02,380
want if you're doing anti emulation you

299
00:13:00,790 --> 00:13:04,689
don't want to just crash a system in an

300
00:13:02,380 --> 00:13:07,450
<font color="#CCCCCC">emulator right that sticks out a lot</font><font color="#E5E5E5"> you</font>

301
00:13:04,690 --> 00:13:08,980
start<font color="#E5E5E5"> somebody's like really so how can</font>

302
00:13:07,450 --> 00:13:12,580
we get<font color="#E5E5E5"> it so we just have a simple</font>

303
00:13:08,980 --> 00:13:15,010
<font color="#E5E5E5">conditional right so by putting an ad</font>

304
00:13:12,580 --> 00:13:16,570
word<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the extension</font><font color="#E5E5E5"> so the</font>

305
00:13:15,010 --> 00:13:19,390
<font color="#E5E5E5">extension does nothing to the ad word</font>

306
00:13:16,570 --> 00:13:22,390
<font color="#E5E5E5">right we run that for a o1 that you saw</font>

307
00:13:19,390 --> 00:13:26,230
as we explained<font color="#E5E5E5"> earlier it reliably adds</font>

308
00:13:22,390 --> 00:13:29,830
a<font color="#CCCCCC"> 1 now again to go back to the</font><font color="#E5E5E5"> pipeline</font>

309
00:13:26,230 --> 00:13:31,360
right<font color="#E5E5E5"> unreal</font><font color="#CCCCCC"> hardware this would be the</font>

310
00:13:29,830 --> 00:13:33,700
<font color="#CCCCCC">only thing executing only that one</font>

311
00:13:31,360 --> 00:13:36,850
instruction word it'll be flushed out of

312
00:13:33,700 --> 00:13:39,340
<font color="#E5E5E5">the pipeline</font><font color="#CCCCCC"> and in apps like a no op</font>

313
00:13:36,850 --> 00:13:41,200
but<font color="#E5E5E5"> in Kaimuki mossad it's like well I'm</font>

314
00:13:39,340 --> 00:13:43,960
<font color="#CCCCCC">just extending something better grab the</font>

315
00:13:41,200 --> 00:13:47,020
next<font color="#E5E5E5"> one</font><font color="#CCCCCC"> and do that</font><font color="#E5E5E5"> too and it did very</font>

316
00:13:43,960 --> 00:13:49,210
<font color="#E5E5E5">reliably it was so kind to</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> one to</font>

317
00:13:47,020 --> 00:13:51,430
the return value so this<font color="#E5E5E5"> is now a six</font>

318
00:13:49,210 --> 00:13:53,560
byte long function that reliably

319
00:13:51,430 --> 00:13:58,359
distinguishes between a software

320
00:13:53,560 --> 00:14:01,239
emulation and real<font color="#E5E5E5"> hardware so to look</font>

321
00:13:58,360 --> 00:14:02,620
<font color="#E5E5E5">at it right</font><font color="#CCCCCC"> this is just explaining that</font>

322
00:14:01,240 --> 00:14:04,420
<font color="#CCCCCC">and</font><font color="#E5E5E5"> putting the function I guess in</font>

323
00:14:02,620 --> 00:14:10,150
another format<font color="#E5E5E5"> this is the early one the</font>

324
00:14:04,420 --> 00:14:12,400
one<font color="#CCCCCC"> that crashes qmo yep yep so part of</font>

325
00:14:10,150 --> 00:14:16,449
the<font color="#E5E5E5"> reason why QM crashes why it</font>

326
00:14:12,400 --> 00:14:18,670
interprets the entire long long delay

327
00:14:16,450 --> 00:14:22,000
<font color="#E5E5E5">sided instruction is that</font><font color="#CCCCCC"> qmo does not</font>

328
00:14:18,670 --> 00:14:24,459
actually have<font color="#CCCCCC"> a pipeline</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> MIPS</font><font color="#E5E5E5"> when</font>

329
00:14:22,000 --> 00:14:27,220
it's emulating MIPS code<font color="#CCCCCC"> it assumes that</font>

330
00:14:24,460 --> 00:14:30,940
<font color="#CCCCCC">the code will run linearly in the way</font>

331
00:14:27,220 --> 00:14:32,890
that the<font color="#E5E5E5"> the compiler intended and it</font>

332
00:14:30,940 --> 00:14:34,990
leaves out the<font color="#E5E5E5"> performance hacks that</font>

333
00:14:32,890 --> 00:14:38,230
only add<font color="#CCCCCC"> performance on real Hardware</font>

334
00:14:34,990 --> 00:14:39,760
because if it were to accurately emulate

335
00:14:38,230 --> 00:14:44,080
them that would make it a lot<font color="#CCCCCC"> more</font>

336
00:14:39,760 --> 00:14:46,420
<font color="#CCCCCC">expensive</font><font color="#E5E5E5"> in software so it's sort of</font>

337
00:14:44,080 --> 00:14:48,790
disassembling each instruction<font color="#E5E5E5"> and then</font>

338
00:14:46,420 --> 00:14:50,979
doing<font color="#E5E5E5"> whatever the disassembly says so</font>

339
00:14:48,790 --> 00:14:52,839
it disassembles the<font color="#E5E5E5"> return it's like</font>

340
00:14:50,980 --> 00:14:54,310
okay<font color="#E5E5E5"> I know I'm returning</font><font color="#CCCCCC"> I need to</font>

341
00:14:52,840 --> 00:14:55,490
delay slot so I'm going to<font color="#E5E5E5"> run one</font><font color="#CCCCCC"> more</font>

342
00:14:54,310 --> 00:14:58,369
instruction<font color="#E5E5E5"> and then I'm going to</font>

343
00:14:55,490 --> 00:15:00,620
turn and then it disassembles<font color="#E5E5E5"> the next</font>

344
00:14:58,370 --> 00:15:02,600
instruction<font color="#E5E5E5"> where it gets the full</font>

345
00:15:00,620 --> 00:15:08,810
illegal instruction and triggers<font color="#E5E5E5"> the bus</font>

346
00:15:02,600 --> 00:15:11,839
error if we<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so if we change this to</font>

347
00:15:08,810 --> 00:15:14,719
<font color="#CCCCCC">the non crashing form</font><font color="#E5E5E5"> the one that adds</font>

348
00:15:11,839 --> 00:15:18,709
one<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the return value on</font><font color="#CCCCCC"> Qumu but does</font>

349
00:15:14,720 --> 00:15:21,560
not on software in this case the

350
00:15:18,709 --> 00:15:23,479
disassembly<font color="#E5E5E5"> is now a legal instruction</font>

351
00:15:21,560 --> 00:15:25,430
<font color="#E5E5E5">something that it can safely run and</font>

352
00:15:23,480 --> 00:15:28,220
that's<font color="#CCCCCC"> why it's allowed through in</font><font color="#E5E5E5"> qmo</font>

353
00:15:25,430 --> 00:15:32,380
on<font color="#CCCCCC"> hardware it is not allowed through</font>

354
00:15:28,220 --> 00:15:35,170
because it gets broken in half<font color="#E5E5E5"> the first</font>

355
00:15:32,380 --> 00:15:38,240
<font color="#E5E5E5">the extension word the F zero zero zero</font>

356
00:15:35,170 --> 00:15:40,579
<font color="#E5E5E5">hangs around</font><font color="#CCCCCC"> it stays in the instruction</font>

357
00:15:38,240 --> 00:15:42,020
<font color="#E5E5E5">decoder and that's a no op bubble go</font>

358
00:15:40,580 --> 00:15:46,760
forward and<font color="#E5E5E5"> the no op bubble does</font>

359
00:15:42,020 --> 00:15:48,170
nothing as the second instruction<font color="#CCCCCC"> gets</font>

360
00:15:46,760 --> 00:15:50,600
changed<font color="#E5E5E5"> but the second instruction is</font>

361
00:15:48,170 --> 00:15:52,579
too far<font color="#CCCCCC"> back in the pipeline so there is</font>

362
00:15:50,600 --> 00:15:54,410
a<font color="#E5E5E5"> delay slot instruction that's allowed</font>

363
00:15:52,580 --> 00:15:57,560
<font color="#CCCCCC">to</font><font color="#E5E5E5"> finish it's just that that delay slot</font>

364
00:15:54,410 --> 00:15:58,910
instruction is a no op bubble<font color="#E5E5E5"> instead of</font>

365
00:15:57,560 --> 00:16:01,040
a real instruction because the real

366
00:15:58,910 --> 00:16:04,130
instruction is one pipeline<font color="#E5E5E5"> stage too</font>

367
00:16:01,040 --> 00:16:05,810
late so if we take this and<font color="#E5E5E5"> we put it</font>

368
00:16:04,130 --> 00:16:08,060
<font color="#E5E5E5">into shellcode right we can write a</font>

369
00:16:05,810 --> 00:16:10,579
program<font color="#CCCCCC"> that basically is</font><font color="#E5E5E5"> going to in</font>

370
00:16:08,060 --> 00:16:13,339
main<font color="#E5E5E5"> very simple case say I'm running</font>

371
00:16:10,579 --> 00:16:14,689
<font color="#CCCCCC">and then check the return value from</font>

372
00:16:13,339 --> 00:16:17,029
<font color="#E5E5E5">this function</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> gonna call</font>

373
00:16:14,690 --> 00:16:19,670
<font color="#E5E5E5">right and then you see this exact</font>

374
00:16:17,029 --> 00:16:22,430
shellcode<font color="#E5E5E5"> 16 it's in the in the zip file</font>

375
00:16:19,670 --> 00:16:23,689
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> the PDF</font><font color="#E5E5E5"> if you want it but</font><font color="#CCCCCC"> very</font>

376
00:16:22,430 --> 00:16:27,199
simple it's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> gonna jump to that</font>

377
00:16:23,690 --> 00:16:29,360
shellcode<font color="#E5E5E5"> run it through and</font><font color="#CCCCCC"> depending</font>

378
00:16:27,200 --> 00:16:30,500
on<font color="#CCCCCC"> if</font><font color="#E5E5E5"> a 0 or 1 comes back it's going to</font>

379
00:16:29,360 --> 00:16:32,810
print out<font color="#E5E5E5"> a different thing now if</font>

380
00:16:30,500 --> 00:16:34,700
you're<font color="#E5E5E5"> actually making an anti emulation</font>

381
00:16:32,810 --> 00:16:37,430
technique I suggest maybe leaving<font color="#E5E5E5"> out</font>

382
00:16:34,700 --> 00:16:38,930
<font color="#CCCCCC">the strings but I think you get the</font>

383
00:16:37,430 --> 00:16:41,029
point this<font color="#CCCCCC"> may be fine for a caption</font>

384
00:16:38,930 --> 00:16:43,910
flag though yeah I mean contrived

385
00:16:41,029 --> 00:16:45,800
examples have their purpose<font color="#E5E5E5"> so in the</font>

386
00:16:43,910 --> 00:16:47,630
real world<font color="#E5E5E5"> what you would do is you</font>

387
00:16:45,800 --> 00:16:50,180
would run<font color="#E5E5E5"> through say a large program</font>

388
00:16:47,630 --> 00:16:53,750
and you would take<font color="#CCCCCC"> some</font><font color="#E5E5E5"> fraction</font><font color="#CCCCCC"> of the</font>

389
00:16:50,180 --> 00:16:56,649
delay slots<font color="#E5E5E5"> and you would add annoying</font>

390
00:16:53,750 --> 00:16:59,089
instructions there<font color="#E5E5E5"> right so</font><font color="#CCCCCC"> just like</font>

391
00:16:56,649 --> 00:17:02,000
<font color="#E5E5E5">20% of your functions accidentally</font>

392
00:16:59,089 --> 00:17:04,699
<font color="#E5E5E5">return</font><font color="#CCCCCC"> one more than they ought to or</font>

393
00:17:02,000 --> 00:17:06,169
one less or what<font color="#E5E5E5"> we multiply or whatever</font>

394
00:17:04,699 --> 00:17:07,609
<font color="#E5E5E5">right where your password</font>

395
00:17:06,169 --> 00:17:08,899
<font color="#CCCCCC">Chang</font><font color="#E5E5E5"> algorithm is different in</font>

396
00:17:07,608 --> 00:17:11,089
emulation than it is in your real

397
00:17:08,898 --> 00:17:14,599
<font color="#CCCCCC">hardware you domain</font><font color="#E5E5E5"> generation I mean</font>

398
00:17:11,089 --> 00:17:16,789
<font color="#CCCCCC">sign right right</font>

399
00:17:14,599 --> 00:17:18,738
as your listing<font color="#E5E5E5"> command and control</font>

400
00:17:16,789 --> 00:17:21,199
domains<font color="#CCCCCC"> you know that they can all be</font>

401
00:17:18,739 --> 00:17:22,999
different if you would you wouldn't do

402
00:17:21,199 --> 00:17:25,669
that<font color="#E5E5E5"> slowly if you're doing remote</font>

403
00:17:22,999 --> 00:17:28,399
device management<font color="#E5E5E5"> right</font><font color="#CCCCCC"> enterprise and</font>

404
00:17:25,669 --> 00:17:31,429
the great thing is<font color="#E5E5E5"> it actually</font><font color="#CCCCCC"> works in</font>

405
00:17:28,398 --> 00:17:34,549
<font color="#E5E5E5">this case thank goodness right so this</font>

406
00:17:31,429 --> 00:17:37,279
<font color="#E5E5E5">is a picture</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the rig that we got last</font>

407
00:17:34,549 --> 00:17:38,899
<font color="#E5E5E5">minute before we were finalizing this so</font>

408
00:17:37,279 --> 00:17:42,679
<font color="#CCCCCC">Torsten haas</font><font color="#E5E5E5"> is a good friend of mine</font>

409
00:17:38,899 --> 00:17:44,418
and we have<font color="#CCCCCC"> this tradition of helping</font>

410
00:17:42,679 --> 00:17:48,409
<font color="#E5E5E5">each other when we really need it but</font>

411
00:17:44,419 --> 00:17:50,809
maybe<font color="#E5E5E5"> being a jerk about it</font><font color="#CCCCCC"> so I I call</font>

412
00:17:48,409 --> 00:17:53,239
him up very<font color="#CCCCCC"> late at night</font><font color="#E5E5E5"> and I</font><font color="#CCCCCC"> said I</font>

413
00:17:50,809 --> 00:17:54,379
need<font color="#CCCCCC"> a shell</font><font color="#E5E5E5"> account on a mips machine</font>

414
00:17:53,239 --> 00:17:56,239
and I need it now

415
00:17:54,379 --> 00:17:57,769
I remember that<font color="#E5E5E5"> you did a bunch of</font>

416
00:17:56,239 --> 00:18:00,619
embedded router stuff can<font color="#E5E5E5"> you hook me up</font>

417
00:17:57,769 --> 00:18:02,869
he's like absolutely<font color="#CCCCCC"> gives me a shell</font>

418
00:18:00,619 --> 00:18:04,908
account<font color="#E5E5E5"> everything is good until</font><font color="#CCCCCC"> I try</font>

419
00:18:02,869 --> 00:18:07,249
to install<font color="#E5E5E5"> Emacs</font><font color="#CCCCCC"> and I realized that the</font>

420
00:18:04,909 --> 00:18:11,419
<font color="#CCCCCC">entire machine has</font><font color="#E5E5E5"> two megabytes of disk</font>

421
00:18:07,249 --> 00:18:12,859
space<font color="#E5E5E5"> which by the way meant that it was</font>

422
00:18:11,419 --> 00:18:14,330
<font color="#E5E5E5">sort of a</font><font color="#CCCCCC"> little and you'll see on the</font>

423
00:18:12,859 --> 00:18:18,470
next<font color="#CCCCCC"> slide from our output</font>

424
00:18:14,330 --> 00:18:20,359
it was<font color="#CCCCCC"> compiling as a SSH transferring</font>

425
00:18:18,470 --> 00:18:21,619
the binary to targeted<font color="#E5E5E5"> route again so</font>

426
00:18:20,359 --> 00:18:25,009
that getting<font color="#E5E5E5"> off because we didn't even</font>

427
00:18:21,619 --> 00:18:26,269
like save it there on disk<font color="#CCCCCC"> so here</font><font color="#E5E5E5"> you</font>

428
00:18:25,009 --> 00:18:28,129
seeing the difference<font color="#E5E5E5"> right this is that</font>

429
00:18:26,269 --> 00:18:31,820
program we showed you earlier<font color="#CCCCCC"> up above</font>

430
00:18:28,129 --> 00:18:35,928
<font color="#CCCCCC">on my a boon to</font><font color="#E5E5E5"> VM or whatever it was</font>

431
00:18:31,820 --> 00:18:40,039
<font color="#CCCCCC">running q mu yes I am running in Q mu</font>

432
00:18:35,929 --> 00:18:43,190
and then in case<font color="#E5E5E5"> that wasn't clear</font><font color="#CCCCCC"> then</font>

433
00:18:40,039 --> 00:18:45,889
<font color="#E5E5E5">on the the shell down below SSH into the</font>

434
00:18:43,190 --> 00:18:47,450
<font color="#E5E5E5">target</font><font color="#CCCCCC"> the Travis I don't know why you</font>

435
00:18:45,889 --> 00:18:51,258
aliased it so we couldn't<font color="#E5E5E5"> see the IP</font>

436
00:18:47,450 --> 00:18:52,909
here but it's my<font color="#E5E5E5"> guess it has</font><font color="#CCCCCC"> to go</font>

437
00:18:51,259 --> 00:18:56,359
through<font color="#E5E5E5"> for jump boxes before it</font>

438
00:18:52,909 --> 00:18:57,859
actually gets there yeah<font color="#E5E5E5"> okay and</font><font color="#CCCCCC"> you</font>

439
00:18:56,359 --> 00:19:01,009
see that<font color="#E5E5E5"> it's running here unreal</font>

440
00:18:57,859 --> 00:19:02,720
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> right so I hope now at this</font>

441
00:19:01,009 --> 00:19:04,970
point we hope now at this point you see

442
00:19:02,720 --> 00:19:07,279
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can reliably mess with an</font>

443
00:19:04,970 --> 00:19:09,320
<font color="#E5E5E5">emulator but don't worry like we have</font>

444
00:19:07,279 --> 00:19:11,359
static<font color="#E5E5E5"> reverse engineers in the</font><font color="#CCCCCC"> room you</font>

445
00:19:09,320 --> 00:19:13,970
guys are awesome<font color="#E5E5E5"> and at looking through</font>

446
00:19:11,359 --> 00:19:16,070
finding<font color="#E5E5E5"> the issues and so let's look at</font>

447
00:19:13,970 --> 00:19:17,080
what it<font color="#E5E5E5"> would look like in Ida right so</font>

448
00:19:16,070 --> 00:19:19,540
if you look<font color="#E5E5E5"> at it and I</font>

449
00:19:17,080 --> 00:19:21,939
you'll see the<font color="#CCCCCC"> right-hand side because</font>

450
00:19:19,540 --> 00:19:24,730
<font color="#E5E5E5">what I'm covering up doesn't show up in</font>

451
00:19:21,940 --> 00:19:30,370
<font color="#E5E5E5">Ida by default we change the settings</font>

452
00:19:24,730 --> 00:19:34,000
here this line here at<font color="#CCCCCC"> iu</font><font color="#E5E5E5"> v 0 1 that is</font>

453
00:19:30,370 --> 00:19:35,530
<font color="#E5E5E5">the fictitious instruction that the real</font>

454
00:19:34,000 --> 00:19:38,250
hardware ignores because it gets broken

455
00:19:35,530 --> 00:19:41,320
<font color="#E5E5E5">in half but as you're viewing it</font>

456
00:19:38,250 --> 00:19:43,090
<font color="#CCCCCC">especially if you know mips but you</font>

457
00:19:41,320 --> 00:19:45,399
<font color="#E5E5E5">maybe haven't used it in the past</font><font color="#CCCCCC"> couple</font>

458
00:19:43,090 --> 00:19:46,990
of months<font color="#E5E5E5"> you might forget that this is</font>

459
00:19:45,400 --> 00:19:49,860
<font color="#CCCCCC">an</font><font color="#E5E5E5"> extended instruction that this</font>

460
00:19:46,990 --> 00:19:52,720
shouldn't fit within a delay slot and

461
00:19:49,860 --> 00:19:55,449
the<font color="#CCCCCC"> bytes on</font><font color="#E5E5E5"> the left are hidden</font><font color="#CCCCCC"> from</font>

462
00:19:52,720 --> 00:19:57,220
you because<font color="#CCCCCC"> I didn't show you the</font>

463
00:19:55,450 --> 00:19:59,860
opcodes unless you specifically asked

464
00:19:57,220 --> 00:20:01,510
<font color="#CCCCCC">for them</font><font color="#E5E5E5"> by going into the settings</font><font color="#CCCCCC"> and</font>

465
00:19:59,860 --> 00:20:04,810
extending the number<font color="#E5E5E5"> and such and such</font>

466
00:20:01,510 --> 00:20:08,830
<font color="#E5E5E5">so the and the function is seen</font><font color="#CCCCCC"> as</font>

467
00:20:04,810 --> 00:20:12,129
ending<font color="#E5E5E5"> afterward so idle will agree with</font>

468
00:20:08,830 --> 00:20:14,980
<font color="#E5E5E5">the broken emulator and not with the</font>

469
00:20:12,130 --> 00:20:17,160
real<font color="#E5E5E5"> hardware and other disassembly</font>

470
00:20:14,980 --> 00:20:20,500
tools<font color="#E5E5E5"> will</font><font color="#CCCCCC"> make the same</font><font color="#E5E5E5"> mistake because</font>

471
00:20:17,160 --> 00:20:23,680
most good debuggers and disassemblers

472
00:20:20,500 --> 00:20:27,190
are written first for the<font color="#E5E5E5"> PC and later</font>

473
00:20:23,680 --> 00:20:29,470
extended<font color="#E5E5E5"> for embedded</font><font color="#CCCCCC"> systems and x86</font>

474
00:20:27,190 --> 00:20:30,600
<font color="#E5E5E5">has variable length</font><font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> since</font>

475
00:20:29,470 --> 00:20:32,980
the beginning<font color="#E5E5E5"> of time</font>

476
00:20:30,600 --> 00:20:34,659
therefore it's totally natural<font color="#CCCCCC"> for</font><font color="#E5E5E5"> an</font>

477
00:20:32,980 --> 00:20:36,840
instruction<font color="#CCCCCC"> to be wider</font><font color="#E5E5E5"> than it ought</font><font color="#CCCCCC"> to</font>

478
00:20:34,660 --> 00:20:40,900
<font color="#CCCCCC">be and for</font><font color="#E5E5E5"> the opcodes to be ignored</font>

479
00:20:36,840 --> 00:20:43,810
exactly<font color="#E5E5E5"> so this in summary is a bare</font>

480
00:20:40,900 --> 00:20:47,740
metal<font color="#E5E5E5"> versus emulator detection</font><font color="#CCCCCC"> similar</font>

481
00:20:43,810 --> 00:20:51,190
to what was done<font color="#CCCCCC"> previously</font><font color="#E5E5E5"> on x86</font><font color="#CCCCCC"> you</font>

482
00:20:47,740 --> 00:20:52,870
know back<font color="#CCCCCC"> in 2007</font><font color="#E5E5E5"> and we sort of were</font>

483
00:20:51,190 --> 00:20:55,330
inspired by<font color="#E5E5E5"> that work and by some other</font>

484
00:20:52,870 --> 00:20:57,820
work<font color="#CCCCCC"> to to go ahead and try to port</font><font color="#E5E5E5"> this</font>

485
00:20:55,330 --> 00:21:02,230
to modern<font color="#CCCCCC"> embedded systems</font><font color="#E5E5E5"> and see what</font>

486
00:20:57,820 --> 00:21:03,639
else we could could find there so first

487
00:21:02,230 --> 00:21:05,590
of<font color="#E5E5E5"> all thank you very much to the</font>

488
00:21:03,640 --> 00:21:08,440
troopers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> on w crew for having</font>

489
00:21:05,590 --> 00:21:11,020
<font color="#E5E5E5">us</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> people who allowed us to work</font>

490
00:21:08,440 --> 00:21:14,170
on this instead<font color="#CCCCCC"> of our real paying work</font>

491
00:21:11,020 --> 00:21:16,810
<font color="#E5E5E5">most notably Travis's South</font><font color="#CCCCCC"> Asian Space</font>

492
00:21:14,170 --> 00:21:18,880
Agency or Apple<font color="#E5E5E5"> action as</font><font color="#CCCCCC"> he'd correct</font>

493
00:21:16,810 --> 00:21:22,120
me

494
00:21:18,880 --> 00:21:24,250
and we have some<font color="#E5E5E5"> suggestions for what</font>

495
00:21:22,120 --> 00:21:26,800
you may if this interests you aside<font color="#CCCCCC"> from</font>

496
00:21:24,250 --> 00:21:30,330
the giant oversized sign where Travis is

497
00:21:26,800 --> 00:21:35,649
<font color="#CCCCCC">trying to push the preacher wares of is</font>

498
00:21:30,330 --> 00:21:38,290
chapter<font color="#E5E5E5"> 15</font><font color="#CCCCCC"> nine</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> frac 66:12</font><font color="#E5E5E5"> has this</font>

499
00:21:35,650 --> 00:21:40,750
article an alphanumeric<font color="#CCCCCC"> armed</font><font color="#E5E5E5"> shellcode</font>

500
00:21:38,290 --> 00:21:43,480
<font color="#E5E5E5">if you actually want to learn</font><font color="#CCCCCC"> like which</font>

501
00:21:40,750 --> 00:21:46,480
field does what you need to have some

502
00:21:43,480 --> 00:21:48,490
sort<font color="#CCCCCC"> of constraint to play with and this</font>

503
00:21:46,480 --> 00:21:51,790
article<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> best that you will find</font>

504
00:21:48,490 --> 00:21:53,530
for learning<font color="#E5E5E5"> arm and thumb because they</font>

505
00:21:51,790 --> 00:21:55,930
take the<font color="#CCCCCC"> the somewhat arbitrary</font>

506
00:21:53,530 --> 00:21:57,879
restriction<font color="#CCCCCC"> that the most significant</font>

507
00:21:55,930 --> 00:22:00,160
<font color="#E5E5E5">bit of</font><font color="#CCCCCC"> every bite has to be a zero and</font>

508
00:21:57,880 --> 00:22:02,860
there can't be any null bytes<font color="#E5E5E5"> to</font>

509
00:22:00,160 --> 00:22:05,770
alphanumeric code right<font color="#E5E5E5"> but this means</font>

510
00:22:02,860 --> 00:22:08,469
<font color="#E5E5E5">that you can't do an unconditionally</font>

511
00:22:05,770 --> 00:22:11,170
executed instruction on 32-bit<font color="#E5E5E5"> arm so</font>

512
00:22:08,470 --> 00:22:13,480
<font color="#E5E5E5">you have to do it execute this if it's</font>

513
00:22:11,170 --> 00:22:15,520
less than<font color="#E5E5E5"> and also if it's greater than</font>

514
00:22:13,480 --> 00:22:17,680
<font color="#CCCCCC">or equal</font><font color="#E5E5E5"> to and then you double up</font><font color="#CCCCCC"> the</font>

515
00:22:15,520 --> 00:22:20,760
two<font color="#CCCCCC"> instructions and</font><font color="#E5E5E5"> that allows you</font><font color="#CCCCCC"> to</font>

516
00:22:17,680 --> 00:22:23,680
get it one<font color="#CCCCCC"> way or the other</font>

517
00:22:20,760 --> 00:22:26,470
they're also not<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to jump backward</font>

518
00:22:23,680 --> 00:22:29,080
in 32-bit<font color="#CCCCCC"> mode</font><font color="#E5E5E5"> so they have to jump</font>

519
00:22:26,470 --> 00:22:33,100
forward to a<font color="#CCCCCC"> 16-bit trampoline that</font><font color="#E5E5E5"> then</font>

520
00:22:29,080 --> 00:22:34,750
jumps backward and it's<font color="#CCCCCC"> bye-bye learning</font>

521
00:22:33,100 --> 00:22:36,850
these<font color="#E5E5E5"> restrictions of the kind of</font>

522
00:22:34,750 --> 00:22:38,980
artificially restricted shellcode

523
00:22:36,850 --> 00:22:42,520
position that you have to pay<font color="#CCCCCC"> attention</font>

524
00:22:38,980 --> 00:22:45,130
<font color="#E5E5E5">to which flags are where and learn what</font>

525
00:22:42,520 --> 00:22:47,560
the machine code looks like<font color="#E5E5E5"> separate</font>

526
00:22:45,130 --> 00:22:51,550
from what the assembly<font color="#E5E5E5"> language would</font>

527
00:22:47,560 --> 00:22:54,639
look like<font color="#CCCCCC"> Ryan and I wrote an</font>

528
00:22:51,550 --> 00:22:57,220
introduction<font color="#CCCCCC"> to arm and thumb</font><font color="#E5E5E5"> in</font>

529
00:22:54,640 --> 00:22:59,530
<font color="#E5E5E5">packaging to</font><font color="#CCCCCC"> fill eleven and</font><font color="#E5E5E5"> also one</font><font color="#CCCCCC"> in</font>

530
00:22:57,220 --> 00:23:02,380
the same release for the msp430<font color="#E5E5E5"> so you</font>

531
00:22:59,530 --> 00:23:04,540
can sort of see what the world looks

532
00:23:02,380 --> 00:23:06,700
<font color="#CCCCCC">like inside of these architectures what</font>

533
00:23:04,540 --> 00:23:09,070
your memory<font color="#E5E5E5"> layout looks like what will</font>

534
00:23:06,700 --> 00:23:11,020
be in each<font color="#CCCCCC"> position in</font><font color="#E5E5E5"> the chip and by</font>

535
00:23:09,070 --> 00:23:13,540
looking<font color="#E5E5E5"> at a pointer whether you should</font>

536
00:23:11,020 --> 00:23:17,110
expect it to be code or<font color="#E5E5E5"> data or an i/o</font>

537
00:23:13,540 --> 00:23:19,180
region<font color="#CCCCCC"> the</font><font color="#E5E5E5"> package</font><font color="#CCCCCC"> info fifteen</font><font color="#E5E5E5"> nine is</font>

538
00:23:17,110 --> 00:23:20,800
our article<font color="#E5E5E5"> on the midst delay slots</font><font color="#CCCCCC"> an</font>

539
00:23:19,180 --> 00:23:25,180
<font color="#E5E5E5">ANSI emulation through that and then</font>

540
00:23:20,800 --> 00:23:26,840
<font color="#E5E5E5">sixteen seven is the most brilliant work</font>

541
00:23:25,180 --> 00:23:29,570
involving

542
00:23:26,840 --> 00:23:32,030
<font color="#E5E5E5">hi planning that I've ever read it's by</font>

543
00:23:29,570 --> 00:23:35,929
a Scottish woman<font color="#E5E5E5"> maribel hearn I believe</font>

544
00:23:32,030 --> 00:23:38,660
it's her name<font color="#CCCCCC"> she's able</font><font color="#E5E5E5"> to execute code</font>

545
00:23:35,930 --> 00:23:42,050
in unmapped memory by leaving it in<font color="#CCCCCC"> the</font>

546
00:23:38,660 --> 00:23:45,320
capacitance of the date of bus lines<font color="#E5E5E5"> in</font>

547
00:23:42,050 --> 00:23:48,260
order<font color="#CCCCCC"> to dump the restricted bios from a</font>

548
00:23:45,320 --> 00:23:52,370
<font color="#CCCCCC">gameboy advance so she's actually</font>

549
00:23:48,260 --> 00:23:54,500
<font color="#E5E5E5">executing code that is not there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

550
00:23:52,370 --> 00:23:59,510
works reliably enough to dump the entire

551
00:23:54,500 --> 00:24:00,740
<font color="#E5E5E5">ROM</font><font color="#CCCCCC"> it's amazing</font><font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> nice work so</font>

552
00:23:59,510 --> 00:24:02,629
that's all we had for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> today we</font>

553
00:24:00,740 --> 00:24:04,820
wanted<font color="#E5E5E5"> to end with sort of 15 minutes</font>

554
00:24:02,630 --> 00:24:06,260
<font color="#E5E5E5">left in case anyone had questions and we</font>

555
00:24:04,820 --> 00:24:07,730
would<font color="#E5E5E5"> never</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> be the ones to</font><font color="#CCCCCC"> hold</font>

556
00:24:06,260 --> 00:24:09,710
you back from<font color="#E5E5E5"> a coffee break so I think</font>

557
00:24:07,730 --> 00:24:14,600
<font color="#CCCCCC">we're we're right on target there or a</font>

558
00:24:09,710 --> 00:24:16,190
beer<font color="#E5E5E5"> break so hope you enjoyed it hope</font>

559
00:24:14,600 --> 00:24:18,230
<font color="#E5E5E5">it was</font><font color="#CCCCCC"> interesting and</font><font color="#E5E5E5"> you learned some</font>

560
00:24:16,190 --> 00:24:19,700
<font color="#E5E5E5">maybe some new things about MIPS or at</font>

561
00:24:18,230 --> 00:24:22,580
least a twisted way of looking at them

562
00:24:19,700 --> 00:24:25,010
<font color="#E5E5E5">we're happy to answer</font><font color="#CCCCCC"> questions or have</font>

563
00:24:22,580 --> 00:24:27,970
stones thrown at<font color="#CCCCCC"> us now</font><font color="#E5E5E5"> either way</font><font color="#CCCCCC"> any</font>

564
00:24:25,010 --> 00:24:27,970
questions<font color="#CCCCCC"> tomatoes</font>

565
00:24:31,929 --> 00:24:40,879
<font color="#E5E5E5">questions yep hi</font><font color="#CCCCCC"> great talk</font>

566
00:24:39,019 --> 00:24:44,960
thanks for that have you looked<font color="#E5E5E5"> into</font>

567
00:24:40,879 --> 00:24:47,509
like reusing<font color="#E5E5E5"> machine code like for</font>

568
00:24:44,960 --> 00:24:50,899
<font color="#CCCCCC">example you have</font><font color="#E5E5E5"> instructions in 32-bit</font>

569
00:24:47,509 --> 00:24:54,619
mode and if you would jump<font color="#CCCCCC"> to the plus 1</font>

570
00:24:50,899 --> 00:24:58,158
<font color="#E5E5E5">version yet would have</font><font color="#CCCCCC"> like logic in the</font>

571
00:24:54,619 --> 00:24:59,449
<font color="#E5E5E5">thumb mode for</font><font color="#CCCCCC"> example we've not played</font>

572
00:24:58,159 --> 00:25:03,379
with<font color="#E5E5E5"> that but that would certainly work</font>

573
00:24:59,450 --> 00:25:05,359
<font color="#E5E5E5">you can also do plus 3 in order</font><font color="#CCCCCC"> to jump</font>

574
00:25:03,379 --> 00:25:08,119
<font color="#CCCCCC">into the middle of it that</font><font color="#E5E5E5"> way</font>

575
00:25:05,359 --> 00:25:11,449
there's been some work done similarly<font color="#E5E5E5"> in</font>

576
00:25:08,119 --> 00:25:12,678
an arm<font color="#CCCCCC"> but we have not</font><font color="#E5E5E5"> done it in we</font>

577
00:25:11,450 --> 00:25:16,730
have<font color="#E5E5E5"> not written the tool and to do it</font>

578
00:25:12,679 --> 00:25:18,919
in<font color="#E5E5E5"> MIPS</font><font color="#CCCCCC"> but for x86</font><font color="#E5E5E5"> jumping one late is</font>

579
00:25:16,730 --> 00:25:21,919
was used for the early just-in-time

580
00:25:18,919 --> 00:25:23,869
compiler bypasses<font color="#E5E5E5"> so that you're not</font>

581
00:25:21,919 --> 00:25:25,730
<font color="#E5E5E5">able to write executable code of your</font>

582
00:25:23,869 --> 00:25:27,529
own into memory but<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> able to</font>

583
00:25:25,730 --> 00:25:29,779
<font color="#E5E5E5">writes a JavaScript or Java code that</font>

584
00:25:27,529 --> 00:25:31,909
<font color="#E5E5E5">gets natively compiled so you'll XOR</font>

585
00:25:29,779 --> 00:25:33,980
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the 32-bit instruction that is your</font>

586
00:25:31,909 --> 00:25:38,629
real instruction and then you just don't

587
00:25:33,980 --> 00:25:39,739
control the<font color="#E5E5E5"> byte before it and there's</font>

588
00:25:38,629 --> 00:25:40,730
all sorts of<font color="#E5E5E5"> fun stuff you can</font><font color="#CCCCCC"> do in</font>

589
00:25:39,739 --> 00:25:42,379
that<font color="#E5E5E5"> direction</font><font color="#CCCCCC"> I think that would be</font><font color="#E5E5E5"> a</font>

590
00:25:40,730 --> 00:25:47,950
<font color="#E5E5E5">really interesting next thing to do cuz</font>

591
00:25:42,379 --> 00:25:50,389
make it even<font color="#CCCCCC"> more of a pain the</font>

592
00:25:47,950 --> 00:25:52,639
<font color="#CCCCCC">disassembly is tend to assume that</font>

593
00:25:50,389 --> 00:25:55,639
you'll have<font color="#E5E5E5"> a consistent instruction set</font>

594
00:25:52,639 --> 00:25:58,340
<font color="#CCCCCC">for a given function and I believe that</font>

595
00:25:55,639 --> 00:26:02,299
binary ninja requires this<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Ida's</font>

596
00:25:58,340 --> 00:26:05,090
<font color="#E5E5E5">auto analyzer expects this so even</font><font color="#CCCCCC"> if</font>

597
00:26:02,299 --> 00:26:07,158
you're not<font color="#CCCCCC"> jumping into the middle of an</font>

598
00:26:05,090 --> 00:26:10,189
instruction just having a single

599
00:26:07,159 --> 00:26:12,139
<font color="#CCCCCC">function that is both</font><font color="#E5E5E5"> arm and thumb will</font>

600
00:26:10,190 --> 00:26:14,690
make like a rat's nest for the reverse

601
00:26:12,139 --> 00:26:17,678
engineer to run through<font color="#E5E5E5"> it's quite a</font>

602
00:26:14,690 --> 00:26:17,679
pain<font color="#E5E5E5"> yeah</font>

603
00:26:17,720 --> 00:26:21,580
further<font color="#E5E5E5"> questions yes</font>

604
00:26:22,010 --> 00:26:28,580
yeah it's a bit a related question<font color="#E5E5E5"> would</font>

605
00:26:25,640 --> 00:26:31,910
<font color="#E5E5E5">it be possible</font><font color="#CCCCCC"> to build</font><font color="#E5E5E5"> some kind</font><font color="#CCCCCC"> of</font>

606
00:26:28,580 --> 00:26:34,340
<font color="#E5E5E5">polyglot for instance where you have</font>

607
00:26:31,910 --> 00:26:37,700
<font color="#CCCCCC">like</font><font color="#E5E5E5"> the your executable</font><font color="#CCCCCC"> that would one</font>

608
00:26:34,340 --> 00:26:40,428
one way in arm and yeah some other way

609
00:26:37,700 --> 00:26:43,700
in some mode I don't know exactly<font color="#E5E5E5"> how</font>

610
00:26:40,429 --> 00:26:45,970
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> have it's kind of a trigger</font><font color="#CCCCCC"> one</font>

611
00:26:43,700 --> 00:26:50,510
way<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the other at the beginning but</font>

612
00:26:45,970 --> 00:26:52,549
it's<font color="#E5E5E5"> tricky to figure</font><font color="#CCCCCC"> out which entry</font>

613
00:26:50,510 --> 00:26:53,780
point would<font color="#E5E5E5"> matter right so there's</font>

614
00:26:52,549 --> 00:26:56,470
definitely<font color="#CCCCCC"> shell code where if you</font>

615
00:26:53,780 --> 00:26:59,418
branched to it in one way or<font color="#CCCCCC"> the other</font>

616
00:26:56,470 --> 00:27:02,080
you can diverge it and then have a

617
00:26:59,419 --> 00:27:05,240
region that's<font color="#CCCCCC"> 32</font><font color="#E5E5E5"> bit region that's thumb</font>

618
00:27:02,080 --> 00:27:10,100
<font color="#E5E5E5">for elf executables of course there's a</font>

619
00:27:05,240 --> 00:27:11,750
flag that<font color="#CCCCCC"> it specifies</font><font color="#E5E5E5"> the look for the</font>

620
00:27:10,100 --> 00:27:13,428
<font color="#CCCCCC">the entry points and the functions so</font>

621
00:27:11,750 --> 00:27:15,650
because each function is either<font color="#E5E5E5"> at an</font>

622
00:27:13,429 --> 00:27:17,750
odd address or an even address<font color="#E5E5E5"> it's hard</font>

623
00:27:15,650 --> 00:27:23,299
<font color="#E5E5E5">to figure out how you wouldn't begin it</font>

624
00:27:17,750 --> 00:27:25,160
in the wrong<font color="#E5E5E5"> way on believe that if</font><font color="#CCCCCC"> so</font>

625
00:27:23,299 --> 00:27:27,770
you could definitely do<font color="#E5E5E5"> that if you're</font>

626
00:27:25,160 --> 00:27:30,620
<font color="#E5E5E5">looking for one in</font><font color="#CCCCCC"> the wild I'm guessing</font>

627
00:27:27,770 --> 00:27:31,879
<font color="#E5E5E5">that there were bootable floppies that</font>

628
00:27:30,620 --> 00:27:36,439
were designed<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> more than one</font>

629
00:27:31,880 --> 00:27:41,570
architecture like maybe spark<font color="#E5E5E5"> and alpha</font>

630
00:27:36,440 --> 00:27:42,710
or something yeah<font color="#E5E5E5"> if you find an example</font>

631
00:27:41,570 --> 00:27:47,570
that or if you write<font color="#CCCCCC"> one please let us</font>

632
00:27:42,710 --> 00:27:52,100
<font color="#E5E5E5">know and and we'll order another floppy</font>

633
00:27:47,570 --> 00:27:54,960
drive<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> more questions</font>

634
00:27:52,100 --> 00:27:57,260
<font color="#CCCCCC">alright then thanks Ryan thanks brothers</font>

635
00:27:54,960 --> 00:27:57,260
thank<font color="#E5E5E5"> you</font>

636
00:27:57,280 --> 00:28:01,789
[Applause]

