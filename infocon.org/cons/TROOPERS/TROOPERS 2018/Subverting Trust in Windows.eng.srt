1
00:00:04,000 --> 00:00:10,700
all right good<font color="#CCCCCC"> morning everyone</font><font color="#E5E5E5"> welcome</font>

2
00:00:08,379 --> 00:00:15,200
<font color="#E5E5E5">it's always a little bit more empty on</font>

3
00:00:10,700 --> 00:00:22,250
<font color="#CCCCCC">the second day the first</font><font color="#E5E5E5"> not sure about</font>

4
00:00:15,200 --> 00:00:25,220
<font color="#E5E5E5">this correlation so many ways to</font>

5
00:00:22,250 --> 00:00:26,390
introduce<font color="#CCCCCC"> met I decided to go with one</font>

6
00:00:25,220 --> 00:00:27,918
<font color="#CCCCCC">that we have of course like some</font>

7
00:00:26,390 --> 00:00:29,329
<font color="#E5E5E5">internal knowledge base and if you want</font>

8
00:00:27,919 --> 00:00:30,919
to get started with<font color="#E5E5E5"> Microsoft and</font>

9
00:00:29,329 --> 00:00:33,500
<font color="#E5E5E5">Windows</font><font color="#CCCCCC"> security this</font><font color="#E5E5E5"> is one of</font><font color="#CCCCCC"> our</font>

10
00:00:30,919 --> 00:00:35,329
<font color="#E5E5E5">sources that is listed</font><font color="#CCCCCC"> there so I'm</font>

11
00:00:33,500 --> 00:00:43,670
really<font color="#CCCCCC"> looking forward to</font><font color="#E5E5E5"> get some</font>

12
00:00:35,329 --> 00:00:46,579
hands-on experiences<font color="#CCCCCC"> especially thank</font>

13
00:00:43,670 --> 00:00:49,059
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> you guys hear me in the back so</font>

14
00:00:46,579 --> 00:00:51,019
how many<font color="#E5E5E5"> people ran the 10k this morning</font>

15
00:00:49,059 --> 00:00:53,928
do you that's<font color="#E5E5E5"> pretty good</font>

16
00:00:51,019 --> 00:00:55,789
well I appreciate<font color="#E5E5E5"> you first going to</font>

17
00:00:53,929 --> 00:00:57,769
<font color="#E5E5E5">dinner</font><font color="#CCCCCC"> probably having too</font><font color="#E5E5E5"> many drinks</font>

18
00:00:55,789 --> 00:01:01,190
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> 10k and</font><font color="#E5E5E5"> then showing up</font>

19
00:00:57,769 --> 00:01:03,800
early to my talk<font color="#CCCCCC"> so my talk</font><font color="#E5E5E5"> is titled</font>

20
00:01:01,190 --> 00:01:06,259
subverting trust in Windows<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the</font>

21
00:01:03,800 --> 00:01:09,890
hands-on<font color="#E5E5E5"> edition I've given to other</font>

22
00:01:06,260 --> 00:01:12,980
variants of this talk in the<font color="#E5E5E5"> past</font><font color="#CCCCCC"> where</font>

23
00:01:09,890 --> 00:01:14,990
is more or less death by PowerPoint so I

24
00:01:12,980 --> 00:01:16,880
want<font color="#E5E5E5"> to try to limit the amount of</font>

25
00:01:14,990 --> 00:01:19,820
slides that I go over<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is going</font>

26
00:01:16,880 --> 00:01:21,229
<font color="#E5E5E5">to be very hands-on demo driven I've got</font>

27
00:01:19,820 --> 00:01:24,080
two attacks<font color="#E5E5E5"> that I want to show you</font>

28
00:01:21,230 --> 00:01:25,880
today<font color="#E5E5E5"> and they're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be all</font><font color="#CCCCCC"> very</font>

29
00:01:24,080 --> 00:01:28,010
manually<font color="#E5E5E5"> driven and so</font><font color="#CCCCCC"> I hope the</font>

30
00:01:25,880 --> 00:01:30,560
concepts will really click with you

31
00:01:28,010 --> 00:01:32,990
after that<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> feel pretty confident</font>

32
00:01:30,560 --> 00:01:35,300
<font color="#E5E5E5">that the demos will the demo</font><font color="#CCCCCC"> gods will</font>

33
00:01:32,990 --> 00:01:39,140
will please me<font color="#CCCCCC"> so</font><font color="#E5E5E5"> fingers crossed</font><font color="#CCCCCC"> and</font>

34
00:01:35,300 --> 00:01:43,210
pray for<font color="#CCCCCC"> me</font><font color="#E5E5E5"> so my name is</font><font color="#CCCCCC"> Mack</font><font color="#E5E5E5"> Raber I'm</font>

35
00:01:39,140 --> 00:01:43,210
a security<font color="#CCCCCC"> researcher at Specter</font><font color="#E5E5E5"> ops</font>

36
00:01:43,720 --> 00:01:48,910
so let's get right into<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so what is</font>

37
00:01:46,340 --> 00:01:52,460
trust<font color="#E5E5E5"> in the concept in the context of</font>

38
00:01:48,910 --> 00:01:53,869
specifically software so<font color="#CCCCCC"> Trust</font><font color="#E5E5E5"> means a</font>

39
00:01:52,460 --> 00:01:57,259
lot<font color="#E5E5E5"> of things to a lot of different</font>

40
00:01:53,870 --> 00:01:59,500
<font color="#CCCCCC">people they're</font><font color="#E5E5E5"> different deaf people</font>

41
00:01:57,260 --> 00:02:02,390
will have different<font color="#E5E5E5"> definitions</font><font color="#CCCCCC"> for it</font>

42
00:01:59,500 --> 00:02:05,120
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> depending upon the</font>

43
00:02:02,390 --> 00:02:07,910
<font color="#CCCCCC">organization and your</font><font color="#E5E5E5"> maturity level so</font>

44
00:02:05,120 --> 00:02:11,630
what are some<font color="#E5E5E5"> of the questions that one</font>

45
00:02:07,910 --> 00:02:13,400
might ask yourself<font color="#E5E5E5"> in the context of</font>

46
00:02:11,630 --> 00:02:16,670
<font color="#CCCCCC">software like what software</font><font color="#E5E5E5"> would be</font>

47
00:02:13,400 --> 00:02:20,330
<font color="#E5E5E5">worthy of your trust</font><font color="#CCCCCC"> so here are</font><font color="#E5E5E5"> some of</font>

48
00:02:16,670 --> 00:02:23,359
the<font color="#E5E5E5"> questions that might</font><font color="#CCCCCC"> be posed first</font>

49
00:02:20,330 --> 00:02:24,830
of all is this software<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know</font>

50
00:02:23,360 --> 00:02:27,280
how<font color="#E5E5E5"> potentially has a legitimate</font>

51
00:02:24,830 --> 00:02:29,540
business need to be run in my enterprise

52
00:02:27,280 --> 00:02:33,500
<font color="#CCCCCC">does the software come from a reputable</font>

53
00:02:29,540 --> 00:02:37,209
<font color="#E5E5E5">vendor so what do I mean</font><font color="#CCCCCC"> by a</font><font color="#E5E5E5"> reputable</font>

54
00:02:33,500 --> 00:02:40,610
vendor again<font color="#E5E5E5"> this is a very subjective</font>

55
00:02:37,210 --> 00:02:42,410
term<font color="#CCCCCC"> so reputable could mean well it's</font>

56
00:02:40,610 --> 00:02:44,270
just<font color="#E5E5E5"> a</font><font color="#CCCCCC"> well-known company they've been</font>

57
00:02:42,410 --> 00:02:47,810
around for a<font color="#CCCCCC"> while you know I think we</font>

58
00:02:44,270 --> 00:02:51,110
<font color="#E5E5E5">might all agree</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Microsoft's or</font>

59
00:02:47,810 --> 00:02:54,770
<font color="#E5E5E5">Google are reputable vendors they're not</font>

60
00:02:51,110 --> 00:02:57,920
known for distributing signed malware

61
00:02:54,770 --> 00:03:01,209
at least overtly<font color="#E5E5E5"> malicious malware</font><font color="#CCCCCC"> I</font>

62
00:02:57,920 --> 00:03:04,670
guess you could argue<font color="#E5E5E5"> that like abusable</font>

63
00:03:01,209 --> 00:03:08,810
programs<font color="#E5E5E5"> could have some varying intent</font>

64
00:03:04,670 --> 00:03:12,649
like<font color="#CCCCCC"> PowerShell for example what is the</font>

65
00:03:08,810 --> 00:03:14,690
<font color="#E5E5E5">intent of the software is the software</font>

66
00:03:12,650 --> 00:03:16,820
<font color="#CCCCCC">that we need to</font><font color="#E5E5E5"> improve in our</font>

67
00:03:14,690 --> 00:03:20,420
enterprise<font color="#E5E5E5"> is it overtly malicious</font>

68
00:03:16,820 --> 00:03:24,049
<font color="#E5E5E5">hopefully not does the software do what</font>

69
00:03:20,420 --> 00:03:25,850
it claims<font color="#CCCCCC"> to do or is it</font><font color="#E5E5E5"> otherwise</font>

70
00:03:24,050 --> 00:03:28,459
subversive that that's what we want to

71
00:03:25,850 --> 00:03:32,090
<font color="#E5E5E5">determine</font><font color="#CCCCCC"> is the software not subversive</font>

72
00:03:28,459 --> 00:03:34,980
<font color="#CCCCCC">and does it do what it is advertised to</font>

73
00:03:32,090 --> 00:03:38,710
<font color="#E5E5E5">do and</font><font color="#CCCCCC"> nothing else hopefully</font>

74
00:03:34,980 --> 00:03:42,310
can it be abused in<font color="#E5E5E5"> any way so you could</font>

75
00:03:38,710 --> 00:03:46,300
have<font color="#CCCCCC"> a signed trusted application from a</font>

76
00:03:42,310 --> 00:03:47,860
reputable<font color="#E5E5E5"> vendor that attackers</font><font color="#CCCCCC"> will</font>

77
00:03:46,300 --> 00:03:51,340
love to abuse<font color="#CCCCCC"> so I've</font><font color="#E5E5E5"> already mentioned</font>

78
00:03:47,860 --> 00:03:53,770
PowerShell<font color="#E5E5E5"> people like myself</font><font color="#CCCCCC"> Matt</font>

79
00:03:51,340 --> 00:03:56,290
Nelson<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of my</font><font color="#E5E5E5"> co-workers</font><font color="#CCCCCC"> Casey Smith</font>

80
00:03:53,770 --> 00:03:59,050
a former<font color="#CCCCCC"> co-worker of</font><font color="#E5E5E5"> mine who I spoke</font>

81
00:03:56,290 --> 00:04:03,790
<font color="#E5E5E5">with last year</font><font color="#CCCCCC"> and many others in the</font>

82
00:03:59,050 --> 00:04:07,350
<font color="#CCCCCC">industry now love hunting for abusable</font>

83
00:04:03,790 --> 00:04:11,230
signed applications<font color="#E5E5E5"> for multiple reasons</font>

84
00:04:07,350 --> 00:04:12,940
<font color="#CCCCCC">and one</font><font color="#E5E5E5"> of my motivators is oftentimes a</font>

85
00:04:11,230 --> 00:04:14,500
lot<font color="#E5E5E5"> of these abusable applications can</font>

86
00:04:12,940 --> 00:04:17,440
be<font color="#CCCCCC"> used to bypass</font><font color="#E5E5E5"> application</font>

87
00:04:14,500 --> 00:04:20,920
whitelisting<font color="#CCCCCC"> other times</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> can just</font>

88
00:04:17,440 --> 00:04:23,230
be used in like clever ways for like a

89
00:04:20,920 --> 00:04:26,740
really effective<font color="#E5E5E5"> post exploitation</font>

90
00:04:23,230 --> 00:04:28,810
<font color="#E5E5E5">tradecraft where</font><font color="#CCCCCC"> edr vendors and</font>

91
00:04:26,740 --> 00:04:31,600
antivirus vendors are constantly<font color="#E5E5E5"> playing</font>

92
00:04:28,810 --> 00:04:36,190
catch-up<font color="#CCCCCC"> with needing to detect these</font>

93
00:04:31,600 --> 00:04:39,220
<font color="#E5E5E5">these</font><font color="#CCCCCC"> new abusable as</font><font color="#E5E5E5"> casey puts</font><font color="#CCCCCC"> a</font>

94
00:04:36,190 --> 00:04:42,370
misplaced<font color="#E5E5E5"> trust binaries</font><font color="#CCCCCC"> so this could</font>

95
00:04:39,220 --> 00:04:45,310
be<font color="#CCCCCC"> a factor</font><font color="#E5E5E5"> in the level of trust or</font>

96
00:04:42,370 --> 00:04:48,250
<font color="#E5E5E5">lack thereof</font><font color="#CCCCCC"> in your particular</font>

97
00:04:45,310 --> 00:04:52,630
organization for a piece<font color="#E5E5E5"> of code that</font>

98
00:04:48,250 --> 00:04:56,250
<font color="#E5E5E5">you're assessing so again like is</font>

99
00:04:52,630 --> 00:04:59,290
<font color="#E5E5E5">PowerShell necessary in your environment</font>

100
00:04:56,250 --> 00:05:01,450
<font color="#E5E5E5">if it is then there are additional</font>

101
00:04:59,290 --> 00:05:03,010
mitigations<font color="#CCCCCC"> that could be placed</font><font color="#E5E5E5"> to lock</font>

102
00:05:01,450 --> 00:05:04,900
it<font color="#E5E5E5"> down</font>

103
00:05:03,010 --> 00:05:07,360
what is the protection status<font color="#E5E5E5"> of the</font>

104
00:05:04,900 --> 00:05:10,539
signing<font color="#E5E5E5"> keys so this is probably</font>

105
00:05:07,360 --> 00:05:12,700
something that's<font color="#E5E5E5"> not considered terribly</font>

106
00:05:10,540 --> 00:05:15,610
too often because I think<font color="#E5E5E5"> people</font><font color="#CCCCCC"> just</font>

107
00:05:12,700 --> 00:05:20,530
implicitly trust<font color="#CCCCCC"> in the case</font><font color="#E5E5E5"> of</font>

108
00:05:15,610 --> 00:05:23,800
Microsoft that all of the all<font color="#E5E5E5"> of these</font>

109
00:05:20,530 --> 00:05:27,219
certificate issuers have pretty good

110
00:05:23,800 --> 00:05:29,320
control<font color="#CCCCCC"> over their signing keys for when</font>

111
00:05:27,220 --> 00:05:31,990
they issue certificates<font color="#E5E5E5"> and that</font>

112
00:05:29,320 --> 00:05:35,200
software<font color="#E5E5E5"> originating from reputable</font>

113
00:05:31,990 --> 00:05:38,050
<font color="#E5E5E5">vendors</font><font color="#CCCCCC"> also maintain positive control</font>

114
00:05:35,200 --> 00:05:40,240
of their signing keys now that

115
00:05:38,050 --> 00:05:42,330
assumption<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been breached in several</font>

116
00:05:40,240 --> 00:05:46,530
occasions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll mention a</font><font color="#CCCCCC"> few of them</font>

117
00:05:42,330 --> 00:05:50,698
in a few slides<font color="#E5E5E5"> and is this certificate</font>

118
00:05:46,530 --> 00:05:55,020
issuer<font color="#E5E5E5"> a reputable issuer again we can</font>

119
00:05:50,699 --> 00:05:58,919
look<font color="#CCCCCC"> to Microsoft and</font><font color="#E5E5E5"> just trust that</font>

120
00:05:55,020 --> 00:06:02,818
they<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> very stringent policy for</font>

121
00:05:58,919 --> 00:06:08,280
getting their<font color="#CCCCCC"> route CAS and intermediate</font>

122
00:06:02,819 --> 00:06:11,580
<font color="#E5E5E5">CAS</font><font color="#CCCCCC"> included</font><font color="#E5E5E5"> in box in Windows right so</font>

123
00:06:08,280 --> 00:06:15,090
<font color="#E5E5E5">but are there any certificate issuers</font>

124
00:06:11,580 --> 00:06:17,698
that<font color="#E5E5E5"> might be less stringent upon</font>

125
00:06:15,090 --> 00:06:20,460
issuing certificates so maybe they don't

126
00:06:17,699 --> 00:06:22,259
<font color="#E5E5E5">validate your you know if you're getting</font>

127
00:06:20,460 --> 00:06:23,549
a personal code signing certificate they

128
00:06:22,259 --> 00:06:26,130
don't actually look at your driver's

129
00:06:23,550 --> 00:06:28,050
license or<font color="#CCCCCC"> your passport or if you're a</font>

130
00:06:26,130 --> 00:06:29,940
business wanting to get<font color="#E5E5E5"> like an extended</font>

131
00:06:28,050 --> 00:06:33,060
validation certificate what is the<font color="#E5E5E5"> level</font>

132
00:06:29,940 --> 00:06:35,159
<font color="#E5E5E5">of scrutiny</font><font color="#CCCCCC"> that they place on you and</font>

133
00:06:33,060 --> 00:06:38,610
your organization<font color="#CCCCCC"> to issue that code</font>

134
00:06:35,159 --> 00:06:40,530
<font color="#E5E5E5">signing certificate because</font><font color="#CCCCCC"> as an</font>

135
00:06:38,610 --> 00:06:44,460
attacker if I could go to some weaker

136
00:06:40,530 --> 00:06:46,590
issuer<font color="#E5E5E5"> where I could claim to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> Google</font>

137
00:06:44,460 --> 00:06:48,750
and they issue me a<font color="#CCCCCC"> certificate where</font>

138
00:06:46,590 --> 00:06:51,650
the subject name is<font color="#E5E5E5"> is Google Inc well</font>

139
00:06:48,750 --> 00:06:55,469
then obviously<font color="#E5E5E5"> that's a big</font><font color="#CCCCCC"> problem and</font>

140
00:06:51,650 --> 00:06:58,320
then finally is the OS validating<font color="#CCCCCC"> signer</font>

141
00:06:55,469 --> 00:07:00,120
origin and code integrity properly this

142
00:06:58,320 --> 00:07:02,699
<font color="#CCCCCC">is</font><font color="#E5E5E5"> another one where I</font><font color="#CCCCCC"> think it's just</font>

143
00:07:00,120 --> 00:07:05,330
<font color="#E5E5E5">generally implicitly assumed that the</font>

144
00:07:02,699 --> 00:07:08,639
operating system<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a robust</font>

145
00:07:05,330 --> 00:07:11,580
<font color="#CCCCCC">implementation for code signing</font><font color="#E5E5E5"> and</font>

146
00:07:08,639 --> 00:07:14,280
certificate validation and so I'm going

147
00:07:11,580 --> 00:07:16,650
a focus of the two attacks that<font color="#E5E5E5"> I'm</font>

148
00:07:14,280 --> 00:07:19,500
going<font color="#E5E5E5"> to talk about will really</font><font color="#CCCCCC"> focus on</font>

149
00:07:16,650 --> 00:07:21,599
this last bullet<font color="#E5E5E5"> sort of subverting that</font>

150
00:07:19,500 --> 00:07:24,000
trust and<font color="#E5E5E5"> what the operating system does</font>

151
00:07:21,599 --> 00:07:26,280
<font color="#E5E5E5">to validate certificates and digital</font>

152
00:07:24,000 --> 00:07:30,699
signatures

153
00:07:26,280 --> 00:07:34,119
now<font color="#E5E5E5"> I think you can map trust maturity</font>

154
00:07:30,699 --> 00:07:38,080
<font color="#CCCCCC">in sort of in the Maslow's hierarchy</font>

155
00:07:34,120 --> 00:07:40,509
here<font color="#CCCCCC"> and on the</font><font color="#E5E5E5"> same page</font><font color="#CCCCCC"> for each</font>

156
00:07:38,080 --> 00:07:43,389
maturity level<font color="#E5E5E5"> I believe</font><font color="#CCCCCC"> that there's a</font>

157
00:07:40,509 --> 00:07:46,330
respective product that could match that

158
00:07:43,389 --> 00:07:49,300
<font color="#E5E5E5">specific trust maturity that you or your</font>

159
00:07:46,330 --> 00:07:51,669
<font color="#CCCCCC">organization</font><font color="#E5E5E5"> has so at the bottom of the</font>

160
00:07:49,300 --> 00:07:55,150
period is basically the blind faith

161
00:07:51,669 --> 00:07:58,030
<font color="#E5E5E5">level of trust so I'm sure we've heard</font>

162
00:07:55,150 --> 00:08:00,609
<font color="#E5E5E5">from you know the hardcore</font><font color="#CCCCCC"> Linux</font>

163
00:07:58,030 --> 00:08:02,710
<font color="#E5E5E5">neckbeards that</font><font color="#CCCCCC"> they're like Linux is</font>

164
00:08:00,610 --> 00:08:04,750
just<font color="#CCCCCC"> inherently more secure than</font><font color="#E5E5E5"> Windows</font>

165
00:08:02,710 --> 00:08:07,840
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> need to supply any other</font>

166
00:08:04,750 --> 00:08:10,780
justification<font color="#E5E5E5"> Windows is malware Linux</font>

167
00:08:07,840 --> 00:08:15,429
is<font color="#CCCCCC"> more secure</font><font color="#E5E5E5"> like just trust me here</font>

168
00:08:10,780 --> 00:08:17,080
<font color="#E5E5E5">right so and then you know another claim</font>

169
00:08:15,430 --> 00:08:18,940
<font color="#E5E5E5">could be made</font><font color="#CCCCCC"> I actually saw</font><font color="#E5E5E5"> this</font>

170
00:08:17,080 --> 00:08:20,560
<font color="#E5E5E5">recently on</font><font color="#CCCCCC"> Twitter or people</font><font color="#E5E5E5"> are like I</font>

171
00:08:18,940 --> 00:08:22,300
haven't been infected<font color="#E5E5E5"> yet so I'm</font>

172
00:08:20,560 --> 00:08:25,050
<font color="#E5E5E5">probably fine like I practiced safe</font>

173
00:08:22,300 --> 00:08:28,930
clicking practices I'm generally pretty

174
00:08:25,050 --> 00:08:32,829
<font color="#E5E5E5">mindful of Safe Browsing practices</font>

175
00:08:28,930 --> 00:08:36,669
<font color="#CCCCCC">whatnot</font><font color="#E5E5E5"> so at a trust enforcement level</font>

176
00:08:32,828 --> 00:08:39,069
<font color="#E5E5E5">there's really nothing to</font><font color="#CCCCCC"> protect</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> in</font>

177
00:08:36,669 --> 00:08:43,779
in the<font color="#E5E5E5"> blind faith level of maturity</font>

178
00:08:39,070 --> 00:08:46,480
<font color="#E5E5E5">other than maybe prayer and then higher</font>

179
00:08:43,779 --> 00:08:48,820
up in the the chain of trust maturity

180
00:08:46,480 --> 00:08:51,190
<font color="#E5E5E5">would be that you have trust and some</font>

181
00:08:48,820 --> 00:08:53,740
smart people right so<font color="#E5E5E5"> you know you walk</font>

182
00:08:51,190 --> 00:08:55,930
<font color="#E5E5E5">the halls of RSA or black hat and</font>

183
00:08:53,740 --> 00:08:59,560
there's a million different products

184
00:08:55,930 --> 00:09:01,540
<font color="#E5E5E5">from presumably developed by some pretty</font>

185
00:08:59,560 --> 00:09:05,170
smart engineers who know what<font color="#E5E5E5"> they're</font>

186
00:09:01,540 --> 00:09:08,050
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> so you trust that you're</font>

187
00:09:05,170 --> 00:09:10,029
basically going<font color="#E5E5E5"> to allow anything to</font><font color="#CCCCCC"> run</font>

188
00:09:08,050 --> 00:09:13,899
by default<font color="#E5E5E5"> in your organization unless</font>

189
00:09:10,029 --> 00:09:16,149
<font color="#CCCCCC">it's known bad or unknown bad and</font><font color="#E5E5E5"> that's</font>

190
00:09:13,899 --> 00:09:18,040
sort<font color="#E5E5E5"> of the the unknown bad case that's</font>

191
00:09:16,149 --> 00:09:20,140
sort of where you you place that<font color="#E5E5E5"> trust</font>

192
00:09:18,040 --> 00:09:22,180
in that<font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> vendor that</font><font color="#CCCCCC"> they're</font>

193
00:09:20,140 --> 00:09:24,610
going<font color="#E5E5E5"> to be able to catch something that</font>

194
00:09:22,180 --> 00:09:27,579
doesn't have like<font color="#CCCCCC"> unknown static</font>

195
00:09:24,610 --> 00:09:30,370
signature and so I think<font color="#E5E5E5"> your antivirus</font>

196
00:09:27,579 --> 00:09:33,489
<font color="#E5E5E5">and your EPP vendors sort of fall in</font>

197
00:09:30,370 --> 00:09:35,240
this enforcement level<font color="#CCCCCC"> and the in the</font>

198
00:09:33,490 --> 00:09:39,200
trust maturity

199
00:09:35,240 --> 00:09:42,620
<font color="#CCCCCC">turkey now as we go up and get</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> more</font>

200
00:09:39,200 --> 00:09:45,529
scrutiny in our level<font color="#CCCCCC"> of trust</font>

201
00:09:42,620 --> 00:09:48,640
perhaps<font color="#E5E5E5"> we only want to permit high</font>

202
00:09:45,529 --> 00:09:50,510
reputation<font color="#E5E5E5"> code from executing in our</font>

203
00:09:48,640 --> 00:09:51,830
<font color="#CCCCCC">environments so this could be a</font>

204
00:09:50,510 --> 00:09:54,860
<font color="#CCCCCC">combination of</font><font color="#E5E5E5"> both</font>

205
00:09:51,830 --> 00:09:57,020
just saying for example blanket<font color="#E5E5E5"> allow</font>

206
00:09:54,860 --> 00:09:58,550
anything signed by<font color="#CCCCCC"> Microsoft</font><font color="#E5E5E5"> and then</font>

207
00:09:57,020 --> 00:10:01,459
any<font color="#CCCCCC"> non-microsoft</font>

208
00:09:58,550 --> 00:10:05,180
if it's signed<font color="#E5E5E5"> is it of high</font><font color="#CCCCCC"> reputation</font>

209
00:10:01,459 --> 00:10:08,800
now there's a level of<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> that you</font>

210
00:10:05,180 --> 00:10:12,290
need to place on the respective vendor

211
00:10:08,800 --> 00:10:16,310
<font color="#E5E5E5">who is</font><font color="#CCCCCC"> actually making</font><font color="#E5E5E5"> that reputation</font>

212
00:10:12,290 --> 00:10:17,750
assessment<font color="#CCCCCC"> right so the product</font><font color="#E5E5E5"> that</font>

213
00:10:16,310 --> 00:10:20,949
would be associated<font color="#E5E5E5"> with this would be</font>

214
00:10:17,750 --> 00:10:25,010
your typical like application<font color="#CCCCCC"> control</font>

215
00:10:20,950 --> 00:10:27,020
<font color="#CCCCCC">products</font><font color="#E5E5E5"> so these are often confused</font>

216
00:10:25,010 --> 00:10:28,490
with application whitelisting<font color="#CCCCCC"> which is a</font>

217
00:10:27,020 --> 00:10:32,050
little<font color="#E5E5E5"> more stringent so application</font>

218
00:10:28,490 --> 00:10:34,310
control<font color="#E5E5E5"> typically involves a level of</font>

219
00:10:32,050 --> 00:10:36,620
allowing code to run that is of high

220
00:10:34,310 --> 00:10:39,680
<font color="#CCCCCC">reputation and then blocking everything</font>

221
00:10:36,620 --> 00:10:42,740
<font color="#E5E5E5">else and then at the highest level of</font>

222
00:10:39,680 --> 00:10:46,130
trust maturity we would only only

223
00:10:42,740 --> 00:10:48,529
<font color="#E5E5E5">require software would be allowed to run</font>

224
00:10:46,130 --> 00:10:50,140
and any<font color="#E5E5E5"> software</font><font color="#CCCCCC"> that needs to be run in</font>

225
00:10:48,529 --> 00:10:53,689
our<font color="#CCCCCC"> enterprise has to go through some</font>

226
00:10:50,140 --> 00:10:56,390
<font color="#E5E5E5">approval process</font><font color="#CCCCCC"> all right so maybe you</font>

227
00:10:53,690 --> 00:10:57,860
would take each program that<font color="#E5E5E5"> needs to</font>

228
00:10:56,390 --> 00:11:01,520
run in<font color="#E5E5E5"> your environment run it through a</font>

229
00:10:57,860 --> 00:11:03,170
sandbox run it through your<font color="#CCCCCC"> AV</font><font color="#E5E5E5"> run some</font>

230
00:11:01,520 --> 00:11:05,839
like static<font color="#E5E5E5"> analysis tools on</font><font color="#CCCCCC"> it</font>

231
00:11:03,170 --> 00:11:08,510
whatever your process may be<font color="#E5E5E5"> for that</font>

232
00:11:05,839 --> 00:11:11,810
there<font color="#E5E5E5"> is a formalized</font><font color="#CCCCCC"> process in place</font>

233
00:11:08,510 --> 00:11:14,870
and<font color="#E5E5E5"> you only allow exactly what needs</font><font color="#CCCCCC"> to</font>

234
00:11:11,810 --> 00:11:15,920
be run in your<font color="#E5E5E5"> environment</font><font color="#CCCCCC"> and so this</font>

235
00:11:14,870 --> 00:11:19,250
is what application whitelisting

236
00:11:15,920 --> 00:11:23,810
solutions can offer now there is<font color="#E5E5E5"> even</font>

237
00:11:19,250 --> 00:11:25,790
one<font color="#E5E5E5"> more hypothetical</font><font color="#CCCCCC"> ring to the the</font>

238
00:11:23,810 --> 00:11:29,239
pyramid here<font color="#E5E5E5"> this is sort of like</font><font color="#CCCCCC"> a</font>

239
00:11:25,790 --> 00:11:33,170
<font color="#E5E5E5">mythical level of trust where only what</font>

240
00:11:29,240 --> 00:11:34,880
is absolutely required<font color="#CCCCCC"> for like business</font>

241
00:11:33,170 --> 00:11:37,040
line applications to<font color="#E5E5E5"> run and the</font>

242
00:11:34,880 --> 00:11:38,930
operating system can run and nothing

243
00:11:37,040 --> 00:11:42,110
else<font color="#E5E5E5"> so</font>

244
00:11:38,930 --> 00:11:43,790
most realistic scenario and the highest

245
00:11:42,110 --> 00:11:45,589
rung here is to be like<font color="#E5E5E5"> just allow</font>

246
00:11:43,790 --> 00:11:49,160
everything<font color="#CCCCCC"> that's signed</font><font color="#E5E5E5"> by Microsoft</font><font color="#CCCCCC"> to</font>

247
00:11:45,589 --> 00:11:51,710
<font color="#E5E5E5">run like I implicitly trust that there</font>

248
00:11:49,160 --> 00:11:53,930
may be some like abusable<font color="#E5E5E5"> apps in there</font>

249
00:11:51,710 --> 00:11:56,209
but you know<font color="#E5E5E5"> what like people are</font><font color="#CCCCCC"> pretty</font>

250
00:11:53,930 --> 00:11:58,819
active<font color="#E5E5E5"> on Twitter about identifying</font>

251
00:11:56,209 --> 00:12:00,229
<font color="#E5E5E5">these so I</font><font color="#CCCCCC"> can just block those as they</font>

252
00:11:58,820 --> 00:12:03,680
as they<font color="#CCCCCC"> come about</font><font color="#E5E5E5"> but what about all</font>

253
00:12:00,230 --> 00:12:06,080
the unknown abusable binaries<font color="#CCCCCC"> you know</font>

254
00:12:03,680 --> 00:12:08,060
there's<font color="#CCCCCC"> gonna be many many more that are</font>

255
00:12:06,080 --> 00:12:09,709
gonna<font color="#CCCCCC"> surface in the future and you're</font>

256
00:12:08,060 --> 00:12:13,339
not accounting for<font color="#CCCCCC"> those</font><font color="#E5E5E5"> even in this</font>

257
00:12:09,709 --> 00:12:16,399
<font color="#E5E5E5">highest rung of the the hierarchy here</font>

258
00:12:13,339 --> 00:12:18,500
an application whitelisting can help you

259
00:12:16,399 --> 00:12:20,450
in that<font color="#E5E5E5"> like mythical level as well not</font>

260
00:12:18,500 --> 00:12:22,580
all<font color="#E5E5E5"> solutions</font><font color="#CCCCCC"> a device</font><font color="#E5E5E5"> guard actually</font>

261
00:12:20,450 --> 00:12:26,080
can<font color="#E5E5E5"> but it's really difficult to</font>

262
00:12:22,580 --> 00:12:28,490
configure<font color="#E5E5E5"> and it doesn't exactly scale</font>

263
00:12:26,080 --> 00:12:30,290
so what is the intended<font color="#E5E5E5"> purpose of code</font>

264
00:12:28,490 --> 00:12:31,130
signing<font color="#E5E5E5"> really it's just two things and</font>

265
00:12:30,290 --> 00:12:33,399
<font color="#E5E5E5">only two things</font>

266
00:12:31,130 --> 00:12:35,689
it's an attestation of origin<font color="#CCCCCC"> so</font>

267
00:12:33,399 --> 00:12:39,560
<font color="#CCCCCC">something is signed by Microsoft you</font>

268
00:12:35,690 --> 00:12:42,800
trust that that code signed originated

269
00:12:39,560 --> 00:12:46,550
from Microsoft Corporation<font color="#E5E5E5"> and not some</font>

270
00:12:42,800 --> 00:12:47,839
<font color="#CCCCCC">Mauer</font><font color="#E5E5E5"> author right so this</font><font color="#CCCCCC"> is a as far</font>

271
00:12:46,550 --> 00:12:50,300
as the<font color="#E5E5E5"> at cessation of origin is</font>

272
00:12:47,839 --> 00:12:53,270
concerned<font color="#E5E5E5"> this is where you place</font><font color="#CCCCCC"> your</font>

273
00:12:50,300 --> 00:12:55,880
trust<font color="#CCCCCC"> in the protection</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> signing</font>

274
00:12:53,270 --> 00:12:58,279
<font color="#E5E5E5">keys in this case we trust that</font>

275
00:12:55,880 --> 00:13:00,080
Microsoft has you know<font color="#CCCCCC"> very</font><font color="#E5E5E5"> good</font>

276
00:12:58,279 --> 00:13:03,860
<font color="#CCCCCC">positive control of their signing</font><font color="#E5E5E5"> keys</font>

277
00:13:00,080 --> 00:13:06,410
which I certainly hope they do<font color="#CCCCCC"> and then</font>

278
00:13:03,860 --> 00:13:10,520
at the station of integrity<font color="#E5E5E5"> so for any</font>

279
00:13:06,410 --> 00:13:12,709
given<font color="#E5E5E5"> file or blob</font><font color="#CCCCCC"> whatever portions of</font>

280
00:13:10,520 --> 00:13:15,980
the file or<font color="#E5E5E5"> blob are calculated as part</font>

281
00:13:12,709 --> 00:13:18,050
of the digital<font color="#E5E5E5"> signature validate that</font>

282
00:13:15,980 --> 00:13:21,320
those have not changed and if they have

283
00:13:18,050 --> 00:13:23,870
then supply some warning to the<font color="#CCCCCC"> user</font>

284
00:13:21,320 --> 00:13:27,110
which actually doesn't<font color="#CCCCCC"> ever</font><font color="#E5E5E5"> happen in in</font>

285
00:13:23,870 --> 00:13:30,560
<font color="#E5E5E5">reality which is kind of sad</font><font color="#CCCCCC"> so code</font>

286
00:13:27,110 --> 00:13:34,130
signing<font color="#E5E5E5"> is not repeat not an attestation</font>

287
00:13:30,560 --> 00:13:35,599
<font color="#E5E5E5">of trust or intent and all of you</font>

288
00:13:34,130 --> 00:13:38,450
<font color="#CCCCCC">probably know this but this</font><font color="#E5E5E5"> is a pretty</font>

289
00:13:35,600 --> 00:13:41,510
common misconception even amongst a lot

290
00:13:38,450 --> 00:13:43,880
of defenders<font color="#E5E5E5"> or or like</font><font color="#CCCCCC"> sock analysts</font>

291
00:13:41,510 --> 00:13:46,040
<font color="#CCCCCC">where they see something that claims to</font>

292
00:13:43,880 --> 00:13:49,780
<font color="#CCCCCC">be</font><font color="#E5E5E5"> signed by Microsoft or signed by</font>

293
00:13:46,040 --> 00:13:52,930
Google and you know they<font color="#CCCCCC"> just move on</font>

294
00:13:49,780 --> 00:13:55,209
and to an extent it's a kind<font color="#E5E5E5"> of a</font>

295
00:13:52,930 --> 00:13:57,550
reasonable<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> you know when you</font>

296
00:13:55,210 --> 00:13:59,920
have millions of events pouring in every

297
00:13:57,550 --> 00:14:03,099
day<font color="#E5E5E5"> that and you need to find that</font><font color="#CCCCCC"> Neil</font>

298
00:13:59,920 --> 00:14:05,770
and the haystack<font color="#CCCCCC"> the first thing that is</font>

299
00:14:03,100 --> 00:14:07,240
reasonable to<font color="#E5E5E5"> do probably is to just say</font>

300
00:14:05,770 --> 00:14:09,010
<font color="#CCCCCC">don't show</font><font color="#E5E5E5"> me anything signed by</font>

301
00:14:07,240 --> 00:14:10,930
<font color="#CCCCCC">Microsoft and then I can triage</font>

302
00:14:09,010 --> 00:14:12,939
everything that's not signed or not

303
00:14:10,930 --> 00:14:14,770
<font color="#E5E5E5">approved not specifically approved in</font>

304
00:14:12,940 --> 00:14:18,520
our environment<font color="#CCCCCC"> and I can triage</font>

305
00:14:14,770 --> 00:14:20,949
accordingly<font color="#E5E5E5"> but</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> signing can however</font>

306
00:14:18,520 --> 00:14:23,829
be<font color="#E5E5E5"> used as an enforcement mechanism for</font>

307
00:14:20,950 --> 00:14:25,330
previously<font color="#E5E5E5"> established trust so this is</font>

308
00:14:23,830 --> 00:14:28,720
by a large how application whitelisting

309
00:14:25,330 --> 00:14:31,840
solutions work if there is a<font color="#E5E5E5"> software</font>

310
00:14:28,720 --> 00:14:34,240
<font color="#E5E5E5">vendor</font><font color="#CCCCCC"> that you have determined</font><font color="#E5E5E5"> to be</font>

311
00:14:31,840 --> 00:14:37,270
trustworthy<font color="#E5E5E5"> then you can whitelist by</font>

312
00:14:34,240 --> 00:14:42,190
<font color="#E5E5E5">publisher</font><font color="#CCCCCC"> and various combinations</font>

313
00:14:37,270 --> 00:14:45,310
<font color="#CCCCCC">thereof including like you could mix</font>

314
00:14:42,190 --> 00:14:48,220
like publisher reputation with like file

315
00:14:45,310 --> 00:14:50,709
metadata that's included as part<font color="#E5E5E5"> of like</font>

316
00:14:48,220 --> 00:14:54,670
assignable content in a file<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> get</font>

317
00:14:50,710 --> 00:14:57,520
<font color="#E5E5E5">very</font><font color="#CCCCCC"> specific here the code signing in</font>

318
00:14:54,670 --> 00:14:59,560
reality<font color="#CCCCCC"> I feel as though</font><font color="#E5E5E5"> there are many</font>

319
00:14:57,520 --> 00:15:01,540
naive assumptions made by defenders

320
00:14:59,560 --> 00:15:04,540
which<font color="#E5E5E5"> I've already alluded to where if</font>

321
00:15:01,540 --> 00:15:07,780
something<font color="#CCCCCC"> is signed</font><font color="#E5E5E5"> or some tool that</font>

322
00:15:04,540 --> 00:15:11,319
reports<font color="#E5E5E5"> the signature status of a binary</font>

323
00:15:07,780 --> 00:15:14,439
<font color="#CCCCCC">it says it's signed</font><font color="#E5E5E5"> so it says it's</font>

324
00:15:11,320 --> 00:15:17,740
valid so integrity box<font color="#E5E5E5"> check origin</font>

325
00:15:14,440 --> 00:15:19,390
<font color="#E5E5E5">comes from Microsoft</font><font color="#CCCCCC"> check ok</font><font color="#E5E5E5"> so it's</font>

326
00:15:17,740 --> 00:15:22,260
probably fine<font color="#CCCCCC"> it's not one of those</font><font color="#E5E5E5"> like</font>

327
00:15:19,390 --> 00:15:23,620
abusable binaries it's not like windbg

328
00:15:22,260 --> 00:15:26,530
<font color="#E5E5E5">msbuild</font>

329
00:15:23,620 --> 00:15:27,210
<font color="#CCCCCC">powershell</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> i don't worry about</font><font color="#E5E5E5"> it's</font>

330
00:15:26,530 --> 00:15:30,040
<font color="#CCCCCC">fine</font>

331
00:15:27,210 --> 00:15:33,870
and there's a lot<font color="#CCCCCC"> of naive assumptions</font>

332
00:15:30,040 --> 00:15:36,339
made<font color="#E5E5E5"> by many security products again</font>

333
00:15:33,870 --> 00:15:39,100
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> look at some</font><font color="#CCCCCC"> examples in a little</font>

334
00:15:36,340 --> 00:15:44,530
<font color="#CCCCCC">bit but one</font><font color="#E5E5E5"> one example would be like</font>

335
00:15:39,100 --> 00:15:47,200
sick check sick check kernel32.dll<font color="#E5E5E5"> it</font>

336
00:15:44,530 --> 00:15:49,850
assigned<font color="#CCCCCC"> it's valid so integrity check</font>

337
00:15:47,200 --> 00:15:54,500
and it comes from<font color="#E5E5E5"> Microsoft</font><font color="#CCCCCC"> check ok</font>

338
00:15:49,850 --> 00:15:57,259
<font color="#CCCCCC">forget I've</font><font color="#E5E5E5"> already mentioned this so in</font>

339
00:15:54,500 --> 00:16:02,120
the case where<font color="#E5E5E5"> say the integrity check</font>

340
00:15:57,259 --> 00:16:03,980
<font color="#E5E5E5">does not pass</font><font color="#CCCCCC"> is a user ever going to be</font>

341
00:16:02,120 --> 00:16:07,819
prompted<font color="#CCCCCC"> about this in the case of</font>

342
00:16:03,980 --> 00:16:10,990
<font color="#CCCCCC">Windows no</font><font color="#E5E5E5"> it's kind</font><font color="#CCCCCC"> of silly in my</font>

343
00:16:07,819 --> 00:16:13,939
opinion<font color="#CCCCCC"> that when one</font><font color="#E5E5E5"> of the core</font>

344
00:16:10,990 --> 00:16:16,459
intents of code signing fails which is

345
00:16:13,940 --> 00:16:19,639
that<font color="#E5E5E5"> integrity check nothing happens you</font>

346
00:16:16,459 --> 00:16:22,279
still execute it just fine and the user

347
00:16:19,639 --> 00:16:24,980
is not alerted there's no log to

348
00:16:22,279 --> 00:16:27,860
indicate that<font color="#E5E5E5"> there was this hash</font>

349
00:16:24,980 --> 00:16:31,190
mismatch that<font color="#E5E5E5"> occurred whereas if you</font>

350
00:16:27,860 --> 00:16:34,069
were to browse on Chrome to some site

351
00:16:31,190 --> 00:16:36,680
with a<font color="#E5E5E5"> certificate</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> it's</font>

352
00:16:34,069 --> 00:16:39,920
<font color="#E5E5E5">integrity check had failed or the</font>

353
00:16:36,680 --> 00:16:41,540
certificate<font color="#CCCCCC"> had been revoked</font>

354
00:16:39,920 --> 00:16:43,880
obviously like you're going to<font color="#E5E5E5"> get all</font>

355
00:16:41,540 --> 00:16:46,069
these like<font color="#CCCCCC"> bright red prompts indicating</font>

356
00:16:43,880 --> 00:16:48,139
like do not<font color="#E5E5E5"> go to this website this is</font>

357
00:16:46,069 --> 00:16:51,769
not safe but the same is not true for

358
00:16:48,139 --> 00:16:56,449
signed code and then you have the

359
00:16:51,769 --> 00:16:58,519
<font color="#CCCCCC">problem we're just many legitimate a lot</font>

360
00:16:56,449 --> 00:17:01,819
of legitimate<font color="#CCCCCC"> software from vendors it's</font>

361
00:16:58,519 --> 00:17:06,289
just not signed<font color="#E5E5E5"> so then you don't get</font>

362
00:17:01,819 --> 00:17:09,280
<font color="#E5E5E5">the attestation</font><font color="#CCCCCC"> of integrity and origin</font>

363
00:17:06,289 --> 00:17:11,869
so it's really on you as the smart

364
00:17:09,280 --> 00:17:13,879
<font color="#CCCCCC">higher level tier sock analyst or</font>

365
00:17:11,869 --> 00:17:17,678
reverse engineer<font color="#CCCCCC"> assuming you</font><font color="#E5E5E5"> have a</font>

366
00:17:13,880 --> 00:17:20,990
mature software<font color="#E5E5E5"> review process to</font>

367
00:17:17,679 --> 00:17:23,659
validate<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this is that the intent of</font>

368
00:17:20,990 --> 00:17:26,700
this unsigned<font color="#E5E5E5"> legitimate software is</font>

369
00:17:23,659 --> 00:17:29,940
actually<font color="#E5E5E5"> good</font>

370
00:17:26,700 --> 00:17:33,690
so let's let's test<font color="#E5E5E5"> some of our</font>

371
00:17:29,940 --> 00:17:37,020
assumptions<font color="#E5E5E5"> as defenders here now assume</font>

372
00:17:33,690 --> 00:17:39,720
<font color="#CCCCCC">that we get thousands or millions of</font>

373
00:17:37,020 --> 00:17:42,210
events coming<font color="#E5E5E5"> in every day and we need</font>

374
00:17:39,720 --> 00:17:46,590
to triage which ones are important to us

375
00:17:42,210 --> 00:17:49,680
<font color="#E5E5E5">so</font><font color="#CCCCCC"> here's a here's</font><font color="#E5E5E5"> some of the</font><font color="#CCCCCC"> texts</font>

376
00:17:46,590 --> 00:17:52,429
from<font color="#E5E5E5"> sis Mon image load events which as</font>

377
00:17:49,680 --> 00:17:55,050
of the later versions does<font color="#E5E5E5"> surface</font>

378
00:17:52,430 --> 00:17:59,250
<font color="#E5E5E5">signature information which is kind of</font>

379
00:17:55,050 --> 00:18:01,950
<font color="#E5E5E5">handy does anyone want to</font><font color="#CCCCCC"> speak up and</font>

380
00:17:59,250 --> 00:18:07,740
tell<font color="#CCCCCC"> me if there's anything that</font><font color="#E5E5E5"> looks</font>

381
00:18:01,950 --> 00:18:10,230
out<font color="#E5E5E5"> of the ordinary</font><font color="#CCCCCC"> here sorry the sha-1</font>

382
00:18:07,740 --> 00:18:13,800
<font color="#CCCCCC">it may be so there would</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> be an</font>

383
00:18:10,230 --> 00:18:16,290
additional<font color="#CCCCCC"> check</font><font color="#E5E5E5"> - you know like</font><font color="#CCCCCC"> virus</font>

384
00:18:13,800 --> 00:18:18,780
<font color="#CCCCCC">toner or</font><font color="#E5E5E5"> some like threat reputation</font>

385
00:18:16,290 --> 00:18:20,430
feed to validate<font color="#CCCCCC"> that hash right so yeah</font>

386
00:18:18,780 --> 00:18:20,820
we could check<font color="#CCCCCC"> that so that's a</font><font color="#E5E5E5"> good</font>

387
00:18:20,430 --> 00:18:24,510
call

388
00:18:20,820 --> 00:18:26,730
anything else what<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> yeah</font>

389
00:18:24,510 --> 00:18:30,720
so the file path is kind of weird<font color="#CCCCCC"> see</font>

390
00:18:26,730 --> 00:18:33,270
<font color="#CCCCCC">Windows tasks notepad.exe so normally</font>

391
00:18:30,720 --> 00:18:40,110
the legitimate notepad would run<font color="#CCCCCC"> out of</font>

392
00:18:33,270 --> 00:18:43,889
<font color="#CCCCCC">system32</font><font color="#E5E5E5"> right now as humans like and</font>

393
00:18:40,110 --> 00:18:45,570
you know<font color="#E5E5E5"> like mature analysts like that</font>

394
00:18:43,890 --> 00:18:48,810
file path stands out to<font color="#CCCCCC"> us pretty</font><font color="#E5E5E5"> well</font>

395
00:18:45,570 --> 00:18:51,810
<font color="#CCCCCC">but does that scale</font><font color="#E5E5E5"> does that level of</font>

396
00:18:48,810 --> 00:18:55,580
<font color="#E5E5E5">analysis and intuition really scale when</font>

397
00:18:51,810 --> 00:18:59,040
you<font color="#CCCCCC"> have millions</font><font color="#E5E5E5"> of events not exactly</font>

398
00:18:55,580 --> 00:19:00,689
<font color="#CCCCCC">so what the naive approach would to do</font>

399
00:18:59,040 --> 00:19:03,120
would<font color="#CCCCCC"> be well</font><font color="#E5E5E5"> just ignore everything</font>

400
00:19:00,690 --> 00:19:04,500
that's<font color="#E5E5E5"> signed by Microsoft</font><font color="#CCCCCC"> unless it's</font>

401
00:19:03,120 --> 00:19:07,050
<font color="#E5E5E5">one of those like known abusable</font>

402
00:19:04,500 --> 00:19:09,650
<font color="#E5E5E5">binaries right so this might go</font>

403
00:19:07,050 --> 00:19:09,649
unchecked

404
00:19:10,409 --> 00:19:16,110
autoruns so it turns out we notepad has

405
00:19:13,980 --> 00:19:19,259
for whatever reason has been persisted

406
00:19:16,110 --> 00:19:21,719
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> run key you can get</font><font color="#E5E5E5"> signer</font>

407
00:19:19,259 --> 00:19:23,909
information as well in<font color="#CCCCCC"> Auto runs and one</font>

408
00:19:21,720 --> 00:19:28,409
of the really unfortunate things that

409
00:19:23,909 --> 00:19:31,919
I've seen a lot of<font color="#E5E5E5"> Sox do is they</font><font color="#CCCCCC"> will</font>

410
00:19:28,409 --> 00:19:36,110
<font color="#E5E5E5">just like though automates Auto runs</font>

411
00:19:31,919 --> 00:19:39,210
like<font color="#E5E5E5"> at scale</font><font color="#CCCCCC"> have it</font><font color="#E5E5E5"> be ingested</font><font color="#CCCCCC"> into</font>

412
00:19:36,110 --> 00:19:41,519
like a<font color="#CCCCCC"> Splunk database and they will</font>

413
00:19:39,210 --> 00:19:46,879
hide the Microsoft entries<font color="#E5E5E5"> because it's</font>

414
00:19:41,519 --> 00:19:50,450
just too<font color="#E5E5E5"> much data</font><font color="#CCCCCC"> so I mean reasonable</font>

415
00:19:46,879 --> 00:19:54,090
unreasonable<font color="#E5E5E5"> it's hard for me to say but</font>

416
00:19:50,450 --> 00:19:57,659
<font color="#E5E5E5">these are the kinds of behaviors that</font><font color="#CCCCCC"> me</font>

417
00:19:54,090 --> 00:20:02,789
as an attacker<font color="#E5E5E5"> I'm going to try to take</font>

418
00:19:57,659 --> 00:20:04,519
advantage<font color="#E5E5E5"> of and sysinternals</font><font color="#CCCCCC"> we know</font>

419
00:20:02,789 --> 00:20:08,399
<font color="#E5E5E5">this to be sort of one of the canonical</font>

420
00:20:04,519 --> 00:20:10,049
<font color="#E5E5E5">signature validation utilities the</font>

421
00:20:08,399 --> 00:20:11,369
output is pretty simple<font color="#E5E5E5"> there's there's</font>

422
00:20:10,049 --> 00:20:13,740
a lot<font color="#CCCCCC"> of switches which can give you</font>

423
00:20:11,369 --> 00:20:14,939
more<font color="#CCCCCC"> information</font><font color="#E5E5E5"> but really as a</font>

424
00:20:13,740 --> 00:20:17,159
defender<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you're going to</font><font color="#E5E5E5"> be</font>

425
00:20:14,940 --> 00:20:19,470
interested<font color="#CCCCCC"> in is does it pass</font><font color="#E5E5E5"> the</font>

426
00:20:17,159 --> 00:20:22,049
integrity<font color="#E5E5E5"> and origin check and so these</font>

427
00:20:19,470 --> 00:20:25,249
are<font color="#E5E5E5"> highlighted</font><font color="#CCCCCC"> here verified yep signed</font>

428
00:20:22,049 --> 00:20:27,600
notepad yep comes<font color="#E5E5E5"> from Microsoft</font>

429
00:20:25,249 --> 00:20:30,869
<font color="#E5E5E5">everything kind of checks out here</font>

430
00:20:27,600 --> 00:20:34,649
except maybe the the path is kind<font color="#CCCCCC"> of</font>

431
00:20:30,869 --> 00:20:37,678
weird so it turns out see<font color="#E5E5E5"> Windows tasks</font>

432
00:20:34,649 --> 00:20:40,168
<font color="#E5E5E5">is one of a handful of directories</font>

433
00:20:37,679 --> 00:20:42,860
within the windows directory that's

434
00:20:40,169 --> 00:20:42,860
<font color="#E5E5E5">world writable</font>

435
00:20:43,720 --> 00:20:48,730
so what are the attackers goals

436
00:20:45,580 --> 00:20:50,289
specifically<font color="#E5E5E5"> as it relates</font><font color="#CCCCCC"> to code</font>

437
00:20:48,730 --> 00:20:53,110
<font color="#CCCCCC">signing I've</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> alluded to some</font><font color="#E5E5E5"> of</font>

438
00:20:50,289 --> 00:20:56,169
these really<font color="#CCCCCC"> the number one goal is to</font>

439
00:20:53,110 --> 00:20:58,570
<font color="#CCCCCC">subvert</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> pre-established</font>

440
00:20:56,169 --> 00:21:04,360
<font color="#E5E5E5">trust that may have been placed in a</font>

441
00:20:58,570 --> 00:21:07,059
binary or<font color="#E5E5E5"> a signer or a company</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> cases</font>

442
00:21:04,360 --> 00:21:09,070
<font color="#CCCCCC">where this happened recently is</font><font color="#E5E5E5"> in the</font>

443
00:21:07,059 --> 00:21:13,210
the<font color="#CCCCCC"> crap cleaner</font><font color="#E5E5E5"> program and also</font><font color="#CCCCCC"> the</font>

444
00:21:09,070 --> 00:21:16,059
<font color="#CCCCCC">Emmy</font><font color="#E5E5E5"> doc</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> which I think came out</font>

445
00:21:13,210 --> 00:21:19,379
of Ukraine<font color="#E5E5E5"> is that right yeah</font>

446
00:21:16,059 --> 00:21:22,629
so here are cases where attackers

447
00:21:19,379 --> 00:21:24,519
<font color="#CCCCCC">compromise the key signing</font>

448
00:21:22,629 --> 00:21:27,070
infrastructure<font color="#E5E5E5"> of these companies and</font>

449
00:21:24,519 --> 00:21:31,149
<font color="#CCCCCC">they distributed</font><font color="#E5E5E5"> their own malicious</font>

450
00:21:27,070 --> 00:21:34,240
signed<font color="#E5E5E5"> updates using the code signing</font>

451
00:21:31,149 --> 00:21:36,039
certificates<font color="#CCCCCC"> the compromised keys for</font>

452
00:21:34,240 --> 00:21:39,580
those code<font color="#E5E5E5"> signing certificates so it</font>

453
00:21:36,039 --> 00:21:42,009
completes a version of trust which even

454
00:21:39,580 --> 00:21:44,830
if you're<font color="#CCCCCC"> using a very strong</font>

455
00:21:42,009 --> 00:21:47,860
application<font color="#E5E5E5"> whitelisting policy if these</font>

456
00:21:44,830 --> 00:21:50,199
were required business line applications

457
00:21:47,860 --> 00:21:52,059
<font color="#CCCCCC">well you're kind of screwed in those</font>

458
00:21:50,200 --> 00:21:54,879
<font color="#CCCCCC">cases because you've already approved</font>

459
00:21:52,059 --> 00:21:58,090
them by publisher and the publisher

460
00:21:54,879 --> 00:22:00,158
signing keys were compromised<font color="#E5E5E5"> another</font>

461
00:21:58,090 --> 00:22:02,439
goal is to evade<font color="#E5E5E5"> detection and we've</font>

462
00:22:00,159 --> 00:22:04,960
already seen some<font color="#E5E5E5"> cases this is</font>

463
00:22:02,440 --> 00:22:09,820
internals examples that I showed<font color="#E5E5E5"> where</font>

464
00:22:04,960 --> 00:22:15,059
this would evade and really sort<font color="#E5E5E5"> of</font>

465
00:22:09,820 --> 00:22:15,059
exploit<font color="#CCCCCC"> traditional defender mindsets</font>

466
00:22:15,789 --> 00:22:22,030
and to also circumvent application

467
00:22:18,130 --> 00:22:24,580
whitelisting<font color="#CCCCCC"> alright so here's the</font><font color="#E5E5E5"> first</font>

468
00:22:22,030 --> 00:22:26,408
attack that we're going<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> over we're</font>

469
00:22:24,580 --> 00:22:30,010
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> hijack a subject interface</font>

470
00:22:26,409 --> 00:22:33,730
package<font color="#CCCCCC"> or I'll</font><font color="#E5E5E5"> call it a sip for short</font>

471
00:22:30,010 --> 00:22:36,190
so<font color="#E5E5E5"> sips</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the user mode</font>

472
00:22:33,730 --> 00:22:39,520
infrastructure in<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> that performs</font>

473
00:22:36,190 --> 00:22:42,789
both signing and signature<font color="#CCCCCC"> and</font><font color="#E5E5E5"> retrieval</font>

474
00:22:39,520 --> 00:22:46,960
and signature validation and<font color="#E5E5E5"> it turns</font>

475
00:22:42,789 --> 00:22:50,890
<font color="#E5E5E5">out that all</font><font color="#CCCCCC"> of this is hi jackal as an</font>

476
00:22:46,960 --> 00:22:55,480
administrator<font color="#CCCCCC"> so the way this this works</font>

477
00:22:50,890 --> 00:22:59,200
is subject<font color="#E5E5E5"> interface package is just a</font>

478
00:22:55,480 --> 00:23:01,080
<font color="#CCCCCC">dll</font><font color="#E5E5E5"> that has a certain set of export</font>

479
00:22:59,200 --> 00:23:04,480
functions that perform signing

480
00:23:01,080 --> 00:23:06,340
operations<font color="#E5E5E5"> and there are going to be</font>

481
00:23:04,480 --> 00:23:08,770
different<font color="#CCCCCC"> deals</font><font color="#E5E5E5"> that perform these</font>

482
00:23:06,340 --> 00:23:11,770
operations depending upon the sign<font color="#E5E5E5"> a</font>

483
00:23:08,770 --> 00:23:14,740
<font color="#E5E5E5">bowl file type so there's a sip for</font>

484
00:23:11,770 --> 00:23:16,750
portable executables<font color="#E5E5E5"> there's a sip for</font>

485
00:23:14,740 --> 00:23:24,610
<font color="#E5E5E5">catalog files does anyone know what a</font>

486
00:23:16,750 --> 00:23:28,030
<font color="#E5E5E5">catalog file is oh okay a catalog file</font>

487
00:23:24,610 --> 00:23:31,719
is basically<font color="#CCCCCC"> a list of hashes that is</font>

488
00:23:28,030 --> 00:23:33,539
signed<font color="#E5E5E5"> so there's a I don't</font><font color="#CCCCCC"> know how</font>

489
00:23:31,720 --> 00:23:36,280
many<font color="#E5E5E5"> is probably like over a thousand</font>

490
00:23:33,539 --> 00:23:40,510
<font color="#E5E5E5">built-in catalog files in Windows so</font>

491
00:23:36,280 --> 00:23:42,668
it's another means to to perform<font color="#E5E5E5"> code</font>

492
00:23:40,510 --> 00:23:45,480
signing<font color="#E5E5E5"> if a file does not have an</font>

493
00:23:42,669 --> 00:23:48,250
embedded authentic code signature

494
00:23:45,480 --> 00:23:51,159
<font color="#CCCCCC">PowerShell has its own</font><font color="#E5E5E5"> sip you can sign</font>

495
00:23:48,250 --> 00:23:55,600
<font color="#CCCCCC">PowerShell coach is fine the windows</font>

496
00:23:51,159 --> 00:23:57,789
script host VB scripts<font color="#CCCCCC"> J scripts</font><font color="#E5E5E5"> those</font>

497
00:23:55,600 --> 00:24:00,820
files type those files can be signed as

498
00:23:57,789 --> 00:24:03,460
well<font color="#CCCCCC"> catalog files and</font><font color="#E5E5E5"> etc there's</font>

499
00:24:00,820 --> 00:24:05,919
<font color="#E5E5E5">several other sips</font>

500
00:24:03,460 --> 00:24:09,370
okay so<font color="#CCCCCC"> all use no</font><font color="#E5E5E5"> code signing</font>

501
00:24:05,920 --> 00:24:12,160
validation<font color="#CCCCCC"> by a</font><font color="#E5E5E5"> large is formed through</font>

502
00:24:09,370 --> 00:24:15,879
the wind verify<font color="#E5E5E5"> trust function in win</font>

503
00:24:12,160 --> 00:24:16,960
trust<font color="#CCCCCC"> dll and this is done</font><font color="#E5E5E5"> for a good</font>

504
00:24:15,880 --> 00:24:20,910
reason

505
00:24:16,960 --> 00:24:22,570
largely mainly because<font color="#E5E5E5"> this the SIP</font>

506
00:24:20,910 --> 00:24:24,760
<font color="#E5E5E5">infrastructure is</font><font color="#CCCCCC"> designed to be</font>

507
00:24:22,570 --> 00:24:29,110
extensible so let's say in the<font color="#E5E5E5"> future</font>

508
00:24:24,760 --> 00:24:30,910
there's some new file type that that

509
00:24:29,110 --> 00:24:33,159
Microsoft would like to have<font color="#E5E5E5"> support</font>

510
00:24:30,910 --> 00:24:35,620
signing well then you can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> add a new</font>

511
00:24:33,160 --> 00:24:38,740
sip to it and then<font color="#E5E5E5"> everything will</font><font color="#CCCCCC"> be</font>

512
00:24:35,620 --> 00:24:40,719
abstracted<font color="#E5E5E5"> away from any vendor</font>

513
00:24:38,740 --> 00:24:42,700
performing signature validation<font color="#CCCCCC"> because</font>

514
00:24:40,720 --> 00:24:45,340
all they need<font color="#E5E5E5"> to call is when verify</font>

515
00:24:42,700 --> 00:24:47,560
<font color="#CCCCCC">trust</font><font color="#E5E5E5"> basically supply the file path to</font>

516
00:24:45,340 --> 00:24:50,260
<font color="#CCCCCC">what they want to</font><font color="#E5E5E5"> validate and then it</font>

517
00:24:47,560 --> 00:24:56,560
will review the thumbs-up thumbs-down<font color="#CCCCCC"> if</font>

518
00:24:50,260 --> 00:24:58,780
it's valid or<font color="#CCCCCC"> not so here is the</font>

519
00:24:56,560 --> 00:25:01,780
<font color="#E5E5E5">implementation for the portable</font>

520
00:24:58,780 --> 00:25:04,629
executable<font color="#E5E5E5"> sip in user</font><font color="#CCCCCC"> mode</font><font color="#E5E5E5"> and all of</font>

521
00:25:01,780 --> 00:25:07,090
these<font color="#CCCCCC"> are stored in the</font><font color="#E5E5E5"> registry under</font>

522
00:25:04,630 --> 00:25:10,150
specific<font color="#CCCCCC"> goods so the good that you see</font>

523
00:25:07,090 --> 00:25:14,770
<font color="#E5E5E5">highlighted here is specific</font><font color="#CCCCCC"> to portable</font>

524
00:25:10,150 --> 00:25:16,660
executables<font color="#CCCCCC"> and this these</font><font color="#E5E5E5"> are this</font><font color="#CCCCCC"> is</font>

525
00:25:14,770 --> 00:25:19,780
all<font color="#E5E5E5"> of the functionality</font><font color="#CCCCCC"> that this</font>

526
00:25:16,660 --> 00:25:22,300
particular<font color="#E5E5E5"> sip implements and every sip</font>

527
00:25:19,780 --> 00:25:25,510
<font color="#E5E5E5">has a minimum set</font><font color="#CCCCCC"> of requirements that</font>

528
00:25:22,300 --> 00:25:28,149
it has to implement<font color="#CCCCCC"> the one that we are</font>

529
00:25:25,510 --> 00:25:31,510
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be focused on today is</font><font color="#CCCCCC"> crypts</font>

530
00:25:28,150 --> 00:25:34,450
at DLL verify indirect data so when you

531
00:25:31,510 --> 00:25:35,770
call<font color="#CCCCCC"> win verify</font><font color="#E5E5E5"> trust on file well the</font>

532
00:25:34,450 --> 00:25:38,680
first things it will do is it will<font color="#E5E5E5"> call</font>

533
00:25:35,770 --> 00:25:41,290
<font color="#E5E5E5">DLL get signed data message which is</font>

534
00:25:38,680 --> 00:25:43,120
<font color="#E5E5E5">saying hey give me the embedded</font>

535
00:25:41,290 --> 00:25:46,330
signature<font color="#E5E5E5"> or if there's not an embedded</font>

536
00:25:43,120 --> 00:25:49,540
signature go to the see if there's a

537
00:25:46,330 --> 00:25:50,980
respective catalog file entry and give

538
00:25:49,540 --> 00:25:53,990
me that signature<font color="#E5E5E5"> once you give me that</font>

539
00:25:50,980 --> 00:25:56,750
signature<font color="#CCCCCC"> then I'm going</font><font color="#E5E5E5"> to</font>

540
00:25:53,990 --> 00:25:58,640
I'm going to check the<font color="#E5E5E5"> signed hash in</font>

541
00:25:56,750 --> 00:26:00,620
the signature<font color="#E5E5E5"> against the calculated</font>

542
00:25:58,640 --> 00:26:04,910
hash of the file<font color="#CCCCCC"> that you've supplied</font>

543
00:26:00,620 --> 00:26:07,879
<font color="#E5E5E5">and depending upon the sip</font><font color="#CCCCCC"> the</font>

544
00:26:04,910 --> 00:26:09,380
calculated hash for<font color="#E5E5E5"> a PE file is going</font>

545
00:26:07,880 --> 00:26:12,020
<font color="#E5E5E5">to be different than the calculated hash</font>

546
00:26:09,380 --> 00:26:15,320
<font color="#E5E5E5">for a</font><font color="#CCCCCC"> powershell script</font><font color="#E5E5E5"> and so that's</font>

547
00:26:12,020 --> 00:26:17,150
why for<font color="#CCCCCC"> PE</font><font color="#E5E5E5"> s this function has to be</font>

548
00:26:15,320 --> 00:26:19,399
implemented<font color="#E5E5E5"> this is where the hash</font>

549
00:26:17,150 --> 00:26:25,730
calculation is performed<font color="#E5E5E5"> and ultimately</font>

550
00:26:19,400 --> 00:26:28,720
validated against the signed hash now

551
00:26:25,730 --> 00:26:32,809
here's how the function is implemented

552
00:26:28,720 --> 00:26:35,870
<font color="#CCCCCC">it's relatively simple but</font><font color="#E5E5E5"> this</font>

553
00:26:32,809 --> 00:26:37,340
generally is<font color="#CCCCCC"> not like this is</font><font color="#E5E5E5"> not going</font>

554
00:26:35,870 --> 00:26:39,169
<font color="#E5E5E5">to be exposed to like third-party</font>

555
00:26:37,340 --> 00:26:42,080
developers but it's still documented

556
00:26:39,170 --> 00:26:44,750
somewhat which is nice<font color="#CCCCCC"> but basically it</font>

557
00:26:42,080 --> 00:26:48,290
takes two arguments<font color="#CCCCCC"> we won't really</font>

558
00:26:44,750 --> 00:26:50,510
<font color="#E5E5E5">worry about</font><font color="#CCCCCC"> what is supplied in those</font>

559
00:26:48,290 --> 00:26:51,889
arguments<font color="#CCCCCC"> but</font><font color="#E5E5E5"> what was interesting to</font><font color="#CCCCCC"> me</font>

560
00:26:50,510 --> 00:26:54,620
initially<font color="#E5E5E5"> when I started doing</font><font color="#CCCCCC"> this</font>

561
00:26:51,890 --> 00:26:56,750
<font color="#CCCCCC">research was ok so this is called in the</font>

562
00:26:54,620 --> 00:26:58,909
<font color="#E5E5E5">sip and</font><font color="#CCCCCC"> then it ultimately returns a</font>

563
00:26:56,750 --> 00:27:00,860
true<font color="#E5E5E5"> or false</font><font color="#CCCCCC"> I think it's a safe</font>

564
00:26:58,910 --> 00:27:03,490
assumption to<font color="#CCCCCC"> say that if it returns</font>

565
00:27:00,860 --> 00:27:07,490
<font color="#E5E5E5">true then you've passed all the checks</font>

566
00:27:03,490 --> 00:27:09,980
<font color="#E5E5E5">right so it's easy enough to test you</font>

567
00:27:07,490 --> 00:27:13,370
can just<font color="#E5E5E5"> implement your own sip where it</font>

568
00:27:09,980 --> 00:27:16,309
doesn't<font color="#E5E5E5"> do anything with the parameters</font>

569
00:27:13,370 --> 00:27:19,760
or<font color="#E5E5E5"> the arguments passed in it just</font>

570
00:27:16,309 --> 00:27:23,809
returns true so compile<font color="#CCCCCC"> that go</font><font color="#E5E5E5"> hijack</font>

571
00:27:19,760 --> 00:27:25,520
<font color="#CCCCCC">it as an admin and re-implement the your</font>

572
00:27:23,809 --> 00:27:29,000
reimplemented the crypts of<font color="#E5E5E5"> dll verify</font>

573
00:27:25,520 --> 00:27:32,000
indirect data function and what you

574
00:27:29,000 --> 00:27:35,330
would get<font color="#E5E5E5"> is hopefully that something</font>

575
00:27:32,000 --> 00:27:36,920
<font color="#CCCCCC">that has a signature applied to it where</font>

576
00:27:35,330 --> 00:27:39,980
<font color="#E5E5E5">its integrity would</font><font color="#CCCCCC"> have been</font>

577
00:27:36,920 --> 00:27:42,970
invalidated<font color="#E5E5E5"> would then be validated now</font>

578
00:27:39,980 --> 00:27:46,030
I'm generally<font color="#E5E5E5"> not a big fan of dropping</font>

579
00:27:42,970 --> 00:27:47,929
unsigned<font color="#E5E5E5"> Pease to disk if I can avoid</font><font color="#CCCCCC"> it</font>

580
00:27:46,030 --> 00:27:49,100
<font color="#E5E5E5">there's also kind of a chicken</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

581
00:27:47,929 --> 00:27:52,770
<font color="#E5E5E5">egg</font><font color="#CCCCCC"> problem where it's like you're</font>

582
00:27:49,100 --> 00:27:55,780
dropping an unsigned<font color="#E5E5E5"> DLL that performs</font>

583
00:27:52,770 --> 00:27:58,300
hache validation for<font color="#CCCCCC"> Pease and an</font>

584
00:27:55,780 --> 00:28:01,330
application whitelisting scenario<font color="#E5E5E5"> it's</font>

585
00:27:58,300 --> 00:28:03,129
kind of a weird<font color="#E5E5E5"> scenario there so I</font>

586
00:28:01,330 --> 00:28:06,820
thought<font color="#E5E5E5"> to myself like could I possibly</font>

587
00:28:03,130 --> 00:28:09,190
avoid this<font color="#CCCCCC"> dropping my own DLL that</font>

588
00:28:06,820 --> 00:28:11,730
<font color="#CCCCCC">would hijack</font><font color="#E5E5E5"> the verification function</font>

589
00:28:09,190 --> 00:28:15,580
and sure<font color="#CCCCCC"> enough</font><font color="#E5E5E5"> I could so I was just</font>

590
00:28:11,730 --> 00:28:17,830
<font color="#E5E5E5">browsing through and I</font><font color="#CCCCCC"> de a bunch</font><font color="#E5E5E5"> of a</font>

591
00:28:15,580 --> 00:28:19,270
bunch<font color="#E5E5E5"> of exports because that's all you</font>

592
00:28:17,830 --> 00:28:21,669
need to do in the<font color="#E5E5E5"> registry is like you</font>

593
00:28:19,270 --> 00:28:25,210
point the<font color="#E5E5E5"> DLL verification function to</font>

594
00:28:21,670 --> 00:28:26,860
the DLL path and the<font color="#CCCCCC"> func the exported</font>

595
00:28:25,210 --> 00:28:29,440
function name that implements the

596
00:28:26,860 --> 00:28:32,350
verification function so I looked<font color="#CCCCCC"> for an</font>

597
00:28:29,440 --> 00:28:36,070
exported function in<font color="#E5E5E5"> signed Microsoft</font>

598
00:28:32,350 --> 00:28:37,689
code that takes<font color="#CCCCCC"> two arguments</font><font color="#E5E5E5"> basically</font>

599
00:28:36,070 --> 00:28:39,429
does<font color="#CCCCCC"> nothing to</font><font color="#E5E5E5"> the arguments like</font>

600
00:28:37,690 --> 00:28:40,420
doesn't overwrite any other pointers

601
00:28:39,430 --> 00:28:43,120
supplied to it

602
00:28:40,420 --> 00:28:45,730
so in minimal to no side-effects and

603
00:28:43,120 --> 00:28:47,709
returns<font color="#E5E5E5"> the equivalent of true and the</font>

604
00:28:45,730 --> 00:28:49,660
first one<font color="#E5E5E5"> that I found was the</font><font color="#CCCCCC"> DB</font><font color="#E5E5E5"> GUI</font>

605
00:28:47,710 --> 00:28:51,280
continued export function<font color="#E5E5E5"> in ntdll</font>

606
00:28:49,660 --> 00:28:55,630
<font color="#CCCCCC">there's going to be a whole host of</font>

607
00:28:51,280 --> 00:28:57,730
other candidates<font color="#E5E5E5"> code reuse gadgets like</font>

608
00:28:55,630 --> 00:28:59,920
<font color="#CCCCCC">this</font><font color="#E5E5E5"> this was the first one</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> found</font>

609
00:28:57,730 --> 00:29:02,440
so it's the<font color="#E5E5E5"> one that kind of stuck with</font>

610
00:28:59,920 --> 00:29:07,840
<font color="#E5E5E5">me</font><font color="#CCCCCC"> all right</font>

611
00:29:02,440 --> 00:29:11,490
so<font color="#CCCCCC"> should be the fun part here we're</font>

612
00:29:07,840 --> 00:29:11,490
going<font color="#CCCCCC"> to perform this attack</font>

613
00:29:12,120 --> 00:29:19,219
we have two programs<font color="#E5E5E5"> here we're going to</font>

614
00:29:14,039 --> 00:29:19,220
<font color="#E5E5E5">work with</font><font color="#CCCCCC"> hello</font><font color="#E5E5E5"> world one which is just</font>

615
00:29:19,399 --> 00:29:26,100
simple hello world program<font color="#E5E5E5"> dotnet</font>

616
00:29:22,740 --> 00:29:29,039
program<font color="#E5E5E5"> it is not signed but we are</font>

617
00:29:26,100 --> 00:29:30,980
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to effectively sign it by</font>

618
00:29:29,039 --> 00:29:37,259
Microsoft

619
00:29:30,980 --> 00:29:41,130
<font color="#E5E5E5">okay so first up well let's just go</font>

620
00:29:37,259 --> 00:29:44,039
ahead and<font color="#E5E5E5"> let's identify the digital</font>

621
00:29:41,130 --> 00:29:46,799
signature that we want to<font color="#E5E5E5"> apply to hello</font>

622
00:29:44,039 --> 00:29:53,570
world<font color="#CCCCCC"> one eggsy so I would like</font><font color="#E5E5E5"> to apply</font>

623
00:29:46,799 --> 00:29:53,570
<font color="#CCCCCC">the signature of kernel32 to hello</font><font color="#E5E5E5"> world</font>

624
00:29:54,019 --> 00:29:59,909
<font color="#E5E5E5">okay so let's look at the signature here</font>

625
00:29:58,259 --> 00:30:04,799
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> using get authentic code signature</font>

626
00:29:59,909 --> 00:30:08,190
and what<font color="#CCCCCC"> I'm ultimately</font><font color="#E5E5E5"> interested in is</font>

627
00:30:04,799 --> 00:30:10,980
a few things the thumbprint value<font color="#E5E5E5"> the</font>

628
00:30:08,190 --> 00:30:16,139
thumbprint<font color="#E5E5E5"> is the sha-1</font><font color="#CCCCCC"> hash of the</font>

629
00:30:10,980 --> 00:30:17,759
certificate<font color="#CCCCCC"> and with most signed code</font>

630
00:30:16,139 --> 00:30:19,500
<font color="#E5E5E5">there's going to be a certificate chain</font>

631
00:30:17,759 --> 00:30:21,120
<font color="#CCCCCC">so they'll be the leaf certificate at</font>

632
00:30:19,500 --> 00:30:23,190
<font color="#E5E5E5">the bottom which is</font><font color="#CCCCCC"> what was actually</font>

633
00:30:21,120 --> 00:30:24,689
<font color="#E5E5E5">used to sign the code and then there</font>

634
00:30:23,190 --> 00:30:25,950
<font color="#E5E5E5">will likely be</font><font color="#CCCCCC"> an intermediate</font>

635
00:30:24,690 --> 00:30:28,350
certificate and then the root

636
00:30:25,950 --> 00:30:30,870
certificates<font color="#E5E5E5"> I'm interested in the</font>

637
00:30:28,350 --> 00:30:33,750
signer certificate<font color="#CCCCCC"> well I'm interested</font>

638
00:30:30,870 --> 00:30:38,370
<font color="#E5E5E5">in the whole chain but if I am</font><font color="#CCCCCC"> to</font>

639
00:30:33,750 --> 00:30:41,519
validate<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I am having a 100% match</font>

640
00:30:38,370 --> 00:30:43,379
of the signature<font color="#E5E5E5"> in hello world one</font><font color="#CCCCCC"> two</font>

641
00:30:41,519 --> 00:30:48,570
kernel32<font color="#E5E5E5"> then I'm gonna go off the</font>

642
00:30:43,379 --> 00:30:50,759
<font color="#E5E5E5">thumbprint value here okay</font>

643
00:30:48,570 --> 00:30:56,309
another<font color="#E5E5E5"> thing worth noting is the status</font>

644
00:30:50,759 --> 00:30:58,789
is valid<font color="#E5E5E5"> say</font><font color="#CCCCCC"> mister verified and the</font>

645
00:30:56,309 --> 00:31:03,629
signature type in this case is<font color="#CCCCCC"> catalogue</font>

646
00:30:58,789 --> 00:31:05,980
now take note<font color="#CCCCCC"> of that</font>

647
00:31:03,630 --> 00:31:07,230
because<font color="#E5E5E5"> there there's a</font><font color="#CCCCCC"> few things going</font>

648
00:31:05,980 --> 00:31:10,030
<font color="#E5E5E5">on</font><font color="#CCCCCC"> here</font>

649
00:31:07,230 --> 00:31:11,950
so here's kernel32<font color="#E5E5E5"> the legitimate one</font>

650
00:31:10,030 --> 00:31:14,500
<font color="#E5E5E5">and when you</font><font color="#CCCCCC"> right-click</font><font color="#E5E5E5"> go to</font>

651
00:31:11,950 --> 00:31:17,230
<font color="#CCCCCC">properties of any signed file and you</font>

652
00:31:14,500 --> 00:31:19,960
see the digital signature<font color="#CCCCCC"> tab that means</font>

653
00:31:17,230 --> 00:31:24,100
that it<font color="#E5E5E5"> has an embedded authentic code</font>

654
00:31:19,960 --> 00:31:26,309
signature in the file itself<font color="#CCCCCC"> I've heard</font>

655
00:31:24,100 --> 00:31:29,350
a<font color="#E5E5E5"> bunch of</font><font color="#CCCCCC"> people say hey what the</font><font color="#E5E5E5"> hell</font>

656
00:31:26,309 --> 00:31:31,149
<font color="#E5E5E5">I'm looking at</font><font color="#CCCCCC"> notepad.exe</font><font color="#E5E5E5"> here and</font>

657
00:31:29,350 --> 00:31:33,100
there's no digital<font color="#E5E5E5"> signature tab</font>

658
00:31:31,150 --> 00:31:36,340
what the hell Microsoft like why<font color="#CCCCCC"> don't</font>

659
00:31:33,100 --> 00:31:38,408
<font color="#E5E5E5">you sign your well it</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> is</font>

660
00:31:36,340 --> 00:31:41,949
signed<font color="#E5E5E5"> but it's probably</font><font color="#CCCCCC"> catalogs signed</font>

661
00:31:38,409 --> 00:31:43,600
so<font color="#CCCCCC"> notepad.exe</font><font color="#E5E5E5"> as an example does not</font>

662
00:31:41,950 --> 00:31:48,220
have an embedded authentic code

663
00:31:43,600 --> 00:31:51,189
<font color="#E5E5E5">signature in</font><font color="#CCCCCC"> it rather</font><font color="#E5E5E5"> the hash the</font>

664
00:31:48,220 --> 00:31:55,210
authentic code hash of notepad.exe<font color="#E5E5E5"> is</font>

665
00:31:51,190 --> 00:31:57,340
stored in a catalog file which is signed

666
00:31:55,210 --> 00:31:59,289
by Microsoft<font color="#E5E5E5"> that dot cat file has the</font>

667
00:31:57,340 --> 00:32:01,658
<font color="#E5E5E5">embedded often an authentic code</font>

668
00:31:59,289 --> 00:32:04,330
<font color="#E5E5E5">signature in it and the service that</font><font color="#CCCCCC"> is</font>

669
00:32:01,659 --> 00:32:09,039
required<font color="#CCCCCC"> to do catalog validation is the</font>

670
00:32:04,330 --> 00:32:10,418
cryptography service it's a crypt<font color="#E5E5E5"> SVC so</font>

671
00:32:09,039 --> 00:32:13,210
it's kind of it<font color="#E5E5E5"> would be kind</font><font color="#CCCCCC"> of</font>

672
00:32:10,419 --> 00:32:17,070
<font color="#E5E5E5">interesting if you were to disable</font>

673
00:32:13,210 --> 00:32:20,860
<font color="#E5E5E5">crypts SVC if that might throw off some</font>

674
00:32:17,070 --> 00:32:23,678
<font color="#E5E5E5">some security vendors</font><font color="#CCCCCC"> where all of a</font>

675
00:32:20,860 --> 00:32:27,510
sudden the vast majority<font color="#CCCCCC"> of the Windows</font>

676
00:32:23,679 --> 00:32:27,510
OS code is no<font color="#E5E5E5"> longer signed</font>

677
00:32:28,109 --> 00:32:39,759
<font color="#E5E5E5">okay now let's also look</font><font color="#CCCCCC"> at the</font>

678
00:32:32,409 --> 00:32:44,019
signature in<font color="#CCCCCC"> Sig check as well just for</font>

679
00:32:39,759 --> 00:32:46,089
comparison now sorry let's go<font color="#E5E5E5"> back here</font>

680
00:32:44,019 --> 00:32:48,219
let's let's<font color="#CCCCCC"> look at the thumbprint</font><font color="#E5E5E5"> that</font>

681
00:32:46,089 --> 00:32:50,440
<font color="#CCCCCC">was</font><font color="#E5E5E5"> reported by get off that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> code</font>

682
00:32:48,219 --> 00:32:55,570
signature<font color="#E5E5E5"> so one four or five nine and</font>

683
00:32:50,440 --> 00:33:00,519
the<font color="#CCCCCC"> one</font><font color="#E5E5E5"> reported by</font><font color="#CCCCCC"> sick check</font><font color="#E5E5E5"> six</font><font color="#CCCCCC"> see</font>

684
00:32:55,570 --> 00:33:06,489
ad so what's with<font color="#CCCCCC"> its the discrepancy</font>

685
00:33:00,519 --> 00:33:10,119
here so it turns<font color="#E5E5E5"> out that sig check will</font>

686
00:33:06,489 --> 00:33:12,849
default<font color="#E5E5E5"> to pulling the signature well</font>

687
00:33:10,119 --> 00:33:15,279
will default to pulling the and<font color="#E5E5E5"> embedded</font>

688
00:33:12,849 --> 00:33:16,539
authentic code signature so kernel32 is

689
00:33:15,279 --> 00:33:18,789
an<font color="#E5E5E5"> embedded authentic code signature</font>

690
00:33:16,539 --> 00:33:20,739
<font color="#CCCCCC">sick check will be like hey here's a</font>

691
00:33:18,789 --> 00:33:22,629
signature here<font color="#E5E5E5"> that's what I'm going to</font>

692
00:33:20,739 --> 00:33:25,809
<font color="#CCCCCC">validates</font><font color="#E5E5E5"> get authentic code signature</font>

693
00:33:22,629 --> 00:33:32,080
<font color="#E5E5E5">and PowerShell it defaults to looking up</font>

694
00:33:25,809 --> 00:33:33,580
<font color="#E5E5E5">catalog signatures first so to the</font>

695
00:33:32,080 --> 00:33:37,539
uninitiated that would be a very

696
00:33:33,580 --> 00:33:39,549
<font color="#E5E5E5">confusing thing to see</font>

697
00:33:37,539 --> 00:33:42,940
so now as an attacker<font color="#E5E5E5"> I've to</font><font color="#CCCCCC"> ask myself</font>

698
00:33:39,549 --> 00:33:45,158
which certificate do<font color="#E5E5E5"> I want to clone do</font>

699
00:33:42,940 --> 00:33:47,589
I want to clone the embedded authentic

700
00:33:45,159 --> 00:33:52,499
code<font color="#E5E5E5"> signature or do I want to clone the</font>

701
00:33:47,589 --> 00:33:55,629
<font color="#E5E5E5">catalog signature</font><font color="#CCCCCC"> I can do both I</font>

702
00:33:52,499 --> 00:33:57,219
there's really no specific rhyme or

703
00:33:55,629 --> 00:34:01,869
reason why I might choose<font color="#CCCCCC"> one</font><font color="#E5E5E5"> over the</font>

704
00:33:57,219 --> 00:34:05,769
other<font color="#CCCCCC"> one</font><font color="#E5E5E5"> consideration that I would</font>

705
00:34:01,869 --> 00:34:08,949
have as an attack where it<font color="#E5E5E5"> B is is the</font>

706
00:34:05,769 --> 00:34:10,809
file<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> signed and so if something</font>

707
00:34:08,949 --> 00:34:13,359
<font color="#CCCCCC">is</font><font color="#E5E5E5"> Windows signed and get authentic code</font>

708
00:34:10,809 --> 00:34:15,940
signature would show that is OS binary

709
00:34:13,359 --> 00:34:18,339
would return true<font color="#E5E5E5"> and when something is</font>

710
00:34:15,940 --> 00:34:20,500
<font color="#CCCCCC">Windows signed basically the</font><font color="#E5E5E5"> only</font>

711
00:34:18,339 --> 00:34:22,299
difference between like regular

712
00:34:20,500 --> 00:34:23,850
<font color="#E5E5E5">Microsoft code signing search and a</font>

713
00:34:22,299 --> 00:34:25,949
<font color="#E5E5E5">Windows</font>

714
00:34:23,850 --> 00:34:28,799
and when something<font color="#CCCCCC"> is window signed is</font>

715
00:34:25,949 --> 00:34:32,310
there's an enhanced key usage<font color="#E5E5E5"> value and</font>

716
00:34:28,800 --> 00:34:38,550
OID<font color="#E5E5E5"> that just says</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> I can show</font><font color="#CCCCCC"> you</font>

717
00:34:32,310 --> 00:34:44,239
here<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> use certificates</font><font color="#CCCCCC"> you go to</font>

718
00:34:38,550 --> 00:34:47,600
details<font color="#E5E5E5"> enhance key usage and if it has</font>

719
00:34:44,239 --> 00:34:50,040
it has windows system component

720
00:34:47,600 --> 00:34:57,960
<font color="#E5E5E5">verification that oh</font><font color="#CCCCCC"> I D in</font><font color="#E5E5E5"> it then that</font>

721
00:34:50,040 --> 00:35:00,080
is like an inbox<font color="#CCCCCC"> windows sign binary all</font>

722
00:34:57,960 --> 00:35:00,080
<font color="#CCCCCC">right</font>

723
00:35:00,730 --> 00:35:08,599
so let's move on I have decided that I

724
00:35:05,960 --> 00:35:11,839
want to apply<font color="#CCCCCC"> the</font><font color="#E5E5E5"> catalog signature to</font>

725
00:35:08,599 --> 00:35:14,900
hello world<font color="#CCCCCC"> one don eggsy</font><font color="#E5E5E5"> so let's go</font>

726
00:35:11,839 --> 00:35:17,980
ahead and<font color="#CCCCCC"> do that now what I need to</font>

727
00:35:14,900 --> 00:35:22,400
<font color="#E5E5E5">find is the respective catalog file for</font>

728
00:35:17,980 --> 00:35:23,900
<font color="#CCCCCC">kernel32 only the</font><font color="#E5E5E5"> problem is that SiC</font>

729
00:35:22,400 --> 00:35:26,900
check doesn't<font color="#E5E5E5"> want to tell me what it is</font>

730
00:35:23,900 --> 00:35:32,569
<font color="#CCCCCC">because it's defaulting</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> authentic</font>

731
00:35:26,900 --> 00:35:34,819
code signature<font color="#E5E5E5"> so there's a dumb hack</font>

732
00:35:32,569 --> 00:35:36,410
that I'll do when something has an

733
00:35:34,819 --> 00:35:41,000
embedded<font color="#E5E5E5"> authentic code signature in the</font>

734
00:35:36,410 --> 00:35:44,410
PE<font color="#E5E5E5"> within the</font><font color="#CCCCCC"> P file format and the the</font>

735
00:35:41,000 --> 00:35:48,859
image data directory<font color="#CCCCCC"> table</font><font color="#E5E5E5"> and the</font>

736
00:35:44,410 --> 00:35:51,379
security directory will be<font color="#E5E5E5"> a virtual</font>

737
00:35:48,859 --> 00:35:53,150
address<font color="#CCCCCC"> and a size so it turns</font><font color="#E5E5E5"> out that</font>

738
00:35:51,380 --> 00:35:55,880
this<font color="#CCCCCC"> is the only directory in the</font><font color="#E5E5E5"> P that</font>

739
00:35:53,150 --> 00:35:59,000
<font color="#CCCCCC">is not in our VA a relative virtual</font>

740
00:35:55,880 --> 00:36:03,349
address<font color="#E5E5E5"> it's actually a file offset so</font>

741
00:35:59,000 --> 00:36:08,150
this is the file offset<font color="#E5E5E5"> to the signature</font>

742
00:36:03,349 --> 00:36:12,619
blob in kernel32 and this is the size of

743
00:36:08,150 --> 00:36:15,200
said blob<font color="#E5E5E5"> now let me copy copy the file</font>

744
00:36:12,619 --> 00:36:20,200
offset and now what I'm going<font color="#E5E5E5"> to do is</font>

745
00:36:15,200 --> 00:36:20,200
I'm<font color="#CCCCCC"> going to clear</font><font color="#E5E5E5"> this out oops</font>

746
00:36:22,970 --> 00:36:31,640
clear that<font color="#E5E5E5"> out go to my offset where the</font>

747
00:36:26,599 --> 00:36:33,140
signature blob is and the signature

748
00:36:31,640 --> 00:36:38,799
blobs will always be at the end<font color="#E5E5E5"> of the</font>

749
00:36:33,140 --> 00:36:38,799
PE should always be at the end of the<font color="#E5E5E5"> P</font>

750
00:36:38,950 --> 00:36:43,450
<font color="#E5E5E5">okay so I have stripped the embedded</font>

751
00:36:41,780 --> 00:36:47,410
authentic code<font color="#E5E5E5"> signature from the</font>

752
00:36:43,450 --> 00:36:47,410
kernel32 that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> copied</font>

753
00:36:51,790 --> 00:37:03,100
and if I do<font color="#CCCCCC"> sick check on the</font><font color="#E5E5E5"> stripped</font>

754
00:36:57,640 --> 00:37:05,259
file<font color="#E5E5E5"> it is still signed the embedded</font>

755
00:37:03,100 --> 00:37:08,200
authentic code signature blob and the

756
00:37:05,260 --> 00:37:10,600
offset in size is<font color="#E5E5E5"> not calculated as part</font>

757
00:37:08,200 --> 00:37:15,669
<font color="#E5E5E5">of the signature</font><font color="#CCCCCC"> so that's why I can</font>

758
00:37:10,600 --> 00:37:17,890
remove those fields and blobs from the

759
00:37:15,670 --> 00:37:20,619
PE<font color="#E5E5E5"> and it still validates just fine</font><font color="#CCCCCC"> so</font>

760
00:37:17,890 --> 00:37:22,180
now when I run<font color="#CCCCCC"> SiC check on it it has no</font>

761
00:37:20,619 --> 00:37:24,460
embedded authentic code signature<font color="#E5E5E5"> so</font>

762
00:37:22,180 --> 00:37:26,799
then it falls back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> catalogue</font>

763
00:37:24,460 --> 00:37:31,410
validation where it shows me the

764
00:37:26,800 --> 00:37:34,810
respective catalog file where kernel32

765
00:37:31,410 --> 00:37:39,220
has<font color="#E5E5E5"> assigned hash</font><font color="#CCCCCC"> alright so I'm</font><font color="#E5E5E5"> going</font>

766
00:37:34,810 --> 00:37:42,220
to<font color="#E5E5E5"> work with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and I've copied that</font>

767
00:37:39,220 --> 00:37:50,230
catalog file locally and now what I want

768
00:37:42,220 --> 00:37:53,220
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do is get the size of the catalog</font>

769
00:37:50,230 --> 00:37:53,220
<font color="#E5E5E5">blob</font>

770
00:37:55,400 --> 00:38:02,420
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I want to get</font><font color="#E5E5E5"> that in hex so we are</font>

771
00:37:59,569 --> 00:38:04,970
going<font color="#E5E5E5"> to manually construct a embedded</font>

772
00:38:02,420 --> 00:38:08,869
authentic code signature blob<font color="#E5E5E5"> using the</font>

773
00:38:04,970 --> 00:38:13,490
catalog file itself<font color="#E5E5E5"> as that</font><font color="#CCCCCC"> blob</font><font color="#E5E5E5"> okay so</font>

774
00:38:08,869 --> 00:38:15,980
we<font color="#E5E5E5"> need to note the size of the catalog</font>

775
00:38:13,490 --> 00:38:22,368
file which we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to stuff into</font><font color="#E5E5E5"> the</font>

776
00:38:15,980 --> 00:38:24,529
hello world one executable<font color="#CCCCCC"> and when</font>

777
00:38:22,369 --> 00:38:27,799
there's the file offset<font color="#E5E5E5"> that goes to the</font>

778
00:38:24,529 --> 00:38:30,319
authentic code signature blob<font color="#CCCCCC"> it's a</font>

779
00:38:27,799 --> 00:38:31,490
simple<font color="#CCCCCC"> structure that's required to be</font>

780
00:38:30,319 --> 00:38:34,759
there it's the wind certificate

781
00:38:31,490 --> 00:38:37,669
structure<font color="#E5E5E5"> so the first D word is the</font>

782
00:38:34,759 --> 00:38:41,180
size of the<font color="#CCCCCC"> total size of</font><font color="#E5E5E5"> that blob the</font>

783
00:38:37,670 --> 00:38:44,029
second word is the W revision field

784
00:38:41,180 --> 00:38:45,980
which is going to<font color="#E5E5E5"> be the value</font><font color="#CCCCCC"> 2 which</font>

785
00:38:44,029 --> 00:38:49,609
refers to wind certificate revision<font color="#CCCCCC"> 2</font>

786
00:38:45,980 --> 00:38:51,559
and then<font color="#E5E5E5"> hex 200 for the certificate</font>

787
00:38:49,609 --> 00:38:55,328
type which just says this is a signed

788
00:38:51,559 --> 00:38:57,319
blob<font color="#E5E5E5"> that follows and then the blob</font>

789
00:38:55,329 --> 00:39:02,660
<font color="#E5E5E5">follows in this case</font><font color="#CCCCCC"> that'll</font><font color="#E5E5E5"> be the</font>

790
00:38:57,319 --> 00:39:07,450
<font color="#E5E5E5">catalog</font><font color="#CCCCCC"> the catalog blob okay</font><font color="#E5E5E5"> so let's</font>

791
00:39:02,660 --> 00:39:12,230
look at the signature<font color="#CCCCCC"> of hello world 1</font>

792
00:39:07,450 --> 00:39:14,808
so it should not be signed<font color="#E5E5E5"> right now and</font>

793
00:39:12,230 --> 00:39:19,190
here's what we're going<font color="#CCCCCC"> to do so I have</font>

794
00:39:14,809 --> 00:39:21,380
already<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of pre pre calculated the</font>

795
00:39:19,190 --> 00:39:24,279
the header for my wind certificate blob

796
00:39:21,380 --> 00:39:27,410
again this<font color="#E5E5E5"> is the size of the blob</font>

797
00:39:24,279 --> 00:39:30,309
certificate<font color="#CCCCCC"> revision and sort of</font><font color="#E5E5E5"> get</font>

798
00:39:27,410 --> 00:39:30,308
type here

799
00:39:30,510 --> 00:39:38,040
so now let's manually<font color="#CCCCCC"> crafts are our</font>

800
00:39:34,950 --> 00:39:41,370
signature<font color="#CCCCCC"> and the first thing I'm going</font>

801
00:39:38,040 --> 00:39:48,630
to do is go<font color="#E5E5E5"> to the security directory</font>

802
00:39:41,370 --> 00:39:56,000
and I need to specify the<font color="#E5E5E5"> size the size</font>

803
00:39:48,630 --> 00:39:56,000
of the whole blob<font color="#CCCCCC"> okay</font>

804
00:39:59,410 --> 00:40:02,129
<font color="#E5E5E5">okay</font>

805
00:40:02,319 --> 00:40:04,380
<font color="#CCCCCC">Oh</font>

806
00:40:04,650 --> 00:40:08,890
I'm wrong

807
00:40:06,470 --> 00:40:12,450
that's

808
00:40:08,890 --> 00:40:12,450
okay<font color="#CCCCCC"> says the blow up</font><font color="#E5E5E5"> there</font>

809
00:40:13,560 --> 00:40:21,770
and the offset to the<font color="#E5E5E5"> blob which in</font>

810
00:40:18,900 --> 00:40:22,890
hello world<font color="#E5E5E5"> one eggsy is going to be</font>

811
00:40:21,770 --> 00:40:28,100
<font color="#E5E5E5">zero</font>

812
00:40:22,890 --> 00:40:28,100
<font color="#CCCCCC">800 okay</font>

813
00:40:32,800 --> 00:40:35,430
<font color="#E5E5E5">okay</font>

814
00:40:37,280 --> 00:40:43,940
so far so good<font color="#CCCCCC"> I think now we'll go to</font>

815
00:40:41,660 --> 00:40:46,750
the<font color="#E5E5E5"> end and start crafting that</font>

816
00:40:43,940 --> 00:40:46,750
<font color="#E5E5E5">signature</font>

817
00:40:49,980 --> 00:40:54,500
<font color="#E5E5E5">okay edit</font>

818
00:40:59,940 --> 00:41:02,539
yeah

819
00:41:04,880 --> 00:41:10,420
all right so<font color="#CCCCCC"> II for a 1e for a one</font>

820
00:41:12,579 --> 00:41:14,670
and

821
00:41:16,200 --> 00:41:19,460
<font color="#E5E5E5">let's it was so</font>

822
00:41:20,420 --> 00:41:25,940
now there are some tools to<font color="#E5E5E5"> automate</font>

823
00:41:22,739 --> 00:41:30,450
this process<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to show you the</font>

824
00:41:25,940 --> 00:41:33,749
manual way to do it in case you<font color="#CCCCCC"> had any</font>

825
00:41:30,450 --> 00:41:36,078
<font color="#E5E5E5">questions all right</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> that looks</font>

826
00:41:33,749 --> 00:41:41,999
right<font color="#E5E5E5"> now let me take the catalog blob</font>

827
00:41:36,079 --> 00:41:46,619
<font color="#E5E5E5">and just stuff</font><font color="#CCCCCC"> that to the end of the</font>

828
00:41:41,999 --> 00:41:55,468
wind certificate structure and fingers

829
00:41:46,619 --> 00:41:58,140
crossed<font color="#E5E5E5"> okay so we've made</font><font color="#CCCCCC"> progress</font><font color="#E5E5E5"> now</font>

830
00:41:55,469 --> 00:42:04,499
<font color="#E5E5E5">notice the status the status is hash</font>

831
00:41:58,140 --> 00:42:07,019
mismatch<font color="#E5E5E5"> okay so this is the operating</font>

832
00:42:04,499 --> 00:42:09,930
system<font color="#CCCCCC"> working as it should right</font><font color="#E5E5E5"> you</font>

833
00:42:07,019 --> 00:42:12,660
can't<font color="#E5E5E5"> just take a signature</font><font color="#CCCCCC"> apply it to</font>

834
00:42:09,930 --> 00:42:14,519
<font color="#E5E5E5">your code and it's automatically going</font>

835
00:42:12,660 --> 00:42:17,460
<font color="#E5E5E5">to validate properly</font><font color="#CCCCCC"> now there's plenty</font>

836
00:42:14,519 --> 00:42:19,140
<font color="#E5E5E5">of malware that does this</font><font color="#CCCCCC"> in fact the</font>

837
00:42:17,460 --> 00:42:21,599
most recent example I can think<font color="#CCCCCC"> of was</font>

838
00:42:19,140 --> 00:42:23,190
bad<font color="#CCCCCC"> rabbit where they took mini cats</font><font color="#E5E5E5"> and</font>

839
00:42:21,599 --> 00:42:25,200
then they took one of<font color="#E5E5E5"> the embedded</font>

840
00:42:23,190 --> 00:42:27,329
<font color="#CCCCCC">authentic code signatures from an old</font>

841
00:42:25,200 --> 00:42:30,868
sysinternals utility<font color="#E5E5E5"> and just applied it</font>

842
00:42:27,329 --> 00:42:32,219
<font color="#E5E5E5">to mimic cats presumably to evade some</font>

843
00:42:30,869 --> 00:42:35,849
security products<font color="#E5E5E5"> I don't really know</font>

844
00:42:32,219 --> 00:42:38,099
but at the<font color="#CCCCCC"> end of the day the it's not</font>

845
00:42:35,849 --> 00:42:40,349
<font color="#E5E5E5">going to validate properly</font><font color="#CCCCCC"> even though</font>

846
00:42:38,099 --> 00:42:45,019
it<font color="#E5E5E5"> will still kind of look like a</font>

847
00:42:40,349 --> 00:42:49,680
Microsoft file so our goal now is to

848
00:42:45,019 --> 00:42:55,910
take the hash<font color="#E5E5E5"> mismatch status and make</font>

849
00:42:49,680 --> 00:42:55,910
it valid<font color="#E5E5E5"> okay so this is the easy part</font>

850
00:42:59,000 --> 00:43:07,590
okay so here<font color="#E5E5E5"> is the path to</font><font color="#CCCCCC"> the SIP</font>

851
00:43:03,300 --> 00:43:09,720
verification<font color="#CCCCCC"> portion of the registry</font><font color="#E5E5E5"> and</font>

852
00:43:07,590 --> 00:43:11,880
note<font color="#E5E5E5"> I don't know if you</font><font color="#CCCCCC"> remember the</font>

853
00:43:09,720 --> 00:43:14,819
<font color="#CCCCCC">gooood from before but</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a good</font>

854
00:43:11,880 --> 00:43:18,650
that<font color="#E5E5E5"> is specific for PE validation okay</font>

855
00:43:14,820 --> 00:43:21,000
<font color="#CCCCCC">and all we're going to do is instead of</font>

856
00:43:18,650 --> 00:43:24,030
what was<font color="#E5E5E5"> there before which is win trust</font>

857
00:43:21,000 --> 00:43:25,470
<font color="#CCCCCC">DLL</font><font color="#E5E5E5"> and then like crip sip DLL verify</font>

858
00:43:24,030 --> 00:43:28,560
indirect data or<font color="#E5E5E5"> something like that</font>

859
00:43:25,470 --> 00:43:31,410
we're gonna hijack it<font color="#E5E5E5"> with the deep GUI</font>

860
00:43:28,560 --> 00:43:33,240
<font color="#E5E5E5">continue export function that just like</font>

861
00:43:31,410 --> 00:43:38,220
gives a<font color="#CCCCCC"> thumbs-up returns true basically</font>

862
00:43:33,240 --> 00:43:42,979
<font color="#CCCCCC">I need to do this</font><font color="#E5E5E5"> from an elevated</font>

863
00:43:38,220 --> 00:43:42,980
<font color="#E5E5E5">prompts okay</font>

864
00:43:43,730 --> 00:43:48,310
let's start up<font color="#E5E5E5"> a new process</font>

865
00:43:55,700 --> 00:43:58,480
and we're good

866
00:44:03,230 --> 00:44:08,059
now just<font color="#CCCCCC"> just to show you</font><font color="#E5E5E5"> that I'm</font><font color="#CCCCCC"> not</font>

867
00:44:05,630 --> 00:44:10,280
cheating and<font color="#CCCCCC"> that I'm not taking</font>

868
00:44:08,059 --> 00:44:12,470
<font color="#CCCCCC">advantage of get authentic code</font>

869
00:44:10,280 --> 00:44:17,859
signature<font color="#E5E5E5"> and</font><font color="#CCCCCC"> PowerShell let's look at</font>

870
00:44:12,470 --> 00:44:17,859
it<font color="#E5E5E5"> in sick</font><font color="#CCCCCC"> Jack</font>

871
00:44:20,780 --> 00:44:30,020
yet we're good signed<font color="#E5E5E5"> Microsoft now here</font>

872
00:44:27,110 --> 00:44:34,190
<font color="#E5E5E5">here's a tricky part so digital</font>

873
00:44:30,020 --> 00:44:36,710
<font color="#E5E5E5">signature in the Explorer UI shows it's</font>

874
00:44:34,190 --> 00:44:39,800
<font color="#CCCCCC">not valid so you would need</font><font color="#E5E5E5"> to restart</font>

875
00:44:36,710 --> 00:44:42,010
<font color="#E5E5E5">the Explorer process for the hijack to</font>

876
00:44:39,800 --> 00:44:44,660
take effect

877
00:44:42,010 --> 00:44:47,090
I'm not going to restart<font color="#E5E5E5"> Explorer right</font>

878
00:44:44,660 --> 00:44:49,940
now but<font color="#CCCCCC"> just take my</font><font color="#E5E5E5"> word that once it's</font>

879
00:44:47,090 --> 00:44:55,370
restarted then it will be a perfectly

880
00:44:49,940 --> 00:44:59,410
valid signature from the context of

881
00:44:55,370 --> 00:44:59,410
Explorer<font color="#CCCCCC"> ok</font>

882
00:44:59,970 --> 00:45:03,848
so

883
00:45:02,140 --> 00:45:07,710
<font color="#E5E5E5">are there any</font><font color="#CCCCCC"> questions about that</font>

884
00:45:03,849 --> 00:45:07,710
process<font color="#CCCCCC"> before I get</font><font color="#E5E5E5"> into the next</font><font color="#CCCCCC"> mo</font>

885
00:45:11,730 --> 00:45:20,130
so again<font color="#E5E5E5"> I crafted the wind certificate</font>

886
00:45:16,109 --> 00:45:22,680
blob<font color="#CCCCCC"> now the easy thing to do would have</font>

887
00:45:20,130 --> 00:45:25,280
been to just<font color="#E5E5E5"> copy and paste the embedded</font>

888
00:45:22,680 --> 00:45:30,118
authentic code signature<font color="#E5E5E5"> in kernel32.dll</font>

889
00:45:25,280 --> 00:45:30,540
<font color="#CCCCCC">to hello world one eggsy the choice is</font>

890
00:45:30,119 --> 00:45:34,500
yours

891
00:45:30,540 --> 00:45:38,700
really<font color="#CCCCCC"> oh yeah and</font><font color="#E5E5E5"> I wanted to show you</font>

892
00:45:34,500 --> 00:45:48,300
here<font color="#CCCCCC"> okay so hello world one note this</font>

893
00:45:38,700 --> 00:45:50,540
the<font color="#E5E5E5"> thumbprint value identical</font>

894
00:45:48,300 --> 00:45:54,530
thumbprint value

895
00:45:50,540 --> 00:46:00,620
<font color="#E5E5E5">okay so the reason</font><font color="#CCCCCC"> that they match here</font>

896
00:45:54,530 --> 00:46:03,200
is because I<font color="#E5E5E5"> chose to use attach the</font>

897
00:46:00,620 --> 00:46:05,240
catalog signature as an embedded

898
00:46:03,200 --> 00:46:07,370
authentic code signature<font color="#E5E5E5"> for hello</font><font color="#CCCCCC"> world</font>

899
00:46:05,240 --> 00:46:08,990
one and because get authentic<font color="#CCCCCC"> codes</font>

900
00:46:07,370 --> 00:46:11,660
saying that your defaults to<font color="#E5E5E5"> catalog</font>

901
00:46:08,990 --> 00:46:14,240
validation then I have the match here

902
00:46:11,660 --> 00:46:16,670
<font color="#E5E5E5">there would be a discrepancy in using</font>

903
00:46:14,240 --> 00:46:22,609
<font color="#E5E5E5">sig check because</font><font color="#CCCCCC"> stick check will go by</font>

904
00:46:16,670 --> 00:46:26,510
the the embedded authentic code

905
00:46:22,610 --> 00:46:30,590
signature<font color="#CCCCCC"> thumbprint</font><font color="#E5E5E5"> value so we should</font>

906
00:46:26,510 --> 00:46:31,730
so again<font color="#E5E5E5"> I'll skip that part now but</font>

907
00:46:30,590 --> 00:46:33,560
just<font color="#CCCCCC"> it's something</font><font color="#E5E5E5"> you should be</font>

908
00:46:31,730 --> 00:46:35,980
<font color="#E5E5E5">mindful of when you're performing these</font>

909
00:46:33,560 --> 00:46:35,980
attacks

910
00:46:40,950 --> 00:46:43,730
<font color="#E5E5E5">all right</font>

911
00:46:43,920 --> 00:46:50,370
so the next<font color="#E5E5E5"> attack</font>

912
00:46:46,720 --> 00:46:50,370
[Music]

913
00:46:54,420 --> 00:47:00,059
sorry<font color="#CCCCCC"> the next attack we're gonna do</font>

914
00:46:57,990 --> 00:47:04,859
<font color="#CCCCCC">perform a certificate cloning and root</font>

915
00:47:00,059 --> 00:47:09,359
CA<font color="#E5E5E5"> installation attack and basically the</font>

916
00:47:04,859 --> 00:47:11,790
<font color="#E5E5E5">only goal with this attack is to exploit</font>

917
00:47:09,359 --> 00:47:16,200
defender behaviors so we're going<font color="#CCCCCC"> to</font>

918
00:47:11,790 --> 00:47:19,020
craft a code signing<font color="#E5E5E5"> certificate chain</font>

919
00:47:16,200 --> 00:47:21,598
that has the look<font color="#CCCCCC"> and feel of a</font>

920
00:47:19,020 --> 00:47:24,750
Microsoft<font color="#E5E5E5"> certificate chain as we could</font>

921
00:47:21,599 --> 00:47:29,460
see<font color="#E5E5E5"> here so as a defender if you were to</font>

922
00:47:24,750 --> 00:47:31,650
look at hello world eggsy<font color="#E5E5E5"> and see all</font><font color="#CCCCCC"> of</font>

923
00:47:29,460 --> 00:47:35,160
this<font color="#E5E5E5"> like that's gonna check all the</font>

924
00:47:31,650 --> 00:47:36,540
boxes<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> mentally right so you can</font>

925
00:47:35,160 --> 00:47:38,279
move on

926
00:47:36,540 --> 00:47:41,430
maybe aside from the<font color="#E5E5E5"> fact that hello</font>

927
00:47:38,280 --> 00:47:43,799
<font color="#E5E5E5">world XE is kind of weird</font><font color="#CCCCCC"> but I trust</font>

928
00:47:41,430 --> 00:47:46,558
Microsoft as a reputable vendor to not

929
00:47:43,799 --> 00:47:51,420
ship malware to me<font color="#E5E5E5"> so let's let's move</font>

930
00:47:46,559 --> 00:47:56,819
on<font color="#E5E5E5"> all right we're gonna dive</font><font color="#CCCCCC"> right into</font>

931
00:47:51,420 --> 00:48:01,020
the<font color="#E5E5E5"> next demo this one is a little</font><font color="#CCCCCC"> more</font>

932
00:47:56,819 --> 00:48:03,930
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> so the first thing that</font>

933
00:48:01,020 --> 00:48:06,270
<font color="#E5E5E5">we need to do to emulate the look and</font>

934
00:48:03,930 --> 00:48:09,960
feel<font color="#E5E5E5"> of a Microsoft certificate chain is</font>

935
00:48:06,270 --> 00:48:15,230
to just go<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> certificate chain let's</font>

936
00:48:09,960 --> 00:48:15,230
<font color="#E5E5E5">look at let's go to kernel32 again</font>

937
00:48:17,319 --> 00:48:20,319
<font color="#E5E5E5">alrights</font>

938
00:48:21,579 --> 00:48:29,569
view the certificates<font color="#E5E5E5"> and you can see</font>

939
00:48:24,829 --> 00:48:33,289
the chain<font color="#E5E5E5"> here so I want to copy all</font>

940
00:48:29,569 --> 00:48:39,230
three of those certificates clone them

941
00:48:33,289 --> 00:48:41,509
and sign each one along the way<font color="#E5E5E5"> and then</font>

942
00:48:39,230 --> 00:48:43,549
at the end<font color="#E5E5E5"> of the day that Microsoft</font>

943
00:48:41,509 --> 00:48:47,329
<font color="#E5E5E5">Windows leaf certificate is what I can</font>

944
00:48:43,549 --> 00:48:49,220
use to sign my malware but<font color="#E5E5E5"> then there</font>

945
00:48:47,329 --> 00:48:51,650
will<font color="#E5E5E5"> be one</font><font color="#CCCCCC"> more step</font><font color="#E5E5E5"> that's required</font>

946
00:48:49,220 --> 00:48:55,970
after<font color="#E5E5E5"> that</font><font color="#CCCCCC"> which I'll show you</font><font color="#E5E5E5"> in a</font>

947
00:48:51,650 --> 00:49:00,230
little bit<font color="#E5E5E5"> so the way one of the easy</font>

948
00:48:55,970 --> 00:49:01,819
ways to to save<font color="#E5E5E5"> these off would be for</font>

949
00:49:00,230 --> 00:49:05,359
<font color="#E5E5E5">each certificate in the chain you go to</font>

950
00:49:01,819 --> 00:49:07,788
details<font color="#CCCCCC"> copy the file and then this UI</font>

951
00:49:05,359 --> 00:49:11,598
will show up and then you<font color="#E5E5E5"> just copy them</font>

952
00:49:07,789 --> 00:49:14,480
<font color="#E5E5E5">to disk as dot CER files so I've</font><font color="#CCCCCC"> already</font>

953
00:49:11,599 --> 00:49:20,920
<font color="#CCCCCC">done that ahead of time I've copied all</font>

954
00:49:14,480 --> 00:49:20,920
three in the chain so I have

955
00:49:22,870 --> 00:49:28,670
kernel32<font color="#E5E5E5"> root dot</font><font color="#CCCCCC"> CER</font>

956
00:49:25,730 --> 00:49:30,470
the PCA which is the issuing certificate

957
00:49:28,670 --> 00:49:32,810
of<font color="#E5E5E5"> the leaf certificate and the leaf</font>

958
00:49:30,470 --> 00:49:34,669
certificate<font color="#E5E5E5"> certificate itself</font><font color="#CCCCCC"> obviously</font>

959
00:49:32,810 --> 00:49:36,920
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> the signing keys for these</font>

960
00:49:34,670 --> 00:49:41,480
<font color="#E5E5E5">but all I'm gonna do</font><font color="#CCCCCC"> is just clone all</font>

961
00:49:36,920 --> 00:49:43,910
of the fields<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I can clone which is</font>

962
00:49:41,480 --> 00:49:46,910
basically<font color="#E5E5E5"> all of them more or less</font>

963
00:49:43,910 --> 00:49:52,339
except for the<font color="#E5E5E5"> public/private key pair</font>

964
00:49:46,910 --> 00:49:56,569
<font color="#CCCCCC">I'm gonna have my own</font><font color="#E5E5E5"> key pair okay so</font>

965
00:49:52,340 --> 00:49:58,730
let's get<font color="#E5E5E5"> started with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so you call</font>

966
00:49:56,570 --> 00:50:02,090
in<font color="#E5E5E5"> PowerShell to get pfx certificate to</font>

967
00:49:58,730 --> 00:50:06,350
get<font color="#E5E5E5"> an x.509 certificates objects for</font>

968
00:50:02,090 --> 00:50:10,310
the CER file<font color="#E5E5E5"> and then what you do</font><font color="#CCCCCC"> is you</font>

969
00:50:06,350 --> 00:50:13,430
take that certificate object and pass it

970
00:50:10,310 --> 00:50:16,250
to<font color="#CCCCCC"> a new self signed certificate</font><font color="#E5E5E5"> - clone</font>

971
00:50:13,430 --> 00:50:18,890
cert so<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a really handy handy</font>

972
00:50:16,250 --> 00:50:22,100
commandlets here and<font color="#E5E5E5"> I'll do that for</font>

973
00:50:18,890 --> 00:50:26,450
each certificate<font color="#E5E5E5"> in the chain now all</font>

974
00:50:22,100 --> 00:50:29,060
<font color="#CCCCCC">root CAS</font><font color="#E5E5E5"> are technically self signed</font>

975
00:50:26,450 --> 00:50:33,770
like there's no root certificate there

976
00:50:29,060 --> 00:50:37,630
is nothing besides themselves<font color="#E5E5E5"> to sign it</font>

977
00:50:33,770 --> 00:50:40,310
so our cloned root certificate will be

978
00:50:37,630 --> 00:50:42,620
<font color="#E5E5E5">self signed but we're then going to</font>

979
00:50:40,310 --> 00:50:44,660
trust it later<font color="#CCCCCC"> on every other</font>

980
00:50:42,620 --> 00:50:48,859
certificate in the<font color="#E5E5E5"> chain has to be</font>

981
00:50:44,660 --> 00:50:52,069
<font color="#E5E5E5">signed by</font><font color="#CCCCCC"> the next</font><font color="#E5E5E5"> level up so here in</font>

982
00:50:48,860 --> 00:50:56,060
the case of the<font color="#E5E5E5"> PC a cert that needs to</font>

983
00:50:52,070 --> 00:50:58,460
be<font color="#E5E5E5"> its signer will be the root CA so</font>

984
00:50:56,060 --> 00:51:01,220
here we're<font color="#CCCCCC"> building out the signed</font>

985
00:50:58,460 --> 00:51:02,940
search the signed cloned<font color="#E5E5E5"> certificate</font>

986
00:51:01,220 --> 00:51:05,529
chain

987
00:51:02,940 --> 00:51:11,589
until we get<font color="#E5E5E5"> to the leaf</font><font color="#CCCCCC"> certificates</font><font color="#E5E5E5"> so</font>

988
00:51:05,529 --> 00:51:14,079
let's clone these bad boys<font color="#CCCCCC"> and what's</font>

989
00:51:11,589 --> 00:51:16,569
kind<font color="#E5E5E5"> of cool about this attack is</font><font color="#CCCCCC"> that I</font>

990
00:51:14,079 --> 00:51:19,349
don't<font color="#CCCCCC"> have to do any of</font><font color="#E5E5E5"> this in an admin</font>

991
00:51:16,569 --> 00:51:19,349
context

992
00:51:22,690 --> 00:51:29,560
okay so we have three clones

993
00:51:25,570 --> 00:51:32,470
certificates now let's look at hello

994
00:51:29,560 --> 00:51:36,490
world<font color="#CCCCCC"> -</font><font color="#E5E5E5"> this time validate it should not</font>

995
00:51:32,470 --> 00:51:39,490
be signed<font color="#E5E5E5"> currently now let's sign it</font>

996
00:51:36,490 --> 00:51:45,609
with our<font color="#E5E5E5"> leaf certificate are clones</font>

997
00:51:39,490 --> 00:51:49,180
leaf certificate<font color="#E5E5E5"> okay so it looks</font><font color="#CCCCCC"> like</font>

998
00:51:45,610 --> 00:51:53,680
it's signed only<font color="#E5E5E5"> the status returned an</font>

999
00:51:49,180 --> 00:51:55,720
unknown error so let's let's get<font color="#CCCCCC"> some</font>

1000
00:51:53,680 --> 00:52:01,419
more context about what that error might

1001
00:51:55,720 --> 00:52:02,799
mean<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so if we could</font><font color="#CCCCCC"> change process</font>

1002
00:52:01,420 --> 00:52:05,130
by terminating a root certificate which

1003
00:52:02,800 --> 00:52:10,450
<font color="#CCCCCC">is not trusted by the trust provider</font>

1004
00:52:05,130 --> 00:52:12,460
<font color="#E5E5E5">so our cloned</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> certificates is not</font>

1005
00:52:10,450 --> 00:52:15,490
explicitly trusted<font color="#E5E5E5"> this is one</font><font color="#CCCCCC"> of the</font>

1006
00:52:12,460 --> 00:52:18,820
steps<font color="#E5E5E5"> that is required</font><font color="#CCCCCC"> force certificate</font>

1007
00:52:15,490 --> 00:52:21,910
and digital signature validation<font color="#CCCCCC"> is that</font>

1008
00:52:18,820 --> 00:52:23,260
the root certificate<font color="#CCCCCC"> that issued all</font>

1009
00:52:21,910 --> 00:52:28,000
<font color="#CCCCCC">these subsequent certificates is</font>

1010
00:52:23,260 --> 00:52:29,230
actually trusted and let's let's<font color="#E5E5E5"> look at</font>

1011
00:52:28,000 --> 00:52:32,020
some<font color="#E5E5E5"> of the more detail some of the</font>

1012
00:52:29,230 --> 00:52:34,450
details of<font color="#E5E5E5"> the signature</font><font color="#CCCCCC"> here I mean</font>

1013
00:52:32,020 --> 00:52:39,520
<font color="#E5E5E5">this kind of has the look and feel right</font>

1014
00:52:34,450 --> 00:52:42,460
of on<font color="#CCCCCC"> Microsoft certificate only we have</font>

1015
00:52:39,520 --> 00:52:46,530
that error so let's take the unknown

1016
00:52:42,460 --> 00:52:46,530
error and<font color="#CCCCCC"> change it to valid again</font>

1017
00:52:47,730 --> 00:52:55,300
<font color="#E5E5E5">okay so what we're gonna do is we're</font>

1018
00:52:51,640 --> 00:52:57,430
going to<font color="#CCCCCC"> just</font><font color="#E5E5E5"> export the cloned the</font>

1019
00:52:55,300 --> 00:53:01,810
cloned root certificate<font color="#E5E5E5"> save it to disk</font>

1020
00:52:57,430 --> 00:53:07,270
<font color="#E5E5E5">and then import it into the root CA</font>

1021
00:53:01,810 --> 00:53:10,299
store<font color="#E5E5E5"> and this can be done again I'm not</font>

1022
00:53:07,270 --> 00:53:14,200
admin and the only thing you'll see is

1023
00:53:10,300 --> 00:53:15,840
this prompt and yeah<font color="#CCCCCC"> of course I trust</font>

1024
00:53:14,200 --> 00:53:19,899
it

1025
00:53:15,840 --> 00:53:21,280
<font color="#E5E5E5">okay so I've now trusted it and now this</font>

1026
00:53:19,900 --> 00:53:26,400
<font color="#E5E5E5">is another case where</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably need</font>

1027
00:53:21,280 --> 00:53:26,400
to restart the the process

1028
00:53:31,620 --> 00:53:46,049
and sure enough<font color="#E5E5E5"> we're we're good so</font>

1029
00:53:42,630 --> 00:53:50,460
completely valid certificates the look

1030
00:53:46,050 --> 00:53:51,870
and feel of<font color="#E5E5E5"> Microsoft</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I've been</font>

1031
00:53:50,460 --> 00:53:53,970
<font color="#E5E5E5">using get authentic code signature in</font>

1032
00:53:51,870 --> 00:53:56,670
PowerShell<font color="#CCCCCC"> a lot again there's going to</font>

1033
00:53:53,970 --> 00:53:58,109
be no difference in the validity of the

1034
00:53:56,670 --> 00:54:01,890
certificate whether it's get authentic

1035
00:53:58,110 --> 00:54:05,490
code signature<font color="#E5E5E5"> versus</font><font color="#CCCCCC"> sig check</font><font color="#E5E5E5"> versus</font>

1036
00:54:01,890 --> 00:54:09,299
<font color="#E5E5E5">Explorer versus any of the sysinternals</font>

1037
00:54:05,490 --> 00:54:11,759
tools<font color="#CCCCCC"> it all goes through</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> common</font><font color="#E5E5E5"> sip</font>

1038
00:54:09,300 --> 00:54:14,990
infrastructure that's abstracted away

1039
00:54:11,760 --> 00:54:19,490
from the signature validation utility

1040
00:54:14,990 --> 00:54:19,490
<font color="#CCCCCC">and it's all going to</font><font color="#E5E5E5"> look the same</font>

1041
00:54:28,150 --> 00:54:34,660
so just wrapping<font color="#E5E5E5"> up</font><font color="#CCCCCC"> I have some pretty</font>

1042
00:54:31,330 --> 00:54:36,580
extensive<font color="#E5E5E5"> references on</font><font color="#CCCCCC"> the subject so</font>

1043
00:54:34,660 --> 00:54:38,799
<font color="#CCCCCC">the first attack that you saw the</font><font color="#E5E5E5"> SIP</font>

1044
00:54:36,580 --> 00:54:41,680
<font color="#E5E5E5">hijack</font><font color="#CCCCCC"> I have a really</font><font color="#E5E5E5"> lengthy white</font>

1045
00:54:38,800 --> 00:54:44,020
paper<font color="#CCCCCC"> that goes into very</font><font color="#E5E5E5"> explicit</font>

1046
00:54:41,680 --> 00:54:46,180
detail about the signing<font color="#E5E5E5"> the user-mode</font>

1047
00:54:44,020 --> 00:54:49,330
signing infrastructure in<font color="#CCCCCC"> Windows and</font>

1048
00:54:46,180 --> 00:54:51,520
how to<font color="#E5E5E5"> perform the</font><font color="#CCCCCC"> SIP hijack attack</font><font color="#E5E5E5"> in</font>

1049
00:54:49,330 --> 00:54:54,160
addition to a trust provider hijack

1050
00:54:51,520 --> 00:54:57,220
attack so it's all in<font color="#E5E5E5"> there and then</font>

1051
00:54:54,160 --> 00:54:59,020
I've got a blog post<font color="#E5E5E5"> dealing the with</font>

1052
00:54:57,220 --> 00:55:01,660
the code<font color="#E5E5E5"> signing certificate cloning</font>

1053
00:54:59,020 --> 00:55:07,420
attack as well as<font color="#E5E5E5"> prevention and</font>

1054
00:55:01,660 --> 00:55:09,399
detection<font color="#E5E5E5"> steps</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that attack so after</font>

1055
00:55:07,420 --> 00:55:13,630
having<font color="#E5E5E5"> seen both</font><font color="#CCCCCC"> of these attacks</font><font color="#E5E5E5"> in</font>

1056
00:55:09,400 --> 00:55:15,850
action<font color="#CCCCCC"> has</font><font color="#E5E5E5"> your trust changed even</font><font color="#CCCCCC"> a</font>

1057
00:55:13,630 --> 00:55:18,460
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit in how code signing is</font>

1058
00:55:15,850 --> 00:55:21,880
performed in the operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> so as</font>

1059
00:55:18,460 --> 00:55:25,660
a defender<font color="#CCCCCC"> you really should</font><font color="#E5E5E5"> be mindful</font>

1060
00:55:21,880 --> 00:55:28,710
<font color="#E5E5E5">of this and acknowledge that this</font><font color="#CCCCCC"> is</font>

1061
00:55:25,660 --> 00:55:32,470
clearly<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the hands of an attacker now</font>

1062
00:55:28,710 --> 00:55:34,960
<font color="#CCCCCC">if an attacker</font><font color="#E5E5E5"> just wants to</font><font color="#CCCCCC"> emulate the</font>

1063
00:55:32,470 --> 00:55:37,480
look<font color="#E5E5E5"> and feel and they don't</font><font color="#CCCCCC"> happen to</font>

1064
00:55:34,960 --> 00:55:39,220
be an admin they can do the certificate

1065
00:55:37,480 --> 00:55:41,380
cloning attack if they<font color="#E5E5E5"> are running</font>

1066
00:55:39,220 --> 00:55:46,140
elevated then they also have the<font color="#CCCCCC"> option</font>

1067
00:55:41,380 --> 00:55:49,300
of<font color="#CCCCCC"> doing this hijack attack as well and</font>

1068
00:55:46,140 --> 00:55:51,750
as I've<font color="#CCCCCC"> said</font><font color="#E5E5E5"> many times</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> much all</font>

1069
00:55:49,300 --> 00:55:54,220
of<font color="#E5E5E5"> the tools out there</font><font color="#CCCCCC"> I consider to be</font>

1070
00:55:51,750 --> 00:55:57,040
insufficient<font color="#E5E5E5"> in determining the</font>

1071
00:55:54,220 --> 00:56:00,850
trustworthiness<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> signature</font><font color="#E5E5E5"> that</font>

1072
00:55:57,040 --> 00:56:04,330
<font color="#CCCCCC">was used to</font><font color="#E5E5E5"> sign in our case malicious</font>

1073
00:56:00,850 --> 00:56:06,580
code<font color="#CCCCCC"> and ultimately the way that you</font>

1074
00:56:04,330 --> 00:56:10,060
would validate<font color="#E5E5E5"> that trust is by that</font>

1075
00:56:06,580 --> 00:56:12,400
<font color="#E5E5E5">thumbprint value so number one so in the</font>

1076
00:56:10,060 --> 00:56:15,400
<font color="#CCCCCC">certificate cloning attack</font><font color="#E5E5E5"> that had a</font>

1077
00:56:12,400 --> 00:56:17,320
unique thumbprint<font color="#E5E5E5"> value that</font><font color="#CCCCCC"> chained to</font>

1078
00:56:15,400 --> 00:56:19,210
a root<font color="#CCCCCC"> certificate</font><font color="#E5E5E5"> that had its own</font>

1079
00:56:17,320 --> 00:56:21,730
thumbprint value that has no business

1080
00:56:19,210 --> 00:56:25,840
<font color="#CCCCCC">being</font><font color="#E5E5E5"> trusted and Microsoft actually</font>

1081
00:56:21,730 --> 00:56:29,020
<font color="#E5E5E5">publishes a list</font><font color="#CCCCCC"> of trusted root</font><font color="#E5E5E5"> CAS</font><font color="#CCCCCC"> and</font>

1082
00:56:25,840 --> 00:56:32,680
all of their thumbprint hashes<font color="#E5E5E5"> in the</font>

1083
00:56:29,020 --> 00:56:34,930
form of is all through STL and

1084
00:56:32,680 --> 00:56:37,319
in the<font color="#CCCCCC"> blogpost there's</font><font color="#E5E5E5"> a link to that</font>

1085
00:56:34,930 --> 00:56:40,060
<font color="#E5E5E5">where you can go download that</font><font color="#CCCCCC"> and</font>

1086
00:56:37,320 --> 00:56:42,610
validate what should be a trusted<font color="#E5E5E5"> root</font>

1087
00:56:40,060 --> 00:56:45,130
certificate<font color="#E5E5E5"> versus what shouldn't be and</font>

1088
00:56:42,610 --> 00:56:47,350
then so you could presumably use that to

1089
00:56:45,130 --> 00:56:52,240
like sweep<font color="#E5E5E5"> your environments to audit</font>

1090
00:56:47,350 --> 00:56:54,610
your root certificates so that's all I

1091
00:56:52,240 --> 00:56:57,520
have<font color="#CCCCCC"> I think we have a few minutes</font><font color="#E5E5E5"> for</font>

1092
00:56:54,610 --> 00:57:06,210
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> so thank you</font>

1093
00:56:57,520 --> 00:57:06,210
[Applause]

1094
00:57:15,900 --> 00:57:19,690
yeah that<font color="#E5E5E5"> that's a good question so how</font>

1095
00:57:18,190 --> 00:57:23,980
do you get<font color="#E5E5E5"> the victim</font><font color="#CCCCCC"> to import the root</font>

1096
00:57:19,690 --> 00:57:26,770
CA<font color="#E5E5E5"> so I haven't discovered</font><font color="#CCCCCC"> a way from a</font>

1097
00:57:23,980 --> 00:57:29,140
non admin context to import<font color="#E5E5E5"> the</font>

1098
00:57:26,770 --> 00:57:31,810
certificate<font color="#E5E5E5"> without the UI prompting so</font>

1099
00:57:29,140 --> 00:57:34,810
<font color="#E5E5E5">I would love to see you guys maybe</font>

1100
00:57:31,810 --> 00:57:37,029
investigate<font color="#CCCCCC"> that because all of</font><font color="#E5E5E5"> this is</font>

1101
00:57:34,810 --> 00:57:40,570
just<font color="#E5E5E5"> stored in the registry but there's</font>

1102
00:57:37,030 --> 00:57:43,900
a<font color="#E5E5E5"> very specific</font><font color="#CCCCCC"> Akal set on the</font><font color="#E5E5E5"> user</font>

1103
00:57:40,570 --> 00:57:45,820
specific certificate blobs<font color="#E5E5E5"> in the</font>

1104
00:57:43,900 --> 00:57:46,570
<font color="#CCCCCC">registry so like if</font><font color="#E5E5E5"> you just try to set</font>

1105
00:57:45,820 --> 00:57:49,240
<font color="#CCCCCC">it directly</font>

1106
00:57:46,570 --> 00:57:51,790
it'll<font color="#CCCCCC"> just wipe it clean and like it</font>

1107
00:57:49,240 --> 00:57:54,910
<font color="#E5E5E5">won't actually persist in the registry</font>

1108
00:57:51,790 --> 00:57:58,480
<font color="#CCCCCC">if you're</font><font color="#E5E5E5"> doing the certificate cloning</font>

1109
00:57:54,910 --> 00:58:00,460
attack as an admin then<font color="#E5E5E5"> you can just you</font>

1110
00:57:58,480 --> 00:58:03,100
can<font color="#E5E5E5"> form</font><font color="#CCCCCC"> your chain and then just get</font>

1111
00:58:00,460 --> 00:58:06,160
the blob and just stuff it directly into

1112
00:58:03,100 --> 00:58:08,410
the registry<font color="#E5E5E5"> so that's one option</font><font color="#CCCCCC"> and</font>

1113
00:58:06,160 --> 00:58:10,210
you know if you're already admin<font color="#E5E5E5"> anyway</font>

1114
00:58:08,410 --> 00:58:12,690
and like you have credentials<font color="#E5E5E5"> and like</font>

1115
00:58:10,210 --> 00:58:17,710
you could just<font color="#CCCCCC"> use for example like WMI</font>

1116
00:58:12,690 --> 00:58:21,810
<font color="#E5E5E5">to just stuff that in directly via the</font>

1117
00:58:17,710 --> 00:58:21,810
STD reg<font color="#CCCCCC"> prov WMI provider</font>

1118
00:58:27,470 --> 00:58:33,759
yeah

1119
00:58:30,220 --> 00:58:36,118
going on<font color="#E5E5E5"> the previous question</font><font color="#CCCCCC"> I was</font>

1120
00:58:33,760 --> 00:58:40,060
quite surprised to<font color="#E5E5E5"> see that you</font><font color="#CCCCCC"> can</font>

1121
00:58:36,119 --> 00:58:53,500
import trusted wood certificates as an

1122
00:58:40,060 --> 00:58:57,520
unprivileged user at all<font color="#CCCCCC"> I know yeah I</font>

1123
00:58:53,500 --> 00:59:00,940
mean I<font color="#E5E5E5"> believe in not admin user has</font>

1124
00:58:57,520 --> 00:59:03,280
absolutely no<font color="#CCCCCC"> business being able to</font>

1125
00:59:00,940 --> 00:59:05,650
trust their own root certificates<font color="#E5E5E5"> it</font>

1126
00:59:03,280 --> 00:59:08,770
could be a convenience thing like let's

1127
00:59:05,650 --> 00:59:11,109
say you're<font color="#CCCCCC"> a developer and like you want</font>

1128
00:59:08,770 --> 00:59:15,790
to run fiddler right<font color="#E5E5E5"> so like you need</font><font color="#CCCCCC"> to</font>

1129
00:59:11,109 --> 00:59:18,160
install<font color="#CCCCCC"> that root CA</font><font color="#E5E5E5"> to hijack SSL right</font>

1130
00:59:15,790 --> 00:59:19,570
but ultimately you're like I<font color="#E5E5E5"> don't think</font>

1131
00:59:18,160 --> 00:59:22,509
you should<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do that in an</font>

1132
00:59:19,570 --> 00:59:25,390
enterprise<font color="#CCCCCC"> there's a registry key you</font>

1133
00:59:22,510 --> 00:59:31,349
can set to prevent that that user mode

1134
00:59:25,390 --> 00:59:31,348
<font color="#E5E5E5">trust it's in the blog post yep</font>

