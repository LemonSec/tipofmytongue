1
00:00:03,950 --> 00:00:10,730
<font color="#E5E5E5">all right so welcome</font><font color="#CCCCCC"> back next up is</font>

2
00:00:07,670 --> 00:00:12,650
<font color="#CCCCCC">Marion Marion</font><font color="#E5E5E5"> basically is one of the</font>

3
00:00:10,730 --> 00:00:15,650
few speakers<font color="#E5E5E5"> that has an</font><font color="#CCCCCC"> troopers</font>

4
00:00:12,650 --> 00:00:17,360
inventory number I think<font color="#E5E5E5"> because she's</font>

5
00:00:15,650 --> 00:00:19,640
such a regular<font color="#E5E5E5"> speaker and I'm really</font>

6
00:00:17,360 --> 00:00:26,720
looking<font color="#CCCCCC"> forward to that talk so my own</font>

7
00:00:19,640 --> 00:00:27,698
stage is yours thank you hello<font color="#E5E5E5"> good</font>

8
00:00:26,720 --> 00:00:29,810
<font color="#E5E5E5">afternoon troopers</font>

9
00:00:27,699 --> 00:00:32,300
I'm very proud to<font color="#E5E5E5"> have an inventory</font>

10
00:00:29,810 --> 00:00:33,860
number<font color="#CCCCCC"> I recently started work</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> Intel</font>

11
00:00:32,299 --> 00:00:37,309
<font color="#CCCCCC">I have an inventory number</font><font color="#E5E5E5"> there -</font>

12
00:00:33,860 --> 00:00:41,809
that's<font color="#E5E5E5"> very proud of that - welcome to</font>

13
00:00:37,309 --> 00:00:45,080
my talk about<font color="#CCCCCC"> the wolven STX</font><font color="#E5E5E5"> clothing</font><font color="#CCCCCC"> my</font>

14
00:00:41,809 --> 00:00:48,199
talk<font color="#E5E5E5"> today will be about how to port</font>

15
00:00:45,080 --> 00:00:49,489
malware into<font color="#E5E5E5"> sjx and</font><font color="#CCCCCC"> clays</font><font color="#E5E5E5"> you might</font>

16
00:00:48,199 --> 00:00:51,830
have heard<font color="#CCCCCC"> about those checks that's an</font>

17
00:00:49,489 --> 00:00:54,919
Intel technology<font color="#CCCCCC"> as jack stands for</font>

18
00:00:51,830 --> 00:00:57,739
software guard extensions I'm having

19
00:00:54,920 --> 00:01:00,739
real trouble remembering all the words

20
00:00:57,739 --> 00:01:03,769
<font color="#CCCCCC">that make the three-letter acronyms that</font>

21
00:01:00,739 --> 00:01:05,420
<font color="#E5E5E5">we use at Intel</font><font color="#CCCCCC"> yeah and I'm also very</font>

22
00:01:03,769 --> 00:01:09,048
<font color="#E5E5E5">proud to remember that three-letter</font>

23
00:01:05,420 --> 00:01:10,640
acronym so<font color="#CCCCCC"> STX</font><font color="#E5E5E5"> is intended</font><font color="#CCCCCC"> to protect</font>

24
00:01:09,049 --> 00:01:13,430
parts of an application<font color="#E5E5E5"> against</font>

25
00:01:10,640 --> 00:01:15,500
<font color="#E5E5E5">compromise and compromise from other</font>

26
00:01:13,430 --> 00:01:17,979
applications from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> operating</font><font color="#E5E5E5"> system</font>

27
00:01:15,500 --> 00:01:21,079
from the hypervisor from pretty<font color="#E5E5E5"> much</font>

28
00:01:17,979 --> 00:01:22,549
everything except maybe side channels

29
00:01:21,079 --> 00:01:26,928
but we<font color="#E5E5E5"> don't talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that in here and</font>

30
00:01:22,549 --> 00:01:29,149
<font color="#E5E5E5">I try to I try to find out whether it's</font>

31
00:01:26,929 --> 00:01:31,399
<font color="#E5E5E5">possible and feasible to port ransomware</font>

32
00:01:29,149 --> 00:01:34,700
or<font color="#E5E5E5"> malware or more particular ransomware</font>

33
00:01:31,399 --> 00:01:36,380
into<font color="#CCCCCC"> s checks in case and what that</font>

34
00:01:34,700 --> 00:01:39,469
would<font color="#CCCCCC"> mean for</font><font color="#E5E5E5"> security software like</font>

35
00:01:36,380 --> 00:01:41,499
how security software<font color="#E5E5E5"> and threat</font>

36
00:01:39,469 --> 00:01:45,100
detection could protect against such

37
00:01:41,499 --> 00:01:47,380
protected<font color="#CCCCCC"> threats essentialist my name</font>

38
00:01:45,100 --> 00:01:49,390
is Martin<font color="#E5E5E5"> mash like a security</font>

39
00:01:47,380 --> 00:01:51,219
<font color="#CCCCCC">researcher who recently moved to</font>

40
00:01:49,390 --> 00:01:54,009
Portland<font color="#CCCCCC"> Oregon and started work at</font>

41
00:01:51,219 --> 00:01:56,859
Intel<font color="#E5E5E5"> some of you here might have heard</font>

42
00:01:54,009 --> 00:01:58,869
about Rodrigo Bronco<font color="#CCCCCC"> I think he his his</font>

43
00:01:56,859 --> 00:02:02,109
<font color="#E5E5E5">inventory number here at troopers is</font>

44
00:01:58,869 --> 00:02:03,609
even older than<font color="#E5E5E5"> mine</font><font color="#CCCCCC"> said he's</font><font color="#E5E5E5"> not here</font>

45
00:02:02,109 --> 00:02:06,390
this year<font color="#E5E5E5"> so I'm</font><font color="#CCCCCC"> taking his place on the</font>

46
00:02:03,609 --> 00:02:10,690
<font color="#CCCCCC">station to talk</font><font color="#E5E5E5"> about into topics and</font>

47
00:02:06,390 --> 00:02:12,250
<font color="#CCCCCC">yeah so here we go as what every every</font>

48
00:02:10,690 --> 00:02:15,489
talk we give<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> have to tell you</font><font color="#CCCCCC"> about</font>

49
00:02:12,250 --> 00:02:16,989
our legal<font color="#E5E5E5"> disclaimer</font><font color="#CCCCCC"> all the information</font>

50
00:02:15,489 --> 00:02:19,360
presented and any opinions expressed

51
00:02:16,989 --> 00:02:21,760
here are only mine<font color="#E5E5E5"> and still</font><font color="#CCCCCC"> not</font>

52
00:02:19,360 --> 00:02:24,040
represent<font color="#E5E5E5"> Intel or other previously</font>

53
00:02:21,760 --> 00:02:25,720
future employers<font color="#E5E5E5"> also</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> no</font>

54
00:02:24,040 --> 00:02:29,230
intention to advertise<font color="#CCCCCC"> or devalue any</font>

55
00:02:25,720 --> 00:02:32,349
current or future technology<font color="#E5E5E5"> more so I</font>

56
00:02:29,230 --> 00:02:35,530
have a private disclaimer<font color="#CCCCCC"> I speak about</font>

57
00:02:32,349 --> 00:02:37,810
how to<font color="#CCCCCC"> ride Melbourne but how to attack</font>

58
00:02:35,530 --> 00:02:39,250
<font color="#CCCCCC">aspects about</font><font color="#E5E5E5"> how to</font><font color="#CCCCCC"> ride shellcode</font><font color="#E5E5E5"> but</font>

59
00:02:37,810 --> 00:02:41,019
I'm not a software developer exploit

60
00:02:39,250 --> 00:02:43,329
<font color="#CCCCCC">rider</font><font color="#E5E5E5"> shellcode specialist cryptographer</font>

61
00:02:41,019 --> 00:02:45,280
<font color="#E5E5E5">and</font><font color="#CCCCCC"> neither a person to ask about</font><font color="#E5E5E5"> CPU</font>

62
00:02:43,329 --> 00:02:47,200
<font color="#CCCCCC">box or cache side-channel attacks or</font>

63
00:02:45,280 --> 00:02:48,459
anything like please keep that in mind

64
00:02:47,200 --> 00:02:52,119
<font color="#E5E5E5">if you come</font><font color="#CCCCCC"> a laughter with the talk</font>

65
00:02:48,459 --> 00:02:55,750
with any question all<font color="#CCCCCC"> right let's start</font>

66
00:02:52,120 --> 00:02:58,810
over<font color="#E5E5E5"> a long</font><font color="#CCCCCC"> long time ago if I joined</font><font color="#E5E5E5"> in</font>

67
00:02:55,750 --> 00:03:00,190
<font color="#E5E5E5">time I was working in threat detection I</font>

68
00:02:58,810 --> 00:03:03,780
was working for antivirus companies and

69
00:03:00,190 --> 00:03:06,510
advanced threat detection companies and

70
00:03:03,780 --> 00:03:09,340
<font color="#E5E5E5">back in those days</font>

71
00:03:06,510 --> 00:03:11,410
<font color="#CCCCCC">colleague has really really outraged</font><font color="#E5E5E5"> by</font>

72
00:03:09,340 --> 00:03:14,800
the new Intel technology<font color="#E5E5E5"> the STX</font>

73
00:03:11,410 --> 00:03:17,109
technology which was intended<font color="#CCCCCC"> to run</font>

74
00:03:14,800 --> 00:03:19,360
parts of an application<font color="#E5E5E5"> in an encrypted</font>

75
00:03:17,110 --> 00:03:21,849
<font color="#E5E5E5">piece of memory</font><font color="#CCCCCC"> that was not inspectable</font>

76
00:03:19,360 --> 00:03:23,530
<font color="#E5E5E5">which means if you start as</font><font color="#CCCCCC"> Jack's</font>

77
00:03:21,849 --> 00:03:26,048
application parts of<font color="#E5E5E5"> this application</font>

78
00:03:23,530 --> 00:03:29,470
<font color="#CCCCCC">are not inspectable by a debugger by</font>

79
00:03:26,049 --> 00:03:31,180
antivirus<font color="#E5E5E5"> software by any other scanning</font>

80
00:03:29,470 --> 00:03:33,819
software<font color="#E5E5E5"> a threat protection</font><font color="#CCCCCC"> software</font>

81
00:03:31,180 --> 00:03:35,489
that would want<font color="#E5E5E5"> to investigate</font><font color="#CCCCCC"> a running</font>

82
00:03:33,819 --> 00:03:39,429
process<font color="#E5E5E5"> whether it's a</font><font color="#CCCCCC"> a threat or</font><font color="#E5E5E5"> not</font>

83
00:03:35,489 --> 00:03:41,950
and<font color="#E5E5E5"> yeah for this research I picked up</font>

84
00:03:39,430 --> 00:03:43,599
this idea<font color="#E5E5E5"> of how dangerous applications</font>

85
00:03:41,950 --> 00:03:46,450
run inside the<font color="#CCCCCC"> best Jackson case</font>

86
00:03:43,599 --> 00:03:47,819
actually<font color="#E5E5E5"> are a little bit more about</font>

87
00:03:46,450 --> 00:03:50,819
what is<font color="#CCCCCC"> SGX</font>

88
00:03:47,819 --> 00:03:54,399
as<font color="#E5E5E5"> Jack's is built to</font><font color="#CCCCCC"> hold treasures</font>

89
00:03:50,819 --> 00:03:56,078
<font color="#E5E5E5">particularly if an application loads and</font>

90
00:03:54,400 --> 00:03:59,260
encrypted and clay<font color="#E5E5E5"> this include it's</font>

91
00:03:56,079 --> 00:04:01,450
supposed<font color="#E5E5E5"> to isolate a piece of memory</font>

92
00:03:59,260 --> 00:04:05,319
which<font color="#E5E5E5"> can contain code or data which is</font>

93
00:04:01,450 --> 00:04:07,929
encrypted and unexpectable<font color="#E5E5E5"> this means</font>

94
00:04:05,319 --> 00:04:10,060
that the part this<font color="#E5E5E5"> part</font><font color="#CCCCCC"> of the</font>

95
00:04:07,930 --> 00:04:13,840
<font color="#CCCCCC">application is protected against</font>

96
00:04:10,060 --> 00:04:16,298
<font color="#E5E5E5">integrity violation it's confidential it</font>

97
00:04:13,840 --> 00:04:18,100
is protected against other

98
00:04:16,298 --> 00:04:20,529
<font color="#CCCCCC">enclaved are running on</font><font color="#E5E5E5"> the system so</font>

99
00:04:18,100 --> 00:04:23,710
<font color="#E5E5E5">employees are isolated and they are</font>

100
00:04:20,529 --> 00:04:25,690
protected<font color="#E5E5E5"> against replay attacks the</font>

101
00:04:23,710 --> 00:04:27,940
technology<font color="#E5E5E5"> ro should enable the</font>

102
00:04:25,690 --> 00:04:29,560
application<font color="#CCCCCC"> or the enclaved part of the</font>

103
00:04:27,940 --> 00:04:31,990
<font color="#CCCCCC">application to protect its own secrets</font>

104
00:04:29,560 --> 00:04:34,270
which means for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you write a</font>

105
00:04:31,990 --> 00:04:36,370
password manager<font color="#CCCCCC"> that uses as Jack says</font>

106
00:04:34,270 --> 00:04:39,909
the technology<font color="#CCCCCC"> to protect the password</font>

107
00:04:36,370 --> 00:04:42,680
database that means that the actual

108
00:04:39,910 --> 00:04:46,110
application the

109
00:04:42,680 --> 00:04:48,000
<font color="#CCCCCC">later on called untrust part of the</font>

110
00:04:46,110 --> 00:04:50,810
password<font color="#CCCCCC"> manager is normal application</font>

111
00:04:48,000 --> 00:04:53,400
<font color="#CCCCCC">running in</font><font color="#E5E5E5"> userland which has</font><font color="#CCCCCC"> a</font>

112
00:04:50,810 --> 00:04:55,530
<font color="#CCCCCC">encrypted part like the enclaved part of</font>

113
00:04:53,400 --> 00:04:57,690
it<font color="#E5E5E5"> which contains the passwords and near</font>

114
00:04:55,530 --> 00:05:00,210
<font color="#E5E5E5">the application nor other components of</font>

115
00:04:57,690 --> 00:05:04,710
the the running<font color="#E5E5E5"> system have access to</font>

116
00:05:00,210 --> 00:05:06,930
the<font color="#E5E5E5"> password database without proven</font>

117
00:05:04,710 --> 00:05:09,539
entry and access<font color="#E5E5E5"> I'll talk about entry</font>

118
00:05:06,930 --> 00:05:13,440
and access<font color="#E5E5E5"> exits of increase a little</font>

119
00:05:09,540 --> 00:05:15,060
<font color="#E5E5E5">bit later on</font><font color="#CCCCCC"> I copy</font><font color="#E5E5E5"> this wonderful</font>

120
00:05:13,440 --> 00:05:17,190
graphic<font color="#E5E5E5"> out of the Intel documentation</font>

121
00:05:15,060 --> 00:05:19,320
which usually<font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't say pretty much</font>

122
00:05:17,190 --> 00:05:20,790
so here you<font color="#CCCCCC"> see</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> enclaves</font><font color="#E5E5E5"> are</font>

123
00:05:19,320 --> 00:05:22,200
considered to run as parts<font color="#E5E5E5"> of writing</font>

124
00:05:20,790 --> 00:05:24,060
<font color="#CCCCCC">applications like these little</font><font color="#E5E5E5"> boxes</font>

125
00:05:22,200 --> 00:05:25,590
inside<font color="#E5E5E5"> the application are the enclaves</font>

126
00:05:24,060 --> 00:05:27,090
<font color="#CCCCCC">and</font><font color="#E5E5E5"> they're protected against the</font>

127
00:05:25,590 --> 00:05:29,130
operating system<font color="#E5E5E5"> and against the</font>

128
00:05:27,090 --> 00:05:32,179
<font color="#E5E5E5">hypervisor and against the most common</font>

129
00:05:29,130 --> 00:05:37,650
<font color="#E5E5E5">Hardware attacks see the attic surface</font>

130
00:05:32,180 --> 00:05:39,930
for an anklet is very small<font color="#E5E5E5"> what does it</font>

131
00:05:37,650 --> 00:05:44,010
mean for an analyst<font color="#E5E5E5"> who would want</font><font color="#CCCCCC"> to</font>

132
00:05:39,930 --> 00:05:46,470
analyze the<font color="#CCCCCC"> SGX application all sjx</font>

133
00:05:44,010 --> 00:05:48,630
<font color="#E5E5E5">applications</font><font color="#CCCCCC"> including please run</font><font color="#E5E5E5"> in</font>

134
00:05:46,470 --> 00:05:50,610
ring<font color="#CCCCCC"> 3 which means it's normal use of</font><font color="#E5E5E5"> an</font>

135
00:05:48,630 --> 00:05:53,430
<font color="#E5E5E5">application like</font><font color="#CCCCCC"> it start microsoft word</font>

136
00:05:50,610 --> 00:05:56,370
<font color="#E5E5E5">you start your</font><font color="#CCCCCC"> STX protected password</font>

137
00:05:53,430 --> 00:05:57,570
manager<font color="#E5E5E5"> the memory of a valid anklet can</font>

138
00:05:56,370 --> 00:05:59,820
be inspected which means<font color="#CCCCCC"> you can't</font>

139
00:05:57,570 --> 00:06:02,070
attach<font color="#CCCCCC"> the debugger and</font><font color="#E5E5E5"> just that</font><font color="#CCCCCC"> three</font>

140
00:05:59,820 --> 00:06:03,510
instructions the entry and exit to<font color="#E5E5E5"> the</font>

141
00:06:02,070 --> 00:06:05,159
<font color="#E5E5E5">encrypted</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> clave are protected as</font>

142
00:06:03,510 --> 00:06:06,810
well<font color="#E5E5E5"> I'm going to talk</font><font color="#CCCCCC"> about this</font><font color="#E5E5E5"> a</font>

143
00:06:05,160 --> 00:06:08,550
little<font color="#E5E5E5"> bit later the enclaves are</font>

144
00:06:06,810 --> 00:06:10,440
isolated as mentioned that one<font color="#E5E5E5"> and clave</font>

145
00:06:08,550 --> 00:06:12,080
cannot touch the secrets of<font color="#CCCCCC"> a different</font>

146
00:06:10,440 --> 00:06:13,699
<font color="#CCCCCC">life</font>

147
00:06:12,080 --> 00:06:16,248
even protected and<font color="#E5E5E5"> privileged co2 can't</font>

148
00:06:13,699 --> 00:06:18,229
access the running<font color="#CCCCCC"> enclaves</font><font color="#E5E5E5"> that means</font>

149
00:06:16,249 --> 00:06:23,869
<font color="#E5E5E5">not even the hypervisor can</font><font color="#CCCCCC"> inspect the</font>

150
00:06:18,229 --> 00:06:25,878
memory<font color="#E5E5E5"> of the anklet when you start an</font><font color="#CCCCCC"> s</font>

151
00:06:23,869 --> 00:06:30,649
checks application<font color="#E5E5E5"> the process runs as</font>

152
00:06:25,879 --> 00:06:33,139
follows<font color="#CCCCCC"> so you would start the untrusted</font>

153
00:06:30,649 --> 00:06:34,969
<font color="#E5E5E5">part which would be your</font><font color="#CCCCCC"> your password</font>

154
00:06:33,139 --> 00:06:36,949
manager executable and

155
00:06:34,969 --> 00:06:38,808
of<font color="#E5E5E5"> unloading this untrusted part would</font>

156
00:06:36,949 --> 00:06:41,989
create an anklet which means technically

157
00:06:38,809 --> 00:06:44,869
that the<font color="#CCCCCC"> DLL or shared object which</font>

158
00:06:41,989 --> 00:06:49,188
contains<font color="#E5E5E5"> the anklet code will be loaded</font>

159
00:06:44,869 --> 00:06:51,949
into memory<font color="#E5E5E5"> and upon that point the end</font>

160
00:06:49,189 --> 00:06:55,329
clave itself is<font color="#E5E5E5"> encrypted in memory and</font>

161
00:06:51,949 --> 00:06:59,119
protected<font color="#E5E5E5"> and from Darren can start</font>

162
00:06:55,329 --> 00:07:01,479
guarding secrets<font color="#E5E5E5"> which means that for</font>

163
00:06:59,119 --> 00:07:05,089
example<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application part would call</font>

164
00:07:01,479 --> 00:07:07,188
my pointer<font color="#CCCCCC"> here</font><font color="#E5E5E5"> would call a trusted</font>

165
00:07:05,089 --> 00:07:10,459
function which is one function exported

166
00:07:07,189 --> 00:07:12,709
by the trusted part of the<font color="#E5E5E5"> application</font>

167
00:07:10,459 --> 00:07:16,399
which means<font color="#CCCCCC"> the anklet and</font><font color="#E5E5E5"> once this</font>

168
00:07:12,709 --> 00:07:18,529
<font color="#E5E5E5">starts executing that means that code</font>

169
00:07:16,399 --> 00:07:21,289
inside<font color="#E5E5E5"> of the encrypted part of the</font>

170
00:07:18,529 --> 00:07:23,929
<font color="#CCCCCC">application will be executed</font><font color="#E5E5E5"> and will be</font>

171
00:07:21,289 --> 00:07:29,239
able<font color="#E5E5E5"> to maintain and manage the secrets</font>

172
00:07:23,929 --> 00:07:32,119
provided<font color="#CCCCCC"> by E</font><font color="#E5E5E5"> and click the requirements</font>

173
00:07:29,239 --> 00:07:32,508
for starting and loading<font color="#E5E5E5"> s checks and</font>

174
00:07:32,119 --> 00:07:36,709
claves

175
00:07:32,509 --> 00:07:40,429
are as false<font color="#E5E5E5"> so naturally</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> bear</font>

176
00:07:36,709 --> 00:07:42,589
operating system<font color="#CCCCCC"> oops sorry a better</font>

177
00:07:40,429 --> 00:07:45,529
<font color="#CCCCCC">training</font><font color="#E5E5E5"> system without any installed</font>

178
00:07:42,589 --> 00:07:47,089
<font color="#E5E5E5">SDK sorry without installed runtime and</font>

179
00:07:45,529 --> 00:07:50,680
without<font color="#E5E5E5"> this checks Neville will not be</font>

180
00:07:47,089 --> 00:07:53,000
<font color="#E5E5E5">able to load</font><font color="#CCCCCC"> SGX applications</font>

181
00:07:50,680 --> 00:07:54,710
more specifically there's three

182
00:07:53,000 --> 00:07:57,080
<font color="#E5E5E5">requirements that your system</font><font color="#CCCCCC"> has to</font>

183
00:07:54,710 --> 00:07:59,060
fulfill<font color="#E5E5E5"> to be actually able</font><font color="#CCCCCC"> to execute</font>

184
00:07:57,080 --> 00:08:02,409
<font color="#E5E5E5">as Jax applications the first one will</font>

185
00:07:59,060 --> 00:08:04,970
<font color="#CCCCCC">be your</font><font color="#E5E5E5"> hardware needs to support it the</font>

186
00:08:02,410 --> 00:08:06,710
first generation<font color="#E5E5E5"> of Intel processors</font>

187
00:08:04,970 --> 00:08:09,380
that<font color="#CCCCCC"> supports</font><font color="#E5E5E5"> STX as far as I remember</font>

188
00:08:06,710 --> 00:08:12,109
came out in 2015<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> the skylight</font>

189
00:08:09,380 --> 00:08:14,510
generation so if your processor is<font color="#E5E5E5"> older</font>

190
00:08:12,110 --> 00:08:16,460
<font color="#E5E5E5">than</font><font color="#CCCCCC"> 2015</font><font color="#E5E5E5"> you will</font><font color="#CCCCCC"> likely not</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

191
00:08:14,510 --> 00:08:19,460
execute as<font color="#CCCCCC"> Jax applications on your</font>

192
00:08:16,460 --> 00:08:22,669
machine in<font color="#CCCCCC"> Hardware mode you can find</font>

193
00:08:19,460 --> 00:08:27,739
out that your machine<font color="#E5E5E5"> supports</font><font color="#CCCCCC"> SGX</font>

194
00:08:22,670 --> 00:08:31,100
by looking at the<font color="#E5E5E5"> CPU ID</font><font color="#CCCCCC"> leave seven and</font>

195
00:08:27,740 --> 00:08:35,419
find out whether<font color="#E5E5E5"> the</font><font color="#CCCCCC"> STS SGX</font>

196
00:08:31,100 --> 00:08:38,930
is set to one<font color="#E5E5E5"> it sounds very complex</font>

197
00:08:35,419 --> 00:08:41,179
thankfully<font color="#E5E5E5"> a researcher</font><font color="#CCCCCC"> going under</font><font color="#E5E5E5"> a</font>

198
00:08:38,929 --> 00:08:43,839
<font color="#E5E5E5">nickname</font><font color="#CCCCCC"> IEX</font><font color="#E5E5E5"> however you</font><font color="#CCCCCC"> spelled</font>

199
00:08:41,179 --> 00:08:46,910
has provided<font color="#E5E5E5"> software which helps you</font>

200
00:08:43,840 --> 00:08:50,000
detect whether your hardware<font color="#CCCCCC"> is from the</font>

201
00:08:46,910 --> 00:08:53,089
<font color="#CCCCCC">regeneration and can execute SGX</font>

202
00:08:50,000 --> 00:08:55,100
applications where<font color="#E5E5E5"> although only having</font>

203
00:08:53,090 --> 00:08:56,960
hardware will<font color="#CCCCCC"> support as Jax doesn't</font>

204
00:08:55,100 --> 00:09:00,350
<font color="#CCCCCC">help you much</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> Jax also needs to be</font>

205
00:08:56,960 --> 00:09:03,950
<font color="#E5E5E5">enabled in BIOS this can be done through</font>

206
00:09:00,350 --> 00:09:07,940
<font color="#E5E5E5">the model specific</font><font color="#CCCCCC"> register ia32 feature</font>

207
00:09:03,950 --> 00:09:09,950
control<font color="#E5E5E5"> where a bit number</font><font color="#CCCCCC"> 18 and ables</font>

208
00:09:07,940 --> 00:09:11,270
or<font color="#CCCCCC"> disabled</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> Jack's yeah when you</font>

209
00:09:09,950 --> 00:09:13,070
start work at Intel you<font color="#CCCCCC"> talked a lot</font>

210
00:09:11,270 --> 00:09:16,370
<font color="#CCCCCC">about particular bits and processors I'm</font>

211
00:09:13,070 --> 00:09:18,529
sorry<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is usually though just a</font>

212
00:09:16,370 --> 00:09:22,370
<font color="#CCCCCC">switching</font><font color="#E5E5E5"> bias that you have to</font>

213
00:09:18,529 --> 00:09:24,350
to enable/disable<font color="#CCCCCC"> SGX</font><font color="#E5E5E5"> and last point</font>

214
00:09:22,370 --> 00:09:26,029
<font color="#E5E5E5">would be as Jax runtime you need to</font>

215
00:09:24,350 --> 00:09:29,089
install a piece of software<font color="#E5E5E5"> which brings</font>

216
00:09:26,029 --> 00:09:30,790
you all<font color="#CCCCCC"> the architectural</font><font color="#E5E5E5"> enclaves that</font>

217
00:09:29,089 --> 00:09:33,949
help your<font color="#CCCCCC"> operating system load and</font>

218
00:09:30,790 --> 00:09:36,050
measure<font color="#E5E5E5"> enclaves once they're loaded</font>

219
00:09:33,949 --> 00:09:38,389
from<font color="#E5E5E5"> the applications and without that</font>

220
00:09:36,050 --> 00:09:41,180
again you won't<font color="#E5E5E5"> be able to execute as</font>

221
00:09:38,389 --> 00:09:43,639
<font color="#CCCCCC">Jax applications</font><font color="#E5E5E5"> what's interesting</font>

222
00:09:41,180 --> 00:09:45,439
<font color="#E5E5E5">there is two different runtimes the</font>

223
00:09:43,639 --> 00:09:48,439
hardware run time<font color="#CCCCCC"> and the simulator run</font>

224
00:09:45,439 --> 00:09:51,740
time with near<font color="#CCCCCC"> SGX underscore</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> TS</font>

225
00:09:48,439 --> 00:09:54,920
<font color="#CCCCCC">use underscore sim this is very</font><font color="#E5E5E5"> handy if</font>

226
00:09:51,740 --> 00:09:56,959
you<font color="#CCCCCC"> want to develop as Jax applications</font>

227
00:09:54,920 --> 00:09:59,680
for example<font color="#CCCCCC"> in the virtual</font><font color="#E5E5E5"> machine</font>

228
00:09:56,959 --> 00:10:01,758
virtual machines by nature cannot

229
00:09:59,680 --> 00:10:04,579
execute enclaves<font color="#E5E5E5"> in hardware mode</font>

230
00:10:01,759 --> 00:10:09,110
because they don't have<font color="#CCCCCC"> access to these</font>

231
00:10:04,579 --> 00:10:11,120
<font color="#CCCCCC">features of the CPU</font><font color="#E5E5E5"> so just tell me who</font>

232
00:10:09,110 --> 00:10:13,100
<font color="#E5E5E5">were thinking about developing</font>

233
00:10:11,120 --> 00:10:14,329
ransomware inside of an and clay<font color="#E5E5E5"> you</font>

234
00:10:13,100 --> 00:10:16,189
might want<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that in a</font><font color="#CCCCCC"> virtual</font>

235
00:10:14,329 --> 00:10:19,359
machine<font color="#E5E5E5"> and then the simulator comes in</font>

236
00:10:16,189 --> 00:10:21,849
very handy<font color="#CCCCCC"> I did not officially say that</font>

237
00:10:19,360 --> 00:10:24,709
<font color="#CCCCCC">all right this much about us checks I</font>

238
00:10:21,850 --> 00:10:28,129
provided three demos<font color="#E5E5E5"> for this talk today</font>

239
00:10:24,709 --> 00:10:30,170
<font color="#E5E5E5">one of them would be my</font><font color="#CCCCCC"> male work and as</font>

240
00:10:28,129 --> 00:10:32,769
<font color="#CCCCCC">check my my ransomware teleporter</font>

241
00:10:30,170 --> 00:10:34,370
<font color="#CCCCCC">tonightly</font><font color="#E5E5E5"> the second one would show</font>

242
00:10:32,769 --> 00:10:37,519
<font color="#CCCCCC">let's talk about this</font><font color="#E5E5E5"> later</font>

243
00:10:34,370 --> 00:10:40,730
<font color="#E5E5E5">let me show you the first the first demo</font>

244
00:10:37,519 --> 00:10:42,559
<font color="#CCCCCC">I called my first</font><font color="#E5E5E5"> demo George George is</font>

245
00:10:40,730 --> 00:10:44,920
an interest checks<font color="#CCCCCC"> enhanced ransomware</font>

246
00:10:42,559 --> 00:10:47,260
<font color="#E5E5E5">which means that I</font>

247
00:10:44,920 --> 00:10:49,630
<font color="#CCCCCC">I went the classical runs from</font><font color="#E5E5E5"> a</font>

248
00:10:47,260 --> 00:10:51,220
development<font color="#CCCCCC"> away and looked up when some</font>

249
00:10:49,630 --> 00:10:53,680
<font color="#CCCCCC">recording internet and copy pasted it</font>

250
00:10:51,220 --> 00:10:55,180
<font color="#CCCCCC">into nine clave and fixed the API calls</font>

251
00:10:53,680 --> 00:10:57,729
<font color="#E5E5E5">and the data that</font><font color="#CCCCCC"> flows back and</font>

252
00:10:55,180 --> 00:11:00,250
<font color="#E5E5E5">forwards</font><font color="#CCCCCC"> and weather</font><font color="#E5E5E5"> and then I had mass</font>

253
00:10:57,730 --> 00:11:04,720
Jackson has friends aware let's have a

254
00:11:00,250 --> 00:11:06,730
look at how that<font color="#E5E5E5"> works here we are</font><font color="#CCCCCC"> yeah</font>

255
00:11:04,720 --> 00:11:09,420
so as mentioned<font color="#CCCCCC"> I developed my</font><font color="#E5E5E5"> HDX stuff</font>

256
00:11:06,730 --> 00:11:12,010
in a virtual<font color="#CCCCCC"> machine</font>

257
00:11:09,420 --> 00:11:15,639
Miranda was<font color="#E5E5E5"> called George</font><font color="#CCCCCC"> my virtual</font>

258
00:11:12,010 --> 00:11:18,990
<font color="#E5E5E5">machines name's Michelle their lives</font>

259
00:11:15,639 --> 00:11:18,990
<font color="#E5E5E5">Michelle okay there we are</font>

260
00:11:20,690 --> 00:11:25,629
<font color="#E5E5E5">there were not let me</font>

261
00:11:26,880 --> 00:11:29,449
<font color="#E5E5E5">oops</font>

262
00:11:36,730 --> 00:11:39,630
can't do it

263
00:11:41,570 --> 00:11:45,560
<font color="#CCCCCC">looks brother</font>

264
00:11:43,670 --> 00:11:49,400
yeah<font color="#E5E5E5"> yeah</font>

265
00:11:45,560 --> 00:11:57,459
<font color="#CCCCCC">an interesting all right oh</font><font color="#E5E5E5"> I'll work</font>

266
00:11:49,400 --> 00:11:57,459
<font color="#E5E5E5">this with you okay so here's</font><font color="#CCCCCC"> Michelle</font>

267
00:11:59,360 --> 00:12:03,519
<font color="#CCCCCC">Michel holds all my</font>

268
00:12:04,940 --> 00:12:14,740
run somewhere<font color="#E5E5E5"> there we go</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I</font>

269
00:12:08,480 --> 00:12:19,610
think<font color="#CCCCCC"> I prefer a test directory called</font>

270
00:12:14,740 --> 00:12:22,400
test directory<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I'm great and</font>

271
00:12:19,610 --> 00:12:23,860
naming and the test directory contains

272
00:12:22,400 --> 00:12:26,030
some files out of the

273
00:12:23,860 --> 00:12:26,900
protobuf library from<font color="#CCCCCC"> google because it</font>

274
00:12:26,030 --> 00:12:29,780
didn't have any<font color="#E5E5E5"> other more interesting</font>

275
00:12:26,900 --> 00:12:32,930
files going<font color="#E5E5E5"> on and this is now our</font>

276
00:12:29,780 --> 00:12:35,209
target like this is the victim<font color="#E5E5E5"> and now</font>

277
00:12:32,930 --> 00:12:37,370
<font color="#CCCCCC">I'll execute the</font><font color="#E5E5E5"> STX enhanced ransomware</font>

278
00:12:35,210 --> 00:12:41,810
and hopefully those files will be

279
00:12:37,370 --> 00:12:43,670
<font color="#E5E5E5">encrypted afterwards so I ran the</font>

280
00:12:41,810 --> 00:12:45,349
application<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> also the</font><font color="#E5E5E5"> only</font>

281
00:12:43,670 --> 00:12:47,120
ransomware you will all see that<font color="#E5E5E5"> gives</font>

282
00:12:45,350 --> 00:12:49,010
you<font color="#E5E5E5"> command</font><font color="#CCCCCC"> line output to tell you</font>

283
00:12:47,120 --> 00:12:51,830
about status so<font color="#E5E5E5"> you can see that the</font>

284
00:12:49,010 --> 00:12:54,500
rents<font color="#CCCCCC"> over list the directories and then</font>

285
00:12:51,830 --> 00:12:58,220
<font color="#CCCCCC">started</font><font color="#E5E5E5"> encrypting the faster we're</font>

286
00:12:54,500 --> 00:13:01,310
located in<font color="#E5E5E5"> this directory and naturally</font>

287
00:12:58,220 --> 00:13:04,280
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not very exciting</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> now we can</font>

288
00:13:01,310 --> 00:13:06,640
<font color="#E5E5E5">have a look again into our test dark</font>

289
00:13:04,280 --> 00:13:10,459
<font color="#CCCCCC">story</font>

290
00:13:06,640 --> 00:13:13,100
oops<font color="#E5E5E5"> yeah sure</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> look good</font>

291
00:13:10,460 --> 00:13:15,640
<font color="#CCCCCC">whoa look at let's look</font><font color="#E5E5E5"> at the</font>

292
00:13:13,100 --> 00:13:15,640
microphone

293
00:13:16,500 --> 00:13:21,720
tada now when I look into the make file

294
00:13:19,800 --> 00:13:23,280
<font color="#CCCCCC">it's all encrypted whoo-hoo so</font><font color="#E5E5E5"> I just</font>

295
00:13:21,720 --> 00:13:25,730
showed<font color="#CCCCCC"> you a demo for rent aware which</font>

296
00:13:23,280 --> 00:13:28,890
is not very<font color="#E5E5E5"> exciting but this reason</font>

297
00:13:25,730 --> 00:13:31,650
this<font color="#CCCCCC"> resume are</font><font color="#E5E5E5"> executed out of SJ x</font>

298
00:13:28,890 --> 00:13:33,030
which is the exciting part what go<font color="#CCCCCC"> back</font>

299
00:13:31,650 --> 00:13:36,390
<font color="#E5E5E5">to the presentation and have a look at</font>

300
00:13:33,030 --> 00:13:40,520
how<font color="#E5E5E5"> I did this and why this is possible</font>

301
00:13:36,390 --> 00:13:41,819
<font color="#E5E5E5">and why this is not very difficult</font>

302
00:13:40,520 --> 00:13:45,540
<font color="#E5E5E5">nonsense</font>

303
00:13:41,820 --> 00:13:48,120
once the fix to be<font color="#CCCCCC"> Oregon mouse click</font>

304
00:13:45,540 --> 00:13:52,759
<font color="#CCCCCC">here</font>

305
00:13:48,120 --> 00:13:52,759
changing the screen<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> annoying</font>

306
00:13:57,320 --> 00:13:59,980
<font color="#E5E5E5">okay</font>

307
00:14:03,350 --> 00:14:08,280
<font color="#E5E5E5">okay so here we</font><font color="#CCCCCC"> are back</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> Joyce I</font>

308
00:14:06,600 --> 00:14:11,820
<font color="#E5E5E5">just showed you</font><font color="#CCCCCC"> church</font><font color="#E5E5E5"> how did</font><font color="#CCCCCC"> I</font>

309
00:14:08,280 --> 00:14:13,380
implement<font color="#E5E5E5"> it</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ransomware piece by</font>

310
00:14:11,820 --> 00:14:14,790
itself<font color="#E5E5E5"> is very simple</font><font color="#CCCCCC"> is like this one</font>

311
00:14:13,380 --> 00:14:17,700
page<font color="#E5E5E5"> of code it's called encrypt files</font>

312
00:14:14,790 --> 00:14:19,140
and literally nothing nothing very

313
00:14:17,700 --> 00:14:20,790
<font color="#CCCCCC">complicated also I didn't go all the way</font>

314
00:14:19,140 --> 00:14:22,500
to write the Decrypter again so this<font color="#E5E5E5"> is</font>

315
00:14:20,790 --> 00:14:25,400
<font color="#CCCCCC">the ransomware without</font><font color="#E5E5E5"> the Decrypter I'm</font>

316
00:14:22,500 --> 00:14:28,260
better not<font color="#CCCCCC"> getting affected by it and</font>

317
00:14:25,400 --> 00:14:29,520
<font color="#CCCCCC">how did the port is test checks for as</font>

318
00:14:28,260 --> 00:14:31,290
taxes mentioned before we<font color="#CCCCCC"> have an</font>

319
00:14:29,520 --> 00:14:33,449
application part that's called the

320
00:14:31,290 --> 00:14:35,550
untrusted<font color="#E5E5E5"> part we have the enclaved part</font>

321
00:14:33,450 --> 00:14:37,470
that's called a trusted part<font color="#CCCCCC"> trusted</font>

322
00:14:35,550 --> 00:14:39,599
technically means that you have to trust

323
00:14:37,470 --> 00:14:41,130
it which is actually<font color="#E5E5E5"> not that great</font>

324
00:14:39,600 --> 00:14:42,840
<font color="#E5E5E5">because if you</font><font color="#CCCCCC"> have to trust</font><font color="#E5E5E5"> something</font>

325
00:14:41,130 --> 00:14:45,870
<font color="#E5E5E5">you can inspect it you can change it</font><font color="#CCCCCC"> you</font>

326
00:14:42,840 --> 00:14:47,700
<font color="#CCCCCC">can modify</font><font color="#E5E5E5"> anything in there either way</font>

327
00:14:45,870 --> 00:14:49,410
we also<font color="#E5E5E5"> have helper functions that help</font>

328
00:14:47,700 --> 00:14:51,510
the end<font color="#E5E5E5"> qwave and the application</font>

329
00:14:49,410 --> 00:14:53,490
communicate with each other<font color="#E5E5E5"> those two</font>

330
00:14:51,510 --> 00:14:55,290
<font color="#CCCCCC">parts look as</font><font color="#E5E5E5"> follows we have the end</font>

331
00:14:53,490 --> 00:14:57,660
clave on the left side<font color="#E5E5E5"> and the</font>

332
00:14:55,290 --> 00:14:59,069
application<font color="#E5E5E5"> part on the right side and</font>

333
00:14:57,660 --> 00:15:01,709
there we have a main function<font color="#E5E5E5"> which</font>

334
00:14:59,070 --> 00:15:04,560
issues<font color="#E5E5E5"> something</font><font color="#CCCCCC"> called an e call which</font>

335
00:15:01,710 --> 00:15:07,020
then calls<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function is exported by</font>

336
00:15:04,560 --> 00:15:09,150
the<font color="#E5E5E5"> enclaves library which is called</font>

337
00:15:07,020 --> 00:15:11,340
star trends of are<font color="#E5E5E5"> very creative again</font>

338
00:15:09,150 --> 00:15:13,020
<font color="#E5E5E5">and will then start in all writing files</font>

339
00:15:11,340 --> 00:15:14,670
and read the<font color="#CCCCCC"> plane file and write the</font>

340
00:15:13,020 --> 00:15:16,290
<font color="#E5E5E5">encrypted file and do the encryption</font>

341
00:15:14,670 --> 00:15:17,810
between<font color="#E5E5E5"> and delete the plane</font><font color="#CCCCCC"> fallen drop</font>

342
00:15:16,290 --> 00:15:21,780
the ransom note<font color="#E5E5E5"> like whatever</font><font color="#CCCCCC"> ends over</font>

343
00:15:17,810 --> 00:15:23,729
<font color="#E5E5E5">will do the interesting part</font><font color="#CCCCCC"> here though</font>

344
00:15:21,780 --> 00:15:26,579
something I did<font color="#E5E5E5"> not mention yet the</font>

345
00:15:23,730 --> 00:15:30,390
functionality<font color="#E5E5E5"> that's provided by</font><font color="#CCCCCC"> STX by</font>

346
00:15:26,580 --> 00:15:35,120
nature by their trusted<font color="#E5E5E5"> libraries isn't</font>

347
00:15:30,390 --> 00:15:37,740
very extensive so for<font color="#E5E5E5"> example for</font>

348
00:15:35,120 --> 00:15:39,780
interaction with<font color="#E5E5E5"> the file system</font><font color="#CCCCCC"> the end</font>

349
00:15:37,740 --> 00:15:41,310
<font color="#CCCCCC">clave will have to leave the protected</font>

350
00:15:39,780 --> 00:15:43,140
memory<font color="#E5E5E5"> and call back into the</font>

351
00:15:41,310 --> 00:15:44,910
application<font color="#CCCCCC"> where our handy helper</font>

352
00:15:43,140 --> 00:15:48,300
functions<font color="#E5E5E5"> come into place</font>

353
00:15:44,910 --> 00:15:50,910
so for activities<font color="#CCCCCC"> like enumerating files</font>

354
00:15:48,300 --> 00:15:52,109
or reading a file or writing a file we

355
00:15:50,910 --> 00:15:55,469
will have to go back to the application

356
00:15:52,110 --> 00:15:57,720
<font color="#E5E5E5">part to execute those system calls or</font>

357
00:15:55,470 --> 00:16:00,390
<font color="#E5E5E5">those API is which results in system</font>

358
00:15:57,720 --> 00:16:02,250
calls and then go back<font color="#E5E5E5"> leave the</font>

359
00:16:00,390 --> 00:16:03,840
application<font color="#CCCCCC"> part again and transition</font>

360
00:16:02,250 --> 00:16:06,870
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> include part where we</font>

361
00:16:03,840 --> 00:16:10,170
continue our malicious activity this

362
00:16:06,870 --> 00:16:13,740
<font color="#E5E5E5">means though that</font><font color="#CCCCCC"> for all</font><font color="#E5E5E5"> of these</font>

363
00:16:10,170 --> 00:16:15,900
<font color="#E5E5E5">activities</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is a as a</font><font color="#CCCCCC"> form of</font>

364
00:16:13,740 --> 00:16:17,160
<font color="#CCCCCC">marinus</font><font color="#E5E5E5"> to deem suspicious like</font><font color="#CCCCCC"> a</font>

365
00:16:15,900 --> 00:16:18,959
numerating<font color="#E5E5E5"> a lots of files and</font>

366
00:16:17,160 --> 00:16:20,550
encrypting them and<font color="#E5E5E5"> writing lots of</font>

367
00:16:18,960 --> 00:16:22,170
files back to<font color="#E5E5E5"> the file</font><font color="#CCCCCC"> system for all</font>

368
00:16:20,550 --> 00:16:23,579
these activities<font color="#E5E5E5"> we need to leave the</font>

369
00:16:22,170 --> 00:16:25,260
<font color="#CCCCCC">anchorage like to protect the</font><font color="#E5E5E5"> part and</font>

370
00:16:23,580 --> 00:16:28,940
<font color="#E5E5E5">get back to the</font><font color="#CCCCCC"> application to</font><font color="#E5E5E5"> execute</font>

371
00:16:25,260 --> 00:16:35,400
<font color="#E5E5E5">those this is annoying</font>

372
00:16:28,940 --> 00:16:37,100
either way<font color="#E5E5E5"> the encryption by itself is</font>

373
00:16:35,400 --> 00:16:39,990
happening inside<font color="#E5E5E5"> of the enclaves</font>

374
00:16:37,100 --> 00:16:42,960
<font color="#E5E5E5">moreover for this this part of the</font>

375
00:16:39,990 --> 00:16:44,670
malicious activity we can leverage as

376
00:16:42,960 --> 00:16:47,010
<font color="#E5E5E5">checks functionality and</font><font color="#CCCCCC"> s check</font>

377
00:16:44,670 --> 00:16:48,540
scripted functionality<font color="#E5E5E5"> to perform the</font>

378
00:16:47,010 --> 00:16:51,660
encryption before<font color="#E5E5E5"> you ready encrypted</font>

379
00:16:48,540 --> 00:16:55,829
file back to<font color="#E5E5E5"> disk because</font><font color="#CCCCCC"> interested me</font>

380
00:16:51,660 --> 00:16:57,449
<font color="#E5E5E5">for</font><font color="#CCCCCC"> any kind of encryption including</font>

381
00:16:55,830 --> 00:17:00,090
writing<font color="#E5E5E5"> extracts protected files as</font>

382
00:16:57,450 --> 00:17:06,420
checks does provide an API

383
00:17:00,090 --> 00:17:07,140
let's go and see<font color="#E5E5E5"> how else this works got</font>

384
00:17:06,420 --> 00:17:11,340
stuck

385
00:17:07,140 --> 00:17:14,160
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> the other thing that I didn't</font>

386
00:17:11,339 --> 00:17:15,780
mention<font color="#E5E5E5"> yet for the transition between</font>

387
00:17:14,160 --> 00:17:18,210
enclaves<font color="#E5E5E5"> and applications</font><font color="#CCCCCC"> I'm back</font><font color="#E5E5E5"> and</font>

388
00:17:15,780 --> 00:17:20,990
<font color="#E5E5E5">forth we need to define</font><font color="#CCCCCC"> how this</font>

389
00:17:18,210 --> 00:17:23,430
<font color="#E5E5E5">transition is</font><font color="#CCCCCC"> going to be performed</font>

390
00:17:20,990 --> 00:17:25,410
<font color="#E5E5E5">therefore as</font><font color="#CCCCCC"> Jax</font><font color="#E5E5E5"> uses enclaves</font>

391
00:17:23,430 --> 00:17:28,350
<font color="#CCCCCC">definitions files though is called EDL</font>

392
00:17:25,410 --> 00:17:30,780
files which lists all the trusted and

393
00:17:28,349 --> 00:17:32,600
untrusted functions that applications

394
00:17:30,780 --> 00:17:36,060
the<font color="#E5E5E5"> nine</font><font color="#CCCCCC"> claves provides for each other</font>

395
00:17:32,600 --> 00:17:37,860
which means<font color="#E5E5E5"> in these</font><font color="#CCCCCC"> EDL files will have</font>

396
00:17:36,060 --> 00:17:39,720
<font color="#CCCCCC">a list of all the</font><font color="#E5E5E5"> untrusted functions</font>

397
00:17:37,860 --> 00:17:43,020
that you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> here which are</font>

398
00:17:39,720 --> 00:17:45,030
exported by the application<font color="#E5E5E5"> for the end</font>

399
00:17:43,020 --> 00:17:46,920
<font color="#E5E5E5">clave meaning</font><font color="#CCCCCC"> the anklet can call</font><font color="#E5E5E5"> in to</font>

400
00:17:45,030 --> 00:17:50,280
those steps<font color="#E5E5E5"> and execute code in the</font>

401
00:17:46,920 --> 00:17:52,590
application<font color="#CCCCCC"> part of the sjx application</font>

402
00:17:50,280 --> 00:17:55,139
the parameters that are<font color="#E5E5E5"> being sent back</font>

403
00:17:52,590 --> 00:17:58,110
<font color="#E5E5E5">and</font><font color="#CCCCCC"> forth have to be very neatly finding</font>

404
00:17:55,140 --> 00:18:00,240
these<font color="#CCCCCC"> ADL files because later on</font><font color="#E5E5E5"> those</font>

405
00:17:58,110 --> 00:18:04,080
definitions are being used by as checks

406
00:18:00,240 --> 00:18:05,940
<font color="#E5E5E5">by e SDK to define helper functions that</font>

407
00:18:04,080 --> 00:18:08,429
help<font color="#E5E5E5"> transition those parameters back</font>

408
00:18:05,940 --> 00:18:10,309
and forth<font color="#E5E5E5"> that means when the extra X</font>

409
00:18:08,430 --> 00:18:12,409
project<font color="#E5E5E5"> is compiled</font>

410
00:18:10,309 --> 00:18:15,200
proxy functions will be automatically

411
00:18:12,409 --> 00:18:16,729
created<font color="#E5E5E5"> which check input and output</font>

412
00:18:15,200 --> 00:18:21,049
parameters<font color="#CCCCCC"> to go in and</font><font color="#E5E5E5"> out of an anklet</font>

413
00:18:16,729 --> 00:18:23,289
<font color="#CCCCCC">that means that the data that</font>

414
00:18:21,049 --> 00:18:25,668
transitions<font color="#E5E5E5"> back and forth is</font>

415
00:18:23,289 --> 00:18:29,869
automatically<font color="#E5E5E5"> checked by the runtime</font>

416
00:18:25,669 --> 00:18:31,879
<font color="#E5E5E5">whether it fits for example a buffer</font>

417
00:18:29,869 --> 00:18:33,139
size or whether the integers are too

418
00:18:31,879 --> 00:18:34,609
large<font color="#CCCCCC"> or too</font><font color="#E5E5E5"> small like the</font><font color="#CCCCCC"> typical</font>

419
00:18:33,139 --> 00:18:40,539
security<font color="#E5E5E5"> problems you would have with</font>

420
00:18:34,609 --> 00:18:43,699
input data<font color="#CCCCCC"> that means enclaved</font><font color="#E5E5E5"> versus</font>

421
00:18:40,539 --> 00:18:46,249
application experiences dedicated

422
00:18:43,700 --> 00:18:47,659
control in two directions<font color="#E5E5E5"> either when</font>

423
00:18:46,249 --> 00:18:49,099
data leaves the application goes into

424
00:18:47,659 --> 00:18:50,499
the enclaves or or when<font color="#E5E5E5"> they at least</font>

425
00:18:49,099 --> 00:18:53,570
the including goes into the application

426
00:18:50,499 --> 00:18:56,989
the module called<font color="#CCCCCC"> has checks</font><font color="#E5E5E5"> actuator</font>

427
00:18:53,570 --> 00:18:58,339
will use<font color="#CCCCCC"> ETL files to create the</font><font color="#E5E5E5"> edge</font>

428
00:18:56,989 --> 00:19:01,089
routines as we call them<font color="#E5E5E5"> or the proxy</font>

429
00:18:58,339 --> 00:19:04,279
functions that help transition those

430
00:19:01,089 --> 00:19:06,918
directions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> indian verify input and</font>

431
00:19:04,279 --> 00:19:09,979
output for<font color="#CCCCCC"> nang click so easy it's not</font>

432
00:19:06,919 --> 00:19:11,809
all that<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to get an application</font><font color="#CCCCCC"> to</font>

433
00:19:09,979 --> 00:19:13,219
transition towards the end click and get

434
00:19:11,809 --> 00:19:17,269
<font color="#E5E5E5">the inclusive</font><font color="#CCCCCC"> transition</font><font color="#E5E5E5"> back this is</font>

435
00:19:13,219 --> 00:19:19,460
very very tedious<font color="#E5E5E5"> as a process luckily</font>

436
00:19:17,269 --> 00:19:21,049
they're providing<font color="#E5E5E5"> ransomware there's a</font>

437
00:19:19,460 --> 00:19:25,969
very interesting<font color="#E5E5E5"> feature which we can</font>

438
00:19:21,049 --> 00:19:28,760
use which does not<font color="#E5E5E5"> use this this</font>

439
00:19:25,969 --> 00:19:32,780
<font color="#CCCCCC">mechanism as mentioned before</font>

440
00:19:28,760 --> 00:19:35,480
as Jax uses I'd say the the enclaves

441
00:19:32,780 --> 00:19:37,730
<font color="#E5E5E5">libraries have to be compiled with the</font>

442
00:19:35,480 --> 00:19:39,380
<font color="#E5E5E5">STX trusted libraries so actually</font>

443
00:19:37,730 --> 00:19:41,120
<font color="#CCCCCC">compiler named wave</font><font color="#E5E5E5"> you naturally do not</font>

444
00:19:39,380 --> 00:19:46,490
have access<font color="#E5E5E5"> to what would be called the</font>

445
00:19:41,120 --> 00:19:49,520
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> or in Linux D the C lip</font><font color="#E5E5E5"> that</font>

446
00:19:46,490 --> 00:19:52,550
would provide API is like open<font color="#E5E5E5"> the file</font>

447
00:19:49,520 --> 00:19:53,990
or read a file or<font color="#E5E5E5"> close</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> file an</font>

448
00:19:52,550 --> 00:19:56,000
interesting<font color="#E5E5E5"> feature that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> found within</font>

449
00:19:53,990 --> 00:19:58,280
<font color="#CCCCCC">as Jack's which helps if you're</font>

450
00:19:56,000 --> 00:20:00,050
interested<font color="#E5E5E5"> in</font><font color="#CCCCCC"> writing reservoir will be</font>

451
00:19:58,280 --> 00:20:02,899
the Intel SGX protected file system

452
00:20:00,050 --> 00:20:05,629
library which is a<font color="#E5E5E5"> library that helps</font>

453
00:20:02,900 --> 00:20:07,970
you write and read<font color="#E5E5E5"> sjx protected files</font>

454
00:20:05,630 --> 00:20:09,650
so this is the only<font color="#E5E5E5"> way as checks and</font>

455
00:20:07,970 --> 00:20:11,360
<font color="#E5E5E5">cleave can actively interact with the</font>

456
00:20:09,650 --> 00:20:14,750
file system without leaving the<font color="#E5E5E5"> the</font>

457
00:20:11,360 --> 00:20:19,790
<font color="#E5E5E5">include memory that means with this file</font>

458
00:20:14,750 --> 00:20:22,280
<font color="#E5E5E5">system</font><font color="#CCCCCC"> memory you can process data</font>

459
00:20:19,790 --> 00:20:24,440
<font color="#E5E5E5">inside of the end clave encrypted inside</font>

460
00:20:22,280 --> 00:20:26,899
<font color="#E5E5E5">the nth wave write it to a file on</font><font color="#CCCCCC"> disk</font>

461
00:20:24,440 --> 00:20:28,340
<font color="#E5E5E5">inside of the end clave</font><font color="#CCCCCC"> and those</font>

462
00:20:26,900 --> 00:20:31,550
inspection software<font color="#E5E5E5"> will ever see what</font>

463
00:20:28,340 --> 00:20:34,100
is<font color="#E5E5E5"> actually written to that file this</font>

464
00:20:31,550 --> 00:20:36,700
looks the<font color="#E5E5E5"> spa's</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> provided a very</font>

465
00:20:34,100 --> 00:20:40,459
beautiful graphic to<font color="#CCCCCC"> show how this works</font>

466
00:20:36,700 --> 00:20:43,190
<font color="#CCCCCC">you will</font><font color="#E5E5E5"> have to be the file system like</font>

467
00:20:40,460 --> 00:20:45,020
<font color="#E5E5E5">this this layer down here shows the file</font>

468
00:20:43,190 --> 00:20:49,010
system where we have normal readable

469
00:20:45,020 --> 00:20:51,470
files and<font color="#CCCCCC"> sjx protected files for an in</font>

470
00:20:49,010 --> 00:20:53,480
clave to<font color="#CCCCCC"> get access</font><font color="#E5E5E5"> to a normal file on</font>

471
00:20:51,470 --> 00:20:55,490
file system<font color="#CCCCCC"> the end</font><font color="#E5E5E5"> clip would have to</font>

472
00:20:53,480 --> 00:20:57,200
issue an oak<font color="#E5E5E5"> hall and access the file</font>

473
00:20:55,490 --> 00:20:58,250
through<font color="#CCCCCC"> the application part because it</font>

474
00:20:57,200 --> 00:21:01,070
cannot exit

475
00:20:58,250 --> 00:21:04,220
<font color="#E5E5E5">system call</font><font color="#CCCCCC"> that helps that</font><font color="#E5E5E5"> access the</font>

476
00:21:01,070 --> 00:21:05,980
file on disk for the<font color="#CCCCCC"> sjx protected file</font>

477
00:21:04,220 --> 00:21:08,030
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> this is not true since we have our</font>

478
00:21:05,980 --> 00:21:10,880
protected file system<font color="#E5E5E5"> library that helps</font>

479
00:21:08,030 --> 00:21:12,830
the end clave to<font color="#CCCCCC"> gain direct</font><font color="#E5E5E5"> access to</font>

480
00:21:10,880 --> 00:21:15,620
<font color="#E5E5E5">the file system but this goes only for</font>

481
00:21:12,830 --> 00:21:17,870
sjx protected files<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> end clip can</font>

482
00:21:15,620 --> 00:21:20,600
only write a read fastest has created by

483
00:21:17,870 --> 00:21:23,840
itself<font color="#E5E5E5"> with</font><font color="#CCCCCC"> its own key</font><font color="#E5E5E5"> and cannot</font>

484
00:21:20,600 --> 00:21:26,060
<font color="#E5E5E5">access normal files on disk without the</font>

485
00:21:23,840 --> 00:21:28,970
<font color="#CCCCCC">OCO yeah naturally the application part</font>

486
00:21:26,060 --> 00:21:30,379
<font color="#E5E5E5">can</font><font color="#CCCCCC"> not ever touch or can't touch the</font>

487
00:21:28,970 --> 00:21:31,790
<font color="#E5E5E5">edge to expand disk but it</font><font color="#CCCCCC"> can't do</font>

488
00:21:30,380 --> 00:21:35,510
anything with it because<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course it's</font>

489
00:21:31,790 --> 00:21:37,730
<font color="#E5E5E5">encrypted and protected</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so our</font>

490
00:21:35,510 --> 00:21:40,310
<font color="#E5E5E5">end somewhere has very well protected</font>

491
00:21:37,730 --> 00:21:41,840
files there is<font color="#CCCCCC"> no way any security</font>

492
00:21:40,310 --> 00:21:46,790
company can<font color="#E5E5E5"> ever write the Decrypter for</font>

493
00:21:41,840 --> 00:21:50,389
those fast<font color="#E5E5E5"> I would suppose if not the</font><font color="#CCCCCC"> S</font>

494
00:21:46,790 --> 00:21:52,190
<font color="#E5E5E5">checks authors have a bug in their</font>

495
00:21:50,390 --> 00:21:58,070
crypto routines which I wouldn't<font color="#E5E5E5"> think</font>

496
00:21:52,190 --> 00:22:00,320
it's the<font color="#E5E5E5"> case and another thing about</font>

497
00:21:58,070 --> 00:22:03,350
those in<font color="#E5E5E5"> place that I haven't</font><font color="#CCCCCC"> mentioned</font>

498
00:22:00,320 --> 00:22:05,120
<font color="#CCCCCC">yet at all is if they're</font><font color="#E5E5E5"> not loaded in</font>

499
00:22:03,350 --> 00:22:07,399
memory<font color="#E5E5E5"> if they're lying around the disk</font>

500
00:22:05,120 --> 00:22:09,860
before<font color="#CCCCCC"> the application</font><font color="#E5E5E5"> started they're</font>

501
00:22:07,400 --> 00:22:11,600
totally unencrypted<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if we're either</font>

502
00:22:09,860 --> 00:22:12,860
<font color="#CCCCCC">in somewhere in these checks we have the</font>

503
00:22:11,600 --> 00:22:15,350
problem that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't actually have</font>

504
00:22:12,860 --> 00:22:16,550
access<font color="#E5E5E5"> to all the system</font><font color="#CCCCCC"> costs</font><font color="#E5E5E5"> that we</font>

505
00:22:15,350 --> 00:22:18,800
would need to<font color="#E5E5E5"> implement the</font>

506
00:22:16,550 --> 00:22:20,210
functionality<font color="#E5E5E5"> but also that as long</font><font color="#CCCCCC"> as</font>

507
00:22:18,800 --> 00:22:21,740
the<font color="#E5E5E5"> binary is lying on disk and not</font>

508
00:22:20,210 --> 00:22:24,530
being loaded into memory<font color="#CCCCCC"> it's not</font>

509
00:22:21,740 --> 00:22:26,150
actually encrypted when I started my

510
00:22:24,530 --> 00:22:27,980
<font color="#CCCCCC">research I did not I</font><font color="#E5E5E5"> wasn't aware</font><font color="#CCCCCC"> of</font>

511
00:22:26,150 --> 00:22:29,660
<font color="#E5E5E5">that fact</font><font color="#CCCCCC"> I thought as Jax encrypts</font>

512
00:22:27,980 --> 00:22:32,750
everything at<font color="#E5E5E5"> all</font><font color="#CCCCCC"> times but there's</font><font color="#E5E5E5"> not</font>

513
00:22:29,660 --> 00:22:34,580
the case though<font color="#E5E5E5"> only at the loading</font>

514
00:22:32,750 --> 00:22:35,990
point in time application will out the

515
00:22:34,580 --> 00:22:37,639
enclaves<font color="#E5E5E5"> the anklet will be measured</font>

516
00:22:35,990 --> 00:22:39,440
when<font color="#E5E5E5"> the measurement comes back positive</font>

517
00:22:37,640 --> 00:22:40,590
so this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> armorer unmodified</font>

518
00:22:39,440 --> 00:22:43,200
enclaves

519
00:22:40,590 --> 00:22:44,730
and cliff will<font color="#CCCCCC"> be encrypted memory will</font>

520
00:22:43,200 --> 00:22:47,730
<font color="#CCCCCC">be loaded into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> anklet</font><font color="#E5E5E5"> page cache</font>

521
00:22:44,730 --> 00:22:50,279
will be protected<font color="#E5E5E5"> there but not on disk</font>

522
00:22:47,730 --> 00:22:52,230
<font color="#E5E5E5">so in theory you could go on and and</font>

523
00:22:50,279 --> 00:22:55,250
<font color="#E5E5E5">always</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> some words just as you see</font>

524
00:22:52,230 --> 00:22:57,690
here with either<font color="#CCCCCC"> Pro with any other</font>

525
00:22:55,250 --> 00:23:00,390
analysis tool<font color="#E5E5E5"> and could just read the</font>

526
00:22:57,690 --> 00:23:04,140
source code with<font color="#E5E5E5"> a dick compiler and</font>

527
00:23:00,390 --> 00:23:07,440
still analyze the binary this also means

528
00:23:04,140 --> 00:23:09,240
that<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have proper antivirus which</font>

529
00:23:07,440 --> 00:23:12,510
of course has signatures for<font color="#E5E5E5"> all the</font>

530
00:23:09,240 --> 00:23:13,919
random<font color="#E5E5E5"> words out</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> in theory they</font>

531
00:23:12,510 --> 00:23:19,260
could totally<font color="#E5E5E5"> detect these binaries</font>

532
00:23:13,919 --> 00:23:22,110
there's no way<font color="#CCCCCC"> he</font><font color="#E5E5E5"> could not that's sad</font>

533
00:23:19,260 --> 00:23:25,919
the panic of antivirus that<font color="#CCCCCC"> it could not</font>

534
00:23:22,110 --> 00:23:27,870
<font color="#E5E5E5">detect</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> checks protected malware would</font>

535
00:23:25,919 --> 00:23:31,260
only be true<font color="#E5E5E5"> if they were actually</font><font color="#CCCCCC"> able</font>

536
00:23:27,870 --> 00:23:34,260
to<font color="#E5E5E5"> inspect memory at</font><font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> on a</font>

537
00:23:31,260 --> 00:23:35,700
running system<font color="#E5E5E5"> whereas correct me if I'm</font>

538
00:23:34,260 --> 00:23:37,350
wrong<font color="#E5E5E5"> but I do not know</font><font color="#CCCCCC"> about any</font>

539
00:23:35,700 --> 00:23:40,649
security software which is able<font color="#E5E5E5"> to</font>

540
00:23:37,350 --> 00:23:45,928
inspect<font color="#E5E5E5"> running process memory as it is</font>

541
00:23:40,649 --> 00:23:47,729
in<font color="#E5E5E5"> in in DRAM</font><font color="#CCCCCC"> either way we can have a</font>

542
00:23:45,929 --> 00:23:49,260
<font color="#CCCCCC">conversation about this</font><font color="#E5E5E5"> later on</font><font color="#CCCCCC"> I just</font>

543
00:23:47,730 --> 00:23:50,159
meant to say that<font color="#E5E5E5"> binary is relying</font>

544
00:23:49,260 --> 00:23:53,480
unencrypted on disk

545
00:23:50,159 --> 00:23:55,799
if<font color="#CCCCCC"> antivirus manages to find out the</font>

546
00:23:53,480 --> 00:23:57,270
malicious function in there they<font color="#E5E5E5"> can</font>

547
00:23:55,799 --> 00:23:59,700
totally create signatures and find<font color="#E5E5E5"> these</font>

548
00:23:57,270 --> 00:24:02,190
<font color="#CCCCCC">false</font><font color="#E5E5E5"> still the problem there that I</font>

549
00:23:59,700 --> 00:24:05,549
would see for security software is<font color="#CCCCCC"> that</font>

550
00:24:02,190 --> 00:24:08,010
the most part of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> compiled and</font><font color="#E5E5E5"> clip</font>

551
00:24:05,549 --> 00:24:10,830
is actually<font color="#E5E5E5"> library code as mentioned</font>

552
00:24:08,010 --> 00:24:14,190
before enclaves require the

553
00:24:10,830 --> 00:24:16,350
as<font color="#E5E5E5"> checks trusted libraries</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> used</font>

554
00:24:14,190 --> 00:24:18,090
<font color="#E5E5E5">for compilation and also those libraries</font>

555
00:24:16,350 --> 00:24:20,850
are<font color="#E5E5E5"> statically compiled into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary</font>

556
00:24:18,090 --> 00:24:22,770
that<font color="#E5E5E5"> means a nine clave with three lines</font>

557
00:24:20,850 --> 00:24:25,230
<font color="#E5E5E5">of source code will naturally come with</font>

558
00:24:22,770 --> 00:24:27,690
<font color="#CCCCCC">400 kilobytes</font><font color="#E5E5E5"> of code because</font><font color="#CCCCCC"> all the</font>

559
00:24:25,230 --> 00:24:30,270
library code ends up in the binary<font color="#CCCCCC"> there</font>

560
00:24:27,690 --> 00:24:35,460
<font color="#E5E5E5">is no dynamic loading from from within</font>

561
00:24:30,270 --> 00:24:37,410
the<font color="#E5E5E5"> end clave</font><font color="#CCCCCC"> I mean people might</font><font color="#E5E5E5"> have</font>

562
00:24:35,460 --> 00:24:39,240
found a<font color="#E5E5E5"> way either but officially there</font>

563
00:24:37,410 --> 00:24:41,280
is no way to<font color="#E5E5E5"> dynamically load libraries</font>

564
00:24:39,240 --> 00:24:42,780
into sjx enclaves<font color="#CCCCCC"> you have to lose use</font>

565
00:24:41,280 --> 00:24:47,129
the<font color="#CCCCCC"> trusted libraries and they have to</font>

566
00:24:42,780 --> 00:24:48,540
be statically present in the<font color="#E5E5E5"> binary for</font>

567
00:24:47,130 --> 00:24:52,550
threat detection that means that you

568
00:24:48,540 --> 00:24:56,250
<font color="#E5E5E5">have</font><font color="#CCCCCC"> 500 you see the number down</font><font color="#E5E5E5"> here</font>

569
00:24:52,550 --> 00:24:58,649
<font color="#E5E5E5">535 functions inside the binary that are</font>

570
00:24:56,250 --> 00:25:00,510
non malicious so that's a lot of source

571
00:24:58,650 --> 00:25:02,580
code where you should<font color="#CCCCCC"> not create a</font>

572
00:25:00,510 --> 00:25:04,379
signature for and only<font color="#E5E5E5"> one function</font><font color="#CCCCCC"> that</font>

573
00:25:02,580 --> 00:25:05,520
<font color="#E5E5E5">contains malicious code which would be</font>

574
00:25:04,380 --> 00:25:07,740
the<font color="#E5E5E5"> one where you have to</font><font color="#CCCCCC"> create a</font>

575
00:25:05,520 --> 00:25:09,060
signature for if you know a little<font color="#E5E5E5"> bit</font>

576
00:25:07,740 --> 00:25:10,590
<font color="#E5E5E5">about</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> antivirus</font><font color="#CCCCCC"> Chris their</font>

577
00:25:09,060 --> 00:25:12,149
signatures most of those signatures are

578
00:25:10,590 --> 00:25:13,889
created automatically which means

579
00:25:12,150 --> 00:25:15,600
there's robots<font color="#E5E5E5"> which try to create</font>

580
00:25:13,890 --> 00:25:17,670
signatures and<font color="#E5E5E5"> then test them against</font>

581
00:25:15,600 --> 00:25:19,560
the fail set and<font color="#CCCCCC"> the binaries that</font>

582
00:25:17,670 --> 00:25:20,970
<font color="#E5E5E5">attack benign binaries are the</font>

583
00:25:19,560 --> 00:25:22,320
signatures the detect anomalies come

584
00:25:20,970 --> 00:25:23,730
back and they're tested again which

585
00:25:22,320 --> 00:25:26,100
means like creating a signature<font color="#E5E5E5"> for this</font>

586
00:25:23,730 --> 00:25:27,900
kind of<font color="#E5E5E5"> binary would take months because</font>

587
00:25:26,100 --> 00:25:29,699
<font color="#E5E5E5">you have foreigner kilobytes of code</font>

588
00:25:27,900 --> 00:25:31,530
<font color="#CCCCCC">that could match Pro signature</font><font color="#E5E5E5"> and they</font>

589
00:25:29,700 --> 00:25:33,360
all come back and fail test and this

590
00:25:31,530 --> 00:25:34,889
<font color="#E5E5E5">goes on and</font><font color="#CCCCCC"> on until one signature is</font>

591
00:25:33,360 --> 00:25:36,059
found that matches<font color="#CCCCCC"> exactly the malicious</font>

592
00:25:34,890 --> 00:25:37,990
part

593
00:25:36,059 --> 00:25:39,100
anyway<font color="#E5E5E5"> that's from my time</font><font color="#CCCCCC"> with</font>

594
00:25:37,990 --> 00:25:42,280
antivirus where I could rent a bed

595
00:25:39,100 --> 00:25:46,000
forever<font color="#E5E5E5"> let's go on how can we make a</font>

596
00:25:42,280 --> 00:25:48,220
<font color="#E5E5E5">situation better how can</font><font color="#CCCCCC"> we improve the</font>

597
00:25:46,000 --> 00:25:52,630
status of<font color="#CCCCCC"> our ends were to be less</font>

598
00:25:48,220 --> 00:25:55,120
obvious<font color="#E5E5E5"> sneaky bastards be sneaky let's</font>

599
00:25:52,630 --> 00:25:58,150
go<font color="#CCCCCC"> onto the</font><font color="#E5E5E5"> second demo the second thing</font>

600
00:25:55,120 --> 00:26:03,428
was<font color="#E5E5E5"> called Martha</font><font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> woman</font><font color="#CCCCCC"> and in</font>

601
00:25:58,150 --> 00:26:05,860
<font color="#CCCCCC">the</font><font color="#E5E5E5"> nest Jack's dress</font><font color="#CCCCCC"> to tell you a</font>

602
00:26:03,429 --> 00:26:10,150
little bit<font color="#E5E5E5"> about Martha</font><font color="#CCCCCC"> so my my main</font>

603
00:26:05,860 --> 00:26:12,668
concern about the<font color="#E5E5E5"> yes checks random</font>

604
00:26:10,150 --> 00:26:14,200
where was that<font color="#CCCCCC"> I always had to leave the</font>

605
00:26:12,669 --> 00:26:17,559
anklet part to get<font color="#E5E5E5"> back to the</font>

606
00:26:14,200 --> 00:26:19,870
<font color="#CCCCCC">application</font><font color="#E5E5E5"> which is super obvious so in</font>

607
00:26:17,559 --> 00:26:21,910
theory if you<font color="#E5E5E5"> load this this application</font>

608
00:26:19,870 --> 00:26:24,219
<font color="#E5E5E5">of this ransomware you would have the</font>

609
00:26:21,910 --> 00:26:26,500
<font color="#CCCCCC">anklet part encrypted in memory none</font>

610
00:26:24,220 --> 00:26:28,630
inspectable so this is encrypted<font color="#CCCCCC"> but the</font>

611
00:26:26,500 --> 00:26:30,190
application part<font color="#E5E5E5"> is not so you have the</font>

612
00:26:28,630 --> 00:26:31,720
<font color="#CCCCCC">application</font><font color="#E5E5E5"> part with all the occult</font>

613
00:26:30,190 --> 00:26:33,700
stuff all the system calls that<font color="#CCCCCC"> the</font>

614
00:26:31,720 --> 00:26:35,500
ransomware has to execute<font color="#CCCCCC"> has to be</font>

615
00:26:33,700 --> 00:26:37,750
<font color="#E5E5E5">present in the application part so any</font>

616
00:26:35,500 --> 00:26:40,390
security software which could in theory

617
00:26:37,750 --> 00:26:42,640
inspect running memory or active memory

618
00:26:40,390 --> 00:26:44,830
<font color="#E5E5E5">could still see in the application part</font>

619
00:26:42,640 --> 00:26:46,270
<font color="#E5E5E5">that there is these steps and could make</font>

620
00:26:44,830 --> 00:26:48,610
conclusions<font color="#E5E5E5"> about the functionality of</font>

621
00:26:46,270 --> 00:26:50,650
<font color="#E5E5E5">the end clave the</font><font color="#CCCCCC"> order inside the</font>

622
00:26:48,610 --> 00:26:54,610
application<font color="#CCCCCC"> or</font><font color="#E5E5E5"> is totally random so if</font>

623
00:26:50,650 --> 00:26:57,299
you have let's<font color="#CCCCCC"> say</font><font color="#E5E5E5"> 500 stops in there</font>

624
00:26:54,610 --> 00:26:59,889
it's<font color="#E5E5E5"> still difficult to conclude</font>

625
00:26:57,299 --> 00:27:02,049
functionality but here<font color="#E5E5E5"> that would be</font>

626
00:26:59,890 --> 00:27:03,940
possible so you would still see all<font color="#E5E5E5"> the</font>

627
00:27:02,049 --> 00:27:08,690
activity of the end<font color="#E5E5E5"> clip without being</font>

628
00:27:03,940 --> 00:27:12,409
able to<font color="#E5E5E5"> inspect the include binary so</font>

629
00:27:08,690 --> 00:27:15,229
thanks to a great idea<font color="#E5E5E5"> of a click</font><font color="#CCCCCC"> I came</font>

630
00:27:12,409 --> 00:27:18,409
<font color="#E5E5E5">up with</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> proof of concept which</font>

631
00:27:15,229 --> 00:27:20,749
does not actually require an alcohol

632
00:27:18,409 --> 00:27:22,639
stop instead<font color="#E5E5E5"> of the application or the</font>

633
00:27:20,749 --> 00:27:25,489
classical local stop inside the

634
00:27:22,639 --> 00:27:29,359
application because<font color="#E5E5E5"> it can perform</font><font color="#CCCCCC"> Cisco</font>

635
00:27:25,489 --> 00:27:32,570
proxying<font color="#CCCCCC"> alright let's have</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> look at</font>

636
00:27:29,359 --> 00:27:35,349
Martha<font color="#E5E5E5"> and what Martha does let me see</font>

637
00:27:32,570 --> 00:27:35,349
if I can

638
00:27:35,830 --> 00:27:42,330
if I start this oh there it is there<font color="#CCCCCC"> it</font>

639
00:27:40,000 --> 00:27:45,739
is<font color="#CCCCCC"> though cool</font>

640
00:27:42,330 --> 00:27:45,739
that's good<font color="#CCCCCC"> luck to Michel</font>

641
00:27:58,429 --> 00:28:05,539
here it's<font color="#E5E5E5"> not called Martha but fun and</font>

642
00:28:00,830 --> 00:28:07,369
<font color="#E5E5E5">profit</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> now if I execute the</font>

643
00:28:05,539 --> 00:28:11,029
application<font color="#E5E5E5"> let's all pray to the</font>

644
00:28:07,369 --> 00:28:13,100
<font color="#E5E5E5">demagogue for a second if this works for</font>

645
00:28:11,029 --> 00:28:14,409
<font color="#E5E5E5">more drama either the sleep instruction</font>

646
00:28:13,100 --> 00:28:17,389
<font color="#E5E5E5">in there</font><font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> here we go</font>

647
00:28:14,409 --> 00:28:17,869
so<font color="#E5E5E5"> Martha just executed what just</font>

648
00:28:17,389 --> 00:28:19,729
<font color="#E5E5E5">happened</font>

649
00:28:17,869 --> 00:28:21,830
Martha waited for three seconds<font color="#E5E5E5"> before</font>

650
00:28:19,730 --> 00:28:24,950
it<font color="#E5E5E5"> would load anything for no reason at</font>

651
00:28:21,830 --> 00:28:27,710
all<font color="#E5E5E5"> and then it</font><font color="#CCCCCC"> said it loads the nth</font>

652
00:28:24,950 --> 00:28:29,809
wave and the top<font color="#E5E5E5"> and running now and oh</font>

653
00:28:27,710 --> 00:28:32,330
yeah I'd<font color="#E5E5E5"> love that</font><font color="#CCCCCC"> she'll</font><font color="#E5E5E5"> code and</font>

654
00:28:29,809 --> 00:28:34,700
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> the shell code</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> gets</font><font color="#E5E5E5"> very</font>

655
00:28:32,330 --> 00:28:39,730
<font color="#E5E5E5">nervous and then all of a</font><font color="#CCCCCC"> sudden we have</font>

656
00:28:34,700 --> 00:28:42,049
a shell here they don't recognize this

657
00:28:39,730 --> 00:28:43,610
<font color="#E5E5E5">you can see the change in</font><font color="#CCCCCC"> color like all</font>

658
00:28:42,049 --> 00:28:45,320
of a sudden there is a different shell

659
00:28:43,610 --> 00:28:47,149
open and I<font color="#E5E5E5"> was in the beginning</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what</font>

660
00:28:45,320 --> 00:28:50,450
<font color="#CCCCCC">Martha did was a little piece of</font><font color="#E5E5E5"> shell</font>

661
00:28:47,149 --> 00:28:51,949
code transition to a local proxy inside

662
00:28:50,450 --> 00:28:55,490
the application<font color="#E5E5E5"> part and then pop the</font>

663
00:28:51,950 --> 00:28:56,990
shell if you don't see<font color="#E5E5E5"> this here</font><font color="#CCCCCC"> this is</font>

664
00:28:55,490 --> 00:28:59,269
nothing<font color="#CCCCCC"> that an English binary you</font>

665
00:28:56,990 --> 00:29:01,039
<font color="#E5E5E5">should be able to do include should not</font>

666
00:28:59,269 --> 00:29:03,049
be able<font color="#E5E5E5"> to pop shelves this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> whole</font>

667
00:29:01,039 --> 00:29:07,509
<font color="#CCCCCC">point of the</font><font color="#E5E5E5"> presentation so here I have</font>

668
00:29:03,049 --> 00:29:07,509
<font color="#CCCCCC">shown that I</font><font color="#E5E5E5"> can this directories I can</font>

669
00:29:08,179 --> 00:29:13,890
read what the first<font color="#CCCCCC"> contained all their</font>

670
00:29:12,150 --> 00:29:16,020
<font color="#E5E5E5">super</font><font color="#CCCCCC"> critically yeah</font><font color="#E5E5E5"> I'm in my own</font>

671
00:29:13,890 --> 00:29:17,160
<font color="#CCCCCC">Shaolin there and theoretically</font><font color="#E5E5E5"> can do</font>

672
00:29:16,020 --> 00:29:22,350
in the<font color="#CCCCCC"> system whatever</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> I'm not</font>

673
00:29:17,160 --> 00:29:25,020
<font color="#E5E5E5">limited</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> s checks</font><font color="#CCCCCC"> anymore except when</font>

674
00:29:22,350 --> 00:29:27,780
I exit the<font color="#CCCCCC"> show ok</font><font color="#E5E5E5"> so what it just</font>

675
00:29:25,020 --> 00:29:31,470
<font color="#CCCCCC">happen</font><font color="#E5E5E5"> let's let's</font><font color="#CCCCCC"> have a closer look</font><font color="#E5E5E5"> at</font>

676
00:29:27,780 --> 00:29:37,379
Martha<font color="#E5E5E5"> and how this works and why the</font>

677
00:29:31,470 --> 00:29:40,740
end clave<font color="#CCCCCC"> just sneaky Lee presentation</font>

678
00:29:37,380 --> 00:29:42,480
there's the presentation<font color="#E5E5E5"> again so why</font>

679
00:29:40,740 --> 00:29:45,650
did why did<font color="#E5E5E5"> my anyway for I wasn't</font><font color="#CCCCCC"> able</font>

680
00:29:42,480 --> 00:29:48,510
to to pop a shell<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> system a</font>

681
00:29:45,650 --> 00:29:50,640
little spoiler of course I had to exit

682
00:29:48,510 --> 00:29:53,250
the enclaved part of the<font color="#CCCCCC"> application</font>

683
00:29:50,640 --> 00:29:55,440
again<font color="#E5E5E5"> enter the application</font><font color="#CCCCCC"> pardoned and</font>

684
00:29:53,250 --> 00:29:58,260
issue<font color="#E5E5E5"> my</font><font color="#CCCCCC"> Cisco</font><font color="#E5E5E5"> there but it isn't a very</font>

685
00:29:55,440 --> 00:30:00,330
stealthy<font color="#E5E5E5"> in a very stealthy way let's</font>

686
00:29:58,260 --> 00:30:01,679
<font color="#E5E5E5">have a look at how I did this first</font><font color="#CCCCCC"> of</font>

687
00:30:00,330 --> 00:30:04,590
<font color="#E5E5E5">all something I did not tell you Martha</font>

688
00:30:01,679 --> 00:30:07,980
<font color="#CCCCCC">has an enclave which statically</font><font color="#E5E5E5"> and this</font>

689
00:30:04,590 --> 00:30:11,040
is completely<font color="#CCCCCC"> empty so Martha's</font><font color="#E5E5E5"> and</font>

690
00:30:07,980 --> 00:30:12,960
<font color="#CCCCCC">clave if you loaded into a low pro you</font>

691
00:30:11,040 --> 00:30:14,370
will not find a malicious function in

692
00:30:12,960 --> 00:30:17,090
there<font color="#CCCCCC"> because there is just nothing</font>

693
00:30:14,370 --> 00:30:22,320
there<font color="#E5E5E5"> but Martha loads it</font>

694
00:30:17,090 --> 00:30:24,179
executable code at runtime<font color="#CCCCCC"> so the</font>

695
00:30:22,320 --> 00:30:26,010
untrusted<font color="#E5E5E5"> part of</font><font color="#CCCCCC"> Martha will be the</font>

696
00:30:24,180 --> 00:30:28,050
<font color="#E5E5E5">application which loads and measures the</font>

697
00:30:26,010 --> 00:30:31,050
enclaves<font color="#E5E5E5"> which will be successful</font>

698
00:30:28,050 --> 00:30:33,510
<font color="#E5E5E5">because it's empty and then it</font><font color="#CCCCCC"> will load</font>

699
00:30:31,050 --> 00:30:35,550
<font color="#E5E5E5">the empty and clave and then the include</font>

700
00:30:33,510 --> 00:30:37,290
goes on to load a piece<font color="#E5E5E5"> of shell code</font>

701
00:30:35,550 --> 00:30:38,250
which represents the functionality of

702
00:30:37,290 --> 00:30:41,570
the<font color="#E5E5E5"> enclaved</font>

703
00:30:38,250 --> 00:30:41,570
at runtime<font color="#E5E5E5"> to change its behavior</font>

704
00:30:42,420 --> 00:30:46,200
this helps us hide the<font color="#E5E5E5"> functionality of</font>

705
00:30:44,460 --> 00:30:47,640
<font color="#E5E5E5">the end clave statically because if the</font>

706
00:30:46,200 --> 00:30:48,960
reverse engineer goes on to look<font color="#E5E5E5"> inside</font>

707
00:30:47,640 --> 00:30:51,540
the<font color="#CCCCCC"> English binary you won't</font><font color="#E5E5E5"> find</font>

708
00:30:48,960 --> 00:30:54,510
anything<font color="#CCCCCC"> or she won't find anything</font>

709
00:30:51,540 --> 00:30:58,230
wait a second<font color="#CCCCCC"> this</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> will call a</font>

710
00:30:54,510 --> 00:31:00,360
two-stage loader so we have the empty

711
00:30:58,230 --> 00:31:02,550
<font color="#E5E5E5">and clave which as mentioned</font><font color="#CCCCCC"> loads the</font>

712
00:31:00,360 --> 00:31:04,439
<font color="#CCCCCC">shell code this record could either come</font>

713
00:31:02,550 --> 00:31:07,500
<font color="#CCCCCC">from the local disk as it does for my</font>

714
00:31:04,440 --> 00:31:10,650
demos here or as described in<font color="#CCCCCC"> the blog</font>

715
00:31:07,500 --> 00:31:12,420
<font color="#CCCCCC">post from general Kafka in 2013 you</font>

716
00:31:10,650 --> 00:31:13,350
could go<font color="#E5E5E5"> on and load the shell code from</font>

717
00:31:12,420 --> 00:31:15,300
a remote<font color="#E5E5E5"> server</font>

718
00:31:13,350 --> 00:31:17,399
if you build a remote at<font color="#CCCCCC"> the station</font>

719
00:31:15,300 --> 00:31:19,080
connection and<font color="#CCCCCC"> a secure channel to</font><font color="#E5E5E5"> one</font>

720
00:31:17,400 --> 00:31:21,620
<font color="#E5E5E5">my remote service you could totally</font>

721
00:31:19,080 --> 00:31:26,220
download your shell code from remote

722
00:31:21,620 --> 00:31:29,310
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a challenge there to put a</font>

723
00:31:26,220 --> 00:31:31,080
<font color="#CCCCCC">beautiful Roland</font><font color="#E5E5E5"> which is why I didn't</font>

724
00:31:29,310 --> 00:31:33,120
not build this into<font color="#E5E5E5"> the demos here</font>

725
00:31:31,080 --> 00:31:34,560
because then<font color="#CCCCCC"> it would that the demo gods</font>

726
00:31:33,120 --> 00:31:37,139
would<font color="#CCCCCC"> be very upset with me and things</font>

727
00:31:34,560 --> 00:31:38,879
would<font color="#CCCCCC"> break and everything</font><font color="#E5E5E5"> would burn</font><font color="#CCCCCC"> so</font>

728
00:31:37,140 --> 00:31:40,679
yeah my chakras<font color="#E5E5E5"> are loaded from the disk</font>

729
00:31:38,880 --> 00:31:45,000
locally

730
00:31:40,679 --> 00:31:46,830
I think about the loading<font color="#CCCCCC"> enclave's are</font>

731
00:31:45,000 --> 00:31:50,100
measured<font color="#E5E5E5"> so the application will not</font>

732
00:31:46,830 --> 00:31:54,809
just load any<font color="#CCCCCC"> DLL that's called an</font><font color="#E5E5E5"> cliff</font>

733
00:31:50,100 --> 00:31:57,059
dot dot<font color="#CCCCCC"> s or any enclaved a dll but</font>

734
00:31:54,809 --> 00:31:59,309
<font color="#CCCCCC">we'll check</font><font color="#E5E5E5"> whether the anklet is being</font>

735
00:31:57,059 --> 00:32:01,379
though that actually<font color="#CCCCCC"> is exactly</font><font color="#E5E5E5"> D and</font>

736
00:31:59,309 --> 00:32:03,330
cliff that<font color="#CCCCCC"> is supposed to be loaded so</font>

737
00:32:01,380 --> 00:32:05,640
the<font color="#E5E5E5"> application will load</font><font color="#CCCCCC"> only it's</font>

738
00:32:03,330 --> 00:32:08,220
signed<font color="#E5E5E5"> and cliff which is called</font>

739
00:32:05,640 --> 00:32:10,230
measurement<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> only done</font><font color="#E5E5E5"> at load</font>

740
00:32:08,220 --> 00:32:11,429
time there and not at<font color="#CCCCCC"> run time</font><font color="#E5E5E5"> so once</font>

741
00:32:10,230 --> 00:32:14,880
the end<font color="#CCCCCC"> clip is loaded</font>

742
00:32:11,429 --> 00:32:19,409
I checked you can change the<font color="#E5E5E5"> code that's</font>

743
00:32:14,880 --> 00:32:21,539
<font color="#E5E5E5">running inside and click</font><font color="#CCCCCC"> further</font><font color="#E5E5E5"> model</font>

744
00:32:19,409 --> 00:32:22,500
once we can load our<font color="#CCCCCC"> shell</font><font color="#E5E5E5"> code we have</font>

745
00:32:21,539 --> 00:32:24,480
<font color="#CCCCCC">to deal with the functionality</font>

746
00:32:22,500 --> 00:32:26,580
limitations we are still not<font color="#CCCCCC"> able to</font>

747
00:32:24,480 --> 00:32:29,820
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> this calls inside the enclaves</font>

748
00:32:26,580 --> 00:32:32,850
<font color="#CCCCCC">so we still have to exit the anklet code</font>

749
00:32:29,820 --> 00:32:34,260
which we do with the<font color="#CCCCCC"> cisco proxy more</font>

750
00:32:32,850 --> 00:32:38,580
about to say<font color="#E5E5E5"> that</font><font color="#CCCCCC"> ir ID and</font><font color="#E5E5E5"> down here</font>

751
00:32:34,260 --> 00:32:42,650
<font color="#CCCCCC">this is the</font><font color="#E5E5E5"> runtime right</font><font color="#CCCCCC"> ok</font>

752
00:32:38,580 --> 00:32:44,820
again Martha again it's a piece of<font color="#E5E5E5"> I</font>

753
00:32:42,650 --> 00:32:47,490
know matters no<font color="#CCCCCC"> ransom</font><font color="#E5E5E5"> er sorry</font><font color="#CCCCCC"> matter</font>

754
00:32:44,820 --> 00:32:48,689
<font color="#CCCCCC">papa</font><font color="#E5E5E5"> shell</font><font color="#CCCCCC"> we have the incorrect part on</font>

755
00:32:47,490 --> 00:32:50,610
the left side<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> the application</font>

756
00:32:48,690 --> 00:32:53,520
part on the right side we have<font color="#CCCCCC"> again the</font>

757
00:32:50,610 --> 00:32:56,610
main function which issues an e call to

758
00:32:53,520 --> 00:32:58,410
enter the enclaved part and there starts

759
00:32:56,610 --> 00:33:00,659
<font color="#E5E5E5">to fetch and decrypted shellcode</font><font color="#CCCCCC"> Chuck</font>

760
00:32:58,410 --> 00:33:02,130
<font color="#E5E5E5">HUD in my demo</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> mentioned is lying on</font>

761
00:33:00,660 --> 00:33:05,100
the<font color="#E5E5E5"> disk it's encrypted</font><font color="#CCCCCC"> tag will be</font>

762
00:33:02,130 --> 00:33:07,380
decrypted by the end clave will then be

763
00:33:05,100 --> 00:33:09,480
<font color="#CCCCCC">copied to</font><font color="#E5E5E5"> a readwrite executable section</font>

764
00:33:07,380 --> 00:33:11,280
which I<font color="#E5E5E5"> created with a linker a little</font>

765
00:33:09,480 --> 00:33:12,630
bit more about<font color="#E5E5E5"> this</font><font color="#CCCCCC"> later so when clave</font>

766
00:33:11,280 --> 00:33:16,440
comes with an empty<font color="#CCCCCC"> read write execute</font>

767
00:33:12,630 --> 00:33:18,810
section where we can<font color="#E5E5E5"> unload and execute</font>

768
00:33:16,440 --> 00:33:23,880
the<font color="#E5E5E5"> shellcode the shock</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> by itself has</font>

769
00:33:18,810 --> 00:33:25,590
two parts it first<font color="#E5E5E5"> builds and</font><font color="#CCCCCC"> Marshalls</font>

770
00:33:23,880 --> 00:33:28,380
arguments which it needs<font color="#E5E5E5"> to pop the</font>

771
00:33:25,590 --> 00:33:31,560
shell which would be most<font color="#CCCCCC"> important</font>

772
00:33:28,380 --> 00:33:36,560
<font color="#CCCCCC">either the path to the actual shell</font>

773
00:33:31,560 --> 00:33:39,360
binary and packages these in a nicely

774
00:33:36,560 --> 00:33:41,580
nicely defined package to<font color="#E5E5E5"> be handed over</font>

775
00:33:39,360 --> 00:33:44,280
to the<font color="#CCCCCC"> Sisko proxy later on</font><font color="#E5E5E5"> chomps to</font>

776
00:33:41,580 --> 00:33:46,500
<font color="#CCCCCC">Bua function because turns out that you</font>

777
00:33:44,280 --> 00:33:48,930
cannot just<font color="#E5E5E5"> do a jump from the include</font>

778
00:33:46,500 --> 00:33:51,270
memory to the application memory this<font color="#CCCCCC"> is</font>

779
00:33:48,930 --> 00:33:52,800
<font color="#CCCCCC">of course prohibited so we have to</font>

780
00:33:51,270 --> 00:33:53,400
define<font color="#CCCCCC"> a people function</font><font color="#E5E5E5"> inside the</font>

781
00:33:52,800 --> 00:33:55,740
<font color="#E5E5E5">enclaved</font>

782
00:33:53,400 --> 00:33:57,359
which does a proper exit of the include

783
00:33:55,740 --> 00:34:00,659
<font color="#E5E5E5">memory</font>

784
00:33:57,359 --> 00:34:03,599
and then issues a no call to<font color="#E5E5E5"> the fiscal</font>

785
00:34:00,659 --> 00:34:07,409
proxy again though all<font color="#CCCCCC"> of this what's</font>

786
00:34:03,599 --> 00:34:09,538
marked in yellow here is<font color="#E5E5E5"> shellcode so</font>

787
00:34:07,409 --> 00:34:12,419
this is not present<font color="#E5E5E5"> in the static</font><font color="#CCCCCC"> money</font>

788
00:34:09,539 --> 00:34:14,970
<font color="#E5E5E5">anyway then once the application part we</font>

789
00:34:12,418 --> 00:34:18,388
can execute<font color="#E5E5E5"> our sis called proxy which</font>

790
00:34:14,969 --> 00:34:20,250
Indian<font color="#CCCCCC"> unpackage says unpacks the the</font>

791
00:34:18,389 --> 00:34:22,109
arguments<font color="#CCCCCC"> that were marshaled in the</font>

792
00:34:20,250 --> 00:34:25,739
<font color="#CCCCCC">shellcode</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> executes</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cisco</font>

793
00:34:22,109 --> 00:34:28,348
instruction the most important part why

794
00:34:25,739 --> 00:34:29,939
we have to go to the where we have to

795
00:34:28,349 --> 00:34:32,549
exit<font color="#CCCCCC"> to the application</font><font color="#E5E5E5"> part is because</font>

796
00:34:29,940 --> 00:34:34,799
enclaves are<font color="#CCCCCC"> running in something called</font>

797
00:34:32,549 --> 00:34:37,379
<font color="#CCCCCC">anklet mode which</font><font color="#E5E5E5"> means the</font><font color="#CCCCCC"> CPU limits</font>

798
00:34:34,799 --> 00:34:39,719
their capabilities of executing

799
00:34:37,379 --> 00:34:40,918
instructions and the<font color="#CCCCCC"> Cisco instruction</font>

800
00:34:39,719 --> 00:34:42,328
<font color="#E5E5E5">would</font><font color="#CCCCCC"> be one of those</font><font color="#E5E5E5"> instructions that</font>

801
00:34:40,918 --> 00:34:47,098
are blocked frankly and then<font color="#CCCCCC"> clave</font>

802
00:34:42,329 --> 00:34:48,569
<font color="#E5E5E5">cannot just execute any given Cisco okay</font>

803
00:34:47,099 --> 00:34:50,099
right but once we execute there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this</font>

804
00:34:48,569 --> 00:34:51,389
<font color="#CCCCCC">qualification we can go back to the</font>

805
00:34:50,099 --> 00:34:53,309
<font color="#CCCCCC">enclaves and in theory</font><font color="#E5E5E5"> and cliff could</font>

806
00:34:51,389 --> 00:34:57,180
go on and load<font color="#CCCCCC"> marshal</font><font color="#E5E5E5"> code execute more</font>

807
00:34:53,309 --> 00:34:59,250
<font color="#CCCCCC">syscalls</font><font color="#E5E5E5"> and that says the anklet could</font>

808
00:34:57,180 --> 00:35:02,490
go on to execute just any<font color="#CCCCCC"> sis call it</font>

809
00:34:59,250 --> 00:35:05,039
once<font color="#E5E5E5"> because it can load any given</font>

810
00:35:02,490 --> 00:35:06,629
shellcode<font color="#E5E5E5"> so if our application</font><font color="#CCCCCC"> has a</font>

811
00:35:05,039 --> 00:35:09,770
remote<font color="#CCCCCC"> connection we could</font><font color="#E5E5E5"> just read it</font>

812
00:35:06,630 --> 00:35:11,520
different routes<font color="#E5E5E5"> and that way Trinity</font>

813
00:35:09,770 --> 00:35:13,740
<font color="#CCCCCC">enclaved behavior of the application</font>

814
00:35:11,520 --> 00:35:16,589
behavior at<font color="#E5E5E5"> runtime with our shellcode</font>

815
00:35:13,740 --> 00:35:17,970
and go on<font color="#E5E5E5"> execute once</font><font color="#CCCCCC"> this code after</font>

816
00:35:16,589 --> 00:35:22,420
another

817
00:35:17,970 --> 00:35:25,089
and then we're<font color="#E5E5E5"> free beautiful</font><font color="#CCCCCC"> what did I</font>

818
00:35:22,420 --> 00:35:27,070
mean with a<font color="#E5E5E5"> read/write/execute section</font>

819
00:35:25,090 --> 00:35:30,190
on<font color="#CCCCCC"> Linux you can tell the linker to</font>

820
00:35:27,070 --> 00:35:32,520
<font color="#E5E5E5">create yourself the new section and this</font>

821
00:35:30,190 --> 00:35:39,220
<font color="#E5E5E5">is</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> what I did I created myself</font><font color="#CCCCCC"> a</font>

822
00:35:32,520 --> 00:35:42,990
1000 byte big or<font color="#E5E5E5"> 1000 integer</font><font color="#CCCCCC"> now 1,000</font>

823
00:35:39,220 --> 00:35:46,330
<font color="#E5E5E5">byte big section that's executable and</font>

824
00:35:42,990 --> 00:35:50,259
this is where the<font color="#CCCCCC"> char code will be</font>

825
00:35:46,330 --> 00:35:53,740
copied to to be executed at runtime<font color="#E5E5E5"> the</font>

826
00:35:50,260 --> 00:35:56,140
<font color="#CCCCCC">Cisco proxy itself here neatly called</font>

827
00:35:53,740 --> 00:35:58,089
the server by the way<font color="#CCCCCC"> Cisco proxying is</font>

828
00:35:56,140 --> 00:35:59,920
nothing new nothing<font color="#E5E5E5"> that I came up with</font>

829
00:35:58,090 --> 00:36:04,330
<font color="#E5E5E5">but was first mentioned by a</font>

830
00:35:59,920 --> 00:36:06,760
presentation<font color="#CCCCCC"> in 2002 blackheads</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

831
00:36:04,330 --> 00:36:09,730
think<font color="#E5E5E5"> an Argentinian researcher with the</font>

832
00:36:06,760 --> 00:36:14,320
<font color="#E5E5E5">name</font><font color="#CCCCCC"> cáceres</font><font color="#E5E5E5"> someone might</font><font color="#CCCCCC"> nam</font><font color="#E5E5E5"> and he</font>

833
00:36:09,730 --> 00:36:17,500
came up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this idea for I don't</font>

834
00:36:14,320 --> 00:36:20,230
remember actually but his idea is great

835
00:36:17,500 --> 00:36:24,040
his idea says that you don't<font color="#E5E5E5"> have to</font>

836
00:36:20,230 --> 00:36:25,570
execute<font color="#E5E5E5"> your your system calls on the</font>

837
00:36:24,040 --> 00:36:27,100
system you're<font color="#CCCCCC"> on but you can execute</font>

838
00:36:25,570 --> 00:36:31,660
your system<font color="#E5E5E5"> calls in a different system</font>

839
00:36:27,100 --> 00:36:34,450
<font color="#E5E5E5">and return your return values to the</font>

840
00:36:31,660 --> 00:36:36,700
<font color="#E5E5E5">calling system which means in our case</font>

841
00:36:34,450 --> 00:36:39,189
that<font color="#CCCCCC"> we can have our end</font><font color="#E5E5E5"> cliff execute</font>

842
00:36:36,700 --> 00:36:41,020
this calls<font color="#E5E5E5"> but not by the enclaves</font><font color="#CCCCCC"> but</font>

843
00:36:39,190 --> 00:36:42,970
by the<font color="#E5E5E5"> application that means that the</font>

844
00:36:41,020 --> 00:36:44,890
<font color="#CCCCCC">Cisco instruction is still cold outside</font>

845
00:36:42,970 --> 00:36:47,299
of the Enclave<font color="#E5E5E5"> but the whole</font>

846
00:36:44,890 --> 00:36:50,330
functionality is kept inside<font color="#E5E5E5"> of the</font>

847
00:36:47,300 --> 00:36:52,190
inside the protected portion this<font color="#E5E5E5"> is</font>

848
00:36:50,330 --> 00:36:55,700
<font color="#CCCCCC">important because</font><font color="#E5E5E5"> without system calls</font>

849
00:36:52,190 --> 00:36:57,349
<font color="#E5E5E5">you can do very little on a system you</font>

850
00:36:55,700 --> 00:36:59,210
<font color="#E5E5E5">can do a great cryptography which is</font>

851
00:36:57,349 --> 00:37:01,160
what<font color="#CCCCCC"> STX does like this this you can do</font>

852
00:36:59,210 --> 00:37:02,630
<font color="#CCCCCC">without interacting</font><font color="#E5E5E5"> with the operating</font>

853
00:37:01,160 --> 00:37:04,279
<font color="#CCCCCC">system but for example for touching</font><font color="#E5E5E5"> the</font>

854
00:37:02,630 --> 00:37:06,050
file system for building remote

855
00:37:04,280 --> 00:37:08,150
connections you<font color="#E5E5E5"> will still have</font><font color="#CCCCCC"> to</font>

856
00:37:06,050 --> 00:37:10,940
execute system calls that<font color="#E5E5E5"> interact with</font>

857
00:37:08,150 --> 00:37:15,410
your brain system to<font color="#E5E5E5"> help you carry out</font>

858
00:37:10,940 --> 00:37:17,630
your activities and yeah

859
00:37:15,410 --> 00:37:19,580
therefore we need<font color="#E5E5E5"> a proxy this one Linux</font>

860
00:37:17,630 --> 00:37:21,710
is super simple<font color="#CCCCCC"> because every system</font>

861
00:37:19,580 --> 00:37:23,900
call<font color="#E5E5E5"> in Linux has a number they're</font>

862
00:37:21,710 --> 00:37:27,710
resistant<font color="#E5E5E5"> : Linux has defined arguments</font>

863
00:37:23,900 --> 00:37:29,720
<font color="#E5E5E5">which means we can look up for example</font>

864
00:37:27,710 --> 00:37:31,670
the open system call for open the file

865
00:37:29,720 --> 00:37:34,220
<font color="#CCCCCC">we'll find out the test resistant call</font>

866
00:37:31,670 --> 00:37:36,560
number I<font color="#E5E5E5"> think - we'll find out it needs</font>

867
00:37:34,220 --> 00:37:38,270
a list of<font color="#CCCCCC"> arguments that</font><font color="#E5E5E5"> we have to hand</font>

868
00:37:36,560 --> 00:37:42,049
over through our<font color="#CCCCCC"> Marshall package of</font>

869
00:37:38,270 --> 00:37:43,460
arguments and we have to place them<font color="#CCCCCC"> in</font>

870
00:37:42,050 --> 00:37:45,050
the right registers or<font color="#CCCCCC"> a cisco</font>

871
00:37:43,460 --> 00:37:47,270
instruction will find them and<font color="#CCCCCC"> will</font>

872
00:37:45,050 --> 00:37:51,200
properly<font color="#E5E5E5"> execute the system call on</font>

873
00:37:47,270 --> 00:37:54,230
Linux 64-bit<font color="#E5E5E5"> that would be our dir si</font>

874
00:37:51,200 --> 00:37:58,069
RDX<font color="#CCCCCC"> are</font><font color="#E5E5E5"> ten or eight or</font><font color="#CCCCCC"> nine in exactly</font>

875
00:37:54,230 --> 00:38:00,560
that<font color="#CCCCCC"> order I also thought that</font><font color="#E5E5E5"> was an</font>

876
00:37:58,070 --> 00:38:03,349
odd<font color="#E5E5E5"> order because I don't know how RDX</font>

877
00:38:00,560 --> 00:38:04,970
came in there but yeah<font color="#CCCCCC"> whoever designed</font>

878
00:38:03,349 --> 00:38:07,720
this<font color="#E5E5E5"> will have had a reason so yeah this</font>

879
00:38:04,970 --> 00:38:10,540
is<font color="#E5E5E5"> how you build a</font><font color="#CCCCCC"> system called proxy</font>

880
00:38:07,720 --> 00:38:12,700
let's see whether<font color="#CCCCCC"> later on I actually</font>

881
00:38:10,540 --> 00:38:15,400
have the source code<font color="#E5E5E5"> anyway why do we</font>

882
00:38:12,700 --> 00:38:17,919
have the system call so the client will

883
00:38:15,400 --> 00:38:19,480
go on and load<font color="#E5E5E5"> and execute the</font><font color="#CCCCCC"> shellcode</font>

884
00:38:17,920 --> 00:38:21,970
<font color="#CCCCCC">as mentioned before in our dedicated</font>

885
00:38:19,480 --> 00:38:23,920
section<font color="#E5E5E5"> the shellcode defines all the</font>

886
00:38:21,970 --> 00:38:25,720
functionality<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> Enclave and the</font>

887
00:38:23,920 --> 00:38:27,460
static<font color="#CCCCCC"> State has mentioned</font><font color="#E5E5E5"> doesn't show</font>

888
00:38:25,720 --> 00:38:29,078
any<font color="#E5E5E5"> functionality only at runtime and</font>

889
00:38:27,460 --> 00:38:31,380
<font color="#CCCCCC">we'll load the shellcode and</font><font color="#E5E5E5"> then start</font>

890
00:38:29,079 --> 00:38:33,760
executing<font color="#E5E5E5"> whatever you wanted to execute</font>

891
00:38:31,380 --> 00:38:34,300
the arguments will be marshaled inside

892
00:38:33,760 --> 00:38:36,700
of the<font color="#E5E5E5"> shellcode</font>

893
00:38:34,300 --> 00:38:38,020
<font color="#E5E5E5">so their arguments will be prepared in</font>

894
00:38:36,700 --> 00:38:40,598
the shell code for the application<font color="#CCCCCC"> that</font>

895
00:38:38,020 --> 00:38:42,430
<font color="#CCCCCC">executes then the shortcut</font><font color="#E5E5E5"> will people</font>

896
00:38:40,599 --> 00:38:44,500
<font color="#CCCCCC">to the proxy function which we need to</font>

897
00:38:42,430 --> 00:38:46,240
exit the end clave<font color="#E5E5E5"> without this pillow</font>

898
00:38:44,500 --> 00:38:48,369
we<font color="#CCCCCC"> can't actually exceed the enclaves</font>

899
00:38:46,240 --> 00:38:50,459
<font color="#E5E5E5">and then the proxy receives the</font>

900
00:38:48,369 --> 00:38:52,780
arguments and<font color="#E5E5E5"> executes the Assizes call</font>

901
00:38:50,460 --> 00:38:55,000
and<font color="#CCCCCC"> now optionally the client can go and</font>

902
00:38:52,780 --> 00:38:57,910
download and execute<font color="#CCCCCC"> marshal code and do</font>

903
00:38:55,000 --> 00:38:59,740
whatever he<font color="#E5E5E5"> wants in the future and most</font>

904
00:38:57,910 --> 00:39:01,750
importantly the reverse engineers stays

905
00:38:59,740 --> 00:39:04,779
in the<font color="#E5E5E5"> dark because we never actually</font>

906
00:39:01,750 --> 00:39:06,609
see<font color="#CCCCCC"> the</font><font color="#E5E5E5"> shell code the shell code</font>

907
00:39:04,780 --> 00:39:08,109
ideally is encrypted<font color="#E5E5E5"> at all times</font><font color="#CCCCCC"> out</font>

908
00:39:06,609 --> 00:39:09,609
slightly<font color="#CCCCCC"> and clave and once it's loaded</font>

909
00:39:08,109 --> 00:39:11,770
<font color="#E5E5E5">inside the enclaved</font>

910
00:39:09,609 --> 00:39:14,290
decrypted inside of the protected<font color="#CCCCCC"> memory</font>

911
00:39:11,770 --> 00:39:18,069
<font color="#E5E5E5">and this way is never actually visible</font>

912
00:39:14,290 --> 00:39:20,890
to an analyst which could be<font color="#CCCCCC"> very</font>

913
00:39:18,069 --> 00:39:21,849
annoying potentially if malware actually

914
00:39:20,890 --> 00:39:24,729
does<font color="#E5E5E5"> it</font>

915
00:39:21,849 --> 00:39:27,039
<font color="#CCCCCC">oh yeah here's a beautiful screenshot of</font>

916
00:39:24,729 --> 00:39:28,509
of the system<font color="#CCCCCC"> coalesced</font><font color="#E5E5E5"> just this year I</font>

917
00:39:27,039 --> 00:39:31,809
wasn't chuckling all the system calls<font color="#CCCCCC"> in</font>

918
00:39:28,509 --> 00:39:34,959
<font color="#E5E5E5">Linux have a beautiful number and here</font>

919
00:39:31,809 --> 00:39:37,690
<font color="#E5E5E5">for example we</font><font color="#CCCCCC"> have the exact VA system</font>

920
00:39:34,959 --> 00:39:40,419
<font color="#E5E5E5">call which we would need for executing</font>

921
00:39:37,690 --> 00:39:43,779
<font color="#CCCCCC">the shell binary - the shell executable</font>

922
00:39:40,420 --> 00:39:45,339
<font color="#E5E5E5">and that would mean</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> with the system</font>

923
00:39:43,779 --> 00:39:48,819
call number<font color="#E5E5E5"> of 59</font>

924
00:39:45,339 --> 00:39:52,869
handed over to the Cisco instruction and

925
00:39:48,819 --> 00:39:54,788
the file name<font color="#CCCCCC"> of the shell executable</font>

926
00:39:52,869 --> 00:39:56,259
and arguments that<font color="#CCCCCC"> we might</font><font color="#E5E5E5"> have might</font>

927
00:39:54,789 --> 00:39:57,940
not want to hand over to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shell</font>

928
00:39:56,259 --> 00:40:02,019
executable we can instruct the<font color="#CCCCCC"> Cisco</font>

929
00:39:57,940 --> 00:40:05,199
instruction to execute<font color="#CCCCCC"> our shell this</font>

930
00:40:02,019 --> 00:40:08,499
looks as follows this<font color="#CCCCCC"> is a piece of</font>

931
00:40:05,199 --> 00:40:11,829
shell<font color="#E5E5E5"> code that I used to load into the</font>

932
00:40:08,499 --> 00:40:15,640
<font color="#E5E5E5">end</font><font color="#CCCCCC"> clave</font><font color="#E5E5E5"> and to execute the the shell</font>

933
00:40:11,829 --> 00:40:21,420
<font color="#E5E5E5">where you can perfectly see that on the</font>

934
00:40:15,640 --> 00:40:21,420
<font color="#E5E5E5">upper end here we execute the first</font>

935
00:40:23,070 --> 00:40:27,640
the first people function<font color="#CCCCCC"> yes my anklet</font>

936
00:40:25,960 --> 00:40:30,010
comes with<font color="#CCCCCC"> two pure function because</font>

937
00:40:27,640 --> 00:40:31,690
without<font color="#CCCCCC"> a</font><font color="#E5E5E5"> memory allocation we were</font>

938
00:40:30,010 --> 00:40:34,360
having a hard<font color="#CCCCCC"> time marshalling arguments</font>

939
00:40:31,690 --> 00:40:36,880
you might might notice so I have a

940
00:40:34,360 --> 00:40:39,190
<font color="#CCCCCC">appeal function for memory allocation up</font>

941
00:40:36,880 --> 00:40:42,400
here and down here<font color="#CCCCCC"> which I'm to</font><font color="#E5E5E5"> the pure</font>

942
00:40:39,190 --> 00:40:44,470
function for the<font color="#CCCCCC"> actual</font><font color="#E5E5E5"> proxy which then</font>

943
00:40:42,400 --> 00:40:47,380
performs the exits<font color="#CCCCCC"> to the application</font>

944
00:40:44,470 --> 00:40:49,180
part<font color="#CCCCCC"> a beautiful about the</font><font color="#E5E5E5"> Shocker that</font>

945
00:40:47,380 --> 00:40:50,770
we load into the end clave<font color="#E5E5E5"> is that we</font>

946
00:40:49,180 --> 00:40:52,660
can define the buffer as big as we<font color="#CCCCCC"> want</font>

947
00:40:50,770 --> 00:40:54,850
and we<font color="#CCCCCC"> have no na instructions if you've</font>

948
00:40:52,660 --> 00:40:56,890
ever written<font color="#E5E5E5"> shell code for expectation</font>

949
00:40:54,850 --> 00:41:00,339
purposes<font color="#E5E5E5"> you had a lot more headache</font>

950
00:40:56,890 --> 00:41:03,210
than I have<font color="#CCCCCC"> and sorry and</font><font color="#E5E5E5"> cliff we don't</font>

951
00:41:00,340 --> 00:41:06,130
have any<font color="#E5E5E5"> any problems with zeros and</font>

952
00:41:03,210 --> 00:41:09,000
<font color="#CCCCCC">although</font><font color="#E5E5E5"> on 64-bit we have something</font>

953
00:41:06,130 --> 00:41:11,170
<font color="#E5E5E5">that I did I didn't actually actively</font>

954
00:41:09,000 --> 00:41:13,480
appreciate<font color="#CCCCCC"> before which is</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> rip</font>

955
00:41:11,170 --> 00:41:16,030
<font color="#E5E5E5">relative addressing which means we can</font>

956
00:41:13,480 --> 00:41:18,490
find our people functions relative to

957
00:41:16,030 --> 00:41:20,650
our instruction pointer<font color="#E5E5E5"> that means I</font>

958
00:41:18,490 --> 00:41:22,839
don't have to dynamically figure out

959
00:41:20,650 --> 00:41:25,240
where in my<font color="#E5E5E5"> address space my</font><font color="#CCCCCC"> pee-hole</font>

960
00:41:22,840 --> 00:41:27,940
functions are<font color="#CCCCCC"> located I can just jump</font>

961
00:41:25,240 --> 00:41:30,399
there directly relative to my

962
00:41:27,940 --> 00:41:36,590
instruction pointer<font color="#CCCCCC"> this</font><font color="#E5E5E5"> just means I</font>

963
00:41:30,400 --> 00:41:38,000
had to calculate<font color="#E5E5E5"> lots of addresses</font>

964
00:41:36,590 --> 00:41:40,160
more about<font color="#CCCCCC"> this</font><font color="#E5E5E5"> later in</font><font color="#CCCCCC"> the long</font>

965
00:41:38,000 --> 00:41:44,000
<font color="#CCCCCC">shortcut for the third time Oh either</font>

966
00:41:40,160 --> 00:41:46,339
way here we have you see this here<font color="#E5E5E5"> for</font>

967
00:41:44,000 --> 00:41:49,640
example<font color="#CCCCCC"> be the relative addressing where</font>

968
00:41:46,340 --> 00:41:52,340
we have this amount<font color="#E5E5E5"> of bytes that we</font>

969
00:41:49,640 --> 00:41:57,109
<font color="#E5E5E5">jump relative to the instruction pointer</font>

970
00:41:52,340 --> 00:42:00,350
<font color="#E5E5E5">to execute the memory allocation people</font>

971
00:41:57,110 --> 00:42:02,480
<font color="#CCCCCC">function</font><font color="#E5E5E5"> what's most important about the</font>

972
00:42:00,350 --> 00:42:05,089
shellcode though<font color="#CCCCCC"> in this part</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

973
00:42:02,480 --> 00:42:07,340
shellcode<font color="#CCCCCC"> we prepare the input arguments</font>

974
00:42:05,090 --> 00:42:10,640
for our<font color="#CCCCCC"> cisco that would be executed in</font>

975
00:42:07,340 --> 00:42:13,250
<font color="#E5E5E5">the proxy so if you have a close look</font>

976
00:42:10,640 --> 00:42:16,100
this this part here<font color="#E5E5E5"> this looks like</font>

977
00:42:13,250 --> 00:42:19,400
<font color="#E5E5E5">string right if you would translate this</font>

978
00:42:16,100 --> 00:42:21,950
to actual printable characters you would

979
00:42:19,400 --> 00:42:24,140
see this is a slash bin slash<font color="#CCCCCC"> SH which</font>

980
00:42:21,950 --> 00:42:27,140
is the path to<font color="#CCCCCC"> the shell binary which we</font>

981
00:42:24,140 --> 00:42:30,230
want our Cisco function to execute so

982
00:42:27,140 --> 00:42:33,980
yeah<font color="#E5E5E5"> super simple shell coding the</font>

983
00:42:30,230 --> 00:42:36,890
<font color="#E5E5E5">marshalling is rather simple as well as</font>

984
00:42:33,980 --> 00:42:38,960
<font color="#CCCCCC">mentioned we</font><font color="#E5E5E5"> have to allocate and</font>

985
00:42:36,890 --> 00:42:40,220
prepare the argument stack which means

986
00:42:38,960 --> 00:42:42,460
allocate memory and copying<font color="#CCCCCC"> the</font>

987
00:42:40,220 --> 00:42:46,100
arguments into that piece of memory

988
00:42:42,460 --> 00:42:47,750
that's<font color="#E5E5E5"> not the order how you how you</font>

989
00:42:46,100 --> 00:42:52,420
store your arguments in there which

990
00:42:47,750 --> 00:42:55,580
information<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to prepare</font>

991
00:42:52,420 --> 00:42:57,170
other<font color="#E5E5E5"> than arguments is your own design</font>

992
00:42:55,580 --> 00:42:59,450
decisions you get to decide how<font color="#CCCCCC"> to</font>

993
00:42:57,170 --> 00:43:02,180
marshal the arguments<font color="#E5E5E5"> and on the other</font>

994
00:42:59,450 --> 00:43:05,359
<font color="#E5E5E5">side you can</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> your proxy to parse</font>

995
00:43:02,180 --> 00:43:06,890
these<font color="#E5E5E5"> marshal arguments as you want so</font>

996
00:43:05,360 --> 00:43:09,610
<font color="#E5E5E5">you could totally go on and obfuscate</font>

997
00:43:06,890 --> 00:43:13,270
the<font color="#E5E5E5"> order of the arguments and</font>

998
00:43:09,610 --> 00:43:16,540
I don't know encrypt those two and use

999
00:43:13,270 --> 00:43:20,560
obfuscation<font color="#CCCCCC"> and since we wish</font><font color="#E5E5E5"> because</font>

1000
00:43:16,540 --> 00:43:22,509
you yourself<font color="#CCCCCC"> define the</font><font color="#E5E5E5"> parsing function</font>

1001
00:43:20,560 --> 00:43:24,580
on the other end which then receives the

1002
00:43:22,510 --> 00:43:32,890
<font color="#E5E5E5">marshal arguments and parses them to the</font>

1003
00:43:24,580 --> 00:43:36,250
<font color="#E5E5E5">Cisco instruction yeah</font><font color="#CCCCCC"> let's say in</font><font color="#E5E5E5"> the</font>

1004
00:43:32,890 --> 00:43:37,720
end<font color="#CCCCCC"> what still a point of</font><font color="#E5E5E5"> concern</font><font color="#CCCCCC"> we</font>

1005
00:43:36,250 --> 00:43:39,730
still have to execute<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Cisco</font>

1006
00:43:37,720 --> 00:43:42,250
instruction in the application<font color="#E5E5E5"> part that</font>

1007
00:43:39,730 --> 00:43:44,950
means<font color="#E5E5E5"> the reverse engineer would be able</font>

1008
00:43:42,250 --> 00:43:47,020
<font color="#CCCCCC">to</font><font color="#E5E5E5"> analyze the untrusted party</font>

1009
00:43:44,950 --> 00:43:51,100
application and would totally be<font color="#CCCCCC"> able to</font>

1010
00:43:47,020 --> 00:43:52,780
see the proxy part that would give<font color="#E5E5E5"> him</font>

1011
00:43:51,100 --> 00:43:54,250
very<font color="#E5E5E5"> little information there because</font>

1012
00:43:52,780 --> 00:43:56,470
you would see there is a system call

1013
00:43:54,250 --> 00:43:58,000
being executed by<font color="#CCCCCC"> the application</font><font color="#E5E5E5"> but</font>

1014
00:43:56,470 --> 00:43:59,740
<font color="#CCCCCC">you</font><font color="#E5E5E5"> would never know which system code</font>

1015
00:43:58,000 --> 00:44:01,210
would be<font color="#E5E5E5"> executed because the marshal</font>

1016
00:43:59,740 --> 00:44:06,790
arguments come from the<font color="#E5E5E5"> shell code and</font>

1017
00:44:01,210 --> 00:44:10,750
<font color="#E5E5E5">they are protected</font><font color="#CCCCCC"> at runtime okay so</font>

1018
00:44:06,790 --> 00:44:13,509
much<font color="#CCCCCC"> ties oh yeah the</font><font color="#E5E5E5"> marshaling example</font>

1019
00:44:10,750 --> 00:44:17,140
here shows<font color="#E5E5E5"> the system call number two</font>

1020
00:44:13,510 --> 00:44:18,640
which would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> open where these</font>

1021
00:44:17,140 --> 00:44:20,799
arguments would actually instruct the

1022
00:44:18,640 --> 00:44:23,230
system<font color="#E5E5E5"> called instruction to open the</font>

1023
00:44:20,800 --> 00:44:25,390
directory home which doesn't<font color="#E5E5E5"> quite fit</font>

1024
00:44:23,230 --> 00:44:26,950
<font color="#E5E5E5">the</font><font color="#CCCCCC"> shell code either way again it</font>

1025
00:44:25,390 --> 00:44:28,720
doesn't matter which<font color="#CCCCCC"> system call you</font>

1026
00:44:26,950 --> 00:44:29,830
<font color="#E5E5E5">want to execute you just have to find</font>

1027
00:44:28,720 --> 00:44:31,240
out the system call number and<font color="#E5E5E5"> the</font>

1028
00:44:29,830 --> 00:44:32,799
arguments the system called expects and

1029
00:44:31,240 --> 00:44:36,589
marshal them correctly<font color="#E5E5E5"> and hand them</font>

1030
00:44:32,800 --> 00:44:38,790
over<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the Cisco proxy for execution</font>

1031
00:44:36,590 --> 00:44:45,300
this is how a proxy function would<font color="#E5E5E5"> look</font>

1032
00:44:38,790 --> 00:44:48,180
<font color="#CCCCCC">like the proxy said will receive the</font>

1033
00:44:45,300 --> 00:44:50,130
argument stack which here would<font color="#CCCCCC"> it's</font>

1034
00:44:48,180 --> 00:44:53,069
barely readable<font color="#E5E5E5"> it would be the input</font>

1035
00:44:50,130 --> 00:44:54,630
pointer which is a void pointer<font color="#E5E5E5"> for the</font>

1036
00:44:53,070 --> 00:44:57,690
<font color="#CCCCCC">enclaves definition you will have to</font>

1037
00:44:54,630 --> 00:44:59,609
define<font color="#E5E5E5"> this void pointer as a that's</font>

1038
00:44:57,690 --> 00:45:03,390
called user check<font color="#E5E5E5"> because you don't know</font>

1039
00:44:59,609 --> 00:45:05,040
how big the<font color="#CCCCCC"> marshalled the memory with</font>

1040
00:45:03,390 --> 00:45:07,980
your arguments<font color="#E5E5E5"> will be once you hand it</font>

1041
00:45:05,040 --> 00:45:13,259
over to the to the function to the the

1042
00:45:07,980 --> 00:45:16,200
proxy function and inside the proxy this

1043
00:45:13,260 --> 00:45:19,530
input package<font color="#E5E5E5"> taken in this being parsed</font>

1044
00:45:16,200 --> 00:45:23,100
<font color="#E5E5E5">into the respective variables that we</font>

1045
00:45:19,530 --> 00:45:24,840
then<font color="#CCCCCC"> use to hand over</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the proxy the</font>

1046
00:45:23,100 --> 00:45:28,109
proxy in this case here is rather simple

1047
00:45:24,840 --> 00:45:30,810
I only have four cases namely<font color="#CCCCCC"> zero</font>

1048
00:45:28,109 --> 00:45:34,619
arguments for my system call or one or

1049
00:45:30,810 --> 00:45:37,830
two<font color="#CCCCCC"> or three</font><font color="#E5E5E5"> and in practice if you</font>

1050
00:45:34,619 --> 00:45:40,290
write a real application<font color="#E5E5E5"> which requires</font>

1051
00:45:37,830 --> 00:45:42,270
a<font color="#E5E5E5"> certain number of system calls to be</font>

1052
00:45:40,290 --> 00:45:43,859
possibly executed<font color="#CCCCCC"> the proxy would be</font>

1053
00:45:42,270 --> 00:45:46,320
much more intelligent<font color="#E5E5E5"> and would have to</font>

1054
00:45:43,859 --> 00:45:48,720
provide much more<font color="#E5E5E5"> functionality and</font>

1055
00:45:46,320 --> 00:45:50,250
expose much more functionality<font color="#E5E5E5"> except if</font>

1056
00:45:48,720 --> 00:45:52,089
you're<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> hide it</font><font color="#CCCCCC"> inside of your</font>

1057
00:45:50,250 --> 00:45:55,280
<font color="#E5E5E5">shell code a bit better than I am</font>

1058
00:45:52,089 --> 00:45:58,339
either way<font color="#E5E5E5"> if you look at this piece of</font>

1059
00:45:55,280 --> 00:46:00,530
<font color="#E5E5E5">code it will tell you possibly that</font>

1060
00:45:58,339 --> 00:46:02,420
<font color="#E5E5E5">there is a Cisco proxy hidden inside of</font>

1061
00:46:00,530 --> 00:46:05,210
the<font color="#E5E5E5"> binary but they would not tell you</font>

1062
00:46:02,420 --> 00:46:08,530
which<font color="#CCCCCC"> these</font><font color="#E5E5E5"> calls are being executed</font><font color="#CCCCCC"> and</font>

1063
00:46:05,210 --> 00:46:10,490
that<font color="#CCCCCC"> means that statically the</font>

1064
00:46:08,530 --> 00:46:13,250
functionality<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> Enclave and</font><font color="#CCCCCC"> the</font>

1065
00:46:10,490 --> 00:46:15,790
application aren't actually possibly

1066
00:46:13,250 --> 00:46:15,790
determined

1067
00:46:15,820 --> 00:46:21,099
beautiful<font color="#CCCCCC"> now finally what would</font><font color="#E5E5E5"> that</font>

1068
00:46:18,349 --> 00:46:21,099
mean<font color="#CCCCCC"> for ransomware</font>

1069
00:46:21,560 --> 00:46:27,470
as mentioned before Martha<font color="#CCCCCC"> our former</font>

1070
00:46:24,619 --> 00:46:31,490
<font color="#E5E5E5">enzym</font><font color="#CCCCCC"> work is written</font><font color="#E5E5E5"> as a as a proper</font>

1071
00:46:27,470 --> 00:46:32,779
<font color="#E5E5E5">and</font><font color="#CCCCCC"> clave application so the malicious</font>

1072
00:46:31,490 --> 00:46:34,759
part in theory is hidden in the end

1073
00:46:32,780 --> 00:46:36,740
clave<font color="#CCCCCC"> but the system calls still are</font>

1074
00:46:34,760 --> 00:46:39,020
executed in<font color="#E5E5E5"> the application part in</font>

1075
00:46:36,740 --> 00:46:40,790
their proper steps and with a system

1076
00:46:39,020 --> 00:46:44,329
called<font color="#E5E5E5"> proxy we could now hide those</font>

1077
00:46:40,790 --> 00:46:46,820
stubs<font color="#E5E5E5"> we could for one</font><font color="#CCCCCC"> hide the content</font>

1078
00:46:44,329 --> 00:46:48,349
of the end clave<font color="#CCCCCC"> if we write our end</font>

1079
00:46:46,820 --> 00:46:50,270
somewhere<font color="#E5E5E5"> in shellcode and loaded at</font>

1080
00:46:48,349 --> 00:46:52,599
<font color="#E5E5E5">runtime and on the other hand we could</font>

1081
00:46:50,270 --> 00:46:55,070
hide the system calls<font color="#E5E5E5"> are being executed</font>

1082
00:46:52,599 --> 00:46:59,599
statically because we have our<font color="#CCCCCC"> Cisco</font>

1083
00:46:55,070 --> 00:47:01,400
proxy so for a third demo which I will

1084
00:46:59,599 --> 00:47:05,990
show<font color="#CCCCCC"> in a minute</font><font color="#E5E5E5"> I</font>

1085
00:47:01,400 --> 00:47:06,680
<font color="#CCCCCC">- right my ransomware in assembly no</font>

1086
00:47:05,990 --> 00:47:08,839
<font color="#E5E5E5">kidding</font>

1087
00:47:06,680 --> 00:47:10,730
so I<font color="#E5E5E5"> came up with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> proof of</font><font color="#CCCCCC"> concept for</font>

1088
00:47:08,840 --> 00:47:14,440
how<font color="#CCCCCC"> a rentable</font><font color="#E5E5E5"> would start</font><font color="#CCCCCC"> an assembly I</font>

1089
00:47:10,730 --> 00:47:16,940
have a large piece<font color="#CCCCCC"> of shell code which</font>

1090
00:47:14,440 --> 00:47:18,320
mimics<font color="#E5E5E5"> the reservoir but it did not</font>

1091
00:47:16,940 --> 00:47:20,840
actually<font color="#E5E5E5"> write into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> random or in shell</font>

1092
00:47:18,320 --> 00:47:23,360
cut either<font color="#E5E5E5"> way I'll show you in a</font><font color="#CCCCCC"> bit</font>

1093
00:47:20,840 --> 00:47:26,180
<font color="#CCCCCC">seven</font><font color="#E5E5E5"> theory if we put our whole</font>

1094
00:47:23,360 --> 00:47:27,860
ransomware<font color="#CCCCCC"> into a piece of shell code</font>

1095
00:47:26,180 --> 00:47:30,290
that's loaded at runtime which one<font color="#CCCCCC"> uses</font>

1096
00:47:27,860 --> 00:47:33,080
this is called proxy this piece of

1097
00:47:30,290 --> 00:47:35,210
ransomware would not be<font color="#E5E5E5"> possibly reverse</font>

1098
00:47:33,080 --> 00:47:36,799
<font color="#CCCCCC">engineered because</font><font color="#E5E5E5"> it's hidden the codes</font>

1099
00:47:35,210 --> 00:47:40,580
hidden at<font color="#E5E5E5"> all times</font>

1100
00:47:36,800 --> 00:47:42,860
and again<font color="#CCCCCC"> the proxy that I showed</font><font color="#E5E5E5"> you</font>

1101
00:47:40,580 --> 00:47:45,830
was rather extensive because<font color="#CCCCCC"> I had force</font>

1102
00:47:42,860 --> 00:47:47,150
<font color="#CCCCCC">touch that would decide</font><font color="#E5E5E5"> which system</font>

1103
00:47:45,830 --> 00:47:48,980
called to execute and prepare the

1104
00:47:47,150 --> 00:47:53,300
arguments but did he write a much

1105
00:47:48,980 --> 00:47:56,450
smarter proxy which dynamically assigns

1106
00:47:53,300 --> 00:47:59,360
<font color="#E5E5E5">arguments and decides how many</font><font color="#CCCCCC"> of them</font>

1107
00:47:56,450 --> 00:48:02,060
are handed over to the Cisco instruction

1108
00:47:59,360 --> 00:48:03,230
<font color="#E5E5E5">you could hide a lot more of the of the</font>

1109
00:48:02,060 --> 00:48:05,509
code<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> showed you that goes into</font>

1110
00:48:03,230 --> 00:48:07,670
the application and<font color="#E5E5E5"> still be even more</font>

1111
00:48:05,510 --> 00:48:09,860
<font color="#E5E5E5">stealthier because you hide more parts</font>

1112
00:48:07,670 --> 00:48:11,540
of your proxy this<font color="#CCCCCC"> nyan is a design</font>

1113
00:48:09,860 --> 00:48:12,770
decision of how much intelligence<font color="#E5E5E5"> goes</font>

1114
00:48:11,540 --> 00:48:14,180
into the<font color="#E5E5E5"> shell code knowledge</font>

1115
00:48:12,770 --> 00:48:18,360
intelligence<font color="#CCCCCC"> ends up in the application</font>

1116
00:48:14,180 --> 00:48:22,649
part finally what does<font color="#E5E5E5"> this mean</font>

1117
00:48:18,360 --> 00:48:25,170
then today<font color="#E5E5E5"> feasibility and such I've had</font>

1118
00:48:22,650 --> 00:48:27,720
<font color="#E5E5E5">endless conversations with</font><font color="#CCCCCC"> Intel</font>

1119
00:48:25,170 --> 00:48:29,580
colleagues and with other researchers

1120
00:48:27,720 --> 00:48:31,290
<font color="#E5E5E5">outside of</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> sort of how feasible is to</font>

1121
00:48:29,580 --> 00:48:34,950
put a piece<font color="#E5E5E5"> of malware into</font><font color="#CCCCCC"> an end</font>

1122
00:48:31,290 --> 00:48:36,150
<font color="#E5E5E5">cleave my my</font><font color="#CCCCCC"> personal opinion before I</font>

1123
00:48:34,950 --> 00:48:38,490
show you a demo number three is<font color="#E5E5E5"> that</font>

1124
00:48:36,150 --> 00:48:40,260
it's<font color="#E5E5E5"> not actually</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> feasible it's a</font>

1125
00:48:38,490 --> 00:48:40,830
lot<font color="#E5E5E5"> of work it's very complex and</font>

1126
00:48:40,260 --> 00:48:45,150
complicated

1127
00:48:40,830 --> 00:48:47,460
it requires the three prerequisites

1128
00:48:45,150 --> 00:48:49,500
<font color="#E5E5E5">mentioned in the</font><font color="#CCCCCC"> beginning so the target</font>

1129
00:48:47,460 --> 00:48:52,050
needs<font color="#E5E5E5"> to have proper hardware to be</font>

1130
00:48:49,500 --> 00:48:54,330
executing to be able<font color="#E5E5E5"> to execute as</font><font color="#CCCCCC"> check</font>

1131
00:48:52,050 --> 00:48:56,720
smaller as checks<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to be enabled and</font>

1132
00:48:54,330 --> 00:49:00,080
the target needs<font color="#E5E5E5"> to have yes checks</font>

1133
00:48:56,720 --> 00:49:06,209
<font color="#CCCCCC">runtime installed on the machine</font>

1134
00:49:00,080 --> 00:49:09,150
then to code a<font color="#E5E5E5"> complex piece of malware</font>

1135
00:49:06,210 --> 00:49:12,750
<font color="#CCCCCC">internets checks and clave this requires</font>

1136
00:49:09,150 --> 00:49:14,100
you<font color="#E5E5E5"> either</font><font color="#CCCCCC"> as in the master demo showing</font>

1137
00:49:12,750 --> 00:49:15,660
lots<font color="#E5E5E5"> of code that goes into the</font>

1138
00:49:14,100 --> 00:49:20,130
application<font color="#E5E5E5"> part which is the reversible</font>

1139
00:49:15,660 --> 00:49:21,810
<font color="#CCCCCC">or lots of coding in assembly which in</font>

1140
00:49:20,130 --> 00:49:26,100
my<font color="#E5E5E5"> opinion most</font><font color="#CCCCCC"> moderators are incapable</font>

1141
00:49:21,810 --> 00:49:28,529
of<font color="#CCCCCC"> even if they went</font><font color="#E5E5E5"> all the way the</font>

1142
00:49:26,100 --> 00:49:33,160
<font color="#E5E5E5">challenges for threat detection are also</font>

1143
00:49:28,530 --> 00:49:36,720
be<font color="#CCCCCC"> talking about this in a minute aren't</font>

1144
00:49:33,160 --> 00:49:40,598
different<font color="#E5E5E5"> as they are for common</font><font color="#CCCCCC"> Miller</font>

1145
00:49:36,720 --> 00:49:41,348
<font color="#E5E5E5">since the binarism discs are largely</font>

1146
00:49:40,599 --> 00:49:45,880
inspectable

1147
00:49:41,349 --> 00:49:48,670
and the things<font color="#E5E5E5"> that happen at runtime in</font>

1148
00:49:45,880 --> 00:49:52,299
<font color="#E5E5E5">memory are well in my</font><font color="#CCCCCC"> opinion nothing</font>

1149
00:49:48,670 --> 00:49:54,099
<font color="#CCCCCC">spectable at all ever</font><font color="#E5E5E5"> either way even if</font>

1150
00:49:52,299 --> 00:49:56,680
we write a whole piece of<font color="#E5E5E5"> random where</font>

1151
00:49:54,099 --> 00:49:59,440
our hope is<font color="#E5E5E5"> mower</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> shellcode and</font>

1152
00:49:56,680 --> 00:50:01,480
loaded dynamically<font color="#E5E5E5"> and use the proxy we</font>

1153
00:49:59,440 --> 00:50:04,960
could still figure out<font color="#E5E5E5"> which behavior</font>

1154
00:50:01,480 --> 00:50:07,089
the<font color="#E5E5E5"> anklet shows at runtime because the</font>

1155
00:50:04,960 --> 00:50:08,980
<font color="#E5E5E5">anklet still has to execute system calls</font>

1156
00:50:07,089 --> 00:50:11,078
and all that<font color="#CCCCCC"> behavior monitoring</font><font color="#E5E5E5"> of</font>

1157
00:50:08,980 --> 00:50:13,809
malware<font color="#CCCCCC"> des is looking at system</font><font color="#E5E5E5"> calls</font>

1158
00:50:11,079 --> 00:50:16,029
<font color="#E5E5E5">are being executed by</font><font color="#CCCCCC"> the monitored</font>

1159
00:50:13,809 --> 00:50:18,609
application so for<font color="#E5E5E5"> monitoring in</font>

1160
00:50:16,029 --> 00:50:21,670
behavior analysis there isn't much

1161
00:50:18,609 --> 00:50:23,799
change in how they would<font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> such</font>

1162
00:50:21,670 --> 00:50:25,299
kind<font color="#E5E5E5"> of malware except that the machine</font>

1163
00:50:23,799 --> 00:50:28,029
which is used as an environment for

1164
00:50:25,299 --> 00:50:29,288
<font color="#E5E5E5">mitering would have to support</font><font color="#CCCCCC"> those</font>

1165
00:50:28,029 --> 00:50:31,299
checks<font color="#E5E5E5"> and be able to execute those</font>

1166
00:50:29,289 --> 00:50:34,089
applications<font color="#E5E5E5"> that's the different story</font>

1167
00:50:31,299 --> 00:50:35,920
though finally let's look at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> random</font>

1168
00:50:34,089 --> 00:50:41,859
<font color="#CCCCCC">bag where's this random where it was</font>

1169
00:50:35,920 --> 00:50:44,109
random where so for comparing monitoring

1170
00:50:41,859 --> 00:50:46,960
options as I think<font color="#CCCCCC"> those monitoring</font>

1171
00:50:44,109 --> 00:50:49,119
options<font color="#E5E5E5"> or monitoring technology</font><font color="#CCCCCC"> we'll</font>

1172
00:50:46,960 --> 00:50:50,589
still be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to monitor n somewhere</font>

1173
00:50:49,119 --> 00:50:53,950
wherever it is implemented

1174
00:50:50,589 --> 00:50:56,680
<font color="#E5E5E5">I used a plain piece of friends where I</font>

1175
00:50:53,950 --> 00:50:59,589
used Martha<font color="#CCCCCC"> -</font><font color="#E5E5E5"> checks and hand strength</font>

1176
00:50:56,680 --> 00:51:01,839
<font color="#E5E5E5">aware and I wrote a third proof concept</font>

1177
00:50:59,589 --> 00:51:04,509
which I put in the<font color="#CCCCCC"> text which is</font><font color="#E5E5E5"> not the</font>

1178
00:51:01,839 --> 00:51:08,190
proper<font color="#CCCCCC"> n somewhere but only executes a</font>

1179
00:51:04,509 --> 00:51:10,839
couple<font color="#E5E5E5"> of system calls which emulate the</font>

1180
00:51:08,190 --> 00:51:12,579
initial steps in the reservoir but would

1181
00:51:10,839 --> 00:51:15,000
be taking but<font color="#E5E5E5"> then the end I have three</font>

1182
00:51:12,579 --> 00:51:17,820
pieces<font color="#E5E5E5"> of software one plane</font>

1183
00:51:15,000 --> 00:51:19,440
one inside of<font color="#E5E5E5"> nine clave but interacting</font>

1184
00:51:17,820 --> 00:51:21,570
with the<font color="#CCCCCC"> application</font><font color="#E5E5E5"> and one using a</font>

1185
00:51:19,440 --> 00:51:23,490
system<font color="#CCCCCC"> called proxy to</font><font color="#E5E5E5"> execute system</font>

1186
00:51:21,570 --> 00:51:25,950
calls and then you<font color="#CCCCCC"> ended</font><font color="#E5E5E5"> try to monitor</font>

1187
00:51:23,490 --> 00:51:28,379
them<font color="#CCCCCC"> and Linux there's a tool called s</font>

1188
00:51:25,950 --> 00:51:30,629
trace as trace<font color="#E5E5E5"> helps you monitor system</font>

1189
00:51:28,380 --> 00:51:36,360
calls<font color="#E5E5E5"> are issued</font><font color="#CCCCCC"> by running application</font>

1190
00:51:30,630 --> 00:51:38,640
and<font color="#CCCCCC"> s trace when</font><font color="#E5E5E5"> ran on our STX enhanced</font>

1191
00:51:36,360 --> 00:51:41,220
ransomware still gives us<font color="#E5E5E5"> a very neat</font>

1192
00:51:38,640 --> 00:51:45,980
trace of system calls<font color="#E5E5E5"> that the</font>

1193
00:51:41,220 --> 00:51:52,500
ransomware executes so you can see in

1194
00:51:45,980 --> 00:51:55,080
red letters the the the<font color="#E5E5E5"> reading of the</font>

1195
00:51:52,500 --> 00:51:57,090
plain file on disk<font color="#CCCCCC"> in that case here</font>

1196
00:51:55,080 --> 00:52:01,920
there will be a make file you can see in

1197
00:51:57,090 --> 00:52:04,080
blue<font color="#E5E5E5"> letters</font><font color="#CCCCCC"> the s3x file system</font><font color="#E5E5E5"> api as</font>

1198
00:52:01,920 --> 00:52:10,710
it goes on<font color="#E5E5E5"> to figure out how big the</font>

1199
00:52:04,080 --> 00:52:13,290
file is and not sure why<font color="#CCCCCC"> not yes that's</font>

1200
00:52:10,710 --> 00:52:16,410
the API<font color="#E5E5E5"> here anyway you see the yes</font>

1201
00:52:13,290 --> 00:52:18,960
<font color="#E5E5E5">checks enhanced file system APIs it goes</font>

1202
00:52:16,410 --> 00:52:22,080
on to write<font color="#E5E5E5"> the encrypted file back to</font>

1203
00:52:18,960 --> 00:52:23,760
<font color="#CCCCCC">disk so these these long strings here</font>

1204
00:52:22,080 --> 00:52:26,220
are the the crypto text<font color="#E5E5E5"> that's being</font>

1205
00:52:23,760 --> 00:52:27,930
<font color="#E5E5E5">written back into the encrypted</font>

1206
00:52:26,220 --> 00:52:29,649
representation of our<font color="#CCCCCC"> formally plain</font>

1207
00:52:27,930 --> 00:52:31,629
<font color="#E5E5E5">files and you</font>

1208
00:52:29,650 --> 00:52:35,789
<font color="#CCCCCC">seeing green letters placing</font><font color="#E5E5E5"> of the</font>

1209
00:52:31,630 --> 00:52:42,220
ransom note<font color="#CCCCCC"> and</font><font color="#E5E5E5"> somewhere there is the</font>

1210
00:52:35,789 --> 00:52:43,750
deleting of the plaintiff<font color="#CCCCCC"> oh yes the</font>

1211
00:52:42,220 --> 00:52:45,669
application goes on to read<font color="#CCCCCC"> the clear</font>

1212
00:52:43,750 --> 00:52:47,410
text file encrypt the content<font color="#E5E5E5"> and write</font>

1213
00:52:45,670 --> 00:52:49,329
that content the cryptid back to disk

1214
00:52:47,410 --> 00:52:52,450
and<font color="#E5E5E5"> then it deletes the clear text file</font>

1215
00:52:49,329 --> 00:52:55,299
<font color="#CCCCCC">so it</font><font color="#E5E5E5"> only remains with the encrypted</font>

1216
00:52:52,450 --> 00:52:57,189
file<font color="#E5E5E5"> that's lying on disk</font>

1217
00:52:55,299 --> 00:53:00,609
yeah like any other end the<font color="#CCCCCC"> word with</font>

1218
00:52:57,190 --> 00:53:04,480
you<font color="#CCCCCC"> two then if you go on</font><font color="#E5E5E5"> and compare</font>

1219
00:53:00,609 --> 00:53:05,410
the<font color="#E5E5E5"> S trace output for the</font><font color="#CCCCCC"> S checks</font>

1220
00:53:04,480 --> 00:53:09,579
enhanced ransomware

1221
00:53:05,410 --> 00:53:12,848
and the plain ransomware which is not

1222
00:53:09,579 --> 00:53:14,829
very easily visible in<font color="#E5E5E5"> this screenshot</font>

1223
00:53:12,849 --> 00:53:16,539
<font color="#CCCCCC">but if you would have a closer look you</font>

1224
00:53:14,829 --> 00:53:19,299
would see<font color="#E5E5E5"> that you see the same trace of</font>

1225
00:53:16,539 --> 00:53:20,760
API<font color="#CCCCCC"> calls or of system calls</font><font color="#E5E5E5"> as they're</font>

1226
00:53:19,299 --> 00:53:23,319
being executed<font color="#E5E5E5"> by both applications</font>

1227
00:53:20,760 --> 00:53:24,670
<font color="#E5E5E5">where files are being read files are</font>

1228
00:53:23,319 --> 00:53:26,440
being encrypted files<font color="#CCCCCC"> are being</font><font color="#E5E5E5"> written</font>

1229
00:53:24,670 --> 00:53:28,150
father being deleted<font color="#E5E5E5"> ransom notes are</font>

1230
00:53:26,440 --> 00:53:30,039
<font color="#E5E5E5">being placed and so on</font><font color="#CCCCCC"> so forth so you</font>

1231
00:53:28,150 --> 00:53:32,230
<font color="#E5E5E5">see the same order</font><font color="#CCCCCC"> of system</font><font color="#E5E5E5"> calls as</font>

1232
00:53:30,039 --> 00:53:36,700
they're being executed<font color="#E5E5E5"> by the</font>

1233
00:53:32,230 --> 00:53:38,829
application<font color="#CCCCCC"> and here I marked the the</font>

1234
00:53:36,700 --> 00:53:42,509
right system call because<font color="#E5E5E5"> interestingly</font>

1235
00:53:38,829 --> 00:53:44,770
we have<font color="#E5E5E5"> two plain ransomware which</font>

1236
00:53:42,510 --> 00:53:48,220
executes the right system call itself

1237
00:53:44,770 --> 00:53:50,500
<font color="#CCCCCC">and writes back the encrypted</font><font color="#E5E5E5"> content to</font>

1238
00:53:48,220 --> 00:53:52,390
the thousand disk whereas the<font color="#CCCCCC"> s Jackson</font>

1239
00:53:50,500 --> 00:53:55,599
<font color="#CCCCCC">has friends over uses</font>

1240
00:53:52,390 --> 00:53:57,400
<font color="#E5E5E5">SGX file system library to encrypt files</font>

1241
00:53:55,599 --> 00:53:59,739
and<font color="#CCCCCC"> write them</font><font color="#E5E5E5"> back to disk</font><font color="#CCCCCC"> and you can</font>

1242
00:53:57,400 --> 00:54:01,089
still<font color="#E5E5E5"> see the system calls and the</font>

1243
00:53:59,739 --> 00:54:02,769
<font color="#E5E5E5">encrypted content that's being written</font>

1244
00:54:01,089 --> 00:54:04,989
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to disk so if you go</font><font color="#E5E5E5"> and monitor</font>

1245
00:54:02,769 --> 00:54:07,238
<font color="#E5E5E5">both of those applications you can see</font>

1246
00:54:04,989 --> 00:54:09,160
the same<font color="#E5E5E5"> thing naturally because both</font>

1247
00:54:07,239 --> 00:54:12,239
applications<font color="#E5E5E5"> have to execute system</font>

1248
00:54:09,160 --> 00:54:15,160
calls in<font color="#E5E5E5"> order to achieve</font><font color="#CCCCCC"> their goal</font>

1249
00:54:12,239 --> 00:54:16,960
this<font color="#CCCCCC"> how looks pretty much the same</font><font color="#E5E5E5"> and</font>

1250
00:54:15,160 --> 00:54:19,480
<font color="#CCCCCC">only a little</font><font color="#E5E5E5"> bit different if you look</font>

1251
00:54:16,960 --> 00:54:21,999
at the total count<font color="#E5E5E5"> of system calls are</font>

1252
00:54:19,480 --> 00:54:25,749
<font color="#E5E5E5">being issued you see that the numbers</font>

1253
00:54:21,999 --> 00:54:28,480
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> SGX enhanced ransomware are</font>

1254
00:54:25,749 --> 00:54:30,549
<font color="#E5E5E5">overall a little</font><font color="#CCCCCC"> bit higher I haven't</font>

1255
00:54:28,480 --> 00:54:35,259
looked any deeper of why these<font color="#E5E5E5"> numbers</font>

1256
00:54:30,549 --> 00:54:38,170
<font color="#E5E5E5">are exceeding numbers of the plain</font>

1257
00:54:35,259 --> 00:54:40,960
ransomware<font color="#E5E5E5"> but overall the curl it very</font>

1258
00:54:38,170 --> 00:54:45,519
well<font color="#E5E5E5"> so in total</font><font color="#CCCCCC"> both applications</font><font color="#E5E5E5"> do</font>

1259
00:54:40,960 --> 00:54:47,289
almost the same<font color="#E5E5E5"> thing when monitored</font>

1260
00:54:45,519 --> 00:54:49,930
through s trace so if you look at<font color="#E5E5E5"> the</font>

1261
00:54:47,289 --> 00:54:52,210
system<font color="#CCCCCC"> cost</font><font color="#E5E5E5"> as mentioned</font><font color="#CCCCCC"> you see the</font>

1262
00:54:49,930 --> 00:54:56,140
same thing now finally that the question

1263
00:54:52,210 --> 00:54:59,140
the<font color="#E5E5E5"> the system called proxy would we see</font>

1264
00:54:56,140 --> 00:55:01,480
<font color="#CCCCCC">the same thing there as well</font><font color="#E5E5E5"> let's go on</font>

1265
00:54:59,140 --> 00:55:03,879
<font color="#CCCCCC">to the third demo I call the third demo</font>

1266
00:55:01,480 --> 00:55:06,190
of hands<font color="#E5E5E5"> because this is a presentation</font>

1267
00:55:03,880 --> 00:55:08,849
of in Germany<font color="#E5E5E5"> which means I had to pick</font>

1268
00:55:06,190 --> 00:55:08,849
a German

1269
00:55:09,720 --> 00:55:16,270
as mentioned<font color="#E5E5E5"> defense is inspiring runs</font>

1270
00:55:13,750 --> 00:55:19,300
<font color="#CCCCCC">where</font><font color="#E5E5E5"> it's aspiring because it doesn't</font>

1271
00:55:16,270 --> 00:55:21,970
actually do much because turns out

1272
00:55:19,300 --> 00:55:28,330
implementing<font color="#CCCCCC"> sis</font><font color="#E5E5E5"> called proxy calls in</font>

1273
00:55:21,970 --> 00:55:30,750
<font color="#CCCCCC">shellcode</font><font color="#E5E5E5"> isn't quite</font><font color="#CCCCCC"> my big talent but</font>

1274
00:55:28,330 --> 00:55:30,750
<font color="#E5E5E5">either way</font>

1275
00:55:35,880 --> 00:55:42,790
<font color="#E5E5E5">after that call</font><font color="#CCCCCC"> him proxy</font>

1276
00:55:39,160 --> 00:55:47,250
<font color="#E5E5E5">okay so another director</font><font color="#CCCCCC"> pumps in</font><font color="#E5E5E5"> the</font>

1277
00:55:42,790 --> 00:55:49,750
<font color="#E5E5E5">four execute hunts I</font><font color="#CCCCCC"> will see</font><font color="#E5E5E5"> that and</font>

1278
00:55:47,250 --> 00:55:52,230
has the same dramatic loading procedure

1279
00:55:49,750 --> 00:55:55,720
<font color="#E5E5E5">as the other ends</font><font color="#CCCCCC"> work and then goes on</font>

1280
00:55:52,230 --> 00:55:57,340
<font color="#CCCCCC">to tell</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> it loaded a piece</font>

1281
00:55:55,720 --> 00:55:59,560
of<font color="#CCCCCC"> shout card and then started executing</font>

1282
00:55:57,340 --> 00:56:01,480
system calls through the proxy the proxy

1283
00:55:59,560 --> 00:56:05,620
tells us what the system call numbers

1284
00:56:01,480 --> 00:56:08,170
were<font color="#CCCCCC"> system</font><font color="#E5E5E5"> call number two</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> be</font>

1285
00:56:05,620 --> 00:56:11,589
<font color="#E5E5E5">open where the application goes on to</font>

1286
00:56:08,170 --> 00:56:15,790
open<font color="#CCCCCC"> the directory then system called d9</font>

1287
00:56:11,590 --> 00:56:17,320
would be list directory contents<font color="#CCCCCC"> after</font>

1288
00:56:15,790 --> 00:56:21,850
<font color="#CCCCCC">listing directory contents the</font>

1289
00:56:17,320 --> 00:56:24,040
ransomware goes on to call<font color="#CCCCCC"> the system</font>

1290
00:56:21,850 --> 00:56:26,140
<font color="#CCCCCC">called open again on the very first file</font>

1291
00:56:24,040 --> 00:56:27,580
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> in this directory again</font>

1292
00:56:26,140 --> 00:56:29,319
writing<font color="#CCCCCC"> shall</font><font color="#E5E5E5"> cut us out of a big</font><font color="#CCCCCC"> talent</font>

1293
00:56:27,580 --> 00:56:31,330
<font color="#E5E5E5">which is why I pretty much stopped right</font>

1294
00:56:29,320 --> 00:56:32,950
there<font color="#E5E5E5"> so I opened the first file in the</font>

1295
00:56:31,330 --> 00:56:34,090
directory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I went on to read the</font>

1296
00:56:32,950 --> 00:56:36,069
content of this file which<font color="#E5E5E5"> would be</font>

1297
00:56:34,090 --> 00:56:37,360
system<font color="#E5E5E5"> call number zero now if you went</font>

1298
00:56:36,070 --> 00:56:39,370
<font color="#E5E5E5">on to implement the rest of the</font>

1299
00:56:37,360 --> 00:56:41,800
ransomware and<font color="#CCCCCC"> shell code</font><font color="#E5E5E5"> because</font>

1300
00:56:39,370 --> 00:56:43,720
<font color="#E5E5E5">theoretically dynamically load the</font>

1301
00:56:41,800 --> 00:56:45,160
ransomware<font color="#E5E5E5"> shock of the runtime</font><font color="#CCCCCC"> and then</font>

1302
00:56:43,720 --> 00:56:47,709
execute there's this<font color="#E5E5E5"> called proxy</font>

1303
00:56:45,160 --> 00:56:50,529
enhanced renderer through the Enclave

1304
00:56:47,710 --> 00:56:53,380
<font color="#E5E5E5">and would statically hide the entire</font>

1305
00:56:50,530 --> 00:56:54,820
<font color="#E5E5E5">code portion of the ransomware so no</font>

1306
00:56:53,380 --> 00:56:57,280
reverse engineer could figure out ever

1307
00:56:54,820 --> 00:56:58,510
again<font color="#E5E5E5"> what this binary was supposed</font><font color="#CCCCCC"> to</font>

1308
00:56:57,280 --> 00:57:02,030
do

1309
00:56:58,510 --> 00:57:03,500
but the interesting part<font color="#E5E5E5"> or the thing</font>

1310
00:57:02,030 --> 00:57:05,000
that<font color="#CCCCCC"> I wanted to show actually or</font><font color="#E5E5E5"> this</font>

1311
00:57:03,500 --> 00:57:06,830
<font color="#E5E5E5">research is</font><font color="#CCCCCC"> that with ice trays I</font><font color="#E5E5E5"> was</font>

1312
00:57:05,000 --> 00:57:09,050
<font color="#CCCCCC">Houston called</font><font color="#E5E5E5"> monitoring we can still</font>

1313
00:57:06,830 --> 00:57:13,160
figure<font color="#CCCCCC"> out what the activity of this</font>

1314
00:57:09,050 --> 00:57:18,140
application<font color="#CCCCCC"> was once we started it how</font>

1315
00:57:13,160 --> 00:57:19,350
<font color="#CCCCCC">would</font><font color="#E5E5E5"> that look like let's go back to</font>

1316
00:57:18,140 --> 00:57:22,440
the presentation

1317
00:57:19,350 --> 00:57:22,440
[Music]

1318
00:57:24,930 --> 00:57:34,210
once again<font color="#E5E5E5"> nothing um yeah we get again</font>

1319
00:57:31,900 --> 00:57:37,000
the the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> call trace and could see</font>

1320
00:57:34,210 --> 00:57:39,520
the system<font color="#CCCCCC"> calls issued by the shotgun</font>

1321
00:57:37,000 --> 00:57:41,680
<font color="#CCCCCC">has promised we have exactly</font><font color="#E5E5E5"> four system</font>

1322
00:57:39,520 --> 00:57:43,720
<font color="#E5E5E5">calls that</font><font color="#CCCCCC"> this aspiring reservoir is</font>

1323
00:57:41,680 --> 00:57:46,839
executing or we see the open of<font color="#CCCCCC"> the</font>

1324
00:57:43,720 --> 00:57:48,970
target<font color="#E5E5E5"> territory we read the directory</font>

1325
00:57:46,840 --> 00:57:51,040
<font color="#E5E5E5">the directory entries which in this case</font>

1326
00:57:48,970 --> 00:57:52,930
is<font color="#CCCCCC"> exactly free which would</font><font color="#E5E5E5"> be the dot</font>

1327
00:57:51,040 --> 00:57:55,029
the<font color="#CCCCCC"> table</font><font color="#E5E5E5"> dot and the one file to the</font>

1328
00:57:52,930 --> 00:57:57,009
place in there<font color="#E5E5E5"> and then we go</font><font color="#CCCCCC"> on to</font><font color="#E5E5E5"> open</font>

1329
00:57:55,030 --> 00:57:58,240
that<font color="#E5E5E5"> one file is located</font><font color="#CCCCCC"> in there and we</font>

1330
00:57:57,010 --> 00:58:01,420
read<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> bytes of the</font>

1331
00:57:58,240 --> 00:58:04,540
file<font color="#CCCCCC"> now theory now I could go on</font><font color="#E5E5E5"> and</font>

1332
00:58:01,420 --> 00:58:05,859
encrypt those those bytes the rest from

1333
00:58:04,540 --> 00:58:08,109
<font color="#E5E5E5">the pilot writing back to</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> encrypted</font>

1334
00:58:05,859 --> 00:58:09,790
file and delete<font color="#CCCCCC"> the original</font><font color="#E5E5E5"> file and go</font>

1335
00:58:08,109 --> 00:58:11,980
on to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next round on the way</font><font color="#E5E5E5"> change</font>

1336
00:58:09,790 --> 00:58:14,800
the the founding of<font color="#E5E5E5"> the thing</font><font color="#CCCCCC"> the</font>

1337
00:58:11,980 --> 00:58:16,780
<font color="#CCCCCC">registry</font><font color="#E5E5E5"> but what I want to show you</font>

1338
00:58:14,800 --> 00:58:19,180
here<font color="#E5E5E5"> is I can still see the system calls</font>

1339
00:58:16,780 --> 00:58:20,560
that<font color="#CCCCCC"> are executed by D and Clavin can</font>

1340
00:58:19,180 --> 00:58:23,710
still go on<font color="#E5E5E5"> to monitor my</font><font color="#CCCCCC"> ex</font>

1341
00:58:20,560 --> 00:58:26,109
applications<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> that was most of</font>

1342
00:58:23,710 --> 00:58:28,090
<font color="#CCCCCC">the</font><font color="#E5E5E5"> content of</font><font color="#CCCCCC"> the whole</font><font color="#E5E5E5"> presentation to</font>

1343
00:58:26,109 --> 00:58:31,750
sum it<font color="#E5E5E5"> up what what do I think does this</font>

1344
00:58:28,090 --> 00:58:34,540
to<font color="#CCCCCC"> do threat detection</font><font color="#E5E5E5"> pattern matching</font>

1345
00:58:31,750 --> 00:58:38,530
for<font color="#CCCCCC"> inclusion disks is still working</font>

1346
00:58:34,540 --> 00:58:39,640
if you don't hide your<font color="#CCCCCC"> your malicious</font>

1347
00:58:38,530 --> 00:58:41,050
code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> shortcut that you know</font>

1348
00:58:39,640 --> 00:58:42,790
dynamically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> is still</font>

1349
00:58:41,050 --> 00:58:44,440
<font color="#E5E5E5">respectable and then</font><font color="#CCCCCC"> Tavares in theory</font>

1350
00:58:42,790 --> 00:58:45,610
can still create signatures<font color="#E5E5E5"> because</font>

1351
00:58:44,440 --> 00:58:47,620
<font color="#CCCCCC">that's what they're really</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> at</font>

1352
00:58:45,610 --> 00:58:49,570
<font color="#CCCCCC">creating things just it just might have</font>

1353
00:58:47,620 --> 00:58:51,069
some problem<font color="#CCCCCC"> with all the library card</font>

1354
00:58:49,570 --> 00:58:53,490
<font color="#E5E5E5">in there and automation of signature</font>

1355
00:58:51,070 --> 00:58:57,010
creation<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be a big</font><font color="#E5E5E5"> headache</font>

1356
00:58:53,490 --> 00:58:58,990
<font color="#CCCCCC">monitoring is</font><font color="#E5E5E5"> also still possible even</font>

1357
00:58:57,010 --> 00:59:00,580
<font color="#E5E5E5">if the shell code is loaded dynamically</font>

1358
00:58:58,990 --> 00:59:02,560
because we can still see the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> cost</font>

1359
00:59:00,580 --> 00:59:04,630
and of course we can still<font color="#CCCCCC"> see any</font>

1360
00:59:02,560 --> 00:59:07,150
changes that<font color="#E5E5E5"> are made</font><font color="#CCCCCC"> to the to the</font>

1361
00:59:04,630 --> 00:59:09,160
system<font color="#E5E5E5"> you might be aware</font><font color="#CCCCCC"> of Melbourne</font>

1362
00:59:07,150 --> 00:59:10,960
usually wants to perform changes to the

1363
00:59:09,160 --> 00:59:13,149
system<font color="#CCCCCC"> wants to encrypt files the wants</font>

1364
00:59:10,960 --> 00:59:17,050
to create remote connections who wants

1365
00:59:13,150 --> 00:59:18,880
to take screenshots<font color="#E5E5E5"> for take audio</font>

1366
00:59:17,050 --> 00:59:21,670
captures or whatever<font color="#E5E5E5"> so all these</font>

1367
00:59:18,880 --> 00:59:24,390
<font color="#CCCCCC">changes that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> taking the system</font><font color="#E5E5E5"> we</font>

1368
00:59:21,670 --> 00:59:26,770
<font color="#E5E5E5">can still investigate forensic Lee and</font>

1369
00:59:24,390 --> 00:59:28,120
of course<font color="#E5E5E5"> we have two parameters</font><font color="#CCCCCC"> so any</font>

1370
00:59:26,770 --> 00:59:31,000
remote connection that<font color="#CCCCCC"> malreaux built</font>

1371
00:59:28,120 --> 00:59:34,180
will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> also visible to the system and</font>

1372
00:59:31,000 --> 00:59:37,570
<font color="#E5E5E5">to other monitoring entities in the</font>

1373
00:59:34,180 --> 00:59:39,279
network<font color="#E5E5E5"> for</font><font color="#CCCCCC"> is the response</font><font color="#E5E5E5"> in forensics</font>

1374
00:59:37,570 --> 00:59:41,359
<font color="#E5E5E5">this is where it gets actually tricky</font>

1375
00:59:39,280 --> 00:59:44,150
<font color="#E5E5E5">because</font>

1376
00:59:41,359 --> 00:59:47,719
the execution or the activity of nine

1377
00:59:44,150 --> 00:59:49,700
clave<font color="#CCCCCC"> was quite protected</font><font color="#E5E5E5"> forensics will</font>

1378
00:59:47,719 --> 00:59:57,279
have a hard<font color="#E5E5E5"> time recovering what</font>

1379
00:59:49,700 --> 00:59:57,279
happened<font color="#CCCCCC"> afterwards and this</font>

1380
00:59:57,440 --> 01:00:01,940
also brings to mind<font color="#E5E5E5"> well a case that I</font>

1381
01:00:00,529 --> 01:00:05,059
was<font color="#E5E5E5"> working</font><font color="#CCCCCC"> on in the past where a piece</font>

1382
01:00:01,940 --> 01:00:07,009
of malware<font color="#CCCCCC"> would load scripts</font><font color="#E5E5E5"> at runtime</font>

1383
01:00:05,059 --> 01:00:10,849
<font color="#E5E5E5">and would execute scripts with a lower</font>

1384
01:00:07,009 --> 01:00:13,819
engine<font color="#E5E5E5"> which reminds me of the whole</font>

1385
01:00:10,849 --> 01:00:15,829
project<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole as checks random</font>

1386
01:00:13,819 --> 01:00:18,140
<font color="#E5E5E5">where because this piece of malware</font>

1387
01:00:15,829 --> 01:00:21,109
which used<font color="#E5E5E5"> the scripting engine</font><font color="#CCCCCC"> I think</font>

1388
01:00:18,140 --> 01:00:24,019
it was a lot<font color="#CCCCCC"> easier to implement and in</font>

1389
01:00:21,109 --> 01:00:25,578
the end<font color="#E5E5E5"> provided the same protection so</font>

1390
01:00:24,019 --> 01:00:27,649
if you embed<font color="#CCCCCC"> a scripting engine in</font><font color="#E5E5E5"> a</font>

1391
01:00:25,579 --> 01:00:29,059
piece<font color="#E5E5E5"> of malware the analyst can see the</font>

1392
01:00:27,650 --> 01:00:30,710
scripting engine but they cannot

1393
01:00:29,059 --> 01:00:32,420
<font color="#E5E5E5">naturally see the scripts unless they're</font>

1394
01:00:30,710 --> 01:00:34,460
downloaded and executed and<font color="#E5E5E5"> once</font><font color="#CCCCCC"> they're</font>

1395
01:00:32,420 --> 01:00:35,749
executed<font color="#E5E5E5"> they can be</font><font color="#CCCCCC"> deleted and</font><font color="#E5E5E5"> the</font>

1396
01:00:34,460 --> 01:00:39,589
analyst would<font color="#E5E5E5"> still not see what</font>

1397
01:00:35,749 --> 01:00:42,649
happened<font color="#CCCCCC"> so yeah this is</font><font color="#E5E5E5"> just something</font>

1398
01:00:39,589 --> 01:00:44,660
<font color="#E5E5E5">some idea I wanted to drop in case</font>

1399
01:00:42,650 --> 01:00:46,329
you're thinking<font color="#E5E5E5"> about implementing your</font>

1400
01:00:44,660 --> 01:00:49,249
own<font color="#E5E5E5"> proof of concept</font>

1401
01:00:46,329 --> 01:00:51,710
finally my conclusions<font color="#CCCCCC"> extracts is</font>

1402
01:00:49,249 --> 01:00:53,720
useful for guarding secrets<font color="#E5E5E5"> and this is</font>

1403
01:00:51,710 --> 01:00:55,190
exactly<font color="#E5E5E5"> what it</font><font color="#CCCCCC"> should be</font><font color="#E5E5E5"> used for</font><font color="#CCCCCC"> I've</font>

1404
01:00:53,720 --> 01:00:56,959
<font color="#E5E5E5">seen other projects were entire</font>

1405
01:00:55,190 --> 01:00:59,180
applications reported<font color="#CCCCCC"> interests checks</font>

1406
01:00:56,960 --> 01:01:03,349
which I don't<font color="#E5E5E5"> think is what this checks</font>

1407
01:00:59,180 --> 01:01:06,109
should be used for<font color="#E5E5E5"> because it provides a</font>

1408
01:01:03,349 --> 01:01:12,109
<font color="#E5E5E5">lot of also active attack vector and</font>

1409
01:01:06,109 --> 01:01:16,670
attic room for well it's a exploitation

1410
01:01:12,109 --> 01:01:19,190
<font color="#CCCCCC">so I must look</font><font color="#E5E5E5"> into that for writing</font>

1411
01:01:16,670 --> 01:01:21,559
<font color="#CCCCCC">applications</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> STX there should be a</font>

1412
01:01:19,190 --> 01:01:23,269
<font color="#E5E5E5">a special</font><font color="#CCCCCC"> focus on</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> cleave</font>

1413
01:01:21,559 --> 01:01:24,589
interactions like<font color="#E5E5E5"> which day that goes</font>

1414
01:01:23,269 --> 01:01:25,930
into<font color="#E5E5E5"> the anklet which</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> comes out of</font>

1415
01:01:24,589 --> 01:01:31,000
<font color="#CCCCCC">a 95</font>

1416
01:01:25,930 --> 01:01:33,788
and monitoring should be kept in mind to

1417
01:01:31,000 --> 01:01:36,910
keep keep an eye<font color="#CCCCCC"> on what</font><font color="#E5E5E5"> enclaves are</font>

1418
01:01:33,789 --> 01:01:39,970
<font color="#E5E5E5">thinking about doing</font><font color="#CCCCCC"> and whether that</font>

1419
01:01:36,910 --> 01:01:43,558
changes<font color="#E5E5E5"> at</font><font color="#CCCCCC"> run time classical threat</font>

1420
01:01:39,970 --> 01:01:45,549
detection isn't<font color="#E5E5E5"> high not much in their</font>

1421
01:01:43,559 --> 01:01:47,410
directivity what what their technology

1422
01:01:45,549 --> 01:01:48,970
<font color="#E5E5E5">can achieve and where the problems</font>

1423
01:01:47,410 --> 01:01:50,339
<font color="#CCCCCC">actually arise</font><font color="#E5E5E5"> are forensics and engine</font>

1424
01:01:48,970 --> 01:01:52,720
response

1425
01:01:50,339 --> 01:01:55,420
<font color="#CCCCCC">all right I think my</font><font color="#E5E5E5"> time should</font>

1426
01:01:52,720 --> 01:01:57,009
probably be up already<font color="#CCCCCC"> I thank you very</font>

1427
01:01:55,420 --> 01:01:59,200
much for your attention<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> some</font>

1428
01:01:57,010 --> 01:02:01,150
<font color="#CCCCCC">acknowledge</font><font color="#E5E5E5"> mr. speaker that I I</font>

1429
01:01:59,200 --> 01:02:02,890
couldn't<font color="#E5E5E5"> have done this research without</font>

1430
01:02:01,150 --> 01:02:04,450
<font color="#E5E5E5">my team and Intel that fed me with</font>

1431
01:02:02,890 --> 01:02:05,470
<font color="#CCCCCC">information and told</font><font color="#E5E5E5"> me about other</font>

1432
01:02:04,450 --> 01:02:08,078
things I'm doing<font color="#CCCCCC"> wrong when</font><font color="#E5E5E5"> I was</font>

1433
01:02:05,470 --> 01:02:10,689
<font color="#E5E5E5">writing enclaves awesome</font><font color="#CCCCCC"> very grateful</font>

1434
01:02:08,079 --> 01:02:12,690
to<font color="#CCCCCC"> March and Remus wished and Prasad and</font>

1435
01:02:10,690 --> 01:02:15,309
<font color="#CCCCCC">Turner</font><font color="#E5E5E5"> Kafka and ego</font><font color="#CCCCCC"> pereira for</font>

1436
01:02:12,690 --> 01:02:19,720
<font color="#E5E5E5">publishing</font><font color="#CCCCCC"> research on how the user</font>

1437
01:02:15,309 --> 01:02:21,309
abuse<font color="#E5E5E5"> HX applications</font><font color="#CCCCCC"> that's a thank</font><font color="#E5E5E5"> you</font>

1438
01:02:19,720 --> 01:02:22,980
<font color="#E5E5E5">very much and if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have any questions</font>

1439
01:02:21,309 --> 01:02:32,460
I'm happy to<font color="#CCCCCC"> answer them</font>

1440
01:02:22,980 --> 01:02:32,460
[Applause]

