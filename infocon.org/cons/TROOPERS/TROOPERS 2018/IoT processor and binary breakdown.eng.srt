1
00:00:03,360 --> 00:00:08,260
welcome back from the<font color="#E5E5E5"> break please</font>

2
00:00:06,130 --> 00:00:10,780
welcome<font color="#CCCCCC"> Vladimir and Frederik here for</font>

3
00:00:08,260 --> 00:00:12,969
the<font color="#E5E5E5"> last talk for today they are talking</font>

4
00:00:10,780 --> 00:00:16,630
about IOT architecture and<font color="#CCCCCC"> processors</font><font color="#E5E5E5"> so</font>

5
00:00:12,969 --> 00:00:19,240
please the stage is<font color="#CCCCCC"> yours awesome yeah</font>

6
00:00:16,630 --> 00:00:20,410
thanks<font color="#CCCCCC"> very much for having us here just</font>

7
00:00:19,240 --> 00:00:22,840
a little<font color="#CCCCCC"> background there</font><font color="#E5E5E5"> like who we</font>

8
00:00:20,410 --> 00:00:24,519
are and what we do<font color="#E5E5E5"> we basically work</font>

9
00:00:22,840 --> 00:00:26,590
together like in telecom security and

10
00:00:24,519 --> 00:00:28,028
and consulting<font color="#E5E5E5"> and work like all across</font>

11
00:00:26,590 --> 00:00:31,060
<font color="#E5E5E5">like a number of critical infrastructure</font>

12
00:00:28,029 --> 00:00:32,110
domains<font color="#E5E5E5"> do a bit of training but</font><font color="#CCCCCC"> we're</font>

13
00:00:31,060 --> 00:00:33,610
really<font color="#CCCCCC"> interested in doing like research</font>

14
00:00:32,110 --> 00:00:36,010
into security appliances including like

15
00:00:33,610 --> 00:00:37,829
<font color="#CCCCCC">telecom appliances as well and this</font><font color="#E5E5E5"> is</font>

16
00:00:36,010 --> 00:00:39,879
kind of where<font color="#CCCCCC"> the store comes from is</font>

17
00:00:37,829 --> 00:00:41,649
surprising there's a lot of IOT in

18
00:00:39,879 --> 00:00:43,660
<font color="#CCCCCC">telecom and you won't</font><font color="#E5E5E5"> expect it to be</font>

19
00:00:41,649 --> 00:00:46,840
there but most of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> devices that like</font>

20
00:00:43,660 --> 00:00:49,328
run really critical systems are running

21
00:00:46,840 --> 00:00:51,309
<font color="#E5E5E5">on the arm and SPARC and</font><font color="#CCCCCC"> PowerPC</font><font color="#E5E5E5"> and</font>

22
00:00:49,329 --> 00:00:53,980
<font color="#E5E5E5">things like this and those</font><font color="#CCCCCC"> devices are</font>

23
00:00:51,309 --> 00:00:55,059
hard to come<font color="#E5E5E5"> by</font><font color="#CCCCCC"> so we basically giving</font>

24
00:00:53,980 --> 00:00:57,519
this talk to think about how to

25
00:00:55,059 --> 00:01:00,010
<font color="#CCCCCC">virtualized systems</font><font color="#E5E5E5"> and IT systems</font><font color="#CCCCCC"> and</font>

26
00:00:57,520 --> 00:01:02,829
find issues and elements<font color="#E5E5E5"> and issues and</font>

27
00:01:00,010 --> 00:01:04,449
vulnerabilities in them from the

28
00:01:02,829 --> 00:01:05,890
previous talks with it briefly basically

29
00:01:04,449 --> 00:01:08,080
build upon<font color="#CCCCCC"> that so lastly the tool grant</font>

30
00:01:05,890 --> 00:01:09,880
<font color="#E5E5E5">sandbox security curriculum</font><font color="#CCCCCC"> future</font>

31
00:01:08,080 --> 00:01:13,150
infrastructure<font color="#E5E5E5"> security and basically</font>

32
00:01:09,880 --> 00:01:17,259
attacking<font color="#E5E5E5"> security applications and then</font>

33
00:01:13,150 --> 00:01:18,580
firmware as well<font color="#CCCCCC"> so this talk is</font>

34
00:01:17,260 --> 00:01:20,710
<font color="#E5E5E5">basically going to discuss kind of why</font>

35
00:01:18,580 --> 00:01:22,810
<font color="#E5E5E5">IP applications why they in critical</font>

36
00:01:20,710 --> 00:01:24,369
infrastructure and<font color="#E5E5E5"> how they work</font><font color="#CCCCCC"> we'll</font>

37
00:01:22,810 --> 00:01:25,900
talk about IT<font color="#E5E5E5"> Hardware OS and</font>

38
00:01:24,370 --> 00:01:28,540
application layers<font color="#CCCCCC"> look at case studies</font>

39
00:01:25,900 --> 00:01:30,040
<font color="#CCCCCC">of a number of</font><font color="#E5E5E5"> IOT systems that work in</font>

40
00:01:28,540 --> 00:01:32,200
critical infrastructure and kind of<font color="#E5E5E5"> by</font>

41
00:01:30,040 --> 00:01:35,440
themselves<font color="#E5E5E5"> and we'll look at</font><font color="#CCCCCC"> some of the</font>

42
00:01:32,200 --> 00:01:37,000
ways we well<font color="#E5E5E5"> found issues in them a look</font>

43
00:01:35,440 --> 00:01:39,429
<font color="#CCCCCC">at extracting</font><font color="#E5E5E5"> firmware within systems</font>

44
00:01:37,000 --> 00:01:40,330
and then really mainly<font color="#E5E5E5"> built a tool that</font>

45
00:01:39,430 --> 00:01:43,120
we're gonna<font color="#E5E5E5"> nicknamed the malware</font>

46
00:01:40,330 --> 00:01:45,880
factory to help<font color="#E5E5E5"> like virtualize</font><font color="#CCCCCC"> all the</font>

47
00:01:43,120 --> 00:01:48,610
<font color="#E5E5E5">IOT</font><font color="#CCCCCC"> processes</font><font color="#E5E5E5"> out there well 14 of them</font>

48
00:01:45,880 --> 00:01:50,800
and how<font color="#E5E5E5"> to automate the creation of like</font>

49
00:01:48,610 --> 00:01:55,260
IOT test beds and environments<font color="#CCCCCC"> to</font>

50
00:01:50,800 --> 00:01:55,259
<font color="#CCCCCC">actually help build and find</font><font color="#E5E5E5"> problems</font>

51
00:01:55,490 --> 00:02:00,079
so kind of why talk about IOT well most

52
00:01:58,549 --> 00:02:01,369
vulnerabilities<font color="#E5E5E5"> what people discuss</font>

53
00:02:00,079 --> 00:02:02,839
things are things<font color="#E5E5E5"> like default</font>

54
00:02:01,369 --> 00:02:05,090
credentials over<font color="#E5E5E5"> here quite frequently</font>

55
00:02:02,840 --> 00:02:07,490
<font color="#CCCCCC">das attacks you know</font><font color="#E5E5E5"> just look CPU</font>

56
00:02:05,090 --> 00:02:09,619
cycles and and<font color="#CCCCCC"> lo processes for physical</font>

57
00:02:07,490 --> 00:02:11,349
controls and kind of<font color="#E5E5E5"> then</font><font color="#CCCCCC"> tsuki web</font>

58
00:02:09,619 --> 00:02:13,550
interfaces that we see quite<font color="#E5E5E5"> frequently</font>

59
00:02:11,349 --> 00:02:15,730
<font color="#CCCCCC">we want to look at a slightly</font><font color="#E5E5E5"> different</font>

60
00:02:13,550 --> 00:02:17,660
approach<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we looking at kind of the</font>

61
00:02:15,730 --> 00:02:20,329
<font color="#CCCCCC">binaries and</font><font color="#E5E5E5"> then they</font><font color="#CCCCCC"> actually</font>

62
00:02:17,660 --> 00:02:23,209
processes across RT devices<font color="#CCCCCC"> what they</font>

63
00:02:20,330 --> 00:02:27,430
<font color="#E5E5E5">are and what issues they</font><font color="#CCCCCC"> can pose if</font>

64
00:02:23,209 --> 00:02:27,430
they if<font color="#E5E5E5"> you know how to reverse them</font>

65
00:02:27,640 --> 00:02:30,738
<font color="#CCCCCC">when I feel like</font><font color="#E5E5E5"> IT critical</font>

66
00:02:29,720 --> 00:02:32,599
infrastructure<font color="#CCCCCC"> we're kind of</font><font color="#E5E5E5"> talking</font>

67
00:02:30,739 --> 00:02:34,989
<font color="#CCCCCC">about</font><font color="#E5E5E5"> about telecom specifically but</font>

68
00:02:32,599 --> 00:02:38,060
<font color="#CCCCCC">also within things like power plants</font>

69
00:02:34,989 --> 00:02:40,640
within within cars when factories like

70
00:02:38,060 --> 00:02:43,549
<font color="#E5E5E5">anywhere like that</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font>

71
00:02:40,640 --> 00:02:44,958
<font color="#CCCCCC">vxworks</font><font color="#E5E5E5"> is an access system used within</font>

72
00:02:43,549 --> 00:02:47,690
telecom environments to be<font color="#CCCCCC"> able to</font>

73
00:02:44,959 --> 00:02:50,569
<font color="#CCCCCC">monitor and look at things like enemies</font>

74
00:02:47,690 --> 00:02:54,440
Hsss that runs<font color="#CCCCCC"> manian</font><font color="#E5E5E5"> PowerPC</font><font color="#CCCCCC"> n are</font><font color="#E5E5E5"> the</font>

75
00:02:50,569 --> 00:02:56,810
<font color="#CCCCCC">MS soft x</font><font color="#E5E5E5"> 3000 is a highway based like</font>

76
00:02:54,440 --> 00:02:59,299
<font color="#CCCCCC">all-encompassing</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> for like open</font>

77
00:02:56,810 --> 00:03:03,230
core again mainly<font color="#E5E5E5"> runs on</font><font color="#CCCCCC"> IT processes</font>

78
00:02:59,299 --> 00:03:04,790
and the<font color="#E5E5E5"> SR 5000 is like a GG SNS GSN</font>

79
00:03:03,230 --> 00:03:06,768
like packet gateway again<font color="#E5E5E5"> users and</font>

80
00:03:04,790 --> 00:03:09,200
telecom networks<font color="#E5E5E5"> also</font><font color="#CCCCCC"> kind of runs</font><font color="#E5E5E5"> the</font>

81
00:03:06,769 --> 00:03:11,450
broad concepts<font color="#E5E5E5"> the ARM chips and some</font>

82
00:03:09,200 --> 00:03:13,100
x86 as well<font color="#E5E5E5"> so kind of understanding</font>

83
00:03:11,450 --> 00:03:15,730
these processes<font color="#CCCCCC"> it becomes quite</font>

84
00:03:13,100 --> 00:03:19,160
relevant having to defend<font color="#E5E5E5"> these systems</font>

85
00:03:15,730 --> 00:03:20,780
there are<font color="#E5E5E5"> also specific</font><font color="#CCCCCC"> devices as well</font>

86
00:03:19,160 --> 00:03:23,690
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> some of these devices</font><font color="#CCCCCC"> include</font>

87
00:03:20,780 --> 00:03:26,389
<font color="#E5E5E5">things like GSM gateway</font><font color="#CCCCCC"> SIM banks radio</font>

88
00:03:23,690 --> 00:03:28,910
over IP for example<font color="#CCCCCC"> Hawaii</font><font color="#E5E5E5"> solar panels</font>

89
00:03:26,389 --> 00:03:30,859
<font color="#E5E5E5">and even full mobile</font><font color="#CCCCCC"> cores so there's a</font>

90
00:03:28,910 --> 00:03:33,530
project<font color="#CCCCCC"> called open EPC</font><font color="#E5E5E5"> which is like</font>

91
00:03:30,859 --> 00:03:35,090
open<font color="#E5E5E5"> evolves packet core and it's a</font><font color="#CCCCCC"> 4G</font>

92
00:03:33,530 --> 00:03:37,730
core that's<font color="#E5E5E5"> built completely on IOT</font>

93
00:03:35,090 --> 00:03:40,790
architecture<font color="#E5E5E5"> it has deployments within</font>

94
00:03:37,730 --> 00:03:42,138
things like police cars where within

95
00:03:40,790 --> 00:03:43,970
actually the car itself to be running

96
00:03:42,139 --> 00:03:46,430
<font color="#E5E5E5">its own custom mobile core so then other</font>

97
00:03:43,970 --> 00:03:47,480
systems can<font color="#E5E5E5"> connect to it phones can</font>

98
00:03:46,430 --> 00:03:49,340
attach to<font color="#E5E5E5"> it and do the for</font>

99
00:03:47,480 --> 00:03:53,230
<font color="#E5E5E5">identification process and that's built</font>

100
00:03:49,340 --> 00:03:53,230
on<font color="#CCCCCC"> top of IT</font><font color="#E5E5E5"> systems</font>

101
00:03:53,940 --> 00:03:57,090
so to be able<font color="#E5E5E5"> to test</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> understand</font>

102
00:03:56,010 --> 00:03:58,940
these<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> we wanted to look</font><font color="#E5E5E5"> at</font>

103
00:03:57,090 --> 00:04:02,159
actually creating an environment and

104
00:03:58,940 --> 00:04:04,019
creates a kind of a virtualized

105
00:04:02,159 --> 00:04:06,329
structure to be<font color="#E5E5E5"> able to</font><font color="#CCCCCC"> then go through</font>

106
00:04:04,019 --> 00:04:08,159
and and look at every process that was

107
00:04:06,330 --> 00:04:10,849
<font color="#E5E5E5">available and find ways to instrument</font>

108
00:04:08,159 --> 00:04:12,959
fuzz mount and an attack the systems<font color="#CCCCCC"> so</font>

109
00:04:10,849 --> 00:04:15,030
<font color="#CCCCCC">basically the</font><font color="#E5E5E5"> idea was to</font><font color="#CCCCCC"> create them</font>

110
00:04:12,959 --> 00:04:16,858
that was<font color="#E5E5E5"> automated</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't have to do</font>

111
00:04:15,030 --> 00:04:18,449
binary binary instrumentation and

112
00:04:16,858 --> 00:04:20,940
fuzzing<font color="#E5E5E5"> could do full device</font>

113
00:04:18,449 --> 00:04:23,190
<font color="#E5E5E5">virtualization we wanted to run firmware</font>

114
00:04:20,940 --> 00:04:25,320
just from binary like just from firmware

115
00:04:23,190 --> 00:04:27,210
updates<font color="#E5E5E5"> so we didn't have I guess the</font>

116
00:04:25,320 --> 00:04:29,490
funds to<font color="#E5E5E5"> buy every single IT device</font>

117
00:04:27,210 --> 00:04:30,570
<font color="#CCCCCC">available</font><font color="#E5E5E5"> but a lot of firmware updates</font>

118
00:04:29,490 --> 00:04:32,100
<font color="#CCCCCC">give you enough</font><font color="#E5E5E5"> information to be able</font>

119
00:04:30,570 --> 00:04:34,650
<font color="#E5E5E5">to</font><font color="#CCCCCC"> actually download and run and set</font><font color="#E5E5E5"> up</font>

120
00:04:32,100 --> 00:04:36,449
<font color="#CCCCCC">the system yourself</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> learning</font><font color="#E5E5E5"> new</font>

121
00:04:34,650 --> 00:04:39,049
<font color="#CCCCCC">processes been used before it's</font><font color="#E5E5E5"> kind of</font>

122
00:04:36,449 --> 00:04:41,250
interesting to<font color="#E5E5E5"> create new</font><font color="#CCCCCC"> machines and</font>

123
00:04:39,050 --> 00:04:44,160
understanding the environments of these

124
00:04:41,250 --> 00:04:46,710
<font color="#E5E5E5">IOT systems sorry you are</font>

125
00:04:44,160 --> 00:04:49,710
<font color="#CCCCCC">shortly go</font><font color="#E5E5E5"> so if we take a look at the</font>

126
00:04:46,710 --> 00:04:51,120
anatomy<font color="#E5E5E5"> of an IOT device it consists</font><font color="#CCCCCC"> of</font>

127
00:04:49,710 --> 00:04:52,859
essentially three parts<font color="#E5E5E5"> it has a</font>

128
00:04:51,120 --> 00:04:54,600
hardware<font color="#E5E5E5"> part because it needs to have</font>

129
00:04:52,860 --> 00:04:56,190
<font color="#CCCCCC">something to run on it</font><font color="#E5E5E5"> me serve an</font>

130
00:04:54,600 --> 00:04:58,110
operating system that<font color="#CCCCCC"> runs</font><font color="#E5E5E5"> on it that</font>

131
00:04:56,190 --> 00:05:01,219
you can run your applications on<font color="#E5E5E5"> and of</font>

132
00:04:58,110 --> 00:05:03,180
course<font color="#CCCCCC"> it</font><font color="#E5E5E5"> has the applications as well</font>

133
00:05:01,220 --> 00:05:05,880
so the first<font color="#CCCCCC"> thing you need</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

134
00:05:03,180 --> 00:05:08,130
processor<font color="#CCCCCC"> and there are quite a few to</font>

135
00:05:05,880 --> 00:05:09,630
<font color="#CCCCCC">choose from but</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> main three ones is</font>

136
00:05:08,130 --> 00:05:12,389
arm which is<font color="#E5E5E5"> the massive market leader</font>

137
00:05:09,630 --> 00:05:14,820
<font color="#E5E5E5">it's pretty much everything that's built</font>

138
00:05:12,389 --> 00:05:16,740
<font color="#CCCCCC">right nowadays is are</font><font color="#E5E5E5"> more MIPS or</font>

139
00:05:14,820 --> 00:05:19,409
<font color="#E5E5E5">PowerPC but arm is definitely</font><font color="#CCCCCC"> the</font>

140
00:05:16,740 --> 00:05:21,630
absolutely biggest chair MIPS is in<font color="#CCCCCC"> the</font>

141
00:05:19,410 --> 00:05:25,020
second<font color="#CCCCCC"> place</font><font color="#E5E5E5"> and fairly common</font><font color="#CCCCCC"> but still</font>

142
00:05:21,630 --> 00:05:26,639
no<font color="#E5E5E5"> nowhere near the arm PowerPC is rare</font>

143
00:05:25,020 --> 00:05:28,400
but definitely present<font color="#E5E5E5"> you can find it</font>

144
00:05:26,639 --> 00:05:30,870
<font color="#CCCCCC">with some</font><font color="#E5E5E5"> smart TVs and</font><font color="#CCCCCC"> things like this</font>

145
00:05:28,400 --> 00:05:32,969
<font color="#CCCCCC">there are</font><font color="#E5E5E5"> exotic processors floating</font>

146
00:05:30,870 --> 00:05:36,330
around as<font color="#E5E5E5"> well like black fin but that's</font>

147
00:05:32,970 --> 00:05:38,789
more<font color="#E5E5E5"> for the rare cases and maybe</font>

148
00:05:36,330 --> 00:05:40,139
targeting systems for military things

149
00:05:38,789 --> 00:05:43,099
that's<font color="#E5E5E5"> actually interesting thing is we</font>

150
00:05:40,139 --> 00:05:46,380
found<font color="#E5E5E5"> the black fin processor within a</font>

151
00:05:43,099 --> 00:05:47,639
<font color="#CCCCCC">GSM kind of 3G gateway and it was</font>

152
00:05:46,380 --> 00:05:49,500
actually<font color="#CCCCCC"> quite a challenge because</font><font color="#E5E5E5"> the</font>

153
00:05:47,639 --> 00:05:50,970
older<font color="#CCCCCC"> firmware this gateway</font><font color="#E5E5E5"> we couldn't</font>

154
00:05:49,500 --> 00:05:52,380
put<font color="#E5E5E5"> into Ida or couldn't reverse the</font>

155
00:05:50,970 --> 00:05:54,330
properly<font color="#E5E5E5"> because Ida does understand</font>

156
00:05:52,380 --> 00:05:55,889
<font color="#E5E5E5">black fin instructions luckily were</font>

157
00:05:54,330 --> 00:05:58,199
there<font color="#E5E5E5"> the update for that GSM gateway</font>

158
00:05:55,889 --> 00:05:59,639
they went to arm which<font color="#E5E5E5"> is really nice</font>

159
00:05:58,199 --> 00:06:00,529
<font color="#CCCCCC">for us so then we got</font><font color="#E5E5E5"> the new firmware</font>

160
00:05:59,639 --> 00:06:02,509
<font color="#E5E5E5">and managed to</font>

161
00:06:00,529 --> 00:06:03,949
step through that<font color="#E5E5E5"> without a problem but</font>

162
00:06:02,509 --> 00:06:06,019
not<font color="#E5E5E5"> actually I think poses an</font>

163
00:06:03,949 --> 00:06:07,549
interesting defensive idea<font color="#E5E5E5"> we use</font>

164
00:06:06,019 --> 00:06:08,689
processes<font color="#E5E5E5"> that many other</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> don't</font>

165
00:06:07,549 --> 00:06:10,308
understand yeah

166
00:06:08,689 --> 00:06:12,379
<font color="#CCCCCC">still not</font><font color="#E5E5E5"> many people will go through</font>

167
00:06:10,309 --> 00:06:14,509
<font color="#CCCCCC">the trouble of making an either module</font>

168
00:06:12,379 --> 00:06:16,069
processor module for just one target<font color="#E5E5E5"> in</font>

169
00:06:14,509 --> 00:06:18,109
fact<font color="#E5E5E5"> Fred suggested building one I said</font>

170
00:06:16,069 --> 00:06:19,369
no let's just<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> on another system I</font>

171
00:06:18,109 --> 00:06:23,179
<font color="#E5E5E5">think you have to pick your battles here</font>

172
00:06:19,369 --> 00:06:25,459
<font color="#CCCCCC">yeah well so in</font><font color="#E5E5E5"> addition to</font><font color="#CCCCCC"> a processor</font>

173
00:06:23,179 --> 00:06:27,679
you<font color="#E5E5E5"> need some kind of storage and very</font>

174
00:06:25,459 --> 00:06:29,629
often<font color="#E5E5E5"> it's an SD card</font><font color="#CCCCCC"> embedded into the</font>

175
00:06:27,679 --> 00:06:31,369
solution<font color="#CCCCCC"> you see that also in Chinese</font>

176
00:06:29,629 --> 00:06:33,139
cheap Chinese phone often<font color="#E5E5E5"> have an SD</font>

177
00:06:31,369 --> 00:06:35,959
card rather than actually<font color="#CCCCCC"> some</font><font color="#E5E5E5"> some NAND</font>

178
00:06:33,139 --> 00:06:37,699
flash but<font color="#E5E5E5"> NAND flash or or an SD</font><font color="#CCCCCC"> card</font><font color="#E5E5E5"> to</font>

179
00:06:35,959 --> 00:06:39,649
<font color="#E5E5E5">store your operating system on and run</font>

180
00:06:37,699 --> 00:06:42,619
<font color="#E5E5E5">stuff wrong and you need I owe</font>

181
00:06:39,649 --> 00:06:43,999
capability<font color="#E5E5E5"> and I've included a</font><font color="#CCCCCC"> picture</font>

182
00:06:42,619 --> 00:06:44,589
of my development<font color="#E5E5E5"> board here this is a</font>

183
00:06:43,999 --> 00:06:46,879
Raspberry Pi

184
00:06:44,589 --> 00:06:48,829
<font color="#CCCCCC">but there are many types</font><font color="#E5E5E5"> of development</font>

185
00:06:46,879 --> 00:06:50,479
boards it specifically<font color="#CCCCCC"> for IOT</font><font color="#E5E5E5"> and they</font>

186
00:06:48,829 --> 00:06:52,369
<font color="#E5E5E5">generally</font><font color="#CCCCCC"> come with</font><font color="#E5E5E5"> some general purpose</font>

187
00:06:50,479 --> 00:06:54,318
<font color="#E5E5E5">and out pins that you can put your</font>

188
00:06:52,369 --> 00:06:56,269
sensors or diodes or whatever you have

189
00:06:54,319 --> 00:06:58,669
<font color="#CCCCCC">to measure your environment</font><font color="#E5E5E5"> or whatever</font>

190
00:06:56,269 --> 00:07:02,119
<font color="#CCCCCC">you want to</font><font color="#E5E5E5"> do they might also have USB</font>

191
00:06:58,669 --> 00:07:04,758
ports<font color="#CCCCCC"> Ethernet ports HDMI</font><font color="#E5E5E5"> for visuals or</font>

192
00:07:02,119 --> 00:07:07,249
just video<font color="#CCCCCC"> outs in terms of things like</font>

193
00:07:04,759 --> 00:07:09,169
<font color="#E5E5E5">orange pie etc and they also have</font>

194
00:07:07,249 --> 00:07:12,409
connectivity<font color="#E5E5E5"> in some ways on the radio</font>

195
00:07:09,169 --> 00:07:15,019
side for example<font color="#CCCCCC"> GSM LTE or</font><font color="#E5E5E5"> some IT</font>

196
00:07:12,409 --> 00:07:17,899
devices have very narrow band radio

197
00:07:15,019 --> 00:07:20,659
interfaces<font color="#E5E5E5"> that are not standard mobile</font>

198
00:07:17,899 --> 00:07:22,309
interfaces<font color="#E5E5E5"> they're more like very narrow</font>

199
00:07:20,659 --> 00:07:23,479
band<font color="#E5E5E5"> very low-power and these low-power</font>

200
00:07:22,309 --> 00:07:24,949
devices are thrown<font color="#E5E5E5"> somewhere in the</font>

201
00:07:23,479 --> 00:07:28,818
jungle<font color="#CCCCCC"> and just</font><font color="#E5E5E5"> sits there</font><font color="#CCCCCC"> on battery</font>

202
00:07:24,949 --> 00:07:32,449
for five years when it comes to the

203
00:07:28,819 --> 00:07:34,339
<font color="#E5E5E5">operating system there is often often</font>

204
00:07:32,449 --> 00:07:35,749
you find<font color="#E5E5E5"> cookie cutter type Linux</font>

205
00:07:34,339 --> 00:07:37,879
installation<font color="#E5E5E5"> in the bottom of these</font>

206
00:07:35,749 --> 00:07:39,559
things and those<font color="#CCCCCC"> are built</font><font color="#E5E5E5"> using some</font>

207
00:07:37,879 --> 00:07:41,029
<font color="#E5E5E5">very popular frameworks one is called</font>

208
00:07:39,559 --> 00:07:45,349
build<font color="#CCCCCC"> root for example and we also have</font>

209
00:07:41,029 --> 00:07:48,049
<font color="#CCCCCC">Yocto open embedded these frameworks</font>

210
00:07:45,349 --> 00:07:50,119
<font color="#E5E5E5">allows you to build a very streamlined</font>

211
00:07:48,049 --> 00:07:52,369
<font color="#CCCCCC">and small installation of</font><font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> would</font>

212
00:07:50,119 --> 00:07:54,199
mainly<font color="#E5E5E5"> try a</font><font color="#CCCCCC"> tried and tested components</font>

213
00:07:52,369 --> 00:07:56,149
<font color="#E5E5E5">so it's a very practical way but it also</font>

214
00:07:54,199 --> 00:07:57,559
detaches<font color="#CCCCCC"> the developer a little bit from</font>

215
00:07:56,149 --> 00:07:59,929
the actual process<font color="#E5E5E5"> of building something</font>

216
00:07:57,559 --> 00:08:02,389
and that also spills over to security

217
00:07:59,929 --> 00:08:05,029
thinking of course<font color="#CCCCCC"> sometimes we see</font>

218
00:08:02,389 --> 00:08:06,349
proprietary<font color="#CCCCCC"> oasis or ixora courses in</font>

219
00:08:05,029 --> 00:08:07,159
these<font color="#E5E5E5"> boxes but that's something</font>

220
00:08:06,349 --> 00:08:09,819
<font color="#CCCCCC">completely different</font>

221
00:08:07,159 --> 00:08:09,819
<font color="#E5E5E5">from this talk</font>

222
00:08:09,840 --> 00:08:14,888
so if you take<font color="#E5E5E5"> a look at build route as</font>

223
00:08:12,430 --> 00:08:17,050
an<font color="#CCCCCC"> example this is one of</font><font color="#E5E5E5"> the most</font>

224
00:08:14,889 --> 00:08:18,850
popular frameworks it allows you to

225
00:08:17,050 --> 00:08:21,220
<font color="#E5E5E5">select a multitude of options you have</font>

226
00:08:18,850 --> 00:08:23,560
the the tool chain for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> it's a</font>

227
00:08:21,220 --> 00:08:26,080
very<font color="#E5E5E5"> important part which is</font><font color="#CCCCCC"> select you</font>

228
00:08:23,560 --> 00:08:30,460
<font color="#E5E5E5">select how which C libraries to use etc</font>

229
00:08:26,080 --> 00:08:33,900
<font color="#CCCCCC">and you also get</font><font color="#E5E5E5"> to choose</font><font color="#CCCCCC"> kernel</font>

230
00:08:30,460 --> 00:08:35,978
version of course<font color="#E5E5E5"> target packages and</font>

231
00:08:33,900 --> 00:08:38,020
the first thing you choose is of course

232
00:08:35,979 --> 00:08:39,880
which chip<font color="#CCCCCC"> your building is for in</font><font color="#E5E5E5"> this</font>

233
00:08:38,020 --> 00:08:42,760
case<font color="#CCCCCC"> little engine arm which is</font>

234
00:08:39,880 --> 00:08:45,910
<font color="#E5E5E5">essentially the only ARM processor will</font>

235
00:08:42,760 --> 00:08:48,640
be<font color="#CCCCCC"> seeing in in</font><font color="#E5E5E5"> deployments today</font>

236
00:08:45,910 --> 00:08:51,029
because no one uses<font color="#E5E5E5"> big endian which is</font>

237
00:08:48,640 --> 00:08:55,630
get to<font color="#E5E5E5"> select between a lot of different</font>

238
00:08:51,029 --> 00:08:58,450
options<font color="#E5E5E5"> here and then you get to choose</font>

239
00:08:55,630 --> 00:09:00,910
<font color="#CCCCCC">which</font><font color="#E5E5E5"> C runtime you</font><font color="#CCCCCC"> want to build</font><font color="#E5E5E5"> for</font>

240
00:08:58,450 --> 00:09:03,700
and you have for example<font color="#CCCCCC"> you</font><font color="#E5E5E5"> see Lib C</font>

241
00:09:00,910 --> 00:09:05,469
which is very<font color="#CCCCCC"> often seen in iit-jee</font><font color="#E5E5E5"> Lib</font>

242
00:09:03,700 --> 00:09:07,779
<font color="#E5E5E5">C is a bit more</font><font color="#CCCCCC"> relative it's there</font><font color="#E5E5E5"> and</font>

243
00:09:05,470 --> 00:09:09,100
<font color="#CCCCCC">there muscle as well</font><font color="#E5E5E5"> which is supposed</font>

244
00:09:07,779 --> 00:09:12,850
to<font color="#E5E5E5"> be a little bit more secure than or</font>

245
00:09:09,100 --> 00:09:14,740
lightweight<font color="#CCCCCC"> and with this</font><font color="#E5E5E5"> C library you</font>

246
00:09:12,850 --> 00:09:17,740
also get a tool chain and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> to</font>

247
00:09:14,740 --> 00:09:19,390
Chinese of course built on the<font color="#CCCCCC"> host</font>

248
00:09:17,740 --> 00:09:24,510
machine<font color="#E5E5E5"> that you're compiling on so</font>

249
00:09:19,390 --> 00:09:24,510
you're building the<font color="#CCCCCC"> whole that's a</font>

250
00:09:25,130 --> 00:09:32,130
<font color="#CCCCCC">the whole deployment</font><font color="#E5E5E5"> on a x86 or x64</font>

251
00:09:29,490 --> 00:09:34,380
machine<font color="#E5E5E5"> but then and you can also then</font>

252
00:09:32,130 --> 00:09:35,850
build binaries on that<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> this</font>

253
00:09:34,380 --> 00:09:37,170
specific<font color="#CCCCCC"> deployment even if it's for</font>

254
00:09:35,850 --> 00:09:42,300
<font color="#CCCCCC">another ship so that's a cross compiler</font>

255
00:09:37,170 --> 00:09:44,400
to chain yes<font color="#CCCCCC"> target packages these</font>

256
00:09:42,300 --> 00:09:46,229
frameworks<font color="#E5E5E5"> also come</font><font color="#CCCCCC"> with a very large</font>

257
00:09:44,400 --> 00:09:49,410
<font color="#E5E5E5">set of applications that you can that</font>

258
00:09:46,230 --> 00:09:51,780
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> use so there are different audio</font>

259
00:09:49,410 --> 00:09:54,510
<font color="#E5E5E5">and video applications</font><font color="#CCCCCC"> for example file</font>

260
00:09:51,780 --> 00:09:55,650
system utilities you can<font color="#E5E5E5"> have sshfs for</font>

261
00:09:54,510 --> 00:09:57,960
example you can have<font color="#E5E5E5"> different</font>

262
00:09:55,650 --> 00:09:59,430
networking applications<font color="#E5E5E5"> interpreters and</font>

263
00:09:57,960 --> 00:10:01,140
even<font color="#E5E5E5"> may application some web servers</font>

264
00:09:59,430 --> 00:10:03,180
<font color="#CCCCCC">and things like this</font><font color="#E5E5E5"> so you get to</font>

265
00:10:01,140 --> 00:10:05,520
<font color="#E5E5E5">choose here from from a wide</font><font color="#CCCCCC"> selection</font>

266
00:10:03,180 --> 00:10:08,250
of<font color="#E5E5E5"> components so much of</font><font color="#CCCCCC"> this is so very</font>

267
00:10:05,520 --> 00:10:10,050
<font color="#E5E5E5">automated that it becomes well</font>

268
00:10:08,250 --> 00:10:12,690
essentially point-and-click<font color="#E5E5E5"> to build</font>

269
00:10:10,050 --> 00:10:16,250
your<font color="#E5E5E5"> own firmware and</font><font color="#CCCCCC"> will do it for</font>

270
00:10:12,690 --> 00:10:18,630
<font color="#E5E5E5">example it comes with a lot of the pre</font>

271
00:10:16,250 --> 00:10:19,680
pre-configured development boards<font color="#E5E5E5"> so you</font>

272
00:10:18,630 --> 00:10:21,360
can just<font color="#E5E5E5"> select the board that you've</font>

273
00:10:19,680 --> 00:10:23,489
<font color="#E5E5E5">bought to develop or and you have a</font>

274
00:10:21,360 --> 00:10:25,520
baseline configuration and then you add

275
00:10:23,490 --> 00:10:29,640
your applications or whatever you want

276
00:10:25,520 --> 00:10:33,030
so the result is generally a limited

277
00:10:29,640 --> 00:10:35,069
size the<font color="#E5E5E5"> Linux deployment very highly</font>

278
00:10:33,030 --> 00:10:36,959
customized so it's<font color="#E5E5E5"> supposed to be</font>

279
00:10:35,070 --> 00:10:39,360
limited<font color="#E5E5E5"> in size which it is very easy</font>

280
00:10:36,960 --> 00:10:40,920
<font color="#E5E5E5">just don't select anything</font><font color="#CCCCCC"> limited in</font>

281
00:10:39,360 --> 00:10:43,260
functionality so you<font color="#E5E5E5"> don't expose more</font>

282
00:10:40,920 --> 00:10:45,569
than you actually<font color="#CCCCCC"> need to and</font><font color="#E5E5E5"> hopefully</font>

283
00:10:43,260 --> 00:10:48,150
also limit<font color="#CCCCCC"> invulnerability but that's</font>

284
00:10:45,570 --> 00:10:49,980
not always<font color="#CCCCCC"> the case and then I think</font><font color="#E5E5E5"> we</font>

285
00:10:48,150 --> 00:10:52,829
get<font color="#E5E5E5"> into applications which</font><font color="#CCCCCC"> is where we</font>

286
00:10:49,980 --> 00:10:54,480
add the<font color="#E5E5E5"> vulnerabilities generally</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> so</font>

287
00:10:52,830 --> 00:10:56,130
of course<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of these systems run a</font>

288
00:10:54,480 --> 00:10:57,860
mishmash of applications<font color="#E5E5E5"> third fire</font>

289
00:10:56,130 --> 00:11:00,000
libraries<font color="#E5E5E5"> a lot of stuff is out of date</font>

290
00:10:57,860 --> 00:11:01,950
<font color="#CCCCCC">they have a</font><font color="#E5E5E5"> lot of the things</font><font color="#CCCCCC"> all the</font>

291
00:11:00,000 --> 00:11:02,970
times customized security functions and

292
00:11:01,950 --> 00:11:05,160
we'll cover what<font color="#E5E5E5"> some of those are</font>

293
00:11:02,970 --> 00:11:06,300
custom passes is of course another<font color="#E5E5E5"> big</font>

294
00:11:05,160 --> 00:11:08,160
issue<font color="#E5E5E5"> that would come across quite</font>

295
00:11:06,300 --> 00:11:11,250
frequently within IOT devices because of

296
00:11:08,160 --> 00:11:13,350
like custom api's and they<font color="#E5E5E5"> used to be</font>

297
00:11:11,250 --> 00:11:15,270
able<font color="#E5E5E5"> to administer them</font><font color="#CCCCCC"> databases</font>

298
00:11:13,350 --> 00:11:20,010
normally sequel<font color="#CCCCCC"> Lite and things like</font>

299
00:11:15,270 --> 00:11:21,600
proprietary applications as well<font color="#CCCCCC"> so this</font>

300
00:11:20,010 --> 00:11:23,819
<font color="#CCCCCC">is kind of a trip back to</font><font color="#E5E5E5"> the 90s and</font>

301
00:11:21,600 --> 00:11:25,740
this is when<font color="#E5E5E5"> we first discovered some of</font>

302
00:11:23,820 --> 00:11:27,330
<font color="#E5E5E5">the proprietary applications are used</font>

303
00:11:25,740 --> 00:11:30,110
<font color="#E5E5E5">within IOT devices</font><font color="#CCCCCC"> even with current</font>

304
00:11:27,330 --> 00:11:31,830
like 2018 software and hardware

305
00:11:30,110 --> 00:11:33,630
<font color="#CCCCCC">basically used to be like a cat and</font>

306
00:11:31,830 --> 00:11:35,040
<font color="#CCCCCC">mouse game they had each</font><font color="#E5E5E5"> other's share</font>

307
00:11:33,630 --> 00:11:37,230
wares and crackers and<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like this</font>

308
00:11:35,040 --> 00:11:38,790
and one<font color="#E5E5E5"> of the old applications that</font>

309
00:11:37,230 --> 00:11:42,990
they used to use<font color="#E5E5E5"> was something called</font>

310
00:11:38,790 --> 00:11:45,089
<font color="#E5E5E5">Medusa</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> I'll just go</font><font color="#E5E5E5"> through</font>

311
00:11:42,990 --> 00:11:46,710
this slide<font color="#E5E5E5"> hey what makes this very</font>

312
00:11:45,090 --> 00:11:48,390
reminiscent of the<font color="#E5E5E5"> nineties is that the</font>

313
00:11:46,710 --> 00:11:50,490
people who are protecting<font color="#E5E5E5"> these devices</font>

314
00:11:48,390 --> 00:11:52,650
and trying to keep<font color="#E5E5E5"> people out sometimes</font>

315
00:11:50,490 --> 00:11:54,410
resorting to very extreme measures<font color="#E5E5E5"> so in</font>

316
00:11:52,650 --> 00:11:58,079
the 90s we saw things<font color="#E5E5E5"> like</font>

317
00:11:54,410 --> 00:11:59,880
<font color="#E5E5E5">protectors of copy protections hijacking</font>

318
00:11:58,080 --> 00:12:02,280
<font color="#E5E5E5">interrupts for example using device</font>

319
00:11:59,880 --> 00:12:04,620
drivers having<font color="#E5E5E5"> or having to have admin</font>

320
00:12:02,280 --> 00:12:06,480
privilege to even run<font color="#CCCCCC"> they were using</font>

321
00:12:04,620 --> 00:12:08,100
<font color="#E5E5E5">unauthorized rights to the rights to the</font>

322
00:12:06,480 --> 00:12:10,890
hard<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> put the sectors</font><font color="#E5E5E5"> that weren't</font>

323
00:12:08,100 --> 00:12:13,650
removed or blanked out<font color="#E5E5E5"> during formatting</font>

324
00:12:10,890 --> 00:12:15,390
so they could actually<font color="#E5E5E5"> keep trial time</font>

325
00:12:13,650 --> 00:12:16,800
expiration dates enforced even<font color="#CCCCCC"> if you</font>

326
00:12:15,390 --> 00:12:19,199
formatted<font color="#E5E5E5"> your hard drive</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> was</font>

327
00:12:16,800 --> 00:12:21,060
before virtual machines so<font color="#CCCCCC"> it was</font>

328
00:12:19,200 --> 00:12:23,670
<font color="#E5E5E5">basically a</font><font color="#CCCCCC"> wild-west</font><font color="#E5E5E5"> of copy protection</font>

329
00:12:21,060 --> 00:12:25,979
and the protection<font color="#E5E5E5"> on the other side you</font>

330
00:12:23,670 --> 00:12:28,920
had people cracking these protections

331
00:12:25,980 --> 00:12:31,500
using soft<font color="#CCCCCC"> eyes an idea which is ID is</font><font color="#E5E5E5"> a</font>

332
00:12:28,920 --> 00:12:33,000
very potent of course<font color="#E5E5E5"> soft</font><font color="#CCCCCC"> ID was an old</font>

333
00:12:31,500 --> 00:12:37,290
kernel debugger was which was extremely

334
00:12:33,000 --> 00:12:39,360
<font color="#E5E5E5">powerful that for its time</font><font color="#CCCCCC"> so we see a</font>

335
00:12:37,290 --> 00:12:41,400
lot of this spilling over in today's IOT

336
00:12:39,360 --> 00:12:44,280
world as well<font color="#E5E5E5"> good things like default</font>

337
00:12:41,400 --> 00:12:46,050
credentials but as<font color="#CCCCCC"> has a lot mentioned</font>

338
00:12:44,280 --> 00:12:48,720
timid user protection is actually a

339
00:12:46,050 --> 00:12:51,839
kernel patch that we found in an IOT

340
00:12:48,720 --> 00:12:53,550
device<font color="#CCCCCC"> it modifies de Grenelle</font><font color="#E5E5E5"> it has</font>

341
00:12:51,840 --> 00:12:56,040
its<font color="#E5E5E5"> own</font><font color="#CCCCCC"> C library which is very</font><font color="#E5E5E5"> stripped</font>

342
00:12:53,550 --> 00:12:58,050
<font color="#E5E5E5">down and has limited functionality it</font>

343
00:12:56,040 --> 00:12:59,730
prohibits<font color="#E5E5E5"> the route for from even using</font>

344
00:12:58,050 --> 00:13:02,120
<font color="#CCCCCC">sis calls it runs everything</font><font color="#E5E5E5"> in a</font>

345
00:12:59,730 --> 00:13:05,160
shielded process so essentially it's

346
00:13:02,120 --> 00:13:06,360
manipulated<font color="#E5E5E5"> OS functionality which is</font>

347
00:13:05,160 --> 00:13:09,480
supposed to<font color="#E5E5E5"> lock down the system very</font>

348
00:13:06,360 --> 00:13:11,130
very<font color="#E5E5E5"> strongly and everybody runs this</font>

349
00:13:09,480 --> 00:13:12,600
basically<font color="#E5E5E5"> has this like Medusa header on</font>

350
00:13:11,130 --> 00:13:14,010
top of it and<font color="#E5E5E5"> then it has to do the</font>

351
00:13:12,600 --> 00:13:15,150
kernel reason<font color="#E5E5E5"> Medusa head and make sure</font>

352
00:13:14,010 --> 00:13:17,280
everything<font color="#E5E5E5"> is great and execute</font>

353
00:13:15,150 --> 00:13:18,569
correctly<font color="#E5E5E5"> within</font><font color="#CCCCCC"> this particular IOT</font>

354
00:13:17,280 --> 00:13:20,790
device they had<font color="#E5E5E5"> this header with an</font>

355
00:13:18,570 --> 00:13:22,440
every binary<font color="#E5E5E5"> but there was no CRC check</font>

356
00:13:20,790 --> 00:13:23,880
<font color="#E5E5E5">for the binary itself</font><font color="#CCCCCC"> so you could</font>

357
00:13:22,440 --> 00:13:25,260
actually just<font color="#CCCCCC"> copy and paste this header</font>

358
00:13:23,880 --> 00:13:27,230
on top of like any other binary who

359
00:13:25,260 --> 00:13:29,150
wants<font color="#E5E5E5"> it or just</font>

360
00:13:27,230 --> 00:13:32,480
<font color="#E5E5E5">that's like like modification and there</font>

361
00:13:29,150 --> 00:13:34,310
is a the binaries were not seeing

362
00:13:32,480 --> 00:13:36,380
<font color="#CCCCCC">himself on runtime</font><font color="#E5E5E5"> and neither was the</font>

363
00:13:34,310 --> 00:13:38,390
<font color="#CCCCCC">Canal patch</font><font color="#E5E5E5"> so when they were loaded</font>

364
00:13:36,380 --> 00:13:40,280
into memory<font color="#E5E5E5"> they didn't care about the</font>

365
00:13:38,390 --> 00:13:41,569
<font color="#E5E5E5">FT Canton content of the code section or</font>

366
00:13:40,280 --> 00:13:42,829
<font color="#E5E5E5">relock so you can actually patch out all</font>

367
00:13:41,570 --> 00:13:45,530
the<font color="#E5E5E5"> relax and just write your own code</font>

368
00:13:42,830 --> 00:13:47,660
<font color="#CCCCCC">as</font><font color="#E5E5E5"> Intuit and</font><font color="#CCCCCC"> patch in any call to any</font>

369
00:13:45,530 --> 00:13:50,000
<font color="#CCCCCC">sea library you want</font><font color="#E5E5E5"> on there so it was</font>

370
00:13:47,660 --> 00:13:52,010
yeah<font color="#E5E5E5"> we</font><font color="#CCCCCC"> had a few</font><font color="#E5E5E5"> examples where we</font>

371
00:13:50,000 --> 00:13:55,280
patched<font color="#E5E5E5"> few binaries beyond recognition</font>

372
00:13:52,010 --> 00:13:57,080
<font color="#E5E5E5">to make do other stuff so another thing</font>

373
00:13:55,280 --> 00:13:59,540
<font color="#E5E5E5">that's kind</font><font color="#CCCCCC"> of reminiscent</font><font color="#E5E5E5"> of the 90s is</font>

374
00:13:57,080 --> 00:14:01,490
like<font color="#E5E5E5"> really amazing</font><font color="#CCCCCC"> backdoors that</font><font color="#E5E5E5"> have</font>

375
00:13:59,540 --> 00:14:04,900
built in by by developers<font color="#CCCCCC"> and this was</font>

376
00:14:01,490 --> 00:14:07,190
actually a modded version of<font color="#E5E5E5"> loggin</font>

377
00:14:04,900 --> 00:14:09,199
<font color="#CCCCCC">binary especially for the Flex</font><font color="#E5E5E5"> system</font>

378
00:14:07,190 --> 00:14:10,730
<font color="#E5E5E5">basically over telnet it had a</font>

379
00:14:09,200 --> 00:14:12,200
particular password it would look<font color="#E5E5E5"> cool</font>

380
00:14:10,730 --> 00:14:14,960
<font color="#E5E5E5">in</font><font color="#CCCCCC"> this case there</font><font color="#E5E5E5"> was the</font><font color="#CCCCCC"> bail admin</font>

381
00:14:12,200 --> 00:14:17,420
and password<font color="#E5E5E5"> actually would then run a</font>

382
00:14:14,960 --> 00:14:18,880
statically generated<font color="#E5E5E5"> keygen the keygen</font>

383
00:14:17,420 --> 00:14:21,500
was based of like a challenge<font color="#CCCCCC"> response</font>

384
00:14:18,880 --> 00:14:23,780
<font color="#CCCCCC">the challenge</font><font color="#E5E5E5"> was completely</font><font color="#CCCCCC"> isolated</font>

385
00:14:21,500 --> 00:14:25,820
<font color="#E5E5E5">not based on any</font><font color="#CCCCCC"> kind of previous user</font>

386
00:14:23,780 --> 00:14:27,949
configuration<font color="#E5E5E5"> so once you stepped</font>

387
00:14:25,820 --> 00:14:29,780
through the binary and<font color="#E5E5E5"> understood the</font>

388
00:14:27,950 --> 00:14:31,760
actual steps that took<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

389
00:14:29,780 --> 00:14:34,160
then<font color="#E5E5E5"> recreate it you could create your</font>

390
00:14:31,760 --> 00:14:36,380
<font color="#E5E5E5">own key generated by simply patching the</font>

391
00:14:34,160 --> 00:14:37,819
the<font color="#E5E5E5"> login</font><font color="#CCCCCC"> binary</font><font color="#E5E5E5"> and getting to output</font>

392
00:14:36,380 --> 00:14:40,310
the correct key with<font color="#CCCCCC"> it with the input</font>

393
00:14:37,820 --> 00:14:42,380
and<font color="#CCCCCC"> ijv</font><font color="#E5E5E5"> full</font><font color="#CCCCCC"> route</font><font color="#E5E5E5"> access beyond the box</font>

394
00:14:40,310 --> 00:14:44,689
and eventually we actually lifted<font color="#CCCCCC"> all</font>

395
00:14:42,380 --> 00:14:46,430
the generation algorithms into<font color="#E5E5E5"> a new</font>

396
00:14:44,690 --> 00:14:48,400
binary<font color="#E5E5E5"> and built the</font><font color="#CCCCCC"> keygen</font><font color="#E5E5E5"> for all</font>

397
00:14:46,430 --> 00:14:50,359
versions that now runs<font color="#E5E5E5"> in an emulation</font>

398
00:14:48,400 --> 00:14:51,800
<font color="#CCCCCC">when we first did</font><font color="#E5E5E5"> this who actually were</font>

399
00:14:50,360 --> 00:14:53,240
interested to<font color="#E5E5E5"> find like well could we</font>

400
00:14:51,800 --> 00:14:54,439
<font color="#E5E5E5">find a</font><font color="#CCCCCC"> bunch of</font><font color="#E5E5E5"> these devices internet</font>

401
00:14:53,240 --> 00:14:56,000
and could we fingerprint them because

402
00:14:54,440 --> 00:14:58,010
now all<font color="#CCCCCC"> these devices have have root</font>

403
00:14:56,000 --> 00:15:00,080
access over telnet remotely and their

404
00:14:58,010 --> 00:15:03,189
<font color="#CCCCCC">users actually well administrators these</font>

405
00:15:00,080 --> 00:15:06,680
devices don't<font color="#E5E5E5"> know that this is the case</font>

406
00:15:03,190 --> 00:15:09,110
<font color="#E5E5E5">so we looked at basically</font><font color="#CCCCCC"> while trying</font>

407
00:15:06,680 --> 00:15:12,079
<font color="#E5E5E5">to find different different versions of</font>

408
00:15:09,110 --> 00:15:13,610
this device<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> depending on like</font>

409
00:15:12,080 --> 00:15:16,040
<font color="#E5E5E5">you build up she's like applications</font>

410
00:15:13,610 --> 00:15:17,420
custom adjustments<font color="#CCCCCC"> you could always be</font>

411
00:15:16,040 --> 00:15:19,790
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to track down kind of what was</font>

412
00:15:17,420 --> 00:15:22,490
<font color="#CCCCCC">going on it was of</font><font color="#E5E5E5"> course quite possible</font>

413
00:15:19,790 --> 00:15:25,040
<font color="#E5E5E5">to fingerprint these systems</font><font color="#CCCCCC"> so we built</font>

414
00:15:22,490 --> 00:15:26,330
out a kind of an IOT map to try to

415
00:15:25,040 --> 00:15:27,829
understand where some<font color="#CCCCCC"> of these systems</font>

416
00:15:26,330 --> 00:15:29,690
were and this<font color="#E5E5E5"> is actually for a later</font>

417
00:15:27,830 --> 00:15:34,450
talk but<font color="#E5E5E5"> this gave us an idea and IP</font>

418
00:15:29,690 --> 00:15:34,450
addresses<font color="#E5E5E5"> of where</font><font color="#CCCCCC"> these things existed</font>

419
00:15:35,130 --> 00:15:38,519
so the<font color="#E5E5E5"> issues of the IOT devices and I</font>

420
00:15:37,410 --> 00:15:40,560
might have<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of what you do you're</font>

421
00:15:38,519 --> 00:15:42,149
always going to<font color="#CCCCCC"> be running</font><font color="#E5E5E5"> like IOT web</font>

422
00:15:40,560 --> 00:15:43,649
servers<font color="#CCCCCC"> most Kelly mentioned that</font>

423
00:15:42,149 --> 00:15:45,060
<font color="#E5E5E5">previous talk it's possible to kind of</font>

424
00:15:43,649 --> 00:15:46,769
hide this<font color="#E5E5E5"> and</font><font color="#CCCCCC"> put it away</font>

425
00:15:45,060 --> 00:15:48,300
but<font color="#CCCCCC"> very</font><font color="#E5E5E5"> easy thing to do is look for</font>

426
00:15:46,769 --> 00:15:50,250
<font color="#E5E5E5">things</font><font color="#CCCCCC"> like the</font><font color="#E5E5E5"> boa</font><font color="#CCCCCC"> the go ahead web</font>

427
00:15:48,300 --> 00:15:51,930
<font color="#E5E5E5">server lighttpd and that gives you a</font>

428
00:15:50,250 --> 00:15:53,700
<font color="#E5E5E5">very good indication</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this is an</font><font color="#CCCCCC"> IT</font>

429
00:15:51,930 --> 00:15:56,420
<font color="#E5E5E5">devices and embedded device that's</font>

430
00:15:53,700 --> 00:15:58,320
running<font color="#E5E5E5"> a particular version or system</font>

431
00:15:56,420 --> 00:15:59,760
another thing we found<font color="#CCCCCC"> was</font><font color="#E5E5E5"> very useful</font>

432
00:15:58,320 --> 00:16:01,649
<font color="#E5E5E5">to fingerprint was things like content</font>

433
00:15:59,760 --> 00:16:03,569
<font color="#CCCCCC">lengths</font><font color="#E5E5E5"> so particular devices had very</font>

434
00:16:01,649 --> 00:16:05,519
specific content<font color="#CCCCCC"> lengths headers simply</font>

435
00:16:03,570 --> 00:16:06,779
by looking<font color="#E5E5E5"> at those regardless if who</font>

436
00:16:05,519 --> 00:16:08,850
was behind<font color="#E5E5E5"> the event occasion not you</font>

437
00:16:06,779 --> 00:16:10,380
<font color="#E5E5E5">could</font><font color="#CCCCCC"> also very accurately identify what</font>

438
00:16:08,850 --> 00:16:11,370
the device actually<font color="#CCCCCC"> was especially</font><font color="#E5E5E5"> if</font>

439
00:16:10,380 --> 00:16:13,769
<font color="#E5E5E5">you combined it with the web server</font>

440
00:16:11,370 --> 00:16:15,540
fingerprints<font color="#E5E5E5"> of course FTP and telnet</font>

441
00:16:13,769 --> 00:16:17,550
banner<font color="#E5E5E5"> grabbing is quite common it's an</font>

442
00:16:15,540 --> 00:16:19,230
easy way to track down<font color="#CCCCCC"> these systems as</font>

443
00:16:17,550 --> 00:16:20,670
<font color="#CCCCCC">cell certificates</font><font color="#E5E5E5"> very few of them had</font>

444
00:16:19,230 --> 00:16:22,440
it but if they did<font color="#E5E5E5"> you could also be</font>

445
00:16:20,670 --> 00:16:24,569
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to understand</font><font color="#CCCCCC"> exactly which device</font>

446
00:16:22,440 --> 00:16:26,820
was running and in each situation<font color="#CCCCCC"> and</font>

447
00:16:24,570 --> 00:16:28,890
what we noticed was<font color="#CCCCCC"> a certain vendors</font>

448
00:16:26,820 --> 00:16:30,930
<font color="#E5E5E5">actually took precautions against this</font>

449
00:16:28,890 --> 00:16:32,459
<font color="#CCCCCC">and one</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> vendors was a company</font>

450
00:16:30,930 --> 00:16:34,140
called go<font color="#E5E5E5"> IT and they make a lot of</font>

451
00:16:32,459 --> 00:16:35,910
<font color="#E5E5E5">these critical infrastructure devices</font>

452
00:16:34,140 --> 00:16:38,459
<font color="#E5E5E5">it's a little a lot of good things they</font>

453
00:16:35,910 --> 00:16:40,709
basically had no obvious<font color="#E5E5E5"> IT web service</font>

454
00:16:38,459 --> 00:16:42,540
strings<font color="#CCCCCC"> had unique content lengths like</font>

455
00:16:40,709 --> 00:16:44,219
no unique content<font color="#E5E5E5"> length strings and had</font>

456
00:16:42,540 --> 00:16:46,469
no initial web pages<font color="#CCCCCC"> so there was no</font>

457
00:16:44,220 --> 00:16:48,570
ability<font color="#CCCCCC"> to define</font><font color="#E5E5E5"> anything</font><font color="#CCCCCC"> to printing</font>

458
00:16:46,470 --> 00:16:50,040
<font color="#E5E5E5">that anything came back no kind of</font>

459
00:16:48,570 --> 00:16:51,480
<font color="#CCCCCC">evening poster and by default and no</font>

460
00:16:50,040 --> 00:16:53,430
telnet banners and the<font color="#E5E5E5"> new firmware</font>

461
00:16:51,480 --> 00:16:55,140
versions<font color="#E5E5E5"> that were unique so these were</font>

462
00:16:53,430 --> 00:16:57,390
the<font color="#E5E5E5"> good thing is</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> company did</font>

463
00:16:55,140 --> 00:16:58,829
<font color="#CCCCCC">the bad things</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this company did is</font>

464
00:16:57,390 --> 00:17:01,410
that<font color="#E5E5E5"> they combined all those things</font>

465
00:16:58,829 --> 00:17:02,790
together<font color="#CCCCCC"> so because they went</font><font color="#E5E5E5"> through</font>

466
00:17:01,410 --> 00:17:04,918
all<font color="#E5E5E5"> this effort to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to kind of</font>

467
00:17:02,790 --> 00:17:08,339
remove any information around their

468
00:17:04,919 --> 00:17:10,350
systems<font color="#E5E5E5"> they</font><font color="#CCCCCC"> actually had</font><font color="#E5E5E5"> a very low</font>

469
00:17:08,339 --> 00:17:12,480
finger printable system that was stood

470
00:17:10,349 --> 00:17:15,119
out very<font color="#CCCCCC"> very clearly when even just</font>

471
00:17:12,480 --> 00:17:17,339
looking<font color="#E5E5E5"> over</font><font color="#CCCCCC"> Showdown scans</font><font color="#E5E5E5"> so simply by</font>

472
00:17:15,119 --> 00:17:20,069
looking<font color="#E5E5E5"> for the words please</font><font color="#CCCCCC"> log in and</font>

473
00:17:17,339 --> 00:17:21,208
<font color="#E5E5E5">401 you could actually differentiate so</font>

474
00:17:20,069 --> 00:17:22,319
even though<font color="#CCCCCC"> they get</font><font color="#E5E5E5"> a lot of stuff like</font>

475
00:17:21,209 --> 00:17:24,089
this which wasn't the device<font color="#CCCCCC"> you're</font>

476
00:17:22,319 --> 00:17:27,688
looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you could very clearly see</font>

477
00:17:24,089 --> 00:17:30,120
<font color="#CCCCCC">okay no server name no content length no</font>

478
00:17:27,689 --> 00:17:32,280
e<font color="#E5E5E5"> tags great and this is 100%</font>

479
00:17:30,120 --> 00:17:34,770
identifiable as that<font color="#E5E5E5"> particular device</font>

480
00:17:32,280 --> 00:17:37,440
<font color="#CCCCCC">so if you do</font><font color="#E5E5E5"> like take precautions to</font>

481
00:17:34,770 --> 00:17:38,879
<font color="#E5E5E5">remove things make sure</font><font color="#CCCCCC"> you're in side</font>

482
00:17:37,440 --> 00:17:40,800
the bell curve<font color="#E5E5E5"> you're not kind of</font><font color="#CCCCCC"> being</font>

483
00:17:38,880 --> 00:17:42,780
the person<font color="#CCCCCC"> that's like I'm never gonna</font>

484
00:17:40,800 --> 00:17:44,129
be fingerprinted well then<font color="#E5E5E5"> the lack of</font>

485
00:17:42,780 --> 00:17:45,000
your<font color="#E5E5E5"> information is gonna be what's</font>

486
00:17:44,130 --> 00:17:49,230
gonna be able

487
00:17:45,000 --> 00:17:50,850
for us because<font color="#E5E5E5"> the fingerprint you</font><font color="#CCCCCC"> of</font>

488
00:17:49,230 --> 00:17:52,890
course<font color="#E5E5E5"> there are custom protocols as</font>

489
00:17:50,850 --> 00:17:54,360
well<font color="#E5E5E5"> and all</font><font color="#CCCCCC"> of our</font><font color="#E5E5E5"> ot devices run very</font>

490
00:17:52,890 --> 00:17:56,510
unique and custom protocols normally

491
00:17:54,360 --> 00:17:58,620
<font color="#E5E5E5">over UDP</font><font color="#CCCCCC"> which always stags me</font>

492
00:17:56,510 --> 00:18:00,030
<font color="#E5E5E5">understand EDP is easier to work with</font>

493
00:17:58,620 --> 00:18:01,500
<font color="#CCCCCC">you</font><font color="#E5E5E5"> don't need sessions you don't need</font>

494
00:18:00,030 --> 00:18:03,059
to be able<font color="#E5E5E5"> to do any handshakes</font>

495
00:18:01,500 --> 00:18:05,429
but it also<font color="#E5E5E5"> gives you a lot</font><font color="#CCCCCC"> of</font>

496
00:18:03,059 --> 00:18:06,809
disadvantages<font color="#CCCCCC"> UDP</font><font color="#E5E5E5"> is very fast and very</font>

497
00:18:05,429 --> 00:18:08,159
<font color="#E5E5E5">positive to scan</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Internet you</font>

498
00:18:06,809 --> 00:18:09,809
<font color="#CCCCCC">can do</font><font color="#E5E5E5"> huge net blocks with</font>

499
00:18:08,159 --> 00:18:12,480
<font color="#CCCCCC">multi-threaded scripts very very quickly</font>

500
00:18:09,809 --> 00:18:14,370
<font color="#E5E5E5">you can spoof</font><font color="#CCCCCC"> UDP I</font><font color="#E5E5E5"> addresses extremely</font>

501
00:18:12,480 --> 00:18:15,630
<font color="#CCCCCC">easily so even if you do IP whitelisting</font>

502
00:18:14,370 --> 00:18:17,100
you can still be able<font color="#E5E5E5"> to send</font>

503
00:18:15,630 --> 00:18:20,940
<font color="#E5E5E5">information</font><font color="#CCCCCC"> towards</font><font color="#E5E5E5"> these systems and</font>

504
00:18:17,100 --> 00:18:24,510
execute particular code or applications

505
00:18:20,940 --> 00:18:26,400
and custom API<font color="#E5E5E5"> also means our custom</font>

506
00:18:24,510 --> 00:18:28,230
passes and custom implementations and

507
00:18:26,400 --> 00:18:30,030
custom<font color="#E5E5E5"> authorization techniques which</font>

508
00:18:28,230 --> 00:18:35,159
also leave you open to<font color="#E5E5E5"> making</font><font color="#CCCCCC"> mistakes</font>

509
00:18:30,030 --> 00:18:36,480
<font color="#E5E5E5">within that kind of area so another case</font>

510
00:18:35,159 --> 00:18:38,190
study was another<font color="#E5E5E5"> company called voice</font>

511
00:18:36,480 --> 00:18:40,770
blue they make smart home systems they

512
00:18:38,190 --> 00:18:43,260
make smart home routers they make very

513
00:18:40,770 --> 00:18:44,549
expensive like<font color="#E5E5E5"> six seven hundred euro</font>

514
00:18:43,260 --> 00:18:46,230
like system that can control your home

515
00:18:44,549 --> 00:18:47,400
that<font color="#E5E5E5"> basically you you types of stuff in</font>

516
00:18:46,230 --> 00:18:49,530
and of<font color="#E5E5E5"> course you also make these these</font>

517
00:18:47,400 --> 00:18:51,390
gateways<font color="#E5E5E5"> that basically transmit GSM and</font>

518
00:18:49,530 --> 00:18:52,500
subtract and<font color="#E5E5E5"> this is the thing</font><font color="#CCCCCC"> that we</font>

519
00:18:51,390 --> 00:18:55,620
were interested<font color="#E5E5E5"> in where the Gateway</font>

520
00:18:52,500 --> 00:18:58,049
specifically<font color="#E5E5E5"> the company provided every</font>

521
00:18:55,620 --> 00:18:59,399
handy tool in Java<font color="#E5E5E5"> that</font><font color="#CCCCCC"> basically allows</font>

522
00:18:58,049 --> 00:19:01,049
you to<font color="#E5E5E5"> download the tool to</font><font color="#CCCCCC"> your home</font>

523
00:18:59,400 --> 00:19:02,429
<font color="#E5E5E5">network and then you would run it with</font>

524
00:19:01,049 --> 00:19:04,260
no options available and it would then

525
00:19:02,429 --> 00:19:05,520
then scan your home local network and<font color="#E5E5E5"> it</font>

526
00:19:04,260 --> 00:19:07,860
would tell you oh these are the IP

527
00:19:05,520 --> 00:19:10,590
<font color="#E5E5E5">addresses away your particular voice</font>

528
00:19:07,860 --> 00:19:12,600
<font color="#E5E5E5">blue device is sitting by simply reverse</font>

529
00:19:10,590 --> 00:19:13,860
engineering the binary<font color="#E5E5E5"> and just looking</font>

530
00:19:12,600 --> 00:19:15,270
at what it was<font color="#E5E5E5"> sending out we could</font>

531
00:19:13,860 --> 00:19:17,039
simply change<font color="#E5E5E5"> the home network</font><font color="#CCCCCC"> to the</font>

532
00:19:15,270 --> 00:19:19,289
<font color="#CCCCCC">Internet</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> could do create a</font>

533
00:19:17,039 --> 00:19:21,270
scanner<font color="#E5E5E5"> to use their</font><font color="#CCCCCC"> own protocol</font><font color="#E5E5E5"> to</font>

534
00:19:19,289 --> 00:19:23,490
then find and<font color="#E5E5E5"> devices live online by</font>

535
00:19:21,270 --> 00:19:26,100
simply<font color="#E5E5E5"> scanning them out so very much</font>

536
00:19:23,490 --> 00:19:28,710
<font color="#E5E5E5">thanks to them but you know made things</font>

537
00:19:26,100 --> 00:19:30,209
<font color="#CCCCCC">very easy</font><font color="#E5E5E5"> an information that came back</font>

538
00:19:28,710 --> 00:19:32,070
was extremely robust<font color="#E5E5E5"> so in this</font>

539
00:19:30,210 --> 00:19:34,080
situation<font color="#CCCCCC"> all you need to do was send</font>

540
00:19:32,070 --> 00:19:36,299
<font color="#E5E5E5">this particular request to a secret port</font>

541
00:19:34,080 --> 00:19:38,250
they could find within<font color="#E5E5E5"> the tool and back</font>

542
00:19:36,299 --> 00:19:39,780
<font color="#E5E5E5">over UDP you would get the description</font>

543
00:19:38,250 --> 00:19:41,909
you'll get the boot<font color="#CCCCCC"> web version the MAC</font>

544
00:19:39,780 --> 00:19:43,950
<font color="#CCCCCC">address the serial number the license</font>

545
00:19:41,909 --> 00:19:45,210
active data in this<font color="#E5E5E5"> case this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the GSM</font>

546
00:19:43,950 --> 00:19:48,120
gateway<font color="#E5E5E5"> we're looking for it's called</font>

547
00:19:45,210 --> 00:19:50,580
<font color="#CCCCCC">the voice blue next gateway this</font><font color="#E5E5E5"> is the</font>

548
00:19:48,120 --> 00:19:53,649
<font color="#E5E5E5">g7</font><font color="#CCCCCC"> 2 9 is because a voice codec it uses</font>

549
00:19:50,580 --> 00:19:57,070
<font color="#CCCCCC">a music sip tunneling</font>

550
00:19:53,650 --> 00:19:58,720
<font color="#CCCCCC">the mass SMS and license limitation in</font>

551
00:19:57,070 --> 00:20:00,429
this case is disabled license status<font color="#E5E5E5"> is</font>

552
00:19:58,720 --> 00:20:02,230
unlocked and that works<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Opera in a</font>

553
00:20:00,430 --> 00:20:03,790
network<font color="#E5E5E5"> so we're already thrilled</font><font color="#CCCCCC"> like</font>

554
00:20:02,230 --> 00:20:06,070
hey<font color="#E5E5E5"> let's keep scanning the internet and</font>

555
00:20:03,790 --> 00:20:08,440
see what other looking where we can find

556
00:20:06,070 --> 00:20:10,870
them the funny<font color="#E5E5E5"> thing is because this</font>

557
00:20:08,440 --> 00:20:12,400
organization makes a lot<font color="#CCCCCC"> of a lot of</font>

558
00:20:10,870 --> 00:20:15,280
different systems<font color="#E5E5E5"> they build</font><font color="#CCCCCC"> things of</font>

559
00:20:12,400 --> 00:20:16,840
this very particular process<font color="#E5E5E5"> when they</font>

560
00:20:15,280 --> 00:20:18,910
come<font color="#E5E5E5"> to making</font><font color="#CCCCCC"> these devices so</font><font color="#E5E5E5"> they</font>

561
00:20:16,840 --> 00:20:20,980
they use these<font color="#CCCCCC"> systems</font><font color="#E5E5E5"> and then they</font>

562
00:20:18,910 --> 00:20:23,470
they process the same way no matter<font color="#CCCCCC"> if</font>

563
00:20:20,980 --> 00:20:25,720
it's a<font color="#CCCCCC"> GSM voice box</font><font color="#E5E5E5"> a GSM gateway</font><font color="#CCCCCC"> or</font>

564
00:20:23,470 --> 00:20:27,700
one of<font color="#E5E5E5"> these very expensive home control</font>

565
00:20:25,720 --> 00:20:30,850
systems<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> message and works</font>

566
00:20:27,700 --> 00:20:33,970
<font color="#E5E5E5">across the</font><font color="#CCCCCC"> whole for example well the</font>

567
00:20:30,850 --> 00:20:35,649
<font color="#CCCCCC">whole product</font><font color="#E5E5E5"> base so this is the for</font>

568
00:20:33,970 --> 00:20:37,660
<font color="#CCCCCC">example here is the</font><font color="#E5E5E5"> to an end or touch</font>

569
00:20:35,650 --> 00:20:39,160
which like hooks up to your<font color="#E5E5E5"> home exactly</font>

570
00:20:37,660 --> 00:20:41,050
<font color="#E5E5E5">the same message responds in this case</font>

571
00:20:39,160 --> 00:20:42,580
with a description what it is and then

572
00:20:41,050 --> 00:20:44,320
the<font color="#CCCCCC"> two ends</font><font color="#E5E5E5"> Stargate is another device</font>

573
00:20:42,580 --> 00:20:46,540
that<font color="#E5E5E5"> they make as well again exactly the</font>

574
00:20:44,320 --> 00:20:48,669
<font color="#E5E5E5">same VDP message it responds back with</font>

575
00:20:46,540 --> 00:20:50,170
<font color="#E5E5E5">information what it does and like the IP</font>

576
00:20:48,670 --> 00:20:51,880
address with serial numbers things<font color="#CCCCCC"> like</font>

577
00:20:50,170 --> 00:20:53,140
this<font color="#E5E5E5"> and of course like using this</font>

578
00:20:51,880 --> 00:20:54,340
<font color="#CCCCCC">information you can then do a lot of</font>

579
00:20:53,140 --> 00:20:56,020
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> things like</font><font color="#E5E5E5"> calling people</font>

580
00:20:54,340 --> 00:20:57,399
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> been like hey listen</font><font color="#CCCCCC"> I need</font><font color="#E5E5E5"> the</font>

581
00:20:56,020 --> 00:20:59,200
firmware<font color="#E5E5E5"> update</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> that work and</font>

582
00:20:57,400 --> 00:21:01,330
<font color="#E5E5E5">this is a serial number</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> like we said</font>

583
00:20:59,200 --> 00:21:05,980
the<font color="#CCCCCC"> password</font><font color="#E5E5E5"> please</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> yeah that was a</font>

584
00:21:01,330 --> 00:21:07,629
no it's quite<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> once we have</font>

585
00:21:05,980 --> 00:21:09,910
<font color="#E5E5E5">these devices like once we have our</font>

586
00:21:07,630 --> 00:21:11,230
ability<font color="#E5E5E5"> to locate these devices we kind</font>

587
00:21:09,910 --> 00:21:12,910
of<font color="#E5E5E5"> I want to get the</font><font color="#CCCCCC"> firmware from them</font>

588
00:21:11,230 --> 00:21:14,460
and this was the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> step for us</font><font color="#CCCCCC"> is to</font>

589
00:21:12,910 --> 00:21:17,710
be<font color="#E5E5E5"> able to download and dump firmware</font>

590
00:21:14,460 --> 00:21:19,330
<font color="#CCCCCC">either from the firmware</font><font color="#E5E5E5"> update process</font>

591
00:21:17,710 --> 00:21:22,330
from the manufacturers website

592
00:21:19,330 --> 00:21:24,010
themselves<font color="#CCCCCC"> sometimes from live systems</font>

593
00:21:22,330 --> 00:21:26,500
if possible because<font color="#E5E5E5"> we're even want</font><font color="#CCCCCC"> to</font>

594
00:21:24,010 --> 00:21:28,120
go through and buy like<font color="#E5E5E5"> 600 euro boxes</font>

595
00:21:26,500 --> 00:21:30,760
and then like break them<font color="#CCCCCC"> and try to find</font>

596
00:21:28,120 --> 00:21:32,260
<font color="#E5E5E5">like buy new ones</font><font color="#CCCCCC"> but then we wanted to</font>

597
00:21:30,760 --> 00:21:33,690
<font color="#E5E5E5">basically determine</font><font color="#CCCCCC"> dependencies</font>

598
00:21:32,260 --> 00:21:35,800
understand the architecture<font color="#CCCCCC"> and then</font>

599
00:21:33,690 --> 00:21:37,270
<font color="#E5E5E5">virtualized and execute the whole device</font>

600
00:21:35,800 --> 00:21:38,740
and its own like virtual environment

601
00:21:37,270 --> 00:21:40,480
regardless<font color="#E5E5E5"> of the processor it's running</font>

602
00:21:38,740 --> 00:21:45,060
<font color="#E5E5E5">so we could do full instrumentation and</font>

603
00:21:40,480 --> 00:21:45,060
vulnerability analysis<font color="#E5E5E5"> very very quickly</font>

604
00:21:45,570 --> 00:21:49,929
<font color="#CCCCCC">so</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> can walk up</font><font color="#E5E5E5"> with some too much</font>

605
00:21:48,130 --> 00:21:52,120
detail but<font color="#E5E5E5"> to</font><font color="#CCCCCC"> find many ways</font><font color="#E5E5E5"> to extract</font>

606
00:21:49,930 --> 00:21:54,430
firmware<font color="#CCCCCC"> and command injection and IT by</font>

607
00:21:52,120 --> 00:21:56,379
<font color="#CCCCCC">pinging and like trace</font><font color="#E5E5E5"> routes logs</font>

608
00:21:54,430 --> 00:21:58,390
<font color="#E5E5E5">profess collation by</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> FML</font>

609
00:21:56,380 --> 00:21:59,620
commands hidden<font color="#CCCCCC"> accounts and CLI</font>

610
00:21:58,390 --> 00:22:00,940
interfaces

611
00:21:59,620 --> 00:22:02,168
the firmware<font color="#E5E5E5"> update process is a great</font>

612
00:22:00,940 --> 00:22:04,419
way<font color="#CCCCCC"> to dump firmware from devices</font>

613
00:22:02,169 --> 00:22:07,360
<font color="#CCCCCC">themselves you</font><font color="#E5E5E5"> can have it</font><font color="#CCCCCC"> telnet FTP</font>

614
00:22:04,419 --> 00:22:09,220
<font color="#CCCCCC">previs collation and firmware dumps and</font>

615
00:22:07,360 --> 00:22:11,019
<font color="#E5E5E5">sometimes if you don't have</font><font color="#CCCCCC"> access to</font>

616
00:22:09,220 --> 00:22:12,730
the firmware<font color="#E5E5E5"> it's very possible together</font>

617
00:22:11,019 --> 00:22:14,919
<font color="#E5E5E5">from a demo</font><font color="#CCCCCC"> site</font><font color="#E5E5E5"> so there's another</font>

618
00:22:12,730 --> 00:22:16,929
company called<font color="#E5E5E5"> open box</font><font color="#CCCCCC"> and if you go to</font>

619
00:22:14,919 --> 00:22:18,970
their website<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually click on</font>

620
00:22:16,929 --> 00:22:20,860
<font color="#E5E5E5">demo and we'll take you to</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> a demo</font>

621
00:22:18,970 --> 00:22:22,210
device<font color="#E5E5E5"> that's kind of locked down you</font>

622
00:22:20,860 --> 00:22:23,799
can see<font color="#E5E5E5"> how it works and it's on their</font>

623
00:22:22,210 --> 00:22:25,840
servers and<font color="#E5E5E5"> you can like play</font><font color="#CCCCCC"> around</font>

624
00:22:23,799 --> 00:22:26,950
with it<font color="#CCCCCC"> but they disable most of the</font>

625
00:22:25,840 --> 00:22:28,418
interesting functionality<font color="#CCCCCC"> for this</font>

626
00:22:26,950 --> 00:22:31,360
<font color="#E5E5E5">particular device so</font><font color="#CCCCCC"> they actually</font><font color="#E5E5E5"> turn</font>

627
00:22:28,419 --> 00:22:32,860
it off<font color="#E5E5E5"> so for example this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> demo</font>

628
00:22:31,360 --> 00:22:34,689
site<font color="#E5E5E5"> let me show you the IP address</font>

629
00:22:32,860 --> 00:22:37,029
occurs they've since remove the demo

630
00:22:34,690 --> 00:22:38,019
<font color="#E5E5E5">I'll shake why in a second but</font><font color="#CCCCCC"> as you</font>

631
00:22:37,029 --> 00:22:39,340
can<font color="#CCCCCC"> see the disable the backup</font>

632
00:22:38,019 --> 00:22:41,559
functionality that<font color="#E5E5E5"> book information</font>

633
00:22:39,340 --> 00:22:43,570
functionality etc we<font color="#E5E5E5"> can still do other</font>

634
00:22:41,559 --> 00:22:45,610
things with<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> evaluate a device to</font>

635
00:22:43,570 --> 00:22:47,259
<font color="#E5E5E5">see how it works</font><font color="#CCCCCC"> well one</font><font color="#E5E5E5"> of the things</font>

636
00:22:45,610 --> 00:22:49,240
<font color="#CCCCCC">you could do with it was you could ping</font>

637
00:22:47,259 --> 00:22:52,720
on the<font color="#E5E5E5"> systems and in</font><font color="#CCCCCC"> this case you</font>

638
00:22:49,240 --> 00:22:55,419
<font color="#E5E5E5">could actually just insert OS injection</font>

639
00:22:52,720 --> 00:22:56,889
commands into the box<font color="#CCCCCC"> so in this case we</font>

640
00:22:55,419 --> 00:22:58,779
didn't want<font color="#E5E5E5"> to buy the box but wanted</font>

641
00:22:56,889 --> 00:23:00,369
the firmware<font color="#CCCCCC"> so we could use the</font><font color="#E5E5E5"> demo</font>

642
00:22:58,779 --> 00:23:01,869
site to just you<font color="#E5E5E5"> know have a</font><font color="#CCCCCC"> little look</font>

643
00:23:00,369 --> 00:23:03,820
around and<font color="#E5E5E5"> give</font><font color="#CCCCCC"> a call great then we can</font>

644
00:23:01,869 --> 00:23:05,049
extract all<font color="#E5E5E5"> the firmware by the web</font>

645
00:23:03,820 --> 00:23:07,240
interface then from there

646
00:23:05,049 --> 00:23:09,610
carry on<font color="#E5E5E5"> and virtualize anything we want</font>

647
00:23:07,240 --> 00:23:13,210
but to virtualize that of course we need

648
00:23:09,610 --> 00:23:15,309
<font color="#CCCCCC">to create a virtual environment</font><font color="#E5E5E5"> you</font>

649
00:23:13,210 --> 00:23:18,190
cover that<font color="#E5E5E5"> in a second another company</font>

650
00:23:15,309 --> 00:23:20,110
again similar to<font color="#CCCCCC"> these guys they just</font>

651
00:23:18,190 --> 00:23:22,299
<font color="#E5E5E5">list all the</font><font color="#CCCCCC"> firmware available</font><font color="#E5E5E5"> every</font>

652
00:23:20,110 --> 00:23:23,439
single version<font color="#E5E5E5"> if he just browse to the</font>

653
00:23:22,299 --> 00:23:25,779
right place you can<font color="#E5E5E5"> just download</font>

654
00:23:23,440 --> 00:23:27,549
whatever firmware version you<font color="#E5E5E5"> want going</font>

655
00:23:25,779 --> 00:23:29,320
<font color="#E5E5E5">back to 2015 all the way up to like</font><font color="#CCCCCC"> the</font>

656
00:23:27,549 --> 00:23:30,730
latest<font color="#E5E5E5"> one that</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> allowed us to do a</font>

657
00:23:29,320 --> 00:23:32,950
lot<font color="#CCCCCC"> of things like this between</font>

658
00:23:30,730 --> 00:23:36,519
different different firmware<font color="#CCCCCC"> and see</font>

659
00:23:32,950 --> 00:23:38,289
what we wanted<font color="#E5E5E5"> to run in some cases we</font>

660
00:23:36,519 --> 00:23:40,330
<font color="#E5E5E5">did have the device and we</font><font color="#CCCCCC"> couldn't</font>

661
00:23:38,289 --> 00:23:42,999
actually<font color="#E5E5E5"> get the firmware off it well in</font>

662
00:23:40,330 --> 00:23:44,619
that situation<font color="#CCCCCC"> by</font><font color="#E5E5E5"> downloading a firmware</font>

663
00:23:42,999 --> 00:23:46,509
update and simply examine<font color="#E5E5E5"> in the binary</font>

664
00:23:44,619 --> 00:23:49,350
<font color="#CCCCCC">who could get other information to be</font>

665
00:23:46,509 --> 00:23:53,590
<font color="#E5E5E5">able to then</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> the system itself so</font>

666
00:23:49,350 --> 00:23:55,418
IOT devices tend to have extremely a lot

667
00:23:53,590 --> 00:23:57,039
of hard-coded credentials<font color="#E5E5E5"> in this case</font>

668
00:23:55,419 --> 00:24:00,429
was<font color="#CCCCCC"> actually hard code in the binary and</font>

669
00:23:57,039 --> 00:24:01,960
we didn't really<font color="#E5E5E5"> need to understand the</font>

670
00:24:00,429 --> 00:24:03,700
MIPS architecture to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to look at</font>

671
00:24:01,960 --> 00:24:05,049
<font color="#E5E5E5">this and be</font><font color="#CCCCCC"> like hey I think this is</font>

672
00:24:03,700 --> 00:24:07,149
probably<font color="#CCCCCC"> something</font><font color="#E5E5E5"> who can use to dump</font>

673
00:24:05,049 --> 00:24:09,309
the firmware from<font color="#E5E5E5"> this device so we have</font>

674
00:24:07,149 --> 00:24:10,159
please input<font color="#CCCCCC"> password they have a string</font>

675
00:24:09,309 --> 00:24:13,760
compare happen

676
00:24:10,160 --> 00:24:15,500
here<font color="#CCCCCC"> star W den star hashtag</font><font color="#E5E5E5"> another</font>

677
00:24:13,760 --> 00:24:17,300
string<font color="#E5E5E5"> compare and password is invalid</font>

678
00:24:15,500 --> 00:24:19,070
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the password is valid it drops into</font>

679
00:24:17,300 --> 00:24:19,730
SSH and<font color="#E5E5E5"> root and then you're like hey</font>

680
00:24:19,070 --> 00:24:21,770
fantastic

681
00:24:19,730 --> 00:24:23,000
<font color="#CCCCCC">I can now adopt the firmware again</font><font color="#E5E5E5"> so</font>

682
00:24:21,770 --> 00:24:25,310
you<font color="#E5E5E5"> don't actually need to buy a system</font>

683
00:24:23,000 --> 00:24:26,600
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> them do</font><font color="#E5E5E5"> I OTO research</font>

684
00:24:25,310 --> 00:24:30,919
which is<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is great</font><font color="#E5E5E5"> for us</font><font color="#CCCCCC"> because</font>

685
00:24:26,600 --> 00:24:32,810
the kind<font color="#E5E5E5"> of cheapskates</font><font color="#CCCCCC"> and this is kind</font>

686
00:24:30,920 --> 00:24:34,520
<font color="#E5E5E5">of I</font><font color="#CCCCCC"> think they</font><font color="#E5E5E5"> take away from this this</font>

687
00:24:32,810 --> 00:24:36,530
<font color="#CCCCCC">idea is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> nature</font><font color="#CCCCCC"> of an IT devices</font>

688
00:24:34,520 --> 00:24:38,240
like it's a system that<font color="#CCCCCC"> will run</font><font color="#E5E5E5"> in a</font>

689
00:24:36,530 --> 00:24:39,710
hostile environment with no controls or

690
00:24:38,240 --> 00:24:42,020
oversights with people who are operating

691
00:24:39,710 --> 00:24:43,010
<font color="#E5E5E5">it have no idea what they're doing</font><font color="#CCCCCC"> and I</font>

692
00:24:42,020 --> 00:24:45,050
<font color="#E5E5E5">think it's important that kind of</font>

693
00:24:43,010 --> 00:24:47,030
<font color="#CCCCCC">embraces</font><font color="#E5E5E5"> reality and and not spend time</font>

694
00:24:45,050 --> 00:24:48,500
on on<font color="#E5E5E5"> stopping people from</font><font color="#CCCCCC"> getting</font>

695
00:24:47,030 --> 00:24:50,899
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> your systems or your firmware</font>

696
00:24:48,500 --> 00:24:52,630
<font color="#E5E5E5">being routed because it will happen it</font>

697
00:24:50,900 --> 00:24:55,520
<font color="#E5E5E5">will happen</font><font color="#CCCCCC"> very easily</font><font color="#E5E5E5"> and very</font><font color="#CCCCCC"> quickly</font>

698
00:24:52,630 --> 00:24:57,320
<font color="#CCCCCC">and the idea is here</font><font color="#E5E5E5"> build secure</font>

699
00:24:55,520 --> 00:24:59,270
binaries without how could<font color="#CCCCCC"> it go dentals</font>

700
00:24:57,320 --> 00:25:01,159
that without like things inside you can

701
00:24:59,270 --> 00:25:02,480
<font color="#CCCCCC">actually give to people and say hey you</font>

702
00:25:01,160 --> 00:25:03,920
can have my binary but it doesn't make

703
00:25:02,480 --> 00:25:05,690
my system any less the cube<font color="#E5E5E5"> because I'm</font>

704
00:25:03,920 --> 00:25:08,570
<font color="#E5E5E5">not running any secret UDP protocols not</font>

705
00:25:05,690 --> 00:25:10,670
<font color="#E5E5E5">running any secret IP systems or users</font>

706
00:25:08,570 --> 00:25:12,560
or anything like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and that's where I</font>

707
00:25:10,670 --> 00:25:17,150
think the time should<font color="#E5E5E5"> be spent not the</font>

708
00:25:12,560 --> 00:25:19,790
time in obfuscating things so now we

709
00:25:17,150 --> 00:25:21,080
have firmware<font color="#E5E5E5"> some from</font><font color="#CCCCCC"> live</font><font color="#E5E5E5"> systems</font>

710
00:25:19,790 --> 00:25:23,090
some from not live<font color="#E5E5E5"> systems some from</font>

711
00:25:21,080 --> 00:25:25,070
updates and now next<font color="#CCCCCC"> step</font><font color="#E5E5E5"> is basically</font>

712
00:25:23,090 --> 00:25:27,199
<font color="#E5E5E5">determine dependencies understand</font>

713
00:25:25,070 --> 00:25:31,939
architecture virtualized and execute

714
00:25:27,200 --> 00:25:34,010
<font color="#E5E5E5">these particular systems</font><font color="#CCCCCC"> the question</font>

715
00:25:31,940 --> 00:25:35,150
<font color="#E5E5E5">arises why virtualized firmware well as</font>

716
00:25:34,010 --> 00:25:37,430
I mentioned<font color="#CCCCCC"> before sometimes</font><font color="#E5E5E5"> you don't</font>

717
00:25:35,150 --> 00:25:38,720
<font color="#E5E5E5">have</font><font color="#CCCCCC"> access to actual hardware we don't</font>

718
00:25:37,430 --> 00:25:40,250
want to<font color="#E5E5E5"> bring expensive devices I've</font>

719
00:25:38,720 --> 00:25:41,780
done that<font color="#E5E5E5"> many times byte like sending</font>

720
00:25:40,250 --> 00:25:43,490
like<font color="#CCCCCC"> fussing traffic towards a</font><font color="#E5E5E5"> system</font>

721
00:25:41,780 --> 00:25:45,649
that I got and it just breaks<font color="#E5E5E5"> and I have</font>

722
00:25:43,490 --> 00:25:47,390
nothing else<font color="#CCCCCC"> left</font><font color="#E5E5E5"> but a heavy</font>

723
00:25:45,650 --> 00:25:48,860
paperweight<font color="#E5E5E5"> uh-huh</font>

724
00:25:47,390 --> 00:25:50,300
take out the binary so we can run them

725
00:25:48,860 --> 00:25:52,310
<font color="#CCCCCC">on</font><font color="#E5E5E5"> our own systems and</font><font color="#CCCCCC"> do much better</font>

726
00:25:50,300 --> 00:25:54,050
<font color="#E5E5E5">instrumentation we can do debugging</font><font color="#CCCCCC"> we</font>

727
00:25:52,310 --> 00:25:55,340
can do fuzzing<font color="#CCCCCC"> we can research purely</font>

728
00:25:54,050 --> 00:25:57,379
based on firmware updates and we can

729
00:25:55,340 --> 00:25:59,120
find generic vulnerabilities for

730
00:25:57,380 --> 00:26:00,680
multiple sets of systems by looking at

731
00:25:59,120 --> 00:26:02,239
the base firmware<font color="#CCCCCC"> that all these devices</font>

732
00:26:00,680 --> 00:26:03,740
<font color="#CCCCCC">are built upon and that gives</font><font color="#E5E5E5"> us a</font>

733
00:26:02,240 --> 00:26:06,190
really<font color="#E5E5E5"> good coverage across many many</font>

734
00:26:03,740 --> 00:26:06,190
<font color="#E5E5E5">vendors</font>

735
00:26:06,929 --> 00:26:10,199
so I<font color="#E5E5E5"> think I will</font><font color="#CCCCCC"> hang out with</font><font color="#E5E5E5"> your</font>

736
00:26:08,939 --> 00:26:12,899
<font color="#E5E5E5">friend here and talk about</font><font color="#CCCCCC"> a little bit</font>

737
00:26:10,199 --> 00:26:14,669
<font color="#E5E5E5">how to understand why</font><font color="#CCCCCC"> quilt</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> hood</font>

738
00:26:12,899 --> 00:26:17,008
actually<font color="#E5E5E5"> go through the virtualization</font>

739
00:26:14,669 --> 00:26:20,399
<font color="#E5E5E5">setup of a full test bed environment</font>

740
00:26:17,009 --> 00:26:22,769
sure<font color="#E5E5E5"> so what does it take to virtualize</font>

741
00:26:20,399 --> 00:26:24,928
<font color="#E5E5E5">an environment for</font><font color="#CCCCCC"> this or</font><font color="#E5E5E5"> actually at</font>

742
00:26:22,769 --> 00:26:27,029
least<font color="#E5E5E5"> virtualized part of the firmware</font>

743
00:26:24,929 --> 00:26:28,679
<font color="#E5E5E5">so you can run certain components like</font>

744
00:26:27,029 --> 00:26:30,539
if you have a web<font color="#E5E5E5"> server you might want</font>

745
00:26:28,679 --> 00:26:32,579
to<font color="#E5E5E5"> run</font><font color="#CCCCCC"> that if you have a</font><font color="#E5E5E5"> database</font>

746
00:26:30,539 --> 00:26:34,529
<font color="#E5E5E5">program you might want to run</font><font color="#CCCCCC"> that well</font>

747
00:26:32,579 --> 00:26:35,549
knowing<font color="#E5E5E5"> the processor</font><font color="#CCCCCC"> in architecture</font><font color="#E5E5E5"> so</font>

748
00:26:34,529 --> 00:26:38,909
you<font color="#E5E5E5"> can actually attack it and</font>

749
00:26:35,549 --> 00:26:40,859
<font color="#E5E5E5">understand what does</font><font color="#CCCCCC"> you need to have a</font>

750
00:26:38,909 --> 00:26:42,749
Linux distribution that somewhat matches

751
00:26:40,859 --> 00:26:44,849
the one running on the device<font color="#E5E5E5"> so if it's</font>

752
00:26:42,749 --> 00:26:46,829
running<font color="#E5E5E5"> on GC</font><font color="#CCCCCC"> lib then</font><font color="#E5E5E5"> you should</font><font color="#CCCCCC"> have</font>

753
00:26:44,849 --> 00:26:48,359
that<font color="#CCCCCC"> Dileep seen or</font><font color="#E5E5E5"> if it's</font><font color="#CCCCCC"> using you</font>

754
00:26:46,829 --> 00:26:50,609
<font color="#CCCCCC">CLM see you should have</font><font color="#E5E5E5"> something</font>

755
00:26:48,359 --> 00:26:52,198
running<font color="#E5E5E5"> that and then you have</font><font color="#CCCCCC"> to get</font>

756
00:26:50,609 --> 00:26:54,478
<font color="#E5E5E5">your firmware components onto</font><font color="#CCCCCC"> this</font>

757
00:26:52,199 --> 00:26:56,579
emulated<font color="#CCCCCC"> device and quite quite often</font>

758
00:26:54,479 --> 00:27:01,199
<font color="#E5E5E5">that's actually enough to make something</font>

759
00:26:56,579 --> 00:27:03,029
wrong<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> you can break it IOT</font>

760
00:27:01,199 --> 00:27:04,649
<font color="#E5E5E5">hardware is a little bit different than</font>

761
00:27:03,029 --> 00:27:06,569
regular x86<font color="#CCCCCC"> stop</font>

762
00:27:04,649 --> 00:27:08,819
so the<font color="#E5E5E5"> general</font><font color="#CCCCCC"> purpose hardware</font><font color="#E5E5E5"> that we</font>

763
00:27:06,569 --> 00:27:10,559
use<font color="#CCCCCC"> every day so</font><font color="#E5E5E5"> you need to learn a</font>

764
00:27:08,819 --> 00:27:13,049
<font color="#E5E5E5">little bit about a new instruction set</font>

765
00:27:10,559 --> 00:27:14,759
<font color="#CCCCCC">but first of</font><font color="#E5E5E5"> all you need to know how</font>

766
00:27:13,049 --> 00:27:18,179
<font color="#E5E5E5">much you need to know which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> probably</font>

767
00:27:14,759 --> 00:27:20,369
less than<font color="#E5E5E5"> you think</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> need an</font>

768
00:27:18,179 --> 00:27:22,859
environment<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make your prototyping and</font>

769
00:27:20,369 --> 00:27:24,749
so if you<font color="#E5E5E5"> find a vulnerability</font><font color="#CCCCCC"> you need</font>

770
00:27:22,859 --> 00:27:27,089
to make sure<font color="#E5E5E5"> it runs and try it out and</font>

771
00:27:24,749 --> 00:27:28,499
<font color="#CCCCCC">customize it so</font><font color="#E5E5E5"> it runs properly so you</font>

772
00:27:27,089 --> 00:27:30,839
need<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> a malware</font><font color="#E5E5E5"> factory</font>

773
00:27:28,499 --> 00:27:32,969
which is<font color="#E5E5E5"> what we built so the malware</font>

774
00:27:30,839 --> 00:27:36,059
<font color="#CCCCCC">Factory is a set of fourteen different</font>

775
00:27:32,969 --> 00:27:40,829
processors or flavors or processors<font color="#CCCCCC"> we</font>

776
00:27:36,059 --> 00:27:43,480
have<font color="#CCCCCC"> ARM arm</font><font color="#E5E5E5"> from 64-bit</font><font color="#CCCCCC"> arm mips we</font>

777
00:27:40,829 --> 00:27:46,129
also have 68k

778
00:27:43,480 --> 00:27:47,559
<font color="#E5E5E5">powerpc and spark spark is more geared</font>

779
00:27:46,130 --> 00:27:49,669
towards telco infrastructure of course

780
00:27:47,559 --> 00:27:51,740
<font color="#E5E5E5">that might still be running solaris and</font>

781
00:27:49,669 --> 00:27:54,169
<font color="#E5E5E5">things like this but for for our two</font>

782
00:27:51,740 --> 00:27:56,659
<font color="#E5E5E5">devices we</font><font color="#CCCCCC"> have these</font><font color="#E5E5E5"> these processors</font>

783
00:27:54,169 --> 00:27:58,460
<font color="#E5E5E5">it's not just</font><font color="#CCCCCC"> a tool for testing and</font>

784
00:27:56,659 --> 00:27:59,720
developing it's also a tool<font color="#E5E5E5"> that helps</font>

785
00:27:58,460 --> 00:28:00,950
us learn<font color="#CCCCCC"> how to learn</font>

786
00:27:59,720 --> 00:28:03,200
so we also included some<font color="#CCCCCC"> of these</font>

787
00:28:00,950 --> 00:28:05,779
conceptual processors like<font color="#E5E5E5"> extensa or</font>

788
00:28:03,200 --> 00:28:08,269
<font color="#CCCCCC">microplace so even if you</font><font color="#E5E5E5"> never actually</font>

789
00:28:05,779 --> 00:28:10,250
run code<font color="#CCCCCC"> on such a</font><font color="#E5E5E5"> machine it's good to</font>

790
00:28:08,269 --> 00:28:12,980
get to<font color="#E5E5E5"> know how that machine sets up</font>

791
00:28:10,250 --> 00:28:15,049
stack how it returns from a call how it

792
00:28:12,980 --> 00:28:17,600
passes parameters to itself and cetera

793
00:28:15,049 --> 00:28:21,769
<font color="#E5E5E5">etc because most processors are very</font>

794
00:28:17,600 --> 00:28:23,480
very similar in<font color="#CCCCCC"> this respect so we I</font>

795
00:28:21,769 --> 00:28:26,950
guess<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> 14 supported</font>

796
00:28:23,480 --> 00:28:29,779
processors using<font color="#CCCCCC"> crema</font><font color="#E5E5E5"> each of these</font>

797
00:28:26,950 --> 00:28:31,490
processors has a limited tool chain

798
00:28:29,779 --> 00:28:33,679
attached<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can actually cross</font>

799
00:28:31,490 --> 00:28:35,600
compile across assemble<font color="#E5E5E5"> for each of</font>

800
00:28:33,679 --> 00:28:39,559
these chips<font color="#E5E5E5"> so we can instantly build a</font>

801
00:28:35,600 --> 00:28:41,000
new test snippet<font color="#E5E5E5"> each of these</font>

802
00:28:39,559 --> 00:28:43,580
processors come with a dedicated loader

803
00:28:41,000 --> 00:28:46,700
<font color="#E5E5E5">that</font><font color="#CCCCCC"> actually loads this</font><font color="#E5E5E5"> test snippet so</font>

804
00:28:43,580 --> 00:28:48,110
we we assemble a code<font color="#E5E5E5"> strip all the elf</font>

805
00:28:46,700 --> 00:28:50,360
stuff out and only<font color="#E5E5E5"> leave the code</font>

806
00:28:48,110 --> 00:28:52,129
section so we<font color="#CCCCCC"> can have a delta offset</font>

807
00:28:50,360 --> 00:28:55,100
coded relocatable<font color="#E5E5E5"> piece of code</font><font color="#CCCCCC"> that</font>

808
00:28:52,129 --> 00:28:56,418
runs<font color="#CCCCCC"> oh and loaded into memory so the</font>

809
00:28:55,100 --> 00:28:59,330
loader actually just loads of binary

810
00:28:56,419 --> 00:29:01,039
<font color="#E5E5E5">chunk into</font><font color="#CCCCCC"> memory calls it and doesn't</font>

811
00:28:59,330 --> 00:29:02,840
<font color="#E5E5E5">care what it is and then returns</font>

812
00:29:01,039 --> 00:29:05,870
<font color="#CCCCCC">hopefully if we write our snippet</font>

813
00:29:02,840 --> 00:29:08,209
correctly it also has<font color="#E5E5E5"> file sharing</font>

814
00:29:05,870 --> 00:29:09,979
between host and guest OS<font color="#E5E5E5"> so that it can</font>

815
00:29:08,210 --> 00:29:11,419
<font color="#E5E5E5">exchange files easily</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can</font>

816
00:29:09,980 --> 00:29:12,350
actually build on the<font color="#E5E5E5"> host</font><font color="#CCCCCC"> we're using</font>

817
00:29:11,419 --> 00:29:15,379
the<font color="#E5E5E5"> cross</font><font color="#CCCCCC"> compiler</font>

818
00:29:12,350 --> 00:29:19,340
chain<font color="#E5E5E5"> to chain and then you run it</font>

819
00:29:15,379 --> 00:29:21,439
immediately<font color="#E5E5E5"> on the guest that makes it</font>

820
00:29:19,340 --> 00:29:24,259
less<font color="#E5E5E5"> of a chore to actually develop</font>

821
00:29:21,440 --> 00:29:27,230
things and try<font color="#CCCCCC"> things out so the loader</font>

822
00:29:24,259 --> 00:29:29,269
is not so complicated<font color="#E5E5E5"> it's essentially</font>

823
00:29:27,230 --> 00:29:31,309
just<font color="#E5E5E5"> opens a file so specified by the</font>

824
00:29:29,269 --> 00:29:34,399
first argument<font color="#E5E5E5"> then it loads it</font><font color="#CCCCCC"> into</font>

825
00:29:31,309 --> 00:29:37,460
memory<font color="#CCCCCC"> it can adjust</font><font color="#E5E5E5"> the protection of</font>

826
00:29:34,399 --> 00:29:39,500
the<font color="#E5E5E5"> memory chunk</font><font color="#CCCCCC"> that it's loaded so</font>

827
00:29:37,460 --> 00:29:41,210
that it's executable because in some<font color="#E5E5E5"> of</font>

828
00:29:39,500 --> 00:29:42,800
these devices<font color="#E5E5E5"> very rarely you have</font>

829
00:29:41,210 --> 00:29:46,040
memory protection you

830
00:29:42,800 --> 00:29:48,770
and then it calls the yeah sure here

831
00:29:46,040 --> 00:29:50,870
<font color="#CCCCCC">that calls the buffer data with print as</font>

832
00:29:48,770 --> 00:29:53,090
the<font color="#E5E5E5"> only parameter so that you can</font>

833
00:29:50,870 --> 00:29:57,830
<font color="#CCCCCC">actually do some debug output or print</font>

834
00:29:53,090 --> 00:29:59,179
success<font color="#E5E5E5"> hopefully another nice feature</font>

835
00:29:57,830 --> 00:30:01,909
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that you can actually do live</font>

836
00:29:59,180 --> 00:30:04,390
debugging<font color="#E5E5E5"> using the GT being supported</font>

837
00:30:01,910 --> 00:30:07,880
by<font color="#E5E5E5"> crema so just add this to your</font>

838
00:30:04,390 --> 00:30:10,640
<font color="#CCCCCC">creamer</font><font color="#E5E5E5"> command line and you can</font><font color="#CCCCCC"> do live</font>

839
00:30:07,880 --> 00:30:14,600
debugging<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your payloads which is also</font>

840
00:30:10,640 --> 00:30:17,720
<font color="#E5E5E5">very nice so we have a short demo of the</font>

841
00:30:14,600 --> 00:30:22,300
malware<font color="#E5E5E5"> factory as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> so I'll leave my</font>

842
00:30:17,720 --> 00:30:22,300
<font color="#E5E5E5">OSX qualify the assistant to start</font>

843
00:30:24,960 --> 00:30:29,990
see this works<font color="#CCCCCC"> I felt because</font>

844
00:30:31,300 --> 00:30:39,800
okay so this is whenever we<font color="#CCCCCC"> are in the</font>

845
00:30:37,190 --> 00:30:41,930
launcher or the guest<font color="#E5E5E5"> OS the text will</font>

846
00:30:39,800 --> 00:30:44,330
be white<font color="#CCCCCC"> whenever we're in</font><font color="#E5E5E5"> the host or</font>

847
00:30:41,930 --> 00:30:45,860
assembling some code it will<font color="#E5E5E5"> be orange</font>

848
00:30:44,330 --> 00:30:49,699
<font color="#CCCCCC">so we have some kind</font><font color="#E5E5E5"> of differentiation</font>

849
00:30:45,860 --> 00:30:51,229
<font color="#CCCCCC">and when I wrote you animated</font><font color="#E5E5E5"> this demo</font>

850
00:30:49,700 --> 00:30:53,900
I didn't really<font color="#CCCCCC"> think about it so I put</font>

851
00:30:51,230 --> 00:30:55,550
<font color="#CCCCCC">the sort of indication text in orange</font>

852
00:30:53,900 --> 00:31:00,050
all the time but<font color="#E5E5E5"> that's it's the text of</font>

853
00:30:55,550 --> 00:31:03,379
the interface that<font color="#E5E5E5"> matters so</font><font color="#CCCCCC"> here we</font>

854
00:31:00,050 --> 00:31:04,909
<font color="#CCCCCC">start first</font><font color="#E5E5E5"> the x86 emulation which</font>

855
00:31:03,380 --> 00:31:06,970
should<font color="#E5E5E5"> be familiar to most people I</font>

856
00:31:04,910 --> 00:31:06,970
<font color="#E5E5E5">think</font>

857
00:31:10,900 --> 00:31:16,920
they<font color="#CCCCCC"> started this this meanie meanie</font>

858
00:31:14,560 --> 00:31:20,710
<font color="#E5E5E5">Linux distribution which is</font><font color="#CCCCCC"> built-in in</font>

859
00:31:16,920 --> 00:31:22,090
<font color="#CCCCCC">build route the home Azzam folder is</font>

860
00:31:20,710 --> 00:31:24,910
shared between<font color="#E5E5E5"> hosting guests so you can</font>

861
00:31:22,090 --> 00:31:28,000
<font color="#E5E5E5">just go into that and adjust or rebuild</font>

862
00:31:24,910 --> 00:31:30,490
things so here we'll just<font color="#CCCCCC"> used loader</font>

863
00:31:28,000 --> 00:31:33,690
first<font color="#E5E5E5"> to load the</font><font color="#CCCCCC"> the payload for the</font>

864
00:31:30,490 --> 00:31:33,690
x86 code

865
00:31:35,050 --> 00:31:39,280
and that's basically<font color="#CCCCCC"> how you executed</font>

866
00:31:36,790 --> 00:31:43,420
and now we'll go through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> source of</font>

867
00:31:39,280 --> 00:31:46,420
the x86 binary so it's very<font color="#E5E5E5"> very basic</font>

868
00:31:43,420 --> 00:31:47,710
it sets up a stacked ring<font color="#E5E5E5"> and all of</font>

869
00:31:46,420 --> 00:31:50,140
these examples<font color="#E5E5E5"> we have an</font><font color="#CCCCCC"> example for</font>

870
00:31:47,710 --> 00:31:52,180
all<font color="#CCCCCC"> of the chips</font><font color="#E5E5E5"> and they do essentially</font>

871
00:31:50,140 --> 00:31:54,070
the same thing<font color="#CCCCCC"> they serve a stack frame</font>

872
00:31:52,180 --> 00:31:57,930
<font color="#CCCCCC">as it's more or less supposed to be set</font>

873
00:31:54,070 --> 00:32:00,159
<font color="#E5E5E5">up</font><font color="#CCCCCC"> it then pushes the parameter or</font>

874
00:31:57,930 --> 00:32:02,890
passes the parameter to the call because

875
00:32:00,160 --> 00:32:06,430
<font color="#CCCCCC">not all are pushed</font><font color="#E5E5E5"> only in fact x86 is</font>

876
00:32:02,890 --> 00:32:09,250
pushed in<font color="#E5E5E5"> this case we use call and then</font>

877
00:32:06,430 --> 00:32:10,720
call over the<font color="#E5E5E5"> actual data</font><font color="#CCCCCC"> that we want</font>

878
00:32:09,250 --> 00:32:14,020
<font color="#CCCCCC">to pass</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the call because</font><font color="#E5E5E5"> that's a</font>

879
00:32:10,720 --> 00:32:15,580
function of<font color="#E5E5E5"> the Intel instruction set we</font>

880
00:32:14,020 --> 00:32:17,950
then call the first parameter on the

881
00:32:15,580 --> 00:32:21,070
stack which<font color="#CCCCCC"> is pointed to by</font><font color="#E5E5E5"> the base</font>

882
00:32:17,950 --> 00:32:23,500
pointer<font color="#CCCCCC"> plus egg which is print that we</font>

883
00:32:21,070 --> 00:32:25,210
the loader passed to the snippet<font color="#E5E5E5"> and</font>

884
00:32:23,500 --> 00:32:29,620
then we restored stack frame by leaving

885
00:32:25,210 --> 00:32:31,600
and returning<font color="#E5E5E5"> greater so that's for x86</font>

886
00:32:29,620 --> 00:32:34,090
<font color="#E5E5E5">we can</font><font color="#CCCCCC"> then compare that to how it would</font>

887
00:32:31,600 --> 00:32:38,139
look on well<font color="#E5E5E5"> now first I will show it</font>

888
00:32:34,090 --> 00:32:40,149
how<font color="#CCCCCC"> its rebuilds so it's yeah it's very</font>

889
00:32:38,140 --> 00:32:42,190
easy to<font color="#E5E5E5"> modify you just run make and</font>

890
00:32:40,150 --> 00:32:44,470
it's compiled binary strips they have

891
00:32:42,190 --> 00:32:46,710
stuff and then you can call<font color="#CCCCCC"> the</font><font color="#E5E5E5"> end so</font>

892
00:32:44,470 --> 00:32:51,000
it's instant<font color="#CCCCCC"> almost</font>

893
00:32:46,710 --> 00:32:54,270
as for x64<font color="#E5E5E5"> it has a very similar look</font>

894
00:32:51,000 --> 00:32:56,250
and feel to it<font color="#CCCCCC"> instead of</font><font color="#E5E5E5"> using EBP</font><font color="#CCCCCC"> its</font>

895
00:32:54,270 --> 00:32:59,850
uses our VP<font color="#CCCCCC"> of course so it's the 64-bit</font>

896
00:32:56,250 --> 00:33:01,260
versions of<font color="#E5E5E5"> the register the text</font>

897
00:32:59,850 --> 00:33:03,959
parameter for<font color="#E5E5E5"> Prince is pushed in the</font>

898
00:33:01,260 --> 00:33:09,210
same way but since 64-bit Linux<font color="#E5E5E5"> uses</font>

899
00:33:03,960 --> 00:33:11,730
fast<font color="#CCCCCC"> call we instead have Prince in our</font>

900
00:33:09,210 --> 00:33:14,550
<font color="#E5E5E5">di so we popped the pointer to the</font>

901
00:33:11,730 --> 00:33:16,890
string text to<font color="#CCCCCC"> RDX</font><font color="#E5E5E5"> and then we</font><font color="#CCCCCC"> exchanged</font>

902
00:33:14,550 --> 00:33:19,169
<font color="#E5E5E5">party X for party I to make sure the</font>

903
00:33:16,890 --> 00:33:21,840
<font color="#CCCCCC">first</font><font color="#E5E5E5"> parameter for</font><font color="#CCCCCC"> print</font><font color="#E5E5E5"> is pointed to</font>

904
00:33:19,170 --> 00:33:23,700
by<font color="#E5E5E5"> party I and then we call our DX which</font>

905
00:33:21,840 --> 00:33:30,209
is<font color="#E5E5E5"> print and then return exactly the</font>

906
00:33:23,700 --> 00:33:32,880
same so<font color="#E5E5E5"> it's this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the basic</font><font color="#CCCCCC"> example</font>

907
00:33:30,210 --> 00:33:35,700
that<font color="#E5E5E5"> comes with every chip so for arm it</font>

908
00:33:32,880 --> 00:33:37,770
<font color="#E5E5E5">would look a little bit different it</font>

909
00:33:35,700 --> 00:33:39,330
starts the same of course has<font color="#CCCCCC"> the same</font>

910
00:33:37,770 --> 00:33:42,600
features as the<font color="#E5E5E5"> same sharing between the</font>

911
00:33:39,330 --> 00:33:45,710
<font color="#E5E5E5">guest and</font><font color="#CCCCCC"> host</font><font color="#E5E5E5"> so just go into the</font>

912
00:33:42,600 --> 00:33:45,709
<font color="#E5E5E5">appropriate folder</font>

913
00:33:49,980 --> 00:33:55,150
and we just

914
00:33:52,210 --> 00:33:57,790
<font color="#CCCCCC">cross</font><font color="#E5E5E5"> assemble it of course and again</font>

915
00:33:55,150 --> 00:33:59,640
the binary is built instantly and you

916
00:33:57,790 --> 00:34:01,540
can run<font color="#E5E5E5"> it and it does the same thing</font>

917
00:33:59,640 --> 00:34:03,310
<font color="#E5E5E5">and then we have a look at the source</font>

918
00:34:01,540 --> 00:34:05,139
code which looks a<font color="#E5E5E5"> little bit so here</font>

919
00:34:03,310 --> 00:34:07,179
the stack<font color="#E5E5E5"> frame is you start</font><font color="#CCCCCC"> by saving</font>

920
00:34:05,140 --> 00:34:10,990
for example the stack pointer in<font color="#CCCCCC"> r12</font>

921
00:34:07,180 --> 00:34:14,080
<font color="#E5E5E5">then we use this registry saving</font>

922
00:34:10,989 --> 00:34:15,819
function and then we allocate some stack

923
00:34:14,080 --> 00:34:19,360
<font color="#CCCCCC">space using sub subtraction of the</font><font color="#E5E5E5"> stack</font>

924
00:34:15,820 --> 00:34:22,780
pointer we move the first<font color="#E5E5E5"> parameter into</font>

925
00:34:19,360 --> 00:34:24,460
<font color="#CCCCCC">r2 which is the print</font><font color="#E5E5E5"> of course then we</font>

926
00:34:22,780 --> 00:34:26,410
take the content of<font color="#CCCCCC"> our three which is</font>

927
00:34:24,460 --> 00:34:29,500
<font color="#E5E5E5">the register that the loader uses when</font>

928
00:34:26,409 --> 00:34:32,020
<font color="#CCCCCC">it calls this function and then we call</font>

929
00:34:29,500 --> 00:34:34,330
our call r2 with the pointer to this

930
00:34:32,020 --> 00:34:35,469
text the pointer to<font color="#E5E5E5"> the text is right</font>

931
00:34:34,330 --> 00:34:38,199
there I've a<font color="#E5E5E5"> little bit different in</font>

932
00:34:35,469 --> 00:34:40,120
this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> we're not</font><font color="#E5E5E5"> we don't have the</font>

933
00:34:38,199 --> 00:34:43,299
<font color="#E5E5E5">luxury</font><font color="#CCCCCC"> of using</font><font color="#E5E5E5"> the return register to</font>

934
00:34:40,120 --> 00:34:46,029
to get the parameter so instead we jump

935
00:34:43,300 --> 00:34:49,180
<font color="#CCCCCC">over it and since we have the address</font><font color="#E5E5E5"> of</font>

936
00:34:46,030 --> 00:34:51,610
<font color="#E5E5E5">the main in r3 we just add 4 to it</font>

937
00:34:49,179 --> 00:34:56,310
because arm<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> four bytes</font><font color="#E5E5E5"> fixed size</font>

938
00:34:51,610 --> 00:34:59,590
instruction set in in<font color="#E5E5E5"> the normal case in</font>

939
00:34:56,310 --> 00:35:02,200
thumb<font color="#E5E5E5"> this of</font><font color="#CCCCCC"> course variable size so</font>

940
00:34:59,590 --> 00:35:03,610
yeah<font color="#E5E5E5"> once it's</font><font color="#CCCCCC"> just called print with</font>

941
00:35:02,200 --> 00:35:07,509
the pointer to the<font color="#E5E5E5"> text</font>

942
00:35:03,610 --> 00:35:09,640
<font color="#E5E5E5">it's then resource the stack by adding</font>

943
00:35:07,510 --> 00:35:11,050
to the stack pointer<font color="#E5E5E5"> and then restoring</font>

944
00:35:09,640 --> 00:35:12,390
all the registers<font color="#E5E5E5"> including</font><font color="#CCCCCC"> the program</font>

945
00:35:11,050 --> 00:35:15,210
<font color="#CCCCCC">counter</font>

946
00:35:12,390 --> 00:35:16,558
so this is<font color="#CCCCCC"> shows a little bit how the</font>

947
00:35:15,210 --> 00:35:19,099
<font color="#E5E5E5">stack is set up and also where you would</font>

948
00:35:16,559 --> 00:35:22,259
be finding<font color="#E5E5E5"> the return address itself</font>

949
00:35:19,099 --> 00:35:23,849
again it's very<font color="#E5E5E5"> easy to just rebuild it</font>

950
00:35:22,259 --> 00:35:28,589
and modify it and make<font color="#E5E5E5"> it to other</font>

951
00:35:23,849 --> 00:35:29,940
<font color="#E5E5E5">things there is a loader for each of the</font>

952
00:35:28,589 --> 00:35:31,739
processors as<font color="#CCCCCC"> well and there's the</font>

953
00:35:29,940 --> 00:35:36,690
examples note<font color="#E5E5E5"> your code snippet for</font>

954
00:35:31,739 --> 00:35:38,069
<font color="#E5E5E5">every one we</font><font color="#CCCCCC"> can have a look at I think</font>

955
00:35:36,690 --> 00:35:41,339
let's do<font color="#CCCCCC"> this and</font><font color="#E5E5E5"> then move on</font><font color="#CCCCCC"> to this</font>

956
00:35:38,069 --> 00:35:44,239
one<font color="#E5E5E5"> yeah exactly</font>

957
00:35:41,339 --> 00:35:47,999
so<font color="#CCCCCC"> this this</font><font color="#E5E5E5"> is the variable size</font>

958
00:35:44,239 --> 00:35:50,190
<font color="#E5E5E5">instruction set for arm as well it's a</font>

959
00:35:47,999 --> 00:35:52,859
little<font color="#E5E5E5"> bit different but it</font><font color="#CCCCCC"> does the</font>

960
00:35:50,190 --> 00:35:54,390
exact same thing<font color="#E5E5E5"> basically means and I</font>

961
00:35:52,859 --> 00:35:57,380
can cross compile for<font color="#E5E5E5"> any</font><font color="#CCCCCC"> process you</font>

962
00:35:54,390 --> 00:35:59,700
want<font color="#E5E5E5"> you can launch whatever in</font>

963
00:35:57,380 --> 00:36:02,009
emulation environment you want<font color="#E5E5E5"> yeah and</font>

964
00:35:59,700 --> 00:36:03,509
you<font color="#E5E5E5"> can build you can run binaries you</font>

965
00:36:02,009 --> 00:36:04,980
can virtualize like whatever<font color="#CCCCCC"> I keyed</font>

966
00:36:03,509 --> 00:36:06,599
device you have regardless<font color="#E5E5E5"> of what</font>

967
00:36:04,980 --> 00:36:08,279
processor is running<font color="#E5E5E5"> on it makes it very</font>

968
00:36:06,599 --> 00:36:12,420
easy<font color="#E5E5E5"> to actually set up and run these</font>

969
00:36:08,279 --> 00:36:14,130
systems<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> and being familiar with the</font>

970
00:36:12,420 --> 00:36:16,200
build routes to chain as well<font color="#E5E5E5"> makes it</font>

971
00:36:14,130 --> 00:36:18,210
possible for you to<font color="#CCCCCC"> actually build for C</font>

972
00:36:16,200 --> 00:36:19,499
as well so you<font color="#E5E5E5"> can build more complex</font>

973
00:36:18,210 --> 00:36:21,210
things if you want to install your<font color="#E5E5E5"> own</font>

974
00:36:19,499 --> 00:36:23,098
<font color="#E5E5E5">little root kit on an IOT device etc you</font>

975
00:36:21,210 --> 00:36:24,420
can build for<font color="#E5E5E5"> it so the reason of all</font>

976
00:36:23,099 --> 00:36:26,670
this initially now in fact it was

977
00:36:24,420 --> 00:36:28,980
<font color="#CCCCCC">because</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> were building a particular</font>

978
00:36:26,670 --> 00:36:30,450
<font color="#CCCCCC">root kit for a number</font><font color="#E5E5E5"> of IOT devices and</font>

979
00:36:28,980 --> 00:36:31,529
they were<font color="#CCCCCC"> using different</font><font color="#E5E5E5"> process</font>

980
00:36:30,450 --> 00:36:32,970
different architectures<font color="#E5E5E5"> wanted to go</font>

981
00:36:31,529 --> 00:36:34,410
<font color="#E5E5E5">through and understand how that would</font>

982
00:36:32,970 --> 00:36:36,868
<font color="#CCCCCC">work across</font><font color="#E5E5E5"> across these different</font>

983
00:36:34,410 --> 00:36:40,680
<font color="#CCCCCC">scenarios</font><font color="#E5E5E5"> when setting up this kind of</font>

984
00:36:36,869 --> 00:36:42,089
this<font color="#E5E5E5"> kind of VM it's a we want to keep</font>

985
00:36:40,680 --> 00:36:44,519
it small<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the whole thing including</font>

986
00:36:42,089 --> 00:36:48,960
<font color="#CCCCCC">all the</font><font color="#E5E5E5"> 14 different simulations is 285</font>

987
00:36:44,519 --> 00:36:51,390
<font color="#E5E5E5">megabytes that's it's very like but then</font>

988
00:36:48,960 --> 00:36:53,759
you had to strip<font color="#E5E5E5"> all out all the gooey</font>

989
00:36:51,390 --> 00:36:56,640
<font color="#CCCCCC">stuff and everything like that so</font><font color="#E5E5E5"> so we</font>

990
00:36:53,759 --> 00:36:58,109
had to had some trouble getting<font color="#CCCCCC"> the</font>

991
00:36:56,640 --> 00:37:00,390
right terminal<font color="#E5E5E5"> outputs and things like</font>

992
00:36:58,109 --> 00:37:01,799
that<font color="#CCCCCC"> so</font><font color="#E5E5E5"> a bit of tuning but it's very</font>

993
00:37:00,390 --> 00:37:03,089
<font color="#E5E5E5">comfortable not at a place</font><font color="#CCCCCC"> like weren't</font>

994
00:37:01,799 --> 00:37:04,739
<font color="#E5E5E5">to set up now</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> go and</font>

995
00:37:03,089 --> 00:37:06,269
download a piece<font color="#E5E5E5"> of</font><font color="#CCCCCC"> firmware or</font><font color="#E5E5E5"> firmware</font>

996
00:37:04,739 --> 00:37:07,950
<font color="#E5E5E5">update thing we can actually run a</font>

997
00:37:06,269 --> 00:37:09,660
<font color="#E5E5E5">particular likely firmware binary for</font>

998
00:37:07,950 --> 00:37:11,669
<font color="#CCCCCC">the for the web server for the API for</font>

999
00:37:09,660 --> 00:37:13,049
<font color="#E5E5E5">something else just throw it in there it</font>

1000
00:37:11,670 --> 00:37:14,579
normally executes the<font color="#CCCCCC"> points to</font><font color="#E5E5E5"> the</font>

1001
00:37:13,049 --> 00:37:16,200
<font color="#E5E5E5">right our libraries and and it's kind of</font>

1002
00:37:14,579 --> 00:37:19,489
good<font color="#E5E5E5"> to go so it makes it a really nice</font>

1003
00:37:16,200 --> 00:37:19,489
<font color="#E5E5E5">and easy process to go through them</font>

1004
00:37:19,559 --> 00:37:23,920
<font color="#E5E5E5">so yeah so much it makes us go to the</font>

1005
00:37:22,269 --> 00:37:26,258
pits we can debug<font color="#E5E5E5"> goats if it's very</font>

1006
00:37:23,920 --> 00:37:27,579
quickly sometimes<font color="#CCCCCC"> allows us PC to run</font>

1007
00:37:26,259 --> 00:37:29,140
like the full component<font color="#CCCCCC"> for the device</font>

1008
00:37:27,579 --> 00:37:30,519
as well<font color="#E5E5E5"> so we've used this to do fuzzing</font>

1009
00:37:29,140 --> 00:37:32,109
across like the web servers a device

1010
00:37:30,519 --> 00:37:33,879
<font color="#CCCCCC">little running</font><font color="#E5E5E5"> and the way they actually</font>

1011
00:37:32,109 --> 00:37:35,170
the bill even<font color="#CCCCCC"> a device as opposed to</font>

1012
00:37:33,880 --> 00:37:36,940
downloading<font color="#E5E5E5"> the source code of the web</font>

1013
00:37:35,170 --> 00:37:38,559
server<font color="#E5E5E5"> because a lot</font><font color="#CCCCCC"> of the time the</font>

1014
00:37:36,940 --> 00:37:40,180
manufacturers actually<font color="#E5E5E5"> adapt</font><font color="#CCCCCC"> a code they</font>

1015
00:37:38,559 --> 00:37:42,730
will<font color="#E5E5E5"> change it or add things</font><font color="#CCCCCC"> it will add</font>

1016
00:37:40,180 --> 00:37:44,618
<font color="#CCCCCC">particular bits and pieces</font><font color="#E5E5E5"> and take</font>

1017
00:37:42,730 --> 00:37:46,359
things<font color="#CCCCCC"> away so it makes it much more</font>

1018
00:37:44,619 --> 00:37:52,509
reliable<font color="#E5E5E5"> bill to do with this kind of</font>

1019
00:37:46,359 --> 00:37:54,910
instrumentation so yeah so what do you

1020
00:37:52,509 --> 00:37:57,220
<font color="#E5E5E5">need to know to be able to program</font>

1021
00:37:54,910 --> 00:37:59,769
assembly for<font color="#CCCCCC"> energy well it's actually a</font>

1022
00:37:57,220 --> 00:38:01,058
lot less<font color="#CCCCCC"> than most</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> think if we</font>

1023
00:37:59,769 --> 00:38:04,538
notice<font color="#E5E5E5"> that people are</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> afraid</font><font color="#CCCCCC"> to</font>

1024
00:38:01,059 --> 00:38:06,400
jump into<font color="#E5E5E5"> a new architecture but what</font>

1025
00:38:04,539 --> 00:38:09,730
you<font color="#CCCCCC"> really</font><font color="#E5E5E5"> need to know</font><font color="#CCCCCC"> is how to load</font>

1026
00:38:06,400 --> 00:38:11,380
and<font color="#E5E5E5"> store between register memory how to</font>

1027
00:38:09,730 --> 00:38:14,799
<font color="#E5E5E5">load an effective address into memory or</font>

1028
00:38:11,380 --> 00:38:17,170
an immediate<font color="#E5E5E5"> of course how to shift bits</font>

1029
00:38:14,799 --> 00:38:19,599
left and right and shifting is important

1030
00:38:17,170 --> 00:38:24,940
when loading let's say a 32-bit integer

1031
00:38:19,599 --> 00:38:26,890
<font color="#E5E5E5">into a</font><font color="#CCCCCC"> 32-bit register in a fixed</font><font color="#E5E5E5"> size</font>

1032
00:38:24,940 --> 00:38:28,930
instruction set<font color="#E5E5E5"> because you have</font><font color="#CCCCCC"> four</font>

1033
00:38:26,890 --> 00:38:31,868
byte instruction and you<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> four</font>

1034
00:38:28,930 --> 00:38:34,779
<font color="#E5E5E5">byte size integer so that leaves no bite</font>

1035
00:38:31,869 --> 00:38:36,849
for<font color="#CCCCCC"> the opcode</font><font color="#E5E5E5"> so you have to load half</font>

1036
00:38:34,779 --> 00:38:39,450
the integer first shift it left or right

1037
00:38:36,849 --> 00:38:41,859
<font color="#CCCCCC">whatever</font><font color="#E5E5E5"> roll it right then I guess</font>

1038
00:38:39,450 --> 00:38:43,328
<font color="#CCCCCC">let's shift it left</font><font color="#E5E5E5"> and then add the</font>

1039
00:38:41,859 --> 00:38:48,609
second part<font color="#E5E5E5"> so you build it</font>

1040
00:38:43,329 --> 00:38:50,490
<font color="#CCCCCC">incrementally</font><font color="#E5E5E5"> performing and or and</font><font color="#CCCCCC"> then</font>

1041
00:38:48,609 --> 00:38:53,890
subtract of<font color="#E5E5E5"> course very important</font>

1042
00:38:50,490 --> 00:38:57,549
especially and<font color="#E5E5E5"> and I need you to be able</font>

1043
00:38:53,890 --> 00:38:59,319
<font color="#E5E5E5">to branch both by displacement and by</font>

1044
00:38:57,549 --> 00:39:01,839
content of memory location<font color="#E5E5E5"> when you're</font>

1045
00:38:59,319 --> 00:39:04,750
talking<font color="#E5E5E5"> about imported</font><font color="#CCCCCC"> fashions and</font><font color="#E5E5E5"> by</font>

1046
00:39:01,839 --> 00:39:06,970
register of course as well you need<font color="#E5E5E5"> to</font>

1047
00:39:04,750 --> 00:39:08,740
know how parameters are passed<font color="#E5E5E5"> to a call</font>

1048
00:39:06,970 --> 00:39:09,788
or a<font color="#E5E5E5"> Cisco if they're pass through the</font>

1049
00:39:08,740 --> 00:39:11,589
stack at<font color="#CCCCCC"> they're passed through</font>

1050
00:39:09,789 --> 00:39:13,720
registers and which<font color="#CCCCCC"> register is their</font>

1051
00:39:11,589 --> 00:39:15,810
pasture<font color="#E5E5E5"> and you need to know a little</font>

1052
00:39:13,720 --> 00:39:18,209
bit<font color="#CCCCCC"> about the stack frame</font>

1053
00:39:15,810 --> 00:39:20,130
and there are relevant registers<font color="#E5E5E5"> so that</font>

1054
00:39:18,210 --> 00:39:22,890
would be the stack pointer of course<font color="#E5E5E5"> the</font>

1055
00:39:20,130 --> 00:39:24,630
base pointer and then hopefully<font color="#E5E5E5"> a little</font>

1056
00:39:22,890 --> 00:39:26,730
<font color="#CCCCCC">bit about which parameter registers are</font>

1057
00:39:24,630 --> 00:39:28,260
used<font color="#E5E5E5"> for fast calls and non-volatile</font>

1058
00:39:26,730 --> 00:39:32,870
registers which registers do I need to

1059
00:39:28,260 --> 00:39:35,640
<font color="#CCCCCC">preserve you know breaks off so loading</font>

1060
00:39:32,870 --> 00:39:37,920
data<font color="#CCCCCC"> from register to memory would be</font>

1061
00:39:35,640 --> 00:39:39,779
<font color="#CCCCCC">the</font><font color="#E5E5E5"> equivalent of these six limits x86</font>

1062
00:39:37,920 --> 00:39:42,660
instruction moving from location

1063
00:39:39,780 --> 00:39:45,530
thousand to<font color="#CCCCCC"> a X</font><font color="#E5E5E5"> storing be exactly the</font>

1064
00:39:42,660 --> 00:39:49,230
universe<font color="#E5E5E5"> storing a X into address</font><font color="#CCCCCC"> 1,000</font>

1065
00:39:45,530 --> 00:39:51,360
and locating<font color="#E5E5E5"> these type</font><font color="#CCCCCC"> of instructions</font>

1066
00:39:49,230 --> 00:39:54,170
in<font color="#CCCCCC"> arm or</font><font color="#E5E5E5"> mixer is quite easy what's</font>

1067
00:39:51,360 --> 00:39:56,610
known that you need them

1068
00:39:54,170 --> 00:39:58,950
shifting would be a loading effective

1069
00:39:56,610 --> 00:40:01,050
address<font color="#CCCCCC"> the instruction this could be</font>

1070
00:39:58,950 --> 00:40:04,680
either using an equivalent instruction

1071
00:40:01,050 --> 00:40:06,720
or loading<font color="#CCCCCC"> an</font><font color="#E5E5E5"> immediate address into</font>

1072
00:40:04,680 --> 00:40:09,440
memory if you<font color="#E5E5E5"> know what</font><font color="#CCCCCC"> you're what</font>

1073
00:40:06,720 --> 00:40:09,439
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> looking for us</font>

1074
00:40:09,970 --> 00:40:13,480
shifting bits of course<font color="#E5E5E5"> its equivalent</font>

1075
00:40:11,680 --> 00:40:15,730
of shift left<font color="#E5E5E5"> and right and there is</font>

1076
00:40:13,480 --> 00:40:19,210
<font color="#CCCCCC">sometimes a bit</font><font color="#E5E5E5"> of problems with</font>

1077
00:40:15,730 --> 00:40:20,890
<font color="#E5E5E5">arithmetic and</font><font color="#CCCCCC"> normal shape</font><font color="#E5E5E5"> so you have</font>

1078
00:40:19,210 --> 00:40:23,410
to<font color="#E5E5E5"> determine which one</font><font color="#CCCCCC"> is being used</font>

1079
00:40:20,890 --> 00:40:27,520
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is something that I ran into</font><font color="#CCCCCC"> on the</font>

1080
00:40:23,410 --> 00:40:28,660
go IP actually before<font color="#E5E5E5"> we end</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> or</font>

1081
00:40:27,520 --> 00:40:34,440
instructions is the same thing<font color="#CCCCCC"> they're</font>

1082
00:40:28,660 --> 00:40:50,410
<font color="#E5E5E5">being able to</font><font color="#CCCCCC"> and/or</font><font color="#E5E5E5"> just like in x86</font>

1083
00:40:34,440 --> 00:40:51,190
<font color="#CCCCCC">when it comes to brandishing yeah</font>

1084
00:40:50,410 --> 00:40:54,460
exactly

1085
00:40:51,190 --> 00:40:55,750
and yeah I'm ready

1086
00:40:54,460 --> 00:41:00,640
yeah it's<font color="#E5E5E5"> all started branch by the</font>

1087
00:40:55,750 --> 00:41:02,730
register as<font color="#CCCCCC"> well regarding this I think</font>

1088
00:41:00,640 --> 00:41:06,368
<font color="#CCCCCC">you'll probably</font><font color="#E5E5E5"> cover this quite quickly</font>

1089
00:41:02,730 --> 00:41:09,609
sure<font color="#CCCCCC"> how parameters passed this is</font>

1090
00:41:06,369 --> 00:41:12,609
<font color="#E5E5E5">example from x64 it's using registers</font>

1091
00:41:09,609 --> 00:41:16,330
<font color="#E5E5E5">the most arm implementations do that as</font>

1092
00:41:12,609 --> 00:41:20,190
well same thing for<font color="#CCCCCC"> MIPS</font><font color="#E5E5E5"> using the lower</font>

1093
00:41:16,330 --> 00:41:22,450
registers and then<font color="#E5E5E5"> up so this is yeah</font>

1094
00:41:20,190 --> 00:41:23,589
<font color="#E5E5E5">once you see one of</font><font color="#CCCCCC"> the proceed quality</font>

1095
00:41:22,450 --> 00:41:25,750
you can actually<font color="#E5E5E5"> do some of this quite</font>

1096
00:41:23,589 --> 00:41:28,240
easily<font color="#E5E5E5"> and the stack frame</font><font color="#CCCCCC"> we looked a</font>

1097
00:41:25,750 --> 00:41:30,010
little bit of that if there would be

1098
00:41:28,240 --> 00:41:32,500
time we could look more at each of these

1099
00:41:30,010 --> 00:41:34,660
examples<font color="#E5E5E5"> but let's just mean that we</font>

1100
00:41:32,500 --> 00:41:36,339
went<font color="#E5E5E5"> through this a bit in the demo so</font>

1101
00:41:34,660 --> 00:41:38,830
yeah it's basically<font color="#E5E5E5"> uh satisfies to be</font>

1102
00:41:36,339 --> 00:41:40,750
up but<font color="#E5E5E5"> this is different calls and</font><font color="#CCCCCC"> then</font>

1103
00:41:38,830 --> 00:41:41,890
stack frames for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> speech processor and</font>

1104
00:41:40,750 --> 00:41:43,420
if<font color="#E5E5E5"> you understood yeah please feel free</font>

1105
00:41:41,890 --> 00:41:45,700
to have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> look for them and it gives the</font>

1106
00:41:43,420 --> 00:41:47,200
<font color="#CCCCCC">ability to to be able</font><font color="#E5E5E5"> to start coding</font>

1107
00:41:45,700 --> 00:41:49,480
<font color="#CCCCCC">assembly for these different processes</font>

1108
00:41:47,200 --> 00:41:51,848
very quickly and understand what's going

1109
00:41:49,480 --> 00:41:54,960
on within them<font color="#CCCCCC"> for armful MIPS</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> for</font>

1110
00:41:51,849 --> 00:41:58,020
the<font color="#E5E5E5"> 14 other</font><font color="#CCCCCC"> ones they're in there</font><font color="#E5E5E5"> yep</font>

1111
00:41:54,960 --> 00:42:00,910
yeah so what do you need to<font color="#E5E5E5"> know well</font>

1112
00:41:58,020 --> 00:42:02,720
not much<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to do this you just</font>

1113
00:42:00,910 --> 00:42:05,609
<font color="#E5E5E5">need to know like</font><font color="#CCCCCC"> a few of</font><font color="#E5E5E5"> the</font>

1114
00:42:02,720 --> 00:42:07,980
<font color="#CCCCCC">pieces how</font><font color="#E5E5E5"> to read this assembly produce</font>

1115
00:42:05,609 --> 00:42:10,319
very basic assembly<font color="#E5E5E5"> understand like the</font>

1116
00:42:07,980 --> 00:42:13,650
procedure<font color="#E5E5E5"> entry return procedures how</font>

1117
00:42:10,320 --> 00:42:15,300
things branch<font color="#E5E5E5"> in branch out and action</font>

1118
00:42:13,650 --> 00:42:16,980
modified<font color="#CCCCCC"> car binary something that's the</font>

1119
00:42:15,300 --> 00:42:24,960
easy among<font color="#CCCCCC"> part once like all the other</font>

1120
00:42:16,980 --> 00:42:26,190
stuff<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> do this your machine</font>

1121
00:42:24,960 --> 00:42:28,530
<font color="#CCCCCC">goodness at</font><font color="#E5E5E5"> the end but they</font><font color="#CCCCCC"> hear him</font>

1122
00:42:26,190 --> 00:42:30,060
we've virtualized one of the devices<font color="#CCCCCC"> we</font>

1123
00:42:28,530 --> 00:42:33,150
found online<font color="#E5E5E5"> and</font><font color="#CCCCCC"> is running</font><font color="#E5E5E5"> it and then</font>

1124
00:42:30,060 --> 00:42:36,270
<font color="#E5E5E5">side</font><font color="#CCCCCC"> them emulator completely so you can</font>

1125
00:42:33,150 --> 00:42:39,420
do full testing of<font color="#E5E5E5"> this particular</font>

1126
00:42:36,270 --> 00:42:41,099
device<font color="#CCCCCC"> so what next</font>

1127
00:42:39,420 --> 00:42:42,930
well after you<font color="#E5E5E5"> virtualizes what what can</font>

1128
00:42:41,099 --> 00:42:45,510
<font color="#E5E5E5">you do you can algorithms you can</font><font color="#CCCCCC"> look</font>

1129
00:42:42,930 --> 00:42:47,520
procedures and functions<font color="#CCCCCC"> once you start</font>

1130
00:42:45,510 --> 00:42:49,560
lifting relevant<font color="#CCCCCC"> functions you post them</font>

1131
00:42:47,520 --> 00:42:51,570
offline<font color="#E5E5E5"> you can go through and single</font>

1132
00:42:49,560 --> 00:42:53,460
<font color="#CCCCCC">function text on what's happening and</font>

1133
00:42:51,570 --> 00:42:55,670
the VM can really really basically speed

1134
00:42:53,460 --> 00:43:05,160
up this process will mean by this

1135
00:42:55,670 --> 00:43:06,480
<font color="#E5E5E5">basically you</font><font color="#CCCCCC"> can run instead of twenty</font>

1136
00:43:05,160 --> 00:43:08,940
of<font color="#E5E5E5"> these virtual machines they're very</font>

1137
00:43:06,480 --> 00:43:10,500
small they're very very quick<font color="#E5E5E5"> to run run</font>

1138
00:43:08,940 --> 00:43:12,119
parallel<font color="#E5E5E5"> and you can go through</font><font color="#CCCCCC"> and fuzz</font>

1139
00:43:10,500 --> 00:43:14,730
each one of them a different<font color="#E5E5E5"> parts of</font>

1140
00:43:12,119 --> 00:43:16,710
the<font color="#CCCCCC"> application you can go</font><font color="#E5E5E5"> and examine</font>

1141
00:43:14,730 --> 00:43:17,700
that<font color="#E5E5E5"> will keep the others going so it</font>

1142
00:43:16,710 --> 00:43:20,190
gives you a lot of flexibility to

1143
00:43:17,700 --> 00:43:24,060
<font color="#E5E5E5">quickly understand issues within their</font>

1144
00:43:20,190 --> 00:43:25,530
<font color="#E5E5E5">IT devices themselves and of course I</font>

1145
00:43:24,060 --> 00:43:27,150
mentioned<font color="#E5E5E5"> before there's no risk of</font>

1146
00:43:25,530 --> 00:43:29,310
actually taking<font color="#CCCCCC"> out</font><font color="#E5E5E5"> your device in which</font>

1147
00:43:27,150 --> 00:43:30,540
I've come across multiple times no

1148
00:43:29,310 --> 00:43:32,430
downtime<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the abilities of</font>

1149
00:43:30,540 --> 00:43:34,710
snapshots to restore update<font color="#E5E5E5"> VMs very</font>

1150
00:43:32,430 --> 00:43:37,109
quickly<font color="#CCCCCC"> and of course kernel debugging</font>

1151
00:43:34,710 --> 00:43:39,450
<font color="#CCCCCC">within here um you</font><font color="#E5E5E5"> and with full like a</font>

1152
00:43:37,109 --> 00:43:43,049
<font color="#CCCCCC">gdb support and there's also this we</font>

1153
00:43:39,450 --> 00:43:45,240
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> paint</font><font color="#CCCCCC"> boss vulnerabilities</font>

1154
00:43:43,050 --> 00:43:47,280
using like single UDP packets towards

1155
00:43:45,240 --> 00:43:49,379
<font color="#E5E5E5">many of these devices</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> on custom</font>

1156
00:43:47,280 --> 00:43:50,839
api's you consume these<font color="#CCCCCC"> under castor</font>

1157
00:43:49,380 --> 00:43:53,700
<font color="#E5E5E5">packet</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> take the completely offline</font>

1158
00:43:50,839 --> 00:43:55,710
<font color="#E5E5E5">including cool on servers they use x86</font>

1159
00:43:53,700 --> 00:43:57,598
as the processor and<font color="#CCCCCC"> like I have a</font><font color="#E5E5E5"> lot</font>

1160
00:43:55,710 --> 00:44:00,240
of<font color="#E5E5E5"> memory instead of behind them you can</font>

1161
00:43:57,599 --> 00:44:01,950
dose there have<font color="#CCCCCC"> numerous</font><font color="#E5E5E5"> like web go</font>

1162
00:44:00,240 --> 00:44:03,120
ahead<font color="#E5E5E5"> web server</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> single dose</font>

1163
00:44:01,950 --> 00:44:06,390
packets there and

1164
00:44:03,120 --> 00:44:15,330
<font color="#CCCCCC">nothing for like DB like</font><font color="#E5E5E5"> 80 DB server as</font>

1165
00:44:06,390 --> 00:44:16,830
well<font color="#CCCCCC"> basically the idea behind this well</font>

1166
00:44:15,330 --> 00:44:19,650
it's not too difficult to virtualize and

1167
00:44:16,830 --> 00:44:21,270
execute customer key components<font color="#CCCCCC"> I mean</font>

1168
00:44:19,650 --> 00:44:23,790
supposing an attacking IT systems

1169
00:44:21,270 --> 00:44:25,410
becomes much easier<font color="#E5E5E5"> and it's kind</font><font color="#CCCCCC"> of</font>

1170
00:44:23,790 --> 00:44:27,810
<font color="#CCCCCC">looking for bugs outside with just a</font>

1171
00:44:25,410 --> 00:44:29,879
default<font color="#E5E5E5"> password and the basic things</font>

1172
00:44:27,810 --> 00:44:31,680
<font color="#CCCCCC">that hopefully</font><font color="#E5E5E5"> will get fixed very</font>

1173
00:44:29,880 --> 00:44:34,560
quickly<font color="#E5E5E5"> and hopefully</font><font color="#CCCCCC"> people will start</font>

1174
00:44:31,680 --> 00:44:35,850
<font color="#E5E5E5">fixing those and if there's mentioned</font>

1175
00:44:34,560 --> 00:44:37,290
before<font color="#CCCCCC"> they're basically focused on</font>

1176
00:44:35,850 --> 00:44:39,569
making<font color="#CCCCCC"> her the binary</font><font color="#E5E5E5"> is resilient</font><font color="#CCCCCC"> as</font>

1177
00:44:37,290 --> 00:44:42,300
opposed to actually obfuscating and

1178
00:44:39,570 --> 00:44:44,640
creating resources<font color="#E5E5E5"> within</font><font color="#CCCCCC"> there the</font>

1179
00:44:42,300 --> 00:44:47,070
other<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> mention is system is also</font>

1180
00:44:44,640 --> 00:44:49,230
<font color="#CCCCCC">because</font><font color="#E5E5E5"> within the telecom world</font>

1181
00:44:47,070 --> 00:44:51,900
<font color="#CCCCCC">you really cannot</font><font color="#E5E5E5"> afford to to buy</font>

1182
00:44:49,230 --> 00:44:53,940
things<font color="#CCCCCC"> like</font><font color="#E5E5E5"> mmm ease or HSS azure HL</font>

1183
00:44:51,900 --> 00:44:56,340
<font color="#CCCCCC">ours to test and virtual</font><font color="#E5E5E5"> test and and</font>

1184
00:44:53,940 --> 00:44:58,170
attack<font color="#CCCCCC"> the vendors</font><font color="#E5E5E5"> don't like to give</font>

1185
00:44:56,340 --> 00:44:59,610
you to<font color="#E5E5E5"> them and</font><font color="#CCCCCC"> the people work with and</font>

1186
00:44:58,170 --> 00:45:02,070
then the telecom operators they don't

1187
00:44:59,610 --> 00:45:03,720
like to give you the access<font color="#CCCCCC"> to test them</font>

1188
00:45:02,070 --> 00:45:05,100
their test<font color="#E5E5E5"> beds do these like very</font><font color="#CCCCCC"> very</font>

1189
00:45:03,720 --> 00:45:08,520
expensive elements that cost hundreds<font color="#E5E5E5"> of</font>

1190
00:45:05,100 --> 00:45:09,900
thousands<font color="#CCCCCC"> of dollars but during testing</font>

1191
00:45:08,520 --> 00:45:11,970
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> lift or more of these elements</font>

1192
00:45:09,900 --> 00:45:13,560
<font color="#E5E5E5">and you can't take firmware back and you</font>

1193
00:45:11,970 --> 00:45:15,060
can set up<font color="#CCCCCC"> your</font><font color="#E5E5E5"> own instrumentation so</font>

1194
00:45:13,560 --> 00:45:17,130
you<font color="#E5E5E5"> actually then use similar</font>

1195
00:45:15,060 --> 00:45:20,000
methodology that we<font color="#E5E5E5"> use to</font><font color="#CCCCCC"> test things</font>

1196
00:45:17,130 --> 00:45:22,140
like<font color="#CCCCCC"> Network Devices and for networks</font>

1197
00:45:20,000 --> 00:45:26,490
that you would otherwise<font color="#E5E5E5"> never get</font>

1198
00:45:22,140 --> 00:45:29,129
access to awesome<font color="#E5E5E5"> thank you so much for</font>

1199
00:45:26,490 --> 00:45:32,448
your time<font color="#E5E5E5"> and are there any</font><font color="#CCCCCC"> questions</font>

1200
00:45:29,130 --> 00:45:32,449
[Music]

1201
00:45:35,200 --> 00:45:38,500
[Music]

1202
00:45:41,470 --> 00:45:47,149
<font color="#CCCCCC">I think</font><font color="#E5E5E5"> eventually we'll</font><font color="#CCCCCC"> be selling</font><font color="#E5E5E5"> so</font>

1203
00:45:44,450 --> 00:45:49,129
the<font color="#CCCCCC"> marble</font><font color="#E5E5E5"> factory can will it be open</font>

1204
00:45:47,150 --> 00:45:51,100
<font color="#E5E5E5">source or you're using</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> your own</font>

1205
00:45:49,130 --> 00:45:53,570
tools or what's<font color="#E5E5E5"> your plan about this</font>

1206
00:45:51,100 --> 00:45:55,400
<font color="#E5E5E5">well we haven't discussed that</font><font color="#CCCCCC"> in-depth</font>

1207
00:45:53,570 --> 00:45:58,880
really it's a it's a tool<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we use</font>

1208
00:45:55,400 --> 00:46:00,980
<font color="#E5E5E5">for learning and</font><font color="#CCCCCC"> for exploring</font><font color="#E5E5E5"> so it's</font>

1209
00:45:58,880 --> 00:46:02,750
yeah that's up<font color="#CCCCCC"> in the air still</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font>

1210
00:46:00,980 --> 00:46:04,730
<font color="#CCCCCC">eventually released as open source to be</font>

1211
00:46:02,750 --> 00:46:14,390
<font color="#CCCCCC">able to to set up an instrument</font><font color="#E5E5E5"> yeah</font>

1212
00:46:04,730 --> 00:46:16,190
<font color="#E5E5E5">people do that yes sure</font>

1213
00:46:14,390 --> 00:46:17,629
<font color="#CCCCCC">so I think</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> plan is</font><font color="#E5E5E5"> will be like to</font>

1214
00:46:16,190 --> 00:46:21,350
release that<font color="#E5E5E5"> and like what people</font>

1215
00:46:17,630 --> 00:46:23,770
<font color="#E5E5E5">actually use it</font><font color="#CCCCCC"> and play with</font><font color="#E5E5E5"> any more</font>

1216
00:46:21,350 --> 00:46:23,770
<font color="#E5E5E5">questions</font>

1217
00:46:24,900 --> 00:46:34,109
well then thanks<font color="#E5E5E5"> Flo yeah sorry there's</font>

1218
00:46:31,859 --> 00:46:35,970
a lot<font color="#E5E5E5"> of different devices out there to</font>

1219
00:46:34,109 --> 00:46:39,920
think there are some<font color="#CCCCCC"> categories that are</font>

1220
00:46:35,970 --> 00:46:42,089
better<font color="#E5E5E5"> to look at if I wanted to start</font>

1221
00:46:39,920 --> 00:46:44,249
category some device like we have

1222
00:46:42,089 --> 00:46:47,400
<font color="#E5E5E5">network equipment we have</font><font color="#CCCCCC"> CBS</font><font color="#E5E5E5"> we'd have</font>

1223
00:46:44,249 --> 00:46:48,598
professional equipment<font color="#CCCCCC"> I only go for the</font>

1224
00:46:47,400 --> 00:46:50,039
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> download firmware</font>

1225
00:46:48,599 --> 00:46:54,660
from<font color="#CCCCCC"> think and try it at home</font><font color="#E5E5E5"> just</font>

1226
00:46:50,039 --> 00:46:55,859
anything<font color="#E5E5E5"> yeah connected like to to</font>

1227
00:46:54,660 --> 00:47:01,950
management<font color="#CCCCCC"> or two things that have to be</font>

1228
00:46:55,859 --> 00:47:05,578
<font color="#E5E5E5">kept in sync and</font><font color="#CCCCCC"> you can also understand</font>

1229
00:47:01,950 --> 00:47:06,749
the impact in<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and a bigger way so for</font>

1230
00:47:05,579 --> 00:47:08,549
me it's personally interesting to look

1231
00:47:06,749 --> 00:47:10,529
at devices<font color="#E5E5E5"> how they spread out where</font>

1232
00:47:08,549 --> 00:47:16,589
they<font color="#CCCCCC"> are</font><font color="#E5E5E5"> and ones</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I couldn't</font>

1233
00:47:10,529 --> 00:47:19,769
normally accessible<font color="#CCCCCC"> remote</font><font color="#E5E5E5"> methods take</font>

1234
00:47:16,589 --> 00:47:21,450
<font color="#E5E5E5">a couple of like IOT web service</font><font color="#CCCCCC"> and</font>

1235
00:47:19,769 --> 00:47:23,129
<font color="#CCCCCC">they</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to see different</font><font color="#E5E5E5"> like IOT</font>

1236
00:47:21,450 --> 00:47:24,990
of innovation they will a very<font color="#CCCCCC"> even even</font>

1237
00:47:23,130 --> 00:47:27,029
show<font color="#CCCCCC"> done</font><font color="#E5E5E5"> quickly we will quickly see</font>

1238
00:47:24,990 --> 00:47:28,859
<font color="#E5E5E5">just patterns of devices and you'll be</font>

1239
00:47:27,029 --> 00:47:30,779
<font color="#CCCCCC">like</font><font color="#E5E5E5"> okay this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> this type of system is</font>

1240
00:47:28,859 --> 00:47:33,598
<font color="#E5E5E5">this</font><font color="#CCCCCC"> tiny</font><font color="#E5E5E5"> system and even just like</font>

1241
00:47:30,779 --> 00:47:34,980
looking at HTTP ports across different

1242
00:47:33,599 --> 00:47:37,710
countries you'll again then identify

1243
00:47:34,980 --> 00:47:39,480
them very very<font color="#E5E5E5"> quickly so</font><font color="#CCCCCC"> yeah I look at</font>

1244
00:47:37,710 --> 00:47:42,829
those<font color="#CCCCCC"> a little one is he get firmware</font>

1245
00:47:39,480 --> 00:47:42,829
updates from the manufacturer

1246
00:47:44,260 --> 00:47:50,440
yeah thank<font color="#E5E5E5"> you both</font><font color="#CCCCCC"> then we are done for</font>

1247
00:47:46,750 --> 00:47:52,030
today<font color="#E5E5E5"> hope you</font><font color="#CCCCCC"> enjoyed the day please</font><font color="#E5E5E5"> if</font>

1248
00:47:50,440 --> 00:47:53,710
<font color="#E5E5E5">you can join us for the German night</font>

1249
00:47:52,030 --> 00:47:56,140
<font color="#E5E5E5">which starts at 6 p.m.</font>

1250
00:47:53,710 --> 00:47:59,609
downstairs<font color="#CCCCCC"> have a great evening and</font>

1251
00:47:56,140 --> 00:48:01,080
<font color="#E5E5E5">tomorrow we will start at</font><font color="#CCCCCC"> 9 a.m. okay</font>

1252
00:47:59,609 --> 00:48:05,848
<font color="#CCCCCC">thank you</font><font color="#E5E5E5"> very much</font>

1253
00:48:01,080 --> 00:48:05,848
[Applause]

