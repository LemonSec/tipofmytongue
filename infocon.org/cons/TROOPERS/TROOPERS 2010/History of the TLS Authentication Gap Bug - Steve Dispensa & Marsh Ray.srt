1
00:00:02,699 --> 00:00:03,149
UK

2
00:00:03,149 --> 00:00:07,930
to 10

3
00:00:07,930 --> 00:00:11,840
okay and again webcam

4
00:00:11,840 --> 00:00:14,920
okay lunch I hope you on Etsy

5
00:00:14,920 --> 00:00:18,259
tie up the complaint next presentation
am done by

6
00:00:18,259 --> 00:00:21,619
mastery and discontent and they were
talking about

7
00:00:21,619 --> 00:00:25,210
as well in TLS want a pic an

8
00:00:25,210 --> 00:00:28,339
it wants very all and crack cocaine
flock

9
00:00:28,339 --> 00:00:32,989
year and because 10 kinda you the texts
were discovered at

10
00:00:32,989 --> 00:00:36,010
and I think it's a very interesting
topic

11
00:00:36,010 --> 00:00:39,489
an but get all the cutting stuff from

12
00:00:39,489 --> 00:00:42,489
martians the soul thanks

13
00:00:42,489 --> 00:00:46,370
while walking and if you do fall asleep

14
00:00:46,370 --> 00:00:51,320
K not to snore yes and so I'm dispenser

15
00:00:51,320 --> 00:00:56,440
I'm archery and we're going to spend an
hour talking about

16
00:00:56,440 --> 00:01:00,070
the a little bit about the history and
the IOC dad

17
00:01:00,070 --> 00:01:04,150
and then more probably and that's in
related topics

18
00:01:04,150 --> 00:01:07,220
closely cause-related

19
00:01:07,220 --> 00:01:12,090
indication SSL in general now we spend
all their time talking about the tax

20
00:01:12,090 --> 00:01:16,540
this is going to be mostly again a
two-person panel discussion

21
00:01:16,540 --> 00:01:20,250
yeah more than streamlined slide after
sliding

22
00:01:20,250 --> 00:01:23,830
really we work together and we argue a
lot so %um

23
00:01:23,830 --> 00:01:27,330
in ninety that come out so I'd like to
see a.m.

24
00:01:27,330 --> 00:01:30,710
their questions place just raise animal

25
00:01:30,710 --> 00:01:34,450
into great detail whenever I get
interesting

26
00:01:34,450 --> 00:01:37,580
are I'm fingerlings direct well

27
00:01:37,580 --> 00:01:40,930
yeah I'm I Marjorie M a software
developer and

28
00:01:40,930 --> 00:01:45,500
I was working on some other software
contractor and I came across

29
00:01:45,500 --> 00:01:48,800
about in SSL and not just

30
00:01:48,800 --> 00:01:52,190
SSL like open SSL the library but the
protocol itself

31
00:01:52,190 --> 00:01:58,020
and as a software developer at it
interests me to think about how these

32
00:01:58,020 --> 00:02:00,570
things get engineered and how bugs might
get it

33
00:02:00,570 --> 00:02:03,710
engineered in how something like this
might go on

34
00:02:03,710 --> 00:02:07,020
undetected her fourteen years or so and

35
00:02:07,020 --> 00:02:10,530
now presentations like this are required
to have this

36
00:02:10,530 --> 00:02:15,390
that diagram and basically we have

37
00:02:15,390 --> 00:02:20,300
TCPIP at the at the network layer TLS is
the protocol

38
00:02:20,300 --> 00:02:23,950
that's intended to provide secure
transport

39
00:02:23,950 --> 00:02:28,930
and it was recalled SSL for the Secure
Sockets Layer

40
00:02:28,930 --> 00:02:33,960
and that's what people wanted was a drop
in where they could put on top

41
00:02:33,960 --> 00:02:37,880
SSL that would make their existing
applications magically secure

42
00:02:37,880 --> 00:02:40,960
and I think sergei was

43
00:02:40,960 --> 00:02:44,330
was talking a little bit about that this
morning and I think they were going to

44
00:02:44,330 --> 00:02:45,660
echo what are the things that

45
00:02:45,660 --> 00:02:49,569
that he said we're really in the same
wavelength about this

46
00:02:49,569 --> 00:02:52,900
I'm so you would typically get

47
00:02:52,900 --> 00:02:56,290
your SSL from an SSL TLS library like
open SSL

48
00:02:56,290 --> 00:03:00,950
or can you pls if your Microsoft program
at my BS channel

49
00:03:00,950 --> 00:03:05,730
and and then some the other larger
corporations in browser vendors

50
00:03:05,730 --> 00:03:09,600
tend to write their own and on top a
veces el

51
00:03:09,600 --> 00:03:13,630
you would be calling it with an HTTPS
library you were doing

52
00:03:13,630 --> 00:03:17,100
WebWork it is like my SSL an Apache

53
00:03:17,100 --> 00:03:21,540
our index is awful turn I ask you
something the thing that connects the

54
00:03:21,540 --> 00:03:24,350
dots between Napoli protocol that's not
supposed to happen anything at all about

55
00:03:24,350 --> 00:03:25,099
SSL

56
00:03:25,099 --> 00:03:29,319
and the open as a library which at least
need one function call to turn on

57
00:03:29,319 --> 00:03:32,390
SSL and instead asked

58
00:03:32,390 --> 00:03:35,980
you know what a night right HTTP library
because it's

59
00:03:35,980 --> 00:03:39,849
essentially HD TP layered on top with
SSL

60
00:03:39,849 --> 00:03:43,360
but in there is a bit of code in there
that relates

61
00:03:43,360 --> 00:03:46,670
and HTTP and SSL

62
00:03:46,670 --> 00:03:50,530
and there's even you know ssl/tls is
defined by

63
00:03:50,530 --> 00:03:54,760
and IETF RFC but they have a different

64
00:03:54,760 --> 00:03:59,260
RFC number for each protocol that
specifies how to do things like

65
00:03:59,260 --> 00:04:02,860
a check the certificate in a way that is
an

66
00:04:02,860 --> 00:04:06,920
appropriate for that critical and then a
quick application code

67
00:04:06,920 --> 00:04:10,819
I runs on top of that so

68
00:04:10,819 --> 00:04:14,120
what I found was man in the middle
attack

69
00:04:14,120 --> 00:04:17,239
against ssl/tls and

70
00:04:17,239 --> 00:04:20,479
and that and attack comes from

71
00:04:20,479 --> 00:04:24,669
an authentication gap SSL dealers can
renegotiate

72
00:04:24,669 --> 00:04:29,430
but the and session before the
renegotiation

73
00:04:29,430 --> 00:04:33,090
after are not strongly bound together
there's nothing that cryptographically

74
00:04:33,090 --> 00:04:34,270
ties them together

75
00:04:34,270 --> 00:04:37,770
and so we're going to talk about as
assertive than

76
00:04:37,770 --> 00:04:41,219
overview slide an talk a bit about

77
00:04:41,219 --> 00:04:45,309
an overview TLS house discovered

78
00:04:45,309 --> 00:04:50,129
what's invulnerable code is an in the
different medications that are options

79
00:04:50,129 --> 00:04:50,930
for fixing it

80
00:04:50,930 --> 00:04:54,509
can I just quickly break and see if
there's any management on this year

81
00:04:54,509 --> 00:04:57,529
ever seen the videos so we we did

82
00:04:57,529 --> 00:05:02,539
and some other stuff is not in this talk
is now online it's been kind of your

83
00:05:02,539 --> 00:05:05,870
interested in there gory details in the
back story

84
00:05:05,870 --> 00:05:09,240
and mostly magnetized a technical here
yeah and I'm

85
00:05:09,240 --> 00:05:13,059
I didn't set mine know pick up for a a
demo right now but

86
00:05:13,059 --> 00:05:16,699
just come find us sometime in the next
couple days in a big I did give it an

87
00:05:16,699 --> 00:05:17,680
hour we can

88
00:05:17,680 --> 00:05:21,680
tried on your side

89
00:05:21,680 --> 00:05:25,689
okay so as with SSL was originally that
secure Sockets Layer

90
00:05:25,689 --> 00:05:30,009
and it was invented by netscape in 1994

91
00:05:30,009 --> 00:05:34,620
and they had something they called
version one but it never escape the lab

92
00:05:34,620 --> 00:05:38,499
I'm it Steve you're mormon an expert on

93
00:05:38,499 --> 00:05:42,839
internet articles in their histories but
we were able to come up with a lot of

94
00:05:42,839 --> 00:05:43,520
examples

95
00:05:43,520 --> 00:05:47,589
have existing practice in the public
sector for something like a

96
00:05:47,589 --> 00:05:51,569
a cryptographic data protocol back in
1994

97
00:05:51,569 --> 00:05:56,830
yeah I mean actually I'm and curious
what will you guys think

98
00:05:56,830 --> 00:06:00,089
and that's what was twenty think in 1994
with the closest

99
00:06:00,089 --> 00:06:03,539
and prior art SSL

100
00:06:03,539 --> 00:06:08,119
any you can come to mind is a pretty new
stuff

101
00:06:08,119 --> 00:06:11,449
is the plan II personally we we just
can't put this

102
00:06:11,449 --> 00:06:16,779
concept last night over beers or
something here

103
00:06:16,779 --> 00:06:19,800
we can to give anything you know he has
an intrinsic something I'm

104
00:06:19,800 --> 00:06:22,809
so the guys that netscape who were
developing this they were software

105
00:06:22,809 --> 00:06:23,419
engineers

106
00:06:23,419 --> 00:06:26,930
amplicor are doing their best and that
but

107
00:06:26,930 --> 00:06:30,839
obviously they were formally trained in
cryptographic protocols because very few

108
00:06:30,839 --> 00:06:32,689
people outside in

109
00:06:32,689 --> 00:06:36,819
in the military were an

110
00:06:36,819 --> 00:06:41,159
something they called the 0.2 have their
spec was the first thing that shit

111
00:06:41,159 --> 00:06:44,729
and it's known today as this is LV to
and inspect was

112
00:06:44,729 --> 00:06:48,759
revised a few times you know i cant five
times in

113
00:06:48,759 --> 00:06:52,149
in four months and those are the ones we
know that right any

114
00:06:52,149 --> 00:06:55,330
seriously that bike will get tested on
the three-day

115
00:06:55,330 --> 00:06:58,460
it's very clear that there was not a
rigorous documentation party going on

116
00:06:58,460 --> 00:06:58,819
here

117
00:06:58,819 --> 00:07:01,969
back in as guest right which is probably
a good thing you know they were able to

118
00:07:01,969 --> 00:07:03,059
regularly

119
00:07:03,059 --> 00:07:07,569
and it probably improved quite a bit
over the San

120
00:07:07,569 --> 00:07:11,789
provision in SSL the two

121
00:07:11,789 --> 00:07:14,869
on I'll just go through the messages
here and

122
00:07:14,869 --> 00:07:18,099
the client initiates it with a message
from client to server

123
00:07:18,099 --> 00:07:21,430
called quite hello and it contained a
challenge

124
00:07:21,430 --> 00:07:25,080
value and the site perspex that

125
00:07:25,080 --> 00:07:29,729
the coin supported in the server would
answer with a server hello message

126
00:07:29,729 --> 00:07:33,529
and that contain a connection ID the
certificate

127
00:07:33,529 --> 00:07:37,659
the server and site for specs the server
supported

128
00:07:37,659 --> 00:07:41,020
the client would respond with a client
master key

129
00:07:41,020 --> 00:07:45,809
and this master key would be in created
with the server public key

130
00:07:45,809 --> 00:07:49,279
from the server certificate the climates
in decline

131
00:07:49,279 --> 00:07:52,520
finished message which was essentially

132
00:07:52,520 --> 00:07:57,149
just the connection ID there was a
gritty with the klan right key

133
00:07:57,149 --> 00:08:00,249
and the server would reply with the
verify

134
00:08:00,249 --> 00:08:03,319
and that had a challenge to the client

135
00:08:03,319 --> 00:08:06,949
and a a and a new session ID that the
client

136
00:08:06,949 --> 00:08:10,300
had the option to remember and he's
going to do with the servers

137
00:08:10,300 --> 00:08:13,469
right key

138
00:08:13,469 --> 00:08:18,069
and other features that this is only too
was it only used the md5 algorithm

139
00:08:18,069 --> 00:08:21,449
as a pseudorandom function and for max

140
00:08:21,449 --> 00:08:24,819
and intern integrity and application

141
00:08:24,819 --> 00:08:28,649
data records the client finished message

142
00:08:28,649 --> 00:08:32,849
and back here was just was simply an
echo

143
00:08:32,849 --> 00:08:37,300
the connection ID from the server have
so that was known plaintext

144
00:08:37,300 --> 00:08:42,029
the server finished message is the
session ID data

145
00:08:42,029 --> 00:08:45,100
as and the last one here

146
00:08:45,100 --> 00:08:47,839
but the since this is all new
information to the client the client

147
00:08:47,839 --> 00:08:48,949
would have no way

148
00:08:48,949 --> 00:08:52,970
to validate it earned were noted in
manipulated

149
00:08:52,970 --> 00:08:56,589
into the man the middle can could really
manipulate many other fields

150
00:08:56,589 --> 00:09:00,269
in the SSL the two in check

151
00:09:00,269 --> 00:09:04,899
and when it did provide was mandatory
strong server authentication

152
00:09:04,899 --> 00:09:07,949
so the server was required to present
and

153
00:09:07,949 --> 00:09:11,069
X 509 certificate with the with the

154
00:09:11,069 --> 00:09:14,790
and improve that the server knew the
private key

155
00:09:14,790 --> 00:09:18,019
to this certificate and optionally

156
00:09:18,019 --> 00:09:21,209
the client could supplant certificate
but

157
00:09:21,209 --> 00:09:25,730
that to this day is not a capability
that used very often

158
00:09:25,730 --> 00:09:30,329
and and then the the US had export
regulations which limited to strengthen

159
00:09:30,329 --> 00:09:34,110
the cryptography that could be used in
products they were exported

160
00:09:34,110 --> 00:09:37,290
and elsewhere in the world so you it
would send part

161
00:09:37,290 --> 00:09:40,630
the the site for key in the clear you
know

162
00:09:40,630 --> 00:09:44,430
just to make it week

163
00:09:44,430 --> 00:09:47,709
to go shares are so all those dollars
issues

164
00:09:47,709 --> 00:09:51,240
he saw the document history and their
five or six public relations and

165
00:09:51,240 --> 00:09:54,660
knows what else going on and but there
are some some very

166
00:09:54,660 --> 00:09:57,860
serious issues with me 273 emerged I'm

167
00:09:57,860 --> 00:10:01,269
actually mean and not belabor to mention
the point here

168
00:10:01,269 --> 00:10:05,490
and one really interesting thing now is
and this will come back when we talk

169
00:10:05,490 --> 00:10:06,259
about

170
00:10:06,259 --> 00:10:09,350
how their of gap that we found was

171
00:10:09,350 --> 00:10:13,199
fixed ultimately using extensions

172
00:10:13,199 --> 00:10:17,269
and that last point there that has only
three did not allow

173
00:10:17,269 --> 00:10:20,430
an extension my hellos that actually

174
00:10:20,430 --> 00:10:24,620
document dependent i think is in that on
some and the next line

175
00:10:24,620 --> 00:10:28,290
yeah her two sides area so

176
00:10:28,290 --> 00:10:32,720
I'm at I'll come back to that but you
know the upshot is that this version is

177
00:10:32,720 --> 00:10:35,639
on the three did not actually allow for
an extension and so

178
00:10:35,639 --> 00:10:40,690
well-meaning implement Irwin and course
break

179
00:10:40,690 --> 00:10:44,089
didn't see anything clientele but
they're still disagreements about it cuz

180
00:10:44,089 --> 00:10:44,819
they mixed up

181
00:10:44,819 --> 00:10:48,800
you know the different versions this
document they got circulated

182
00:10:48,800 --> 00:10:52,050
this was the individual netscape and at
this point

183
00:10:52,050 --> 00:10:55,540
they kinda but this account and abandon
it

184
00:10:55,540 --> 00:10:59,690
an and then netscape kinda fell apart
and they got parted out and sold

185
00:10:59,690 --> 00:11:03,190
to different companies around the time I
eat either 18

186
00:11:03,190 --> 00:11:06,350
I guess is 82 shipped in in an anti

187
00:11:06,350 --> 00:11:09,889
and to yeah and I three ships shortly
after that

188
00:11:09,889 --> 00:11:13,329
and that was the Nets game and
fortunately

189
00:11:13,329 --> 00:11:16,970
you know so this is a a very old
protocol is to sell the three but

190
00:11:16,970 --> 00:11:21,480
we did not talk to somebody at and the
company who makes

191
00:11:21,480 --> 00:11:25,990
you know for networking and I axes at
five and

192
00:11:25,990 --> 00:11:29,579
summit there samples indicated that SSL
b3

193
00:11:29,579 --> 00:11:34,170
still accounts for 22 percent SSL
handshake something

194
00:11:34,170 --> 00:11:37,980
on the Internet and we suspect a lot of
that is Windows XP

195
00:11:37,980 --> 00:11:41,389
which you know is still shipping and it
defaults to

196
00:11:41,389 --> 00:11:46,720
SSL b3 even know it can do the newer
version TLS

197
00:11:46,720 --> 00:11:49,769
and this was the other document

198
00:11:49,769 --> 00:11:53,730
that was available but it did explicitly
allow

199
00:11:53,730 --> 00:11:57,709
be quite hello message to be extended so
this is a real argument and we got into

200
00:11:57,709 --> 00:11:58,180
this

201
00:11:58,180 --> 00:12:02,170
implementation workshop Google we are
going out how to

202
00:12:02,170 --> 00:12:06,660
fix this and and yeah following that
there's wanna guys who is

203
00:12:06,660 --> 00:12:10,470
ice cube mates I think with that the guy
who owned the suspect was part in this

204
00:12:10,470 --> 00:12:11,500
working group

205
00:12:11,500 --> 00:12:15,009
and there is even he was a little bit

206
00:12:15,009 --> 00:12:18,730
confused and exactly whether or not the
three

207
00:12:18,730 --> 00:12:22,810
explicitly allowed for my whole
extensions and should be coded as such

208
00:12:22,810 --> 00:12:26,000
or explicitly for made plain extensions
and should be

209
00:12:26,000 --> 00:12:29,490
counted as such yeah and is a software
engineer I was kinda wondering

210
00:12:29,490 --> 00:12:33,230
you know how would something like this
get happened and my prediction was that

211
00:12:33,230 --> 00:12:34,149
the guy

212
00:12:34,149 --> 00:12:39,139
who rode the netscape server software
shared a cubicle with the guy who wrote

213
00:12:39,139 --> 00:12:43,129
the SSL protocol and it said the two of
them were able to exchange information

214
00:12:43,129 --> 00:12:45,870
without it being documented on paper

215
00:12:45,870 --> 00:12:48,970
and later on we did get to talk to some
other people who work in an office at

216
00:12:48,970 --> 00:12:50,079
the time and

217
00:12:50,079 --> 00:12:55,110
they weren't exactly cue made they said
it differed cute but they were brothers

218
00:12:55,110 --> 00:12:59,199
said and this is only three was a
completely broke

219
00:12:59,199 --> 00:13:03,529
breaking change it reform and a decline
hello message

220
00:13:03,529 --> 00:13:08,250
completely which was you know probably a
useful thing to do

221
00:13:08,250 --> 00:13:11,740
however they were wanna servers out
there that would just hang

222
00:13:11,740 --> 00:13:16,199
if you sent to me new version at the SSL
the three so

223
00:13:16,199 --> 00:13:20,970
and the suspect this is only three in
later specs even allow you to stand

224
00:13:20,970 --> 00:13:24,399
an SSL be too hello message just to be
compatible with them

225
00:13:24,399 --> 00:13:27,680
a lot of your soccer today you don't get
to sell and big screen

226
00:13:27,680 --> 00:13:31,790
hands-on style SSL especially details
the first time in retry

227
00:13:31,790 --> 00:13:35,139
right and it with an old school and

228
00:13:35,139 --> 00:13:38,970
and but the the best thing about it is
only three is that defined a consistent

229
00:13:38,970 --> 00:13:40,100
record layer

230
00:13:40,100 --> 00:13:43,540
and so the record player would define
different types for

231
00:13:43,540 --> 00:13:47,529
entering data your application data in
alerts

232
00:13:47,529 --> 00:13:51,069
and previously this a cell b2

233
00:13:51,069 --> 00:13:54,199
it would be within handshake messages
but then once those were done in which

234
00:13:54,199 --> 00:13:56,160
is an application data and there was no
real

235
00:13:56,160 --> 00:13:59,160
obvious way to tell which which was
which

236
00:13:59,160 --> 00:14:02,860
any would modify the cryptographic
parameters

237
00:14:02,860 --> 00:14:06,259
after each message went along

238
00:14:06,259 --> 00:14:09,310
whereas as is only three improves on
that by

239
00:14:09,310 --> 00:14:13,560
negotiating with the handshake and then
sitting one message to switch to the new

240
00:14:13,560 --> 00:14:17,959
Senate negotiated cryptographic
parameters

241
00:14:17,959 --> 00:14:21,449
la tarde credit-default I mean I I think
and

242
00:14:21,449 --> 00:14:25,709
yeah in soon you know the new message

243
00:14:25,709 --> 00:14:29,329
introduces a new message to change tack
respect I'm which

244
00:14:29,329 --> 00:14:33,100
switches to the pending state all at
once as I mentioned

245
00:14:33,100 --> 00:14:36,689
Vincent it has a new message for
finished which is exchanged in both

246
00:14:36,689 --> 00:14:37,839
directions

247
00:14:37,839 --> 00:14:41,310
and that is a cryptographic hash hash

248
00:14:41,310 --> 00:14:44,639
over all love the previous hand-written
messages

249
00:14:44,639 --> 00:14:47,879
up to that point as seen by that in
point

250
00:14:47,879 --> 00:14:52,009
and so in that way that can resistant a
man in the middle attack

251
00:14:52,009 --> 00:14:55,189
and by by each server

252
00:14:55,189 --> 00:14:58,370
than sending what it saw as

253
00:14:58,370 --> 00:15:03,339
as how the intake when

254
00:15:03,339 --> 00:15:07,430
well so that what that concept a
structured record where

255
00:15:07,430 --> 00:15:10,519
enabled was the idea of going from

256
00:15:10,519 --> 00:15:13,930
political negotiation today to flow back
to political negotiation back to data

257
00:15:13,930 --> 00:15:18,060
flow in a structured organized way and
some very naturally this concept every

258
00:15:18,060 --> 00:15:21,379
negotiation emerged and

259
00:15:21,379 --> 00:15:24,420
that question who is not just in
Jessamine

260
00:15:24,420 --> 00:15:27,540
really a lot of people didn't know in
fact just

261
00:15:27,540 --> 00:15:30,660
and curious your hands who knew dat who
didn't know

262
00:15:30,660 --> 00:15:33,740
nestle the negotiation like this

263
00:15:33,740 --> 00:15:37,220
Union anybody yeah in its it's like 50
50

264
00:15:37,220 --> 00:15:41,069
execute any conferences you can imagine
what it is in the general programming

265
00:15:41,069 --> 00:15:46,199
community at so it's a great idea is
exactly the same handshake messages

266
00:15:46,199 --> 00:15:50,089
as that communication connections added
to negotiate the original

267
00:15:50,089 --> 00:15:53,889
and connection and in fact it even
allows for the frightening and i am

268
00:15:53,889 --> 00:15:54,910
certain

269
00:15:54,910 --> 00:15:58,050
under test in capability and

270
00:15:58,050 --> 00:16:01,149
interleaving these data and

271
00:16:01,149 --> 00:16:04,259
handshake messages even at the same time
not just going from data

272
00:16:04,259 --> 00:16:07,680
to handshake back today to doing both at
the same time

273
00:16:07,680 --> 00:16:11,410
in this is extremely helpful it you had
space crew

274
00:16:11,410 --> 00:16:14,860
in Jupiter sending back high speed data

275
00:16:14,860 --> 00:16:18,939
you don't have to delay the data
transmission for several round trips

276
00:16:18,939 --> 00:16:23,550
during this renegotiation

277
00:16:23,550 --> 00:16:26,610
and newt newt newt your message so a

278
00:16:26,610 --> 00:16:30,410
so they did really %uh the spec authors
didn't recognize the renegotiation

279
00:16:30,410 --> 00:16:34,040
happen explicitly allowed for written
the idea was that the server would be

280
00:16:34,040 --> 00:16:35,980
able to ask the client to renegotiate

281
00:16:35,980 --> 00:16:39,439
for great reason to the contents herein
and

282
00:16:39,439 --> 00:16:42,670
and and so this new method called hello
request that

283
00:16:42,670 --> 00:16:46,420
we're basically the servers told the guy
I'd like you to renegotiate

284
00:16:46,420 --> 00:16:50,389
quiet is free to ignore it actually in
which case is your night

285
00:16:50,389 --> 00:16:53,449
disconnected or something but and at the
end of the day

286
00:16:53,449 --> 00:16:57,439
actual renegotiation is done by the clan
sending

287
00:16:57,439 --> 00:17:01,009
and brand new client hello just like the
original plan hello

288
00:17:01,009 --> 00:17:04,400
I'm and there's ECS

289
00:17:04,400 --> 00:17:07,830
those five words there were on its own
initiative

290
00:17:07,830 --> 00:17:11,530
something that was really not well
appreciated even

291
00:17:11,530 --> 00:17:16,690
a monkey less people was the idea client
initiated renegotiation where

292
00:17:16,690 --> 00:17:20,130
the client can be doing his thing and
then for any reason or no reason at all

293
00:17:20,130 --> 00:17:23,040
to send any plan alone started
negotiation

294
00:17:23,040 --> 00:17:27,070
and the best part about it is that
servers that implement renegotiation

295
00:17:27,070 --> 00:17:31,350
don't tends to keep and and this isn't
imitation details will be dependent but

296
00:17:31,350 --> 00:17:32,140
they don't always

297
00:17:32,140 --> 00:17:35,290
strongly associated that a lower price
that they sent with

298
00:17:35,290 --> 00:17:38,330
okay now I'm willing to renegotiate
affect the default

299
00:17:38,330 --> 00:17:41,800
is that they are willing to renegotiate
period if you're on

300
00:17:41,800 --> 00:17:46,669
open SSL which is not exactly a corner
kick it just depends on how enthusiastic

301
00:17:46,670 --> 00:17:52,280
and helpful incomplete your vendor was
for your SSL library and

302
00:17:52,280 --> 00:17:55,530
just the accident and the design in the
API that it uses

303
00:17:55,530 --> 00:17:59,340
it but a lot of them will just handle
all this renegotiation for you

304
00:17:59,340 --> 00:18:00,380
transparently

305
00:18:00,380 --> 00:18:04,460
cuz erroneously the application of there
wasn't expecting it

306
00:18:04,460 --> 00:18:07,850
to ever be a ever have to worry about it
and

307
00:18:07,850 --> 00:18:10,890
so after naked melted down they handed
the spec

308
00:18:10,890 --> 00:18:14,990
over to the IETF who probably renamed it
to

309
00:18:14,990 --> 00:18:19,210
btls there might still calls it as a
cell

310
00:18:19,210 --> 00:18:23,680
and the improve the design a did they
define this abstract pseudorandom

311
00:18:23,680 --> 00:18:24,600
function

312
00:18:24,600 --> 00:18:27,880
which replaced an odd assortment in
defiant

313
00:18:27,880 --> 00:18:31,130
indy five in shock combinations that
were used in

314
00:18:31,130 --> 00:18:34,480
this is only three and ended it does in
such a way that it

315
00:18:34,480 --> 00:18:39,160
either indy five were shot are broke and
in the protocol itself should

316
00:18:39,160 --> 00:18:42,580
should survive that when the just we
jump up the side

317
00:18:42,580 --> 00:18:45,890
we skipped it before but this plus the
shortening and

318
00:18:45,890 --> 00:18:50,640
a three-night stay tuned it's necessary
to be three sectors back

319
00:18:50,640 --> 00:18:54,180
two cases where somebody intentionally
shortened critical field

320
00:18:54,180 --> 00:18:57,300
and some and subsequent is

321
00:18:57,300 --> 00:19:00,500
pretty darn unusual particularly and
something that looks like it add

322
00:19:00,500 --> 00:19:01,520
security

323
00:19:01,520 --> 00:19:04,590
going from there is expected to 12 yeah
in

324
00:19:04,590 --> 00:19:07,660
so when another the finished message is
12 bytes

325
00:19:07,660 --> 00:19:11,070
thats 96 bits and

326
00:19:11,070 --> 00:19:15,180
said the birthday attack against ninety
six bits is 48 bits which is well within

327
00:19:15,180 --> 00:19:16,590
the range

328
00:19:16,590 --> 00:19:22,050
feasibility for some attackers and you
heard it here first guys

329
00:19:22,050 --> 00:19:25,070
an June 2003 the IETF

330
00:19:25,070 --> 00:19:29,650
finally gets around to and defining some
extensions

331
00:19:29,650 --> 00:19:33,680
and various versions are the spec had
kinda had this once in its cargo out

332
00:19:33,680 --> 00:19:36,050
saying you can't attack on extra data

333
00:19:36,050 --> 00:19:39,580
but its four and a half years after the
fact nobody's had any

334
00:19:39,580 --> 00:19:43,070
products that use these extension fields
and you know guess what

335
00:19:43,070 --> 00:19:45,780
as soon as you start trying to send
extensions to something that was an

336
00:19:45,780 --> 00:19:48,020
engineer and tested for it

337
00:19:48,020 --> 00:19:51,390
I don't crack the servers and

338
00:19:51,390 --> 00:19:54,590
ended it didn't work with this is only
too which is still the

339
00:19:54,590 --> 00:19:58,070
widely expected and newer

340
00:19:58,070 --> 00:20:01,160
specs add new versions a TLS and

341
00:20:01,160 --> 00:20:04,680
more extensions but it up until

342
00:20:04,680 --> 00:20:07,900
like last week

343
00:20:07,900 --> 00:20:11,350
that the vast majority and SSL
connections

344
00:20:11,350 --> 00:20:15,020
on the Internet we're not using
extensions for anything really critical

345
00:20:15,020 --> 00:20:18,930
even though there's some real economic
cases to be made for certain extensions

346
00:20:18,930 --> 00:20:25,930
like being able to support multiple
HTTPS sites from the same IP address

347
00:20:28,440 --> 00:20:32,870
okay so back in the early days has a
network switch was the

348
00:20:32,870 --> 00:20:36,460
I'm which is in in the company before he
changed it to fund tracker

349
00:20:36,460 --> 00:20:40,190
I guess at I became aware he in the eye

350
00:20:40,190 --> 00:20:43,590
I'd be separating their this paper

351
00:20:43,590 --> 00:20:47,250
at tunnel medication protocols and
seriously gonna read it if you have and

352
00:20:47,250 --> 00:20:48,760
it's really kinda cool paper

353
00:20:48,760 --> 00:20:52,000
and and gives 2002 has published

354
00:20:52,000 --> 00:20:56,310
and many uses it makes a general point
about the fact that you got one layer

355
00:20:56,310 --> 00:20:57,800
doing

356
00:20:57,800 --> 00:21:00,920
some accreditation another layer about
it doing

357
00:21:00,920 --> 00:21:04,220
other authentication that its actually a
lot harder than it looks

358
00:21:04,220 --> 00:21:08,150
to tighten together their possibilities
for man in the middle

359
00:21:08,150 --> 00:21:11,500
this is exactly what certain 30 was
saying this morning about

360
00:21:11,500 --> 00:21:14,520
have composing multiple layers of the
protocol that

361
00:21:14,520 --> 00:21:18,440
you know it the complexity and the
combined

362
00:21:18,440 --> 00:21:22,510
are is greater than the sum his partner
exactly so at any rate it

363
00:21:22,510 --> 00:21:25,520
II we we we had this to say: we had this

364
00:21:25,520 --> 00:21:30,570
in mind know is marcia we're talking
about this in June or something and

365
00:21:30,570 --> 00:21:34,080
anyway so keep is a file that idea way
and

366
00:21:34,080 --> 00:21:37,090
that uses an example eate and

367
00:21:37,090 --> 00:21:40,690
PPT at the show that if you could
convince the client

368
00:21:40,690 --> 00:21:44,040
to conduct its authentication

369
00:21:44,040 --> 00:21:47,390
unencrypted did then you could perform a
downgrade attack on the client in the

370
00:21:47,390 --> 00:21:48,150
server

371
00:21:48,150 --> 00:21:51,990
would still on look like it was
interesting

372
00:21:51,990 --> 00:21:55,950
or vice versa and so dumping to

373
00:21:55,950 --> 00:21:59,430
you one example that they use in this
paper which is very close to the actual

374
00:21:59,430 --> 00:22:00,010
bone

375
00:22:00,010 --> 00:22:03,090
and the that I came across

376
00:22:03,090 --> 00:22:08,660
is HTTPS login form when the client
strongly of indicates the server this

377
00:22:08,660 --> 00:22:11,860
the servers forced to produce the
correct certificate

378
00:22:11,860 --> 00:22:15,590
improved he has the the private key to
it

379
00:22:15,590 --> 00:22:19,480
and the server authenticates the client
with the username and password

380
00:22:19,480 --> 00:22:23,200
asked with an 80 now HTTP form

381
00:22:23,200 --> 00:22:26,310
and other words like two layers in the
stack blog where the server

382
00:22:26,310 --> 00:22:29,920
or the kind of December so in it in that
sense it is mutual often it's at least

383
00:22:29,920 --> 00:22:32,130
wrong in one direction

384
00:22:32,130 --> 00:22:35,300
and the client verifies the servicer
through his

385
00:22:35,300 --> 00:22:39,730
sent trusted roots third certificate
authorities

386
00:22:39,730 --> 00:22:45,040
and the client uses that certs public
key to pass the session key

387
00:22:45,040 --> 00:22:49,810
and so the client simultaneously of
indicates the server

388
00:22:49,810 --> 00:22:53,320
and this defense the session against the
man in the middle

389
00:22:53,320 --> 00:22:57,350
and so the session key that used for the
encryption is strongly bound to the

390
00:22:57,350 --> 00:22:58,500
certificate

391
00:22:58,500 --> 00:23:01,550
that the client decided to trust

392
00:23:01,550 --> 00:23:05,050
and the password credentials our
Passover

393
00:23:05,050 --> 00:23:08,840
this the cryptid channel

394
00:23:08,840 --> 00:23:12,160
so in that way the client for the user
authenticates

395
00:23:12,160 --> 00:23:15,600
to the server but the second he is not
strongly bound

396
00:23:15,600 --> 00:23:18,830
in this direction so the client truth
that

397
00:23:18,830 --> 00:23:22,590
there's not a man in the middle using
the PK I the public P

398
00:23:22,590 --> 00:23:26,460
infrastructure and but the server has no

399
00:23:26,460 --> 00:23:29,700
way that he can through the absence a
man in the middle

400
00:23:29,700 --> 00:23:34,780
he can only rely on the client to do a
good job with this

401
00:23:34,780 --> 00:23:37,820
so what if the client is a poser what'd

402
00:23:37,820 --> 00:23:41,990
the client trust evil root CA

403
00:23:41,990 --> 00:23:44,990
a typical wind is or Firefox machine

404
00:23:44,990 --> 00:23:49,140
will have about 200 the Acer that they
trust

405
00:23:49,140 --> 00:23:52,540
and so in in this model the server

406
00:23:52,540 --> 00:23:55,900
has to rely on the client to prove
there's not a man in the middle

407
00:23:55,900 --> 00:23:59,620
so the server in that transit Lee
trustee every root CA

408
00:23:59,620 --> 00:24:02,750
that is trusted by the client

409
00:24:02,750 --> 00:24:06,590
in it's even worse than that in the
sense that the server can't know

410
00:24:06,590 --> 00:24:10,030
exactly which CA was used by the client

411
00:24:10,030 --> 00:24:14,420
and so the circuit even go back after
the fact and decide and know anything

412
00:24:14,420 --> 00:24:15,710
about how the client made

413
00:24:15,710 --> 00:24:19,700
his determination that there was a man
in the middle it actually even worse

414
00:24:19,700 --> 00:24:21,530
than that in one sense that

415
00:24:21,530 --> 00:24:24,540
let's say that the client 1271

416
00:24:24,540 --> 00:24:27,640
those two hundred CA's gets compromise

417
00:24:27,640 --> 00:24:30,660
and somebody comes up with the signing
certificate for

418
00:24:30,660 --> 00:24:35,450
you now easy super duper SSL I would
never have read it that never happened

419
00:24:35,450 --> 00:24:41,010
a year and a half ago and that point the
server you to answer until I simply

420
00:24:41,010 --> 00:24:41,710
don't trust

421
00:24:41,710 --> 00:24:45,300
clients there you know still relying on
on that

422
00:24:45,300 --> 00:24:48,780
sir there's no way to tell absolutely
says I'm gonna get on

423
00:24:48,780 --> 00:24:52,250
and you know where you have to hope that
every client connecting to you

424
00:24:52,250 --> 00:24:55,760
has patched and disabled that sir and it
certainly was gonna

425
00:24:55,760 --> 00:24:59,770
the XOR issues at that graphic trust
going on

426
00:24:59,770 --> 00:25:04,450
and but you know I just remembered this
quote from long ago I installed

427
00:25:04,450 --> 00:25:07,940
you know PDP years ago and i'd I always
remember this quote it left an

428
00:25:07,940 --> 00:25:10,140
impression on me that the trust is not

429
00:25:10,140 --> 00:25:13,190
transitive Rick not supposed to be
transit like

430
00:25:13,190 --> 00:25:16,570
I have a friend who I trust not to lie

431
00:25:16,570 --> 00:25:19,760
but he trust the president not to lie
that doesn't mean I needed trust the

432
00:25:19,760 --> 00:25:23,200
president not to lie

433
00:25:23,200 --> 00:25:28,920
but really to have what you really need
it strong mutual authentication

434
00:25:28,920 --> 00:25:32,070
the records that each in point be able
to

435
00:25:32,070 --> 00:25:36,320
independently through the absence of a
man in the middle

436
00:25:36,320 --> 00:25:41,000
and because this http form of indication
it's just carry through it Atos

437
00:25:41,000 --> 00:25:44,860
connection that suffocated in one
direction it doesn't provide strong

438
00:25:44,860 --> 00:25:47,510
mutual authentication

439
00:25:47,510 --> 00:25:50,540
and and so this attack goes a little bit
beyond

440
00:25:50,540 --> 00:25:54,040
that paper that we mentioned earlier
because in this case

441
00:25:54,040 --> 00:25:57,290
neither the client or the server needs
to be downgraded

442
00:25:57,290 --> 00:26:00,740
to and encrypt it communication but it

443
00:26:00,740 --> 00:26:03,750
me if there's one point that I want
people to take away

444
00:26:03,750 --> 00:26:07,950
from this presentation is that if you
run an SSL web site

445
00:26:07,950 --> 00:26:11,340
your as a web server you are literally

446
00:26:11,340 --> 00:26:14,710
trusting every route certificate
installed on every

447
00:26:14,710 --> 00:26:19,350
client that connects to you unless
you're using stamp and I

448
00:26:19,350 --> 00:26:23,010
certificates so

449
00:26:23,010 --> 00:26:30,010
let's look at the packet capture

450
00:26:46,700 --> 00:26:53,700
the questions at this point by the way

451
00:27:02,130 --> 00:27:07,880
okay here here's an example the attack
and that seventeen

452
00:27:07,880 --> 00:27:14,880
yet that 17 is the client dot 125 is the
man in the middle

453
00:27:15,030 --> 00:27:18,970
no and

454
00:27:18,970 --> 00:27:23,920
night I think I just capture the

455
00:27:23,920 --> 00:27:27,570
the server perspective this

456
00:27:27,570 --> 00:27:32,580
okay so this is how it seeing at the
server sign and the services in the

457
00:27:32,580 --> 00:27:33,700
initial plan hello

458
00:27:33,700 --> 00:27:37,540
and the server sees the server who
certificates

459
00:27:37,540 --> 00:27:40,990
serving London this is all very normal
typeof

460
00:27:40,990 --> 00:27:46,440
authentic happening and then

461
00:27:46,440 --> 00:27:49,840
this is the client initiated
renegotiation

462
00:27:49,840 --> 00:27:53,150
the server cities where the client hello
and

463
00:27:53,150 --> 00:27:56,380
is the first message if it had been a
server

464
00:27:56,380 --> 00:28:00,610
initiated renegotiation there would be a
hella request message right before

465
00:28:00,610 --> 00:28:07,610
and

466
00:28:10,590 --> 00:28:13,640
you know in this case the server seeing

467
00:28:13,640 --> 00:28:17,149
a typical web request

468
00:28:17,149 --> 00:28:20,760
accepted that first session before

469
00:28:20,760 --> 00:28:24,580
that renegotiation was actually the
attacker who injected

470
00:28:24,580 --> 00:28:27,789
who connected to the server injected
this text

471
00:28:27,789 --> 00:28:31,519
up to this X ignore header

472
00:28:31,519 --> 00:28:36,370
and then didn't terminate that line and
so then the clients legitimate request

473
00:28:36,370 --> 00:28:40,610
comes in from the perspective the server
that is as the

474
00:28:40,610 --> 00:28:44,899
as being effectively commented out
because the HTTP spec says he should

475
00:28:44,899 --> 00:28:46,830
ignore this header that he's never seen
before

476
00:28:46,830 --> 00:28:50,460
I'm Indian the attacker can

477
00:28:50,460 --> 00:28:54,539
steal whatever cookies that the
legitimate point is standing right now

478
00:28:54,539 --> 00:28:57,659
and then here's the server's response
but

479
00:28:57,659 --> 00:29:00,799
it's not really relevant the the

480
00:29:00,799 --> 00:29:04,880
interesting point here is that the
attacker gets to supply whatever request

481
00:29:04,880 --> 00:29:08,159
he wants to inject on the happened

482
00:29:08,159 --> 00:29:12,130
wouldn't client and still the cookies at
the same time

483
00:29:12,130 --> 00:29:15,210
so a couple point on actually

484
00:29:15,210 --> 00:29:19,889
mom and then again it on when it won a
things to remember is that so that's a

485
00:29:19,889 --> 00:29:20,529
dead

486
00:29:20,529 --> 00:29:25,450
that that marcia and it could just as
easily then post your plate or anything

487
00:29:25,450 --> 00:29:25,880
else

488
00:29:25,880 --> 00:29:30,840
and in fact it's kinda like scarier it
is depending on how it's a dedicated

489
00:29:30,840 --> 00:29:35,970
because you know you're really talking
about specific transactions

490
00:29:35,970 --> 00:29:39,120
and one other things that I a lot as

491
00:29:39,120 --> 00:29:42,440
analysts are saying when we published
the paper and

492
00:29:42,440 --> 00:29:46,350
was well you know the good news is this
is just a whole lot like I say

493
00:29:46,350 --> 00:29:49,539
request forgery and and so

494
00:29:49,539 --> 00:29:52,799
everybody's got Cesar many Asians in
place right so that shouldn't be a big

495
00:29:52,799 --> 00:29:53,409
deal

496
00:29:53,409 --> 00:29:58,130
and reality is it's not in one of the
ways in

497
00:29:58,130 --> 00:30:01,500
in which it is not as it can be any bird
easily and it can

498
00:30:01,500 --> 00:30:05,330
even I don't know if we have the Twitter
thing in here and we'll get to that

499
00:30:05,330 --> 00:30:06,370
later but they're even

500
00:30:06,370 --> 00:30:10,169
attacks against places the deadheads
teacher defense is deployed that don't

501
00:30:10,169 --> 00:30:11,539
work for one reason or another

502
00:30:11,539 --> 00:30:14,820
so some I didn't know this against
return it the should how we could make

503
00:30:14,820 --> 00:30:16,309
it with your own password

504
00:30:16,309 --> 00:30:21,289
K

505
00:30:21,289 --> 00:30:26,010
so is it really a problem with the tail
inspect yeah this is a question that

506
00:30:26,010 --> 00:30:29,929
every single person to talk to asked and
and

507
00:30:29,929 --> 00:30:34,399
I guess maybe with two exceptions and
then eventually also hinted at the same

508
00:30:34,399 --> 00:30:34,750
way

509
00:30:34,750 --> 00:30:38,230
to the questions may be in CBS's doing
our own thing in fact there is a

510
00:30:38,230 --> 00:30:43,429
for you well-known at least in his
circle Qatar her published good Tiger

511
00:30:43,429 --> 00:30:48,279
at many major vendors who after way
eight-hour meeting or something we went

512
00:30:48,279 --> 00:30:48,960
into this

513
00:30:48,960 --> 00:30:52,799
was still convinced that the problem was
not actually pls the problems

514
00:30:52,799 --> 00:30:57,100
simply that every single user tell us
was doing it wrong

515
00:30:57,100 --> 00:31:00,120
he said the the problem wasn't with

516
00:31:00,120 --> 00:31:03,779
the crypto itself it was with how people
are using it but

517
00:31:03,779 --> 00:31:07,779
this was a recurring phenomena we saw
that engineers the closer they were in

518
00:31:07,779 --> 00:31:09,130
the more familiar they were

519
00:31:09,130 --> 00:31:12,320
with Tia lessin the details that
specification

520
00:31:12,320 --> 00:31:16,580
the less likely they were to know
anything about how people actually used

521
00:31:16,580 --> 00:31:17,440
it in practice

522
00:31:17,440 --> 00:31:20,340
and yeah I think if you're an
application developer you were thinking

523
00:31:20,340 --> 00:31:20,730
you're

524
00:31:20,730 --> 00:31:24,799
coding to secure Sockets Layer it
whereas if you

525
00:31:24,799 --> 00:31:29,470
new a whole lot about the TLS back you
knew that it could renegotiate and you

526
00:31:29,470 --> 00:31:30,029
would be

527
00:31:30,029 --> 00:31:34,559
foolish United to expect otherwise so

528
00:31:34,559 --> 00:31:38,980
here's an example calling code this is
not any particular language but

529
00:31:38,980 --> 00:31:42,620
its the kind of thing that you're
commonly see in applications that are

530
00:31:42,620 --> 00:31:43,679
doing their own

531
00:31:43,679 --> 00:31:48,520
as the cell type the work you have a DNS
name you resolve the DNS name to an IP

532
00:31:48,520 --> 00:31:49,080
address

533
00:31:49,080 --> 00:31:53,730
you connected TCP socket then you call
your SSL library

534
00:31:53,730 --> 00:31:57,309
as I can utilize and shakers try and
shake or something

535
00:31:57,309 --> 00:32:02,269
your open SSL has somewhere code you
connect with SSL once you're connected

536
00:32:02,269 --> 00:32:02,870
you look at it

537
00:32:02,870 --> 00:32:07,500
you know who's the piercer on the other
end you look at the subject name

538
00:32:07,500 --> 00:32:11,960
that sir and if it's not the DNS name
that you ask for the new

539
00:32:11,960 --> 00:32:16,120
threw an exception are you report the
connection somehow and if it does check

540
00:32:16,120 --> 00:32:17,429
out the new go ahead and you

541
00:32:17,429 --> 00:32:21,649
exchange your critical data so what's
wrong with this clan code here

542
00:32:21,649 --> 00:32:25,909
and I don't I contend that there's
nothing wrong with that

543
00:32:25,909 --> 00:32:29,399
good and that could was secure with this
is only two

544
00:32:29,399 --> 00:32:33,409
as secure as this is on me to realize
that you're a sitter and

545
00:32:33,409 --> 00:32:36,929
it silently became vulnerable when
renegotiation with added

546
00:32:36,929 --> 00:32:40,250
with this is only three and

547
00:32:40,250 --> 00:32:44,860
SSL stack started transparently handling
this renegotiation for you under the

548
00:32:44,860 --> 00:32:45,309
hood

549
00:32:45,309 --> 00:32:51,080
and and but it could be made secure
again by disabling

550
00:32:51,080 --> 00:32:54,080
renegotiation with a patch and

551
00:32:54,080 --> 00:32:58,929
third your as a cell stack

552
00:32:58,929 --> 00:33:03,159
it to I think that shows that the fault
does like

553
00:33:03,159 --> 00:33:07,020
unequivocally in the ssl/tls layer

554
00:33:07,020 --> 00:33:10,600
and another interesting thing is I don't
think there's any tutorial on the web it

555
00:33:10,600 --> 00:33:11,159
says

556
00:33:11,159 --> 00:33:14,840
here's how to use our RSS elstak safely

557
00:33:14,840 --> 00:33:18,190
and it Giz actual example code to copy
and paste from

558
00:33:18,190 --> 00:33:22,700
and it does everything correctly and to
me that says that there are a lot of

559
00:33:22,700 --> 00:33:25,450
that's out there that are doing
everything correctly

560
00:33:25,450 --> 00:33:29,020
and you know as an example I would get
all the the Perl bindings

561
00:33:29,020 --> 00:33:32,710
her open SSL and so in in order to do
this

562
00:33:32,710 --> 00:33:36,320
securely pretty much need to have called
back functions

563
00:33:36,320 --> 00:33:39,879
calling back into your application logic
so you can abort the handshake

564
00:33:39,879 --> 00:33:42,899
rather than this line

565
00:33:42,899 --> 00:33:46,240
here where he calls the get piercer
after

566
00:33:46,240 --> 00:33:50,559
the handshake is already been conducted
well you don't actually know that

567
00:33:50,559 --> 00:33:53,770
there hasn't been a renegotiation
between here here's a race condition

568
00:33:53,770 --> 00:33:55,320
between your code

569
00:33:55,320 --> 00:33:59,090
and the attacker and the only way to
defeat that is to have a call back

570
00:33:59,090 --> 00:34:03,330
within this handshake and you know bless
their hearts the guys who are writing

571
00:34:03,330 --> 00:34:04,190
these

572
00:34:04,190 --> 00:34:08,169
Perl bindings open SSL couldn't get the
call back to work

573
00:34:08,169 --> 00:34:11,919
entirely right and you can kinda see
their struggles in

574
00:34:11,919 --> 00:34:16,560
in the in the documentation but any that
is to me that probably all three laps

575
00:34:16,560 --> 00:34:19,899
that use ssl/tls directly and

576
00:34:19,899 --> 00:34:25,450
Argo noble to one attacker the other

577
00:34:25,450 --> 00:34:29,550
sure so and the good news is there is a
solution it in

578
00:34:29,550 --> 00:34:34,480
the newest internet src 5746 there is a
little better information in the RC in

579
00:34:34,480 --> 00:34:36,530
that the attack and components to the

580
00:34:36,530 --> 00:34:40,859
original paper and then is one your pack
in both the client and the server have

581
00:34:40,859 --> 00:34:42,690
to be patched because

582
00:34:42,690 --> 00:34:45,970
otherwise you're still completely
vulnerable not want your cash on this

583
00:34:45,970 --> 00:34:47,550
and you're not more more den

584
00:34:47,550 --> 00:34:51,050
so you know it was observed at the
annual meeting

585
00:34:51,050 --> 00:34:54,530
you know you are likely more secure

586
00:34:54,530 --> 00:34:57,859
from he certainly more secure from this
attack with us is only two

587
00:34:57,859 --> 00:35:01,109
than you ever wanted then and b3 Intel

588
00:35:01,109 --> 00:35:05,260
and Tilly Andie renegotiation them in
the worst attack against that says

589
00:35:05,260 --> 00:35:06,589
they'll be two were like

590
00:35:06,589 --> 00:35:11,240
you could be downgraded to triple Dez
order something horrible like that

591
00:35:11,240 --> 00:35:15,069
you know which your are are worth moving
on from that version but

592
00:35:15,069 --> 00:35:20,330
not as bad as in known injection attack
like this

593
00:35:20,330 --> 00:35:23,690
I'm we need to cover certain terminology
in 10

594
00:35:23,690 --> 00:35:28,300
TLS will you make it quick but this is
this is kind of an important point we're

595
00:35:28,300 --> 00:35:29,500
looking at the history

596
00:35:29,500 --> 00:35:33,599
this bug and there's this this is turn
called the session

597
00:35:33,599 --> 00:35:37,170
which is what results from the handshake
taking place is a senate

598
00:35:37,170 --> 00:35:40,490
cryptographic parameters I'm

599
00:35:40,490 --> 00:35:44,530
and there's a session ID the client can
resume that section so when your back

600
00:35:44,530 --> 00:35:46,650
web browser requests and encrypt to page

601
00:35:46,650 --> 00:35:50,530
who go back to that same server to get
images and things and instead have

602
00:35:50,530 --> 00:35:54,230
conducting a whole hand shake all over
again he'll resume that existing

603
00:35:54,230 --> 00:35:58,420
session on multiple connections
simultaneously another effort N Shake

604
00:35:58,420 --> 00:36:00,750
complete and three more stock it
instantly show up

605
00:36:00,750 --> 00:36:04,069
resuming the session it's still going on
which is %uh is very efficient to do

606
00:36:04,069 --> 00:36:04,770
that

607
00:36:04,770 --> 00:36:08,210
and but this session resumption
capability

608
00:36:08,210 --> 00:36:11,810
is orthogonal the renegotiation has
absolutely nothing to do with it

609
00:36:11,810 --> 00:36:16,109
we and a very difficult time convincing
ourselves and everyone

610
00:36:16,109 --> 00:36:20,250
that is the case because you know
there's something very appealing that

611
00:36:20,250 --> 00:36:21,170
thinking that

612
00:36:21,170 --> 00:36:24,190
this session the resumption is related
to

613
00:36:24,190 --> 00:36:28,190
renegotiation somehow but you know in
fact you can have renegotiations with a

614
00:36:28,190 --> 00:36:30,690
resumption and vice versa

615
00:36:30,690 --> 00:36:34,290
and and there's no session identifiers
period across renegotiation there's

616
00:36:34,290 --> 00:36:36,700
actually nothing carried across the
renegotiation

617
00:36:36,700 --> 00:36:41,190
and which is the about which is the an
ordinance but I'm

618
00:36:41,190 --> 00:36:44,500
and another thing that another term that
people uses

619
00:36:44,500 --> 00:36:48,770
is connection and netscape define the
Secure Sockets Layer

620
00:36:48,770 --> 00:36:52,339
and everybody understands sockets as a
connection-oriented protocol

621
00:36:52,339 --> 00:36:56,540
where you know the connection has a
client and server and a beginning and an

622
00:36:56,540 --> 00:36:57,690
end and it's a

623
00:36:57,690 --> 00:37:00,750
ordered reliable stream the data and

624
00:37:00,750 --> 00:37:04,089
an object-oriented API like Java will
have

625
00:37:04,089 --> 00:37:07,589
you know some stream interface that
allows you to read and write data

626
00:37:07,589 --> 00:37:12,510
and it will probably use that same
interface for plane TCP socket

627
00:37:12,510 --> 00:37:16,099
as well as an SSL socket and I mean
that's

628
00:37:16,099 --> 00:37:22,140
a good extraction but it doesn't handle
renegotiation

629
00:37:22,140 --> 00:37:25,430
and this is the important thing that

630
00:37:25,430 --> 00:37:29,650
I think was missing from the analysis is
s is only three

631
00:37:29,650 --> 00:37:33,339
is that there's no there's no name for
this thing which is

632
00:37:33,339 --> 00:37:36,589
and instance a a session

633
00:37:36,589 --> 00:37:41,619
on a connection now that renegotiation
in session resumption are there

634
00:37:41,619 --> 00:37:44,710
sessions and connections have this many
to many relationship

635
00:37:44,710 --> 00:37:48,260
you can have multiple sessions on one
connection with renegotiation

636
00:37:48,260 --> 00:37:51,670
or you can have the same session on
local connections with

637
00:37:51,670 --> 00:37:55,170
resumption but they don't

638
00:37:55,170 --> 00:37:58,339
give a name so that you can even talk
about

639
00:37:58,339 --> 00:38:01,930
what it means to have an instance in the
session on a connection is the thing

640
00:38:01,930 --> 00:38:04,780
that results from a successful handshake

641
00:38:04,780 --> 00:38:08,230
the best time I can find is this
connection state

642
00:38:08,230 --> 00:38:12,339
that it's not a a perfect turn minutes
not use consistently

643
00:38:12,339 --> 00:38:16,720
in the specs

644
00:38:16,720 --> 00:38:20,670
well so did I mean this raises some
issues that

645
00:38:20,670 --> 00:38:23,799
identity Yahoo who are you talking to
you are you talking to the legitimate

646
00:38:23,799 --> 00:38:26,140
client a talk to him and the Middle

647
00:38:26,140 --> 00:38:30,630
and clearly a properly authenticated
server has an identity

648
00:38:30,630 --> 00:38:35,960
he's established that with a certificate
and he's done that well

649
00:38:35,960 --> 00:38:40,390
and authenticated client has an identity
it if you supply a client sir

650
00:38:40,390 --> 00:38:43,530
in the server validates that correctly
and that's a good

651
00:38:43,530 --> 00:38:47,000
identity and but what about anonymous in
point

652
00:38:47,000 --> 00:38:50,859
like your tat the client side of a
typical HTTPS

653
00:38:50,859 --> 00:38:54,420
connection a call for May stock
connections writer you know the client's

654
00:38:54,420 --> 00:38:55,450
anonymous

655
00:38:55,450 --> 00:38:59,580
does but is that in point have an
identity and and

656
00:38:59,580 --> 00:39:03,200
ssl/tls even allows anonymous anonymous
connections

657
00:39:03,200 --> 00:39:07,040
and that do those in points have
identities and in what ways

658
00:39:07,040 --> 00:39:10,160
can identity change if you if you
renegotiate

659
00:39:10,160 --> 00:39:13,660
a connection and is that a new identity
or

660
00:39:13,660 --> 00:39:17,150
you know does it and how does that
change the properties at that

661
00:39:17,150 --> 00:39:20,290
so I guess and yes it an anonymous in
point

662
00:39:20,290 --> 00:39:25,030
I can definitely have an identity even
an anonymous anonymous connection in

663
00:39:25,030 --> 00:39:25,510
points

664
00:39:25,510 --> 00:39:30,500
still have identity switches kinda the
opposite anonymous

665
00:39:30,500 --> 00:39:35,270
and but the identity and an anonymous
connection is

666
00:39:35,270 --> 00:39:38,720
well I'm actually talking to the same
guy that I was talking to

667
00:39:38,720 --> 00:39:43,060
that a few records before in the
protocol and

668
00:39:43,060 --> 00:39:46,349
even though I I don't necessarily have a
name for him its you know

669
00:39:46,349 --> 00:39:50,140
from from buy to bite I know that the
man in the middle isn't

670
00:39:50,140 --> 00:39:53,900
isn't copying and pasting for splicing
these connections together

671
00:39:53,900 --> 00:39:57,910
and confusing me with this identity
switch

672
00:39:57,910 --> 00:40:01,680
and but identities can change across
renegotiation you could supply

673
00:40:01,680 --> 00:40:03,280
completely different sir

674
00:40:03,280 --> 00:40:07,130
after renegotiation and you know thats
when the reasons renegotiation was

675
00:40:07,130 --> 00:40:07,839
invented

676
00:40:07,839 --> 00:40:12,660
so really the question is you know when
across renegotiation he's done the same

677
00:40:12,660 --> 00:40:17,180
entity as you were before and this
question is like completely locked up in

678
00:40:17,180 --> 00:40:20,790
the air by the standards and so nobody
really knew nobody knows impacted

679
00:40:20,790 --> 00:40:24,770
sa problem on if I send you a new client
cert

680
00:40:24,770 --> 00:40:27,940
does that mean I have more privileges
than I used to a

681
00:40:27,940 --> 00:40:31,890
but I'm still the same guys to be
doesn't mean I'm fundamentally different

682
00:40:31,890 --> 00:40:37,470
client because after I've changed
everything about my indication with you

683
00:40:37,470 --> 00:40:41,049
good question yeah and inserted people
who designed

684
00:40:41,049 --> 00:40:45,730
the ssl/tls layer kinda through this
question up to the application layer

685
00:40:45,730 --> 00:40:49,730
and without actually talkie you're
telling the application people

686
00:40:49,730 --> 00:40:53,440
about these issues that were involved
here and

687
00:40:53,440 --> 00:40:57,180
so button there was this implicit
assumption

688
00:40:57,180 --> 00:41:00,900
it's not stated much but I think if you
read between the lines

689
00:41:00,900 --> 00:41:05,510
and identity is additive across
renegotiation early so it was supposed

690
00:41:05,510 --> 00:41:06,240
to be

691
00:41:06,240 --> 00:41:09,310
so that if you receive data from an
anonymous in point

692
00:41:09,310 --> 00:41:14,190
you can then upgrade that to gets into
strong credentials from

693
00:41:14,190 --> 00:41:17,220
from that in point and know that it was
the same guy you were talking to even

694
00:41:17,220 --> 00:41:18,869
back when he was anonymous

695
00:41:18,869 --> 00:41:22,299
and an HTTPS does this regularly

696
00:41:22,299 --> 00:41:25,400
when client certs or smart cards

697
00:41:25,400 --> 00:41:28,770
doing quite certain credentials are used
and

698
00:41:28,770 --> 00:41:33,140
and so when in point could renegotiating
you could supply multiple certificates

699
00:41:33,140 --> 00:41:36,420
and that should the the certificates
should stack

700
00:41:36,420 --> 00:41:42,220
you know in in establishing a greater a
strong identity

701
00:41:42,220 --> 00:41:46,140
so there's Minton question about why
even has given billion per call to begin

702
00:41:46,140 --> 00:41:47,010
with an acre

703
00:41:47,010 --> 00:41:50,779
i think is good question frankly and and
into her email a cancer

704
00:41:50,779 --> 00:41:54,660
word and about 45 minutes here but won
the reasons why is he really is

705
00:41:54,660 --> 00:41:58,799
there to refresh crypto keys is like as
a lifetime 92nd

706
00:41:58,799 --> 00:42:02,200
use that mean there could you actually
use

707
00:42:02,200 --> 00:42:05,400
your contract exhaust your kept estate
and a connection

708
00:42:05,400 --> 00:42:08,849
that's been argued because with you I
tends to me is for general connections

709
00:42:08,849 --> 00:42:11,150
particular an HTTP that

710
00:42:11,150 --> 00:42:14,299
maybe that doesn't make a lot of sense
I'm

711
00:42:14,299 --> 00:42:17,440
1 another reason had to do with changing

712
00:42:17,440 --> 00:42:21,400
the site for specs are saying want to
have certain some directories on your

713
00:42:21,400 --> 00:42:22,130
server

714
00:42:22,130 --> 00:42:25,980
you super duper 256 that ates

715
00:42:25,980 --> 00:42:29,880
price shot 256 or something and
everything else is using

716
00:42:29,880 --> 00:42:33,230
you know when ur and Internet that good
when this was back when the

717
00:42:33,230 --> 00:42:37,500
US government was restricting the export
240 bits and encryption you could get a

718
00:42:37,500 --> 00:42:41,440
special certificate if you were in the
financial industry put on your server

719
00:42:41,440 --> 00:42:45,190
that indicated that you could then
renegotiate up to a stranger

720
00:42:45,190 --> 00:42:48,839
and level encryption matter anybody here
use

721
00:42:48,839 --> 00:42:51,970
or used 180 Kaka turns your

722
00:42:51,970 --> 00:42:55,609
yeah and I'm so it wasn't his night and
you know as we know features they don't

723
00:42:55,609 --> 00:42:56,580
use much in

724
00:42:56,580 --> 00:43:00,900
are still hanging around can be the
source the bugs

725
00:43:00,900 --> 00:43:05,099
the third the third reason and I think
this was the most compelling case that

726
00:43:05,099 --> 00:43:08,270
you know the two guys next to each other
on the Q and

727
00:43:08,270 --> 00:43:11,330
we're we're chatting about which was to

728
00:43:11,330 --> 00:43:14,720
lol specifying the requirements for

729
00:43:14,720 --> 00:43:19,029
whether or not you require declines sir
on your site and to be done dynamically

730
00:43:19,029 --> 00:43:23,830
so that the server could look at the
Earl that you're requesting

731
00:43:23,830 --> 00:43:27,380
and say oh that's subdirectory I need to
repair it point sir

732
00:43:27,380 --> 00:43:31,260
out ask for renegotiation in that
renegotiation own system getting the

733
00:43:31,260 --> 00:43:32,380
pointer

734
00:43:32,380 --> 00:43:35,500
and I think that with netscape's
business case

735
00:43:35,500 --> 00:43:38,730
and that's the most commonly use case
today if you don't do it this way then

736
00:43:38,730 --> 00:43:40,060
you have to ask her clients here

737
00:43:40,060 --> 00:43:43,190
initial on the initial page presentation

738
00:43:43,190 --> 00:43:46,540
with nobody wants to whenever something
comes your homepage it may pop up a

739
00:43:46,540 --> 00:43:50,089
dialog box in your browser that's not
gonna pass

740
00:43:50,089 --> 00:43:53,960
and and then there's this other
justification that people give

741
00:43:53,960 --> 00:43:57,160
which is to protect the client
certificate as you know

742
00:43:57,160 --> 00:44:00,440
because if you get the client
certificate in a renegotiation

743
00:44:00,440 --> 00:44:03,950
it is in cryptid and so you're not gonna
see it in a plane Wireshark

744
00:44:03,950 --> 00:44:09,270
capture I'm this I think to me this is a
questionable justification

745
00:44:09,270 --> 00:44:12,330
and aka a certificate supposed to be a
public key

746
00:44:12,330 --> 00:44:15,960
right which means you're supposed to
publish it I'm

747
00:44:15,960 --> 00:44:20,440
but I think people put stuff into their
certificates that they would rather keep

748
00:44:20,440 --> 00:44:24,770
private like a names addresses phone
numbers that type of thing

749
00:44:24,770 --> 00:44:28,740
but this only attack only protects
against passive eavesdropping

750
00:44:28,740 --> 00:44:34,089
because realistically the client app
will provide that client certificate

751
00:44:34,089 --> 00:44:37,170
if the man the middle just asked nicely
for it

752
00:44:37,170 --> 00:44:40,910
the client doesn't have a chance to
strongly authenticate the server

753
00:44:40,910 --> 00:44:44,270
before the client is forced to produce
his client certificate

754
00:44:44,270 --> 00:44:48,589
that capability he's been torn by the
way at two masked and is this

755
00:44:48,589 --> 00:44:53,700
yeah so yet the basic attack taking up
with their the two basic attacks is the

756
00:44:53,700 --> 00:44:55,470
boiling point X injection

757
00:44:55,470 --> 00:44:58,760
and we show that packet capture and then
there's

758
00:44:58,760 --> 00:45:02,069
points third stealing and so that

759
00:45:02,069 --> 00:45:05,299
a man in the middle can if a client has
clients turks

760
00:45:05,299 --> 00:45:09,000
configured and you on the web browser
may be configured to cities

761
00:45:09,000 --> 00:45:12,279
automatically if you just checked it
don't bug me anymore box

762
00:45:12,279 --> 00:45:16,130
I'm the mental can take the client cert
authentication

763
00:45:16,130 --> 00:45:21,330
it and forwarded to any server that he
wants

764
00:45:21,330 --> 00:45:25,410
but the main attack is this point plain
text injection so

765
00:45:25,410 --> 00:45:28,799
the attacker can answer a little bit a
plain text at

766
00:45:28,799 --> 00:45:32,569
the specific point that at the beginning
the

767
00:45:32,569 --> 00:45:38,029
SSL critical string and and we call it
blind because the attackers still can't

768
00:45:38,029 --> 00:45:39,310
read this is Austrian

769
00:45:39,310 --> 00:45:43,589
this is that occurred turkeys it's been
negotiated is akers man on doesn't have

770
00:45:43,589 --> 00:45:47,560
so the moral is that the bag I net net
condenser

771
00:45:47,560 --> 00:45:51,750
thank and so this was a limited
capability and it was rather

772
00:45:51,750 --> 00:45:54,960
unusual I don't know that they've been
one to bugs that about this specific

773
00:45:54,960 --> 00:45:56,230
kind

774
00:45:56,230 --> 00:46:00,040
capability in their some protocols are
affected worse than others

775
00:46:00,040 --> 00:46:03,970
HTTPS is one that once it's affected
particularly badly

776
00:46:03,970 --> 00:46:07,220
and it's in relatively important case

777
00:46:07,220 --> 00:46:10,690
because it was the attacker to steal
cookies and I think the keys to the

778
00:46:10,690 --> 00:46:11,490
client

779
00:46:11,490 --> 00:46:15,290
you still form and put it this way you
can still using hidden input

780
00:46:15,290 --> 00:46:19,020
Thursday tracking after just logging in
the first time you've got a username and

781
00:46:19,020 --> 00:46:21,270
password on a webcam that supposed
reborn

782
00:46:21,270 --> 00:46:25,350
the bag I can still at and in some other
protections against ceaser

783
00:46:25,350 --> 00:46:31,350
help some don't and in this case the
server sees the renegotiation

784
00:46:31,350 --> 00:46:35,619
and the client is not and but the server
may even be the one who requested the

785
00:46:35,619 --> 00:46:38,910
renegotiation so it doesn't look unusual
to him at all

786
00:46:38,910 --> 00:46:42,850
and but one of two things need to be the
case

787
00:46:42,850 --> 00:46:46,359
in order for this attack to be practical
into the server accepts

788
00:46:46,359 --> 00:46:49,580
the client initiated renegotiation and
we

789
00:46:49,580 --> 00:46:52,750
we see that open SSL does that by
default or did until

790
00:46:52,750 --> 00:46:56,750
recent patches and or the server can be

791
00:46:56,750 --> 00:47:01,940
and tricked or provoked into requesting
the renegotiation itself

792
00:47:01,940 --> 00:47:05,240
and the attacker may be able to do that
by just requesting the

793
00:47:05,240 --> 00:47:08,880
general from the creek subdirectory a
Taser client certificate

794
00:47:08,880 --> 00:47:11,990
her or something like that

795
00:47:11,990 --> 00:47:15,640
that another redirection to the client

796
00:47:15,640 --> 00:47:19,319
certificate and will come from any

797
00:47:19,319 --> 00:47:23,980
any client that will provide new
authenticate with a client certificate

798
00:47:23,980 --> 00:47:27,670
that can be redirected to any t let
server and the internet they will accept

799
00:47:27,670 --> 00:47:28,839
that certificate

800
00:47:28,839 --> 00:47:33,220
and it will retroactively authenticate
with this is the client's request but

801
00:47:33,220 --> 00:47:36,799
is really the man in the middle a
request

802
00:47:36,799 --> 00:47:40,720
this is potentially a a big compromise
for things like

803
00:47:40,720 --> 00:47:45,069
smart cards that are used to log into
the more secure

804
00:47:45,069 --> 00:47:48,230
and web sites I'm one

805
00:47:48,230 --> 00:47:52,290
featured when here is the client doesn't
see the result the quite me

806
00:47:52,290 --> 00:47:58,000
see a broken imager or something very
small

807
00:47:58,000 --> 00:48:01,060
so what are some communications

808
00:48:01,060 --> 00:48:04,420
when we just get rid renegotiation
tirelessly good question why don't you

809
00:48:04,420 --> 00:48:06,119
just give it to the negotiation

810
00:48:06,119 --> 00:48:09,170
well and I'll tells

811
00:48:09,170 --> 00:48:12,850
that would be easy right

812
00:48:12,850 --> 00:48:17,600
that's what most people expected

813
00:48:17,600 --> 00:48:21,270
generally work that it would work right

814
00:48:21,270 --> 00:48:24,390
but it's really bad when they the first
round

815
00:48:24,390 --> 00:48:27,869
patches did this it is disabled
renegotiation out right

816
00:48:27,869 --> 00:48:33,630
and it broke stuff and some things that
depend on renegotiation art or

817
00:48:33,630 --> 00:48:37,480
tour was not actually Boehner cool
beforehand

818
00:48:37,480 --> 00:48:41,560
I just kinda because the accident in
their design and

819
00:48:41,560 --> 00:48:44,630
you know the care they took it

820
00:48:44,630 --> 00:48:48,930
it didn't seem to be a normal to this
attack

821
00:48:48,930 --> 00:48:52,000
and web services yeah

822
00:48:52,000 --> 00:48:55,869
so you know basically if you're using
web services that are not indicated

823
00:48:55,869 --> 00:48:58,420
inside a message like Sam or something

824
00:48:58,420 --> 00:49:01,440
this is potentially a very bad idea

825
00:49:01,440 --> 00:49:05,810
and particularly if you're using my
certificate to secure

826
00:49:05,810 --> 00:49:09,270
answered and and your running isnt

827
00:49:09,270 --> 00:49:12,640
on the mir you're always going to be ask

828
00:49:12,640 --> 00:49:17,580
from the negotiations are you can't just
kinda turn it off

829
00:49:17,580 --> 00:49:21,680
as near one-third make so the ironic
thing here is that

830
00:49:21,680 --> 00:49:25,690
you know it open SSL doesn't feel great
motivation to fix renegotiation

831
00:49:25,690 --> 00:49:26,989
correctly

832
00:49:26,989 --> 00:49:30,130
in just its attached to say disable
renegotiation entirely

833
00:49:30,130 --> 00:49:34,210
and their customers are complaining well
you know

834
00:49:34,210 --> 00:49:38,339
Microsoft shops can just switch to using
integrated often cited the domain that's

835
00:49:38,339 --> 00:49:40,359
that would still be pretty secure

836
00:49:40,359 --> 00:49:43,680
and without the renegotiation but it's
the cross-platform

837
00:49:43,680 --> 00:49:47,799
interoperable stuff and the needs point
sir

838
00:49:47,799 --> 00:49:50,930
authentication the month

839
00:49:50,930 --> 00:49:54,900
and other thing is smart cards you know
we mission though some have summed up in

840
00:49:54,900 --> 00:49:58,710
this market and millions of cards and
thousands of servers

841
00:49:58,710 --> 00:50:03,839
and their used for disproportionately
her a high security stuff

842
00:50:03,839 --> 00:50:07,500
so the only crack fix is to fix
renegotiation it's gonna be fixed and

843
00:50:07,500 --> 00:50:10,819
in with that involves is is restoring
this time this

844
00:50:10,819 --> 00:50:14,220
guarantee of continuity identity the
idea that

845
00:50:14,220 --> 00:50:18,750
you know the guy who's on the other into
the SSL connection now is the same guy

846
00:50:18,750 --> 00:50:23,119
as was on at the beginning and
establishing the connection

847
00:50:23,119 --> 00:50:27,060
and you know you had that guaranteed
back with secure Sockets Layer version 2

848
00:50:27,060 --> 00:50:30,440
and it silently went away

849
00:50:30,440 --> 00:50:34,049
but it was never stated in any
engineering documents that we've come

850
00:50:34,049 --> 00:50:34,560
across

851
00:50:34,560 --> 00:50:37,660
unit was so obvious an implicit I think
in

852
00:50:37,660 --> 00:50:40,739
in SLB to that no in deeply questioned
whether

853
00:50:40,739 --> 00:50:44,619
this company continuity abide any
guarantee persisted

854
00:50:44,619 --> 00:50:47,970
in as is I'll be 3n in Tosa and there
were multiple

855
00:50:47,970 --> 00:50:51,619
security review so SLB three NT less

856
00:50:51,619 --> 00:50:55,029
that didn't spot this bug and I I think

857
00:50:55,029 --> 00:50:58,450
you know maybe if there had been more
explicit requirements

858
00:50:58,450 --> 00:51:02,900
set out even obvious ones I'm this this
would be considered

859
00:51:02,900 --> 00:51:06,250
really short on time to ship only
recover faster

860
00:51:06,250 --> 00:51:10,710
well and so one particular mitigation

861
00:51:10,710 --> 00:51:14,489
would be at the record player had the
renegotiated keys depend on both the new

862
00:51:14,489 --> 00:51:15,100
and the old

863
00:51:15,100 --> 00:51:19,180
key material and this might be as simple
as replacing an equal sign with an ex or

864
00:51:19,180 --> 00:51:20,509
people so when the new

865
00:51:20,509 --> 00:51:23,750
he material gets written into the and

866
00:51:23,750 --> 00:51:26,799
into the right place it gets exhort in
in

867
00:51:26,799 --> 00:51:31,210
this in my ID I thought it was a great
idea but it's too good to be true

868
00:51:31,210 --> 00:51:36,020
and there's a API call PKcs 11 that
doesn't support that change

869
00:51:36,020 --> 00:51:40,119
and that API is burned into silicon
really

870
00:51:40,119 --> 00:51:43,420
and another method which it would be to
inject the the previous

871
00:51:43,420 --> 00:51:48,119
in this message and that connection into
the beginning at the handshake

872
00:51:48,119 --> 00:51:51,560
when you're constructing the hash to
send the next

873
00:51:51,560 --> 00:51:55,049
this message and this is a technically
good

874
00:51:55,049 --> 00:51:58,150
a solution and it doesn't require any
new protocol

875
00:51:58,150 --> 00:52:02,029
that structures and it only requires the
client or the server to patch in order

876
00:52:02,029 --> 00:52:02,580
to be

877
00:52:02,580 --> 00:52:06,100
secure but it wouldn't be deployable

878
00:52:06,100 --> 00:52:09,500
by some sites her for a long time and

879
00:52:09,500 --> 00:52:12,869
for one thing it would be would break I
wanted existing stuff

880
00:52:12,869 --> 00:52:16,989
and it would not have a a compatible

881
00:52:16,989 --> 00:52:21,330
Notre a backwards compatible transition
period

882
00:52:21,330 --> 00:52:24,710
that the administrators can configure
and because it changed the crypto

883
00:52:24,710 --> 00:52:26,779
calculations even a tiny bit

884
00:52:26,779 --> 00:52:31,020
that would trigger some sorta formal
cryptographic review process we heard

885
00:52:31,020 --> 00:52:31,390
from

886
00:52:31,390 --> 00:52:34,920
from some users and that could take
years

887
00:52:34,920 --> 00:52:39,440
you know to get through that kinda
committee

888
00:52:39,440 --> 00:52:43,140
so the project that we and that we pull
together

889
00:52:43,140 --> 00:52:47,190
had this proposal which was to define a
new TLS extension

890
00:52:47,190 --> 00:52:50,630
and remember you know some versions a
veces I'll be three

891
00:52:50,630 --> 00:52:53,799
allowed extensions: and everything
forward about it but nobody had used it

892
00:52:53,799 --> 00:52:54,770
seriously

893
00:52:54,770 --> 00:52:59,270
I'm for anything critical they would
require on required extension

894
00:52:59,270 --> 00:53:02,420
for something security depended

895
00:53:02,420 --> 00:53:06,380
and the clinton the server would
cooperate with this extension that's in

896
00:53:06,380 --> 00:53:10,970
what they saw as the contents at the
finished message from the previous

897
00:53:10,970 --> 00:53:12,049
handshake

898
00:53:12,049 --> 00:53:15,560
on that connection so of course you know
if your

899
00:53:15,560 --> 00:53:19,259
a server under attack decide previous
and take me to the client

900
00:53:19,259 --> 00:53:22,500
in that same connection you didn't see
if you can check

901
00:53:22,500 --> 00:53:25,630
so you'll get your server hello back

902
00:53:25,630 --> 00:53:29,200
from from the server and when you try to
negotiate with him

903
00:53:29,200 --> 00:53:32,330
and me not emptying all know something
bad has happened yet

904
00:53:32,330 --> 00:53:35,540
but this requires both the client and
the server to patch so they cooperate

905
00:53:35,540 --> 00:53:36,400
together to

906
00:53:36,400 --> 00:53:39,819
eliminate the possibility the man in the
middle and

907
00:53:39,819 --> 00:53:43,509
are see 5746 just published

908
00:53:43,509 --> 00:53:48,359
Tunisia your yet copper was the first
standard issue

909
00:53:48,359 --> 00:53:53,170
and way to go after a Mikes toolbox that
word was the first website

910
00:53:53,170 --> 00:53:56,710
to implement this mike has his own as is
I'll stack

911
00:53:56,710 --> 00:53:59,830
and so that was useful for testing

912
00:53:59,830 --> 00:54:02,869
open SSL 098 in implements this

913
00:54:02,869 --> 00:54:06,850
and that was released like a ship like a
week again I think the couple days ago

914
00:54:06,850 --> 00:54:09,989
mean we don't know when is it exactly
does the website is

915
00:54:09,989 --> 00:54:14,730
was down during that time are access and
healthcare beta code

916
00:54:14,730 --> 00:54:17,880
and we know that other vendors have
internal code but

917
00:54:17,880 --> 00:54:22,750
it will take 10 months to regression
test and ship it

918
00:54:22,750 --> 00:54:27,739
and additional resources there's the
IETF TLS mailing list anybody who's

919
00:54:27,739 --> 00:54:30,560
interested in discussing ssl/tls

920
00:54:30,560 --> 00:54:33,710
and and evolution that and related
protocols

921
00:54:33,710 --> 00:54:37,589
is welcome to participate in the IETF
and just by being apart

922
00:54:37,589 --> 00:54:40,830
that mailing list you actually get a
vote in you know that

923
00:54:40,830 --> 00:54:45,230
future direction that's back for better
or worse

924
00:54:45,230 --> 00:54:48,900
we also have a a list call mogul open
and

925
00:54:48,900 --> 00:54:52,339
we like will discuss a attacks on

926
00:54:52,339 --> 00:54:56,750
ssl/tls that maybe aren't so for every
for the IETF list

927
00:54:56,750 --> 00:55:01,970
itself but then you know just security
discussion related to TLS

928
00:55:01,970 --> 00:55:05,410
it take place there it don't factor we
maintain

929
00:55:05,410 --> 00:55:09,259
age which is the status of patches and
for different vendors

930
00:55:09,259 --> 00:55:13,299
and I have a blog in and Stephen as a
bargain

931
00:55:13,299 --> 00:55:17,720
and we're discussing this subject there
frequently

932
00:55:17,720 --> 00:55:23,799
think that is it for a little longer bad
actor any questions

933
00:55:23,799 --> 00:55:28,489
if they're gonna let me had are for come
grab this and in the next couple days

934
00:55:28,489 --> 00:55:30,270
and ask a sin

935
00:55:30,270 --> 00:55:33,380
and thank you very much okay

936
00:55:33,380 --> 00:55:39,180
wax thank you very much

937
00:55:39,180 --> 00:55:42,350
and it is interesting to get discussion

938
00:55:42,350 --> 00:55:45,609
you got it covered and but just read on
a picnic

939
00:55:45,609 --> 00:55:46,880
K think a lot

