1
00:00:00,000 --> 00:00:01,620
[Applause]

2
00:00:01,620 --> 00:00:04,280
foreign

3
00:00:06,200 --> 00:00:08,880
yes it's working so welcome everyone

4
00:00:08,880 --> 00:00:10,500
good morning

5
00:00:10,500 --> 00:00:12,179
um well today we're here to talk about

6
00:00:12,179 --> 00:00:15,240
Azure ID just for those who don't know

7
00:00:15,240 --> 00:00:17,880
me very shortly I'm dirkian I live in

8
00:00:17,880 --> 00:00:20,039
the Netherlands so it's a European

9
00:00:20,039 --> 00:00:22,020
conference it's great to be close to

10
00:00:22,020 --> 00:00:23,340
home

11
00:00:23,340 --> 00:00:25,260
um I'm well a bit of everything I do

12
00:00:25,260 --> 00:00:27,960
hacking researching and since last year

13
00:00:27,960 --> 00:00:30,779
I also started my own company so I'm

14
00:00:30,779 --> 00:00:33,440
doing all kinds of things security wise

15
00:00:33,440 --> 00:00:36,600
and I also really like to write tools so

16
00:00:36,600 --> 00:00:38,340
I wrote a couple of tools for active

17
00:00:38,340 --> 00:00:40,739
directory but also focusing more on on

18
00:00:40,739 --> 00:00:43,620
Azure ad tooling and I really like to

19
00:00:43,620 --> 00:00:45,780
write tools to help me in my own

20
00:00:45,780 --> 00:00:48,120
research and also just to make things

21
00:00:48,120 --> 00:00:50,579
easier for everyone

22
00:00:50,579 --> 00:00:53,760
um I write blogs on the accountm.io and

23
00:00:53,760 --> 00:00:55,860
I have a Twitter account where I tweet

24
00:00:55,860 --> 00:00:58,500
about my new research my talks and

25
00:00:58,500 --> 00:01:00,860
everything

26
00:01:00,899 --> 00:01:03,059
so what are we going to talk about today

27
00:01:03,059 --> 00:01:04,500
um first I want to give a short

28
00:01:04,500 --> 00:01:07,080
introduction about what Azure ID

29
00:01:07,080 --> 00:01:11,220
actually is and how zero trust looks

30
00:01:11,220 --> 00:01:13,320
from the perspective of Microsoft very

31
00:01:13,320 --> 00:01:16,439
short and then we're really gonna diving

32
00:01:16,439 --> 00:01:19,500
into Azure ad joined devices so looking

33
00:01:19,500 --> 00:01:22,439
how the device joins works and all the

34
00:01:22,439 --> 00:01:25,380
tokens that are in play how these tokens

35
00:01:25,380 --> 00:01:27,420
are protected on the device how they're

36
00:01:27,420 --> 00:01:29,159
protected by hardware and by software

37
00:01:29,159 --> 00:01:31,860
and then dive into the vulnerabilities

38
00:01:31,860 --> 00:01:34,259
that I found while researching this so

39
00:01:34,259 --> 00:01:36,180
stealing the tokens bypassing security

40
00:01:36,180 --> 00:01:39,659
measures and abusing some parts of the

41
00:01:39,659 --> 00:01:41,939
joint process to do things that weren't

42
00:01:41,939 --> 00:01:43,500
quite intended

43
00:01:43,500 --> 00:01:45,960
and lastly if there's some extra time

44
00:01:45,960 --> 00:01:48,360
um also a nice MFA bypass if you have

45
00:01:48,360 --> 00:01:51,899
the the right admin role in Azure ID

46
00:01:51,899 --> 00:01:53,700
so to

47
00:01:53,700 --> 00:01:56,100
make some clear some things up this talk

48
00:01:56,100 --> 00:01:58,259
is about Azure active directory and

49
00:01:58,259 --> 00:02:00,180
despite being called active directory it

50
00:02:00,180 --> 00:02:01,680
doesn't really have any relationship

51
00:02:01,680 --> 00:02:04,079
with the on-prem active directory that

52
00:02:04,079 --> 00:02:05,659
we're all probably very familiar with

53
00:02:05,659 --> 00:02:08,880
but Azure ad is really the identity

54
00:02:08,880 --> 00:02:11,879
platform for all of Microsoft's Cloud

55
00:02:11,879 --> 00:02:15,420
offerings so office 65 but also the

56
00:02:15,420 --> 00:02:18,420
Azure infrastructure and you can also

57
00:02:18,420 --> 00:02:20,340
like integrate your own applications

58
00:02:20,340 --> 00:02:22,700
with Azure ad so that your users can

59
00:02:22,700 --> 00:02:26,099
authenticate to any first or third-party

60
00:02:26,099 --> 00:02:27,480
application

61
00:02:27,480 --> 00:02:29,160
and the stock we won't be talking about

62
00:02:29,160 --> 00:02:31,379
Azure infrastructure such as VMS or

63
00:02:31,379 --> 00:02:33,120
databases or whatever but it's really

64
00:02:33,120 --> 00:02:35,940
focusing on the identity parts of azure

65
00:02:35,940 --> 00:02:37,980
80.

66
00:02:37,980 --> 00:02:40,140
now a little bit about zero trust

67
00:02:40,140 --> 00:02:42,180
um well it's been a popular buzzword

68
00:02:42,180 --> 00:02:44,640
from the last few years and I'm not even

69
00:02:44,640 --> 00:02:46,560
sure what exactly zero trust means or

70
00:02:46,560 --> 00:02:49,620
what people envisioned by it but this is

71
00:02:49,620 --> 00:02:52,680
an image that Microsoft uses

72
00:02:52,680 --> 00:02:55,200
and basically what the ideas of zero

73
00:02:55,200 --> 00:02:57,000
trust is that you don't have like the

74
00:02:57,000 --> 00:02:59,459
traditional firewall based approach and

75
00:02:59,459 --> 00:03:01,140
when you're in the office then it's like

76
00:03:01,140 --> 00:03:03,060
trusted or something but it's really

77
00:03:03,060 --> 00:03:04,980
like zero trust anyone can work from

78
00:03:04,980 --> 00:03:07,440
anywhere and whether you can access

79
00:03:07,440 --> 00:03:09,840
certain resources is really based on

80
00:03:09,840 --> 00:03:13,680
like Telemetry so if you're on a trusted

81
00:03:13,680 --> 00:03:15,300
corporate device then you can access

82
00:03:15,300 --> 00:03:17,700
some business apps and if you want to

83
00:03:17,700 --> 00:03:21,120
bring your own device logging in from I

84
00:03:21,120 --> 00:03:22,680
don't know some shady country then

85
00:03:22,680 --> 00:03:25,019
you're not allowed to access sensitive

86
00:03:25,019 --> 00:03:26,580
business data

87
00:03:26,580 --> 00:03:29,640
if you look at this picture on the left

88
00:03:29,640 --> 00:03:32,879
hand side you see a few things versus

89
00:03:32,879 --> 00:03:35,280
identities well identities of course

90
00:03:35,280 --> 00:03:37,819
obvious it's your account your personal

91
00:03:37,819 --> 00:03:41,340
trusted account and protect it with the

92
00:03:41,340 --> 00:03:43,560
password with MFA or with passwordless

93
00:03:43,560 --> 00:03:45,840
authentication methods and on the bottom

94
00:03:45,840 --> 00:03:49,920
we also see devices so in zero trust

95
00:03:49,920 --> 00:03:52,620
devices actually play a quite important

96
00:03:52,620 --> 00:03:57,540
role so what this means is that part of

97
00:03:57,540 --> 00:04:00,060
your identity lives on your device and

98
00:04:00,060 --> 00:04:03,780
the device checks if it's like compliant

99
00:04:03,780 --> 00:04:06,239
and if it's like running an antivirus or

100
00:04:06,239 --> 00:04:08,159
something and as long as you're on that

101
00:04:08,159 --> 00:04:10,319
trusted device and that device doesn't

102
00:04:10,319 --> 00:04:12,900
do anything weird that makes it become

103
00:04:12,900 --> 00:04:15,840
interested then you can log in to your

104
00:04:15,840 --> 00:04:17,579
business apps

105
00:04:17,579 --> 00:04:20,760
that's really the very short version and

106
00:04:20,760 --> 00:04:23,400
not mentioning all the AI and machine

107
00:04:23,400 --> 00:04:26,160
learning things that play into let's

108
00:04:26,160 --> 00:04:28,560
move into play here but short version

109
00:04:28,560 --> 00:04:30,960
it's about identities and also about

110
00:04:30,960 --> 00:04:33,419
devices and in this talk we'll really

111
00:04:33,419 --> 00:04:36,240
talk about the five's identities

112
00:04:36,240 --> 00:04:39,060
so what is a device identity device

113
00:04:39,060 --> 00:04:41,220
identity is basically a device that is

114
00:04:41,220 --> 00:04:43,500
either registered or joined to Azure ID

115
00:04:43,500 --> 00:04:46,139
and that can be mobile device so your

116
00:04:46,139 --> 00:04:48,840
phone or it can be a Windows 10 based so

117
00:04:48,840 --> 00:04:50,699
it's just a laptop or desktop

118
00:04:50,699 --> 00:04:53,580
and these devices exist as objects in

119
00:04:53,580 --> 00:04:55,500
Azure active directory

120
00:04:55,500 --> 00:04:57,780
so there's a link between the physical

121
00:04:57,780 --> 00:05:00,120
device that I have here and the device

122
00:05:00,120 --> 00:05:02,520
as energy ad knows it

123
00:05:02,520 --> 00:05:04,380
and these devices can then be managed

124
00:05:04,380 --> 00:05:05,880
for example by a mobile device

125
00:05:05,880 --> 00:05:09,240
management solution or by InTune which

126
00:05:09,240 --> 00:05:11,160
is Microsoft's own device management

127
00:05:11,160 --> 00:05:13,680
solution

128
00:05:13,680 --> 00:05:16,259
now there are several options for a

129
00:05:16,259 --> 00:05:18,600
device join the first one is azure ad

130
00:05:18,600 --> 00:05:21,960
joints that's really similar to active

131
00:05:21,960 --> 00:05:23,820
directory domain join it's for corporate

132
00:05:23,820 --> 00:05:26,100
devices and you're joining it to Azure

133
00:05:26,100 --> 00:05:29,039
active directory to make sure that Azure

134
00:05:29,039 --> 00:05:31,080
active directory is the kind of the

135
00:05:31,080 --> 00:05:33,360
Authority for that device which pushes

136
00:05:33,360 --> 00:05:36,600
all the the policies and the identity

137
00:05:36,600 --> 00:05:37,919
layer

138
00:05:37,919 --> 00:05:39,780
and that's really for corporate owned

139
00:05:39,780 --> 00:05:41,580
devices so you're not supposed to do

140
00:05:41,580 --> 00:05:44,039
that for like your phone or your

141
00:05:44,039 --> 00:05:46,680
um your your bring your own device

142
00:05:46,680 --> 00:05:49,320
and this is primarily for Windows 10

143
00:05:49,320 --> 00:05:50,460
only

144
00:05:50,460 --> 00:05:53,699
so mobile devices you can also add to

145
00:05:53,699 --> 00:05:55,800
Azure ID but then they are Azure ad

146
00:05:55,800 --> 00:05:58,259
registered so that's that's a different

147
00:05:58,259 --> 00:06:00,539
thing for Azure ID there's a difference

148
00:06:00,539 --> 00:06:03,600
between registered and Joint devices and

149
00:06:03,600 --> 00:06:06,419
it differs a bit in how it treats those

150
00:06:06,419 --> 00:06:07,560
devices

151
00:06:07,560 --> 00:06:10,080
there's lastly also a hybrid join and

152
00:06:10,080 --> 00:06:11,880
that's if you still have an on-prem

153
00:06:11,880 --> 00:06:13,440
active directory and you want to

154
00:06:13,440 --> 00:06:15,360
integrate that with Azure ad then your

155
00:06:15,360 --> 00:06:18,900
domain joint devices can be synced to

156
00:06:18,900 --> 00:06:20,520
Azure active directory and then the

157
00:06:20,520 --> 00:06:23,580
device will also register itself in

158
00:06:23,580 --> 00:06:25,979
Azure active directory using the data

159
00:06:25,979 --> 00:06:29,659
from the the on-prem device

160
00:06:30,780 --> 00:06:31,860
so

161
00:06:31,860 --> 00:06:34,500
device join and compliancy that's two

162
00:06:34,500 --> 00:06:37,380
things that go kind of hand in hand so

163
00:06:37,380 --> 00:06:39,600
the really the advantage of and where

164
00:06:39,600 --> 00:06:41,880
this whole zero trust comes into play is

165
00:06:41,880 --> 00:06:43,919
that you join your device to Azure ad

166
00:06:43,919 --> 00:06:46,620
and then you have it managed by an MDM

167
00:06:46,620 --> 00:06:49,199
such as InTune in this case and In Tune

168
00:06:49,199 --> 00:06:51,960
In Tune you define search and policies

169
00:06:51,960 --> 00:06:54,600
such that for example you need to have a

170
00:06:54,600 --> 00:06:56,039
certain endpoint protection installed

171
00:06:56,039 --> 00:06:58,740
your drive needs to be encrypted kind of

172
00:06:58,740 --> 00:07:01,139
like the old gpos so you define all kind

173
00:07:01,139 --> 00:07:03,180
of policies that the device needs to

174
00:07:03,180 --> 00:07:07,319
comply with and if all if the device has

175
00:07:07,319 --> 00:07:09,120
applied all the policies it reports

176
00:07:09,120 --> 00:07:11,400
itself as hey I did all this stuff and

177
00:07:11,400 --> 00:07:14,699
then the device is treated as compliant

178
00:07:14,699 --> 00:07:16,440
and you can use this with conditional

179
00:07:16,440 --> 00:07:20,099
access to specify like if you want to

180
00:07:20,099 --> 00:07:22,560
exit this resource you need to be on a

181
00:07:22,560 --> 00:07:25,860
compliant device so that's quite quite a

182
00:07:25,860 --> 00:07:28,680
strict security measure so if you would

183
00:07:28,680 --> 00:07:31,440
set that for an application then even if

184
00:07:31,440 --> 00:07:33,780
I have the password and the MFA token

185
00:07:33,780 --> 00:07:36,060
for a user I still wouldn't be able to

186
00:07:36,060 --> 00:07:38,460
sign into that application that has for

187
00:07:38,460 --> 00:07:40,440
example sensitive business data because

188
00:07:40,440 --> 00:07:42,360
I'm not doing it from a compliant

189
00:07:42,360 --> 00:07:44,400
corporate device

190
00:07:44,400 --> 00:07:46,860
and this conditional access policies

191
00:07:46,860 --> 00:07:49,080
where a compliant defined is needed is

192
00:07:49,080 --> 00:07:51,240
really what I'm looking into in this

193
00:07:51,240 --> 00:07:53,419
talk

194
00:07:53,520 --> 00:07:56,819
so compliant devices is also kind of

195
00:07:56,819 --> 00:08:00,000
linked to corporate only devices

196
00:08:00,000 --> 00:08:03,300
um because like most organizations they

197
00:08:03,300 --> 00:08:05,280
just don't want you to have just any

198
00:08:05,280 --> 00:08:07,139
device that you use for corporate stuff

199
00:08:07,139 --> 00:08:09,419
like if you have a crappy old laptop

200
00:08:09,419 --> 00:08:13,259
that you join to the companies Azure ID

201
00:08:13,259 --> 00:08:15,780
and then just make that device compliant

202
00:08:15,780 --> 00:08:17,940
then they still don't know what kind of

203
00:08:17,940 --> 00:08:19,680
Hardware is on there what was previously

204
00:08:19,680 --> 00:08:22,379
on there and what's on that so

205
00:08:22,379 --> 00:08:24,360
a lot of organizations they will lock

206
00:08:24,360 --> 00:08:27,120
down which devices can actually be

207
00:08:27,120 --> 00:08:29,699
considered corporate devices and then

208
00:08:29,699 --> 00:08:31,259
they also make sure that you can only

209
00:08:31,259 --> 00:08:34,559
enroll corporate devices into InTune

210
00:08:34,559 --> 00:08:37,080
which is a prerequisite for it to become

211
00:08:37,080 --> 00:08:39,479
compliant

212
00:08:39,479 --> 00:08:42,419
and there's a few ways for that and in

213
00:08:42,419 --> 00:08:44,219
this case we'll be mostly looking at

214
00:08:44,219 --> 00:08:47,040
Windows autopilot and windows autopilot

215
00:08:47,040 --> 00:08:52,260
is a technology which allows you to like

216
00:08:52,260 --> 00:08:54,720
specify which devices are considered

217
00:08:54,720 --> 00:08:56,760
corporate either when you buy them

218
00:08:56,760 --> 00:08:58,860
directly from the vendor or when you

219
00:08:58,860 --> 00:09:01,080
pre-register them based on a serial

220
00:09:01,080 --> 00:09:04,620
number so if you have if you're using

221
00:09:04,620 --> 00:09:07,800
autopilot you can just buy some devices

222
00:09:07,800 --> 00:09:10,680
from from a hardware vendor and they

223
00:09:10,680 --> 00:09:13,920
like pre-enrolled

224
00:09:13,920 --> 00:09:17,339
the hardware IDs of these devices in

225
00:09:17,339 --> 00:09:20,160
InTune and then they will can be

226
00:09:20,160 --> 00:09:21,959
directly shipped to your employees and

227
00:09:21,959 --> 00:09:23,880
it will automatically install all the

228
00:09:23,880 --> 00:09:25,380
software it will automatically join to

229
00:09:25,380 --> 00:09:28,920
Azure ID and that's well it's kind of an

230
00:09:28,920 --> 00:09:31,380
end-to-end solution but it's also a way

231
00:09:31,380 --> 00:09:34,019
to make sure that only devices that were

232
00:09:34,019 --> 00:09:36,000
actually bought by the company can be

233
00:09:36,000 --> 00:09:39,240
enrolled and can be can be used for

234
00:09:39,240 --> 00:09:41,779
corporate access

235
00:09:42,180 --> 00:09:44,339
so I'm really looking for this research

236
00:09:44,339 --> 00:09:48,320
scenario for kind of the strictest

237
00:09:48,320 --> 00:09:51,600
District scenario so it's Windows 10

238
00:09:51,600 --> 00:09:53,760
devices or Windows 11 doesn't really

239
00:09:53,760 --> 00:09:56,339
make a difference so the company is

240
00:09:56,339 --> 00:09:58,260
using autopilot so you cannot just take

241
00:09:58,260 --> 00:10:00,839
any laptop and use it for corporate

242
00:10:00,839 --> 00:10:03,660
access because they restricted personal

243
00:10:03,660 --> 00:10:05,700
devices

244
00:10:05,700 --> 00:10:07,260
um there's a requirement for device

245
00:10:07,260 --> 00:10:09,779
compliancy so you cannot access any

246
00:10:09,779 --> 00:10:12,480
business data from a non-compliant

247
00:10:12,480 --> 00:10:15,560
device and also the device uses

248
00:10:15,560 --> 00:10:17,700
hardware-based protection to make sure

249
00:10:17,700 --> 00:10:21,080
that the secrets are protected

250
00:10:22,019 --> 00:10:23,820
I had a few research questions for this

251
00:10:23,820 --> 00:10:26,399
first of all like how are devices

252
00:10:26,399 --> 00:10:28,200
actually joined to Azure ad how does

253
00:10:28,200 --> 00:10:30,300
that work how is there is there like

254
00:10:30,300 --> 00:10:31,980
sort of trust established between the

255
00:10:31,980 --> 00:10:35,040
device and Azure ID and if there's a

256
00:10:35,040 --> 00:10:37,080
trust it probably relies on some sort of

257
00:10:37,080 --> 00:10:39,420
Secrets cryptographic keys or stiff

258
00:10:39,420 --> 00:10:41,880
goods and stuff how are these actually

259
00:10:41,880 --> 00:10:43,500
protected by Hardware

260
00:10:43,500 --> 00:10:45,540
and if they are protected by hardware

261
00:10:45,540 --> 00:10:48,420
and we're not supposed to access them

262
00:10:48,420 --> 00:10:50,519
um can we still extract them or can we

263
00:10:50,519 --> 00:10:53,640
bypass the needs for having the actual

264
00:10:53,640 --> 00:10:56,220
Hardware so we could steal the secrets

265
00:10:56,220 --> 00:10:58,079
away and use them somewhere else

266
00:10:58,079 --> 00:11:00,779
and can we bypassed requirements for a

267
00:11:00,779 --> 00:11:03,480
compliant device

268
00:11:03,480 --> 00:11:05,360
so to start with the first one

269
00:11:05,360 --> 00:11:08,040
I started looking at the device join

270
00:11:08,040 --> 00:11:11,240
flow so if you have a completely new

271
00:11:11,240 --> 00:11:14,880
Windows device for example laptop and

272
00:11:14,880 --> 00:11:16,260
you started up for the first time during

273
00:11:16,260 --> 00:11:19,079
installation it will ask you to sign in

274
00:11:19,079 --> 00:11:20,579
with your Microsoft account

275
00:11:20,579 --> 00:11:23,279
and if that's a corporate account it

276
00:11:23,279 --> 00:11:26,100
will automatically join the device to

277
00:11:26,100 --> 00:11:28,940
Azure ID if you enter that here

278
00:11:28,940 --> 00:11:31,260
alternatively if you have already

279
00:11:31,260 --> 00:11:34,100
installed Windows there you can still

280
00:11:34,100 --> 00:11:38,339
join the device after installation from

281
00:11:38,339 --> 00:11:40,200
the settings so you can go to access

282
00:11:40,200 --> 00:11:42,360
work or school and then say join to

283
00:11:42,360 --> 00:11:44,760
Azure ID and then you can also sign in

284
00:11:44,760 --> 00:11:46,200
with your corporate account and it will

285
00:11:46,200 --> 00:11:49,760
be joined to Azure ID

286
00:11:49,800 --> 00:11:52,519
so once you start this flow

287
00:11:52,519 --> 00:11:55,860
it will just request you to sign in so

288
00:11:55,860 --> 00:11:57,899
you have to enter your username password

289
00:11:57,899 --> 00:12:00,839
and MFA fed setup

290
00:12:00,839 --> 00:12:02,760
it requests a token for the device

291
00:12:02,760 --> 00:12:05,519
registration service and then it's prone

292
00:12:05,519 --> 00:12:09,480
to this this final okay prompt like are

293
00:12:09,480 --> 00:12:11,279
you sure you want to register this

294
00:12:11,279 --> 00:12:13,920
device to this organization

295
00:12:13,920 --> 00:12:17,160
and once you click join then a lot of

296
00:12:17,160 --> 00:12:19,140
things start to happen

297
00:12:19,140 --> 00:12:23,279
so first of all two public private Keys

298
00:12:23,279 --> 00:12:25,260
key pairs are generated

299
00:12:25,260 --> 00:12:27,540
the first one is the device key and the

300
00:12:27,540 --> 00:12:30,480
second one is the transport key so these

301
00:12:30,480 --> 00:12:31,380
are

302
00:12:31,380 --> 00:12:33,600
um yeah like asymmetric cryptography

303
00:12:33,600 --> 00:12:36,660
keys and the public part of that is sent

304
00:12:36,660 --> 00:12:40,019
to Azure ID so this can it can validate

305
00:12:40,019 --> 00:12:42,240
your possession of the private part of

306
00:12:42,240 --> 00:12:44,220
the key and of course the private key

307
00:12:44,220 --> 00:12:47,760
remains on the device itself

308
00:12:47,760 --> 00:12:49,680
if you look at the registration requests

309
00:12:49,680 --> 00:12:53,160
we see a few things here

310
00:12:53,160 --> 00:12:56,820
so at the top is the authorization token

311
00:12:56,820 --> 00:12:59,700
this is a really standard access token

312
00:12:59,700 --> 00:13:02,100
for the device registration service if

313
00:13:02,100 --> 00:13:04,380
you're familiar with actually ID tokens

314
00:13:04,380 --> 00:13:06,660
this is quite normal so this basically

315
00:13:06,660 --> 00:13:09,180
the token from your user that you're

316
00:13:09,180 --> 00:13:10,860
accessing the device registration

317
00:13:10,860 --> 00:13:14,639
service to join this device to Azure ID

318
00:13:14,639 --> 00:13:17,100
the second one is the certificate

319
00:13:17,100 --> 00:13:19,860
signing request so what it actually does

320
00:13:19,860 --> 00:13:22,380
is it created a signing request and it

321
00:13:22,380 --> 00:13:24,779
sends that to Azure ID so that Azure ID

322
00:13:24,779 --> 00:13:28,820
can issue a certificate for the device

323
00:13:28,980 --> 00:13:31,079
there's also the transport key

324
00:13:31,079 --> 00:13:34,019
and this is the public transport key and

325
00:13:34,019 --> 00:13:35,940
the transport key is used later for some

326
00:13:35,940 --> 00:13:39,620
additional uh some additional encryption

327
00:13:39,620 --> 00:13:41,519
then there are also the device

328
00:13:41,519 --> 00:13:43,920
properties so it says what is the type

329
00:13:43,920 --> 00:13:46,980
what is the OS version that will also be

330
00:13:46,980 --> 00:13:49,139
used in the registration but it's not

331
00:13:49,139 --> 00:13:51,180
actually validated it's just to populate

332
00:13:51,180 --> 00:13:53,399
some some informational fields in Azure

333
00:13:53,399 --> 00:13:55,519
ID

334
00:13:56,100 --> 00:13:57,839
um then there's the joint type we're

335
00:13:57,839 --> 00:13:59,760
only interested in joint type zero here

336
00:13:59,760 --> 00:14:02,700
which is used for AED join and for

337
00:14:02,700 --> 00:14:04,320
device registration there's another

338
00:14:04,320 --> 00:14:07,260
joint type so that's actually using the

339
00:14:07,260 --> 00:14:09,360
same flow but with a different number

340
00:14:09,360 --> 00:14:10,680
here

341
00:14:10,680 --> 00:14:12,800
and there's also this device ticket

342
00:14:12,800 --> 00:14:15,480
which you can leave out but we will

343
00:14:15,480 --> 00:14:17,459
actually be looking at what exactly that

344
00:14:17,459 --> 00:14:20,660
the five sticker does later

345
00:14:20,880 --> 00:14:23,760
so this is just a post request that you

346
00:14:23,760 --> 00:14:26,940
send to Azure ID and then it issues this

347
00:14:26,940 --> 00:14:29,519
difficult if everything goes well and

348
00:14:29,519 --> 00:14:31,500
you have a device object that is created

349
00:14:31,500 --> 00:14:33,959
in Azure ID so here on the bottom you

350
00:14:33,959 --> 00:14:37,139
see this new device which is azure ad

351
00:14:37,139 --> 00:14:39,779
joins you can see who the owner is which

352
00:14:39,779 --> 00:14:42,240
is the user that just registered it and

353
00:14:42,240 --> 00:14:44,459
you can also see that there's not yet an

354
00:14:44,459 --> 00:14:46,920
MDM setup for it or it's not compliant

355
00:14:46,920 --> 00:14:49,860
because it's not yet joined to any NDM

356
00:14:49,860 --> 00:14:52,560
but the device object exists and it has

357
00:14:52,560 --> 00:14:55,800
the device now has a certificate

358
00:14:55,800 --> 00:14:57,480
which it gets here so this is the

359
00:14:57,480 --> 00:14:59,220
response

360
00:14:59,220 --> 00:15:01,399
um it basically gives you this difficult

361
00:15:01,399 --> 00:15:04,199
and the thumbprint of the stiff cuts and

362
00:15:04,199 --> 00:15:05,279
the

363
00:15:05,279 --> 00:15:07,680
um the stiff good data

364
00:15:07,680 --> 00:15:09,500
and it also

365
00:15:09,500 --> 00:15:12,839
makes some membership changes so this is

366
00:15:12,839 --> 00:15:14,519
the changes to the local administrators

367
00:15:14,519 --> 00:15:16,079
group to add the correct security

368
00:15:16,079 --> 00:15:19,199
identifiers to there that Azure admins

369
00:15:19,199 --> 00:15:20,760
can log in on your laptop and have

370
00:15:20,760 --> 00:15:22,680
administrative rights

371
00:15:22,680 --> 00:15:24,060
but the important part is the

372
00:15:24,060 --> 00:15:26,100
certificate here which basically

373
00:15:26,100 --> 00:15:29,040
establishes a trust between Azure ID and

374
00:15:29,040 --> 00:15:31,019
the device because Azure ID can

375
00:15:31,019 --> 00:15:33,060
recognize difficult edit issues and the

376
00:15:33,060 --> 00:15:35,160
device can prove that it possesses the

377
00:15:35,160 --> 00:15:37,980
key for the certificate by by signing

378
00:15:37,980 --> 00:15:41,300
some some data for example

379
00:15:41,820 --> 00:15:44,040
then if you query the status of the

380
00:15:44,040 --> 00:15:46,320
device it will say hey yes I'm Azure ID

381
00:15:46,320 --> 00:15:49,620
joint and I have this certificate that

382
00:15:49,620 --> 00:15:51,480
identifies my device

383
00:15:51,480 --> 00:15:53,639
and in this case we also see that the

384
00:15:53,639 --> 00:15:56,279
key provider for these stiff Cuts is the

385
00:15:56,279 --> 00:15:59,160
Microsoft's platform crypto provider and

386
00:15:59,160 --> 00:16:03,959
also that it's protected by a TPM

387
00:16:03,959 --> 00:16:07,199
so what is a TPM a TPM stands for

388
00:16:07,199 --> 00:16:09,800
trusted platform module and it's

389
00:16:09,800 --> 00:16:13,440
sometimes it's a separate processor and

390
00:16:13,440 --> 00:16:15,720
sometimes integrated in the in the CPU

391
00:16:15,720 --> 00:16:17,880
but it's kind of used as a sort of

392
00:16:17,880 --> 00:16:21,260
secure Zone that you're not supposed to

393
00:16:21,260 --> 00:16:24,120
be able to extract cryptographic data

394
00:16:24,120 --> 00:16:25,019
from

395
00:16:25,019 --> 00:16:27,300
which is this is also probably why it's

396
00:16:27,300 --> 00:16:29,940
requirement for Windows 11 because they

397
00:16:29,940 --> 00:16:32,160
really are pushing for these these

398
00:16:32,160 --> 00:16:34,560
Hardware Secrets being being used

399
00:16:34,560 --> 00:16:37,860
instead of software secrets

400
00:16:37,860 --> 00:16:40,800
so how does a TPM work

401
00:16:40,800 --> 00:16:44,279
um we have just created two device keys

402
00:16:44,279 --> 00:16:47,820
so a transport key and a device key and

403
00:16:47,820 --> 00:16:50,880
these are stored in the TPM somehow and

404
00:16:50,880 --> 00:16:53,160
exactly how it works but the idea is

405
00:16:53,160 --> 00:16:55,139
that you can't extract these keys from

406
00:16:55,139 --> 00:16:58,440
there any longer what you can do is use

407
00:16:58,440 --> 00:17:01,560
the keys so the device itself can say

408
00:17:01,560 --> 00:17:04,260
hey I'm trying to use this key to do

409
00:17:04,260 --> 00:17:06,839
some cryptographic operation hey TPM can

410
00:17:06,839 --> 00:17:08,520
you please do that for me and the TPM

411
00:17:08,520 --> 00:17:11,220
will will sign whatever data you want

412
00:17:11,220 --> 00:17:14,520
and then it will then it will go on its

413
00:17:14,520 --> 00:17:17,339
merry way and well basically you can use

414
00:17:17,339 --> 00:17:19,740
the the keys but you cannot steal them

415
00:17:19,740 --> 00:17:22,199
or use them somewhere else

416
00:17:22,199 --> 00:17:24,900
there's a few caveats with that

417
00:17:24,900 --> 00:17:27,720
um a TPM doesn't protect against all the

418
00:17:27,720 --> 00:17:29,160
deck scenarios

419
00:17:29,160 --> 00:17:31,740
but the TPM protects against is like key

420
00:17:31,740 --> 00:17:33,900
extraction from a power down stolen

421
00:17:33,900 --> 00:17:36,780
device so if my laptop gets stolen while

422
00:17:36,780 --> 00:17:39,840
it's off the TPM should protect its

423
00:17:39,840 --> 00:17:41,640
cryptographic data especially if it's

424
00:17:41,640 --> 00:17:45,380
protected by a pin and it also prevents

425
00:17:45,380 --> 00:17:48,419
attackers from extracting the the raw

426
00:17:48,419 --> 00:17:51,720
key data from the operating system level

427
00:17:51,720 --> 00:17:54,360
what it doesn't predict against is in

428
00:17:54,360 --> 00:17:55,980
some cases like sniffing the connection

429
00:17:55,980 --> 00:18:00,179
between the CPU and the TPM or like I

430
00:18:00,179 --> 00:18:01,860
mentioned before from actually using the

431
00:18:01,860 --> 00:18:04,200
cryptographic material if you have the

432
00:18:04,200 --> 00:18:06,000
correct privileges on the system that

433
00:18:06,000 --> 00:18:07,679
the DPM is in

434
00:18:07,679 --> 00:18:10,500
so this is important distinction so even

435
00:18:10,500 --> 00:18:11,580
though the secrets are stored in

436
00:18:11,580 --> 00:18:14,039
Hardware it primarily protects against

437
00:18:14,039 --> 00:18:17,940
secret theft or um accessing the secrets

438
00:18:17,940 --> 00:18:21,299
from from the device while it's powered

439
00:18:21,299 --> 00:18:22,200
off

440
00:18:22,200 --> 00:18:24,539
it doesn't prevent anyone from using the

441
00:18:24,539 --> 00:18:25,980
secrets if they actually have codes

442
00:18:25,980 --> 00:18:28,140
running with high privileges on the

443
00:18:28,140 --> 00:18:30,320
machine

444
00:18:30,600 --> 00:18:32,700
all right so now we looked at how the

445
00:18:32,700 --> 00:18:34,700
device registration works

446
00:18:34,700 --> 00:18:38,280
after you've registered your device

447
00:18:38,280 --> 00:18:40,320
the user will sign in with their

448
00:18:40,320 --> 00:18:41,880
username and passwords on the normal

449
00:18:41,880 --> 00:18:44,220
Windows login screen which in this case

450
00:18:44,220 --> 00:18:45,799
is the

451
00:18:45,799 --> 00:18:47,880
username password of the Azure ID

452
00:18:47,880 --> 00:18:49,140
account

453
00:18:49,140 --> 00:18:51,720
and then Azure ID will issue a primary

454
00:18:51,720 --> 00:18:54,059
refresh token now what is a primary

455
00:18:54,059 --> 00:18:57,179
refresh token a primary refresh token is

456
00:18:57,179 --> 00:19:00,480
like a long-lived token which can be

457
00:19:00,480 --> 00:19:04,140
used to get other tokens if you have if

458
00:19:04,140 --> 00:19:06,059
you're familiar with Kerberos it's kind

459
00:19:06,059 --> 00:19:07,980
of like a very long lift tickets

460
00:19:07,980 --> 00:19:10,320
granting ticket so you can use this

461
00:19:10,320 --> 00:19:13,020
primary refresh token to request other

462
00:19:13,020 --> 00:19:15,240
tokens which you can then use to sign in

463
00:19:15,240 --> 00:19:18,660
into office 65 or whatever Azure ad

464
00:19:18,660 --> 00:19:22,640
joints servers that you want

465
00:19:27,120 --> 00:19:30,120
so how is this issued

466
00:19:30,120 --> 00:19:31,860
first of all

467
00:19:31,860 --> 00:19:33,480
um in most of these token issue

468
00:19:33,480 --> 00:19:35,820
processes you first have to get a nonce

469
00:19:35,820 --> 00:19:37,140
from Azure ID

470
00:19:37,140 --> 00:19:39,000
because you have to sign some

471
00:19:39,000 --> 00:19:41,940
cryptographic data and that usually is a

472
00:19:41,940 --> 00:19:44,160
nouns that you get from Azure ad

473
00:19:44,160 --> 00:19:46,380
or it's called a challenge in this case

474
00:19:46,380 --> 00:19:48,720
so it's just a post request and you say

475
00:19:48,720 --> 00:19:52,440
hey please give me a challenge or some

476
00:19:52,440 --> 00:19:54,720
piece of data that I can later use to

477
00:19:54,720 --> 00:19:57,720
use my cryptographic knowledge on

478
00:19:57,720 --> 00:20:00,480
um it's just a simple post request

479
00:20:00,480 --> 00:20:03,059
and this gives you a nouns so it's just

480
00:20:03,059 --> 00:20:05,220
a non it's some binary data

481
00:20:05,220 --> 00:20:07,919
um it's encrypted and Azure ID can

482
00:20:07,919 --> 00:20:09,900
decrypt it you yourself are not supposed

483
00:20:09,900 --> 00:20:11,700
to

484
00:20:11,700 --> 00:20:13,980
um so it contains some data but you

485
00:20:13,980 --> 00:20:15,480
don't know what and you also can change

486
00:20:15,480 --> 00:20:17,760
it you can only use it in the further

487
00:20:17,760 --> 00:20:19,620
flow

488
00:20:19,620 --> 00:20:23,640
now to request a a primary refresh token

489
00:20:23,640 --> 00:20:26,160
it sends some signed data back to the

490
00:20:26,160 --> 00:20:27,120
server

491
00:20:27,120 --> 00:20:30,120
and well you see a lot of a lot of

492
00:20:30,120 --> 00:20:32,400
things here but if you're familiar with

493
00:20:32,400 --> 00:20:35,160
tokens you can already see the eyj here

494
00:20:35,160 --> 00:20:37,980
which is a kind of a hint that is

495
00:20:37,980 --> 00:20:40,919
probably a Json web token

496
00:20:40,919 --> 00:20:42,780
and indeed this

497
00:20:42,780 --> 00:20:47,220
and in this case you can see that it it

498
00:20:47,220 --> 00:20:50,820
sends a request using using a science

499
00:20:50,820 --> 00:20:54,480
Json web token which contains the

500
00:20:54,480 --> 00:20:56,280
username and password of the user that

501
00:20:56,280 --> 00:20:59,160
is currently signing in

502
00:20:59,160 --> 00:21:02,100
and it also includes the nons on top of

503
00:21:02,100 --> 00:21:04,919
here so it takes some data that it gets

504
00:21:04,919 --> 00:21:06,780
from Azure ad it asks the username and

505
00:21:06,780 --> 00:21:08,400
passwords and then it sends it back to

506
00:21:08,400 --> 00:21:10,679
the server

507
00:21:10,679 --> 00:21:12,840
then it gets a reply

508
00:21:12,840 --> 00:21:16,080
and initial fly is our actual primary

509
00:21:16,080 --> 00:21:19,320
refresh token so this is also like a

510
00:21:19,320 --> 00:21:21,660
blob of encrypted data you cannot do

511
00:21:21,660 --> 00:21:23,520
anything with it it's encrypted with

512
00:21:23,520 --> 00:21:26,220
keys that only Azure ID has but you can

513
00:21:26,220 --> 00:21:30,179
use it to request other tokens

514
00:21:30,179 --> 00:21:32,940
you also get an encrypted session key

515
00:21:32,940 --> 00:21:35,400
and this is where the transport key

516
00:21:35,400 --> 00:21:37,679
comes in that we generated earlier

517
00:21:37,679 --> 00:21:40,260
so the device has the transport key it

518
00:21:40,260 --> 00:21:43,799
can decrypt the session key and then the

519
00:21:43,799 --> 00:21:47,640
session key is the piece of piece of

520
00:21:47,640 --> 00:21:49,799
information that it needs to actually

521
00:21:49,799 --> 00:21:53,640
use this primary refresh token

522
00:21:53,640 --> 00:21:55,919
there's also some metadata in here which

523
00:21:55,919 --> 00:21:57,960
says that the primary refresh token

524
00:21:57,960 --> 00:22:00,960
expires in two weeks this is a lie it

525
00:22:00,960 --> 00:22:03,120
actually is valid for 90 days I'm not

526
00:22:03,120 --> 00:22:05,760
sure if they updated this already but

527
00:22:05,760 --> 00:22:09,179
it's it says it expires but it doesn't

528
00:22:09,179 --> 00:22:12,179
or at least not as quickly as it's as

529
00:22:12,179 --> 00:22:15,179
Microsoft tells you that it does

530
00:22:15,179 --> 00:22:16,740
so

531
00:22:16,740 --> 00:22:18,120
in all this

532
00:22:18,120 --> 00:22:19,559
long

533
00:22:19,559 --> 00:22:21,600
flow of signing up and getting a primary

534
00:22:21,600 --> 00:22:23,340
refresh token

535
00:22:23,340 --> 00:22:25,020
there's We have basically three

536
00:22:25,020 --> 00:22:28,380
important keys so the key of the device

537
00:22:28,380 --> 00:22:30,840
certificate the transport key and the

538
00:22:30,840 --> 00:22:32,820
session key of the primary refresh token

539
00:22:32,820 --> 00:22:36,600
and these are all stored in the TPM

540
00:22:36,600 --> 00:22:38,820
and the operating system can use these

541
00:22:38,820 --> 00:22:41,400
keys but it can't extract them from the

542
00:22:41,400 --> 00:22:43,260
TPM even if it has the highest

543
00:22:43,260 --> 00:22:45,120
privileges

544
00:22:45,120 --> 00:22:49,500
and using all these Keys the operating

545
00:22:49,500 --> 00:22:51,240
systems can basically use single sign-on

546
00:22:51,240 --> 00:22:56,000
to sign in to any Azure ID resource

547
00:22:56,700 --> 00:22:58,380
so let's see how we can interact with

548
00:22:58,380 --> 00:23:01,320
those primary refresh tokens

549
00:23:01,320 --> 00:23:03,299
so the primary refresh token

550
00:23:03,299 --> 00:23:05,340
um is a token that can be used for

551
00:23:05,340 --> 00:23:08,340
single sign-on and as you if you're

552
00:23:08,340 --> 00:23:10,260
familiar with how Windows does single

553
00:23:10,260 --> 00:23:12,240
sign-on you probably know that any

554
00:23:12,240 --> 00:23:14,159
application that is running on the

555
00:23:14,159 --> 00:23:16,679
system can requesting or sign on data so

556
00:23:16,679 --> 00:23:18,240
it can just say hey I'm trying to sign

557
00:23:18,240 --> 00:23:21,059
into this application okay do that for

558
00:23:21,059 --> 00:23:22,620
me

559
00:23:22,620 --> 00:23:26,240
and that uses some RPC methods or if you

560
00:23:26,240 --> 00:23:29,340
or some helper applications to make sure

561
00:23:29,340 --> 00:23:32,340
that this single sign-on can also

562
00:23:32,340 --> 00:23:34,080
integrate with third-party browsers like

563
00:23:34,080 --> 00:23:36,900
Chrome which don't do this natively

564
00:23:36,900 --> 00:23:39,780
but basically here are some references

565
00:23:39,780 --> 00:23:43,140
that you can use to basically request

566
00:23:43,140 --> 00:23:46,380
single sign-on to any Azure ad connected

567
00:23:46,380 --> 00:23:48,720
Resource as long as you have some code

568
00:23:48,720 --> 00:23:51,840
running on the host so the important

569
00:23:51,840 --> 00:23:54,059
thing here is

570
00:23:54,059 --> 00:23:56,280
this is all nice that it's protected by

571
00:23:56,280 --> 00:23:58,440
a TPM or whatnot but if there's some

572
00:23:58,440 --> 00:24:00,360
interested code running on your system

573
00:24:00,360 --> 00:24:03,299
that can just request tokens and just

574
00:24:03,299 --> 00:24:05,940
sign into anywhere it wants

575
00:24:05,940 --> 00:24:07,980
so this example

576
00:24:07,980 --> 00:24:10,200
um I'm using two different systems one

577
00:24:10,200 --> 00:24:11,880
is my attacker system and one is the

578
00:24:11,880 --> 00:24:13,260
victim system

579
00:24:13,260 --> 00:24:16,440
and here I'm just requesting like okay

580
00:24:16,440 --> 00:24:19,740
can I log in on on outlook.office.com

581
00:24:19,740 --> 00:24:21,179
for example

582
00:24:21,179 --> 00:24:24,360
and so give me a nonce to use for

583
00:24:24,360 --> 00:24:27,240
signing in and then Azure ID will give

584
00:24:27,240 --> 00:24:30,840
me announce and then using that nonce on

585
00:24:30,840 --> 00:24:32,580
the victim machine I can just say hey

586
00:24:32,580 --> 00:24:34,740
can you give me some magic data that

587
00:24:34,740 --> 00:24:36,539
allows me to do single sign-on using

588
00:24:36,539 --> 00:24:37,919
this nodes

589
00:24:37,919 --> 00:24:40,080
that will happily give you

590
00:24:40,080 --> 00:24:42,600
um give you some data back that I call

591
00:24:42,600 --> 00:24:45,179
the primary refresh token cookie and

592
00:24:45,179 --> 00:24:46,860
basically this is

593
00:24:46,860 --> 00:24:48,600
something that you can send to Azure ID

594
00:24:48,600 --> 00:24:51,120
and say hey I'm already signed in please

595
00:24:51,120 --> 00:24:53,159
give me just please just give me tokens

596
00:24:53,159 --> 00:24:54,900
instead of asking me to sign in again

597
00:24:54,900 --> 00:24:58,380
because I'm using single sign-on

598
00:24:58,380 --> 00:25:01,860
and if you use this this token so this

599
00:25:01,860 --> 00:25:05,220
this Json web token data to authenticate

600
00:25:05,220 --> 00:25:06,860
then you can

601
00:25:06,860 --> 00:25:09,360
get actually get some access tokens

602
00:25:09,360 --> 00:25:11,220
which allow you to for example read

603
00:25:11,220 --> 00:25:15,299
email via the outlook.office.com

604
00:25:15,299 --> 00:25:18,360
so we can use the primary fish token

605
00:25:18,360 --> 00:25:20,700
cookie which is based on the original

606
00:25:20,700 --> 00:25:23,640
primary refresh token complete with the

607
00:25:23,640 --> 00:25:26,820
nodes to actually sign in and get the

608
00:25:26,820 --> 00:25:29,279
access token that we need

609
00:25:29,279 --> 00:25:32,400
and I'm doing this on my attacker system

610
00:25:32,400 --> 00:25:33,960
so I'm not doing it on the victim system

611
00:25:33,960 --> 00:25:36,480
but you can see that I can do the single

612
00:25:36,480 --> 00:25:38,700
sign-on and I can get a token which

613
00:25:38,700 --> 00:25:41,039
basically says hey I'm on a managed

614
00:25:41,039 --> 00:25:43,799
device the device is domain joints

615
00:25:43,799 --> 00:25:45,840
um and it's in a known Network so it

616
00:25:45,840 --> 00:25:47,700
gets the data from the original device

617
00:25:47,700 --> 00:25:50,880
which in this case was a hybrid actually

618
00:25:50,880 --> 00:25:52,980
adjoint device instead of my attacker

619
00:25:52,980 --> 00:25:54,779
device which is obviously not joined to

620
00:25:54,779 --> 00:25:57,539
the corporate domain

621
00:25:57,539 --> 00:26:00,000
so this is how you can use single

622
00:26:00,000 --> 00:26:02,460
sign-on to Cache access Azure ID

623
00:26:02,460 --> 00:26:04,919
resources as long as you have a session

624
00:26:04,919 --> 00:26:07,080
on the as long as you have code

625
00:26:07,080 --> 00:26:09,120
execution on the machine

626
00:26:09,120 --> 00:26:10,740
of course

627
00:26:10,740 --> 00:26:13,380
um if you're an attacker you don't want

628
00:26:13,380 --> 00:26:15,659
to rely on continuously having code

629
00:26:15,659 --> 00:26:18,059
execution on the victim machine to do

630
00:26:18,059 --> 00:26:20,159
your actions so it would be great if you

631
00:26:20,159 --> 00:26:23,460
could somehow steal the data and have

632
00:26:23,460 --> 00:26:25,620
some persistence

633
00:26:25,620 --> 00:26:28,080
so I did some further research together

634
00:26:28,080 --> 00:26:30,779
with Benjamin Delphi probably uh you

635
00:26:30,779 --> 00:26:33,360
know Mr creator of mimikatz

636
00:26:33,360 --> 00:26:35,760
and we actually looked at how the

637
00:26:35,760 --> 00:26:38,340
primary refresh token is stored and we

638
00:26:38,340 --> 00:26:40,440
built some combination of memicats and

639
00:26:40,440 --> 00:26:43,679
Road tools to actually steal the PRT

640
00:26:43,679 --> 00:26:45,720
from LSS

641
00:26:45,720 --> 00:26:48,059
now I don't know how all that Elsa's

642
00:26:48,059 --> 00:26:50,279
magic works but basically I know if you

643
00:26:50,279 --> 00:26:52,440
remember me cats with the right command

644
00:26:52,440 --> 00:26:57,000
that it dumps the the data from LSS

645
00:26:57,000 --> 00:26:59,460
and that you here get the primary

646
00:26:59,460 --> 00:27:01,919
refresh token because it's it's cached

647
00:27:01,919 --> 00:27:04,980
in the in the memory of the lsas process

648
00:27:04,980 --> 00:27:07,440
so that way you can steal the primary

649
00:27:07,440 --> 00:27:10,340
refresh token

650
00:27:11,659 --> 00:27:14,700
one thing that this doesn't show you is

651
00:27:14,700 --> 00:27:18,000
the session key so what's important to

652
00:27:18,000 --> 00:27:20,039
know is that the primary refresh token

653
00:27:20,039 --> 00:27:22,919
itself is not really a secret every time

654
00:27:22,919 --> 00:27:25,080
you use single sign-on the primary

655
00:27:25,080 --> 00:27:27,960
refresh token is sent to Azure ID you

656
00:27:27,960 --> 00:27:30,419
can read it for as a normal User it's

657
00:27:30,419 --> 00:27:32,760
not supposed to be secret but what is

658
00:27:32,760 --> 00:27:34,559
supposed to be secret is that is that

659
00:27:34,559 --> 00:27:36,720
session key and the session key is

660
00:27:36,720 --> 00:27:39,659
needed to actually convert the prime

661
00:27:39,659 --> 00:27:42,000
refresh token itself in what I call the

662
00:27:42,000 --> 00:27:44,279
primary fish token cookie which allows

663
00:27:44,279 --> 00:27:45,779
you to authenticate

664
00:27:45,779 --> 00:27:48,360
so let's have a look how these how

665
00:27:48,360 --> 00:27:49,980
authentication with the primary refresh

666
00:27:49,980 --> 00:27:52,500
token works

667
00:27:52,500 --> 00:27:55,980
on the left you see the as I call it PRT

668
00:27:55,980 --> 00:27:59,039
cookie which is a Json web token and on

669
00:27:59,039 --> 00:28:01,380
the right you see the decoded version

670
00:28:01,380 --> 00:28:03,799
if you're familiar with Json web tokens

671
00:28:03,799 --> 00:28:06,539
you already know that it's it basically

672
00:28:06,539 --> 00:28:08,760
consists of three parts there's a header

673
00:28:08,760 --> 00:28:10,860
there's the payload and the signature

674
00:28:10,860 --> 00:28:13,559
and on the left hand side you can see

675
00:28:13,559 --> 00:28:17,580
the header in red the body in pink and

676
00:28:17,580 --> 00:28:21,900
the signature in what kind of bluish

677
00:28:21,900 --> 00:28:25,860
and if we decode this we see that we see

678
00:28:25,860 --> 00:28:28,020
some fields in the header which is one

679
00:28:28,020 --> 00:28:30,299
of this is the CTX field

680
00:28:30,299 --> 00:28:33,299
which is what we call the context and

681
00:28:33,299 --> 00:28:35,520
this is actually sort of a client nonce

682
00:28:35,520 --> 00:28:37,860
to make sure that every time you

683
00:28:37,860 --> 00:28:40,500
authenticate using the primary refresh

684
00:28:40,500 --> 00:28:44,159
token it's it has a unique structure

685
00:28:44,159 --> 00:28:46,559
this is important for later

686
00:28:46,559 --> 00:28:50,520
and in this cookie we also see a refresh

687
00:28:50,520 --> 00:28:52,919
token field and this is actually the

688
00:28:52,919 --> 00:28:54,900
primary refresh token so like I said

689
00:28:54,900 --> 00:28:57,779
it's not a secret you put your token in

690
00:28:57,779 --> 00:29:01,919
the field and then you eventually have

691
00:29:01,919 --> 00:29:03,419
to prove that you also know the session

692
00:29:03,419 --> 00:29:06,120
key in order to authenticate with it

693
00:29:06,120 --> 00:29:08,520
we also see the nonce so there's a

694
00:29:08,520 --> 00:29:11,340
non-set sugar assets from Azure ID

695
00:29:11,340 --> 00:29:14,220
and on the bottom here you see the the

696
00:29:14,220 --> 00:29:17,340
signature of the Json web token

697
00:29:17,340 --> 00:29:21,659
so what it does is basically use the

698
00:29:21,659 --> 00:29:24,299
the session key to compute the signature

699
00:29:24,299 --> 00:29:26,760
over the whole payload of the Json web

700
00:29:26,760 --> 00:29:28,860
token

701
00:29:28,860 --> 00:29:31,919
I made a little flow diagram for that

702
00:29:31,919 --> 00:29:34,140
so this is starting from the scenario

703
00:29:34,140 --> 00:29:37,380
that it's that you don't have a tpn and

704
00:29:37,380 --> 00:29:39,720
everything is in software

705
00:29:39,720 --> 00:29:41,700
um in this case what it does it's it's

706
00:29:41,700 --> 00:29:43,679
generates some random bytes which is the

707
00:29:43,679 --> 00:29:46,799
context but you see back here in the on

708
00:29:46,799 --> 00:29:48,419
the on the top right

709
00:29:48,419 --> 00:29:51,360
and and basically using these random

710
00:29:51,360 --> 00:29:54,059
bytes plus the session key it uses a key

711
00:29:54,059 --> 00:29:57,600
derivation function to create a derived

712
00:29:57,600 --> 00:29:58,380
key

713
00:29:58,380 --> 00:30:00,840
So based on that context and the session

714
00:30:00,840 --> 00:30:03,240
key you get the derived key

715
00:30:03,240 --> 00:30:05,880
then you put the primary refresh token

716
00:30:05,880 --> 00:30:07,860
in it you put the notes from Azure ad in

717
00:30:07,860 --> 00:30:10,320
it and then you sign the whole thing

718
00:30:10,320 --> 00:30:13,320
using the derived key and then you get

719
00:30:13,320 --> 00:30:16,200
your PRT cookie which is a Json web

720
00:30:16,200 --> 00:30:19,919
token and that you can use to sign in

721
00:30:19,919 --> 00:30:22,860
and so if you have an implementation

722
00:30:22,860 --> 00:30:24,960
which uses software only

723
00:30:24,960 --> 00:30:27,179
um there you can basically steal the

724
00:30:27,179 --> 00:30:30,000
session key from LS and you can just

725
00:30:30,000 --> 00:30:31,980
take all this information to some other

726
00:30:31,980 --> 00:30:33,559
computer and

727
00:30:33,559 --> 00:30:37,559
basically have persistence over that

728
00:30:37,559 --> 00:30:39,600
um of course that's not what you want so

729
00:30:39,600 --> 00:30:41,279
you want this to be protected by

730
00:30:41,279 --> 00:30:42,899
Hardware

731
00:30:42,899 --> 00:30:45,299
and in this case we're looking at how

732
00:30:45,299 --> 00:30:48,059
the flow works with the TPM so this is

733
00:30:48,059 --> 00:30:50,460
the same flow but now it's also using

734
00:30:50,460 --> 00:30:53,640
DPM and in this case we still generate

735
00:30:53,640 --> 00:30:56,700
some random bytes and we want to use a

736
00:30:56,700 --> 00:30:58,799
key derivation function using the

737
00:30:58,799 --> 00:31:00,480
session key with that but we don't

738
00:31:00,480 --> 00:31:02,700
actually have the session key and with

739
00:31:02,700 --> 00:31:06,059
we I mean the LSS process so the LSS

740
00:31:06,059 --> 00:31:08,700
process has to ask the TPM the separate

741
00:31:08,700 --> 00:31:11,520
crypto processor to hey here's some

742
00:31:11,520 --> 00:31:14,039
random context and I know you have a key

743
00:31:14,039 --> 00:31:16,320
somewhere please give me a derived key

744
00:31:16,320 --> 00:31:17,399
from that

745
00:31:17,399 --> 00:31:19,380
and that's what the tpn does

746
00:31:19,380 --> 00:31:20,760
so

747
00:31:20,760 --> 00:31:23,520
I just generated random context and you

748
00:31:23,520 --> 00:31:25,200
give that to the TPM and it gives you

749
00:31:25,200 --> 00:31:26,880
back a derived key

750
00:31:26,880 --> 00:31:29,159
well with that derived key you can

751
00:31:29,159 --> 00:31:31,980
actually compute the signature for this

752
00:31:31,980 --> 00:31:34,080
primary for silicon cookie and then you

753
00:31:34,080 --> 00:31:36,539
can authenticate

754
00:31:36,539 --> 00:31:39,120
now if you're staring at this for a

755
00:31:39,120 --> 00:31:41,640
while you'll notice that hey there's

756
00:31:41,640 --> 00:31:43,980
some security flaw in here

757
00:31:43,980 --> 00:31:47,159
the flaw is that there's not really any

758
00:31:47,159 --> 00:31:49,320
information that you cannot calculate

759
00:31:49,320 --> 00:31:52,860
beforehand in order to get your derived

760
00:31:52,860 --> 00:31:55,559
key because this primary refresh token

761
00:31:55,559 --> 00:31:57,539
is something you have there's nons from

762
00:31:57,539 --> 00:31:59,700
Azure ID you can just query whenever you

763
00:31:59,700 --> 00:32:02,760
want to sign in but these random bytes

764
00:32:02,760 --> 00:32:05,039
you can just generate them wherever you

765
00:32:05,039 --> 00:32:08,220
want so if you give an attacker like

766
00:32:08,220 --> 00:32:10,080
five minutes in a room with this DPM

767
00:32:10,080 --> 00:32:12,659
it's just gonna say okay give me I have

768
00:32:12,659 --> 00:32:14,220
some random bytes give me a derived key

769
00:32:14,220 --> 00:32:16,620
and if you do that 1000 times you have

770
00:32:16,620 --> 00:32:20,100
1000 unique combinations of random bytes

771
00:32:20,100 --> 00:32:22,679
derived key that work with the session

772
00:32:22,679 --> 00:32:24,960
key so you don't even have to know the

773
00:32:24,960 --> 00:32:27,779
session key you can just pre-calculate a

774
00:32:27,779 --> 00:32:29,820
lot of values and then you can sign in

775
00:32:29,820 --> 00:32:34,039
forever with this primary refresh token

776
00:32:34,919 --> 00:32:37,020
um you can do it with mimikats so in

777
00:32:37,020 --> 00:32:40,020
this case it calls the correct crypto

778
00:32:40,020 --> 00:32:43,200
apis and you see that here it's

779
00:32:43,200 --> 00:32:45,480
generates a random context

780
00:32:45,480 --> 00:32:48,120
and it gives you a talk to the TPM and

781
00:32:48,120 --> 00:32:50,820
then gives you the correct derived key

782
00:32:50,820 --> 00:32:53,159
and with this combination of context and

783
00:32:53,159 --> 00:32:55,500
the right key we can basically sign our

784
00:32:55,500 --> 00:32:58,260
own authentication cookies

785
00:32:58,260 --> 00:33:00,779
so that's what I'm doing here with row

786
00:33:00,779 --> 00:33:03,600
tools and in this case I'm use I'm

787
00:33:03,600 --> 00:33:05,760
authenticating and I'm saying hey here

788
00:33:05,760 --> 00:33:09,240
is an existing cookie which is probably

789
00:33:09,240 --> 00:33:12,240
not valid anymore but I also have a

790
00:33:12,240 --> 00:33:14,580
combination of context and derived key

791
00:33:14,580 --> 00:33:17,659
and you can use that combination to just

792
00:33:17,659 --> 00:33:19,919
recalculate the signature on the Json

793
00:33:19,919 --> 00:33:21,779
web token and then you get a valid

794
00:33:21,779 --> 00:33:24,059
Authentication

795
00:33:24,059 --> 00:33:27,000
again so this you can use indefinitely

796
00:33:27,000 --> 00:33:28,919
and

797
00:33:28,919 --> 00:33:31,980
you can have a kind of persistence over

798
00:33:31,980 --> 00:33:34,080
this primary refresh token and with that

799
00:33:34,080 --> 00:33:37,039
over the user's account

800
00:33:37,799 --> 00:33:39,600
so the short version

801
00:33:39,600 --> 00:33:41,340
if you're an administrator on a device

802
00:33:41,340 --> 00:33:44,100
with a primary refresh token you can

803
00:33:44,100 --> 00:33:46,620
steal this primary refresh token and the

804
00:33:46,620 --> 00:33:48,899
session key if they are not stored in

805
00:33:48,899 --> 00:33:50,159
DPM

806
00:33:50,159 --> 00:33:52,679
if they are stored in a tpn you can

807
00:33:52,679 --> 00:33:56,519
still acquire many combinations of

808
00:33:56,519 --> 00:33:58,380
context and derived key that you can

809
00:33:58,380 --> 00:34:00,779
then later on use to create valid

810
00:34:00,779 --> 00:34:03,299
authentication cookies

811
00:34:03,299 --> 00:34:05,279
um this is a bit short version if you

812
00:34:05,279 --> 00:34:06,600
have a lot want to read the longer

813
00:34:06,600 --> 00:34:08,639
version including all the details

814
00:34:08,639 --> 00:34:11,040
um it's on my blog

815
00:34:11,040 --> 00:34:14,280
and basically as I blogged about this

816
00:34:14,280 --> 00:34:16,379
Microsoft was like um this is kind of an

817
00:34:16,379 --> 00:34:19,080
issue because of course the hardware

818
00:34:19,080 --> 00:34:21,599
protection of this key is now kind of

819
00:34:21,599 --> 00:34:23,940
redundant because you don't even need

820
00:34:23,940 --> 00:34:25,500
the session key

821
00:34:25,500 --> 00:34:29,399
so they changed this and in August 2021

822
00:34:29,399 --> 00:34:32,839
they released some Windows updates which

823
00:34:32,839 --> 00:34:35,820
introduced some patches

824
00:34:35,820 --> 00:34:37,800
um which also broke the mimikatz cloud

825
00:34:37,800 --> 00:34:40,560
AP functionality it's still not working

826
00:34:40,560 --> 00:34:44,159
today but the data is there in LS so if

827
00:34:44,159 --> 00:34:46,800
you if someone invests a lot of time in

828
00:34:46,800 --> 00:34:48,359
order to figure out exactly how that

829
00:34:48,359 --> 00:34:52,679
stored you can steal the PRT data again

830
00:34:52,679 --> 00:34:55,679
from LSS but of course not the session

831
00:34:55,679 --> 00:34:58,080
key which is in the TPM

832
00:34:58,080 --> 00:35:00,180
and I did some analysis of how this

833
00:35:00,180 --> 00:35:01,339
actually

834
00:35:01,339 --> 00:35:04,320
calculated post batch

835
00:35:04,320 --> 00:35:07,740
and if we look at the PRT cookie we see

836
00:35:07,740 --> 00:35:10,920
a new parameter in here which is the kdf

837
00:35:10,920 --> 00:35:13,680
version 2.

838
00:35:13,680 --> 00:35:15,440
um so it's probably

839
00:35:15,440 --> 00:35:17,880
hints is that there's a new way of

840
00:35:17,880 --> 00:35:21,240
calculating the correct key

841
00:35:21,240 --> 00:35:24,540
and that's correct so I did some reverse

842
00:35:24,540 --> 00:35:27,540
engineering of how exactly the new key

843
00:35:27,540 --> 00:35:30,000
is calculated

844
00:35:30,000 --> 00:35:32,579
um basically it calls at some point it

845
00:35:32,579 --> 00:35:34,740
calls this encrypt key derivation

846
00:35:34,740 --> 00:35:37,920
function which is used to derive a key

847
00:35:37,920 --> 00:35:40,320
from the context

848
00:35:40,320 --> 00:35:42,839
and that takes some some parameters in

849
00:35:42,839 --> 00:35:45,960
it you can use a tool like API monitor

850
00:35:45,960 --> 00:35:48,359
to see like hey what are these

851
00:35:48,359 --> 00:35:50,339
parameters that it's actually sending to

852
00:35:50,339 --> 00:35:52,440
the TPM

853
00:35:52,440 --> 00:35:55,020
so if you look at the memory at the time

854
00:35:55,020 --> 00:35:57,680
this function is called you can see some

855
00:35:57,680 --> 00:35:59,880
basically some of these some feed

856
00:35:59,880 --> 00:36:01,380
buffers in which the information is

857
00:36:01,380 --> 00:36:02,940
stored

858
00:36:02,940 --> 00:36:06,540
and there are three of them and the one

859
00:36:06,540 --> 00:36:07,560
in the middle is the one we're

860
00:36:07,560 --> 00:36:09,420
interested in

861
00:36:09,420 --> 00:36:11,520
so in this case you can see

862
00:36:11,520 --> 00:36:12,119
um

863
00:36:12,119 --> 00:36:15,660
that there's like a length of the data

864
00:36:15,660 --> 00:36:17,760
and the data type and then a pointer to

865
00:36:17,760 --> 00:36:19,619
the actual data

866
00:36:19,619 --> 00:36:22,980
long story shorts if we look at

867
00:36:22,980 --> 00:36:25,940
this buffer that contains the context

868
00:36:25,940 --> 00:36:29,579
and we see the length is 20 in HEX which

869
00:36:29,579 --> 00:36:33,359
is 32. and so it turns out that the

870
00:36:33,359 --> 00:36:36,060
context is now certainly 32 bytes where

871
00:36:36,060 --> 00:36:39,420
previously it was 24 bytes so somehow

872
00:36:39,420 --> 00:36:42,359
the context got longer while the context

873
00:36:42,359 --> 00:36:44,280
that we see in the Json web token is

874
00:36:44,280 --> 00:36:45,839
still the same

875
00:36:45,839 --> 00:36:49,980
and these here are these 32 bytes

876
00:36:49,980 --> 00:36:52,740
and so it is a lot more refers to

877
00:36:52,740 --> 00:36:55,200
engineering and eventually figured out

878
00:36:55,200 --> 00:36:59,579
that what they do is they actually don't

879
00:36:59,579 --> 00:37:01,980
use the context that they randomly

880
00:37:01,980 --> 00:37:04,800
generate but they take a shot 256 hash

881
00:37:04,800 --> 00:37:08,520
of the random context which is these 24

882
00:37:08,520 --> 00:37:11,460
bytes plus the body of the Json web

883
00:37:11,460 --> 00:37:12,660
token

884
00:37:12,660 --> 00:37:15,900
and to calculate a new context and that

885
00:37:15,900 --> 00:37:19,040
they give to TPM

886
00:37:19,320 --> 00:37:21,960
so previously they just use a random

887
00:37:21,960 --> 00:37:23,940
context and gave that to the TPM to

888
00:37:23,940 --> 00:37:25,619
calculate a derived key

889
00:37:25,619 --> 00:37:29,339
now they actually use a sha-256 hash of

890
00:37:29,339 --> 00:37:31,560
the random context plus all the content

891
00:37:31,560 --> 00:37:34,619
of the Json web token body

892
00:37:34,619 --> 00:37:37,619
and when I finally figured this out I

893
00:37:37,619 --> 00:37:40,020
was very happy and then I found out that

894
00:37:40,020 --> 00:37:41,460
I also could simply have read the

895
00:37:41,460 --> 00:37:43,680
documentation because they actually

896
00:37:43,680 --> 00:37:46,619
documented this change so it just says

897
00:37:46,619 --> 00:37:48,900
in the documentation if you have kdf

898
00:37:48,900 --> 00:37:52,619
version 2 you should use sha256 of the

899
00:37:52,619 --> 00:37:54,720
context plus the assertion payload which

900
00:37:54,720 --> 00:37:57,359
is the body of the Json web token oh I

901
00:37:57,359 --> 00:38:00,440
could have saved myself some time

902
00:38:00,900 --> 00:38:03,839
um but I once again created a scheme to

903
00:38:03,839 --> 00:38:07,560
kind of show how this is how this now

904
00:38:07,560 --> 00:38:08,579
works

905
00:38:08,579 --> 00:38:10,619
so once again you get this nonce from

906
00:38:10,619 --> 00:38:12,599
Azure ID and you have the primary

907
00:38:12,599 --> 00:38:13,920
refresh token

908
00:38:13,920 --> 00:38:16,619
and this this generates the body of the

909
00:38:16,619 --> 00:38:18,540
Json web token

910
00:38:18,540 --> 00:38:21,720
you also have the random bytes that we

911
00:38:21,720 --> 00:38:24,660
have and if you take the shadow 36 hash

912
00:38:24,660 --> 00:38:27,180
of this you get like the key derivation

913
00:38:27,180 --> 00:38:30,720
function context that you send to DPM

914
00:38:30,720 --> 00:38:33,960
and then you get your derived key

915
00:38:33,960 --> 00:38:36,060
and with the derived key you can

916
00:38:36,060 --> 00:38:38,579
properly sign the the final

917
00:38:38,579 --> 00:38:41,760
authentication cookie and well as you

918
00:38:41,760 --> 00:38:44,099
can see this whole thing on the left is

919
00:38:44,099 --> 00:38:46,380
now required for the information to go

920
00:38:46,380 --> 00:38:49,320
through the tpn and get your derived key

921
00:38:49,320 --> 00:38:53,520
so you cannot calculate these these

922
00:38:53,520 --> 00:38:55,740
things in advance anymore as the nodes

923
00:38:55,740 --> 00:38:57,660
that you get from Azure ID is only valid

924
00:38:57,660 --> 00:39:00,060
for like five or ten minutes

925
00:39:00,060 --> 00:39:03,000
so you will always need live access to

926
00:39:03,000 --> 00:39:05,400
the system in order to get these nodes

927
00:39:05,400 --> 00:39:08,520
get the PRT and then talk to the TPM to

928
00:39:08,520 --> 00:39:10,440
get the correct derived key

929
00:39:10,440 --> 00:39:13,680
so this will fix pretty nicely and now

930
00:39:13,680 --> 00:39:16,079
you can no longer just pre-calculate

931
00:39:16,079 --> 00:39:18,720
whatever you want

932
00:39:18,720 --> 00:39:22,020
and it was fixed as well some cve in

933
00:39:22,020 --> 00:39:25,140
2020 and basically the new method

934
00:39:25,140 --> 00:39:27,839
prevents you from pre-generating all

935
00:39:27,839 --> 00:39:29,880
these combinations that you need

936
00:39:29,880 --> 00:39:33,000
and they also smartly prevented you from

937
00:39:33,000 --> 00:39:35,820
downgrading from the kdf version 2 to

938
00:39:35,820 --> 00:39:38,460
kdf version 1. so first thing I tried of

939
00:39:38,460 --> 00:39:42,960
course they also specify somewhere

940
00:39:42,960 --> 00:39:45,180
inside the primary refresh token I

941
00:39:45,180 --> 00:39:47,520
assume because it's encrypted and which

942
00:39:47,520 --> 00:39:50,820
method you used to First request the PRT

943
00:39:50,820 --> 00:39:54,420
so when you send that request to Azure

944
00:39:54,420 --> 00:39:57,300
ID to get a PRT you can also indicate

945
00:39:57,300 --> 00:39:59,400
hey I support kdf version 2 and then

946
00:39:59,400 --> 00:40:02,400
they issue you a token which has that

947
00:40:02,400 --> 00:40:05,220
kdf version 2 property probably stored

948
00:40:05,220 --> 00:40:07,079
somewhere in it and you can no longer

949
00:40:07,079 --> 00:40:10,619
use the version one to authenticate with

950
00:40:10,619 --> 00:40:12,420
a primary refresh token that was

951
00:40:12,420 --> 00:40:14,400
requested from A system that supports

952
00:40:14,400 --> 00:40:17,220
the new weak way of working

953
00:40:17,220 --> 00:40:20,339
so this was fixed that's great

954
00:40:20,339 --> 00:40:22,079
um there were some other things that I

955
00:40:22,079 --> 00:40:24,180
looked at

956
00:40:24,180 --> 00:40:26,579
and for that we go back to the device

957
00:40:26,579 --> 00:40:28,980
join scenarios because this whole

958
00:40:28,980 --> 00:40:32,220
primary refresh token downside ceiling

959
00:40:32,220 --> 00:40:34,920
has some downsides of course she needed

960
00:40:34,920 --> 00:40:37,560
to be admin you need to dump else that's

961
00:40:37,560 --> 00:40:40,260
quite noisy especially with edrs and of

962
00:40:40,260 --> 00:40:41,760
course they fix this whole thing so it

963
00:40:41,760 --> 00:40:43,200
doesn't work anymore

964
00:40:43,200 --> 00:40:46,980
and last of all if the if the blue team

965
00:40:46,980 --> 00:40:49,500
notices that your device was breached

966
00:40:49,500 --> 00:40:51,960
they will probably disable it and that

967
00:40:51,960 --> 00:40:53,820
means that your primary refresh token

968
00:40:53,820 --> 00:40:56,160
will also no longer work if you stole it

969
00:40:56,160 --> 00:40:58,500
from the device

970
00:40:58,500 --> 00:41:01,320
so I thought okay what if we combine two

971
00:41:01,320 --> 00:41:03,960
pieces of knowledge so first of all we

972
00:41:03,960 --> 00:41:05,940
know how to get our own primary refresh

973
00:41:05,940 --> 00:41:09,000
token by registering a device

974
00:41:09,000 --> 00:41:11,460
and we also know that we can get access

975
00:41:11,460 --> 00:41:13,859
tokens if we have code execution on the

976
00:41:13,859 --> 00:41:16,140
Machine by using single sign-on

977
00:41:16,140 --> 00:41:18,900
so what if I register the new device

978
00:41:18,900 --> 00:41:21,780
using a single sign-on token then I

979
00:41:21,780 --> 00:41:25,140
don't need to know any secrets I can

980
00:41:25,140 --> 00:41:27,359
just do this

981
00:41:27,359 --> 00:41:32,640
so I initialized the single sign-on flow

982
00:41:32,640 --> 00:41:34,020
um first I regret the known so my

983
00:41:34,020 --> 00:41:36,960
attacker hosts and then I run row token

984
00:41:36,960 --> 00:41:39,720
so I get a single sign-on cookie

985
00:41:39,720 --> 00:41:43,200
and then I actually authenticate to to

986
00:41:43,200 --> 00:41:45,960
Azure ad in order to register the files

987
00:41:45,960 --> 00:41:49,140
so what you see here is the I use the

988
00:41:49,140 --> 00:41:52,320
well it's some random Goods but

989
00:41:52,320 --> 00:41:54,359
basically this means I'm authenticating

990
00:41:54,359 --> 00:41:56,579
to the device registration service and

991
00:41:56,579 --> 00:41:58,320
that gives me a token that allows me to

992
00:41:58,320 --> 00:42:01,200
register a new device and in this case I

993
00:42:01,200 --> 00:42:04,020
just got this token by using single

994
00:42:04,020 --> 00:42:06,180
sign-on

995
00:42:06,180 --> 00:42:09,119
so with this authentication data I can

996
00:42:09,119 --> 00:42:11,700
register a new device I wrote some code

997
00:42:11,700 --> 00:42:14,640
in in Python to do this you can also do

998
00:42:14,640 --> 00:42:17,640
this with aad internals and I slightly

999
00:42:17,640 --> 00:42:19,260
adapted the code from it and AED

1000
00:42:19,260 --> 00:42:20,820
internals was written by Nestor which is

1001
00:42:20,820 --> 00:42:23,579
also sitting here so thanks for for ad

1002
00:42:23,579 --> 00:42:26,520
internals it's a great toolkit

1003
00:42:26,520 --> 00:42:28,859
um so you can use that or this python

1004
00:42:28,859 --> 00:42:31,260
code to register a new device and that

1005
00:42:31,260 --> 00:42:34,920
basically issues a certificate for your

1006
00:42:34,920 --> 00:42:36,720
device because you just registered it

1007
00:42:36,720 --> 00:42:38,940
with Azure ID

1008
00:42:38,940 --> 00:42:40,619
and once you have that device

1009
00:42:40,619 --> 00:42:43,320
certificate you can also get a primary

1010
00:42:43,320 --> 00:42:45,180
refresh token if you know the

1011
00:42:45,180 --> 00:42:47,760
credentials of the of the user

1012
00:42:47,760 --> 00:42:51,540
so we only need the the credentials of

1013
00:42:51,540 --> 00:42:54,660
the user to register the device the

1014
00:42:54,660 --> 00:42:56,640
device now we don't need any branches to

1015
00:42:56,640 --> 00:42:57,960
register a device because we're using

1016
00:42:57,960 --> 00:42:59,760
single sign-on and if you have

1017
00:42:59,760 --> 00:43:02,339
credentials of the user you can also get

1018
00:43:02,339 --> 00:43:05,880
a primary refresh token and the session

1019
00:43:05,880 --> 00:43:08,099
key and in this case the session key is

1020
00:43:08,099 --> 00:43:10,079
not actually encrypted with Hardware of

1021
00:43:10,079 --> 00:43:12,240
course because we're just using our own

1022
00:43:12,240 --> 00:43:14,880
python script

1023
00:43:14,880 --> 00:43:17,880
and and if we use this primary fish

1024
00:43:17,880 --> 00:43:22,380
token and session key to sign in then we

1025
00:43:22,380 --> 00:43:24,720
get an access token for whatever we want

1026
00:43:24,720 --> 00:43:25,980
to access

1027
00:43:25,980 --> 00:43:28,079
and there are some interesting things in

1028
00:43:28,079 --> 00:43:31,260
that so if you decode this access token

1029
00:43:31,260 --> 00:43:33,900
you will see some authentication claims

1030
00:43:33,900 --> 00:43:37,160
and in this case you see the

1031
00:43:37,160 --> 00:43:39,720
PWD claim because we use the password to

1032
00:43:39,720 --> 00:43:42,540
authenticate the RSA claim because we

1033
00:43:42,540 --> 00:43:46,140
did it using a primary first token with

1034
00:43:46,140 --> 00:43:50,760
also the MFA claim and if you look if

1035
00:43:50,760 --> 00:43:52,920
you recall from previous steps I didn't

1036
00:43:52,920 --> 00:43:55,140
actually need MFA for the user at any

1037
00:43:55,140 --> 00:43:56,280
point

1038
00:43:56,280 --> 00:43:59,280
now it turns out that if you use a

1039
00:43:59,280 --> 00:44:03,240
single sign on token which which was

1040
00:44:03,240 --> 00:44:06,000
used with MFA so the primary refresh

1041
00:44:06,000 --> 00:44:08,280
token will include the MFA claim because

1042
00:44:08,280 --> 00:44:10,740
the user did MFA in the past and if you

1043
00:44:10,740 --> 00:44:13,500
use that to register a new device and

1044
00:44:13,500 --> 00:44:15,420
then get a primary refresh token for the

1045
00:44:15,420 --> 00:44:18,000
same user and the MFA claim is actually

1046
00:44:18,000 --> 00:44:20,760
included so even though we never did any

1047
00:44:20,760 --> 00:44:23,520
MFA for the user we still get that claim

1048
00:44:23,520 --> 00:44:26,339
in the primary refresh token that we

1049
00:44:26,339 --> 00:44:29,460
kind of stole from the device

1050
00:44:29,460 --> 00:44:33,180
so to summarize that we can request a

1051
00:44:33,180 --> 00:44:36,180
single sign-on token which contains an

1052
00:44:36,180 --> 00:44:39,300
MFA claim and if we then use that to

1053
00:44:39,300 --> 00:44:42,060
register a new device the issued brt

1054
00:44:42,060 --> 00:44:44,700
will also have that MFA claim

1055
00:44:44,700 --> 00:44:46,619
and in this case we only required

1056
00:44:46,619 --> 00:44:49,859
passwords if you're using adfs you could

1057
00:44:49,859 --> 00:44:52,680
also use a single sign-on with ntlam or

1058
00:44:52,680 --> 00:44:54,599
Kerberos to get a PRT and you wouldn't

1059
00:44:54,599 --> 00:44:56,460
need to use this password at all so in

1060
00:44:56,460 --> 00:44:58,619
this case we had a free MFA upgrade and

1061
00:44:58,619 --> 00:45:01,140
we now have persistent access to the

1062
00:45:01,140 --> 00:45:04,980
account using a primary refresh token

1063
00:45:04,980 --> 00:45:07,319
there's some upsides and downsides to

1064
00:45:07,319 --> 00:45:08,099
this

1065
00:45:08,099 --> 00:45:11,119
so we registered a new device

1066
00:45:11,119 --> 00:45:14,099
which is great because it's a separate

1067
00:45:14,099 --> 00:45:17,040
device from the old device and if the

1068
00:45:17,040 --> 00:45:19,200
breach is noticed they could disable the

1069
00:45:19,200 --> 00:45:21,839
old device but our new device that we

1070
00:45:21,839 --> 00:45:23,760
registers using the old device is still

1071
00:45:23,760 --> 00:45:25,040
working

1072
00:45:25,040 --> 00:45:27,780
downside is that you will need

1073
00:45:27,780 --> 00:45:29,819
permissions to register devices in Azure

1074
00:45:29,819 --> 00:45:32,000
ID which is not always allowed

1075
00:45:32,000 --> 00:45:36,359
and of course well of course you also

1076
00:45:36,359 --> 00:45:38,460
have some restrictions sometimes like

1077
00:45:38,460 --> 00:45:39,839
what I mentioned with bring your own

1078
00:45:39,839 --> 00:45:42,240
devices and so we couldn't probably

1079
00:45:42,240 --> 00:45:44,640
couldn't enroll this device in InTune if

1080
00:45:44,640 --> 00:45:46,800
they restrict which devices you can

1081
00:45:46,800 --> 00:45:49,099
enroll

1082
00:45:49,380 --> 00:45:50,940
um so I wanted to fix this last one

1083
00:45:50,940 --> 00:45:54,119
because it's kind of annoying

1084
00:45:54,119 --> 00:45:57,480
um so our worlds were bypassing these

1085
00:45:57,480 --> 00:46:00,319
InTune restrictions

1086
00:46:00,720 --> 00:46:01,800
um if you look at the device

1087
00:46:01,800 --> 00:46:03,599
registration flow and the InTune

1088
00:46:03,599 --> 00:46:05,700
registration flow a Windows presents

1089
00:46:05,700 --> 00:46:07,920
that as like one flow because you can

1090
00:46:07,920 --> 00:46:10,040
just click join and everything is Magic

1091
00:46:10,040 --> 00:46:13,380
but it's actually two separate steps so

1092
00:46:13,380 --> 00:46:14,880
the device registration process

1093
00:46:14,880 --> 00:46:17,339
registered device in Azure ID and then

1094
00:46:17,339 --> 00:46:19,200
it's a separate process to register

1095
00:46:19,200 --> 00:46:20,940
device in InTune

1096
00:46:20,940 --> 00:46:22,980
now if you're restricting which devices

1097
00:46:22,980 --> 00:46:26,220
can be registered in InTune the Second

1098
00:46:26,220 --> 00:46:28,380
Step will fill because you're not

1099
00:46:28,380 --> 00:46:31,319
allowed to register a non-corp device in

1100
00:46:31,319 --> 00:46:32,520
InTune

1101
00:46:32,520 --> 00:46:35,339
and windows will then automatically also

1102
00:46:35,339 --> 00:46:37,140
refer to first step so it will delete

1103
00:46:37,140 --> 00:46:39,660
the device back from Azure ID and it'll

1104
00:46:39,660 --> 00:46:41,940
give you some error of course if you do

1105
00:46:41,940 --> 00:46:43,920
this manually you can still do the first

1106
00:46:43,920 --> 00:46:45,800
step so you can register a device

1107
00:46:45,800 --> 00:46:48,000
regardless of whether you're allowed to

1108
00:46:48,000 --> 00:46:50,880
enroll into InTune or not but this won't

1109
00:46:50,880 --> 00:46:53,000
necessarily give you a lot of things

1110
00:46:53,000 --> 00:46:55,859
because then if you register your own

1111
00:46:55,859 --> 00:46:57,660
device and don't register them in tune

1112
00:46:57,660 --> 00:47:00,540
you will not get the compliant device

1113
00:47:00,540 --> 00:47:01,859
claim

1114
00:47:01,859 --> 00:47:03,900
and which is what we wanted to bypass

1115
00:47:03,900 --> 00:47:07,099
with the conditional access

1116
00:47:07,560 --> 00:47:10,560
so I looked at this process and I

1117
00:47:10,560 --> 00:47:12,660
noticed that if I had a device which was

1118
00:47:12,660 --> 00:47:15,599
registered into using autopilot even if

1119
00:47:15,599 --> 00:47:17,640
I wiped and reinstalled it

1120
00:47:17,640 --> 00:47:20,579
did the same device object would be used

1121
00:47:20,579 --> 00:47:23,460
to register my device in Azure ID I was

1122
00:47:23,460 --> 00:47:24,900
wondering so how does Azure ad actually

1123
00:47:24,900 --> 00:47:26,579
know this is the same physical device

1124
00:47:26,579 --> 00:47:29,400
does it have some magical link to know

1125
00:47:29,400 --> 00:47:31,380
that this device is the same from the

1126
00:47:31,380 --> 00:47:34,079
device I installed previously

1127
00:47:34,079 --> 00:47:36,119
so I started looking into this

1128
00:47:36,119 --> 00:47:38,520
and for that we go back to the

1129
00:47:38,520 --> 00:47:40,760
registration request

1130
00:47:40,760 --> 00:47:43,440
which we talked about earlier so we have

1131
00:47:43,440 --> 00:47:45,540
all these these properties and these

1132
00:47:45,540 --> 00:47:47,940
certificates and keys

1133
00:47:47,940 --> 00:47:49,800
um and what's interesting here is this

1134
00:47:49,800 --> 00:47:52,319
device tickets and what the device

1135
00:47:52,319 --> 00:47:55,500
tickets it's a kind of a ticket for your

1136
00:47:55,500 --> 00:47:59,760
device and what I noticed is if I did

1137
00:47:59,760 --> 00:48:02,400
subsequent registration requests using

1138
00:48:02,400 --> 00:48:05,280
the same blob of binary data as device

1139
00:48:05,280 --> 00:48:07,560
tickets it would keep overwriting the

1140
00:48:07,560 --> 00:48:10,500
same device in Azure ID so somehow this

1141
00:48:10,500 --> 00:48:14,579
device ticket is used to identify a

1142
00:48:14,579 --> 00:48:18,560
unique combination of hardware

1143
00:48:19,319 --> 00:48:22,079
so if I reuse this it would it would

1144
00:48:22,079 --> 00:48:23,180
keep working

1145
00:48:23,180 --> 00:48:26,099
it did seem to expire after a certain

1146
00:48:26,099 --> 00:48:28,140
period of time so I couldn't use it like

1147
00:48:28,140 --> 00:48:30,119
two weeks after but within a few hours

1148
00:48:30,119 --> 00:48:32,339
it would keep working and so what is

1149
00:48:32,339 --> 00:48:33,859
this exactly

1150
00:48:33,859 --> 00:48:38,160
so I looked at the registration flow and

1151
00:48:38,160 --> 00:48:40,800
um which is quite annoying because this

1152
00:48:40,800 --> 00:48:43,280
is kind of this is a web-based interface

1153
00:48:43,280 --> 00:48:45,900
and if you do things from a web-based

1154
00:48:45,900 --> 00:48:48,420
interface it uses twin RT apis and they

1155
00:48:48,420 --> 00:48:51,420
are based on com so basically if I click

1156
00:48:51,420 --> 00:48:53,339
on a button it will randomly spawn some

1157
00:48:53,339 --> 00:48:55,200
process somewhere else and then it will

1158
00:48:55,200 --> 00:48:57,480
do things in there which is annoying to

1159
00:48:57,480 --> 00:48:59,460
debug because if I look at one process

1160
00:48:59,460 --> 00:49:01,319
and it just spawns something somewhere

1161
00:49:01,319 --> 00:49:03,119
else then I have to switch to that

1162
00:49:03,119 --> 00:49:04,740
process

1163
00:49:04,740 --> 00:49:07,260
um but I eventually got it working and

1164
00:49:07,260 --> 00:49:10,380
what it does is it spawns it uses dll

1165
00:49:10,380 --> 00:49:15,300
hosts to to launch a dsrack.dll and that

1166
00:49:15,300 --> 00:49:19,500
contains the actual registration logic

1167
00:49:19,500 --> 00:49:21,839
so basically this dsrack.dll is

1168
00:49:21,839 --> 00:49:23,460
responsible for doing all this

1169
00:49:23,460 --> 00:49:25,380
registration stuff and also for getting

1170
00:49:25,380 --> 00:49:28,200
the the device ticket

1171
00:49:28,200 --> 00:49:30,180
so I reverse this a little bit

1172
00:49:30,180 --> 00:49:32,339
and I don't know if it's readable for

1173
00:49:32,339 --> 00:49:34,980
you but basically it's it constructs

1174
00:49:34,980 --> 00:49:38,880
some some classes here and if we just

1175
00:49:38,880 --> 00:49:41,520
Google for this all long glass

1176
00:49:41,520 --> 00:49:42,720
combination

1177
00:49:42,720 --> 00:49:45,780
we find some Microsoft documentation for

1178
00:49:45,780 --> 00:49:48,599
the online ID surface tickets request

1179
00:49:48,599 --> 00:49:51,480
class so this is apparently just some

1180
00:49:51,480 --> 00:49:53,579
windows apis that you can use to request

1181
00:49:53,579 --> 00:49:58,020
tickets and it allows an app to specify

1182
00:49:58,020 --> 00:50:00,920
the firefit policy blah blah blah

1183
00:50:00,920 --> 00:50:03,180
basically you can use this to get

1184
00:50:03,180 --> 00:50:05,339
tickets for the user or for the device

1185
00:50:05,339 --> 00:50:07,380
as it seems

1186
00:50:07,380 --> 00:50:10,619
so in conclusion it appears that your

1187
00:50:10,619 --> 00:50:13,859
device has its own Microsoft account

1188
00:50:13,859 --> 00:50:17,099
um separate from any Azure ID join

1189
00:50:17,099 --> 00:50:19,500
function your device has its own account

1190
00:50:19,500 --> 00:50:21,780
and when it needs to authenticate to

1191
00:50:21,780 --> 00:50:24,660
Microsoft for data or whatever it uses

1192
00:50:24,660 --> 00:50:27,060
this account identity

1193
00:50:27,060 --> 00:50:29,339
and these device tickets are actually

1194
00:50:29,339 --> 00:50:31,920
cached in the registry in the current

1195
00:50:31,920 --> 00:50:35,000
user registry Hive I don't know why but

1196
00:50:35,000 --> 00:50:37,859
basically they're in there and they're

1197
00:50:37,859 --> 00:50:40,619
encrypted with DP API but they are

1198
00:50:40,619 --> 00:50:42,960
encrypted with the machine context so

1199
00:50:42,960 --> 00:50:45,000
even

1200
00:50:45,000 --> 00:50:47,579
if you have the the tickets of another

1201
00:50:47,579 --> 00:50:50,220
user you can still decrypt them because

1202
00:50:50,220 --> 00:50:53,040
they're tied to the machine

1203
00:50:53,040 --> 00:50:55,160
so I wrote some simple Powershell codes

1204
00:50:55,160 --> 00:50:58,260
which Imports DP API and basically

1205
00:50:58,260 --> 00:50:59,819
decrypts those tickets

1206
00:50:59,819 --> 00:51:01,619
and then you can just decrypt all the

1207
00:51:01,619 --> 00:51:03,900
cached tickets that are on the host

1208
00:51:03,900 --> 00:51:07,640
and here at the bottom we see one of the

1209
00:51:07,640 --> 00:51:10,800
one of the tickets which is for the

1210
00:51:10,800 --> 00:51:11,900
Enterprise

1211
00:51:11,900 --> 00:51:13,619
registration.windows.net which is the

1212
00:51:13,619 --> 00:51:15,059
domain that we use for device

1213
00:51:15,059 --> 00:51:16,500
registration

1214
00:51:16,500 --> 00:51:19,260
and here you see like the device tickets

1215
00:51:19,260 --> 00:51:22,680
which starts with t equals and then some

1216
00:51:22,680 --> 00:51:24,480
encrypted data

1217
00:51:24,480 --> 00:51:27,780
and if you base64 encode this piece of

1218
00:51:27,780 --> 00:51:32,280
string and then you get your MSD MSA

1219
00:51:32,280 --> 00:51:34,440
ddid thing that you can use during

1220
00:51:34,440 --> 00:51:36,180
device registration

1221
00:51:36,180 --> 00:51:39,599
so somehow the the tickets that's used

1222
00:51:39,599 --> 00:51:41,400
for device registration that allows you

1223
00:51:41,400 --> 00:51:44,040
to override the device is stored locally

1224
00:51:44,040 --> 00:51:47,160
in the registry and can be queried by

1225
00:51:47,160 --> 00:51:50,420
your current user

1226
00:51:50,819 --> 00:51:54,839
so that's interesting so you could steal

1227
00:51:54,839 --> 00:51:58,160
those tickets and override the device

1228
00:51:58,160 --> 00:52:01,140
but these tickets are usually old and

1229
00:52:01,140 --> 00:52:02,700
they may not always be there

1230
00:52:02,700 --> 00:52:04,859
so I did some further reversing and just

1231
00:52:04,859 --> 00:52:07,980
constructed exactly which which API

1232
00:52:07,980 --> 00:52:09,900
calls were needed

1233
00:52:09,900 --> 00:52:12,780
and eventually just found the guide and

1234
00:52:12,780 --> 00:52:15,420
the registration endpoints and then if

1235
00:52:15,420 --> 00:52:17,339
you read the documentation you can write

1236
00:52:17,339 --> 00:52:19,500
some very simple.net application which

1237
00:52:19,500 --> 00:52:23,540
actually requests a ticket

1238
00:52:23,760 --> 00:52:25,020
um and I was very surprised that it

1239
00:52:25,020 --> 00:52:26,400
actually worked

1240
00:52:26,400 --> 00:52:29,640
um but if you run this code you just get

1241
00:52:29,640 --> 00:52:33,240
a new ticket and that ticket identifies

1242
00:52:33,240 --> 00:52:34,920
your device

1243
00:52:34,920 --> 00:52:36,300
if you

1244
00:52:36,300 --> 00:52:39,240
do this from any low privilege user you

1245
00:52:39,240 --> 00:52:41,400
get the device ticket which once again

1246
00:52:41,400 --> 00:52:43,740
allows you to override the device

1247
00:52:43,740 --> 00:52:46,559
so in this case I'm using the register

1248
00:52:46,559 --> 00:52:48,660
device function again to register a new

1249
00:52:48,660 --> 00:52:52,020
device but this time I'm using the

1250
00:52:52,020 --> 00:52:53,940
device ticket that I just queried on the

1251
00:52:53,940 --> 00:52:56,640
host to say hey what instead of

1252
00:52:56,640 --> 00:52:58,140
registering new device you simply

1253
00:52:58,140 --> 00:52:59,940
overwrite this old device

1254
00:52:59,940 --> 00:53:02,760
and then well it works

1255
00:53:02,760 --> 00:53:05,880
so you see that we get a stiff cut with

1256
00:53:05,880 --> 00:53:08,339
a common name which is a good but it

1257
00:53:08,339 --> 00:53:11,099
matches the guide of the device that we

1258
00:53:11,099 --> 00:53:13,920
were running the code on earlier so we

1259
00:53:13,920 --> 00:53:16,200
actually overwrote the actual device in

1260
00:53:16,200 --> 00:53:19,140
Azure ad using only single sign-on data

1261
00:53:19,140 --> 00:53:20,760
and using a ticket that the low

1262
00:53:20,760 --> 00:53:23,760
preference user account could query

1263
00:53:23,760 --> 00:53:27,000
and the nice part is the device retains

1264
00:53:27,000 --> 00:53:29,579
its original properties in Azure ID

1265
00:53:29,579 --> 00:53:32,700
so it still thinks that this device that

1266
00:53:32,700 --> 00:53:34,920
we just overwrote and we stole all the

1267
00:53:34,920 --> 00:53:36,240
credentials from is still very much

1268
00:53:36,240 --> 00:53:39,900
compliant and it's managed by InTune

1269
00:53:39,900 --> 00:53:42,720
and if we try to sign in using our

1270
00:53:42,720 --> 00:53:44,880
stolen tokens it will also say hey this

1271
00:53:44,880 --> 00:53:46,559
device is compliant and it's Azure ID

1272
00:53:46,559 --> 00:53:48,980
joint

1273
00:53:49,319 --> 00:53:51,260
so long story short

1274
00:53:51,260 --> 00:53:54,300
if you have code execution you can

1275
00:53:54,300 --> 00:53:56,400
request a device ticket and then you can

1276
00:53:56,400 --> 00:53:59,220
register a new device and just override

1277
00:53:59,220 --> 00:54:00,720
the old device

1278
00:54:00,720 --> 00:54:03,599
of course when you register a new device

1279
00:54:03,599 --> 00:54:06,240
you create the key bash yourself so

1280
00:54:06,240 --> 00:54:08,819
they're no longer protected by TPM but

1281
00:54:08,819 --> 00:54:11,700
you just have the device identity using

1282
00:54:11,700 --> 00:54:13,380
the new secrets that you possess

1283
00:54:13,380 --> 00:54:14,819
yourself

1284
00:54:14,819 --> 00:54:16,500
um you don't need to steal the PRT from

1285
00:54:16,500 --> 00:54:19,020
the TPM anymore and you don't need any

1286
00:54:19,020 --> 00:54:20,880
administrative privileges at all because

1287
00:54:20,880 --> 00:54:22,619
everything can be queried from a low

1288
00:54:22,619 --> 00:54:25,400
privileged user

1289
00:54:25,980 --> 00:54:28,740
and additionally

1290
00:54:28,740 --> 00:54:31,319
and any user in the tenant can override

1291
00:54:31,319 --> 00:54:34,380
the device so you don't need to do this

1292
00:54:34,380 --> 00:54:37,740
using the usual legitimately tied to the

1293
00:54:37,740 --> 00:54:41,160
device you can just request the device

1294
00:54:41,160 --> 00:54:44,280
ticket using one user and then override

1295
00:54:44,280 --> 00:54:46,980
the device using another user

1296
00:54:46,980 --> 00:54:50,280
this device tickets stays valid even

1297
00:54:50,280 --> 00:54:52,740
after you wipe the device so

1298
00:54:52,740 --> 00:54:55,140
um if in the morning I request a ticket

1299
00:54:55,140 --> 00:54:57,059
in the afternoon they find out this

1300
00:54:57,059 --> 00:54:58,680
device was compromised the wipe it

1301
00:54:58,680 --> 00:55:00,720
reinstalled it and gave it to a new user

1302
00:55:00,720 --> 00:55:02,640
in the evening I could just use the same

1303
00:55:02,640 --> 00:55:04,500
ticket again and override the device

1304
00:55:04,500 --> 00:55:06,920
again

1305
00:55:07,380 --> 00:55:10,800
and what's also fun is that the identity

1306
00:55:10,800 --> 00:55:13,319
that creates the new device becomes the

1307
00:55:13,319 --> 00:55:16,200
owner of the old device this also means

1308
00:55:16,200 --> 00:55:18,900
that this can you view any BitLocker

1309
00:55:18,900 --> 00:55:21,059
keys that were stored in Azure ID so if

1310
00:55:21,059 --> 00:55:23,040
I have physical possession of the device

1311
00:55:23,040 --> 00:55:25,760
I could also decrypt it or do whatever

1312
00:55:25,760 --> 00:55:27,960
it basically is also a previous

1313
00:55:27,960 --> 00:55:30,300
escalation to administrator because

1314
00:55:30,300 --> 00:55:32,099
we're doing this from a low privilege

1315
00:55:32,099 --> 00:55:34,500
user and we can access the BitLocker

1316
00:55:34,500 --> 00:55:36,780
Keys which are normally not readable by

1317
00:55:36,780 --> 00:55:39,660
low privileged users

1318
00:55:39,660 --> 00:55:43,319
and the best part maybe is that because

1319
00:55:43,319 --> 00:55:45,059
we don't actually register the device

1320
00:55:45,059 --> 00:55:47,400
and InTune the old device will keep

1321
00:55:47,400 --> 00:55:49,319
reporting to InTune that yes it's

1322
00:55:49,319 --> 00:55:52,920
compliant with everything you ask and it

1323
00:55:52,920 --> 00:55:54,240
will keep in tune will actually keep

1324
00:55:54,240 --> 00:55:56,280
updating the compliancy status of the

1325
00:55:56,280 --> 00:55:59,540
device that we now own

1326
00:56:03,359 --> 00:56:04,500
so

1327
00:56:04,500 --> 00:56:06,599
just to sum up a bit because I think I'm

1328
00:56:06,599 --> 00:56:08,280
running out of time

1329
00:56:08,280 --> 00:56:11,460
um if we combine all of this then if you

1330
00:56:11,460 --> 00:56:13,380
have like code execution for a few

1331
00:56:13,380 --> 00:56:15,599
minutes on the system of the victim we

1332
00:56:15,599 --> 00:56:17,400
could use single sign-on to register a

1333
00:56:17,400 --> 00:56:18,319
new device

1334
00:56:18,319 --> 00:56:21,720
we could also use the device tickets to

1335
00:56:21,720 --> 00:56:23,880
override the current device which gives

1336
00:56:23,880 --> 00:56:26,599
us access to the primary refresh token

1337
00:56:26,599 --> 00:56:30,720
which gives us access to the the keys

1338
00:56:30,720 --> 00:56:32,160
that are required to use the primary

1339
00:56:32,160 --> 00:56:35,760
refresh token we also get the MFA claim

1340
00:56:35,760 --> 00:56:37,500
attached to our primary refresh token

1341
00:56:37,500 --> 00:56:39,900
and we also get the compliancy claim

1342
00:56:39,900 --> 00:56:41,339
because we overrode the original

1343
00:56:41,339 --> 00:56:43,619
compliant device

1344
00:56:43,619 --> 00:56:47,059
so this bypass MFA the Hardware security

1345
00:56:47,059 --> 00:56:50,880
and also the need to dump LSS or even

1346
00:56:50,880 --> 00:56:54,140
administrative privileges

1347
00:56:54,900 --> 00:56:57,660
um I'm going to skip over this

1348
00:56:57,660 --> 00:57:01,619
so I disclose this to msrc the

1349
00:57:01,619 --> 00:57:03,300
registration using on sign on in

1350
00:57:03,300 --> 00:57:04,920
December 2020

1351
00:57:04,920 --> 00:57:07,800
that was fixed in September 2021

1352
00:57:07,800 --> 00:57:10,140
so now you can no longer use a single

1353
00:57:10,140 --> 00:57:11,880
sign-on token to register a new device

1354
00:57:11,880 --> 00:57:15,000
which you need to use like a fresh token

1355
00:57:15,000 --> 00:57:17,579
and the overriding of a device was

1356
00:57:17,579 --> 00:57:20,520
reported in May 2021 and they actually

1357
00:57:20,520 --> 00:57:22,740
patched that last month via Windows

1358
00:57:22,740 --> 00:57:24,540
update so they made some changes to a

1359
00:57:24,540 --> 00:57:26,099
registration process

1360
00:57:26,099 --> 00:57:28,140
um I don't know exactly what but they

1361
00:57:28,140 --> 00:57:30,540
also assigned a cve for that

1362
00:57:30,540 --> 00:57:32,880
so this should also no longer be

1363
00:57:32,880 --> 00:57:35,040
possible

1364
00:57:35,040 --> 00:57:37,380
um this one I'll have to skip

1365
00:57:37,380 --> 00:57:39,660
because we're out of time

1366
00:57:39,660 --> 00:57:41,760
so to conclude

1367
00:57:41,760 --> 00:57:43,800
the secrets in Hardware were not always

1368
00:57:43,800 --> 00:57:46,260
very efficiently protected basically you

1369
00:57:46,260 --> 00:57:48,839
could just well pre-calculate everything

1370
00:57:48,839 --> 00:57:52,200
you needed to need them you could create

1371
00:57:52,200 --> 00:57:54,540
a primer you could get your own primary

1372
00:57:54,540 --> 00:57:57,480
refresh token just by get registering a

1373
00:57:57,480 --> 00:57:59,220
new device instead of trying to steal it

1374
00:57:59,220 --> 00:58:00,780
from the old device

1375
00:58:00,780 --> 00:58:02,880
and you could take over the whole device

1376
00:58:02,880 --> 00:58:04,859
identity by simply requesting a ticket

1377
00:58:04,859 --> 00:58:07,940
for the device

1378
00:58:08,339 --> 00:58:09,780
um and there's also this thing with

1379
00:58:09,780 --> 00:58:11,760
InTune admins that could bypass MFA but

1380
00:58:11,760 --> 00:58:13,380
I'll leave that for next time

1381
00:58:13,380 --> 00:58:15,540
so this shoot all we fixed now just if

1382
00:58:15,540 --> 00:58:17,040
you patch your endpoints the cloud is

1383
00:58:17,040 --> 00:58:19,380
already patched of course

1384
00:58:19,380 --> 00:58:22,740
um lastly all the tools that I used are

1385
00:58:22,740 --> 00:58:24,780
based on the road tools framework I

1386
00:58:24,780 --> 00:58:26,520
still have to make some changes before I

1387
00:58:26,520 --> 00:58:28,920
push the scripts publicly but they will

1388
00:58:28,920 --> 00:58:31,260
be open source I do have some stickers

1389
00:58:31,260 --> 00:58:33,180
here so if you want some nice Roto

1390
00:58:33,180 --> 00:58:36,180
stickers just to go to me after the talk

1391
00:58:36,180 --> 00:58:39,000
or if you see me walking around

1392
00:58:39,000 --> 00:58:41,339
and if you have any questions I'm not

1393
00:58:41,339 --> 00:58:42,780
sure if we still have time for those but

1394
00:58:42,780 --> 00:58:44,700
you can always ask them via Twitter or

1395
00:58:44,700 --> 00:58:46,319
just send me a meal

1396
00:58:46,319 --> 00:58:47,200
thank you

1397
00:58:47,200 --> 00:58:56,960
[Applause]

