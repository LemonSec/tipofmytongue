1
00:00:00,480 --> 00:00:02,639
yes hack my talk but supporting

2
00:00:02,639 --> 00:00:04,259
kubernetes um that's what we are now

3
00:00:04,259 --> 00:00:06,839
talking about and I'm also very

4
00:00:06,839 --> 00:00:08,880
surprised that most of the people still

5
00:00:08,880 --> 00:00:10,260
sitting here because we're talking about

6
00:00:10,260 --> 00:00:13,139
kubernetes and I always see people like

7
00:00:13,139 --> 00:00:14,820
running away from it and that's why I

8
00:00:14,820 --> 00:00:17,580
give this talk to give you like an not

9
00:00:17,580 --> 00:00:19,980
like a real overview but uh introduce

10
00:00:19,980 --> 00:00:23,100
you to some yeah weaknesses kubernetes

11
00:00:23,100 --> 00:00:25,380
have and we will look at the logic of

12
00:00:25,380 --> 00:00:27,539
kubernetes itself

13
00:00:27,539 --> 00:00:28,859
so

14
00:00:28,859 --> 00:00:31,140
to start I will give you a brief

15
00:00:31,140 --> 00:00:33,480
introduction to who I am my name is

16
00:00:33,480 --> 00:00:36,239
Benjamin kolterman I'm from Germany I'm

17
00:00:36,239 --> 00:00:38,399
the former CEO of avalanche we are doing

18
00:00:38,399 --> 00:00:40,739
kubernetes auditing and kubernetes

19
00:00:40,739 --> 00:00:43,399
security for larger companies

20
00:00:43,399 --> 00:00:46,680
I'm also in kubernetes or Cloud security

21
00:00:46,680 --> 00:00:49,140
engineer as you want to call it um CTF

22
00:00:49,140 --> 00:00:51,899
player at fluxfingers and so my Twitter

23
00:00:51,899 --> 00:00:56,120
handle is paquito or packet zero

24
00:00:56,520 --> 00:00:59,640
so um before I start actually thanks to

25
00:00:59,640 --> 00:01:00,719
Google Cloud for sponsoring the

26
00:01:00,719 --> 00:01:01,800
environment

27
00:01:01,800 --> 00:01:04,260
um I want to keep it short uh I created

28
00:01:04,260 --> 00:01:06,000
the whole kubernetes environment and

29
00:01:06,000 --> 00:01:08,939
some it's a bit pricey so I just want to

30
00:01:08,939 --> 00:01:11,220
thank uh to say thank you to Google the

31
00:01:11,220 --> 00:01:13,680
whole talk is not about gke it's about

32
00:01:13,680 --> 00:01:15,659
vanilla kubernetes it's very important

33
00:01:15,659 --> 00:01:19,380
and some yeah just let you know

34
00:01:19,380 --> 00:01:22,020
so what's on the agenda for today we are

35
00:01:22,020 --> 00:01:23,640
going to start with can you eat it I

36
00:01:23,640 --> 00:01:25,080
will give you a brief introduction about

37
00:01:25,080 --> 00:01:27,119
what kubernetes is I think Matthias did

38
00:01:27,119 --> 00:01:28,619
a really good job on it so we will keep

39
00:01:28,619 --> 00:01:30,900
it short the next thing we are going to

40
00:01:30,900 --> 00:01:32,460
look at is the demo environment because

41
00:01:32,460 --> 00:01:33,840
actually this talk is running in

42
00:01:33,840 --> 00:01:35,880
kubernetes the slides are in kubernetes

43
00:01:35,880 --> 00:01:37,680
it's not PowerPoint and stuff like this

44
00:01:37,680 --> 00:01:40,259
it runs inside of kubernetes

45
00:01:40,259 --> 00:01:42,299
um at third we are going to have like a

46
00:01:42,299 --> 00:01:44,700
little 101 of kubernetes security just

47
00:01:44,700 --> 00:01:49,140
that you learn some yeah some yeah some

48
00:01:49,140 --> 00:01:51,420
security issues that exist in kubernetes

49
00:01:51,420 --> 00:01:53,759
uh the fourth topic is we'll go and have

50
00:01:53,759 --> 00:01:55,680
a look at the advanced scenarios and at

51
00:01:55,680 --> 00:01:57,240
last one I we will do like a little

52
00:01:57,240 --> 00:01:59,939
security evaluation of the kubernetes

53
00:01:59,939 --> 00:02:01,380
application itself you're currently

54
00:02:01,380 --> 00:02:03,060
seeing here

55
00:02:03,060 --> 00:02:05,939
so let's start uh can you eat it no you

56
00:02:05,939 --> 00:02:08,280
cannot eat kubernetes kubernetes

57
00:02:08,280 --> 00:02:11,160
um is like more it's it's a uh it's a

58
00:02:11,160 --> 00:02:13,920
word some some people don't have hit so

59
00:02:13,920 --> 00:02:17,640
just to starting like with little joke

60
00:02:17,640 --> 00:02:19,260
um what is kubernetes actually it's in

61
00:02:19,260 --> 00:02:20,940
container orchestrator and I also wanted

62
00:02:20,940 --> 00:02:23,459
to keep it short it consists of worker

63
00:02:23,459 --> 00:02:25,440
and masternodes so the Masters like the

64
00:02:25,440 --> 00:02:26,940
controlling component that does the

65
00:02:26,940 --> 00:02:29,220
scheduling of your workloads and some of

66
00:02:29,220 --> 00:02:31,140
the the worker nodes actually running

67
00:02:31,140 --> 00:02:34,020
all of the workloads so there's yeah

68
00:02:34,020 --> 00:02:35,760
kind of you differentiate between master

69
00:02:35,760 --> 00:02:37,379
and worker nodes

70
00:02:37,379 --> 00:02:39,780
kubernetes also has these uh yeah

71
00:02:39,780 --> 00:02:42,060
concept of everything as an API object

72
00:02:42,060 --> 00:02:44,940
so actually every port you run in your

73
00:02:44,940 --> 00:02:47,819
kubernetes is an API object you can for

74
00:02:47,819 --> 00:02:49,379
example also curl it if you like

75
00:02:49,379 --> 00:02:52,800
authorized to the kubernetes API

76
00:02:52,800 --> 00:02:54,599
so everything is an API object and we

77
00:02:54,599 --> 00:02:56,420
will see that one later

78
00:02:56,420 --> 00:03:00,060
also the most here at kubernetes let's

79
00:03:00,060 --> 00:03:03,720
say words or objects you will find are

80
00:03:03,720 --> 00:03:05,760
nodes which are like the VMS the

81
00:03:05,760 --> 00:03:07,680
workloads are running on namespaces

82
00:03:07,680 --> 00:03:09,599
which are like logical separation of

83
00:03:09,599 --> 00:03:11,159
your for logical separation of your

84
00:03:11,159 --> 00:03:12,900
workloads there are deployments

85
00:03:12,900 --> 00:03:16,560
deployments consist of PODS and yeah

86
00:03:16,560 --> 00:03:18,659
deployments consist of PODS so they like

87
00:03:18,659 --> 00:03:21,180
kind of Define where and how your

88
00:03:21,180 --> 00:03:23,700
workload or your Port is going to be run

89
00:03:23,700 --> 00:03:25,680
then there are Services services are

90
00:03:25,680 --> 00:03:29,099
there to let's say exposing pots to

91
00:03:29,099 --> 00:03:30,900
other pods or to the internet and

92
00:03:30,900 --> 00:03:32,580
there's Ingress which does like Ingress

93
00:03:32,580 --> 00:03:36,019
control as you might have guessed

94
00:03:36,060 --> 00:03:38,280
um also this is also something I want to

95
00:03:38,280 --> 00:03:39,959
keep really short because Matthias did

96
00:03:39,959 --> 00:03:41,760
the introduction to it

97
00:03:41,760 --> 00:03:42,420
um

98
00:03:42,420 --> 00:03:44,340
I just want to say that the cube API

99
00:03:44,340 --> 00:03:49,319
server is like an https or an HTTP API

100
00:03:49,319 --> 00:03:52,500
where users actually talk to the cluster

101
00:03:52,500 --> 00:03:54,780
so I copied

102
00:03:54,780 --> 00:03:57,180
um the for me or for the security forks

103
00:03:57,180 --> 00:03:59,220
and most important sentence from the

104
00:03:59,220 --> 00:04:02,099
kubernetes documentation just that you

105
00:04:02,099 --> 00:04:04,620
if you read it um everyone here should

106
00:04:04,620 --> 00:04:07,440
yeah should think about and should think

107
00:04:07,440 --> 00:04:10,560
oh I have really to secure this one and

108
00:04:10,560 --> 00:04:14,000
yeah the cube API server let is like the

109
00:04:14,000 --> 00:04:16,738
primary let's say

110
00:04:16,738 --> 00:04:20,519
um yeah API where you talk to where you

111
00:04:20,519 --> 00:04:22,919
can like control all of your components

112
00:04:22,919 --> 00:04:24,840
and all of your API objects

113
00:04:24,840 --> 00:04:27,900
the next one is hcd hcd is like database

114
00:04:27,900 --> 00:04:29,340
where the whole where your whole cluster

115
00:04:29,340 --> 00:04:32,280
configuration is stored also something

116
00:04:32,280 --> 00:04:34,500
um where you have a look at and where

117
00:04:34,500 --> 00:04:38,220
you where security strategy should apply

118
00:04:38,220 --> 00:04:40,440
the next stuff is the cubelet um the

119
00:04:40,440 --> 00:04:42,180
cubelet is like the primary node agent

120
00:04:42,180 --> 00:04:45,720
runs on every node exposes an HTTP an

121
00:04:45,720 --> 00:04:48,660
https port and so with the cubelets you

122
00:04:48,660 --> 00:04:50,520
can like control the pods that are

123
00:04:50,520 --> 00:04:51,960
running on the Node where the cubelet is

124
00:04:51,960 --> 00:04:54,240
running and that's also why you should

125
00:04:54,240 --> 00:04:56,280
definitely have a look at it and also

126
00:04:56,280 --> 00:05:00,600
get that one into your security strategy

127
00:05:00,600 --> 00:05:02,280
and the last one is the container

128
00:05:02,280 --> 00:05:04,740
runtime the container runtime itself is

129
00:05:04,740 --> 00:05:06,000
just responsible for running your

130
00:05:06,000 --> 00:05:08,280
container workloads but also that one

131
00:05:08,280 --> 00:05:10,139
belongs should be long in your container

132
00:05:10,139 --> 00:05:11,699
should belong to your kubernetes

133
00:05:11,699 --> 00:05:14,280
security strategy so that's it for the

134
00:05:14,280 --> 00:05:16,320
brief introduction into kubernetes

135
00:05:16,320 --> 00:05:18,060
nothing more

136
00:05:18,060 --> 00:05:20,759
um let's start with kind of

137
00:05:20,759 --> 00:05:23,160
the fun things

138
00:05:23,160 --> 00:05:24,419
so let's have a look at the demo

139
00:05:24,419 --> 00:05:26,699
environment I created

140
00:05:26,699 --> 00:05:29,280
um I taught about doing this talk and I

141
00:05:29,280 --> 00:05:33,060
needed kind of a demo application so

142
00:05:33,060 --> 00:05:35,580
after thinking for like two minutes I

143
00:05:35,580 --> 00:05:36,960
was like hey let's do my presentation in

144
00:05:36,960 --> 00:05:40,979
kubernetes and actually it looks like

145
00:05:40,979 --> 00:05:43,020
this so it's a little application we

146
00:05:43,020 --> 00:05:44,880
have one masternode we have two worker

147
00:05:44,880 --> 00:05:45,960
nodes

148
00:05:45,960 --> 00:05:48,300
um we actually have one namespace that

149
00:05:48,300 --> 00:05:49,800
works like in content delivery Network

150
00:05:49,800 --> 00:05:53,039
delivers like the JavaScript and the

151
00:05:53,039 --> 00:05:55,320
pictures you're currently seeing and

152
00:05:55,320 --> 00:05:57,419
there's another namespace that works uh

153
00:05:57,419 --> 00:06:00,300
yeah kind of as the static HTML that are

154
00:06:00,300 --> 00:06:02,520
it's currently serving my slides so

155
00:06:02,520 --> 00:06:03,840
there are two deployments and two

156
00:06:03,840 --> 00:06:06,660
different namespaces and yeah those are

157
00:06:06,660 --> 00:06:08,039
running the presentation you currently

158
00:06:08,039 --> 00:06:09,900
see

159
00:06:09,900 --> 00:06:12,000
what we also have to do for this talk is

160
00:06:12,000 --> 00:06:14,520
we need to do some assumptions so the

161
00:06:14,520 --> 00:06:16,139
first one is I don't attack the

162
00:06:16,139 --> 00:06:18,479
kubernetes source code itself it will be

163
00:06:18,479 --> 00:06:20,880
just on the kubernetes logic so you

164
00:06:20,880 --> 00:06:22,740
won't see me doing like oh here's like

165
00:06:22,740 --> 00:06:24,419
one bits in the source code is said

166
00:06:24,419 --> 00:06:25,380
wrong

167
00:06:25,380 --> 00:06:27,240
um you can do buffer overflow there it

168
00:06:27,240 --> 00:06:29,100
is more like those are real kubernetes

169
00:06:29,100 --> 00:06:31,620
features and we are like abusing real

170
00:06:31,620 --> 00:06:33,539
kubernetes features we are attacking the

171
00:06:33,539 --> 00:06:35,639
logic of kubernetes

172
00:06:35,639 --> 00:06:37,380
um also this talk has no interaction

173
00:06:37,380 --> 00:06:40,020
with any third-party product it's only

174
00:06:40,020 --> 00:06:41,520
vanilla kubernetes you will find

175
00:06:41,520 --> 00:06:43,259
anything you see here you can do

176
00:06:43,259 --> 00:06:45,600
anything without third party products

177
00:06:45,600 --> 00:06:49,139
and the search the first third step is

178
00:06:49,139 --> 00:06:52,199
after a successful exploitation of

179
00:06:52,199 --> 00:06:54,660
application in some scenarios yeah the

180
00:06:54,660 --> 00:06:57,360
hacker gains access to different

181
00:06:57,360 --> 00:06:59,039
um kubernetes resources

182
00:06:59,039 --> 00:07:00,960
this is something I had to put in

183
00:07:00,960 --> 00:07:03,780
because if you configure kubernetes like

184
00:07:03,780 --> 00:07:05,100
right

185
00:07:05,100 --> 00:07:09,120
um it's extremely hard nearly too

186
00:07:09,120 --> 00:07:11,819
impossible with only attacking the logic

187
00:07:11,819 --> 00:07:13,740
of kubernetes like to gain code

188
00:07:13,740 --> 00:07:15,539
execution in the cluster and stuff like

189
00:07:15,539 --> 00:07:16,860
this so

190
00:07:16,860 --> 00:07:19,139
um some scenarios some or some Advanced

191
00:07:19,139 --> 00:07:21,360
scenarios you will see are building on

192
00:07:21,360 --> 00:07:23,759
that we have hacked for example the

193
00:07:23,759 --> 00:07:25,500
application the web front end and gains

194
00:07:25,500 --> 00:07:27,599
let's say access to the node or stuff

195
00:07:27,599 --> 00:07:29,699
like this

196
00:07:29,699 --> 00:07:32,520
so let's do some math the 101 of

197
00:07:32,520 --> 00:07:34,860
kubernetes security it's also I will

198
00:07:34,860 --> 00:07:36,539
keep this one short um and I have

199
00:07:36,539 --> 00:07:39,180
prepared lots of demos so looking

200
00:07:39,180 --> 00:07:41,099
forward to those one

201
00:07:41,099 --> 00:07:43,199
first of all a malicious container image

202
00:07:43,199 --> 00:07:44,639
I think that's

203
00:07:44,639 --> 00:07:46,440
um you all know what's what's going to

204
00:07:46,440 --> 00:07:48,120
happen if you like have a malicious

205
00:07:48,120 --> 00:07:49,800
container image there are like two

206
00:07:49,800 --> 00:07:51,660
scenarios we either pull it directly

207
00:07:51,660 --> 00:07:53,720
into the cluster or some developer

208
00:07:53,720 --> 00:07:57,000
builds like a Docker image a new one and

209
00:07:57,000 --> 00:07:59,340
the first line is basically you choose

210
00:07:59,340 --> 00:08:00,960
your base image and if your base image

211
00:08:00,960 --> 00:08:03,780
is the malicious image then also you

212
00:08:03,780 --> 00:08:06,419
have malicious code in your cluster so

213
00:08:06,419 --> 00:08:08,819
take away from this one is scan your

214
00:08:08,819 --> 00:08:11,160
container images please do it mostly

215
00:08:11,160 --> 00:08:13,020
malicious container images are like the

216
00:08:13,020 --> 00:08:15,240
first entry point when malicious code

217
00:08:15,240 --> 00:08:17,340
comes into the cluster

218
00:08:17,340 --> 00:08:20,220
next one is the cube API server what we

219
00:08:20,220 --> 00:08:21,720
can do there

220
00:08:21,720 --> 00:08:23,940
um Cube API server actually gets

221
00:08:23,940 --> 00:08:27,000
restricted using arbark so please use

222
00:08:27,000 --> 00:08:29,400
role-based access if you are creating

223
00:08:29,400 --> 00:08:30,960
for example service accounts and stuff

224
00:08:30,960 --> 00:08:33,899
like this and also every pod in your

225
00:08:33,899 --> 00:08:36,240
cluster has a service account attached

226
00:08:36,240 --> 00:08:38,940
so if one pod is compromised

227
00:08:38,940 --> 00:08:42,140
the attacker in the pot has valid

228
00:08:42,140 --> 00:08:45,000
kubernetes credentials and he can talk

229
00:08:45,000 --> 00:08:47,640
to the API and then it's up to you what

230
00:08:47,640 --> 00:08:50,459
your role-based access looks like to get

231
00:08:50,459 --> 00:08:52,560
the configuration right also please

232
00:08:52,560 --> 00:08:55,019
Harden your TLS configuration because if

233
00:08:55,019 --> 00:08:58,080
your TLS is like kind of up

234
00:08:58,080 --> 00:09:00,060
um everyone could read what your traffic

235
00:09:00,060 --> 00:09:03,180
is and maybe don't do public exposure it

236
00:09:03,180 --> 00:09:06,300
depends uh how if you need it or not but

237
00:09:06,300 --> 00:09:08,580
if you don't expose the cube API you're

238
00:09:08,580 --> 00:09:12,300
reducing the attack service massively

239
00:09:12,300 --> 00:09:16,260
so let's go on with the cubelet and um

240
00:09:16,260 --> 00:09:18,959
yeah the cubelet is as I said the

241
00:09:18,959 --> 00:09:20,700
primary node agent and per default

242
00:09:20,700 --> 00:09:22,459
that's also in the kubernetes

243
00:09:22,459 --> 00:09:24,959
documentation it allows unauthenticated

244
00:09:24,959 --> 00:09:27,779
access to their https endpoint which

245
00:09:27,779 --> 00:09:29,339
grants control over the node and

246
00:09:29,339 --> 00:09:32,700
containers so normally per default it is

247
00:09:32,700 --> 00:09:35,040
getting better with time so what we are

248
00:09:35,040 --> 00:09:36,959
currently seeing is if you deploy now a

249
00:09:36,959 --> 00:09:40,380
vanilla kubernetes it has this

250
00:09:40,380 --> 00:09:43,440
configurations set so in the

251
00:09:43,440 --> 00:09:45,480
documentation it still says it's

252
00:09:45,480 --> 00:09:47,519
unauthenticated access but if you're

253
00:09:47,519 --> 00:09:49,320
actually going to create your vanilla

254
00:09:49,320 --> 00:09:51,060
kubernetes cluster you will see that

255
00:09:51,060 --> 00:09:53,040
those argumentations for the cubelet are

256
00:09:53,040 --> 00:09:54,660
set so

257
00:09:54,660 --> 00:09:57,000
if you have maybe like an older version

258
00:09:57,000 --> 00:10:00,180
go look at at the cubelet flags if

259
00:10:00,180 --> 00:10:03,120
Anonymous authorization is is false or

260
00:10:03,120 --> 00:10:03,899
off

261
00:10:03,899 --> 00:10:05,339
um because otherwise

262
00:10:05,339 --> 00:10:08,100
yeah you can just curl your cubelet on

263
00:10:08,100 --> 00:10:10,260
slash pots and see every pot that's on

264
00:10:10,260 --> 00:10:11,519
your node

265
00:10:11,519 --> 00:10:13,380
um so please make sure that those

266
00:10:13,380 --> 00:10:15,660
configurations are set and also for the

267
00:10:15,660 --> 00:10:17,480
API server

268
00:10:17,480 --> 00:10:19,980
ensure that uh yeah you have the

269
00:10:19,980 --> 00:10:22,760
authorization on and that you're using

270
00:10:22,760 --> 00:10:25,260
role-based access and node authorization

271
00:10:25,260 --> 00:10:27,600
we will come to that one later

272
00:10:27,600 --> 00:10:30,180
um where this one extremely helps but

273
00:10:30,180 --> 00:10:32,339
just to make sure those are the like

274
00:10:32,339 --> 00:10:34,200
arguments you definitely should be

275
00:10:34,200 --> 00:10:35,940
setting for the cubelet and for the AP

276
00:10:35,940 --> 00:10:38,040
Cube API server

277
00:10:38,040 --> 00:10:40,680
so let's head into container runtime

278
00:10:40,680 --> 00:10:42,480
security a bit

279
00:10:42,480 --> 00:10:43,080
um

280
00:10:43,080 --> 00:10:46,680
yeah let's start with like a container

281
00:10:46,680 --> 00:10:48,360
breakout if you don't Harden your

282
00:10:48,360 --> 00:10:50,160
container runtime

283
00:10:50,160 --> 00:10:52,140
um what we're doing here is we like run

284
00:10:52,140 --> 00:10:53,399
a pot

285
00:10:53,399 --> 00:10:56,060
um in this case it's named name breakout

286
00:10:56,060 --> 00:10:59,339
we over we do we do override of the yaml

287
00:10:59,339 --> 00:11:01,380
we deployed for example we are setting

288
00:11:01,380 --> 00:11:04,500
the host PID to true so our pod can

289
00:11:04,500 --> 00:11:07,380
actually use the host process IDs

290
00:11:07,380 --> 00:11:09,540
um yeah our pod actually sees the host

291
00:11:09,540 --> 00:11:13,620
process IDs thus we can then later do an

292
00:11:13,620 --> 00:11:15,300
NS enter which is like we're entering

293
00:11:15,300 --> 00:11:19,019
namespace of the first process we are

294
00:11:19,019 --> 00:11:21,720
entering the mount name space so we like

295
00:11:21,720 --> 00:11:25,980
have the yeah the root file system of

296
00:11:25,980 --> 00:11:29,339
the node literally like Mount or we are

297
00:11:29,339 --> 00:11:31,620
entering the same namespace as

298
00:11:31,620 --> 00:11:33,300
um yeah as the root file system of the

299
00:11:33,300 --> 00:11:36,060
host has and we have full code execution

300
00:11:36,060 --> 00:11:39,959
there and let me see if I just can pull

301
00:11:39,959 --> 00:11:43,079
that one over yes

302
00:11:43,079 --> 00:11:45,120
I hope you

303
00:11:45,120 --> 00:11:48,300
all can see oh that's like I should have

304
00:11:48,300 --> 00:11:51,240
mirrored it's um and if I'm going to

305
00:11:51,240 --> 00:11:52,800
copy this one

306
00:11:52,800 --> 00:11:55,680
and I hope the internet is good enough

307
00:11:55,680 --> 00:11:58,680
and I execute it

308
00:11:58,680 --> 00:12:02,239
just need to wait a little bit

309
00:12:03,120 --> 00:12:05,220
yeah and there it is

310
00:12:05,220 --> 00:12:07,800
um we now literally did a container

311
00:12:07,800 --> 00:12:09,779
breakout it's like a very very very

312
00:12:09,779 --> 00:12:11,459
basic thing

313
00:12:11,459 --> 00:12:12,060
um

314
00:12:12,060 --> 00:12:14,220
and we could only do it because we could

315
00:12:14,220 --> 00:12:16,500
use the host pids and we could also

316
00:12:16,500 --> 00:12:18,240
start the privileged pod that's very

317
00:12:18,240 --> 00:12:20,760
important and to show you that we like

318
00:12:20,760 --> 00:12:22,920
have the container breakout I will just

319
00:12:22,920 --> 00:12:26,760
do show you that I can list all

320
00:12:26,760 --> 00:12:29,519
containers running on the Node

321
00:12:29,519 --> 00:12:31,260
um those are all the containers running

322
00:12:31,260 --> 00:12:34,740
on the Node I'm using CTR which is like

323
00:12:34,740 --> 00:12:37,920
um yeah Docker just for container d

324
00:12:37,920 --> 00:12:40,440
um so we are now on the Node and we are

325
00:12:40,440 --> 00:12:42,060
root on the Node so we could like do

326
00:12:42,060 --> 00:12:43,560
everything there

327
00:12:43,560 --> 00:12:47,599
um so the main takeaway of this is

328
00:12:48,420 --> 00:12:51,899
please please don't allow privileged

329
00:12:51,899 --> 00:12:53,940
pods it's very important because

330
00:12:53,940 --> 00:12:55,560
otherwise this happens to you and

331
00:12:55,560 --> 00:12:58,139
everyone who could run a port

332
00:12:58,139 --> 00:13:01,320
um literally can get root on the Node

333
00:13:01,320 --> 00:13:03,360
so let's head into some more advanced

334
00:13:03,360 --> 00:13:06,899
scenarios and those scenarios are

335
00:13:06,899 --> 00:13:10,560
yeah as I said um advanced

336
00:13:10,560 --> 00:13:14,820
so who uses kubernetes here like who

337
00:13:14,820 --> 00:13:16,680
uses kubernetes maybe in in their

338
00:13:16,680 --> 00:13:19,500
company okay okay some of you and who

339
00:13:19,500 --> 00:13:22,079
does kubernetes security from you here

340
00:13:22,079 --> 00:13:25,680
okay okay also some some some folks nice

341
00:13:25,680 --> 00:13:27,420
nice to hear

342
00:13:27,420 --> 00:13:28,320
um

343
00:13:28,320 --> 00:13:30,480
so the first Advanced scenario is like

344
00:13:30,480 --> 00:13:34,079
we can create every resource in the

345
00:13:34,079 --> 00:13:36,720
cluster or we just need one specific

346
00:13:36,720 --> 00:13:38,279
resource but let's say we can create

347
00:13:38,279 --> 00:13:40,860
resources in a cluster and we aim to

348
00:13:40,860 --> 00:13:43,320
read every newly created secret even

349
00:13:43,320 --> 00:13:46,560
though we are not currently access or

350
00:13:46,560 --> 00:13:49,079
actively accessing the cluster so what

351
00:13:49,079 --> 00:13:51,540
we like wanted to do is we will do we

352
00:13:51,540 --> 00:13:53,459
want to do data exploration on

353
00:13:53,459 --> 00:13:55,500
kubernetes with only the kubernetes

354
00:13:55,500 --> 00:13:58,440
logic without even like touching

355
00:13:58,440 --> 00:14:02,459
um yeah vulnerable code in kubernetes

356
00:14:02,459 --> 00:14:04,560
so what we are going to need is like we

357
00:14:04,560 --> 00:14:06,600
need an admission controller uh we need

358
00:14:06,600 --> 00:14:08,160
to validate an admission web hook in

359
00:14:08,160 --> 00:14:10,139
this case an admission controller

360
00:14:10,139 --> 00:14:12,240
Matthias also did an introduction uh

361
00:14:12,240 --> 00:14:14,040
there the validating admission

362
00:14:14,040 --> 00:14:16,380
controller like validates every API

363
00:14:16,380 --> 00:14:19,079
requests and we then can send we can

364
00:14:19,079 --> 00:14:21,060
then send those API requests that are

365
00:14:21,060 --> 00:14:25,079
validated to our server uh actually this

366
00:14:25,079 --> 00:14:27,720
looks a bit like this one so as user you

367
00:14:27,720 --> 00:14:29,820
kind of yeah you want to deploy your

368
00:14:29,820 --> 00:14:33,000
yaml to the API server but in between

369
00:14:33,000 --> 00:14:35,399
their mission controller and says is it

370
00:14:35,399 --> 00:14:37,860
valid or is it not valid so

371
00:14:37,860 --> 00:14:40,380
yeah in both Direction either it's valid

372
00:14:40,380 --> 00:14:42,899
and it's got a sec accepted and then

373
00:14:42,899 --> 00:14:45,660
it's stored in hcd or if it's not then

374
00:14:45,660 --> 00:14:48,660
it's like thrown away or yeah or you get

375
00:14:48,660 --> 00:14:51,180
a warning and stuff like this

376
00:14:51,180 --> 00:14:53,639
um so I will do the demo at the end of

377
00:14:53,639 --> 00:14:56,279
this scenario so let's head into what

378
00:14:56,279 --> 00:14:58,680
does our admission controller looks like

379
00:14:58,680 --> 00:15:02,160
um what we can create is uh we yeah we

380
00:15:02,160 --> 00:15:04,019
create the validating admission webhook

381
00:15:04,019 --> 00:15:07,079
configuration and we need uh yeah some

382
00:15:07,079 --> 00:15:10,139
operations where it should like get our

383
00:15:10,139 --> 00:15:12,060
secrets and we are looking for the

384
00:15:12,060 --> 00:15:15,540
create and update operation in no matter

385
00:15:15,540 --> 00:15:18,060
what API Group and no matter what API

386
00:15:18,060 --> 00:15:19,680
version but we wanted to have the

387
00:15:19,680 --> 00:15:22,440
resource Secrets here

388
00:15:22,440 --> 00:15:26,940
and also important is notice that it's

389
00:15:26,940 --> 00:15:29,639
like sent to my URL

390
00:15:29,639 --> 00:15:34,740
so and let's demo this one I think

391
00:15:34,740 --> 00:15:36,800
um

392
00:15:39,240 --> 00:15:41,519
so I hope everyone can

393
00:15:41,519 --> 00:15:44,279
read it

394
00:15:44,279 --> 00:15:48,060
um yeah so actually here's like my

395
00:15:48,060 --> 00:15:49,699
admission

396
00:15:49,699 --> 00:15:52,079
weapon configuration looks exactly this

397
00:15:52,079 --> 00:15:54,000
is the same like you see it on the

398
00:15:54,000 --> 00:15:56,300
slides

399
00:15:56,820 --> 00:16:00,420
um and also I will show you

400
00:16:00,420 --> 00:16:02,459
um just to make sure

401
00:16:02,459 --> 00:16:05,699
there is that you can see that or that

402
00:16:05,699 --> 00:16:06,959
you can see that what what's running

403
00:16:06,959 --> 00:16:08,880
inside the cluster this is currently

404
00:16:08,880 --> 00:16:11,220
running inside the cluster so

405
00:16:11,220 --> 00:16:14,220
uh just to let you know so let's apply

406
00:16:14,220 --> 00:16:16,639
this one

407
00:16:18,600 --> 00:16:21,680
no there it is

408
00:16:21,680 --> 00:16:24,720
so now we

409
00:16:24,720 --> 00:16:28,320
get it and see if it's there

410
00:16:28,320 --> 00:16:31,620
okay there's our secret checker

411
00:16:31,620 --> 00:16:34,620
um to actually like receive the secrets

412
00:16:34,620 --> 00:16:37,079
uh I will just open another shell and

413
00:16:37,079 --> 00:16:42,859
SSH onto my command and control server

414
00:16:42,899 --> 00:16:45,839
where the secret is going to be sent

415
00:16:45,839 --> 00:16:48,500
so

416
00:16:48,959 --> 00:16:51,000
um and the command control server

417
00:16:51,000 --> 00:16:54,060
there's an nginx running so I think you

418
00:16:54,060 --> 00:16:56,699
all know what nginx is and and what it

419
00:16:56,699 --> 00:16:57,420
does

420
00:16:57,420 --> 00:17:00,500
and I'm just logging

421
00:17:00,500 --> 00:17:03,660
the kubernetes requests that are coming

422
00:17:03,660 --> 00:17:07,500
or are sent to the API so to This nginx

423
00:17:07,500 --> 00:17:09,179
Server I actually think I have to

424
00:17:09,179 --> 00:17:10,500
restart it

425
00:17:10,500 --> 00:17:12,559
um

426
00:17:13,260 --> 00:17:15,959
start engine X

427
00:17:15,959 --> 00:17:18,780
and now let's have a look at the log

428
00:17:18,780 --> 00:17:20,459
and on the left side if you are now

429
00:17:20,459 --> 00:17:23,819
going to let's say create

430
00:17:23,819 --> 00:17:26,160
a secret

431
00:17:26,160 --> 00:17:27,240
what

432
00:17:27,240 --> 00:17:28,860
as you can see it we are now creating a

433
00:17:28,860 --> 00:17:31,799
secret a generic secret I call it demo

434
00:17:31,799 --> 00:17:35,460
and we are using the key is password and

435
00:17:35,460 --> 00:17:38,160
the thing that is like concealed is

436
00:17:38,160 --> 00:17:40,760
super secure

437
00:17:41,460 --> 00:17:44,400
and if I'm sending that one

438
00:17:44,400 --> 00:17:48,000
you see I'm getting stuff here

439
00:17:48,000 --> 00:17:50,340
and if we like searching for the right

440
00:17:50,340 --> 00:17:54,720
field uh here it's password it's our key

441
00:17:54,720 --> 00:17:57,840
you will see something base64 encoded

442
00:17:57,840 --> 00:18:02,880
um yeah so let's no

443
00:18:02,880 --> 00:18:05,460
let's Echo that one

444
00:18:05,460 --> 00:18:08,460
into a base64 and decoded and you see

445
00:18:08,460 --> 00:18:10,440
actually super secure so what you can do

446
00:18:10,440 --> 00:18:13,980
is we can do data exfiltration in every

447
00:18:13,980 --> 00:18:16,799
namespace this is not regulated or

448
00:18:16,799 --> 00:18:18,840
dedicated to one namespace we can create

449
00:18:18,840 --> 00:18:20,940
the submission controller and let it

450
00:18:20,940 --> 00:18:24,000
like get our all of our secrets or any

451
00:18:24,000 --> 00:18:26,460
resource we Define where we Define the

452
00:18:26,460 --> 00:18:28,200
scope of the admission controller we can

453
00:18:28,200 --> 00:18:29,880
send it to our server and then we can do

454
00:18:29,880 --> 00:18:32,160
whatever we want with it and um yeah

455
00:18:32,160 --> 00:18:34,080
it's like native kubernetes logic and

456
00:18:34,080 --> 00:18:37,799
kind of let's say built in

457
00:18:37,799 --> 00:18:42,200
so this is for the first one

458
00:18:43,620 --> 00:18:46,260
yeah so let's head into the next

459
00:18:46,260 --> 00:18:48,000
scenario

460
00:18:48,000 --> 00:18:51,780
um the next one is a little bit

461
00:18:51,780 --> 00:18:55,320
I would say not that much complex but it

462
00:18:55,320 --> 00:18:59,100
is something you you sometimes see at

463
00:18:59,100 --> 00:19:01,559
companies that are that didn't like

464
00:19:01,559 --> 00:19:04,380
shift in their heads to the new

465
00:19:04,380 --> 00:19:07,679
infrastructure model we see today so

466
00:19:07,679 --> 00:19:09,900
what you have like in in the good old

467
00:19:09,900 --> 00:19:12,360
days let's say like this um developers

468
00:19:12,360 --> 00:19:15,179
are allowed maybe to debug their codes

469
00:19:15,179 --> 00:19:18,539
on like Dev VMS and stuff like this and

470
00:19:18,539 --> 00:19:21,360
it is possible and I've seen it a lot um

471
00:19:21,360 --> 00:19:23,160
that companies for example allow their

472
00:19:23,160 --> 00:19:25,320
developers to get a dedicated note just

473
00:19:25,320 --> 00:19:27,179
for them and where they can do for

474
00:19:27,179 --> 00:19:28,679
example their stuff they can debug

475
00:19:28,679 --> 00:19:31,020
special Network purposes there and all

476
00:19:31,020 --> 00:19:33,840
of those things so the scenario is like

477
00:19:33,840 --> 00:19:36,299
we are like an developer

478
00:19:36,299 --> 00:19:39,960
who somehow gets access to the node and

479
00:19:39,960 --> 00:19:42,660
um yeah what we now can do is we can get

480
00:19:42,660 --> 00:19:44,400
ourselves every deployment that is

481
00:19:44,400 --> 00:19:45,960
deployed into the cluster like

482
00:19:45,960 --> 00:19:47,400
everything

483
00:19:47,400 --> 00:19:50,880
um and we can do it or we can just do it

484
00:19:50,880 --> 00:19:54,419
let's say when the deployment uses

485
00:19:54,419 --> 00:19:56,580
something special which I will show you

486
00:19:56,580 --> 00:19:58,620
so we're like in the scenario of

487
00:19:58,620 --> 00:20:01,620
stealing deployments from maybe other

488
00:20:01,620 --> 00:20:03,660
Dev teams

489
00:20:03,660 --> 00:20:06,480
we can do it changing note labels so the

490
00:20:06,480 --> 00:20:07,980
way kubernetes

491
00:20:07,980 --> 00:20:10,620
like schedules workloads is using node

492
00:20:10,620 --> 00:20:12,960
labels and node selectors so what you

493
00:20:12,960 --> 00:20:14,640
actually can do is you you label your

494
00:20:14,640 --> 00:20:16,740
node for example you have a kubernetes

495
00:20:16,740 --> 00:20:19,260
node there is let's say GPU

496
00:20:19,260 --> 00:20:21,299
um or it has a GPU in it and then you

497
00:20:21,299 --> 00:20:24,000
label GPU through your node let you know

498
00:20:24,000 --> 00:20:26,640
okay this node has a GPU and you can

499
00:20:26,640 --> 00:20:28,559
then tell your deployment

500
00:20:28,559 --> 00:20:31,740
um that requires a GPU to run only on

501
00:20:31,740 --> 00:20:34,080
that node using a node selector but we

502
00:20:34,080 --> 00:20:36,360
could also abuse this one if we like can

503
00:20:36,360 --> 00:20:38,880
set node labels so I can label my def

504
00:20:38,880 --> 00:20:42,660
node GPU true and with some let's say

505
00:20:42,660 --> 00:20:45,720
also luck or if I remove the label from

506
00:20:45,720 --> 00:20:48,539
another node I can get this deployment

507
00:20:48,539 --> 00:20:50,160
scheduled on my node and then I have

508
00:20:50,160 --> 00:20:53,640
like if I have access to to the node I

509
00:20:53,640 --> 00:20:55,919
can have also access to the Pod and then

510
00:20:55,919 --> 00:20:57,840
I can access the Pod and maybe have a

511
00:20:57,840 --> 00:20:59,160
look inside

512
00:20:59,160 --> 00:21:01,919
um yeah the deployment the other team

513
00:21:01,919 --> 00:21:04,740
actually builds

514
00:21:04,740 --> 00:21:07,919
so what we can do

515
00:21:07,919 --> 00:21:10,620
is we can label or I will do the demo at

516
00:21:10,620 --> 00:21:12,960
the end again we can do label our node

517
00:21:12,960 --> 00:21:15,840
with like Cube CTL label

518
00:21:15,840 --> 00:21:18,480
um yeah label the node with the node

519
00:21:18,480 --> 00:21:20,700
name key value pair

520
00:21:20,700 --> 00:21:23,400
and in the deployment it will look like

521
00:21:23,400 --> 00:21:25,700
this I talked about the node selectors

522
00:21:25,700 --> 00:21:28,980
and the node selector we are using now

523
00:21:28,980 --> 00:21:31,140
is like we are

524
00:21:31,140 --> 00:21:33,960
looking at the node selector I am

525
00:21:33,960 --> 00:21:36,960
currently using for my talk so the node

526
00:21:36,960 --> 00:21:39,299
selector I'm using is app slides to

527
00:21:39,299 --> 00:21:42,179
deploy slides on the I think it was the

528
00:21:42,179 --> 00:21:44,400
worker 2 node I didn't currently have

529
00:21:44,400 --> 00:21:47,760
its um but we'll look at the node

530
00:21:47,760 --> 00:21:49,860
selector app slides and we will abuse

531
00:21:49,860 --> 00:21:51,539
this one to like get the deployment

532
00:21:51,539 --> 00:21:55,700
scheduled on on the right node

533
00:21:56,400 --> 00:21:59,820
okay this is this complainer so

534
00:21:59,820 --> 00:22:02,940
let's head into that one

535
00:22:02,940 --> 00:22:05,340
I don't need the command controls over

536
00:22:05,340 --> 00:22:06,539
here

537
00:22:06,539 --> 00:22:09,179
so let me first show you

538
00:22:09,179 --> 00:22:13,140
the current labels that are set

539
00:22:13,140 --> 00:22:15,200
um

540
00:22:16,039 --> 00:22:18,360
there it is

541
00:22:18,360 --> 00:22:22,320
so we can see that the worker one has a

542
00:22:22,320 --> 00:22:24,720
label called app CDN for Content

543
00:22:24,720 --> 00:22:27,240
delivery Network and we can see that

544
00:22:27,240 --> 00:22:30,059
worker 2 has

545
00:22:30,059 --> 00:22:33,120
a label called app slides

546
00:22:33,120 --> 00:22:36,960
if I now has have access to let's say

547
00:22:36,960 --> 00:22:38,940
Node 1 and I'm simulating all to that

548
00:22:38,940 --> 00:22:40,940
one

549
00:22:40,940 --> 00:22:45,000
sshing on worker one

550
00:22:45,000 --> 00:22:47,220
so I now have access to that one giving

551
00:22:47,220 --> 00:22:49,620
me pseudo rights just that everything

552
00:22:49,620 --> 00:22:51,860
works out as planned

553
00:22:51,860 --> 00:22:54,240
what I normally find on the Node is

554
00:22:54,240 --> 00:22:56,159
credentials for the cubelet so everyone

555
00:22:56,159 --> 00:22:57,840
who has access to node has also access

556
00:22:57,840 --> 00:23:00,900
to the kubernetes API and what I then

557
00:23:00,900 --> 00:23:02,220
can do under

558
00:23:02,220 --> 00:23:04,740
Etc kubernetes on every node you will

559
00:23:04,740 --> 00:23:07,799
find cubelet cubelet conf and this Cupid

560
00:23:07,799 --> 00:23:09,840
conf you can use to talk to the API

561
00:23:09,840 --> 00:23:12,240
server so what I do is I do an export of

562
00:23:12,240 --> 00:23:13,679
my cubeconfig

563
00:23:13,679 --> 00:23:16,620
and set it to wait let me show you let

564
00:23:16,620 --> 00:23:18,960
me show you like this and set it to the

565
00:23:18,960 --> 00:23:21,780
cubelet conf so now that I have a valid

566
00:23:21,780 --> 00:23:24,000
um kubernetes config I can do like Cube

567
00:23:24,000 --> 00:23:26,520
CTL we get ports for example

568
00:23:26,520 --> 00:23:28,500
and

569
00:23:28,500 --> 00:23:32,100
or like this and I see every pods or I

570
00:23:32,100 --> 00:23:35,520
see every pods running in the cluster

571
00:23:35,520 --> 00:23:38,880
um now what we want to do uh also show

572
00:23:38,880 --> 00:23:43,320
the nodes oh chipctl Cube CDL get notes

573
00:23:43,320 --> 00:23:45,840
and show the labels

574
00:23:45,840 --> 00:23:49,340
oop typo there

575
00:23:49,860 --> 00:23:52,440
so I can also get the notes and I can

576
00:23:52,440 --> 00:23:55,440
now also label my notes so I do Cube CTL

577
00:23:55,440 --> 00:23:57,539
label oh

578
00:23:57,539 --> 00:24:01,620
I don't have the LDS here set Cube CTL

579
00:24:01,620 --> 00:24:06,299
CTL label nodes

580
00:24:06,299 --> 00:24:08,299
um worker one

581
00:24:08,299 --> 00:24:12,240
worker one with app

582
00:24:12,240 --> 00:24:15,080
slides

583
00:24:16,380 --> 00:24:17,520
so

584
00:24:17,520 --> 00:24:19,919
like this one and what I have to do

585
00:24:19,919 --> 00:24:22,320
because I can only set one yeah one

586
00:24:22,320 --> 00:24:24,600
label with the key app I have to

587
00:24:24,600 --> 00:24:26,580
overwrite my current label

588
00:24:26,580 --> 00:24:30,720
so let's do this dish overwrite

589
00:24:30,720 --> 00:24:33,059
and my notice labeled so now I can if I

590
00:24:33,059 --> 00:24:35,039
now do the cube CTL

591
00:24:35,039 --> 00:24:38,220
get notes show labels you will see both

592
00:24:38,220 --> 00:24:40,200
of the nodes now have the label slides

593
00:24:40,200 --> 00:24:42,840
and you guess where it's going

594
00:24:42,840 --> 00:24:43,919
um

595
00:24:43,919 --> 00:24:47,520
if I now for example let's simulate

596
00:24:47,520 --> 00:24:48,419
um

597
00:24:48,419 --> 00:24:52,620
that the slide deployment is restarted

598
00:24:52,620 --> 00:24:56,760
oops okay get parts

599
00:24:56,760 --> 00:24:59,100
yeah I'm in the right namespace so

600
00:24:59,100 --> 00:25:03,059
currently we will see there's a white

601
00:25:03,059 --> 00:25:05,700
you currently see that it's scheduled on

602
00:25:05,700 --> 00:25:07,440
worker 2.

603
00:25:07,440 --> 00:25:11,159
I can either now let's say restart uh

604
00:25:11,159 --> 00:25:13,980
this the slide port or

605
00:25:13,980 --> 00:25:14,940
um

606
00:25:14,940 --> 00:25:18,480
I will just scale this one for

607
00:25:18,480 --> 00:25:21,720
uh yeah just that that it works on the

608
00:25:21,720 --> 00:25:23,700
first time because I now have like a 50

609
00:25:23,700 --> 00:25:25,380
50 chance that the deployment is

610
00:25:25,380 --> 00:25:28,140
scheduled on the Node I control and if

611
00:25:28,140 --> 00:25:30,360
I'm not going to try it um yeah I just

612
00:25:30,360 --> 00:25:33,659
scale it uh that makes it a bit easier

613
00:25:33,659 --> 00:25:37,740
scale slides reply cars let's say five

614
00:25:37,740 --> 00:25:40,640
oh

615
00:25:42,659 --> 00:25:47,179
so and if I now do a get pods

616
00:25:48,840 --> 00:25:50,760
you see that there are also pods

617
00:25:50,760 --> 00:25:54,360
scheduled on work one these two and

618
00:25:54,360 --> 00:25:56,580
those two parts because I control the

619
00:25:56,580 --> 00:25:59,700
node I have literally full control over

620
00:25:59,700 --> 00:26:02,880
it so if I do here CTR Dash and

621
00:26:02,880 --> 00:26:07,799
kubernetes I O container list

622
00:26:07,799 --> 00:26:11,940
oh that's quite that's quite big

623
00:26:11,940 --> 00:26:15,059
let's do it a bit like this one

624
00:26:15,059 --> 00:26:16,799
um you can see for example over here

625
00:26:16,799 --> 00:26:19,679
that there are slides scheduled so yeah

626
00:26:19,679 --> 00:26:22,799
I can could now debug uh the containers

627
00:26:22,799 --> 00:26:24,240
that are scheduled on my note and I

628
00:26:24,240 --> 00:26:27,059
could have look at it and um yeah those

629
00:26:27,059 --> 00:26:28,440
attacks are

630
00:26:28,440 --> 00:26:31,440
normally like seen when you like have

631
00:26:31,440 --> 00:26:34,260
larger Dev teams that are developing not

632
00:26:34,260 --> 00:26:35,880
only one application for on one

633
00:26:35,880 --> 00:26:37,740
kubernetes but like developing together

634
00:26:37,740 --> 00:26:40,320
those steps if they have access to the

635
00:26:40,320 --> 00:26:41,880
node those could take over the

636
00:26:41,880 --> 00:26:43,679
deployment of the other team and that's

637
00:26:43,679 --> 00:26:45,480
something to consider if you're like

638
00:26:45,480 --> 00:26:46,620
yeah

639
00:26:46,620 --> 00:26:48,480
um developing

640
00:26:48,480 --> 00:26:52,500
some some application with the larger

641
00:26:52,500 --> 00:26:54,740
security

642
00:26:55,380 --> 00:26:59,760
so let's head into the next

643
00:26:59,760 --> 00:27:04,620
one or more how you can fix those

644
00:27:04,620 --> 00:27:05,880
we have an admission controller in

645
00:27:05,880 --> 00:27:08,520
kubernetes uh it's named node

646
00:27:08,520 --> 00:27:10,740
restriction and the node restriction

647
00:27:10,740 --> 00:27:14,100
Mission controller uses or lets you use

648
00:27:14,100 --> 00:27:16,640
specific labels of the form node

649
00:27:16,640 --> 00:27:18,840
restriction.kubernetes.io and no

650
00:27:18,840 --> 00:27:23,039
cubelets can modify this label

651
00:27:23,039 --> 00:27:25,740
um let's do a spontaneous demo I didn't

652
00:27:25,740 --> 00:27:28,799
plan to demo this one but uh

653
00:27:28,799 --> 00:27:31,140
let's do this

654
00:27:31,140 --> 00:27:33,240
no

655
00:27:33,240 --> 00:27:35,940
oh no didn't mention

656
00:27:35,940 --> 00:27:39,539
didn't mean to inspect

657
00:27:39,539 --> 00:27:40,200
um

658
00:27:40,200 --> 00:27:43,200
so if when I do a cube CTL label worker

659
00:27:43,200 --> 00:27:45,120
one

660
00:27:45,120 --> 00:27:48,539
using this label

661
00:27:48,539 --> 00:27:52,559
um app CDN

662
00:27:52,559 --> 00:27:55,520
CDN

663
00:27:57,600 --> 00:28:02,480
uh oh labeled up this label note

664
00:28:04,320 --> 00:28:06,720
if I'm going to label this one and let's

665
00:28:06,720 --> 00:28:08,880
have a look over here

666
00:28:08,880 --> 00:28:12,480
if I now do a cube CTL we get nodes they

667
00:28:12,480 --> 00:28:16,039
still show labels

668
00:28:16,679 --> 00:28:19,740
um you we should see that here is like

669
00:28:19,740 --> 00:28:22,559
the that the labels should be set over

670
00:28:22,559 --> 00:28:24,600
here I don't know ah here is a note

671
00:28:24,600 --> 00:28:27,360
restriction yeah kubernetes I O fcdn

672
00:28:27,360 --> 00:28:28,919
this admission controller is also

673
00:28:28,919 --> 00:28:32,039
enabled by default now if you deploy

674
00:28:32,039 --> 00:28:34,080
vanilla kubernetes so you don't have to

675
00:28:34,080 --> 00:28:36,720
like edit your Cube API and stuff like

676
00:28:36,720 --> 00:28:39,000
this so if I'm not going to do Cube CTL

677
00:28:39,000 --> 00:28:40,380
uh

678
00:28:40,380 --> 00:28:46,500
Cube CTL like label node worker one

679
00:28:46,500 --> 00:28:49,260
um I copy this

680
00:28:49,260 --> 00:28:52,260
label

681
00:28:52,440 --> 00:28:54,539
and let's hope it works because it's

682
00:28:54,539 --> 00:28:57,120
really spontaneous demo

683
00:28:57,120 --> 00:29:00,600
um slides yeah you see I cannot edit the

684
00:29:00,600 --> 00:29:02,760
label so the admission controller

685
00:29:02,760 --> 00:29:05,820
restricts the label editing thus I can

686
00:29:05,820 --> 00:29:07,980
yeah I can now safely deploy my

687
00:29:07,980 --> 00:29:10,140
application if I use the node

688
00:29:10,140 --> 00:29:12,600
restriction labels in my deployment

689
00:29:12,600 --> 00:29:14,279
um so you have kind of to adapt your

690
00:29:14,279 --> 00:29:15,659
deployment using the node restriction

691
00:29:15,659 --> 00:29:18,120
labels and that's like the key takeaway

692
00:29:18,120 --> 00:29:20,479
here

693
00:29:28,860 --> 00:29:30,360
it's forbidden it's not allowed to

694
00:29:30,360 --> 00:29:32,100
modify labels but uh

695
00:29:32,100 --> 00:29:34,760
good try

696
00:29:35,039 --> 00:29:37,320
um yeah you see it's forbidden so um

697
00:29:37,320 --> 00:29:40,020
yeah I cannot overwrite the label in

698
00:29:40,020 --> 00:29:41,340
this form

699
00:29:41,340 --> 00:29:44,580
um so it's not quite complex to use

700
00:29:44,580 --> 00:29:46,919
those labels but that can give you like

701
00:29:46,919 --> 00:29:50,279
good security if you use them

702
00:29:50,279 --> 00:29:53,220
yeah and now let's head into the last

703
00:29:53,220 --> 00:29:55,140
one and the last one is kind of a post

704
00:29:55,140 --> 00:29:57,899
application exploitation technique where

705
00:29:57,899 --> 00:30:00,419
we if we like successfully exploited

706
00:30:00,419 --> 00:30:02,760
code that runs in kubernetes like this

707
00:30:02,760 --> 00:30:05,940
talk and we have really deep access on

708
00:30:05,940 --> 00:30:08,399
the Node root access wouldn't it be a

709
00:30:08,399 --> 00:30:10,080
great thing to create like our Auto

710
00:30:10,080 --> 00:30:12,539
scaling malware within kubernetes out of

711
00:30:12,539 --> 00:30:14,940
scope for every application

712
00:30:14,940 --> 00:30:16,919
um out of scope for every

713
00:30:16,919 --> 00:30:18,899
yeah kubernetes security product out

714
00:30:18,899 --> 00:30:21,960
there I think it is so let's do it

715
00:30:21,960 --> 00:30:24,720
who here uh that also does kubernetes

716
00:30:24,720 --> 00:30:28,620
security is aware of pause containers

717
00:30:28,620 --> 00:30:31,320
oh you you know name that's great

718
00:30:31,320 --> 00:30:34,020
so let's build our Auto scaling malware

719
00:30:34,020 --> 00:30:36,059
in kubernetes

720
00:30:36,059 --> 00:30:37,620
and we are going to abuse post

721
00:30:37,620 --> 00:30:39,539
containers

722
00:30:39,539 --> 00:30:41,100
um what is the post container for those

723
00:30:41,100 --> 00:30:42,720
of you who have never heard it the pause

724
00:30:42,720 --> 00:30:44,520
container is like

725
00:30:44,520 --> 00:30:46,320
yeah it's it's

726
00:30:46,320 --> 00:30:48,600
a container that start is in every pot

727
00:30:48,600 --> 00:30:50,940
running in every pot under the radar of

728
00:30:50,940 --> 00:30:53,039
the kubernetes API

729
00:30:53,039 --> 00:30:54,360
um it for example holds the network

730
00:30:54,360 --> 00:30:56,100
namespace open in case the container

731
00:30:56,100 --> 00:30:58,200
restarts that if your container restarts

732
00:30:58,200 --> 00:30:59,760
it gets assigned the same IP address

733
00:30:59,760 --> 00:31:01,860
that's because the post container is

734
00:31:01,860 --> 00:31:03,600
there and it's also responsible for

735
00:31:03,600 --> 00:31:06,000
reaping zombie processes so yeah that

736
00:31:06,000 --> 00:31:07,380
there are no zombies running inside of

737
00:31:07,380 --> 00:31:09,539
your kubernetes cluster so let's abuse

738
00:31:09,539 --> 00:31:11,960
this one

739
00:31:12,360 --> 00:31:14,460
um this is like kind of little step to

740
00:31:14,460 --> 00:31:16,380
step guide how you can do it if you like

741
00:31:16,380 --> 00:31:18,419
it and the post exploitation phase and

742
00:31:18,419 --> 00:31:19,980
successfully exploit the kubernetes

743
00:31:19,980 --> 00:31:22,919
application and have a deep access on

744
00:31:22,919 --> 00:31:23,940
the Node

745
00:31:23,940 --> 00:31:26,640
so first of all oops determine uh which

746
00:31:26,640 --> 00:31:28,260
containers which container runtime is

747
00:31:28,260 --> 00:31:29,039
used

748
00:31:29,039 --> 00:31:30,179
so

749
00:31:30,179 --> 00:31:32,159
um yeah we just need to make sure that

750
00:31:32,159 --> 00:31:34,500
we know which runtime is used in our

751
00:31:34,500 --> 00:31:37,740
case it's a container D running you can

752
00:31:37,740 --> 00:31:39,720
have a look at it for example

753
00:31:39,720 --> 00:31:41,520
if you

754
00:31:41,520 --> 00:31:45,600
new seconds if we do like Cube CTL get

755
00:31:45,600 --> 00:31:50,100
notes Dash or white oh that

756
00:31:50,100 --> 00:31:53,220
yeah they there you see uh that we are

757
00:31:53,220 --> 00:31:54,659
currently using container DS container

758
00:31:54,659 --> 00:31:55,679
runtime

759
00:31:55,679 --> 00:31:58,380
um or you just can go and have a look on

760
00:31:58,380 --> 00:32:01,260
the Node itself and um

761
00:32:01,260 --> 00:32:03,779
yeah you see from the tools or from the

762
00:32:03,779 --> 00:32:05,340
directories created which can or from

763
00:32:05,340 --> 00:32:07,679
the processes which container runtime is

764
00:32:07,679 --> 00:32:08,399
used

765
00:32:08,399 --> 00:32:10,860
second step is find out how this

766
00:32:10,860 --> 00:32:12,419
container runtime is the sandbox or

767
00:32:12,419 --> 00:32:14,100
pause containers it's a little bit

768
00:32:14,100 --> 00:32:15,779
different from runtime to runtime for

769
00:32:15,779 --> 00:32:17,700
container D it's like we are just

770
00:32:17,700 --> 00:32:18,840
setting

771
00:32:18,840 --> 00:32:22,260
um one parameter for a cryo as an

772
00:32:22,260 --> 00:32:25,200
example you have to set not only one I

773
00:32:25,200 --> 00:32:27,419
think there are three parameters to set

774
00:32:27,419 --> 00:32:29,340
but you can read about it in the

775
00:32:29,340 --> 00:32:32,039
documentation of the container runtime

776
00:32:32,039 --> 00:32:33,960
um the third step is you know let's

777
00:32:33,960 --> 00:32:35,760
build our own post container we have to

778
00:32:35,760 --> 00:32:37,620
fulfill some requirements

779
00:32:37,620 --> 00:32:39,240
um but we also could use like the

780
00:32:39,240 --> 00:32:43,020
official pause.c file and then put our

781
00:32:43,020 --> 00:32:44,640
little put a little like shell command

782
00:32:44,640 --> 00:32:46,500
on front of it you will see it later

783
00:32:46,500 --> 00:32:48,360
because I actually built my own post

784
00:32:48,360 --> 00:32:49,500
container

785
00:32:49,500 --> 00:32:52,860
and we what we should also do is either

786
00:32:52,860 --> 00:32:54,840
place the pulse container image on the

787
00:32:54,840 --> 00:32:56,820
nodes or put it in like a publicly

788
00:32:56,820 --> 00:32:58,980
accessed registry with that doesn't

789
00:32:58,980 --> 00:33:01,260
require Authentication

790
00:33:01,260 --> 00:33:02,940
and the fifth thing is reload the

791
00:33:02,940 --> 00:33:04,380
container runtime to use the newly

792
00:33:04,380 --> 00:33:06,120
created pulse container

793
00:33:06,120 --> 00:33:10,760
so let's demo also this one

794
00:33:10,860 --> 00:33:15,360
um so I have here root access on the

795
00:33:15,360 --> 00:33:16,740
worker node

796
00:33:16,740 --> 00:33:19,559
and I said we have the containerdy

797
00:33:19,559 --> 00:33:22,620
runtime so in ETC container D you will

798
00:33:22,620 --> 00:33:24,659
find config files

799
00:33:24,659 --> 00:33:27,299
I can do it a bit better I hope you can

800
00:33:27,299 --> 00:33:28,880
you can all see it

801
00:33:28,880 --> 00:33:30,899
and let's have a look at the current

802
00:33:30,899 --> 00:33:34,019
config tunnel this is a config I set

803
00:33:34,019 --> 00:33:36,360
normally there is no config terminal but

804
00:33:36,360 --> 00:33:38,100
this is also the default pause image for

805
00:33:38,100 --> 00:33:41,279
kubernetes is called it's kfs GCR i o

806
00:33:41,279 --> 00:33:45,120
and if we do like the CTR listing we can

807
00:33:45,120 --> 00:33:46,919
also see that there are pulse containers

808
00:33:46,919 --> 00:33:49,919
running and they're running several of

809
00:33:49,919 --> 00:33:53,279
them so it's running in like every pod

810
00:33:53,279 --> 00:33:57,980
and now I built my own pulse container

811
00:34:00,059 --> 00:34:03,299
yeah it's uh this image so I just copy

812
00:34:03,299 --> 00:34:05,580
it over

813
00:34:05,580 --> 00:34:09,918
it's almost back to conflict tomorrow

814
00:34:11,099 --> 00:34:13,440
let's have a short look at it there's

815
00:34:13,440 --> 00:34:15,899
running my post container

816
00:34:15,899 --> 00:34:17,879
um what does my pause container do I

817
00:34:17,879 --> 00:34:21,139
also show you that one

818
00:34:25,800 --> 00:34:29,639
so it is I will give you I will give you

819
00:34:29,639 --> 00:34:32,599
the docker file

820
00:34:34,679 --> 00:34:36,599
um it's just like a standard Ubuntu

821
00:34:36,599 --> 00:34:39,119
image I copy the officialpost.c from the

822
00:34:39,119 --> 00:34:42,000
kubernetes repo over in this container

823
00:34:42,000 --> 00:34:44,639
and my command is I just curl my demo

824
00:34:44,639 --> 00:34:47,040
server here to like show you that it

825
00:34:47,040 --> 00:34:48,839
works and that you can create your own

826
00:34:48,839 --> 00:34:51,719
like malicious requests out of scope for

827
00:34:51,719 --> 00:34:53,879
kubernetes and then I run the pause

828
00:34:53,879 --> 00:34:57,060
binary so it's like just to show you or

829
00:34:57,060 --> 00:35:00,500
just to give you like a little demo

830
00:35:00,960 --> 00:35:02,460
um

831
00:35:02,460 --> 00:35:06,420
yeah so let's we have copied the

832
00:35:06,420 --> 00:35:09,980
contract over we just restart

833
00:35:10,200 --> 00:35:13,640
the Run container runtime

834
00:35:15,060 --> 00:35:19,700
and now if we create a new port

835
00:35:21,780 --> 00:35:24,540
um I call let's call this deployment law

836
00:35:24,540 --> 00:35:25,980
um yeah

837
00:35:25,980 --> 00:35:27,960
it's just a demo so I think it's fine

838
00:35:27,960 --> 00:35:30,240
let's create a new deployment

839
00:35:30,240 --> 00:35:32,160
oh wait before I actually create a

840
00:35:32,160 --> 00:35:33,240
deployment

841
00:35:33,240 --> 00:35:36,839
um let me head over to my command and

842
00:35:36,839 --> 00:35:39,060
control server

843
00:35:39,060 --> 00:35:39,839
um

844
00:35:39,839 --> 00:35:42,839
because actually we can see those

845
00:35:42,839 --> 00:35:45,560
requests

846
00:35:47,220 --> 00:35:51,720
so also nginx is like logging those

847
00:35:51,720 --> 00:35:55,980
um well log nginx

848
00:35:55,980 --> 00:35:58,579
nah

849
00:35:59,099 --> 00:36:02,660
so and let's do tail

850
00:36:03,240 --> 00:36:06,839
Dash F on the axis lock oh no not till

851
00:36:06,839 --> 00:36:09,680
tail please

852
00:36:11,099 --> 00:36:12,240
so

853
00:36:12,240 --> 00:36:15,359
we are now seeing the access log

854
00:36:15,359 --> 00:36:17,520
and if I'm going to create a deployment

855
00:36:17,520 --> 00:36:20,520
the deployment must be or in order to

856
00:36:20,520 --> 00:36:21,900
get it worked the deployment must be

857
00:36:21,900 --> 00:36:24,660
scheduled on the right node yeah so if

858
00:36:24,660 --> 00:36:25,800
I'm not going to create a deployment

859
00:36:25,800 --> 00:36:28,800
maybe we have luck no we don't

860
00:36:28,800 --> 00:36:32,280
if we like to get parts

861
00:36:32,280 --> 00:36:36,900
oh not a white only get pods

862
00:36:36,900 --> 00:36:39,720
we see that the load container is

863
00:36:39,720 --> 00:36:41,700
created

864
00:36:41,700 --> 00:36:43,320
um but let's scale those deployment and

865
00:36:43,320 --> 00:36:45,540
get some containers scheduled on our on

866
00:36:45,540 --> 00:36:48,359
our node like scale

867
00:36:48,359 --> 00:36:51,359
deploy

868
00:36:56,400 --> 00:37:01,099
and let's do like 25 replicas

869
00:37:01,500 --> 00:37:03,300
and we'll bet a bit and there's coming

870
00:37:03,300 --> 00:37:06,300
the requests so what we are now seeing

871
00:37:06,300 --> 00:37:08,460
is that the pause container actually

872
00:37:08,460 --> 00:37:12,960
curls my server reaches out to it and if

873
00:37:12,960 --> 00:37:14,520
we have a look at the normal kubernetes

874
00:37:14,520 --> 00:37:17,240
environments

875
00:37:17,400 --> 00:37:19,579
foreign

876
00:37:22,400 --> 00:37:24,720
everything is running everything is up

877
00:37:24,720 --> 00:37:27,119
everything works as expected

878
00:37:27,119 --> 00:37:29,460
um you won't even notice it if you like

879
00:37:29,460 --> 00:37:31,579
scanning it with your like commercial

880
00:37:31,579 --> 00:37:34,320
container scanning tool because it's a

881
00:37:34,320 --> 00:37:35,820
runtime

882
00:37:35,820 --> 00:37:39,720
feature so it doesn't even or or not not

883
00:37:39,720 --> 00:37:42,000
the kubernetes API itself like gives the

884
00:37:42,000 --> 00:37:43,920
request to pull the image it's the

885
00:37:43,920 --> 00:37:46,800
container runtime so it's out of scope

886
00:37:46,800 --> 00:37:48,660
for the commercial scanner you deploy it

887
00:37:48,660 --> 00:37:51,180
in your kubernetes cluster and I can run

888
00:37:51,180 --> 00:37:52,800
like literally a malicious image that

889
00:37:52,800 --> 00:37:54,780
isn't scanned in every port and outer

890
00:37:54,780 --> 00:37:55,800
scales

891
00:37:55,800 --> 00:37:57,839
uh it's a great thing I guess for me as

892
00:37:57,839 --> 00:38:00,180
an attacker

893
00:38:00,180 --> 00:38:03,420
so yeah the call requests

894
00:38:03,420 --> 00:38:07,680
and let's see what the best things about

895
00:38:07,680 --> 00:38:09,119
those are

896
00:38:09,119 --> 00:38:12,180
yeah in every new instance or pod

897
00:38:12,180 --> 00:38:14,160
created depends on if I could for

898
00:38:14,160 --> 00:38:16,680
example set my config.tominal on like a

899
00:38:16,680 --> 00:38:19,079
scaling template for kubernetes for a VM

900
00:38:19,079 --> 00:38:22,680
scaling template every new created node

901
00:38:22,680 --> 00:38:25,820
has my pulse container on it so I can

902
00:38:25,820 --> 00:38:28,859
infect more and more and more nodes

903
00:38:28,859 --> 00:38:30,960
every new instance or every new pod

904
00:38:30,960 --> 00:38:34,200
created on the Node is yeah I can abuse

905
00:38:34,200 --> 00:38:37,440
to do my malicious uh malicious code

906
00:38:37,440 --> 00:38:39,780
execution it is out of scope for every

907
00:38:39,780 --> 00:38:41,339
common kubernetes security tooling

908
00:38:41,339 --> 00:38:43,560
included as I said your commercial or

909
00:38:43,560 --> 00:38:46,140
paid tooling you're using the kubernetes

910
00:38:46,140 --> 00:38:49,140
cluster behaves normal you won't see any

911
00:38:49,140 --> 00:38:51,839
any difference you won't even like

912
00:38:51,839 --> 00:38:55,380
notice that think things changes are

913
00:38:55,380 --> 00:38:57,839
changing there and it persists over

914
00:38:57,839 --> 00:39:00,060
reboot and over update in your whole

915
00:39:00,060 --> 00:39:02,940
kubernetes cluster so it's a very evil

916
00:39:02,940 --> 00:39:06,240
thing to identify it's very actually

917
00:39:06,240 --> 00:39:09,599
very very horrible to do this

918
00:39:09,599 --> 00:39:12,960
yeah and um what I can do from this for

919
00:39:12,960 --> 00:39:14,640
example if we come back to like

920
00:39:14,640 --> 00:39:16,680
attacking the torque infrastructure

921
00:39:16,680 --> 00:39:19,560
itself if I should have done it or if if

922
00:39:19,560 --> 00:39:22,140
I if I had done it before I actually

923
00:39:22,140 --> 00:39:25,500
deployed my yeah my real talk

924
00:39:25,500 --> 00:39:28,320
environment I would have an in container

925
00:39:28,320 --> 00:39:31,440
in every pot and in every like let's say

926
00:39:31,440 --> 00:39:33,540
also namespace yeah

927
00:39:33,540 --> 00:39:35,280
um not the namespacing kubernetes but

928
00:39:35,280 --> 00:39:37,079
the namespace that container D uses so

929
00:39:37,079 --> 00:39:39,839
Linux namespaces I had the pods in every

930
00:39:39,839 --> 00:39:41,880
Linux namespace where I can like reach

931
00:39:41,880 --> 00:39:44,579
out to the official workload pod and do

932
00:39:44,579 --> 00:39:48,480
stuff there so it's very great that you

933
00:39:48,480 --> 00:39:51,119
can actually do stuff with this

934
00:39:51,119 --> 00:39:54,960
yeah the next one is um over the years I

935
00:39:54,960 --> 00:39:57,859
stumbled over several different security

936
00:39:57,859 --> 00:40:01,200
uh kubernetes security related topics

937
00:40:01,200 --> 00:40:04,740
and we always for example when I worked

938
00:40:04,740 --> 00:40:07,260
at the customer and or somewhere else we

939
00:40:07,260 --> 00:40:09,000
always had like some issues to do like

940
00:40:09,000 --> 00:40:11,040
thread based analysis for kubernetes at

941
00:40:11,040 --> 00:40:12,900
a larger scale for like really big

942
00:40:12,900 --> 00:40:14,820
clusters with hundreds and thousands of

943
00:40:14,820 --> 00:40:16,430
notes and stuff like this

944
00:40:16,430 --> 00:40:16,740
[Music]

945
00:40:16,740 --> 00:40:17,820
um

946
00:40:17,820 --> 00:40:21,599
so over the time I like collected all of

947
00:40:21,599 --> 00:40:23,460
those threats in kubernetes I've seen

948
00:40:23,460 --> 00:40:26,400
and I kind of Built My Own my tree

949
00:40:26,400 --> 00:40:28,859
attack metrics for it

950
00:40:28,859 --> 00:40:30,599
um and this is also the stuff that is

951
00:40:30,599 --> 00:40:32,700
going to be released with the talk

952
00:40:32,700 --> 00:40:35,160
um together with an open source

953
00:40:35,160 --> 00:40:36,839
kubernetes security blog hosted on

954
00:40:36,839 --> 00:40:39,359
kubernetes security de and kubernetes

955
00:40:39,359 --> 00:40:42,000
security i o those are both domains um

956
00:40:42,000 --> 00:40:45,660
yeah we will be using to get you folks

957
00:40:45,660 --> 00:40:47,460
informed about kubernetes security and

958
00:40:47,460 --> 00:40:48,660
what's going on

959
00:40:48,660 --> 00:40:50,940
so this is what it looks like

960
00:40:50,940 --> 00:40:54,720
um it's a big metrics and I'm extremely

961
00:40:54,720 --> 00:40:56,700
sure that there's

962
00:40:56,700 --> 00:41:00,780
still stuff missing so if you actually

963
00:41:00,780 --> 00:41:03,960
have some more attack vectors that you

964
00:41:03,960 --> 00:41:07,140
would like to see or would like to share

965
00:41:07,140 --> 00:41:09,480
with me I would like to put it in there

966
00:41:09,480 --> 00:41:10,680
because

967
00:41:10,680 --> 00:41:13,800
also from my perspective kubernetes is

968
00:41:13,800 --> 00:41:17,220
such a big it's such a big ecosystem and

969
00:41:17,220 --> 00:41:19,500
getting the overview about every

970
00:41:19,500 --> 00:41:21,660
potential yeah let's say vulnerability

971
00:41:21,660 --> 00:41:23,520
we have in there is

972
00:41:23,520 --> 00:41:25,859
it's totally crazy so please reach out

973
00:41:25,859 --> 00:41:28,380
to me if you like have other newer

974
00:41:28,380 --> 00:41:30,780
different attack vectors or think that

975
00:41:30,780 --> 00:41:32,460
there's something missing please reach

976
00:41:32,460 --> 00:41:34,140
out to me I will definitely put it in

977
00:41:34,140 --> 00:41:37,320
and it's it's the metric is also to be

978
00:41:37,320 --> 00:41:40,500
submitted to to the micro team

979
00:41:40,500 --> 00:41:42,119
um yeah because

980
00:41:42,119 --> 00:41:45,000
um I think what we should do more is

981
00:41:45,000 --> 00:41:46,800
like threat based kubernetes analysis

982
00:41:46,800 --> 00:41:50,040
analysis to not only get the application

983
00:41:50,040 --> 00:41:53,099
security layer right like securing your

984
00:41:53,099 --> 00:41:54,839
web front end and stuff like this but

985
00:41:54,839 --> 00:41:57,000
with kubernetes we also we're also

986
00:41:57,000 --> 00:41:59,520
introducing platform security so if your

987
00:41:59,520 --> 00:42:01,800
application is hacked then your platform

988
00:42:01,800 --> 00:42:03,660
is going to be under attack but if your

989
00:42:03,660 --> 00:42:05,339
kubernetes platform is attacked then

990
00:42:05,339 --> 00:42:06,660
your application is going to be under

991
00:42:06,660 --> 00:42:08,760
attack so we kind of have to rethink

992
00:42:08,760 --> 00:42:11,400
what we are doing we need to like secure

993
00:42:11,400 --> 00:42:13,980
both layers not only the application but

994
00:42:13,980 --> 00:42:17,460
also please the platform itself

995
00:42:17,460 --> 00:42:20,760
yeah that was hack my talk um the whole

996
00:42:20,760 --> 00:42:22,500
talk is going to be open sourced you

997
00:42:22,500 --> 00:42:24,420
will find so everything on GitHub in

998
00:42:24,420 --> 00:42:28,380
this repo currently I didn't

999
00:42:28,380 --> 00:42:31,079
um yeah like finished it in time to like

1000
00:42:31,079 --> 00:42:32,820
publish everything there so it's still

1001
00:42:32,820 --> 00:42:34,980
an empty repo but I will do upload

1002
00:42:34,980 --> 00:42:37,619
everything there once I've get the

1003
00:42:37,619 --> 00:42:38,880
materials together

1004
00:42:38,880 --> 00:42:41,160
and also if you want to like to like

1005
00:42:41,160 --> 00:42:43,560
re-watch the talk you can actually do it

1006
00:42:43,560 --> 00:42:45,060
the talk is running in kubernetes and

1007
00:42:45,060 --> 00:42:46,640
what's the whole time publicly available

1008
00:42:46,640 --> 00:42:49,560
you can have a look at it at yeah the

1009
00:42:49,560 --> 00:42:51,420
domain you're currently seeing there it

1010
00:42:51,420 --> 00:42:54,540
is exposed in the internet and you can

1011
00:42:54,540 --> 00:42:56,400
like look at it all the time for the

1012
00:42:56,400 --> 00:42:57,900
whole Troopers conference it will be up

1013
00:42:57,900 --> 00:42:59,819
so

1014
00:42:59,819 --> 00:43:02,880
that being said please stay safe not

1015
00:43:02,880 --> 00:43:04,980
only in your kubernetes and application

1016
00:43:04,980 --> 00:43:07,800
environments but also in terms of like

1017
00:43:07,800 --> 00:43:11,170
Corona thank you

1018
00:43:11,170 --> 00:43:17,979
[Applause]

