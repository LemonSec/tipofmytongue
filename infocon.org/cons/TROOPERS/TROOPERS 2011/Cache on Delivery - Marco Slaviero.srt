1
00:00:00,040 --> 00:00:04,120
I'm I would like to introduce um Mike
Stobbe roses from since post:

2
00:00:04,120 --> 00:00:07,509
salsa African company did was computer
security

3
00:00:07,509 --> 00:00:11,889
and almost very well known for a lot of
two routes a published

4
00:00:11,889 --> 00:00:15,830
um two routes some people that are
already noticed

5
00:00:15,830 --> 00:00:18,910
from in the audience use our

6
00:00:18,910 --> 00:00:22,699
have used and mock we talked about

7
00:00:22,699 --> 00:00:27,060
men cash ants applications that are
using them cash

8
00:00:27,060 --> 00:00:31,019
what you can get out of the stuff and I
think it's a very very interesting an

9
00:00:31,019 --> 00:00:32,070
extra topic

10
00:00:32,070 --> 00:00:35,510
I'm its especially um because

11
00:00:35,510 --> 00:00:38,510
this kind of concepts are very very
common

12
00:00:38,510 --> 00:00:41,969
Swiss facing systems okay so Michael

13
00:00:41,969 --> 00:00:45,300
let's of thank you very much up

14
00:00:45,300 --> 00:00:49,320
so before I actually get started I just
want to touch and one thing that

15
00:00:49,320 --> 00:00:52,829
and mention in his keynote I'm in this
that

16
00:00:52,829 --> 00:00:56,340
notional comoda I'm so if you subscribe
to daily Dave

17
00:00:56,340 --> 00:00:59,859
you would have seen then is male I think
two days ago

18
00:00:59,859 --> 00:01:03,640
basically what he points out with Comodo
is the fix

19
00:01:03,640 --> 00:01:07,090
is not to use a revocation lists or

20
00:01:07,090 --> 00:01:10,680
OCSP the fix that we've been told is
appropriate

21
00:01:10,680 --> 00:01:14,119
is to hard code serial numbers at the
bat certificates

22
00:01:14,119 --> 00:01:17,580
inside the brosser consider that

23
00:01:17,580 --> 00:01:21,610
it means that CR Els Asus p is
completely

24
00:01:21,610 --> 00:01:25,909
it's not relied upon by the brosser
manufactures just leave you with that

25
00:01:25,909 --> 00:01:30,259
in terms of broken internet but onto my
talk which is

26
00:01:30,259 --> 00:01:33,810
the single cash on delivery a.m. want to
thank

27
00:01:33,810 --> 00:01:36,820
your NW for inviting me over to

28
00:01:36,820 --> 00:01:39,829
present this this came out some work
that we did lost her

29
00:01:39,829 --> 00:01:43,740
and was presented in preliminary form it
back at

30
00:01:43,740 --> 00:01:47,030
I'm and then worked a little more on it
I'm from South Africa

31
00:01:47,030 --> 00:01:51,939
to put it in context we're known for
anything it seems at this point

32
00:01:51,939 --> 00:01:55,810
overzealous at large droning instrument
that

33
00:01:55,810 --> 00:02:00,259
you would have heard at the World Cup
contrary to popular belief

34
00:02:00,259 --> 00:02:03,780
not cultural instrument its
ten-years-old

35
00:02:03,780 --> 00:02:07,600
next important but there are a lot of
fun to play

36
00:02:07,600 --> 00:02:11,270
if you're inside the stadium with 80,000
people's

37
00:02:11,270 --> 00:02:16,040
air so um all I guess it's a little bit
a background

38
00:02:16,040 --> 00:02:19,190
Mike already mentioned from sense post
says post

39
00:02:19,190 --> 00:02:24,050
has been doing security stuff for quite
a while mostly we focus on penetration

40
00:02:24,050 --> 00:02:24,730
testing

41
00:02:24,730 --> 00:02:29,879
application testing as well but we've
been around for a bit

42
00:02:29,879 --> 00:02:32,950
and you know occasionally get

43
00:02:32,950 --> 00:02:37,930
by cities conference so lost yet to put
this into context

44
00:02:37,930 --> 00:02:41,849
this particular talking to context a
election 2009

45
00:02:41,849 --> 00:02:45,519
sorry time flies we did a talk called
covering the cloud

46
00:02:45,519 --> 00:02:49,250
would specifically looks at cloud
systems

47
00:02:49,250 --> 00:02:53,060
and how we could find relatively basic

48
00:02:53,060 --> 00:02:59,000
on abilities in them but vulnerabilities
that goddess quite far and

49
00:02:59,000 --> 00:03:02,610
specifically we looked at Amazon we
looked at Apple

50
00:03:02,610 --> 00:03:05,849
we looked at sales force but calm

51
00:03:05,849 --> 00:03:08,950
and we found what we thought were some

52
00:03:08,950 --> 00:03:12,830
quite interesting really architectural
flaws

53
00:03:12,830 --> 00:03:16,300
process flows rather than technical
vulnerabilities

54
00:03:16,300 --> 00:03:19,590
and in a similar line and

55
00:03:19,590 --> 00:03:23,500
and it touches on again what and I was
sent in his keynote is that

56
00:03:23,500 --> 00:03:28,370
we are dealing with a lot of change in
the way that we trust systems

57
00:03:28,370 --> 00:03:32,760
essentially were offloading trust we
have to trust the system

58
00:03:32,760 --> 00:03:36,519
we don't necessarily understand and so
with a club in the closet talk we looked

59
00:03:36,519 --> 00:03:38,030
specifically at the front end

60
00:03:38,030 --> 00:03:41,209
so what it means when you use Amazon

61
00:03:41,209 --> 00:03:44,250
as a user mobile me in Salesforce and so
on

62
00:03:44,250 --> 00:03:47,299
and so what we then decided was to look

63
00:03:47,299 --> 00:03:51,530
behind the curtain to see well these
guys rely on software as well

64
00:03:51,530 --> 00:03:54,620
there just users of Software in some
cases

65
00:03:54,620 --> 00:03:57,860
genders of software and it made sense to
see

66
00:03:57,860 --> 00:04:02,280
you know what what are their system
looking like as Anna said ask them the

67
00:04:02,280 --> 00:04:02,939
question

68
00:04:02,939 --> 00:04:06,430
about the systems that the use I think
it was

69
00:04:06,430 --> 00:04:10,330
there's a wanna the US presidents which
one mention names

70
00:04:10,330 --> 00:04:13,470
he had this phrase would said trust

71
00:04:13,470 --> 00:04:16,680
but verify so you can trust someone

72
00:04:16,680 --> 00:04:20,150
which can arrange for someone as far as
you can ask questions about

73
00:04:20,150 --> 00:04:23,400
that controls in place and so this year
we're going to look behind

74
00:04:23,400 --> 00:04:27,470
aka now this is the point that I'm gonna
well as a couple changes that we see in

75
00:04:27,470 --> 00:04:29,570
a single cloud in montana define cloud

76
00:04:29,570 --> 00:04:36,460
it's pretty fuzzy as it is recent
pictures some not gonna get into

77
00:04:36,460 --> 00:04:37,949
discussion of what it actually means

78
00:04:37,949 --> 00:04:41,120
but I think the things that interest me

79
00:04:41,120 --> 00:04:46,270
when looking at cloud systems that they
generally involve massive datasets

80
00:04:46,270 --> 00:04:49,310
or large user populations

81
00:04:49,310 --> 00:04:54,100
not always but the really interesting
application certainly do

82
00:04:54,100 --> 00:04:57,729
and that gets interesting specifically
for memcached E

83
00:04:57,729 --> 00:05:00,970
there's also when it comes to offloading
of the services

84
00:05:00,970 --> 00:05:05,880
a laurin the barrier to entry they
become less complex to use

85
00:05:05,880 --> 00:05:09,180
and we see that not just with cloud
systems obviously that

86
00:05:09,180 --> 00:05:12,590
security sorry that computer systems
over time they

87
00:05:12,590 --> 00:05:16,030
generally become less complex to use but
what it means is that as they become

88
00:05:16,030 --> 00:05:18,050
less complex issues

89
00:05:18,050 --> 00:05:21,050
you have a great influx of people who
are using them in those people

90
00:05:21,050 --> 00:05:25,009
all have less and less fewer and fewer
skills so we sip

91
00:05:25,009 --> 00:05:28,120
miss lowered barrier

92
00:05:28,120 --> 00:05:31,729
and what comes out of that is

93
00:05:31,729 --> 00:05:35,990
people are less reliant on experts
people who know what they're doing

94
00:05:35,990 --> 00:05:39,449
and it also means specifically when it
comes to

95
00:05:39,449 --> 00:05:42,970
developing applications on say you see
two

96
00:05:42,970 --> 00:05:46,160
you see things like developers
moonlighting

97
00:05:46,160 --> 00:05:50,160
as admits develop lighting is
operational people

98
00:05:50,160 --> 00:05:54,030
because it easy they can log into a
website click run this image

99
00:05:54,030 --> 00:05:57,319
and I've got full LAMP stack macon

100
00:05:57,319 --> 00:06:00,770
start dating and also manage it and it's
great because you save on

101
00:06:00,770 --> 00:06:04,310
the cost of a network administrator

102
00:06:04,310 --> 00:06:07,460
I'm gonna come back in touch in this
right at the end but I think this is

103
00:06:07,460 --> 00:06:08,850
pretty fundamental

104
00:06:08,850 --> 00:06:12,500
ship I think it's can be quite a
dangerous

105
00:06:12,500 --> 00:06:18,139
so lookin at the scalable systems that
were interested in

106
00:06:18,139 --> 00:06:22,180
you know this is kinda like a against
broadbrick backgrounds slide that

107
00:06:22,180 --> 00:06:26,350
stop brought focus in but when it comes
to the scalable systems the idea

108
00:06:26,350 --> 00:06:29,419
is always to make a cheap to scale

109
00:06:29,419 --> 00:06:33,370
so you don't want to be reliant on
really expensive hardware

110
00:06:33,370 --> 00:06:37,490
really expensive architectures you want
to be able to multiply

111
00:06:37,490 --> 00:06:41,350
they're usually when you skills the
scalpers on keys and cheap hardware

112
00:06:41,350 --> 00:06:44,669
commodity hardware and for your close to
free

113
00:06:44,669 --> 00:06:48,440
software and that allows you to
distribute

114
00:06:48,440 --> 00:06:51,580
your process in amongst love these notes
miniature

115
00:06:51,580 --> 00:06:56,220
know what that means is that it becomes
a really a network-centric

116
00:06:56,220 --> 00:06:59,310
architect at the networks very important
but not the network

117
00:06:59,310 --> 00:07:02,840
you don't get the benefits of the scaly

118
00:07:02,840 --> 00:07:07,430
you don't get these massive systems

119
00:07:07,430 --> 00:07:11,590
and when it becomes this reliant on on
the network what we tend to find

120
00:07:11,590 --> 00:07:14,620
is homogeneity within the systems in the
net

121
00:07:14,620 --> 00:07:18,039
so all look the same it's easier to
manage when everything

122
00:07:18,039 --> 00:07:22,139
looks the same to the scale one system
many times you don't have five different

123
00:07:22,139 --> 00:07:25,789
systems that you're a liar of five
different versions of

124
00:07:25,789 --> 00:07:31,199
PC software one piece of good across a
lien notes

125
00:07:31,199 --> 00:07:35,110
and so which we kinda get into when it
comes to

126
00:07:35,110 --> 00:07:39,889
these very large systems eventually bump
into the need for cash

127
00:07:39,889 --> 00:07:43,069
and exodus the same is just demonstrates

128
00:07:43,069 --> 00:07:47,090
what happens when you can only serve one
requested the time

129
00:07:47,090 --> 00:07:50,889
things kinda backup at so serving
requests

130
00:07:50,889 --> 00:07:54,030
and scalable systems become thread a
really important

131
00:07:54,030 --> 00:07:58,270
and you need to be able to serve those
requests as fast as possible

132
00:07:58,270 --> 00:08:01,479
and in many a most systems

133
00:08:01,479 --> 00:08:05,310
I guess it to kinda truism but Cisco
media

134
00:08:05,310 --> 00:08:08,740
what you'll find is that data tends to
remain constant

135
00:08:08,740 --> 00:08:12,009
so the number of times update is written
to use far lower than

136
00:08:12,009 --> 00:08:15,530
the number of times it's red that that
model is

137
00:08:15,530 --> 00:08:19,539
not universally true but it's true for
from any kind web sites that

138
00:08:19,539 --> 00:08:23,300
a large in scale and you can pick your
examples there so

139
00:08:23,300 --> 00:08:27,740
your average Wikipedia page is going to
be bras me more time since written to

140
00:08:27,740 --> 00:08:32,289
if your Facebook profile is written to
more often than its red

141
00:08:32,289 --> 00:08:35,519
you probably need to get a few more
friends be mine

142
00:08:35,519 --> 00:08:40,610
professional opinion a.m. YouTube
YouTube video links

143
00:08:40,610 --> 00:08:44,490
adds up as well and so

144
00:08:44,490 --> 00:08:48,279
bit you to these pages is written a few
times but read

145
00:08:48,279 --> 00:08:52,010
hopefully many times up but in any
system

146
00:08:52,010 --> 00:08:56,440
generating the page is quite can be
quite an expensive process especially if

147
00:08:56,440 --> 00:09:00,510
this database interaction involved as
multiple systems we have to pull in

148
00:09:00,510 --> 00:09:03,670
adverts his computer user preferences

149
00:09:03,670 --> 00:09:07,330
decide what's gonna be shown on this
page based on

150
00:09:07,330 --> 00:09:12,600
on the user's profile and so they could
even be multiple database queries

151
00:09:12,600 --> 00:09:17,019
that any given pages reliant on but if
the contents of that page are not

152
00:09:17,019 --> 00:09:17,940
changing

153
00:09:17,940 --> 00:09:21,510
then every time you make a database
query it's a little bit wasted

154
00:09:21,510 --> 00:09:25,209
and so ideally want to cash that and so
store it

155
00:09:25,209 --> 00:09:29,130
in a in a way that is faster than having
to go to the database

156
00:09:29,130 --> 00:09:34,649
directly in have Pausa figure out a
simple statement and actually

157
00:09:34,649 --> 00:09:37,660
get the the info in past the resulting
so

158
00:09:37,660 --> 00:09:42,000
is all quite messy so when it comes to
cash in so the mantra then becomes don't

159
00:09:42,000 --> 00:09:42,880
regenerate

160
00:09:42,880 --> 00:09:46,810
rather regurgitate with sites

161
00:09:46,810 --> 00:09:50,110
and so looking for caching solutions

162
00:09:50,110 --> 00:09:54,019
there's a whole bunch for them that are
available this problem is well known

163
00:09:54,019 --> 00:09:58,760
and this is not a new thing cashing has
been going on since early days

164
00:09:58,760 --> 00:10:02,160
computer science and so if you tried to
bolt

165
00:10:02,160 --> 00:10:05,470
specifically scaleable where
applications today you but

166
00:10:05,470 --> 00:10:09,820
whole bunch of options to choose from
there they're not all identical

167
00:10:09,820 --> 00:10:15,380
got different features butts you do have
a number of options of them

168
00:10:15,380 --> 00:10:18,390
and because there are so many options
and not talk with somewhat limited at

169
00:10:18,390 --> 00:10:19,260
only pick one

170
00:10:19,260 --> 00:10:23,000
we went with memcached E memcached the
is

171
00:10:23,000 --> 00:10:26,050
probably the most popular caching
software

172
00:10:26,050 --> 00:10:30,940
and it's used in a number of pretty
high-profile website

173
00:10:30,940 --> 00:10:34,750
so you'll see there's all the logos that

174
00:10:34,750 --> 00:10:39,360
so Facebook specifically have got a
custom implementation of memcached

175
00:10:39,360 --> 00:10:44,459
their own internally was at least that's
what the intuit say

176
00:10:44,459 --> 00:10:49,490
so a little bit about it a it was
written in 2003 by got Brett

177
00:10:49,490 --> 00:10:53,279
Patrick specifically for LiveJournal
LiveJournal as a blogging platform

178
00:10:53,279 --> 00:10:56,860
Inc onto the exactly the problem every
time they needed to generate a page

179
00:10:56,860 --> 00:11:00,100
became really expensive the service were
taken a hit so

180
00:11:00,100 --> 00:11:03,829
wanna be engineers said no forget that
you can do better

181
00:11:03,829 --> 00:11:07,750
and put together this a piece a software
called men kashti

182
00:11:07,750 --> 00:11:10,959
I'm it's quite a small piece of so it's
only about ten thousand lines

183
00:11:10,959 --> 00:11:14,610
code it's also relatively platform into

184
00:11:14,610 --> 00:11:19,920
independent and to break it down it's
not persistent network-based key-value

185
00:11:19,920 --> 00:11:20,370
store

186
00:11:20,370 --> 00:11:23,920
now on a mouthful would just look at
each other's

187
00:11:23,920 --> 00:11:27,820
to the first one is non-persistent the
holes cash lives in

188
00:11:27,820 --> 00:11:31,089
memory right never touched means it's

189
00:11:31,089 --> 00:11:35,070
Boston track to read and write from
because disk activity

190
00:11:35,070 --> 00:11:38,800
doesn't have to happen that's great the
second one is its network based

191
00:11:38,800 --> 00:11:41,940
so this cash sets somewhere else on the
net it doesn't

192
00:11:41,940 --> 00:11:45,190
cancel them the same machine as the web
server

193
00:11:45,190 --> 00:11:49,190
but typically you'll have it sitting on
a dedicated machine what memory

194
00:11:49,190 --> 00:11:53,420
that's not haven't other work so that
somewhere else in the network

195
00:11:53,420 --> 00:11:57,550
and the lost one is a it's a key value
store so if you're familiar with pie

196
00:11:57,550 --> 00:12:00,860
dictionary poll soca to rate

197
00:12:00,860 --> 00:12:04,510
that's all the sketch provides you with
you provide the cash

198
00:12:04,510 --> 00:12:08,260
when you right into it you say this is
the name up the thing that I want to

199
00:12:08,260 --> 00:12:08,760
write

200
00:12:08,760 --> 00:12:13,510
sensitive terrible name he said this is
the value that must be associated with

201
00:12:13,510 --> 00:12:17,320
that key right see the key and a value

202
00:12:17,320 --> 00:12:20,769
and when you come back at a later time
to retrieve the value

203
00:12:20,769 --> 00:12:23,920
you simply say give me the value of the
ski

204
00:12:23,920 --> 00:12:29,420
and the casuals and bhakti biter pretty
basic functionality

205
00:12:29,420 --> 00:12:33,260
current version for memcached is 145 it
is

206
00:12:33,260 --> 00:12:37,389
attack should be like that since

207
00:12:37,389 --> 00:12:40,899
least towards the beginning of last year

208
00:12:40,899 --> 00:12:44,820
which is interesting given some other
bikes and the softer

209
00:12:44,820 --> 00:12:48,510
anyway let's look at the intense this is
the architecture

210
00:12:48,510 --> 00:12:52,870
of a basic memcached installation out a
bit messy and it's a multi-tier

211
00:12:52,870 --> 00:12:56,120
architecture but the important thing is
that with

212
00:12:56,120 --> 00:12:59,600
I love those load balancer webservice
absence and databases

213
00:12:59,600 --> 00:13:03,399
Mencap sits here off to the side it's
not in line

214
00:13:03,399 --> 00:13:06,630
so if you meant cash dies then what

215
00:13:06,630 --> 00:13:10,100
your applications will be served it just
happens at a

216
00:13:10,100 --> 00:13:14,130
much slower pace if the cash is working
correctly

217
00:13:14,130 --> 00:13:17,930
so that's a weird for 10 architecturally

218
00:13:17,930 --> 00:13:21,269
I mention that this was an in memory
cash

219
00:13:21,269 --> 00:13:25,980
only so that the data that is stored in
the cache never actually touches

220
00:13:25,980 --> 00:13:29,160
disc and so what happens is when Memphis

221
00:13:29,160 --> 00:13:32,730
starts up and the reason I'm getting
into this details is because

222
00:13:32,730 --> 00:13:36,440
the intricacies of actually hot stores

223
00:13:36,440 --> 00:13:39,690
a sort of important for my knee

224
00:13:39,690 --> 00:13:42,899
but when memcached what's up it reserves

225
00:13:42,899 --> 00:13:46,160
a whole bunch of mami for top obviously
doesn't want to have to

226
00:13:46,160 --> 00:13:50,089
allocate every time a new request comes
in

227
00:13:50,089 --> 00:13:54,070
performs its own memory management

228
00:13:54,070 --> 00:13:58,389
to a large degree and it takes a memory
that gets in at divides them up into

229
00:13:58,389 --> 00:13:59,260
equal-sized

230
00:13:59,260 --> 00:14:04,380
chunks and his child support slats slap
to the things that were interested

231
00:14:04,380 --> 00:14:07,790
so for example slap maybe one Megan size

232
00:14:07,790 --> 00:14:11,920
so that at bootup reserves a gig memory

233
00:14:11,920 --> 00:14:14,970
and it breaks it up into one make chunks

234
00:14:14,970 --> 00:14:18,550
and the teacher does one make chunks is
a bucket in that bucket is responsible

235
00:14:18,550 --> 00:14:19,740
for holding

236
00:14:19,740 --> 00:14:23,190
data that fits within a certain rage

237
00:14:23,190 --> 00:14:27,630
so for example a particular bucket may
hold data

238
00:14:27,630 --> 00:14:31,570
that lies between 100 and 150 bites

239
00:14:31,570 --> 00:14:35,040
the next bucket with that whole day to
that lies from 150 fights

240
00:14:35,040 --> 00:14:40,070
maybe 250 but and the sizeof the data
stored within a bucket varies depending

241
00:14:40,070 --> 00:14:41,120
on the bucket

242
00:14:41,120 --> 00:14:44,269
but the bucket size remains constant
they're all for example one make

243
00:14:44,269 --> 00:14:48,320
big so what that means is that if
there's a bucket

244
00:14:48,320 --> 00:14:52,209
that stores data up to Megan size

245
00:14:52,209 --> 00:14:56,510
because thats lab is only a make I could
certainly make you can still one item

246
00:14:56,510 --> 00:15:00,410
conversely if the data that has been
stored is

247
00:15:00,410 --> 00:15:05,000
10 bytes pic then you get to make
divided by 10 bites that many

248
00:15:05,000 --> 00:15:08,639
items can be stored okay

249
00:15:08,639 --> 00:15:12,639
again it's kinda roundabout but the
slabs are important

250
00:15:12,639 --> 00:15:15,760
the way that memcache Victor stuff

251
00:15:15,760 --> 00:15:18,930
from the gas it uses least recently used

252
00:15:18,930 --> 00:15:22,410
election strategy but it's also a lazy
eviction

253
00:15:22,410 --> 00:15:26,149
so it's not checking every up a
nanosecond to see if anything needs to

254
00:15:26,149 --> 00:15:28,610
be removed from the cash

255
00:15:28,610 --> 00:15:32,850
when you try to get a key it will check
the expiry time at that point

256
00:15:32,850 --> 00:15:38,970
if that his ex by just one get back

257
00:15:38,970 --> 00:15:43,310
okay so that's just graphically sketches
of what that means you've got the slaps

258
00:15:43,310 --> 00:15:44,180
running

259
00:15:44,180 --> 00:15:47,440
horizontally and within its lead you
have keys that met

260
00:15:47,440 --> 00:15:51,630
to values the source stands all all set
within

261
00:15:51,630 --> 00:15:54,940
memory not normally you don't care about
slept this isn't what

262
00:15:54,940 --> 00:15:58,940
you worried about the thing though that
to do or the people who care about this

263
00:15:58,940 --> 00:16:02,660
are miners so and where -4

264
00:16:02,660 --> 00:16:06,670
the benefit stock let's talk integration

265
00:16:06,670 --> 00:16:10,130
just to give you an idea again time in
cash does

266
00:16:10,130 --> 00:16:14,350
identification so we've got a little
ruby script with

267
00:16:14,350 --> 00:16:17,509
hypothetical method a

268
00:16:17,509 --> 00:16:21,380
get profile and it gets Boston the user
ID

269
00:16:21,380 --> 00:16:26,709
and the purpose of this is to connect to
database block user preferences

270
00:16:26,709 --> 00:16:30,250
and so what specifically %uh ventures to
its home in cash has to be

271
00:16:30,250 --> 00:16:34,000
integrated into application it's not an
automatic cash in system

272
00:16:34,000 --> 00:16:37,720
so you can take a script proxy configure
it

273
00:16:37,720 --> 00:16:41,100
to some front of web application and
have the cash

274
00:16:41,100 --> 00:16:44,209
automatically for you without
application do anything

275
00:16:44,209 --> 00:16:48,209
men cash is a little different with in
memcache have to explicitly

276
00:16:48,209 --> 00:16:52,500
code support into at and so the first
step when we enter this method is to see

277
00:16:52,500 --> 00:16:53,339
whether

278
00:16:53,339 --> 00:16:57,829
the data is within the cash in if it is
then we can return early

279
00:16:57,829 --> 00:17:01,389
WEA exit immediately with the date
people back from the cash

280
00:17:01,389 --> 00:17:05,459
if it's not in the cash then we have to
go in pulls from the database

281
00:17:05,459 --> 00:17:08,559
a.m. and if we have to go that far

282
00:17:08,559 --> 00:17:12,049
it and get stored into the cap so the
next time the method gets run

283
00:17:12,049 --> 00:17:15,919
be going to return it so it makes it a
little more

284
00:17:15,919 --> 00:17:19,209
expensive the first time the Metatron
but

285
00:17:19,209 --> 00:17:22,600
all the following times we should make
should see quite a big saving

286
00:17:22,600 --> 00:17:25,970
those numbers I just for illustrative
purposes not

287
00:17:25,970 --> 00:17:30,179
they're not at all derived from anywhere
made them up

288
00:17:30,179 --> 00:17:34,470
but that kinda gives an idea of where
you would expect to see

289
00:17:34,470 --> 00:17:37,480
works for the times that one might see
on those

290
00:17:37,480 --> 00:17:44,480
steps right so by using the cash for
going to exude

291
00:17:44,940 --> 00:17:48,559
get a and then the last thing with

292
00:17:48,559 --> 00:17:51,720
so the net not the network with men cash

293
00:17:51,720 --> 00:17:55,010
architect is that is quite easy to build
them into clusters so

294
00:17:55,010 --> 00:17:58,929
memcached supports really a simple
method for clustering and

295
00:17:58,929 --> 00:18:03,690
method is that the nodes within the
cluster know nothing about each other

296
00:18:03,690 --> 00:18:07,510
it is up to the client to load balance

297
00:18:07,510 --> 00:18:12,150
amongst the service so the client needs
to know about all service within

298
00:18:12,150 --> 00:18:17,039
the cluster and then the client pic the
server

299
00:18:17,039 --> 00:18:20,059
to interact with based on the hash the
key at its

300
00:18:20,059 --> 00:18:23,160
currently doing

301
00:18:23,160 --> 00:18:26,970
there's just a few notes that what that
means is that or clients need to know

302
00:18:26,970 --> 00:18:30,130
about all servers and Only Tease the
same National Grid

303
00:18:30,130 --> 00:18:34,270
otherwise have quite a mess

304
00:18:34,270 --> 00:18:39,110
anyway let's start looking at what men
cash looks like on the network

305
00:18:39,110 --> 00:18:43,730
so it's interesting because by default
that binds to all interfaces

306
00:18:43,730 --> 00:18:47,450
on ports double 12 double one

307
00:18:47,450 --> 00:18:51,630
using both TCP and unity net by default
they are

308
00:18:51,630 --> 00:18:55,630
some distributions some Linux
distributions for example that'll

309
00:18:55,630 --> 00:18:59,190
install memcached listening on local
only but if you pull

310
00:18:59,190 --> 00:19:02,900
this source bundle you get software that
binds to

311
00:19:02,900 --> 00:19:07,150
all interfaces not that's as an
architectural

312
00:19:07,150 --> 00:19:10,419
hazardous design decision is

313
00:19:10,419 --> 00:19:14,320
questionable

314
00:19:14,320 --> 00:19:17,660
but it arises autos the usage scenario

315
00:19:17,660 --> 00:19:22,059
that LiveJournal hat which was they have

316
00:19:22,059 --> 00:19:25,660
really tightly hopefully he secured

317
00:19:25,660 --> 00:19:31,059
server infrastructure in which they've
got competent administrators

318
00:19:31,059 --> 00:19:34,940
how do keep at least basic network
traffic

319
00:19:34,940 --> 00:19:38,880
so that design decision apply
specifically to

320
00:19:38,880 --> 00:19:42,690
usage scenario that is ages old

321
00:19:42,690 --> 00:19:45,900
in addition memcached he supports two
particles

322
00:19:45,900 --> 00:19:50,330
so there's an ASCII particle which is
the one that century ship

323
00:19:50,330 --> 00:19:53,710
amendment in 2007 there was an effort
too bold

324
00:19:53,710 --> 00:19:56,780
a binary particle make it a little
quicker

325
00:19:56,780 --> 00:20:00,020
than it already was and so what this
means is that

326
00:20:00,020 --> 00:20:03,190
to interact with the cash to set or tree
values

327
00:20:03,190 --> 00:20:07,070
therefore possible Copart so you can use
I the TCP or UT

328
00:20:07,070 --> 00:20:10,490
and on both those you can access a
binary and ASCII

329
00:20:10,490 --> 00:20:14,559
article and so that's

330
00:20:14,559 --> 00:20:17,799
thats unnecessarily expanded attack
surface I

331
00:20:17,799 --> 00:20:21,190
military of all code to get to

332
00:20:21,190 --> 00:20:24,900
to each of these piece of functionality

333
00:20:24,900 --> 00:20:28,400
and so again this is another design
decision

334
00:20:28,400 --> 00:20:32,020
that perhaps made sense when they were
thinking about it

335
00:20:32,020 --> 00:20:35,840
but if you try to secure it exposing

336
00:20:35,840 --> 00:20:41,390
such a large footprints seems
unnecessary

337
00:20:41,390 --> 00:20:44,470
okay that skip article is really simple
that's the grammar for it this

338
00:20:44,470 --> 00:20:47,480
AT commands pipeline has got

339
00:20:47,480 --> 00:20:52,530
a bunch of commands story begets is
obviously for achieving this to lead in

340
00:20:52,530 --> 00:20:53,000
common

341
00:20:53,000 --> 00:20:56,510
the comment the one that's going to be
fun for us to play with this stats come

342
00:20:56,510 --> 00:21:00,390
on because that's gonna last aquarian in
the cash

343
00:21:00,390 --> 00:21:03,500
as a few stats there's also flush all

344
00:21:03,500 --> 00:21:07,730
just kinda nuclear option for removing
the content of the cash

345
00:21:07,730 --> 00:21:11,210
version and Basti level and obviously
quit

346
00:21:11,210 --> 00:21:14,350
upset he's a pretty pretty basic and

347
00:21:14,350 --> 00:21:18,240
I want to show you how easy it is

348
00:21:18,240 --> 00:21:23,870
so we've got

349
00:21:23,870 --> 00:21:27,280
sample cash running likely so we can
connect to the cash

350
00:21:27,280 --> 00:21:32,390
asked for its version we can pull some
basic stats

351
00:21:32,390 --> 00:21:36,090
for example telsyte up time

352
00:21:36,090 --> 00:21:40,530
tell us running 64 bits

353
00:21:40,530 --> 00:21:47,039
the number of get Kaman seen so far set
commands and so on

354
00:21:47,039 --> 00:21:50,220
we can ask for a few other settings

355
00:21:50,220 --> 00:21:53,480
there's a whole bunch of these that are
available

356
00:21:53,480 --> 00:21:56,880
so we can connect to the cash I can ask
for a key

357
00:21:56,880 --> 00:22:02,860
ask for the key through you notice at
the bottom I get nothing back

358
00:22:02,860 --> 00:22:06,690
top I get nothing back through

359
00:22:06,690 --> 00:22:13,690
we can store food

360
00:22:17,460 --> 00:22:20,340
now when they get food we get the
content

361
00:22:20,340 --> 00:22:23,990
right to this is what the application
does in the background when your

362
00:22:23,990 --> 00:22:27,880
interacting with the cash speaking
israeli basic particle

363
00:22:27,880 --> 00:22:31,850
now you can also set expiry times and so
on I'm not going to

364
00:22:31,850 --> 00:22:38,030
get into that I mention the slabs in the
slabs become important

365
00:22:38,030 --> 00:22:42,750
so we can of memcached to tell us about
all the slabs that is currently in use

366
00:22:42,750 --> 00:22:46,410
and what to get back here are list slabs

367
00:22:46,410 --> 00:22:49,550
we see the slab I the sets before that

368
00:22:49,550 --> 00:22:54,030
colon so we got slapped once led three
and at the bottom slab forty

369
00:22:54,030 --> 00:22:57,800
so that they are many possible slab that
could be in use but actually we can

370
00:22:57,800 --> 00:23:01,140
of memcached which one the actual use
and it tells us

371
00:23:01,140 --> 00:23:04,440
and the Los command

372
00:23:04,440 --> 00:23:08,480
which will talk about is this its Basic
IDE

373
00:23:08,480 --> 00:23:12,100
you but come on stats cashed-up

374
00:23:12,100 --> 00:23:16,720
and we can say for slept 3

375
00:23:16,720 --> 00:23:19,760
give us 10 keys from slate 3

376
00:23:19,760 --> 00:23:25,540
and it lists for us the keys so we've
got a key

377
00:23:25,540 --> 00:23:30,050
what we do with the key we can simply
get a key and we get the contents Vicky

378
00:23:30,050 --> 00:23:33,360
alright so I will discuss with you

379
00:23:33,360 --> 00:23:36,930
the significance

380
00:23:36,930 --> 00:23:40,610
love why this becomes fun

381
00:23:40,610 --> 00:23:45,490
at within the protocol does anything is
anything missing

382
00:23:45,490 --> 00:23:48,490
what's missing that and get a shot

383
00:23:48,490 --> 00:23:51,830
authentication

384
00:23:51,830 --> 00:23:55,100
right there's not 0 nothing

385
00:23:55,100 --> 00:23:58,700
is no authentication within memcached
a.m.

386
00:23:58,700 --> 00:24:02,540
and again this is a decision

387
00:24:02,540 --> 00:24:06,330
design decision that was taken eight
years ago

388
00:24:06,330 --> 00:24:11,080
when LiveJournal had a very specific use
case that there were

389
00:24:11,080 --> 00:24:14,470
printable the school but times have
changed and

390
00:24:14,470 --> 00:24:19,210
things have moved on and so it's not
good enough today to assume

391
00:24:19,210 --> 00:24:22,930
that memcached is going to be run by

392
00:24:22,930 --> 00:24:26,850
these experienced administrator sitting
in tightly controlled

393
00:24:26,850 --> 00:24:30,960
networks I will point out that actually
when I said there's no

394
00:24:30,960 --> 00:24:34,810
education that only applies to ASCII
particle

395
00:24:34,810 --> 00:24:37,850
within the binary article there is
support for

396
00:24:37,850 --> 00:24:41,300
saddle but it's not a it's not foolproof

397
00:24:41,300 --> 00:24:47,230
for reasons like it into later okay

398
00:24:47,230 --> 00:24:51,760
so as I said they they're pretty clear
about this as well

399
00:24:51,760 --> 00:24:55,260
on the website the point of that you
shouldn't deploy this in

400
00:24:55,260 --> 00:25:00,030
publicly accessible place and it should
be on a public network

401
00:25:00,030 --> 00:25:03,940
but it does remind me a little bit in
1999 I mean

402
00:25:03,940 --> 00:25:07,260
no or on on the network

403
00:25:07,260 --> 00:25:10,600
services that lesson by default on all
interfaces

404
00:25:10,600 --> 00:25:13,860
this seems to be some lessons that a
missing

405
00:25:13,860 --> 00:25:17,900
alright so I mentioned as a binding for
the climax not gonna talk too much about

406
00:25:17,900 --> 00:25:18,280
it

407
00:25:18,280 --> 00:25:22,100
this is the this is just

408
00:25:22,100 --> 00:25:26,220
the packet money particle and the reason
I but the sliders

409
00:25:26,220 --> 00:25:29,500
these are just the opcodes for the
operation supported by

410
00:25:29,500 --> 00:25:33,510
the binary particle and the reason I'm
documenting it is because

411
00:25:33,510 --> 00:25:36,820
it's not available apartment rolling
through the source

412
00:25:36,820 --> 00:25:41,900
okay so moving on from that I think it's
time to

413
00:25:41,900 --> 00:25:45,090
to so

414
00:25:45,090 --> 00:25:49,490
the first thing that we did was we
constructed a father for that particle

415
00:25:49,490 --> 00:25:52,810
the grammar said as a citizen is really
simple it's eighty months

416
00:25:52,810 --> 00:25:56,810
and so we fuss memcached E a.m. so what
we found was

417
00:25:56,810 --> 00:26:01,660
denial of service condition in again
it's wanna the code parts the Unity

418
00:26:01,660 --> 00:26:07,380
you to keep binary particle so there's a
pretty easy to my lip service where you

419
00:26:07,380 --> 00:26:08,490
need to send one packet

420
00:26:08,490 --> 00:26:11,750
thread assigned by default this for
threats

421
00:26:11,750 --> 00:26:15,230
to send four packets that unity Channel
4's over

422
00:26:15,230 --> 00:26:18,240
pushes utilization on the box up to 100
percent

423
00:26:18,240 --> 00:26:23,200
which may or may not initially what
what's nice about that meant St

424
00:26:23,200 --> 00:26:27,200
particle that specified that the
particle its be coopted

425
00:26:27,200 --> 00:26:30,990
by a number of other pieces of software
so not just men cash to use it

426
00:26:30,990 --> 00:26:34,890
so there's a memcached TV which is a
persistent key-value store

427
00:26:34,890 --> 00:26:38,420
that's network-based and a number of
other piece of software

428
00:26:38,420 --> 00:26:42,730
expose memcached interfaces in addition
to the regular ones because it's a

429
00:26:42,730 --> 00:26:45,890
they're designed to be droppin
replacement for men St

430
00:26:45,890 --> 00:26:49,090
so the father was useful in that sense
we write

431
00:26:49,090 --> 00:26:52,170
from MKT could run against number by the
pieces

432
00:26:52,170 --> 00:26:55,580
lots of so with memcached TV we can say

433
00:26:55,580 --> 00:27:00,490
faltered asserts trigger asserts but we
didn't follow that

434
00:27:00,490 --> 00:27:03,750
any further it's not really

435
00:27:03,750 --> 00:27:08,200
some not really I'm interest to me

436
00:27:08,200 --> 00:27:12,080
okay so given that

437
00:27:12,080 --> 00:27:15,110
we we understand the particle

438
00:27:15,110 --> 00:27:19,040
it been became a curious thing for
school can we find these things

439
00:27:19,040 --> 00:27:22,790
and the reason it was of interest to me
is when i discussed this with colleagues

440
00:27:22,790 --> 00:27:26,990
one of the reactions was lucky not gonna
find the stuff

441
00:27:26,990 --> 00:27:30,720
meant St should be exposed internet la

442
00:27:30,720 --> 00:27:34,270
answer but like that monkey Lexus quite
a smart monkey

443
00:27:34,270 --> 00:27:38,169
have to say season spear that catch a
fish

444
00:27:38,169 --> 00:27:41,230
so in fact that that mike is probably
smarter than I was

445
00:27:41,230 --> 00:27:45,320
when when I started this %uh so

446
00:27:45,320 --> 00:27:48,890
Ben can on wall where do you find these
memcached the service where can we look

447
00:27:48,890 --> 00:27:52,460
and so first effort was blind the
scanning random

448
00:27:52,460 --> 00:27:56,210
so see if you can pick it up new didn't
have too much success found a few

449
00:27:56,210 --> 00:27:59,419
machines but not that many and

450
00:27:59,419 --> 00:28:02,740
if you're looking to target particular
companies

451
00:28:02,740 --> 00:28:05,770
looking for them and catch these its
unlikely

452
00:28:05,770 --> 00:28:08,590
that you're going to find them so
there's a whole bunch of variables that

453
00:28:08,590 --> 00:28:09,360
have to collide

454
00:28:09,360 --> 00:28:13,440
it's like saying well i'm looking for. I
S five

455
00:28:13,440 --> 00:28:18,120
printer on that company unlikely you'll
find it's gone internet

456
00:28:18,120 --> 00:28:21,160
you probably will find it somewhere

457
00:28:21,160 --> 00:28:24,770
but is a slight difference to the
example when it comes to men St

458
00:28:24,770 --> 00:28:29,050
because if you're looking for these
large-scale systems

459
00:28:29,050 --> 00:28:33,100
this one place they tend to go they're
not gonna run their own

460
00:28:33,100 --> 00:28:36,310
miss a huge not actually a run their own
data centers

461
00:28:36,310 --> 00:28:40,110
their own infrastructure and what you'll
find is that they tend to go toward

462
00:28:40,110 --> 00:28:44,700
hosting providers or cloud providers
whatever that

463
00:28:44,700 --> 00:28:48,590
so how bout to look at those in
particular hosting companies

464
00:28:48,590 --> 00:28:52,870
cloud providers so that's where we gonna
try and find the stuff

465
00:28:52,870 --> 00:28:55,940
and then it becomes wall if we know
orkut gotta

466
00:28:55,940 --> 00:28:59,919
guess where to look

467
00:28:59,919 --> 00:29:03,660
the question then becomes what we look
for

468
00:29:03,660 --> 00:29:06,720
and so it's pretty basic you looking for

469
00:29:06,720 --> 00:29:11,760
open ports now you can either scan with
the TCP with you P

470
00:29:11,760 --> 00:29:15,200
interface disputes going to be more a
liability

471
00:29:15,200 --> 00:29:18,750
but uniquely is obviously a lot foster

472
00:29:18,750 --> 00:29:22,840
the question arises is the set of hosts
listening on you people to the center

473
00:29:22,840 --> 00:29:23,600
post

474
00:29:23,600 --> 00:29:28,050
listening on TCP probably not but at
this point we're looking for initial

475
00:29:28,050 --> 00:29:28,510
target

476
00:29:28,510 --> 00:29:34,200
not looking for we're not trying to be
exhausted

477
00:29:34,200 --> 00:29:37,340
so we're at this little thing called men
cash find

478
00:29:37,340 --> 00:29:40,520
which is a simple UP scanner for

479
00:29:40,520 --> 00:29:44,350
memcached E and so all it does is sends
out a version packets

480
00:29:44,350 --> 00:29:48,770
min try strives to find

481
00:29:48,770 --> 00:29:52,480
us to find them St actually this is true

482
00:29:52,480 --> 00:29:57,660
meant to have network don't someone to
skip that

483
00:29:57,660 --> 00:30:01,310
well we can run it locally it's it's
cool it's cool ironically

484
00:30:01,310 --> 00:30:07,630
world

485
00:30:07,630 --> 00:30:13,970
okay so we've got this thing and we can

486
00:30:13,970 --> 00:30:18,130
so I'm just gonna scan my local machine

487
00:30:18,130 --> 00:30:21,340
and so just picks up that there's a min
cash

488
00:30:21,340 --> 00:30:25,200
listening likely because the TDP you can
do things like scan

489
00:30:25,200 --> 00:30:28,710
slash 16 or closeby in about five
minutes

490
00:30:28,710 --> 00:30:32,020
which is enough to at least

491
00:30:32,020 --> 00:30:35,820
show whether or not is likely to be men
cash

492
00:30:35,820 --> 00:30:38,980
service in

493
00:30:38,980 --> 00:30:42,400
and so we did that and we found

494
00:30:42,400 --> 00:30:46,110
whole bunch so this is just the

495
00:30:46,110 --> 00:30:50,130
did more this last 16 that troopers that
the certain

496
00:30:50,130 --> 00:30:54,380
you'll see there's a bunch man caches
that are exposed to the net

497
00:30:54,380 --> 00:30:59,690
this is another slash 16 to show you how
long it takes about five minutes to scan

498
00:30:59,690 --> 00:31:02,899
XO onto them

499
00:31:02,899 --> 00:31:06,390
I'm to use is provided with addresses
and occurs often does thats

500
00:31:06,390 --> 00:31:10,659
so you can find caches pretty quickly
you found the cash

501
00:31:10,659 --> 00:31:14,419
question is how to profit from cash and
so what would be fun

502
00:31:14,419 --> 00:31:17,540
is if you could extract all the contents
of that cash

503
00:31:17,540 --> 00:31:22,159
and see what's what date but stored in
try and determine

504
00:31:22,159 --> 00:31:26,140
who's using the cash in what's being
used for because it's no good just fine

505
00:31:26,140 --> 00:31:27,190
in a cast them out

506
00:31:27,190 --> 00:31:30,929
internet it is not interesting data
network you don't know who's using it

507
00:31:30,929 --> 00:31:36,230
then it's a bit like picking change of
the road

508
00:31:36,230 --> 00:31:39,480
not really going to be able to do much
good okay

509
00:31:39,480 --> 00:31:42,380
and then the last one which we will talk
about this overwriting entries in the

510
00:31:42,380 --> 00:31:42,880
cash

511
00:31:42,880 --> 00:31:47,720
so miss can a provider we found 250 cash
is

512
00:31:47,720 --> 00:31:52,460
which was almost one in every policy
that looked at

513
00:31:52,460 --> 00:31:57,310
pretty high density the question then
becomes a hottie prioritize

514
00:31:57,310 --> 00:32:00,880
such showed you those commands are ready
to get the set

515
00:32:00,880 --> 00:32:04,899
state the stats is the one that's

516
00:32:04,899 --> 00:32:08,679
will allow us to prioritize the cash you
want to look for

517
00:32:08,679 --> 00:32:12,110
so we've got those I've already showed
you the stats

518
00:32:12,110 --> 00:32:15,419
slabs command in on

519
00:32:15,419 --> 00:32:19,590
to show you how to get the ID's also
showed you

520
00:32:19,590 --> 00:32:23,130
this cash done come on which becomes
really the core of

521
00:32:23,130 --> 00:32:26,179
the tool which allows you to pullout

522
00:32:26,179 --> 00:32:29,800
a number of keys from any given slap
within the cash

523
00:32:29,800 --> 00:32:33,630
so there's a few um caveats I guess

524
00:32:33,630 --> 00:32:38,990
when it comes to this come on certainly
gonna returned to make safety data

525
00:32:38,990 --> 00:32:43,169
but if you looking at you know that he
fights freaky

526
00:32:43,169 --> 00:32:46,690
less still getting tens of thousands of
keys back

527
00:32:46,690 --> 00:32:50,300
which should be enough to at least find
out whether this is an interesting cash

528
00:32:50,300 --> 00:32:53,149
to look at

529
00:32:53,149 --> 00:32:58,659
and again as if you look at it about
expired keys inside

530
00:32:58,659 --> 00:33:02,550
so witnesses get well it means that

531
00:33:02,550 --> 00:33:05,600
by connecting to memcached server you
can get it

532
00:33:05,600 --> 00:33:08,270
to provide you with all its keys and
because you get all its keys you can get

533
00:33:08,270 --> 00:33:09,710
all the values of those keys

534
00:33:09,710 --> 00:33:13,310
you can get its data to you can my net
cash

535
00:33:13,310 --> 00:33:17,260
write subsequent actions too hot this is
even simpler

536
00:33:17,260 --> 00:33:20,990
in terms of complexity

537
00:33:20,990 --> 00:33:24,580
but I think the nice thing to do in I'm
in cash is

538
00:33:24,580 --> 00:33:28,210
to think overwriting data net cash so if
you consider that the date within the

539
00:33:28,210 --> 00:33:32,110
cash is being used by the application is
probably be in service to users

540
00:33:32,110 --> 00:33:35,450
then this is a way for attacking uses
all

541
00:33:35,450 --> 00:33:38,909
that website for example same bed in
malware whatever the case is inside the

542
00:33:38,909 --> 00:33:39,540
cash

543
00:33:39,540 --> 00:33:43,669
having been searched through a website
to

544
00:33:43,669 --> 00:33:47,419
its its users but the one that I'll talk
right at the end as you can also

545
00:33:47,419 --> 00:33:48,880
attacked the server-side

546
00:33:48,880 --> 00:33:52,690
in specific application server in
specific instance

547
00:33:52,690 --> 00:33:55,980
right so we've got this tool called but
%uh pagoda is

548
00:33:55,980 --> 00:33:59,560
men cash minor and I'm not gonna

549
00:33:59,560 --> 00:34:03,159
go through all of its options but
essentially we can pull it

550
00:34:03,159 --> 00:34:06,870
that how to cash in right data back into
the cash

551
00:34:06,870 --> 00:34:13,870
so let's look at basically four modes

552
00:34:15,790 --> 00:34:19,580
so the first mode is

553
00:34:19,580 --> 00:34:23,330
fingerprint mode

554
00:34:23,330 --> 00:34:27,609
a fingerprint word us will simply
connect to the cash in

555
00:34:27,609 --> 00:34:31,409
a lot whole bunch of those statistics we
talked about and that's useful because

556
00:34:31,409 --> 00:34:34,740
it but 250 cash is you want to know
which are the ones which store the most

557
00:34:34,740 --> 00:34:35,339
data

558
00:34:35,339 --> 00:34:38,980
which are the ones that's really are
interacted with

559
00:34:38,980 --> 00:34:42,490
very frequently amend on Salon Today

560
00:34:42,490 --> 00:34:45,609
so there's also monitor mode which I
want demo which basically repeats the

561
00:34:45,609 --> 00:34:47,440
fingerprint that shows you the changes

562
00:34:47,440 --> 00:34:52,830
you can see if the cash is in active use
or not

563
00:34:52,830 --> 00:34:56,530
the second thing though so that the

564
00:34:56,530 --> 00:35:00,200
the most useful mode is this leach mode

565
00:35:00,200 --> 00:35:03,820
and what leach does is it connects to
the cash and

566
00:35:03,820 --> 00:35:07,650
it'll extract as many keys as it can
dependent on premises

567
00:35:07,650 --> 00:35:11,339
you supply so what we've got here

568
00:35:11,339 --> 00:35:15,630
is it's connected to the cash in polled
arts for keys

569
00:35:15,630 --> 00:35:21,359
and we can look at the values associated
with those keys

570
00:35:21,359 --> 00:35:28,359
so if you look at that value you'll
notice that

571
00:35:29,490 --> 00:35:33,250
okay so that's the value of that key
does anyone recognize

572
00:35:33,250 --> 00:35:36,870
language

573
00:35:36,870 --> 00:35:41,940
about

574
00:35:41,940 --> 00:35:48,940
is so this is the value of another key
in the cash anyone recognize this

575
00:35:49,190 --> 00:35:52,780
get the pipe and pickle object which is

576
00:35:52,780 --> 00:35:56,630
nifty okay so what this means is that
we've come across a cash we extracted

577
00:35:56,630 --> 00:35:57,390
data

578
00:35:57,390 --> 00:36:01,100
and we look at the data and in this
particular case we get lucky BC this

579
00:36:01,100 --> 00:36:02,620
some kinda HTML

580
00:36:02,620 --> 00:36:06,089
a so one way to find use all the cash

581
00:36:06,089 --> 00:36:09,820
it to take some medicine group Google
that may come across

582
00:36:09,820 --> 00:36:13,370
the stuffed into a website which is iPad

583
00:36:13,370 --> 00:36:16,810
competition page just fantastic because
all you have to do

584
00:36:16,810 --> 00:36:19,900
is going to the page not actually

585
00:36:19,900 --> 00:36:23,080
optician page obviously but

586
00:36:23,080 --> 00:36:26,410
for demo purposes let's go with it
alright see you need to submit a user

587
00:36:26,410 --> 00:36:27,300
name

588
00:36:27,300 --> 00:36:31,720
and possible to cities so use them in an
email

589
00:36:31,720 --> 00:36:35,190
you submit that you get entered into the
competition so

590
00:36:35,190 --> 00:36:40,010
with dahmer the contents of the cash
this is one I guess pretty lame way

591
00:36:40,010 --> 00:36:44,339
that you can sought to make things like
cash modification

592
00:36:44,339 --> 00:36:51,339
work to benefit

593
00:36:52,310 --> 00:36:59,310
so we can change the contents of the
page in the cash

594
00:37:11,060 --> 00:37:17,450
and yes we should probably you removed
form as well

595
00:37:17,450 --> 00:37:20,830
okay so

596
00:37:20,830 --> 00:37:24,410
what I've done is a changed that file
but low key on my machine

597
00:37:24,410 --> 00:37:28,450
writer only sitting my machine and I
need to write that back into the cash

598
00:37:28,450 --> 00:37:34,840
so good up a support as well and so
hopefully now when we connect

599
00:37:34,840 --> 00:37:37,970
a.m.

600
00:37:37,970 --> 00:37:43,240
so the

601
00:37:43,240 --> 00:37:47,120
the cash said it's important to note we
have to change the content of that page

602
00:37:47,120 --> 00:37:50,470
on the Cervelo in the database that
still exists wherever it is

603
00:37:50,470 --> 00:37:53,770
but because it goes to the cash first to
generate the page:

604
00:37:53,770 --> 00:37:57,600
we can change what the client season for
taking clients that's

605
00:37:57,600 --> 00:38:04,600
all that actually matters

606
00:38:06,570 --> 00:38:11,520
alright so we spoken about a.m.
policemen an upsurge in on the right

607
00:38:11,520 --> 00:38:12,589
word for auction date:

608
00:38:12,589 --> 00:38:16,200
back into the cash a man so you can also
remove data

609
00:38:16,200 --> 00:38:19,390
the cash if you want okay

610
00:38:19,390 --> 00:38:22,940
up so actually

611
00:38:22,940 --> 00:38:26,290
this ornament meant to do so the
fingerprinted so

612
00:38:26,290 --> 00:38:29,579
when it comes to the fingerprinting you
can pull out all other statistics that I

613
00:38:29,579 --> 00:38:30,180
mention

614
00:38:30,180 --> 00:38:34,200
put them in something like a spreadsheet
and what's really fun as you can

615
00:38:34,200 --> 00:38:38,560
start to see cash is that for example
sit next to each other in a network

616
00:38:38,560 --> 00:38:41,680
and have the same amount of cheese
almost the same amount

617
00:38:41,680 --> 00:38:45,670
keys some amount of traffic and what
that suggests is that these things apart

618
00:38:45,670 --> 00:38:46,450
of clusters

619
00:38:46,450 --> 00:38:50,530
that this has meant s-class so you can
then start to

620
00:38:50,530 --> 00:38:53,960
if you're looking to prioritize your
tech you don't have to go after the

621
00:38:53,960 --> 00:38:54,839
entire cluster

622
00:38:54,839 --> 00:38:58,609
people all its data just look at one of
those you figure arts

623
00:38:58,609 --> 00:39:02,800
with that it is interesting okay

624
00:39:02,800 --> 00:39:06,820
so when it comes to finding the front
end that uses the cash

625
00:39:06,820 --> 00:39:10,099
we've already mentioned grouping for
strings that you find in the data

626
00:39:10,099 --> 00:39:13,250
but otherwise it's what you'd expect so
you can look at

627
00:39:13,250 --> 00:39:16,849
DNS associated with that cash address
you can see

628
00:39:16,849 --> 00:39:22,339
where it sits on the network internet
and when you look inside the actual cash

629
00:39:22,339 --> 00:39:22,900
data

630
00:39:22,900 --> 00:39:26,760
then you know you just use your brain at
that point

631
00:39:26,760 --> 00:39:31,230
trying to type URL a juicy an email
addresses

632
00:39:31,230 --> 00:39:36,380
those kinds of things than the final one

633
00:39:36,380 --> 00:39:40,520
comes where you actually able to execute
code buy stuff that you check into cash

634
00:39:40,520 --> 00:39:45,630
and in certain circumstances you can get
that education server to tell you

635
00:39:45,630 --> 00:39:49,500
who it is right so I mention risk and

636
00:39:49,500 --> 00:39:53,839
a few networks up came across almost 900
cash is

637
00:39:53,839 --> 00:39:57,099
sitting on two networks

638
00:39:57,099 --> 00:40:00,700
one and quite a big network but
interestingly we find the most cash is

639
00:40:00,700 --> 00:40:01,250
in small

640
00:40:01,250 --> 00:40:06,680
network which was a hosting provider so
we pulled about nine digs updater

641
00:40:06,680 --> 00:40:12,430
for 10 those skin amongst those caches
the average upon was about sixty four

642
00:40:12,430 --> 00:40:12,790
days

643
00:40:12,790 --> 00:40:16,290
I don't know if there's too much value
in that metric included

644
00:40:16,290 --> 00:40:21,099
what I find interesting though I just
the amount of data that the transport

645
00:40:21,099 --> 00:40:26,030
so for example amongst all the caches
there that carried almost nine and a

646
00:40:26,030 --> 00:40:26,369
half

647
00:40:26,369 --> 00:40:29,589
petabytes updater which is data

648
00:40:29,589 --> 00:40:33,710
and across all those cash is looking at
almost $450 million

649
00:40:33,710 --> 00:40:37,280
objects stored inside the cash as $900
cash is

650
00:40:37,280 --> 00:40:40,990
talking about sixty terabytes data

651
00:40:40,990 --> 00:40:44,150
for any individual cash the highest

652
00:40:44,150 --> 00:40:47,690
bandwith was on on it yeah almost 150

653
00:40:47,690 --> 00:40:51,050
terabytes with 133 million

654
00:40:51,050 --> 00:40:54,510
entries in one cash alone which is a
pretty

655
00:40:54,510 --> 00:40:58,630
pretty high use cash and that when
stored

656
00:40:58,630 --> 00:41:03,470
but nineteen X word cashed it so let's
look at the results of

657
00:41:03,470 --> 00:41:07,410
some others so the things that we find
in the cash

658
00:41:07,410 --> 00:41:10,690
are quite varied and that's because men
cash

659
00:41:10,690 --> 00:41:14,130
allows you to store all sorts of things
in the cash just takes a bite streams

660
00:41:14,130 --> 00:41:16,599
essentially and so is Tim Allen

661
00:41:16,599 --> 00:41:19,849
all also the things associated with that
and

662
00:41:19,849 --> 00:41:23,109
cast JavaScript lots a basic email
password

663
00:41:23,109 --> 00:41:27,510
which look at Ticket X something cryptid
something we really put the hash

664
00:41:27,510 --> 00:41:31,250
Press data what was sort of interesting
was

665
00:41:31,250 --> 00:41:34,339
the title objects that we did find so
away from the stage tomorrow

666
00:41:34,339 --> 00:41:37,480
so serialized objects of wide varieties

667
00:41:37,480 --> 00:41:40,750
job Python Ruby dotnet Jason

668
00:41:40,750 --> 00:41:44,170
sequel strings as well with on in some
occasions

669
00:41:44,170 --> 00:41:47,910
right so let's get to examples here

670
00:41:47,910 --> 00:41:54,319
and as a few of them first one is the
site that you probably haven't heard of

671
00:41:54,319 --> 00:41:57,670
school Club World 'em and so these guys

672
00:41:57,670 --> 00:42:01,220
are likely they there and beat at the
time kids

673
00:42:01,220 --> 00:42:04,740
a game site and within their cash

674
00:42:04,740 --> 00:42:07,920
we pulled the contents and they were
story use objects which had

675
00:42:07,920 --> 00:42:11,670
username and password in the clear
inside the cash

676
00:42:11,670 --> 00:42:16,349
which allowed us to love into global for
games is

677
00:42:16,349 --> 00:42:19,349
manufacture or developer of games for

678
00:42:19,349 --> 00:42:23,900
Facebook mostly so if you've played

679
00:42:23,900 --> 00:42:27,000
and so really a lot abusers use

680
00:42:27,000 --> 00:42:30,589
games so mafia City mobsters

681
00:42:30,589 --> 00:42:34,869
anyone plays but if dude

682
00:42:34,869 --> 00:42:39,460
data so to expose and so what they were
exposing specifically

683
00:42:39,460 --> 00:42:44,160
was Facebook what the data that Facebook
shares with application developers

684
00:42:44,160 --> 00:42:50,680
was torn Makassar things like your
friends list and so

685
00:42:50,680 --> 00:42:54,910
the next one was go while ago others
location-based service

686
00:42:54,910 --> 00:42:59,310
a popular citizen Europe it it's a
competitor to Foursquare

687
00:42:59,310 --> 00:43:02,700
in US and other words you check in that
point

688
00:43:02,700 --> 00:43:06,460
location it's cool the social media
stuff around

689
00:43:06,460 --> 00:43:09,720
so within them in cash server

690
00:43:09,720 --> 00:43:14,200
within them in cash they were stored in
the past with the possible hashed

691
00:43:14,200 --> 00:43:18,730
plus one the possible hash within the
five in the assault

692
00:43:18,730 --> 00:43:22,300
at all minus to leave them on

693
00:43:22,300 --> 00:43:25,690
-1 up so you can take those and put them
through whatever

694
00:43:25,690 --> 00:43:29,780
technique you want so if you got around
the table in this case just google

695
00:43:29,780 --> 00:43:34,940
for summers hasher's see you get know
the username and password

696
00:43:34,940 --> 00:43:40,940
lie you to log in the sky his

697
00:43:40,940 --> 00:43:45,830
um the next set and a modernist the site
name I won't mention

698
00:43:45,830 --> 00:43:50,330
this because I the other guys it fixed
these guys

699
00:43:50,330 --> 00:43:53,920
was were indicative of I think a broader
problem

700
00:43:53,920 --> 00:43:57,970
absurdist very briefly what about this
email and password stored in

701
00:43:57,970 --> 00:44:03,420
in clear text but it points to a deeper
problem which was using our

702
00:44:03,420 --> 00:44:06,730
email addresses as identifies for
assault

703
00:44:06,730 --> 00:44:10,200
because people tend not to reuse
possible

704
00:44:10,200 --> 00:44:14,609
to change what the reuse passwords so
within this

705
00:44:14,609 --> 00:44:20,099
this particular men cash there were a
whole bunch of emails and passwords

706
00:44:20,099 --> 00:44:25,010
and what that meant was you just saw
paging through people's inboxes

707
00:44:25,010 --> 00:44:28,700
gmail MSN

708
00:44:28,700 --> 00:44:31,980
Twitter account and that's because
people

709
00:44:31,980 --> 00:44:35,480
say when when they say use an email
address

710
00:44:35,480 --> 00:44:40,440
unidentified oftentimes use the same
possible that these taxes

711
00:44:40,440 --> 00:44:44,430
which is but said but it happens

712
00:44:44,430 --> 00:44:47,770
up but he pro- is the Big Brother

713
00:44:47,770 --> 00:44:51,540
but he pities the URL shortening service
you may be aware of

714
00:44:51,540 --> 00:44:55,560
and so they've got a pro service that
ads on a bunch of features for analysis

715
00:44:55,560 --> 00:44:56,560
and so on

716
00:44:56,560 --> 00:44:59,920
on your links that you

717
00:44:59,920 --> 00:45:03,380
sent through that and so with their

718
00:45:03,380 --> 00:45:06,609
memcached server the head that exposed
within memcached server they were

719
00:45:06,609 --> 00:45:07,140
exposing

720
00:45:07,140 --> 00:45:10,490
API keys and

721
00:45:10,490 --> 00:45:13,580
identifies loggins in this case the
possible word

722
00:45:13,580 --> 00:45:17,480
were hashed way i could.

723
00:45:17,480 --> 00:45:20,690
figure actual password but we did have

724
00:45:20,690 --> 00:45:23,920
the API keys which allowed you to
interact with

725
00:45:23,920 --> 00:45:28,030
their API as want to use the so this is
a square in the API

726
00:45:28,030 --> 00:45:31,190
as Tech Crunch Tech Crunch is

727
00:45:31,190 --> 00:45:35,589
was at least a bit repro user

728
00:45:35,589 --> 00:45:39,240
second last example is PBS so if you're
a

729
00:45:39,240 --> 00:45:43,750
from the US about PBS cannot the public
broadcast

730
00:45:43,750 --> 00:45:47,069
system service on a

731
00:45:47,069 --> 00:45:50,180
but basically it's the public TV network
got

732
00:45:50,180 --> 00:45:53,930
quite a quite a lot site in fact that
had a really large cluster men cash is

733
00:45:53,930 --> 00:45:55,869
exposed on the Internet

734
00:45:55,869 --> 00:45:59,190
and so what I use this one for ways to
show that

735
00:45:59,190 --> 00:46:02,990
it's possible to really easily
overwrites

736
00:46:02,990 --> 00:46:07,970
small possible web page and have that
stuff come out

737
00:46:07,970 --> 00:46:11,640
and taking this the Southern Ocean
further overwriting

738
00:46:11,640 --> 00:46:14,950
this is a stock easy was a is a Indian

739
00:46:14,950 --> 00:46:18,720
website for discussing and traction

740
00:46:18,720 --> 00:46:22,390
activity on stock markets on a sort of
social sites and so on

741
00:46:22,390 --> 00:46:25,930
but basically people to provide
recommendations for things of things

742
00:46:25,930 --> 00:46:27,619
that they think people should do

743
00:46:27,619 --> 00:46:30,920
on website and this starts to get into

744
00:46:30,920 --> 00:46:35,390
just love how you could convert simply
working with the cash into actually

745
00:46:35,390 --> 00:46:39,730
making money if you pick user who's got
a lot of trust on the site

746
00:46:39,730 --> 00:46:43,599
you start altering and cash what this
guy apparently says

747
00:46:43,599 --> 00:46:48,190
then you can persuade other people to
perform actions

748
00:46:48,190 --> 00:46:52,849
stock trading website there's a whole
bunch of scams financial

749
00:46:52,849 --> 00:46:57,049
you may be more familiar with I am but

750
00:46:57,049 --> 00:47:00,599
yeah bat right

751
00:47:00,599 --> 00:47:05,609
so I want to talk just a little bit
about the serialized objects

752
00:47:05,609 --> 00:47:09,190
and in particular the pickle once pic
pickle specific

753
00:47:09,190 --> 00:47:13,080
fun lots a pickle in fact audible the
serialized object because the most

754
00:47:13,080 --> 00:47:14,069
common thing

755
00:47:14,069 --> 00:47:17,730
we found inside the caches and pickle if
you're unfamiliar with that

756
00:47:17,730 --> 00:47:21,290
such as the Python method for

757
00:47:21,290 --> 00:47:24,359
right teen objects art to by

758
00:47:24,359 --> 00:47:27,910
3 some and it intentionally secure

759
00:47:27,910 --> 00:47:31,589
insecure right to this is the pickle
page

760
00:47:31,589 --> 00:47:35,770
is a big warning sign says as a Python
2.3

761
00:47:35,770 --> 00:47:40,210
dunno security checks when it comes to
pickle and white pickles interested

762
00:47:40,210 --> 00:47:43,940
is because when you Deepika love object
when you convert it

763
00:47:43,940 --> 00:47:47,440
from a bike stream to buy object it gets
run through

764
00:47:47,440 --> 00:47:50,710
a little virtual machine inside the park
then

765
00:47:50,710 --> 00:47:54,510
runtime: and the virtual machine has the
ability to call methods

766
00:47:54,510 --> 00:47:58,280
inside the Piketon run

767
00:47:58,280 --> 00:48:01,910
see that just starting to turn their

768
00:48:01,910 --> 00:48:06,540
and while it may be true that if you
pickle something on to your local disk

769
00:48:06,540 --> 00:48:07,900
read it back

770
00:48:07,900 --> 00:48:11,029
pending file system attacks or putting
those aside

771
00:48:11,029 --> 00:48:15,390
that's probably an OK thing to do but
when you're right into a cache server

772
00:48:15,390 --> 00:48:18,779
someone internet and it's exposed you
cannot be sure about that date

773
00:48:18,779 --> 00:48:21,920
that's coming back from pickle and so

774
00:48:21,920 --> 00:48:25,680
this is a well this is a published piece
a pickle shellcode

775
00:48:25,680 --> 00:48:28,859
to execute austat system with

776
00:48:28,859 --> 00:48:32,520
the echo hostname parameter

777
00:48:32,520 --> 00:48:35,650
and unfortunately this was the most

778
00:48:35,650 --> 00:48:39,310
on that is publicly available for pickle
so kind of our spot

779
00:48:39,310 --> 00:48:43,560
whole discussion what you can do it
pickle and got a paper that's

780
00:48:43,560 --> 00:48:48,790
ray ready to be submitted turns out you
can go a lot further

781
00:48:48,790 --> 00:48:54,440
just that as some issues with that to
let's look at that

782
00:48:54,440 --> 00:48:59,029
Rishi I think it's quite cool

783
00:48:59,029 --> 00:49:04,220
rights wanna gotcha is the Python

784
00:49:04,220 --> 00:49:07,480
is object that we edited earlier so
let's

785
00:49:07,480 --> 00:49:12,359
completely clear it and

786
00:49:12,359 --> 00:49:15,660
let's try that shellcode so

787
00:49:15,660 --> 00:49:19,849
will perform a directory listing

788
00:49:19,849 --> 00:49:26,849
right that back into the catch you'll
find

789
00:49:35,470 --> 00:49:38,810
okay we expect that to happen right so

790
00:49:38,810 --> 00:49:43,100
what's happened is that pickles been
loaded but the page break

791
00:49:43,100 --> 00:49:48,330
however if you look in logs love that

792
00:49:48,330 --> 00:49:51,550
guess we've got up executing this is in
the log file

793
00:49:51,550 --> 00:49:54,600
of the server

794
00:49:54,600 --> 00:49:58,810
right so the command executes but we
don't see output within the web page

795
00:49:58,810 --> 00:50:02,290
and the page breaks let's see if we can
work on this a little bit

796
00:50:02,290 --> 00:50:08,990
some just gonna

797
00:50:08,990 --> 00:50:13,260
restore the steward was it's a virtual
machine we can stop playing with it it's

798
00:50:13,260 --> 00:50:14,380
got a stacked for

799
00:50:14,380 --> 00:50:18,280
kinda got registers Medical's a member

800
00:50:18,280 --> 00:50:21,770
so by playing a little bit with pickle

801
00:50:21,770 --> 00:50:28,770
we figure out that you can actually get
this thing its use asleep we figure out

802
00:50:30,210 --> 00:50:31,240
some shellcode

803
00:50:31,240 --> 00:50:38,240
right it is

804
00:50:47,810 --> 00:50:51,850
respect the cash know what is our
expectation here what to expect to see

805
00:50:51,850 --> 00:50:55,020
is the page taken a while to load

806
00:50:55,020 --> 00:51:00,890
and eventually it should load
successfully and so we'll see at the

807
00:51:00,890 --> 00:51:01,280
bottom

808
00:51:01,280 --> 00:51:04,840
waiting waiting and if you count to 10
very roughly

809
00:51:04,840 --> 00:51:08,600
after 10 seconds a page load and
shouldn't break

810
00:51:08,600 --> 00:51:11,990
going well right so the page has a
broken this is a good sign

811
00:51:11,990 --> 00:51:16,950
lost lead well this basically two more
steps the question then becomes well now

812
00:51:16,950 --> 00:51:19,140
we can get stuff to execute but we're
not seen it

813
00:51:19,140 --> 00:51:23,250
any way that we can. make this work a
little better

814
00:51:23,250 --> 00:51:26,310
turns out the is so withdraws

815
00:51:26,310 --> 00:51:30,060
the Python libraries we find is a
subprocess module

816
00:51:30,060 --> 00:51:36,460
that'll return the contents

817
00:51:36,460 --> 00:51:41,260
love come on so what are the problems
with of that system is it doesn't return

818
00:51:41,260 --> 00:51:45,100
the contents bras that we can I get

819
00:51:45,100 --> 00:51:52,100
execution seems to come back let's make
that even better

820
00:51:52,180 --> 00:51:59,180
it's possible premises

821
00:52:04,090 --> 00:52:09,710
means broke so always a bit of fun

822
00:52:09,710 --> 00:52:16,550
any there yes and I'm getting

823
00:52:16,550 --> 00:52:20,440
I can execute arbitrary commands and get
the data back inside the web page

824
00:52:20,440 --> 00:52:24,050
and poss in any parameters that I want

825
00:52:24,050 --> 00:52:27,630
Mon which is

826
00:52:27,630 --> 00:52:31,490
a pretty big deal like it's like

827
00:52:31,490 --> 00:52:38,130
thank you for that

828
00:52:38,130 --> 00:52:42,280
no sir when I say it's a pretty big deal

829
00:52:42,280 --> 00:52:45,620
in the sense that a.m. we we lookin up
are

830
00:52:45,620 --> 00:52:49,370
at systems that have multiple
assumptions that are

831
00:52:49,370 --> 00:52:52,400
being violated some memcached a bunch of
assumptions

832
00:52:52,400 --> 00:52:56,220
pickle had a whole bunch of assumptions
and together its kinda made a

833
00:52:56,220 --> 00:52:59,750
pretty messy situation okay so

834
00:52:59,750 --> 00:53:03,230
thats a difficult thing over to move

835
00:53:03,230 --> 00:53:06,980
quite quickly the fixes for all other
stuff is quite simple

836
00:53:06,980 --> 00:53:10,540
done exposure memcached internet doesn't
support

837
00:53:10,540 --> 00:53:14,740
indication at this point in most
libraries so if you run memcache

838
00:53:14,740 --> 00:53:18,480
cannot be exposed to anyone except
people absolutely trust

839
00:53:18,480 --> 00:53:22,800
the small local host if that's possible
if you're live we support it

840
00:53:22,800 --> 00:53:26,190
convert to settle you can disable the
code

841
00:53:26,190 --> 00:53:30,770
if you want if you're running a website
protect a password

842
00:53:30,770 --> 00:53:34,770
properly one coming

843
00:53:34,770 --> 00:53:37,520
just back to this point that I made
about the simplification of the Deaf

844
00:53:37,520 --> 00:53:38,590
provisioning process

845
00:53:38,590 --> 00:53:43,460
it can be dismissed but I think it's
quite interesting

846
00:53:43,460 --> 00:53:46,990
that when we've got this nah example %uh

847
00:53:46,990 --> 00:53:50,260
to pull it monopoly design but the
assumptions that were made when

848
00:53:50,260 --> 00:53:51,430
designing the system's

849
00:53:51,430 --> 00:53:54,900
haven't stood the test of time and so
seven races later

850
00:53:54,900 --> 00:53:59,200
Inc onto these kind of these issues and

851
00:53:59,200 --> 00:54:02,520
with making less knowledgeable people
responsible for security

852
00:54:02,520 --> 00:54:06,380
you know you get things like this I
think this was on Rackspace's website

853
00:54:06,380 --> 00:54:09,470
so hope and a great modern audience

854
00:54:09,470 --> 00:54:13,990
dot years but they feature is named
quite prominently

855
00:54:13,990 --> 00:54:18,170
on the website basically what it says is
he's sitting in front of the machine

856
00:54:18,170 --> 00:54:21,930
and it's just logged in as root on the
machine that is

857
00:54:21,930 --> 00:54:26,620
just booted up on the cloud service and
he's never used the next before and I've

858
00:54:26,620 --> 00:54:28,400
got to work in the next machine and its
reach

859
00:54:28,400 --> 00:54:31,510
and that's the guy who

860
00:54:31,510 --> 00:54:34,920
is not deploying software successful on
the Internet

861
00:54:34,920 --> 00:54:39,850
and he works for university it's likely
that the University come to depend on

862
00:54:39,850 --> 00:54:42,970
service and some way so this conflation
brawls

863
00:54:42,970 --> 00:54:46,070
between you know you

864
00:54:46,070 --> 00:54:49,510
you have an Amazon account now you can
run machines on the Internet it's

865
00:54:49,510 --> 00:54:50,860
something that we need to be ready

866
00:54:50,860 --> 00:54:55,110
really where okay

867
00:54:55,110 --> 00:54:58,760
one random thoughts continue I thought
it couldn't been you when I first found

868
00:54:58,760 --> 00:54:59,160
it

869
00:54:59,160 --> 00:55:03,270
but in almost a year since it's been
arts

870
00:55:03,270 --> 00:55:07,120
unknowns told me that they found it for
subtitles kinda weird given its old

871
00:55:07,120 --> 00:55:11,460
there's other ways re-imagined as other
tricks to try and figure out the cash

872
00:55:11,460 --> 00:55:16,180
they're over there if you put it on the
internet know that it gets stored

873
00:55:16,180 --> 00:55:19,200
places you never thought your facebook
data 17 someone's

874
00:55:19,200 --> 00:55:22,360
memcached 6 posts on the Internet I
guess

875
00:55:22,360 --> 00:55:25,610
and

876
00:55:25,610 --> 00:55:29,290
couple places to keep looking up

877
00:55:29,290 --> 00:55:32,950
the one thing I leave you with is if you
thought that read us with any better

878
00:55:32,950 --> 00:55:37,100
if you're a big fan read us actually
read this is Wes serratus

879
00:55:37,100 --> 00:55:40,650
supports the explicit retrieve look easy
political

880
00:55:40,650 --> 00:55:44,200
right I think this

881
00:55:44,200 --> 00:55:47,420
not too much time left any questions
like maybe take

882
00:55:47,420 --> 00:55:54,420
one allies will discuss lunch will be
easy thank you very much

883
00:55:56,500 --> 00:56:03,500
thank you very much more think very
interesting stuff

884
00:56:05,380 --> 00:56:08,690
um would take two or three minutes to
change the laptops

885
00:56:08,690 --> 00:56:13,100
from next will start and give some of
the people from the defense tricks

886
00:56:13,100 --> 00:56:14,480
opportunity to change rooms

