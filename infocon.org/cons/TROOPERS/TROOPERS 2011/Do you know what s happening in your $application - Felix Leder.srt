1
00:00:02,169 --> 00:00:04,080
okay last talk

2
00:00:04,080 --> 00:00:07,470
for today and last talk for this year's

3
00:00:07,470 --> 00:00:10,490
first conference blasters done by

4
00:00:10,490 --> 00:00:13,679
physically tough elected a it's quite
well known I think

5
00:00:13,679 --> 00:00:16,990
especially with work about configure
analyzes

6
00:00:16,990 --> 00:00:21,210
I but I think the topic today's little
bit different

7
00:00:21,210 --> 00:00:24,660
a.m. for look at the title so

8
00:00:24,660 --> 00:00:28,930
let's see what Felix has a stutter on
you stuff

9
00:00:28,930 --> 00:00:32,480
alright so I'm not today I'm not gonna
share

10
00:00:32,480 --> 00:00:36,100
my analysis results about some random
where I was looking at

11
00:00:36,100 --> 00:00:39,530
I'm today I'm gonna share too with you
and actually

12
00:00:39,530 --> 00:00:43,530
they're not many people in here anymore
but a.m. the lead people that stayed

13
00:00:43,530 --> 00:00:45,820
until the very end you will get
something very special

14
00:00:45,820 --> 00:00:50,550
because I'm I would provide a tool to
you and you can download and try it out

15
00:00:50,550 --> 00:00:54,610
to ride rootkits and piping on work is
if you are

16
00:00:54,610 --> 00:00:59,149
a black cat or monitoring tools if
you're a grey had a whitehead

17
00:00:59,149 --> 00:01:03,109
and because I'd like to get to know the
audience please all the black hence

18
00:01:03,109 --> 00:01:06,830
black hat stand up and go to the right
side the white hat stand up and go to

19
00:01:06,830 --> 00:01:09,729
the left side and the grey it's in the
middle so that I know who I'm talking to

20
00:01:09,729 --> 00:01:10,229
okay

21
00:01:10,229 --> 00:01:13,460
thank you very much okay um

22
00:01:13,460 --> 00:01:17,259
well what I'm going to talk about this
actually work I've done with the cali

23
00:01:17,259 --> 00:01:21,060
he's called on employment I'm we at
working together at the University of

24
00:01:21,060 --> 00:01:21,659
Bonn and

25
00:01:21,659 --> 00:01:25,479
fall for Research Institute a called FK

26
00:01:25,479 --> 00:01:28,659
if kike it's difficult in

27
00:01:28,659 --> 00:01:31,670
in English alright and the question is

28
00:01:31,670 --> 00:01:35,200
well how do we know what's happening
inside an application

29
00:01:35,200 --> 00:01:38,640
wife for Tom PDF or Acrobat Reader

30
00:01:38,640 --> 00:01:42,720
in the announcement but basically you
can use any application so

31
00:01:42,720 --> 00:01:46,220
really have a look at the application
you want to meet or a rootkit

32
00:01:46,220 --> 00:01:49,299
and you can do it with this so

33
00:01:49,299 --> 00:01:53,740
I'm saying for the one person it's
wickets for the others monitoring tool

34
00:01:53,740 --> 00:01:56,869
because we're doing and noses may wear
and

35
00:01:56,869 --> 00:02:00,229
threat analysis we r calling it
monitoring tools

36
00:02:00,229 --> 00:02:03,960
if you're a black hat and you want it or
in the system well you put it would kids

37
00:02:03,960 --> 00:02:07,540
but the the technology behind both is in
most cases the same

38
00:02:07,540 --> 00:02:11,480
so let's have a quick overview about
different types of

39
00:02:11,480 --> 00:02:14,770
rootkits monitoring tools techniques
that you can use

40
00:02:14,770 --> 00:02:17,819
let's start at the very high level so

41
00:02:17,819 --> 00:02:21,580
user space or ring 3 so um

42
00:02:21,580 --> 00:02:25,840
what many people think of more nato ring
and ring 3 is for example running a

43
00:02:25,840 --> 00:02:26,580
debugger

44
00:02:26,580 --> 00:02:29,670
and any use break points at specific

45
00:02:29,670 --> 00:02:33,120
functions for example that you're
interested in or when

46
00:02:33,120 --> 00:02:36,769
specific memory that you're interested
in is actually excess stuff like that

47
00:02:36,769 --> 00:02:40,010
order want more and more other tools are
using

48
00:02:40,010 --> 00:02:43,370
API hoax that means you're pitching the
coat

49
00:02:43,370 --> 00:02:46,489
while its well running or before this
run

50
00:02:46,489 --> 00:02:51,340
and then you redirect every function
call to your own functions

51
00:02:51,340 --> 00:02:56,150
so basically like a rootkit really the
big advantage of this approach

52
00:02:56,150 --> 00:02:59,690
is that you can observe everything it's
going on

53
00:02:59,690 --> 00:03:03,730
inside the program you see stuff for
example before it's being in cryptid

54
00:03:03,730 --> 00:03:08,840
lying around in memory plain text the
disadvantage of this approach

55
00:03:08,840 --> 00:03:12,430
is well it can easily be detected
because you were fiddling around

56
00:03:12,430 --> 00:03:15,440
in the process if you have debugger
detection

57
00:03:15,440 --> 00:03:19,800
you can detect the debugger if you have
API hooks some people can scan through

58
00:03:19,800 --> 00:03:22,280
the memory and see if their hopes and
the court somewhere

59
00:03:22,280 --> 00:03:25,849
so can easily be detected that's why

60
00:03:25,849 --> 00:03:29,959
well most modern warships they go one
level down actually they're going

61
00:03:29,959 --> 00:03:34,680
three levels down touring 0 but I am
most people's operating systems have

62
00:03:34,680 --> 00:03:38,000
levels 12 so then the idea of

63
00:03:38,000 --> 00:03:41,489
this rooted morning Tory is to

64
00:03:41,489 --> 00:03:45,040
hope some third say certain things in
the corner space

65
00:03:45,040 --> 00:03:49,170
most popular is actually the interface
between

66
00:03:49,170 --> 00:03:52,720
the user mode and the corner mode when
some applications requesting

67
00:03:52,720 --> 00:03:54,140
functionality from the kernel

68
00:03:54,140 --> 00:03:57,260
other options are hooking interrupts

69
00:03:57,260 --> 00:04:00,989
for example when a keyboard key is
pressed or um

70
00:04:00,989 --> 00:04:04,950
I R P looking so when drive against
certain data other options

71
00:04:04,950 --> 00:04:08,330
well I miss are some call backs all
kinds of stuff

72
00:04:08,330 --> 00:04:11,590
the advantage of being in the kernel is
it's very stealthy

73
00:04:11,590 --> 00:04:15,189
so from userspace application you can
hardly

74
00:04:15,189 --> 00:04:18,739
understand or see if there is a whole
installed or not

75
00:04:18,739 --> 00:04:22,370
I'm the disadvantages only see

76
00:04:22,370 --> 00:04:26,990
every interaction with the kernel and if
you for example think about your browser

77
00:04:26,990 --> 00:04:31,490
your browser is when it's interesting
data is interesting in userspace

78
00:04:31,490 --> 00:04:35,310
and when it sent over the network that
is encrypt it so you don't see that the

79
00:04:35,310 --> 00:04:39,139
corner interfaces

80
00:04:39,139 --> 00:04:43,229
alright but there's also more to
machines than just reading 0 and bring

81
00:04:43,229 --> 00:04:43,970
three

82
00:04:43,970 --> 00:04:47,720
so there's a ring called -1 actually
entered in

83
00:04:47,720 --> 00:04:51,470
ever planned for that but now they have
reminds one in some machine sums if you

84
00:04:51,470 --> 00:04:52,620
look at pictures

85
00:04:52,620 --> 00:04:56,330
and there the idea is that you are more
nato ring

86
00:04:56,330 --> 00:05:00,240
the machine the operating system that's
running from outs I the real CPU

87
00:05:00,240 --> 00:05:03,620
so basically virtual machine and you're
monitoring everything

88
00:05:03,620 --> 00:05:08,270
that's happening in side the virtual
machine

89
00:05:08,270 --> 00:05:11,280
that is the big advantage that even if
you are in the corner of the operating

90
00:05:11,280 --> 00:05:12,139
system

91
00:05:12,139 --> 00:05:15,979
Yukon see that you are being money
toward

92
00:05:15,979 --> 00:05:20,800
you can see that virtual machine is
around you around the operating system

93
00:05:20,800 --> 00:05:24,110
but what does that mean today don't most
companies now are working

94
00:05:24,110 --> 00:05:28,620
in the cloud so in the cloud means that
you're running in a virtual machine and

95
00:05:28,620 --> 00:05:29,340
you

96
00:05:29,340 --> 00:05:32,340
well doesn't matter if you if the
computer you want to own is

97
00:05:32,340 --> 00:05:36,479
in a cloud or if it's a bare metal
machine in most cases

98
00:05:36,479 --> 00:05:40,630
um doesn't another disadvantage this
approach is performance

99
00:05:40,630 --> 00:05:45,669
because well or virtualization
especially intensive money tori is very

100
00:05:45,669 --> 00:05:46,710
expensive

101
00:05:46,710 --> 00:05:50,330
a rodeo has explained his way of tracing
programs

102
00:05:50,330 --> 00:05:53,949
I'm that he's doing there also is also
research on tracing the every

103
00:05:53,949 --> 00:05:54,940
instruction

104
00:05:54,940 --> 00:05:58,270
inside a virtual machine and normally
defector

105
00:05:58,270 --> 00:06:02,100
the overhead is a factor of 1000 to
10,000 times

106
00:06:02,100 --> 00:06:05,880
and we did some experience with that and
the problem was that

107
00:06:05,880 --> 00:06:08,780
I'm suddenly we didn't get as our
connections connected anymore because

108
00:06:08,780 --> 00:06:10,449
the overhead was too long

109
00:06:10,449 --> 00:06:14,130
for ke kam he algorithms and so on

110
00:06:14,130 --> 00:06:19,050
so kind of difficult and also if you
want to morning to an operating system

111
00:06:19,050 --> 00:06:22,740
you gonna have a virtual machine that
inspecting the memory of that specific

112
00:06:22,740 --> 00:06:25,990
operating system version that means if
you're running

113
00:06:25,990 --> 00:06:31,060
windows xp service pack 2 you root it
doesn't work with Windows XP Service

114
00:06:31,060 --> 00:06:32,680
Pack 3 for example

115
00:06:32,680 --> 00:06:37,530
you got a right and not of lot of
rootkits or middle-class to actually be

116
00:06:37,530 --> 00:06:40,830
able to my way to everything okay then
there are

117
00:06:40,830 --> 00:06:44,490
ring minus to and ring minus three
wickets um

118
00:06:44,490 --> 00:06:47,630
ring ministry was ok talk at like it I
guess somebody would come up with the

119
00:06:47,630 --> 00:06:49,660
ring minus four months five months six

120
00:06:49,660 --> 00:06:53,330
it next time because numbers just have
to decrease in

121
00:06:53,330 --> 00:06:58,740
sex the idea here is to actually
manipulate hardware

122
00:06:58,740 --> 00:07:03,000
so for example the firmware of your
network controller acting Comptroller

123
00:07:03,000 --> 00:07:06,830
or using Intel AMT active management
technology

124
00:07:06,830 --> 00:07:10,520
which is which allows you to control the
CPU from outside

125
00:07:10,520 --> 00:07:14,500
your computer over the network so

126
00:07:14,500 --> 00:07:18,150
the advantage of this is that nobody
normally nobody looks at this

127
00:07:18,150 --> 00:07:23,539
who has ever download the firmware for
boys network adapter

128
00:07:23,539 --> 00:07:26,970
12 Wow 3 for okay

129
00:07:26,970 --> 00:07:30,490
lead audience what alright

130
00:07:30,490 --> 00:07:35,500
did you find my way in there did you
find an email where in there

131
00:07:35,500 --> 00:07:38,830
or rootkits you don't know

132
00:07:38,830 --> 00:07:42,449
hat because the tools for that don't
exist it's pretty hard

133
00:07:42,449 --> 00:07:45,849
I know some prototypes for that but I am

134
00:07:45,849 --> 00:07:49,410
those prototypes actually pretty
unsophisticated especially for the

135
00:07:49,410 --> 00:07:52,039
network controllers because you don't
have much space

136
00:07:52,039 --> 00:07:55,530
you know I'm doesn't even know by heart
how much

137
00:07:55,530 --> 00:07:59,830
Rome you have any network controller too
few kilobytes per

138
00:07:59,830 --> 00:08:04,560
6k a gonna be very unit

139
00:08:04,560 --> 00:08:08,090
yeah for ACPI Texas because the guy that
did research actually

140
00:08:08,090 --> 00:08:11,310
really went into the topic for network
adapters

141
00:08:11,310 --> 00:08:14,740
so little more tricky okay

142
00:08:14,740 --> 00:08:17,830
the cool stuff about it is your for
memory access

143
00:08:17,830 --> 00:08:22,020
so you can read everything in memory for
example from your network are

144
00:08:22,020 --> 00:08:26,940
using direct memory access for example
sometimes with some technologies like Mt

145
00:08:26,940 --> 00:08:29,979
you can even control and steer your CPU

146
00:08:29,979 --> 00:08:33,240
um if you really want to rights

147
00:08:33,240 --> 00:08:37,469
firmware rooted it's not really
convenient gotta dig deep and

148
00:08:37,469 --> 00:08:41,269
have to do some tweaks and you can
easily mess up things

149
00:08:41,269 --> 00:08:45,580
even hotter from my point of view than
corner shooting for example

150
00:08:45,580 --> 00:08:49,640
also you are not able to might or
specific events let's say for example

151
00:08:49,640 --> 00:08:52,820
you have process that you won't want it
or when it's

152
00:08:52,820 --> 00:08:55,910
suddenly writing a file to disk

153
00:08:55,910 --> 00:09:00,370
its Hartlepool it's not always possible
all those technologies

154
00:09:00,370 --> 00:09:03,709
me so you gotta be careful alright

155
00:09:03,709 --> 00:09:07,450
let's have a closer look at what
actually is happening so the first thing

156
00:09:07,450 --> 00:09:10,709
API hooking that's happening in
userspace

157
00:09:10,709 --> 00:09:13,779
an that's how you actually more into
everything that's going on

158
00:09:13,779 --> 00:09:17,800
the program by example here's now for a
middleware file but you can also imagine

159
00:09:17,800 --> 00:09:19,050
the same thing for you

160
00:09:19,050 --> 00:09:22,640
good kid and some random application

161
00:09:22,640 --> 00:09:25,899
so the idea in this example is you want
to see whenever a file

162
00:09:25,899 --> 00:09:29,010
is created so the file you

163
00:09:29,010 --> 00:09:32,209
function you're looking for too many
tour is called create file

164
00:09:32,209 --> 00:09:37,330
W because that's the apoe4 opening or
creating a file

165
00:09:37,330 --> 00:09:40,410
so Europe could what does basically is

166
00:09:40,410 --> 00:09:43,860
you take the first few bites of the
start of the function

167
00:09:43,860 --> 00:09:47,740
you copied to some space and memory

168
00:09:47,740 --> 00:09:51,240
then you override the start of the
function

169
00:09:51,240 --> 00:09:57,120
two-point into some other code that you
have injected somehow into the process

170
00:09:57,120 --> 00:10:00,779
like some random DL their you having a
look

171
00:10:00,779 --> 00:10:04,860
whether you want to allow to write this
file to redefine

172
00:10:04,860 --> 00:10:08,660
if so you just let it pass to the
original code which you have saved

173
00:10:08,660 --> 00:10:09,200
somewhere

174
00:10:09,200 --> 00:10:12,779
memory book as one

175
00:10:12,779 --> 00:10:16,190
known as the other and then you execute
the wrist

176
00:10:16,190 --> 00:10:20,019
of the original function so you
basically introduce a special

177
00:10:20,019 --> 00:10:24,079
piece of court executed before the
original code of the function is

178
00:10:24,079 --> 00:10:26,959
executed

179
00:10:26,959 --> 00:10:30,959
okay here's an example for kernel space
with kids and how we can implement cost

180
00:10:30,959 --> 00:10:32,790
base you rootkit

181
00:10:32,790 --> 00:10:37,529
um based on the system call table or as
a city in Windows

182
00:10:37,529 --> 00:10:41,290
so on the left hand side you have to
user mode and on the right hand side

183
00:10:41,290 --> 00:10:44,550
you have kernel-mode and whenever user

184
00:10:44,550 --> 00:10:48,820
more process once to excess some
resource that controlled by the corner

185
00:10:48,820 --> 00:10:51,990
for example a file it's issuing a
so-called

186
00:10:51,990 --> 00:10:56,200
sis court system call the corners
getting the system call in with the

187
00:10:56,200 --> 00:10:57,730
system call comes in number

188
00:10:57,730 --> 00:11:01,220
and the number is telling the corner
what the user space probe

189
00:11:01,220 --> 00:11:04,500
actually wants to do is one number for
opening a file

190
00:11:04,500 --> 00:11:07,720
one number for accessing the registry
140

191
00:11:07,720 --> 00:11:11,640
opening a network connection so complete
you about basically that's the idea

192
00:11:11,640 --> 00:11:12,670
behind it

193
00:11:12,670 --> 00:11:16,600
and then the corner has a look in his is
STT

194
00:11:16,600 --> 00:11:20,209
which number maps to which function

195
00:11:20,209 --> 00:11:23,250
and based on that function or number the
address

196
00:11:23,250 --> 00:11:26,820
the court knows what coat inside the
corner to execute

197
00:11:26,820 --> 00:11:30,420
what acre does is he manipulates this
table

198
00:11:30,420 --> 00:11:33,470
and then can say okay instead of the
original windows

199
00:11:33,470 --> 00:11:37,769
functions execute my own function first

200
00:11:37,769 --> 00:11:40,670
so there's only this one table that you
have to fix and then you control

201
00:11:40,670 --> 00:11:44,360
everything that's going into the corner

202
00:11:44,360 --> 00:11:48,089
here's the last example um virtual
machine introspection so you know it

203
00:11:48,089 --> 00:11:49,420
ring -3

204
00:11:49,420 --> 00:11:52,870
actually this is now based on binary
translation special form

205
00:11:52,870 --> 00:11:55,959
of virtualization a.m.

206
00:11:55,959 --> 00:11:59,680
this type of virtualization the
hypervisor

207
00:11:59,680 --> 00:12:03,149
takes every basic block that he can read

208
00:12:03,149 --> 00:12:07,649
and translates it into a form that he
can later on really execute on the CPU

209
00:12:07,649 --> 00:12:08,860
he doesn't only some

210
00:12:08,860 --> 00:12:12,500
transformation if there are some unsafe
memory accesses stuff like that but

211
00:12:12,500 --> 00:12:13,959
everything that's pretty safe

212
00:12:13,959 --> 00:12:17,490
is really executed on the CPU so you can
think of it

213
00:12:17,490 --> 00:12:21,190
as a just in time compiler you take
original

214
00:12:21,190 --> 00:12:24,290
x86 code for example

215
00:12:24,290 --> 00:12:27,970
and transform it into new x86 called
where you can

216
00:12:27,970 --> 00:12:33,160
at some things so in this case what the
monitoring for example happens like this

217
00:12:33,160 --> 00:12:36,600
this translation going on and in during
the translation

218
00:12:36,600 --> 00:12:40,450
the Trenton compiler finds out that
there's an Internet open a week or so

219
00:12:40,450 --> 00:12:43,920
grading internet connection we modify

220
00:12:43,920 --> 00:12:48,139
the translator in a way that we say okay
before the call is happening

221
00:12:48,139 --> 00:12:53,079
please call our money to ring function
only afterwards called the reforging

222
00:12:53,079 --> 00:12:56,540
so because the coldest recompiled stage

223
00:12:56,540 --> 00:13:00,310
we can inject any code that we want to
and Toumani Toure

224
00:13:00,310 --> 00:13:06,589
or rootkit process from outside the
virtual machine

225
00:13:06,589 --> 00:13:10,930
alright um I tell you if you really want
to have information

226
00:13:10,930 --> 00:13:14,279
and Wednesday flexible then better stay
in userspace

227
00:13:14,279 --> 00:13:17,670
even though it's easier to detect
because then you can run

228
00:13:17,670 --> 00:13:21,060
on both you can run a bare metal or
virtual machines you can run on

229
00:13:21,060 --> 00:13:23,250
different Windows versions easily
without

230
00:13:23,250 --> 00:13:26,959
big problems you can to some extent run
on different hardware so that's really

231
00:13:26,959 --> 00:13:28,730
flexible you can write

232
00:13:28,730 --> 00:13:31,750
flexible rootkits on that you don't have
to adjust

233
00:13:31,750 --> 00:13:35,649
every operating system versions and so
on and

234
00:13:35,649 --> 00:13:39,529
you can see everything as it is inside
the application

235
00:13:39,529 --> 00:13:43,610
network data before 10 cryptids you can
look at internal functions that

236
00:13:43,610 --> 00:13:47,320
never giving any output to external
functions

237
00:13:47,320 --> 00:13:52,120
like for example JavaScript interpreters

238
00:13:52,120 --> 00:13:55,980
okay and that brings us to the new
project that we've been working on

239
00:13:55,980 --> 00:13:56,480
record

240
00:13:56,480 --> 00:14:01,019
hi box pikey sandbox if it was a blanket
I would call it Python

241
00:14:01,019 --> 00:14:04,970
kids construction framework

242
00:14:04,970 --> 00:14:08,120
alright because now the interesting Pop
Tarts um

243
00:14:08,120 --> 00:14:11,860
I'm I would to ask you to ask questions
why I'm speaking

244
00:14:11,860 --> 00:14:15,620
not in the very end to get more
interactive and maybe

245
00:14:15,620 --> 00:14:19,540
give some others the chance to keep up
if I'm talking too fast

246
00:14:19,540 --> 00:14:23,709
I know it's very late in probably one or
the other is

247
00:14:23,709 --> 00:14:27,570
select go home what we choose pie tin

248
00:14:27,570 --> 00:14:31,600
because um we really like Python Python
is

249
00:14:31,600 --> 00:14:34,820
easy to write everything that you called
can be done in 10 lines up I think

250
00:14:34,820 --> 00:14:36,760
that's my statement

251
00:14:36,760 --> 00:14:42,220
you know I so the idea was to use some
high-level language

252
00:14:42,220 --> 00:14:45,290
and to be a to help other people

253
00:14:45,290 --> 00:14:48,810
to write rootkits and something that's
not a SM so assembly

254
00:14:48,810 --> 00:14:52,709
or see or Pascal or any low-level
language

255
00:14:52,709 --> 00:14:55,760
wanna people that have just normal
scripting skills to write their own

256
00:14:55,760 --> 00:14:56,670
sandbox

257
00:14:56,670 --> 00:15:02,370
monitoring solution

258
00:15:02,370 --> 00:15:05,430
fitted okay

259
00:15:05,430 --> 00:15:08,980
that's the black hat point of view no
I'm telling the you the white hat point

260
00:15:08,980 --> 00:15:10,060
of view

261
00:15:10,060 --> 00:15:13,690
think of the average FBI agent that
wants to have a look

262
00:15:13,690 --> 00:15:17,170
at Manor where right

263
00:15:17,170 --> 00:15:21,940
the FBI the black it's okay to depends
on the point of view

264
00:15:21,940 --> 00:15:25,040
know it so sure that's that's alright

265
00:15:25,040 --> 00:15:28,610
I'm that's good that you're asking for
the motivation so um

266
00:15:28,610 --> 00:15:32,279
there lots of people out there who want
to monitor for example where

267
00:15:32,279 --> 00:15:35,480
but they don't have the skills or the
training to look go deep into the

268
00:15:35,480 --> 00:15:36,519
details

269
00:15:36,519 --> 00:15:41,019
but still they need custom tools and by
providing a pipe in the face they don't

270
00:15:41,019 --> 00:15:43,959
only have to know their standard
scripting language or have to go since

271
00:15:43,959 --> 00:15:45,209
then a programming

272
00:15:45,209 --> 00:15:49,490
and still can money to everything okay
let's go a little more into the details

273
00:15:49,490 --> 00:15:53,920
and maybe you see my point when we come
to the examples

274
00:15:53,920 --> 00:15:56,990
okay soap iBooks is a framework

275
00:15:56,990 --> 00:16:00,680
for creating your own custom send boxes
and pricing

276
00:16:00,680 --> 00:16:03,740
I'm not sure if you're all familiar with
the term sandbox

277
00:16:03,740 --> 00:16:06,820
so normally when you talk about a
sandbox you're saying I

278
00:16:06,820 --> 00:16:10,120
12 run my processes in a controlled
environment where

279
00:16:10,120 --> 00:16:14,759
I see what's going on and I can make
sure that my system is not compromised

280
00:16:14,759 --> 00:16:15,810
all the time when he tore

281
00:16:15,810 --> 00:16:19,220
or the actions for the compromise so

282
00:16:19,220 --> 00:16:22,259
normally you interested for Windows
especially nowhere

283
00:16:22,259 --> 00:16:25,649
what kinda registry X entries are
accessed changed

284
00:16:25,649 --> 00:16:29,160
what kinda files I texture excess and
change and what

285
00:16:29,160 --> 00:16:32,470
what kind of network data sent over the
link or received

286
00:16:32,470 --> 00:16:36,540
know the typical actions you're
interested in and

287
00:16:36,540 --> 00:16:40,690
there are different sandboxes out there
but we found them to be

288
00:16:40,690 --> 00:16:45,750
to be inflexible so here are some use
cases for pie books before we go into

289
00:16:45,750 --> 00:16:49,209
the details how you stop by what's for
supper forensics

290
00:16:49,209 --> 00:16:52,639
wanna live system saw your investigator
you come

291
00:16:52,639 --> 00:16:55,750
to incident somewhere the system is
still running

292
00:16:55,750 --> 00:16:59,259
nobody has poured the network cable and
nobody is Porter

293
00:16:59,259 --> 00:17:02,680
power plug but you want to see what
should the militias process

294
00:17:02,680 --> 00:17:06,600
or the may be malicious processes doing

295
00:17:06,600 --> 00:17:10,160
so you can just you spy books attached
to the process

296
00:17:10,160 --> 00:17:13,270
and suddenly the processes running in a
sandbox

297
00:17:13,270 --> 00:17:16,929
so can't get out and you can provide
like a fake filesystem

298
00:17:16,929 --> 00:17:21,240
I or a fake network connections to some
extent like you can fake every protocol

299
00:17:21,240 --> 00:17:22,049
is out there

300
00:17:22,049 --> 00:17:25,620
but you can for example fake web server
locally

301
00:17:25,620 --> 00:17:31,220
and monitor with the things doing

302
00:17:31,220 --> 00:17:35,490
yes sure you can okay that's not
included in there is just use cases

303
00:17:35,490 --> 00:17:37,940
so you would have to write it for
yourself but actually that's one thing

304
00:17:37,940 --> 00:17:39,130
we r

305
00:17:39,130 --> 00:17:42,570
working on in the background so that you
can access files but everything that's

306
00:17:42,570 --> 00:17:43,380
changed

307
00:17:43,380 --> 00:17:46,600
does not get written back to the
original file but like it Nick guarantee

308
00:17:46,600 --> 00:17:47,559
folder

309
00:17:47,559 --> 00:17:50,990
so in case you are seeing that many ways
dropped you have it in a special folder

310
00:17:50,990 --> 00:17:55,600
and can analyze it separately but it
will never affect the immune system

311
00:17:55,600 --> 00:17:59,740
so Melbourne investigation that what
many people want to do

312
00:17:59,740 --> 00:18:03,140
but I am yes so far the two was not
flexible enough

313
00:18:03,140 --> 00:18:06,600
or the people are not trained well
enough

314
00:18:06,600 --> 00:18:10,169
normally you interested in all the
behavior of them and we're

315
00:18:10,169 --> 00:18:13,580
so you want to know what it is what is
the men were doing a

316
00:18:13,580 --> 00:18:16,750
like on exams that we had before

317
00:18:16,750 --> 00:18:20,610
you wanna know how it hooks into the
system how to make sure that it started

318
00:18:20,610 --> 00:18:21,350
at reboard

319
00:18:21,350 --> 00:18:26,289
all kinds of stuff like that and another
not another use case that's what may be

320
00:18:26,289 --> 00:18:27,640
more interested for the

321
00:18:27,640 --> 00:18:31,600
gray heads is you can do what could
research so you can basically write your

322
00:18:31,600 --> 00:18:32,440
own

323
00:18:32,440 --> 00:18:38,360
user land good kid and can later I see
if you too was a working protected

324
00:18:38,360 --> 00:18:41,610
here are some sandbox that already exist
um the free ones other

325
00:18:41,610 --> 00:18:45,169
website website's down their new biz CW
sandbox

326
00:18:45,169 --> 00:18:49,679
a Joe books to some extent and on the
other hand over here we have more the

327
00:18:49,679 --> 00:18:51,799
commercial ones like Norman sandbox or

328
00:18:51,799 --> 00:18:55,160
gf I sandbox with which is kinda the
successor

329
00:18:55,160 --> 00:19:00,760
of the CW sandbox the problem for all of
those products almost all those products

330
00:19:00,760 --> 00:19:01,200
is

331
00:19:01,200 --> 00:19:04,700
they have hot called monitoring
capabilities

332
00:19:04,700 --> 00:19:07,190
that means you can say i'm only
interested in the fires are all

333
00:19:07,190 --> 00:19:09,480
interested in the network traffic

334
00:19:09,480 --> 00:19:14,330
you have to use the full set of features
and it has an influence on performance

335
00:19:14,330 --> 00:19:17,700
and is also may be detectable because of
that

336
00:19:17,700 --> 00:19:21,590
for the more you can't reconfigure it at
runtime you say maybe okay during the

337
00:19:21,590 --> 00:19:24,860
first half of the analysis of first
minute I'm just interested in

338
00:19:24,860 --> 00:19:29,450
propagation or well how it installs
itself in the system

339
00:19:29,450 --> 00:19:32,480
and afterwards your interest in the
network traffic but not during the first

340
00:19:32,480 --> 00:19:34,049
part because you know there's some crap

341
00:19:34,049 --> 00:19:37,289
I'm there's no way that you can
configure

342
00:19:37,289 --> 00:19:42,700
ascend books like this and furthermore
most of them are close or so

343
00:19:42,700 --> 00:19:46,020
there's no chance for you to do some

344
00:19:46,020 --> 00:19:50,280
adoptions to your own use cases

345
00:19:50,280 --> 00:19:53,870
here's one of the problems that comes
with some with CW sent box but the

346
00:19:53,870 --> 00:19:54,360
others are

347
00:19:54,360 --> 00:19:58,240
have similar problems I'm the numbers
are really old

348
00:19:58,240 --> 00:20:01,940
so now you gotta think of not large in
number

349
00:20:01,940 --> 00:20:06,659
they were 55,000 new malware samples per
day

350
00:20:06,659 --> 00:20:10,419
that tender lips court in 2009

351
00:20:10,419 --> 00:20:14,010
90,000 unique zoos binaries according
semantic in

352
00:20:14,010 --> 00:20:17,070
or 2.9 million new middleware samples

353
00:20:17,070 --> 00:20:20,500
unique by md5 just in 2009 4:02

354
00:20:20,500 --> 00:20:25,510
held in 10 the numbers have you grown
but I didn't get the daily sample rate:

355
00:20:25,510 --> 00:20:29,220
so if you look at the web page CW
sandbox s

356
00:20:29,220 --> 00:20:32,900
if you run one license you can typically
analyze 500 samples

357
00:20:32,900 --> 00:20:36,750
per day on one machine

358
00:20:36,750 --> 00:20:39,950
so you see you need quite some machines

359
00:20:39,950 --> 00:20:46,059
or you only can every cent to run for
1.5 seconds to get information

360
00:20:46,059 --> 00:20:49,390
any rough guess how many samples
actually start doing something in 1.5

361
00:20:49,390 --> 00:20:51,809
seconds

362
00:20:51,809 --> 00:20:55,950
a lot of them I'm not to convince
because most of the samples I have

363
00:20:55,950 --> 00:20:59,840
I'm not even loaded correctly but the PE
loader on online virtual machines and

364
00:20:59,840 --> 00:21:00,659
that time in

365
00:21:00,659 --> 00:21:07,659
cw7 is running a virtual machines

366
00:21:18,510 --> 00:21:23,220
very very good so the question was on
there are some men were sentenced

367
00:21:23,220 --> 00:21:27,180
that just two crappy things for the
first that's a

368
00:21:27,180 --> 00:21:30,710
two minutes and then only start doing
things yes

369
00:21:30,710 --> 00:21:34,610
there are lots of them and actually
that's a a funny way how you see the

370
00:21:34,610 --> 00:21:36,490
arms race between analysts and

371
00:21:36,490 --> 00:21:40,000
made aware of this so um those send
boxes

372
00:21:40,000 --> 00:21:43,960
five min samples per day so about two
minutes two to three minutes per sample

373
00:21:43,960 --> 00:21:47,090
is what they take so if you just put to
sleep

374
00:21:47,090 --> 00:21:51,280
for three minutes in the sample they the
items will never get any results

375
00:21:51,280 --> 00:21:54,550
so what did a CW sandbox guys doing

376
00:21:54,550 --> 00:21:58,730
well they say whenever they're is a
sleep of longer than let's say 10

377
00:21:58,730 --> 00:21:59,280
seconds

378
00:21:59,280 --> 00:22:03,210
we will patch it to be shorter to 10
seconds and then see what's going on

379
00:22:03,210 --> 00:22:06,320
what are the bad guys doing well they
implemented

380
00:22:06,320 --> 00:22:10,600
busy waiting base in the loop so what's
the next step for the

381
00:22:10,600 --> 00:22:14,410
anytime anywhere guys well do some
static analysis and see which looks

382
00:22:14,410 --> 00:22:15,180
actually

383
00:22:15,180 --> 00:22:18,360
relevant for what's going on and up
ordered

384
00:22:18,360 --> 00:22:22,190
legal probably all already say what the
next step is well risking your

385
00:22:22,190 --> 00:22:29,190
on forever right

386
00:22:41,340 --> 00:22:44,440
you have some outside morning touring
and then you can see whenever them on

387
00:22:44,440 --> 00:22:45,400
someone inflation

388
00:22:45,400 --> 00:22:49,630
going on in there actual process you
manipulating so lots of ways and

389
00:22:49,630 --> 00:22:54,790
then I have to pick your first process
again okay and SK

390
00:22:54,790 --> 00:22:58,340
so did the idea for creating ascend
books framework

391
00:22:58,340 --> 00:23:02,470
in Python is well we only want to
monitor what's really required

392
00:23:02,470 --> 00:23:06,210
and not the whole trip that although
sandboxes buddy for DeNaples

393
00:23:06,210 --> 00:23:10,220
we also want to be able to be to
reconfigure the scripts and the Hawks

394
00:23:10,220 --> 00:23:13,360
that we are introducing at runtime

395
00:23:13,360 --> 00:23:17,560
so maybe we will remove some books to
improve performance maybe add some new

396
00:23:17,560 --> 00:23:19,170
books depending on what's going on

397
00:23:19,170 --> 00:23:22,490
inside the binary so for example we can
create

398
00:23:22,490 --> 00:23:26,950
our own sandbox for one specific matter
where family that's more efficient

399
00:23:26,950 --> 00:23:30,870
that can maybe stop after 5 seconds
because the most relevant data

400
00:23:30,870 --> 00:23:34,960
has already been extracted after that
time I'm gonna show you an example later

401
00:23:34,960 --> 00:23:35,210
on

402
00:23:35,200 --> 00:23:38,390
so also we won't have arbitrary

403
00:23:38,390 --> 00:23:42,750
poking that means we don't not only want
to hook API functions

404
00:23:42,750 --> 00:23:46,090
so anything that we knows provides but
we also want to be able

405
00:23:46,090 --> 00:23:51,270
to mount or things that are going on
inside the application but on the other

406
00:23:51,270 --> 00:23:51,660
hand

407
00:23:51,660 --> 00:23:54,920
we want it to be he is easy as possible

408
00:23:54,920 --> 00:23:58,460
and because well we are familiar with
Python sorry will be

409
00:23:58,460 --> 00:24:02,770
really bad I'm we decided on

410
00:24:02,770 --> 00:24:06,140
using Python so is no need for using
assembly or see

411
00:24:06,140 --> 00:24:09,380
unfortunately haven't reached the level
of UML yet

412
00:24:09,380 --> 00:24:13,360
so show interest in creating your own
send boxes using YouMail

413
00:24:13,360 --> 00:24:16,610
future work alright

414
00:24:16,610 --> 00:24:20,710
and for sure um open source so in the
end I'm gonna show the a

415
00:24:20,710 --> 00:24:25,400
I'm place we can download the whole
stuff that you're seeing no um

416
00:24:25,400 --> 00:24:28,410
what we're doing is in order to run
python scripts

417
00:24:28,410 --> 00:24:32,390
we are injecting a Python interpreter in
into the process

418
00:24:32,390 --> 00:24:35,620
so from I never point a few that means

419
00:24:35,620 --> 00:24:38,930
we can to scripting moment scripting
inside

420
00:24:38,930 --> 00:24:42,460
real x86 applications we don't have to
do

421
00:24:42,460 --> 00:24:46,200
compilation we can reconfigure the
scripts and you know that

422
00:24:46,200 --> 00:24:49,400
most other things can be done in 10
lines of code in Python

423
00:24:49,400 --> 00:24:54,120
if you don't believe me well the best
live with other ones we just say live we

424
00:24:54,120 --> 00:24:54,790
don't in it

425
00:24:54,790 --> 00:24:58,390
live we don't run right knee only have
two lines of and that's how it works in

426
00:24:58,390 --> 00:24:59,140
most cases

427
00:24:59,140 --> 00:25:02,700
okay um but it's pretty boring if you

428
00:25:02,700 --> 00:25:08,130
12 have access to the no one ever
interface for example if you actually

429
00:25:08,130 --> 00:25:11,180
one of those guys that like to dig into
the hardware into the

430
00:25:11,180 --> 00:25:14,480
assembly I'm but still ya

431
00:25:14,480 --> 00:25:18,020
you like Python because it's just very
easy to write and you get

432
00:25:18,020 --> 00:25:22,640
results really easily so we also
implement ways to easily access like the

433
00:25:22,640 --> 00:25:23,450
for memory

434
00:25:23,450 --> 00:25:26,930
to excess all the registers to excess

435
00:25:26,930 --> 00:25:31,000
the function para mi just for the
functions that we're monitoring so that

436
00:25:31,000 --> 00:25:31,430
your

437
00:25:31,430 --> 00:25:35,170
if you want you can dig deep but you
don't have to if you're not familiar

438
00:25:35,170 --> 00:25:36,179
with those levels

439
00:25:36,179 --> 00:25:42,260
so here's the first temple if you count
the lines with the area code and not the

440
00:25:42,260 --> 00:25:47,370
the blank lines it seven lines of code
and

441
00:25:47,370 --> 00:25:54,370
the idea is to have a look

442
00:25:57,760 --> 00:26:00,870
the ideas to money to or every
JavaScript

443
00:26:00,870 --> 00:26:07,550
that is about to be executed in the
Internet Explorer

444
00:26:07,550 --> 00:26:11,360
so the first thing we need is

445
00:26:11,360 --> 00:26:18,360
Process Explorer because I'm gonna
attach to the process

446
00:26:20,260 --> 00:26:25,130
not much space here let's see okay now
I'm gonna start

447
00:26:25,130 --> 00:26:32,130
Internet Explorer

448
00:26:34,659 --> 00:26:38,029
okay to know there's one tricky part and
that can go wrong no

449
00:26:38,029 --> 00:26:41,519
if you have a look at the pros as there
are three internet stores now so I hope

450
00:26:41,519 --> 00:26:42,849
I'm gonna pick the right one now

451
00:26:42,849 --> 00:26:46,029
alright

452
00:26:46,029 --> 00:26:49,559
close that one we inject

453
00:26:49,559 --> 00:26:53,899
ourself descriptive you've seen in this
light before into process to

454
00:26:53,899 --> 00:26:57,029
76 switches the first one over here

455
00:26:57,029 --> 00:27:01,279
okay running

456
00:27:01,279 --> 00:27:04,969
and now open attests

457
00:27:04,969 --> 00:27:11,749
JavaScript page okay

458
00:27:11,749 --> 00:27:15,320
so first Lords hello and afterwards its

459
00:27:15,320 --> 00:27:19,019
rights to successful during at to the
page

460
00:27:19,019 --> 00:27:22,200
alright I'm I hope I got the road the
right process now

461
00:27:22,200 --> 00:27:25,629
so what we've got now is a a lot

462
00:27:25,629 --> 00:27:29,129
and he can see I'm that we are still
developing

463
00:27:29,129 --> 00:27:32,769
because of their messages out there but
you can also see

464
00:27:32,769 --> 00:27:37,570
the scripts they were executed hope it's
big enough can read it

465
00:27:37,570 --> 00:27:41,149
so here's the JavaScript as it is before
is compiled

466
00:27:41,149 --> 00:27:44,719
by the index for you so you can see
there's an evil

467
00:27:44,719 --> 00:27:47,749
on an alert and there's also
document.write

468
00:27:47,749 --> 00:27:51,089
and we are seeing this now so basically

469
00:27:51,089 --> 00:27:54,239
that stuff it is compiled and everything
inside email

470
00:27:54,239 --> 00:27:58,229
is also compiled so we see inside their
is another script

471
00:27:58,229 --> 00:28:01,539
selected on Compal which is just
containing Lord hello

472
00:28:01,539 --> 00:28:05,019
so we see everything here and if you
look at the

473
00:28:05,019 --> 00:28:08,200
script it's really easy to do

474
00:28:08,200 --> 00:28:11,859
so the only thing that you have to do is
use a pie books in it

475
00:28:11,859 --> 00:28:15,589
initialize everything and then you say I
want to install a hook

476
00:28:15,589 --> 00:28:19,700
at a specific address which is the sea
only script compile function

477
00:28:19,700 --> 00:28:23,429
and some as a third parameter you're
giving

478
00:28:23,429 --> 00:28:27,159
the Python function that you want to be
called

479
00:28:27,159 --> 00:28:30,289
as the hope before the real fighters
executed

480
00:28:30,289 --> 00:28:33,459
up there you see the

481
00:28:33,459 --> 00:28:36,909
functions up there and then you can see
that I'm grabbing the different para

482
00:28:36,909 --> 00:28:37,349
meterse

483
00:28:37,349 --> 00:28:42,169
from the state for function so I have to
know the signature of the function which

484
00:28:42,169 --> 00:28:43,889
para meterse actually passed along

485
00:28:43,889 --> 00:28:47,690
so the first thing is a an integer
unsigned integer and

486
00:28:47,690 --> 00:28:52,479
it's the address of the object and the
second argument is a Unicode string

487
00:28:52,479 --> 00:28:53,190
which is then

488
00:28:53,190 --> 00:28:56,419
the actual JavaScript cold as it's being
executed

489
00:28:56,419 --> 00:29:00,419
and the logging line well you can see
that's another light

490
00:29:00,419 --> 00:29:04,559
a.m. all in all a very short script but
i wanna be honest with you

491
00:29:04,559 --> 00:29:08,200
that's like speak

492
00:29:08,200 --> 00:29:11,519
it's like the short script

493
00:29:11,519 --> 00:29:15,269
but if you do proper programming then

494
00:29:15,269 --> 00:29:18,609
you also have to do some or checks and
then it gets to like 20 lines of code

495
00:29:18,609 --> 00:29:22,269
so I wasn't I was cheating a little bit
but I guess

496
00:29:22,269 --> 00:29:25,339
a.m. even twenty lines of code still
acceptable if you want to write your own

497
00:29:25,339 --> 00:29:25,799
would get

498
00:29:25,799 --> 00:29:29,499
okay so what we're doing is we're using
this

499
00:29:29,499 --> 00:29:32,820
API hooking that I've explained before

500
00:29:32,820 --> 00:29:37,940
I think I don't have to go into the
details again just some small remarks on

501
00:29:37,940 --> 00:29:38,190
it

502
00:29:38,190 --> 00:29:41,999
so what you have to do is you have to
pitch the beginning of

503
00:29:41,999 --> 00:29:46,229
function or some parts of the function
and normally a jump

504
00:29:46,229 --> 00:29:51,059
on x86 needs 5 bytes so you've gotta
make enough room to have

505
00:29:51,059 --> 00:29:56,419
at least five bites available and then

506
00:29:56,419 --> 00:29:59,869
you replace those functions those
different instructions

507
00:29:59,869 --> 00:30:05,129
with a jump to your own called and in
order to do so you have to disassemble

508
00:30:05,129 --> 00:30:08,569
the rear coat and have to have a look
that you really

509
00:30:08,569 --> 00:30:11,669
can moved the court in there to a
different location

510
00:30:11,669 --> 00:30:16,839
X's Sebastian here up there okay very
good

511
00:30:16,839 --> 00:30:20,519
because I we had a discussion yesterday
I and

512
00:30:20,519 --> 00:30:23,799
we came to the point where we were
discussing

513
00:30:23,799 --> 00:30:26,839
if not instructions are you sick still
used today

514
00:30:26,839 --> 00:30:33,839
so let's have a look at that

515
00:30:39,240 --> 00:30:42,480
okay now I'm just attention to my
notepad XE and

516
00:30:42,480 --> 00:30:45,890
I'm going to the windows the NL

517
00:30:45,890 --> 00:30:52,890
and call load library what go to load
library

518
00:30:53,620 --> 00:30:57,200
and here you see instruction that's
actually not doing anything

519
00:30:57,200 --> 00:31:00,960
it's moving EDI to EI so nothing and

520
00:31:00,960 --> 00:31:04,270
before that you see Fife not
instructions

521
00:31:04,270 --> 00:31:08,110
actually Microsoft introduced those

522
00:31:08,110 --> 00:31:11,430
to allow hawking in their applications

523
00:31:11,430 --> 00:31:14,640
they're not using looking for writing
wood chips but for

524
00:31:14,640 --> 00:31:17,820
for example for performance monitoring
tools so they can see which functions

525
00:31:17,820 --> 00:31:18,450
get called

526
00:31:18,450 --> 00:31:22,570
or of off or doing pitching while the
system is running

527
00:31:22,570 --> 00:31:26,630
or about a processes running so there
are some knots

528
00:31:26,630 --> 00:31:29,770
exactly 5 bytes so that you can

529
00:31:29,770 --> 00:31:33,860
put in a big jump into their for example
jumped to

530
00:31:33,860 --> 00:31:37,320
address for 111 and so on and

531
00:31:37,320 --> 00:31:41,100
well you've got enough space there in
order to get there

532
00:31:41,100 --> 00:31:44,480
you just pitched instructions also doing
nothing the movie

533
00:31:44,480 --> 00:31:48,180
EDI to the address

534
00:31:48,180 --> 00:31:53,040
okay

535
00:31:53,040 --> 00:31:56,970
and now you've basically pitched the
function

536
00:31:56,970 --> 00:32:00,040
on in a say in a similar way that

537
00:32:00,040 --> 00:32:03,120
we are using it in the pie books so

538
00:32:03,120 --> 00:32:06,240
for Microsoft liar if you haven't also
easy way to do that

539
00:32:06,240 --> 00:32:09,820
actually because we a.m. also want to
pitch

540
00:32:09,820 --> 00:32:13,710
other libraries and process it and not
created by Microsoft

541
00:32:13,710 --> 00:32:16,810
we are not using this not poke

542
00:32:16,810 --> 00:32:19,840
is this little patch thingy we're
looking inside

543
00:32:19,840 --> 00:32:23,950
inside the process alright

544
00:32:23,950 --> 00:32:27,840
so giving you some more details so what
happens

545
00:32:27,840 --> 00:32:31,230
if our not routine monitoring routine
gets caught

546
00:32:31,230 --> 00:32:35,350
here's an example of the function get
proper address which is a free Windows

547
00:32:35,350 --> 00:32:36,290
API function

548
00:32:36,290 --> 00:32:39,430
so if this function gets caught as I
told you

549
00:32:39,430 --> 00:32:42,930
redirected to our own function so module

550
00:32:42,930 --> 00:32:46,320
inside by books and because Python
itself

551
00:32:46,320 --> 00:32:49,350
is really a big big program you could
say

552
00:32:49,350 --> 00:32:52,890
we want to make sure that fighting
doesn't interfere

553
00:32:52,890 --> 00:32:57,200
with the real process running so the
first thing we do is we save the program

554
00:32:57,200 --> 00:32:58,390
state as it is

555
00:32:58,390 --> 00:33:01,820
so that we can restore it afterwards and
then we can do all kinds of things

556
00:33:01,820 --> 00:33:05,260
it doesn't matter because it's just
fighting and afterwards we just we make

557
00:33:05,260 --> 00:33:07,240
sure that we are going back to the
original state

558
00:33:07,240 --> 00:33:11,660
okay from there we execute edge in every
call back

559
00:33:11,660 --> 00:33:14,760
we have to read this and see so that's
about like

560
00:33:14,760 --> 00:33:18,600
the small tiny part that we have to wait
and see for you to be able to you

561
00:33:18,600 --> 00:33:21,880
to right plating its from there we are
calling

562
00:33:21,880 --> 00:33:25,500
one single Python call back hendler for
all

563
00:33:25,500 --> 00:33:29,220
hoped functions and this called a
contestant distributing

564
00:33:29,220 --> 00:33:32,970
the whole to the actual monitoring
function that you're interested

565
00:33:32,970 --> 00:33:36,500
so let's say you have one function for

566
00:33:36,500 --> 00:33:40,230
file excesses 14 register excesses and
one for network access

567
00:33:40,230 --> 00:33:44,900
and I'll call back and I make sure that
you're getting the real function yes

568
00:33:44,900 --> 00:33:48,920
we have implement

569
00:33:48,920 --> 00:33:55,920
piping to so it works on two pie thing
2.5 and 2.6

570
00:34:09,010 --> 00:34:12,909
know it's safe okay the question was
doesn't epically fail

571
00:34:12,909 --> 00:34:16,089
when there are multiple threats and love
well that's a big problem

572
00:34:16,089 --> 00:34:19,589
would be a big problem if you want to
analyze me because nominee Mitt has lots

573
00:34:19,589 --> 00:34:20,129
of threats

574
00:34:20,129 --> 00:34:24,809
so imminent threat safe um if the user
doesn't break six

575
00:34:24,809 --> 00:34:29,710
so any ideas work that's a in Python
don't works that way

576
00:34:29,710 --> 00:34:34,540
only one threat can run at a time so
whenever

577
00:34:34,540 --> 00:34:38,220
another thread 16 s the Python
interpreter yes to make sure that none

578
00:34:38,220 --> 00:34:40,550
of the other threats is inside the park
interpreter

579
00:34:40,550 --> 00:34:44,349
so what we're doing is before we are
saving the program state

580
00:34:44,349 --> 00:34:48,379
we are looking the process and wait for
the next process

581
00:34:48,379 --> 00:34:52,190
to leave policy so as long as you're not
looking

582
00:34:52,190 --> 00:34:55,399
a process into Python you will
eventually

583
00:34:55,399 --> 00:34:59,290
get every threat called afterwards
bottom the threats a call

584
00:34:59,290 --> 00:35:03,260
unlocked before we save the program
state to be sure that we are not trying

585
00:35:03,260 --> 00:35:09,079
to the problem sorry

586
00:35:09,079 --> 00:35:12,930
yes

587
00:35:12,930 --> 00:35:17,380
yes but we want

588
00:35:17,380 --> 00:35:20,609
like normally you know when you write a
monitoring tool you want to share

589
00:35:20,609 --> 00:35:24,130
data between different books different
threats and

590
00:35:24,130 --> 00:35:27,319
so we try to keep it all into in one
place in prose process

591
00:35:27,319 --> 00:35:31,819
not have several instances of Python for
different folks for example

592
00:35:31,819 --> 00:35:36,380
so we prefer that solution and its it
starts if we've tested a lot and

593
00:35:36,380 --> 00:35:39,859
working perfectly and as explained we're
just looking

594
00:35:39,859 --> 00:35:43,660
the or Chelsea threat you can say so

595
00:35:43,660 --> 00:35:47,180
once we're done once pipers done
afterwards and that's the point

596
00:35:47,180 --> 00:35:50,420
I'm gonna make sure that your hook is
not running forever because then you can

597
00:35:50,420 --> 00:35:50,710
get

598
00:35:50,710 --> 00:35:55,210
problems then we restore the original
program state

599
00:35:55,210 --> 00:35:58,380
we execute safet bites

600
00:35:58,380 --> 00:36:02,040
from the original function and then we
perform a jump to back to the original

601
00:36:02,040 --> 00:36:02,549
function

602
00:36:02,549 --> 00:36:06,650
to execute the real thing okay

603
00:36:06,650 --> 00:36:10,710
I'm no hear that details for the geeks
if you think okay

604
00:36:10,710 --> 00:36:13,920
up to know I was interested maybe in
having a closer look

605
00:36:13,920 --> 00:36:17,130
but know that someone is bringing up
assembly no I don't use anymore

606
00:36:17,130 --> 00:36:20,650
you have to care about this is just
explain how it works in detail

607
00:36:20,650 --> 00:36:23,970
so first of all we're saving

608
00:36:23,970 --> 00:36:27,770
the environment there are some simple
instructions for x86 which you can use

609
00:36:27,770 --> 00:36:29,480
which I just put all the Flex

610
00:36:29,480 --> 00:36:33,319
process of lakes mistaken or the
registers and that really saves

611
00:36:33,319 --> 00:36:37,170
the state of the processor at the moment
well

612
00:36:37,170 --> 00:36:40,740
those instructions executed you can use
another instruction later on

613
00:36:40,740 --> 00:36:44,589
to get it back then we also

614
00:36:44,589 --> 00:36:48,010
putting some para meterse on the stick

615
00:36:48,010 --> 00:36:51,240
for every different ok so this

616
00:36:51,240 --> 00:36:54,760
piece of assembly that you see here is
actually created for

617
00:36:54,760 --> 00:36:58,109
every hook in the system so

618
00:36:58,109 --> 00:37:01,190
once for files once for registry ones
for network

619
00:37:01,190 --> 00:37:04,920
and if you want or other things another
as well

620
00:37:04,920 --> 00:37:08,250
solos para meterse make sure that
ordinary call back

621
00:37:08,250 --> 00:37:11,380
can different said which which ok we
actually calling

622
00:37:11,380 --> 00:37:14,460
and we can also include context
information in there

623
00:37:14,460 --> 00:37:19,980
so that you can for summer provide
objects that have some specific para mi

624
00:37:19,980 --> 00:37:21,089
context information

625
00:37:21,089 --> 00:37:25,170
to the Hawks then we call our pie books

626
00:37:25,170 --> 00:37:29,380
module which is then calling party and
doing all kinds of stuff in there

627
00:37:29,380 --> 00:37:34,150
then we restore the environment run the
original Colt

628
00:37:34,150 --> 00:37:37,420
which is the part in between which has
been copied their and then

629
00:37:37,420 --> 00:37:42,470
we jump back to the orchard okay I'm

630
00:37:42,470 --> 00:37:47,220
and waiting for the smartest say but
this doesn't always work

631
00:37:47,220 --> 00:37:51,920
you can't always pitch every 25 bytes in
memory that out there that's right

632
00:37:51,920 --> 00:37:56,380
nobody nobody came up with that last
time I was telling somebody about him

633
00:37:56,380 --> 00:37:57,839
nearly punched me in the face for that

634
00:37:57,839 --> 00:38:02,440
I'm to yeah so the idea is

635
00:38:02,440 --> 00:38:06,829
we try out we give the best effort
approach here so whenever we r able

636
00:38:06,829 --> 00:38:10,990
and make can make sure that we don't
break the code then we are introducing

637
00:38:10,990 --> 00:38:11,490
the hook

638
00:38:11,490 --> 00:38:15,000
if we made may break the code then we
give

639
00:38:15,000 --> 00:38:18,549
every turn a different tone value to the
user

640
00:38:18,549 --> 00:38:21,559
so that he is notified that it can break

641
00:38:21,559 --> 00:38:24,980
the program he can still do aggressive
well

642
00:38:24,980 --> 00:38:29,390
hooking and do it but in most cases we
won't say no we don't forget

643
00:38:29,390 --> 00:38:32,950
to make sure that you can break the
program so really fighting like you know

644
00:38:32,950 --> 00:38:35,079
you can't break the system

645
00:38:35,079 --> 00:38:42,079
just by introducing some things yes

646
00:38:47,910 --> 00:38:48,940
your so

647
00:38:48,940 --> 00:38:53,280
the comment was that I am you that
you've seen some libraries the carrying

648
00:38:53,280 --> 00:38:58,110
december's around we do the same we do
the same to make sure

649
00:38:58,110 --> 00:39:02,290
that we can do proper hooking or not I'm
you slipped as in for that

650
00:39:02,290 --> 00:39:05,780
and we also ship with the package so
it's like all-inclusive

651
00:39:05,780 --> 00:39:09,120
okay here's what you have to do you want
to use it

652
00:39:09,120 --> 00:39:13,930
um it was all made for convenience so
let's say you want to monitor specific

653
00:39:13,930 --> 00:39:15,280
DL function

654
00:39:15,280 --> 00:39:19,480
like in this case load library X but the
create fighting someone would basically

655
00:39:19,480 --> 00:39:20,290
be the same

656
00:39:20,290 --> 00:39:23,630
you only have to know that the NL in
which the function is the windows

657
00:39:23,630 --> 00:39:24,190
library

658
00:39:24,190 --> 00:39:27,450
and you have to know the name that's all
and then you just provide

659
00:39:27,450 --> 00:39:31,330
a python function and that's called once
this library functions court

660
00:39:31,330 --> 00:39:34,570
you can also do this by giving address

661
00:39:34,570 --> 00:39:37,780
maybe you just know the address from
somewhere memory

662
00:39:37,780 --> 00:39:40,810
maybe at some point or something and
live

663
00:39:40,810 --> 00:39:44,190
at the function you want to look doesn't
really have a name then you can also use

664
00:39:44,190 --> 00:39:44,800
the address

665
00:39:44,800 --> 00:39:48,690
and well as easy as using the name

666
00:39:48,690 --> 00:39:52,510
but because we are not intercepting

667
00:39:52,510 --> 00:39:57,020
the original code we're just executing
our court before the origin of functions

668
00:39:57,020 --> 00:39:57,470
called

669
00:39:57,470 --> 00:40:03,520
and later return we also introduced
return home that can for example

670
00:40:03,520 --> 00:40:07,150
change or intercept return values and
that's especially important for rootkits

671
00:40:07,150 --> 00:40:07,980
for example

672
00:40:07,980 --> 00:40:11,710
if you wanna make sure that nobody knows
about your that

673
00:40:11,710 --> 00:40:16,460
you are on disk for example whenever
somebody tries to access you as a file

674
00:40:16,460 --> 00:40:20,450
you can't just say return code this file
doesn't exist

675
00:40:20,450 --> 00:40:23,950
you know and then you're pretty safe at
least for this process

676
00:40:23,950 --> 00:40:27,060
okay I told you

677
00:40:27,060 --> 00:40:30,720
we want to stay high level and I hope
the examples on the previous I told you

678
00:40:30,720 --> 00:40:31,760
that you can really easy

679
00:40:31,760 --> 00:40:35,350
easy to use it but you can still have
full access to register us

680
00:40:35,350 --> 00:40:38,670
and again conveniences the is the main
game

681
00:40:38,670 --> 00:40:42,690
main goal so you can just say based on
the execution context

682
00:40:42,690 --> 00:40:46,640
I want excessive register EX and that's
all and then you are having

683
00:40:46,640 --> 00:40:50,180
what's in the register and the same for
other registers that around it

684
00:40:50,180 --> 00:40:55,220
and well maybe or not interested in the
register stats

685
00:40:55,220 --> 00:40:59,610
again too deep and you can to searches
in the whole memory because that's what

686
00:40:59,610 --> 00:41:00,680
most people interested in

687
00:41:00,680 --> 00:41:03,730
what we find in memory and this for
example function

688
00:41:03,730 --> 00:41:06,970
that is called find regex find regular
expression

689
00:41:06,970 --> 00:41:10,720
saying if regular expressions and pie
boxes looking in the memory

690
00:41:10,720 --> 00:41:14,280
where it finds this ring expressions
giving you the address is

691
00:41:14,280 --> 00:41:19,530
second easily extract information from
there the same

692
00:41:19,530 --> 00:41:23,400
for function arguments if you know how
many arguments function has you can

693
00:41:23,400 --> 00:41:23,960
easily

694
00:41:23,960 --> 00:41:28,020
manipulate the function arguments well
and also modify results

695
00:41:28,020 --> 00:41:31,360
alright a.m.

696
00:41:31,360 --> 00:41:35,130
there some other libraries that already
perform talking

697
00:41:35,130 --> 00:41:38,510
there and see but well for some people
it a problem

698
00:41:38,510 --> 00:41:43,190
but there here's one problem that those
libros really have normally

699
00:41:43,190 --> 00:41:46,960
they hook an existing function do some
pre analysis

700
00:41:46,960 --> 00:41:50,170
then call the original function and then
do some post analysts

701
00:41:50,170 --> 00:41:54,810
so the function the real function the
true function

702
00:41:54,810 --> 00:41:59,360
is repped inside the hawk and

703
00:41:59,360 --> 00:42:03,270
that has the disadvantage that you have
to know exactly what type of para

704
00:42:03,270 --> 00:42:04,220
meterse do you have

705
00:42:04,220 --> 00:42:07,670
and what is there with

706
00:42:07,670 --> 00:42:13,890
are they just 32 bit they like 64-bit so
you really have to know the signature

707
00:42:13,890 --> 00:42:17,040
at least number of bytes use up on the
stick

708
00:42:17,040 --> 00:42:20,140
that's pretty and convenient if you

709
00:42:20,140 --> 00:42:23,310
want to have a look at all the API calls
that a

710
00:42:23,310 --> 00:42:27,250
court by a function if you wanna be
generic and that's what we wanted to we

711
00:42:27,250 --> 00:42:28,780
went to Mass hawking

712
00:42:28,780 --> 00:42:32,460
and see every little tiny API call that
many where for example

713
00:42:32,460 --> 00:42:35,780
is calling and so our ideas not

714
00:42:35,780 --> 00:42:39,470
to Rep into the rep the original
function

715
00:42:39,470 --> 00:42:42,630
into our pipeline call back but to first

716
00:42:42,630 --> 00:42:46,620
have a hope for the pre intelligence
restore the original state

717
00:42:46,620 --> 00:42:50,220
execute the function and afterwards have
the ability to install

718
00:42:50,220 --> 00:42:53,880
a post analysis hawk so you can
basically have everything

719
00:42:53,880 --> 00:42:57,590
but you're not interfering with the
order process and you don't have to care

720
00:42:57,590 --> 00:42:58,550
about the signature

721
00:42:58,550 --> 00:43:04,120
so para meterse the function okay we
also do some

722
00:43:04,120 --> 00:43:07,650
a bookkeeping for books that means we
can we know if

723
00:43:07,650 --> 00:43:10,950
hope that we find some in the process
exchanges bus of its

724
00:43:10,950 --> 00:43:14,070
another route you that may have also
manipulate the process

725
00:43:14,070 --> 00:43:18,090
so um doing by using the submitter we
can find out

726
00:43:18,090 --> 00:43:21,690
if the hope was reintroduced bus and
also we can remove our hooks to make

727
00:43:21,690 --> 00:43:22,380
sure

728
00:43:22,380 --> 00:43:28,820
program has the original code again so
you can read reconfigured runtime:

729
00:43:28,820 --> 00:43:32,760
alright I'm how do you get the money to
ring going

730
00:43:32,760 --> 00:43:37,660
they're actually to waz in both cases we
have to inject

731
00:43:37,660 --> 00:43:41,400
a little DL rewrote or self into the
process

732
00:43:41,400 --> 00:43:45,300
and this process again is making sure
that tyson is right

733
00:43:45,300 --> 00:43:48,000
we also setting up the Python
environment to make sure that all the

734
00:43:48,000 --> 00:43:49,300
environment variables

735
00:43:49,300 --> 00:43:52,700
and libraries that everything is
available and

736
00:43:52,700 --> 00:43:56,490
well than or payback still is performing

737
00:43:56,490 --> 00:44:01,150
or executing script which can then
perform the booking

738
00:44:01,150 --> 00:44:05,280
so the first thing I'm how you can

739
00:44:05,280 --> 00:44:10,350
more nato replications is well kind of
start the application but you say

740
00:44:10,350 --> 00:44:14,130
are before you really start going please
stop

741
00:44:14,130 --> 00:44:17,580
because before you start going we want
to inject Python into you

742
00:44:17,580 --> 00:44:21,870
ordeal and that's what we're doing and
only when we are sure that we are noted

743
00:44:21,870 --> 00:44:25,390
well then we say go and in the process
runs and has all

744
00:44:25,390 --> 00:44:30,260
the morning touring that we want to have
inside

745
00:44:30,260 --> 00:44:36,060
the second option is the Jade I'm with

746
00:44:36,060 --> 00:44:39,540
because we want to meet or um also
running processes thats

747
00:44:39,540 --> 00:44:43,340
example when you doing forensics maybe
you won't have a script for

748
00:44:43,340 --> 00:44:47,860
forensics and you want to inject it into
a running process

749
00:44:47,860 --> 00:44:51,760
possibly malicious on existing system so
what pipes is doing

750
00:44:51,760 --> 00:44:56,920
it's telling the other process you want
to know or pie book steel

751
00:44:56,920 --> 00:45:00,920
guess what are the pros is doing hypoxia

752
00:45:00,920 --> 00:45:04,640
you can do that by remotely injecting
code

753
00:45:04,640 --> 00:45:08,880
into a process but I am the easy way to
think about it is

754
00:45:08,880 --> 00:45:13,100
you want to load private steel after
which we also want to start by works

755
00:45:13,100 --> 00:45:16,880
and again we say you want to start pie
book's main owner

756
00:45:16,880 --> 00:45:20,730
well you know what's happening I want me
to start it and afterwards

757
00:45:20,730 --> 00:45:23,920
after pilots means run the Python script
is run

758
00:45:23,920 --> 00:45:28,890
everything is hooked in the morning to
Rincon go on

759
00:45:28,890 --> 00:45:32,140
all right let's have a look I'm
unfortunately

760
00:45:32,140 --> 00:45:35,430
now I have to go black

761
00:45:35,430 --> 00:45:41,270
so let me first of all

762
00:45:41,270 --> 00:45:44,380
revert my virtual machine I'm

763
00:45:44,380 --> 00:45:48,280
the ideas know that we are snooping on
Firefox

764
00:45:48,280 --> 00:45:52,190
you know if you are using a browser like
Internet Explorer and Firefox

765
00:45:52,190 --> 00:45:55,540
you're pretty safe to your home banking
because

766
00:45:55,540 --> 00:46:00,430
they are using SSL encryption the bank
has got a bit SSL certificate

767
00:46:00,430 --> 00:46:03,830
so everything as well encrypt it you're
safe

768
00:46:03,830 --> 00:46:10,830
because only your bank and you know the
secret key

769
00:46:22,630 --> 00:46:26,420
me after porn on the Beijing later on
maybe

770
00:46:26,420 --> 00:46:30,460
maybe can ask the question later net
okay okay

771
00:46:30,460 --> 00:46:33,870
so what we're doing now is we r

772
00:46:33,870 --> 00:46:39,730
running Firefox bison Internet
connectivity

773
00:46:39,730 --> 00:46:43,470
yep

774
00:46:43,470 --> 00:46:50,470
key

775
00:46:59,970 --> 00:47:01,300
okay

776
00:47:01,300 --> 00:47:04,680
on anybody who's doing home bank anyway
but at the moment

777
00:47:04,680 --> 00:47:10,110
want to do it in the front from the
audience okay

778
00:47:10,110 --> 00:47:14,900
next question was gonna count at the
Deutsche Bank okay

779
00:47:14,900 --> 00:47:18,660
winters alright let's go there

780
00:47:18,660 --> 00:47:23,360
um let's go to the login page

781
00:47:23,360 --> 00:47:27,840
sheesh online banking

782
00:47:27,840 --> 00:47:32,030
okay I'm let's say no and

783
00:47:32,030 --> 00:47:35,450
I didn't want to get too many output so
I'm just injecting

784
00:47:35,450 --> 00:47:39,330
by walks into Firefox

785
00:47:39,330 --> 00:47:42,780
witchy is

786
00:47:42,780 --> 00:47:46,210
612 that suppose as I D

787
00:47:46,210 --> 00:47:50,420
okay and no we just 21

788
00:47:50,420 --> 00:47:54,820
transaction basically 2123 account
numbers 123 456

789
00:47:54,820 --> 00:47:57,930
7 and the secret PIN

790
00:47:57,930 --> 00:48:01,710
and you know you're safe because over
there there's the green

791
00:48:01,710 --> 00:48:06,180
bar at the very top besides address it
to you everything's SSL secured

792
00:48:06,180 --> 00:48:12,360
so nobody can intercept the traffic okay
let's login

793
00:48:12,360 --> 00:48:15,700
I'll sorry it was a broad the wrong
password

794
00:48:15,700 --> 00:48:18,860
maybe can do this same time with my real

795
00:48:18,860 --> 00:48:23,210
password later on all rights

796
00:48:23,210 --> 00:48:28,080
let's have a look which was opposes 86
on 12 I think

797
00:48:28,080 --> 00:48:32,600
who that's a long long list

798
00:48:32,600 --> 00:48:35,840
so there's one specific function

799
00:48:35,840 --> 00:48:38,890
in Firefox that actually gets every day
to

800
00:48:38,890 --> 00:48:42,520
that's transmitted over the network and

801
00:48:42,520 --> 00:48:49,520
this function is also getting the data

802
00:48:51,130 --> 00:48:55,420
before it is encrypt it and send over
the network link

803
00:48:55,420 --> 00:48:59,630
to your bank so here you see even though
I use and cryptic

804
00:48:59,630 --> 00:49:03,030
connection and its really safe like its
the real

805
00:49:03,030 --> 00:49:08,170
certificate that was used didn't change
anything on the well

806
00:49:08,170 --> 00:49:13,580
I'm not even a friend of the Komodo
hecker you know and he can see which

807
00:49:13,580 --> 00:49:15,600
piano use was 55 555

808
00:49:15,600 --> 00:49:19,130
and that's actually hoping Trojans work
banking Trojans book

809
00:49:19,130 --> 00:49:22,850
this function and also similar functions
in internet explorer and then

810
00:49:22,850 --> 00:49:28,720
intercept all the data before it goes
into the SSL tunnel to the bank and

811
00:49:28,720 --> 00:49:32,250
again the script is 70 company lines of
code is

812
00:49:32,250 --> 00:49:39,250
it is a little more because I'm again
I've got some error checking in there

813
00:49:44,289 --> 00:49:47,819
okay including the Commons 150 lines

814
00:49:47,819 --> 00:49:51,109
but the Commons themselves are like go

815
00:49:51,109 --> 00:49:54,809
30 lines so it's not very much and most
other things

816
00:49:54,809 --> 00:49:59,900
cost so much space so many lines because
I'm doing project

817
00:49:59,900 --> 00:50:03,699
most cases okay that's one example he
can

818
00:50:03,699 --> 00:50:07,309
do would use it in a naked way

819
00:50:07,309 --> 00:50:11,019
but the same thing can be used for for
example fuzzing

820
00:50:11,019 --> 00:50:14,630
or checking if web server secure because
you can manipulate

821
00:50:14,630 --> 00:50:19,279
the data in the browser and three send
it again and again and again and again

822
00:50:19,279 --> 00:50:22,949
and see what's happening on the other
side so you can manipulate and change

823
00:50:22,949 --> 00:50:26,880
everything from your penetration testers
point of view okay

824
00:50:26,880 --> 00:50:30,019
um time is running short to let me just

825
00:50:30,019 --> 00:50:33,029
show you some of some other nice
features um

826
00:50:33,029 --> 00:50:35,640
we thought okay if we develop such a
framework we want to have it

827
00:50:35,640 --> 00:50:36,440
all-inclusive

828
00:50:36,440 --> 00:50:39,769
you know you don't have to worry about
anything just go to the pool grab a

829
00:50:39,769 --> 00:50:40,410
cocktail

830
00:50:40,410 --> 00:50:44,039
unleaded right so for example we

831
00:50:44,039 --> 00:50:47,799
include a standard sandbox four million
dollars that means

832
00:50:47,799 --> 00:50:50,920
you might or file excesses registry
access network TNT

833
00:50:50,920 --> 00:50:54,690
process activity also somebody install
its new service

834
00:50:54,690 --> 00:51:00,680
so you have your own custom sandbox just
like CW sandbox not completely

835
00:51:00,680 --> 00:51:04,630
but a similar you can use the form a
learner's

836
00:51:04,630 --> 00:51:08,299
but there's something nasty bout
middleware and this

837
00:51:08,299 --> 00:51:11,369
may wear is not always running in one
process

838
00:51:11,369 --> 00:51:15,309
for example is made aware that drops
other malware onto the disk

839
00:51:15,309 --> 00:51:20,489
and then executes the other and well if
you do for just one to one process and

840
00:51:20,489 --> 00:51:22,670
not the thing that's written to disk and
executed

841
00:51:22,670 --> 00:51:27,559
well we don't see anything sometimes
also member inject itself into other

842
00:51:27,559 --> 00:51:28,329
processes

843
00:51:28,329 --> 00:51:31,979
means for process I'm just

844
00:51:31,979 --> 00:51:35,489
like what I'm doing you know I was
injecting myself into Firefox

845
00:51:35,489 --> 00:51:40,779
made us the same for example with
Windows system services so this

846
00:51:40,779 --> 00:51:44,949
makes tracing be difficult we thought
okay that's a real problem for most send

847
00:51:44,949 --> 00:51:45,869
boxes and

848
00:51:45,869 --> 00:51:48,969
they have to do all kinds of things to
get it going

849
00:51:48,969 --> 00:51:53,650
let's provide convenient interface so
you just add one line of code private

850
00:51:53,650 --> 00:51:54,619
spot check in it

851
00:51:54,619 --> 00:51:57,769
knowing everything else is hidden behind
it and you don't have to worry about it.

852
00:51:57,769 --> 00:52:01,209
so in there we check

853
00:52:01,209 --> 00:52:05,979
process creation and recreation and if
you want to check for example change the

854
00:52:05,979 --> 00:52:06,539
script

855
00:52:06,539 --> 00:52:10,140
from the original process to the child
process it's all supposed

856
00:52:10,140 --> 00:52:16,440
possible using our process Riga okay I'm

857
00:52:16,440 --> 00:52:23,440
time is running short so only one more
day because now comes the good guy

858
00:52:24,029 --> 00:52:27,459
the next same books um also

859
00:52:27,459 --> 00:52:30,940
not a very big one is espy I

860
00:52:30,940 --> 00:52:35,279
sandbox spy I is a banking Trojan that
does exactly the same thing as you've

861
00:52:35,279 --> 00:52:35,789
seen

862
00:52:35,789 --> 00:52:39,029
for Firefox intercepting your banking
credentials

863
00:52:39,029 --> 00:52:44,829
it's also also introducing other fields
for example it's asking you for your

864
00:52:44,829 --> 00:52:48,859
first four tens transaction numbers when
you look into the bank

865
00:52:48,859 --> 00:52:52,609
and otherwise if you don't provide the
five transaction numbers it won't let

866
00:52:52,609 --> 00:52:53,910
you login stuff like that

867
00:52:53,910 --> 00:52:58,579
so it basically minute manipulates your
browser and

868
00:52:58,579 --> 00:53:02,650
in order to snoop on come on a
controlled server in to see

869
00:53:02,650 --> 00:53:06,690
which banks are targeted you have to
find the secret key

870
00:53:06,690 --> 00:53:10,579
its hidden inside the Trojan because all
configuration

871
00:53:10,579 --> 00:53:13,999
is actually human-readable if you can
get it out of the Georgian

872
00:53:13,999 --> 00:53:18,849
it's a zip file that's inside the binary
but its encrypt it and you have to find

873
00:53:18,849 --> 00:53:19,769
the crypto key

874
00:53:19,769 --> 00:53:23,459
and descent books

875
00:53:23,459 --> 00:53:26,660
is automatically extracting the trip to
Ky for you

876
00:53:26,660 --> 00:53:33,660
K

877
00:53:33,709 --> 00:53:37,670
here we got the process explorer and
down here

878
00:53:37,670 --> 00:53:41,789
you can see spy spy is actually one of
those nasty things that way

879
00:53:41,789 --> 00:53:44,880
that weight busy for 20 seconds before
doing anything

880
00:53:44,880 --> 00:53:49,849
what you mentioned before so now we
gotta wait for 20 seconds

881
00:53:49,849 --> 00:53:53,739
was by I this fishing and then spies
creating sup

882
00:53:53,739 --> 00:53:57,390
process of itself I'm thats then doing
the nasty actions

883
00:53:57,390 --> 00:54:01,160
so basically two evasion tactics of
member in the same program

884
00:54:01,160 --> 00:54:04,910
first of all having busy waiting second

885
00:54:04,910 --> 00:54:08,369
using a second process to really get
things going and

886
00:54:08,369 --> 00:54:13,519
secret key is only in the second process

887
00:54:13,519 --> 00:54:16,650
K okay that's like I'm

888
00:54:16,650 --> 00:54:19,869
we're still having some problems with
the cleanup because we thought okay it's

889
00:54:19,869 --> 00:54:23,729
interesting if we see what's going on
but we are not interested in

890
00:54:23,729 --> 00:54:27,670
cleaning up properly afterwards that
looks like a future work

891
00:54:27,670 --> 00:54:33,529
okay let's see if we really got some
information

892
00:54:33,529 --> 00:54:37,179
okay which other files now see

893
00:54:37,179 --> 00:54:41,440
was over time

894
00:54:41,440 --> 00:54:45,489
okay he can see the injection into the
other process

895
00:54:45,489 --> 00:54:49,890
you can see that we are following trade
remote threat

896
00:54:49,890 --> 00:54:53,969
and see what's going on there that's

897
00:54:53,969 --> 00:54:58,099
also injection like both pros injecting
two different things

898
00:54:58,099 --> 00:55:03,729
okay um I think after redo the demo

899
00:55:03,729 --> 00:55:07,009
didn't work this time because a of

900
00:55:07,009 --> 00:55:10,979
in there

901
00:55:10,979 --> 00:55:16,380
okay let's hope it's working this time
so again we gotta wait for 20 seconds

902
00:55:16,380 --> 00:55:20,229
for spy I to close a process where
injecting yourself into the SUP

903
00:55:20,229 --> 00:55:23,869
process and there's one API call

904
00:55:23,869 --> 00:55:27,640
thats specific when we know that the
whole sample unpacked

905
00:55:27,640 --> 00:55:31,599
and that the key the secret keys inside
memory

906
00:55:31,599 --> 00:55:35,679
and that is when its enumerating which
other process actually running on the

907
00:55:35,679 --> 00:55:36,769
system

908
00:55:36,769 --> 00:55:39,929
call us process 32 get

909
00:55:39,929 --> 00:55:43,859
process 32 first

910
00:55:43,859 --> 00:55:47,959
you know what I mean so that's the one

911
00:55:47,959 --> 00:55:51,779
okay I'm because time is running short I
guess I won't repeat them with their

912
00:55:51,779 --> 00:55:52,890
time

913
00:55:52,890 --> 00:55:56,799
nominee get like a nice upward because
based on a regular expression

914
00:55:56,799 --> 00:56:00,910
saying okay he got a cat a list of five
different candidates

915
00:56:00,910 --> 00:56:03,969
for the crypto key and then you just
have to brute-force

916
00:56:03,969 --> 00:56:07,150
using one of those five different keys
and extract

917
00:56:07,150 --> 00:56:10,390
the password

918
00:56:10,390 --> 00:56:14,229
okay and also here right

919
00:56:14,229 --> 00:56:18,140
still Korg I want to show you what was
happening

920
00:56:18,140 --> 00:56:22,359
there won't be any closing remarks K
anybody

921
00:56:22,359 --> 00:56:26,170
did okay so anybody falling asleep or

922
00:56:26,170 --> 00:56:29,779
some people with me okay

923
00:56:29,779 --> 00:56:34,559
let's have a look at Acrobat so

924
00:56:34,559 --> 00:56:38,329
you can money to order or the regular
actions that

925
00:56:38,329 --> 00:56:43,019
echo but is doing when as a PDF Lord so
we can for example see when you're using

926
00:56:43,019 --> 00:56:47,170
something XD W sandbox another sandbox
you can see the final interaction the

927
00:56:47,170 --> 00:56:48,779
registry interactions

928
00:56:48,779 --> 00:56:52,209
network if stuff is happening but you
country look into

929
00:56:52,209 --> 00:56:55,839
Acrobat Reader and that's what we were
originally interested in

930
00:56:55,839 --> 00:56:59,579
what is happening inside eckford when
exploiters to your

931
00:56:59,579 --> 00:57:03,119
and you come to their worst with the
standard sandbox

932
00:57:03,119 --> 00:57:06,150
so we had a look what's the architecture
of

933
00:57:06,150 --> 00:57:10,390
Acrobat and we found for example out
there are different plugins

934
00:57:10,390 --> 00:57:14,289
for Acrobat they all can be found
plugins directory

935
00:57:14,289 --> 00:57:17,309
there's applying for spelling file
formats forms

936
00:57:17,309 --> 00:57:20,429
mailings and a script interpreter

937
00:57:20,429 --> 00:57:24,329
actually that's what you comes into play
because that's interesting part all that

938
00:57:24,329 --> 00:57:27,959
crappy well JavaScript

939
00:57:27,959 --> 00:57:32,079
nasty thing is stuff is happening and
this would be interested in we want to

940
00:57:32,079 --> 00:57:34,519
see what's going on inside the
interpreter

941
00:57:34,519 --> 00:57:38,359
and what information can we get out of
there um

942
00:57:38,359 --> 00:57:42,109
the difficulty is those plugins on get
loaded when there is JavaScript

943
00:57:42,109 --> 00:57:47,009
about to be executed so we gotta wait
until this plugin is noted

944
00:57:47,009 --> 00:57:50,650
and we getting money toward the loading
and when we see okay now the plugin is

945
00:57:50,650 --> 00:57:51,660
in memory

946
00:57:51,660 --> 00:57:55,059
then we can start the Hocking but not
right at the beginning

947
00:57:55,059 --> 00:57:59,499
I'm this the hook for waiting for the
plugin to load so you can

948
00:57:59,499 --> 00:58:04,059
again see everything up I think can be
done in less than 10 lines of code

949
00:58:04,059 --> 00:58:09,049
here we are waiting for the plugin which
is called the script API

950
00:58:09,049 --> 00:58:12,979
down here and if we find out that a
plugin is loaded with the file name

951
00:58:12,979 --> 00:58:17,789
ending East API we know now the stuff is
in memory and now we can do

952
00:58:17,789 --> 00:58:20,989
talking okay inside the JavaScript

953
00:58:20,989 --> 00:58:24,380
I told you we want to see what is
happening there which functions get

954
00:58:24,380 --> 00:58:26,529
called which objects are used

955
00:58:26,529 --> 00:58:30,549
all this kind of stuff and one
possibility for that would have been

956
00:58:30,549 --> 00:58:35,079
going to Acrobat look at every function
there and try to find out if there if

957
00:58:35,079 --> 00:58:35,920
there's a jobless bum

958
00:58:35,920 --> 00:58:40,289
name associated with it okay that's
takes a lot of time and we're lazy

959
00:58:40,289 --> 00:58:43,989
because we are working to university you
know and

960
00:58:43,989 --> 00:58:47,739
so we took the shortcut because they're
four functions

961
00:58:47,739 --> 00:58:51,089
register a new object which registers
new objects

962
00:58:51,089 --> 00:58:54,489
and their name register a new method
which catcher

963
00:58:54,489 --> 00:58:57,599
gets us and object the name of the
function

964
00:58:57,599 --> 00:59:00,609
and the function that is called

965
00:59:00,609 --> 00:59:04,109
when your invoking this method from your
javascript

966
00:59:04,109 --> 00:59:07,420
the same if possible for properties and
also for

967
00:59:07,420 --> 00:59:11,150
global functions so we only have to look
those four functions

968
00:59:11,150 --> 00:59:16,009
and we see everything that's going on in
Acrobat

969
00:59:16,009 --> 00:59:20,409
okay again 10 lines of code hope your
week nobody counts

970
00:59:20,409 --> 00:59:23,979
and also like we did for the next door
we want to see what kind of JavaScript

971
00:59:23,979 --> 00:59:25,880
code is compiled

972
00:59:25,880 --> 00:59:29,119
before the execution so let me quickly

973
00:59:29,119 --> 00:59:36,119
revert my virtual machine because
otherwise I'm getting problems spy I

974
00:59:36,440 --> 00:59:39,929
and then gonna show you how we do the
stuff

975
00:59:39,929 --> 00:59:43,049
necrotic so again we're hooking

976
00:59:43,049 --> 00:59:47,140
first the loading of libraries all
plugins to see when the JavaScript

977
00:59:47,140 --> 00:59:48,429
interpreter slowed

978
00:59:48,429 --> 00:59:51,710
and when it is noted we hope for
different functions are

979
00:59:51,710 --> 00:59:54,819
related to the registration of new
objects

980
00:59:54,819 --> 01:00:01,819
functions and properties of those
objects

981
01:00:06,640 --> 01:00:13,640
did

982
01:00:14,870 --> 01:00:21,870
you we got it for start

983
01:00:24,100 --> 01:00:31,100
okay now we're starting Acrobat and now
it's the Audience Choice

984
01:00:31,520 --> 01:00:35,290
do you wanna see heaps praise or do you
wanna see you to print

985
01:00:35,290 --> 01:00:38,380
F exploit heap

986
01:00:38,380 --> 01:00:43,860
okay hot core alright

987
01:00:43,860 --> 01:00:48,670
when you're looking at heaps praise
normally they really bring the

988
01:00:48,670 --> 01:00:51,930
performance of your system down as you
can see now in this case

989
01:00:51,930 --> 01:00:56,760
of the use of a short window from miss
boyfriend because that's where to

990
01:00:56,760 --> 01:00:59,800
exploit from hello this is Metasploit

991
01:00:59,800 --> 01:01:04,010
aka and now we again which causes was it

992
01:01:04,010 --> 01:01:08,040
for the big one over here okay now I can
see everything that we money toward

993
01:01:08,040 --> 01:01:11,290
so first there were some objects that
could register

994
01:01:11,290 --> 01:01:15,500
like route extra help inept if you've
seen Julia stalk you know that

995
01:01:15,500 --> 01:01:19,110
those are like the object implement buy
acrobat

996
01:01:19,110 --> 01:01:23,590
then we see which methods of those
objects

997
01:01:23,590 --> 01:01:26,690
registered and where the address up
those functions its

998
01:01:26,690 --> 01:01:29,710
so for a new word for be response go
back and so on

999
01:01:29,710 --> 01:01:33,380
some more registrations going on for
other Acrobat

1000
01:01:33,380 --> 01:01:37,760
a.m. things like you till other other
objects and

1001
01:01:37,760 --> 01:01:41,730
so we have I could stop

1002
01:01:41,730 --> 01:01:44,920
better is running low and we also see
courts

1003
01:01:44,920 --> 01:01:49,640
that happening to those locations so we
see that as a console print

1004
01:01:49,640 --> 01:01:53,480
happening all kinds of other calls for
different objects at the very end

1005
01:01:53,480 --> 01:01:57,330
I we see the actual JavaScript

1006
01:01:57,330 --> 01:02:00,450
that causing the trouble

1007
01:02:00,450 --> 01:02:04,090
and after this just gets compiled

1008
01:02:04,090 --> 01:02:07,770
we also see which other objects good
executed and

1009
01:02:07,770 --> 01:02:11,860
we are really lucky because there's only
one function that's called its last one

1010
01:02:11,860 --> 01:02:15,530
with explorer is happening which is
called up goodnight okay

1011
01:02:15,530 --> 01:02:18,990
from now on then thats the penetration
testers

1012
01:02:18,990 --> 01:02:22,730
or the Explorer analyst job to actually
go from there and see what the experts

1013
01:02:22,730 --> 01:02:23,560
doing in detail

1014
01:02:23,560 --> 01:02:26,990
but we give a like with shorts and boxed
information about which

1015
01:02:26,990 --> 01:02:30,010
of the job function was the baltimore
won which was the last one that got

1016
01:02:30,010 --> 01:02:30,460
called

1017
01:02:30,460 --> 01:02:36,310
okay

1018
01:02:36,310 --> 01:02:39,990
so for last night

1019
01:02:39,990 --> 01:02:43,690
here is some future work for us that we
serve to do so far we are limited to

1020
01:02:43,690 --> 01:02:44,270
Windows

1021
01:02:44,270 --> 01:02:49,060
and well we still have to

1022
01:02:49,060 --> 01:02:52,100
just to let it is possible would have to

1023
01:02:52,100 --> 01:02:56,910
make some major changes because well or
focus was Acrobat malware analysis

1024
01:02:56,910 --> 01:03:01,300
and the well most things going on there
when we know so we designed everything

1025
01:03:01,300 --> 01:03:02,680
for Windows in first place

1026
01:03:02,680 --> 01:03:06,250
so far also everything is designed to
32-bit

1027
01:03:06,250 --> 01:03:09,390
am yet we can

1028
01:03:09,390 --> 01:03:12,590
we want to just 64-bit and also its

1029
01:03:12,590 --> 01:03:16,120
limited to Intel architectures I'm

1030
01:03:16,120 --> 01:03:20,170
maybe will also include some arm or
whatever mobile architectures

1031
01:03:20,170 --> 01:03:23,570
this some stuff that we are not going to
do and it's up to us

1032
01:03:23,570 --> 01:03:29,300
up for you that is for example evasion
take techniques like you said before

1033
01:03:29,300 --> 01:03:33,110
what a body Beijing you were really
footprint about stuff like that

1034
01:03:33,110 --> 01:03:36,150
okay we're not giving out the bed
information to

1035
01:03:36,150 --> 01:03:39,690
the bad guys you know how to evade this
thing I guess

1036
01:03:39,690 --> 01:03:42,830
anybody that has seen what I've
presented here know several ways to

1037
01:03:42,830 --> 01:03:43,770
evade the sandbox

1038
01:03:43,770 --> 01:03:47,200
and also some ways to make it silent
again

1039
01:03:47,200 --> 01:03:51,030
we're not giving out information if you
think that somebody my age

1040
01:03:51,030 --> 01:03:54,720
right Richard based on Python because we
have presented here

1041
01:03:54,720 --> 01:03:59,350
I will happily share the details on how
you can detect if you don't already know

1042
01:03:59,350 --> 01:04:04,420
and also so far as you've seen the
output is pretty crappy it's just a text

1043
01:04:04,420 --> 01:04:05,670
file with time stems

1044
01:04:05,670 --> 01:04:09,140
I'm we don't like XML so we're not going
to do it

1045
01:04:09,140 --> 01:04:13,190
if you want XML put you could do it
yourself alright

1046
01:04:13,190 --> 01:04:16,830
um because we're interested in feedback
you know we've

1047
01:04:16,830 --> 01:04:19,960
made a public and if you just go to come

1048
01:04:19,960 --> 01:04:23,870
Kotaku dot com PPI boxed then you can
download it

1049
01:04:23,870 --> 01:04:27,390
tried out and yeah said

1050
01:04:27,390 --> 01:04:34,390
we're interested in feedback and also
some questions Felix thank you very much

1051
01:04:40,590 --> 01:04:45,420
I am other actor questions but maybe he
doesn't need for discussion but

1052
01:04:45,420 --> 01:04:48,920
wicket-taker after official

1053
01:04:48,920 --> 01:04:53,460
and of the talk a I liked it very much

1054
01:04:53,460 --> 01:04:57,370
pretty sure try some stuff

1055
01:04:57,370 --> 01:05:00,440
you too and get some later

1056
01:05:00,440 --> 01:05:04,790
things okay thank you very much Felix at
the last talks so

1057
01:05:04,790 --> 01:05:08,410
was a pleasure to have you here I
personally think it was

1058
01:05:08,410 --> 01:05:11,760
great conference level any closing
remarks

1059
01:05:11,760 --> 01:05:16,040
Biendl of possible box

1060
01:05:16,040 --> 01:05:19,510
take care when getting home and I hope

1061
01:05:19,510 --> 01:05:24,880
will see you all next troopers 12

1062
01:05:24,880 --> 01:05:25,130
much

