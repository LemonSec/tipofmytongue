1
00:00:01,470 --> 00:00:07,200
I'm happy to see this man back<font color="#E5E5E5"> in</font>

2
00:00:03,540 --> 00:00:09,330
Heidelberg<font color="#E5E5E5"> two years ago he gave one</font><font color="#CCCCCC"> of</font>

3
00:00:07,200 --> 00:00:14,040
the at the<font color="#CCCCCC"> time I think best talks at</font>

4
00:00:09,330 --> 00:00:16,379
troopers maybe investors ever<font color="#E5E5E5"> and there</font>

5
00:00:14,040 --> 00:00:20,189
is a guy called<font color="#CCCCCC"> Dominic white</font><font color="#E5E5E5"> from the</font>

6
00:00:16,379 --> 00:00:22,980
UK who<font color="#E5E5E5"> before that after he had seen an</font>

7
00:00:20,190 --> 00:00:24,270
early version of this<font color="#E5E5E5"> publicly stated</font>

8
00:00:22,980 --> 00:00:26,369
this is going to be one<font color="#E5E5E5"> of the best</font>

9
00:00:24,270 --> 00:00:28,320
talks of the<font color="#E5E5E5"> year at any security</font>

10
00:00:26,369 --> 00:00:30,300
conference<font color="#E5E5E5"> so there was high</font>

11
00:00:28,320 --> 00:00:33,839
expectations<font color="#CCCCCC"> again good to see you back</font>

12
00:00:30,300 --> 00:00:35,039
and say<font color="#CCCCCC"> she's yours</font><font color="#E5E5E5"> thank you for</font>

13
00:00:33,839 --> 00:00:35,460
<font color="#E5E5E5">watching you know thank you</font><font color="#CCCCCC"> for having</font>

14
00:00:35,039 --> 00:00:42,120
me back

15
00:00:35,460 --> 00:00:45,239
and no pressure<font color="#E5E5E5"> just a little bit about</font>

16
00:00:42,120 --> 00:00:47,099
myself<font color="#CCCCCC"> last</font><font color="#E5E5E5"> time was</font><font color="#CCCCCC"> at Cooper's I was</font>

17
00:00:45,239 --> 00:00:48,989
on the red team I was<font color="#CCCCCC"> actually</font>

18
00:00:47,100 --> 00:00:51,329
presenting in a defense defensive track

19
00:00:48,989 --> 00:00:53,248
<font color="#E5E5E5">the song I've moved across to more of a</font>

20
00:00:51,329 --> 00:00:56,370
<font color="#E5E5E5">defensive role and I'm presenting in the</font>

21
00:00:53,249 --> 00:00:59,219
attack track<font color="#E5E5E5"> quite</font><font color="#CCCCCC"> interesting I work at</font>

22
00:00:56,370 --> 00:01:02,038
Heroku or technically Salesforce and my

23
00:00:59,219 --> 00:01:04,199
day job is herding containers<font color="#E5E5E5"> so I look</font>

24
00:01:02,039 --> 00:01:06,479
after<font color="#E5E5E5"> our container services and make</font>

25
00:01:04,199 --> 00:01:08,189
sure that these containers are running

26
00:01:06,479 --> 00:01:10,770
in a multi-tenant environment in a

27
00:01:08,189 --> 00:01:13,169
secure way and that's<font color="#E5E5E5"> more or</font><font color="#CCCCCC"> less how</font>

28
00:01:10,770 --> 00:01:16,170
<font color="#E5E5E5">this talk came up so what this talk is</font>

29
00:01:13,170 --> 00:01:18,570
about<font color="#E5E5E5"> is looking</font><font color="#CCCCCC"> at your build pipeline</font>

30
00:01:16,170 --> 00:01:20,219
<font color="#CCCCCC">and more specifically</font><font color="#E5E5E5"> the source code</font>

31
00:01:18,570 --> 00:01:23,309
download is that are involved in<font color="#E5E5E5"> that</font>

32
00:01:20,219 --> 00:01:25,469
<font color="#E5E5E5">boat pipeline what I what I'm going to</font>

33
00:01:23,310 --> 00:01:27,270
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about is how do you how can you</font>

34
00:01:25,469 --> 00:01:29,009
secure this pipeline<font color="#CCCCCC"> what are</font><font color="#E5E5E5"> some of</font>

35
00:01:27,270 --> 00:01:30,719
the attacks<font color="#E5E5E5"> that can happen when</font><font color="#CCCCCC"> you</font>

36
00:01:29,009 --> 00:01:33,659
<font color="#CCCCCC">think you are only</font><font color="#E5E5E5"> downloading source</font>

37
00:01:30,719 --> 00:01:36,600
code and I really want<font color="#E5E5E5"> to emphasize the</font>

38
00:01:33,659 --> 00:01:39,960
attacks<font color="#E5E5E5"> focused on the download process</font>

39
00:01:36,600 --> 00:01:41,640
of their source code<font color="#CCCCCC"> not afterwards once</font>

40
00:01:39,960 --> 00:01:44,428
the<font color="#E5E5E5"> source codes been downloaded yes we</font>

41
00:01:41,640 --> 00:01:45,570
we know you can run scripts in<font color="#E5E5E5"> the build</font>

42
00:01:44,429 --> 00:01:47,609
environment<font color="#CCCCCC"> that's what build</font>

43
00:01:45,570 --> 00:01:48,990
environments are meant<font color="#E5E5E5"> to do this is</font>

44
00:01:47,609 --> 00:01:52,169
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> during</font><font color="#E5E5E5"> that source code</font>

45
00:01:48,990 --> 00:01:54,359
retrieval phase<font color="#CCCCCC"> we're not expecting code</font>

46
00:01:52,170 --> 00:01:56,579
execution<font color="#CCCCCC"> what I'm not</font><font color="#E5E5E5"> going to talk</font>

47
00:01:54,359 --> 00:01:59,009
<font color="#E5E5E5">about are</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> of the other aspects of</font>

48
00:01:56,579 --> 00:02:00,960
securing<font color="#E5E5E5"> your build pipeline so things</font>

49
00:01:59,009 --> 00:02:02,909
<font color="#E5E5E5">like maintaining positive control of</font>

50
00:02:00,960 --> 00:02:05,339
your repositories<font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> going to tell</font>

51
00:02:02,909 --> 00:02:07,350
you how to enable<font color="#CCCCCC"> signed gate commits or</font>

52
00:02:05,340 --> 00:02:12,360
how to manage<font color="#CCCCCC"> access control to your git</font>

53
00:02:07,350 --> 00:02:15,030
repositories etc the talk came about

54
00:02:12,360 --> 00:02:17,460
looking at our infrastructure<font color="#CCCCCC"> her</font>

55
00:02:15,030 --> 00:02:19,980
so we lovingly<font color="#CCCCCC"> refer to our service as</font>

56
00:02:17,460 --> 00:02:23,760
remote code execution as a service you

57
00:02:19,980 --> 00:02:26,220
<font color="#CCCCCC">provide us with code and we'll run it</font>

58
00:02:23,760 --> 00:02:28,079
for you so<font color="#CCCCCC"> platform as a service you</font>

59
00:02:26,220 --> 00:02:29,580
<font color="#CCCCCC">only need to be able</font><font color="#E5E5E5"> to code an</font>

60
00:02:28,080 --> 00:02:31,590
application we take care<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

61
00:02:29,580 --> 00:02:35,250
infrastructure that<font color="#CCCCCC"> actually supports us</font>

62
00:02:31,590 --> 00:02:39,150
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> web server</font><font color="#CCCCCC"> your your database</font>

63
00:02:35,250 --> 00:02:41,820
servers your<font color="#CCCCCC"> routing etc etc and the way</font>

64
00:02:39,150 --> 00:02:43,380
we do this is<font color="#E5E5E5"> using essentially</font>

65
00:02:41,820 --> 00:02:45,000
infrastructure as code<font color="#E5E5E5"> and this is</font>

66
00:02:43,380 --> 00:02:47,700
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> has become really</font><font color="#CCCCCC"> popular</font>

67
00:02:45,000 --> 00:02:50,250
<font color="#E5E5E5">in the industry now with DevOps and</font>

68
00:02:47,700 --> 00:02:52,980
selective ops<font color="#E5E5E5"> is to use infrastructure</font>

69
00:02:50,250 --> 00:02:55,620
<font color="#E5E5E5">as code infrastructures code simply</font>

70
00:02:52,980 --> 00:02:58,410
allows you to define your<font color="#E5E5E5"> infrastructure</font>

71
00:02:55,620 --> 00:03:00,480
<font color="#E5E5E5">and all the</font><font color="#CCCCCC"> related resources in flat</font>

72
00:02:58,410 --> 00:03:02,480
text files or flat<font color="#CCCCCC"> source</font><font color="#E5E5E5"> code files</font>

73
00:03:00,480 --> 00:03:05,429
<font color="#E5E5E5">check that into a version control</font><font color="#CCCCCC"> system</font>

74
00:03:02,480 --> 00:03:07,590
<font color="#CCCCCC">that way you can see who's made changes</font>

75
00:03:05,430 --> 00:03:10,280
<font color="#E5E5E5">what changes have been made and</font><font color="#CCCCCC"> you can</font>

76
00:03:07,590 --> 00:03:14,400
<font color="#E5E5E5">easily roll back from those changes and</font>

77
00:03:10,280 --> 00:03:15,989
what<font color="#E5E5E5"> this is meant is all our build</font>

78
00:03:14,400 --> 00:03:18,480
pipelines<font color="#CCCCCC"> are infrastructure</font><font color="#E5E5E5"> as code</font>

79
00:03:15,989 --> 00:03:21,810
pipelines<font color="#E5E5E5"> are kind of converging</font><font color="#CCCCCC"> onto a</font>

80
00:03:18,480 --> 00:03:24,450
<font color="#E5E5E5">single type</font><font color="#CCCCCC"> of model that is narrowing</font>

81
00:03:21,810 --> 00:03:28,049
<font color="#E5E5E5">and producing a single point of failure</font>

82
00:03:24,450 --> 00:03:30,179
<font color="#CCCCCC">so</font><font color="#E5E5E5"> when I looked at this I saw your</font>

83
00:03:28,049 --> 00:03:32,370
source code control<font color="#E5E5E5"> as a single point</font><font color="#CCCCCC"> of</font>

84
00:03:30,180 --> 00:03:34,410
failure<font color="#E5E5E5"> there's a lot of research</font><font color="#CCCCCC"> that's</font>

85
00:03:32,370 --> 00:03:36,510
been done into<font color="#E5E5E5"> hey you need</font><font color="#CCCCCC"> to make sure</font>

86
00:03:34,410 --> 00:03:39,570
<font color="#CCCCCC">your get server is secure you need</font><font color="#E5E5E5"> to</font>

87
00:03:36,510 --> 00:03:41,220
know who is<font color="#E5E5E5"> checking in code and</font><font color="#CCCCCC"> that</font>

88
00:03:39,570 --> 00:03:42,930
<font color="#E5E5E5">they're authorized to do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but</font>

89
00:03:41,220 --> 00:03:45,209
there's no<font color="#E5E5E5"> research really looking into</font>

90
00:03:42,930 --> 00:03:47,610
what happens after that<font color="#CCCCCC"> what happens</font>

91
00:03:45,209 --> 00:03:49,230
after the<font color="#E5E5E5"> fact that code has been</font>

92
00:03:47,610 --> 00:03:51,060
<font color="#E5E5E5">checked in and now it's</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> turned</font>

93
00:03:49,230 --> 00:03:54,570
into infrastructure<font color="#E5E5E5"> was being turned</font>

94
00:03:51,060 --> 00:03:56,030
into an<font color="#CCCCCC"> application and if you start</font>

95
00:03:54,570 --> 00:03:58,560
<font color="#E5E5E5">looking at your infrastructure</font><font color="#CCCCCC"> as code</font>

96
00:03:56,030 --> 00:04:01,590
<font color="#CCCCCC">one of the single points of failure</font><font color="#E5E5E5"> that</font>

97
00:03:58,560 --> 00:04:04,320
identified is git<font color="#CCCCCC"> so you've got other</font>

98
00:04:01,590 --> 00:04:06,810
version<font color="#CCCCCC"> control systems yes and they are</font>

99
00:04:04,320 --> 00:04:08,730
used in your build pipelines<font color="#E5E5E5"> and in your</font>

100
00:04:06,810 --> 00:04:10,650
infrastructure as code pipelines<font color="#E5E5E5"> but</font>

101
00:04:08,730 --> 00:04:14,369
more and more<font color="#E5E5E5"> people are</font><font color="#CCCCCC"> moving towards</font>

102
00:04:10,650 --> 00:04:16,079
git and I I know a lot<font color="#CCCCCC"> of players such</font>

103
00:04:14,370 --> 00:04:17,489
<font color="#CCCCCC">as github</font><font color="#E5E5E5"> get lab but bucket they've</font>

104
00:04:16,079 --> 00:04:19,650
played a central role<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> because</font>

105
00:04:17,488 --> 00:04:21,418
I've made<font color="#E5E5E5"> it really easy for you</font><font color="#CCCCCC"> to</font>

106
00:04:19,649 --> 00:04:25,140
store<font color="#CCCCCC"> your source</font><font color="#E5E5E5"> code and manage it</font>

107
00:04:21,418 --> 00:04:27,960
with their services the thing about git

108
00:04:25,140 --> 00:04:28,530
<font color="#E5E5E5">or the gate protocol is it is quite</font>

109
00:04:27,960 --> 00:04:30,960
complex

110
00:04:28,530 --> 00:04:33,119
so you've got<font color="#E5E5E5"> your Merkle trees and and</font>

111
00:04:30,960 --> 00:04:34,830
this provides<font color="#CCCCCC"> the sha-1</font><font color="#E5E5E5"> hash of all the</font>

112
00:04:33,120 --> 00:04:37,860
code that's<font color="#CCCCCC"> been checked</font><font color="#E5E5E5"> in and the</font>

113
00:04:34,830 --> 00:04:44,039
changes and the commit history etc<font color="#CCCCCC"> and</font>

114
00:04:37,860 --> 00:04:46,200
as a source as a tool<font color="#E5E5E5"> creator</font><font color="#CCCCCC"> I don't</font>

115
00:04:44,040 --> 00:04:48,510
want to have to implement the git

116
00:04:46,200 --> 00:04:50,729
protocol because<font color="#CCCCCC"> it is complicated so</font>

117
00:04:48,510 --> 00:04:53,039
what you<font color="#E5E5E5"> find is a lot of source code</font>

118
00:04:50,730 --> 00:04:55,620
downloaders or a lot of tools that

119
00:04:53,040 --> 00:04:58,830
interact<font color="#E5E5E5"> with source code simply rely on</font>

120
00:04:55,620 --> 00:05:00,450
the<font color="#E5E5E5"> get binary that's already present on</font>

121
00:04:58,830 --> 00:05:02,520
the<font color="#CCCCCC"> system if it's not present</font><font color="#E5E5E5"> as</font>

122
00:05:00,450 --> 00:05:06,060
specifies that<font color="#E5E5E5"> as a dependency and</font>

123
00:05:02,520 --> 00:05:09,060
because most systems are using get now

124
00:05:06,060 --> 00:05:11,900
it it kind of has become ubiquitous

125
00:05:09,060 --> 00:05:14,940
<font color="#E5E5E5">and it it is present on most servers</font>

126
00:05:11,900 --> 00:05:18,840
<font color="#E5E5E5">what this means is for vulnerability</font>

127
00:05:14,940 --> 00:05:21,450
exists in git itself all the<font color="#CCCCCC"> tools</font><font color="#E5E5E5"> that</font>

128
00:05:18,840 --> 00:05:23,760
rely on get are immediately affected<font color="#CCCCCC"> or</font>

129
00:05:21,450 --> 00:05:27,360
are likely<font color="#E5E5E5"> affected by this</font>

130
00:05:23,760 --> 00:05:30,270
<font color="#E5E5E5">vulnerability as well so a really</font>

131
00:05:27,360 --> 00:05:32,160
<font color="#E5E5E5">simplified version of your</font><font color="#CCCCCC"> bold pipeline</font>

132
00:05:30,270 --> 00:05:33,750
or this infrastructure<font color="#CCCCCC"> as code pipeline</font>

133
00:05:32,160 --> 00:05:35,669
so you<font color="#CCCCCC"> normally have your source</font><font color="#E5E5E5"> control</font>

134
00:05:33,750 --> 00:05:37,770
<font color="#E5E5E5">so this is your do git server your</font>

135
00:05:35,669 --> 00:05:39,930
version control server<font color="#E5E5E5"> all the engineers</font>

136
00:05:37,770 --> 00:05:42,479
check in the code<font color="#E5E5E5"> or the changes that</font>

137
00:05:39,930 --> 00:05:44,970
<font color="#E5E5E5">are made to this code as soon as that</font>

138
00:05:42,479 --> 00:05:47,099
happens<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can have bold triggers</font><font color="#E5E5E5"> those</font>

139
00:05:44,970 --> 00:05:48,870
triggers<font color="#CCCCCC"> tell the build server</font><font color="#E5E5E5"> to either</font>

140
00:05:47,100 --> 00:05:51,060
fetch the code or<font color="#E5E5E5"> the code is</font>

141
00:05:48,870 --> 00:05:53,970
transferred to the build<font color="#E5E5E5"> server</font><font color="#CCCCCC"> your</font>

142
00:05:51,060 --> 00:05:56,160
build script<font color="#CCCCCC"> run and more and more</font><font color="#E5E5E5"> these</font>

143
00:05:53,970 --> 00:05:57,960
<font color="#CCCCCC">build scripts are running in container</font>

144
00:05:56,160 --> 00:06:01,050
environments<font color="#E5E5E5"> so you'll have a docker</font>

145
00:05:57,960 --> 00:06:03,989
container<font color="#E5E5E5"> that runs or</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> kubernetes</font>

146
00:06:01,050 --> 00:06:06,990
setup and automatically<font color="#E5E5E5"> automatic builds</font>

147
00:06:03,990 --> 00:06:07,830
that just look for a docker file or a

148
00:06:06,990 --> 00:06:11,040
<font color="#E5E5E5">boulder Tiamo</font>

149
00:06:07,830 --> 00:06:12,659
<font color="#CCCCCC">I think we've all seen</font><font color="#E5E5E5"> these before once</font>

150
00:06:11,040 --> 00:06:13,650
it's<font color="#E5E5E5"> gone through the build process it</font>

151
00:06:12,660 --> 00:06:15,540
gets<font color="#CCCCCC"> released</font>

152
00:06:13,650 --> 00:06:17,489
so either<font color="#E5E5E5"> gets released this</font>

153
00:06:15,540 --> 00:06:21,810
<font color="#E5E5E5">infrastructure or gets released as an</font>

154
00:06:17,490 --> 00:06:25,380
<font color="#CCCCCC">application on to a server and</font><font color="#E5E5E5"> run for</font>

155
00:06:21,810 --> 00:06:28,500
you<font color="#E5E5E5"> now this attack that</font><font color="#CCCCCC"> on or the</font>

156
00:06:25,380 --> 00:06:33,479
attack scenario that<font color="#E5E5E5"> I found and looked</font>

157
00:06:28,500 --> 00:06:35,690
<font color="#E5E5E5">into was kind of over yeah so just</font>

158
00:06:33,479 --> 00:06:38,849
before<font color="#E5E5E5"> your</font><font color="#CCCCCC"> bold scripts get triggered</font>

159
00:06:35,690 --> 00:06:41,669
when that code is<font color="#CCCCCC"> downloaded from your</font>

160
00:06:38,849 --> 00:06:44,950
source control<font color="#CCCCCC"> we get our code execution</font>

161
00:06:41,669 --> 00:06:47,979
so what would this<font color="#CCCCCC"> actually look like</font><font color="#E5E5E5"> so</font>

162
00:06:44,950 --> 00:06:50,710
last year<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> into get and how it</font>

163
00:06:47,980 --> 00:06:55,020
how it<font color="#E5E5E5"> works</font><font color="#CCCCCC"> I can come across this</font>

164
00:06:50,710 --> 00:06:57,520
vulnerability<font color="#CCCCCC"> CV</font><font color="#E5E5E5"> to 2018 1 1 2</font><font color="#CCCCCC"> 3 5 and</font>

165
00:06:55,020 --> 00:07:00,760
it allows you to<font color="#CCCCCC"> get code execution</font>

166
00:06:57,520 --> 00:07:02,760
<font color="#E5E5E5">during</font><font color="#CCCCCC"> the git clone process</font><font color="#E5E5E5"> so there's</font>

167
00:07:00,760 --> 00:07:06,070
one prerequisite<font color="#CCCCCC"> you need to clone</font><font color="#E5E5E5"> your</font>

168
00:07:02,760 --> 00:07:07,630
repositories as recursive or you can

169
00:07:06,070 --> 00:07:10,150
clone them and then afterwards

170
00:07:07,630 --> 00:07:11,200
initialize<font color="#E5E5E5"> sub modules and when the sub</font>

171
00:07:10,150 --> 00:07:14,409
modules are initialized the

172
00:07:11,200 --> 00:07:21,880
vulnerability triggers as well so what

173
00:07:14,410 --> 00:07:23,770
<font color="#E5E5E5">does this actually</font><font color="#CCCCCC"> look like so what</font>

174
00:07:21,880 --> 00:07:25,719
I've got<font color="#CCCCCC"> here is I've</font><font color="#E5E5E5"> just set up a</font>

175
00:07:23,770 --> 00:07:27,609
<font color="#E5E5E5">reverse</font><font color="#CCCCCC"> shell that that's going</font><font color="#E5E5E5"> to</font>

176
00:07:25,720 --> 00:07:31,389
<font color="#E5E5E5">receive our connection back not going to</font>

177
00:07:27,610 --> 00:07:33,850
explain<font color="#CCCCCC"> that</font><font color="#E5E5E5"> but what we've also got is</font>

178
00:07:31,389 --> 00:07:38,280
we've got<font color="#CCCCCC"> a vulnerable</font><font color="#E5E5E5"> version of get so</font>

179
00:07:33,850 --> 00:07:40,810
in this case I<font color="#CCCCCC"> think it's 2</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 14</font><font color="#E5E5E5"> r3 and</font>

180
00:07:38,280 --> 00:07:44,049
we are simply going<font color="#CCCCCC"> to clone a git</font>

181
00:07:40,810 --> 00:07:46,590
repository<font color="#E5E5E5"> and the chlorine happens</font><font color="#CCCCCC"> and</font>

182
00:07:44,050 --> 00:07:49,570
if<font color="#E5E5E5"> you look at that output that is</font>

183
00:07:46,590 --> 00:07:53,200
normal<font color="#CCCCCC"> git clone when you've got a sub</font>

184
00:07:49,570 --> 00:07:55,479
sub module included that happens if you

185
00:07:53,200 --> 00:07:58,810
<font color="#E5E5E5">are paying</font><font color="#CCCCCC"> attention you might notice</font>

186
00:07:55,479 --> 00:08:00,849
<font color="#E5E5E5">the directory traversal day but most end</font>

187
00:07:58,810 --> 00:08:02,280
users<font color="#E5E5E5"> or automated systems aren't going</font>

188
00:08:00,850 --> 00:08:04,780
to notice<font color="#CCCCCC"> the directory traversal</font><font color="#E5E5E5"> there</font>

189
00:08:02,280 --> 00:08:06,909
<font color="#CCCCCC">and what was</font><font color="#E5E5E5"> actually happened in the</font>

190
00:08:04,780 --> 00:08:10,000
background<font color="#E5E5E5"> is if we switch over</font><font color="#CCCCCC"> to</font>

191
00:08:06,910 --> 00:08:13,080
reverse shell we've got a<font color="#E5E5E5"> connection</font>

192
00:08:10,000 --> 00:08:17,289
back<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> running as the user</font>

193
00:08:13,080 --> 00:08:20,560
while running in<font color="#E5E5E5"> the context of that get</font>

194
00:08:17,289 --> 00:08:23,229
get user from from the user perspective

195
00:08:20,560 --> 00:08:25,030
we've just cloned<font color="#E5E5E5"> the repository if we</font>

196
00:08:23,229 --> 00:08:28,719
simply go look in the repository<font color="#CCCCCC"> there's</font>

197
00:08:25,030 --> 00:08:31,679
nothing overtly malicious we look into

198
00:08:28,720 --> 00:08:34,900
it but more you see there's a fake<font color="#E5E5E5"> get</font>

199
00:08:31,680 --> 00:08:36,909
directory<font color="#E5E5E5"> but I could be more sneaky and</font>

200
00:08:34,900 --> 00:08:38,140
hide<font color="#CCCCCC"> that away</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> actually just</font><font color="#E5E5E5"> get rid</font>

201
00:08:36,909 --> 00:08:41,409
<font color="#E5E5E5">of it once the code execution has</font>

202
00:08:38,140 --> 00:08:45,040
occurred<font color="#E5E5E5"> and the thing important thing</font>

203
00:08:41,409 --> 00:08:47,350
to<font color="#E5E5E5"> know it is that fake get directory is</font>

204
00:08:45,040 --> 00:08:50,770
actually a git repository<font color="#CCCCCC"> in itself</font><font color="#E5E5E5"> and</font>

205
00:08:47,350 --> 00:08:53,560
what this means is that allows us<font color="#E5E5E5"> to use</font>

206
00:08:50,770 --> 00:08:55,290
<font color="#E5E5E5">the features</font><font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> to get to get code</font>

207
00:08:53,560 --> 00:08:58,890
execution

208
00:08:55,290 --> 00:08:58,890
how does this work

209
00:09:06,490 --> 00:09:09,300
<font color="#CCCCCC">nextslide</font>

210
00:09:10,030 --> 00:09:24,470
so get<font color="#E5E5E5"> sub-modules get sub-modules allow</font>

211
00:09:14,930 --> 00:09:26,300
you to so get sub-modules<font color="#E5E5E5"> allow you to</font>

212
00:09:24,470 --> 00:09:28,280
embed<font color="#E5E5E5"> repositories within each other</font>

213
00:09:26,300 --> 00:09:30,469
<font color="#E5E5E5">this means</font><font color="#CCCCCC"> that if you've got a</font>

214
00:09:28,280 --> 00:09:32,390
dependency that relies on<font color="#E5E5E5"> another git</font>

215
00:09:30,470 --> 00:09:35,240
repository but you don't want to have to

216
00:09:32,390 --> 00:09:37,400
ship the source code along in your git

217
00:09:35,240 --> 00:09:39,590
repository you simply include the

218
00:09:37,400 --> 00:09:41,540
external repository<font color="#E5E5E5"> as the sub module</font>

219
00:09:39,590 --> 00:09:43,850
what happens during the<font color="#E5E5E5"> get clone</font>

220
00:09:41,540 --> 00:09:46,490
process<font color="#E5E5E5"> get to see that there's a sub</font>

221
00:09:43,850 --> 00:09:48,110
module or more than one sub modules and

222
00:09:46,490 --> 00:09:50,240
it will automatically clone those

223
00:09:48,110 --> 00:09:52,370
repositories for<font color="#E5E5E5"> you set everything</font><font color="#CCCCCC"> up</font>

224
00:09:50,240 --> 00:09:55,240
to be on the correct branches<font color="#CCCCCC"> etc and</font>

225
00:09:52,370 --> 00:09:57,710
take<font color="#E5E5E5"> care of your dependency management</font>

226
00:09:55,240 --> 00:10:01,130
<font color="#CCCCCC">now if you look at</font><font color="#E5E5E5"> how these sub modules</font>

227
00:09:57,710 --> 00:10:02,930
are structured on on your<font color="#E5E5E5"> own on the</font>

228
00:10:01,130 --> 00:10:05,030
file system<font color="#CCCCCC"> or in</font><font color="#E5E5E5"> the file system so</font>

229
00:10:02,930 --> 00:10:08,750
you've got<font color="#E5E5E5"> your typical git repository</font>

230
00:10:05,030 --> 00:10:11,300
<font color="#E5E5E5">and got your get directory this</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> only</font>

231
00:10:08,750 --> 00:10:14,600
<font color="#E5E5E5">get history and your configs you set</font>

232
00:10:11,300 --> 00:10:17,000
<font color="#CCCCCC">your love you config and then you've got</font>

233
00:10:14,600 --> 00:10:20,260
this<font color="#CCCCCC"> folder called modules inside the</font>

234
00:10:17,000 --> 00:10:23,990
modules you've got each sub module as

235
00:10:20,260 --> 00:10:26,660
another<font color="#E5E5E5"> get repository so you've got get</font>

236
00:10:23,990 --> 00:10:31,330
git repositories inside<font color="#CCCCCC"> git repositories</font>

237
00:10:26,660 --> 00:10:36,500
and the actual code<font color="#CCCCCC"> that we control</font>

238
00:10:31,330 --> 00:10:40,100
<font color="#CCCCCC">lives and</font><font color="#E5E5E5"> you get repository so as an</font>

239
00:10:36,500 --> 00:10:43,420
attacker<font color="#CCCCCC"> if we could control</font><font color="#E5E5E5"> either the</font>

240
00:10:40,100 --> 00:10:45,920
dot<font color="#E5E5E5"> git directory or the sub modules</font>

241
00:10:43,420 --> 00:10:48,319
directory<font color="#E5E5E5"> we could theoretically get</font>

242
00:10:45,920 --> 00:10:51,319
code execution through through<font color="#CCCCCC"> gate</font>

243
00:10:48,320 --> 00:10:53,510
protocol so<font color="#E5E5E5"> it protects against</font><font color="#CCCCCC"> this</font>

244
00:10:51,320 --> 00:10:56,000
<font color="#E5E5E5">that doesn't</font><font color="#CCCCCC"> allow you</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> check in dot</font>

245
00:10:53,510 --> 00:10:57,350
<font color="#E5E5E5">git directory</font><font color="#CCCCCC"> they have in</font>

246
00:10:56,000 --> 00:10:58,940
vulnerabilities in the past where you

247
00:10:57,350 --> 00:11:01,430
<font color="#E5E5E5">could do this especially on case</font>

248
00:10:58,940 --> 00:11:05,120
<font color="#E5E5E5">insensitive file systems so if you made</font>

249
00:11:01,430 --> 00:11:06,199
a dot get<font color="#E5E5E5"> with all in caps that</font><font color="#CCCCCC"> will</font>

250
00:11:05,120 --> 00:11:09,440
actually<font color="#CCCCCC"> get checked into the repository</font>

251
00:11:06,200 --> 00:11:11,480
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> on Windows or Mac or you can</font>

252
00:11:09,440 --> 00:11:15,500
actually<font color="#E5E5E5"> code execution through that so</font>

253
00:11:11,480 --> 00:11:18,250
they're protected against that now if<font color="#CCCCCC"> we</font>

254
00:11:15,500 --> 00:11:23,150
look<font color="#CCCCCC"> at how the sub modules get created</font>

255
00:11:18,250 --> 00:11:23,779
<font color="#E5E5E5">what notice says modules sub mod where</font>

256
00:11:23,150 --> 00:11:25,249
does that<font color="#E5E5E5"> name</font>

257
00:11:23,779 --> 00:11:27,980
for the sub-module come from where does

258
00:11:25,249 --> 00:11:31,009
<font color="#E5E5E5">that</font><font color="#CCCCCC"> path get constructed from that path</font>

259
00:11:27,980 --> 00:11:34,490
is actually<font color="#CCCCCC"> defined in you didn't get</font>

260
00:11:31,009 --> 00:11:38,389
modules<font color="#E5E5E5"> file so</font><font color="#CCCCCC"> Paul takes a normal get</font>

261
00:11:34,490 --> 00:11:40,339
config<font color="#E5E5E5"> layout you define your sub module</font>

262
00:11:38,389 --> 00:11:43,129
so in the sub module we've coded sub

263
00:11:40,339 --> 00:11:45,920
module 1 1 2<font color="#E5E5E5"> 3 5 there is</font><font color="#CCCCCC"> a sub modules</font>

264
00:11:43,129 --> 00:11:48,019
name<font color="#E5E5E5"> your sub modules got a path so</font>

265
00:11:45,920 --> 00:11:50,839
we're in the repository<font color="#E5E5E5"> is it going to</font>

266
00:11:48,019 --> 00:11:53,990
be cloned into there's just a file

267
00:11:50,839 --> 00:11:57,019
folder in your repository<font color="#E5E5E5"> and then a URL</font>

268
00:11:53,990 --> 00:11:58,790
<font color="#E5E5E5">where it should be collected or fetched</font>

269
00:11:57,019 --> 00:12:00,430
<font color="#E5E5E5">from in this case we're just fetching</font>

270
00:11:58,790 --> 00:12:05,089
<font color="#CCCCCC">from github</font>

271
00:12:00,430 --> 00:12:08,899
<font color="#E5E5E5">now that sub module name over there is</font>

272
00:12:05,089 --> 00:12:13,399
simply appended to the path of<font color="#CCCCCC"> your get</font>

273
00:12:08,899 --> 00:12:14,959
directory<font color="#E5E5E5"> slash modules folder and that</font>

274
00:12:13,399 --> 00:12:17,749
is where the vulnerability comes in

275
00:12:14,959 --> 00:12:22,849
because if we can specify a directory

276
00:12:17,749 --> 00:12:26,569
<font color="#E5E5E5">traversal now we can get get to look in</font>

277
00:12:22,850 --> 00:12:28,819
a<font color="#E5E5E5"> location that we control for for the</font>

278
00:12:26,569 --> 00:12:32,689
gate configuration<font color="#CCCCCC"> information and we</font>

279
00:12:28,819 --> 00:12:35,209
can<font color="#E5E5E5"> get code execution unfortunately it</font>

280
00:12:32,689 --> 00:12:37,009
isn't that<font color="#E5E5E5"> simple and might be</font><font color="#CCCCCC"> one of</font>

281
00:12:35,209 --> 00:12:41,149
the<font color="#E5E5E5"> reasons why</font><font color="#CCCCCC"> this bug has been</font>

282
00:12:37,009 --> 00:12:42,889
overlooked<font color="#CCCCCC"> in the past so if you just</font>

283
00:12:41,149 --> 00:12:45,980
<font color="#E5E5E5">use</font><font color="#CCCCCC"> the directory traversal</font>

284
00:12:42,889 --> 00:12:49,220
to try<font color="#E5E5E5"> and get code execution what will</font>

285
00:12:45,980 --> 00:12:51,110
happen is get R or create<font color="#E5E5E5"> your initial</font>

286
00:12:49,220 --> 00:12:53,779
repository<font color="#E5E5E5"> then we'll do the git clone</font>

287
00:12:51,110 --> 00:12:55,399
for your sub modules<font color="#E5E5E5"> it will go long and</font>

288
00:12:53,779 --> 00:12:59,029
<font color="#E5E5E5">say</font><font color="#CCCCCC"> ok so the first sub module on</font>

289
00:12:55,399 --> 00:13:01,459
cloning<font color="#CCCCCC"> it'll check</font><font color="#E5E5E5"> the path and go oh</font>

290
00:12:59,029 --> 00:13:04,160
there's code here already<font color="#CCCCCC"> or there's a</font>

291
00:13:01,459 --> 00:13:05,750
git repository already this<font color="#E5E5E5"> is not right</font>

292
00:13:04,160 --> 00:13:07,399
<font color="#E5E5E5">this is the first sub modules is</font>

293
00:13:05,750 --> 00:13:09,980
anything there shouldn't be anything

294
00:13:07,399 --> 00:13:12,470
here<font color="#E5E5E5"> and it'll just delete the contents</font>

295
00:13:09,980 --> 00:13:15,139
<font color="#CCCCCC">over there so when I was doing this</font>

296
00:13:12,470 --> 00:13:17,449
<font color="#CCCCCC">research</font><font color="#E5E5E5"> I got up until this point</font><font color="#CCCCCC"> so I</font>

297
00:13:15,139 --> 00:13:19,670
had this and I was<font color="#E5E5E5"> banging</font><font color="#CCCCCC"> my head</font>

298
00:13:17,449 --> 00:13:22,339
against<font color="#E5E5E5"> this for ages I was trying some</font>

299
00:13:19,670 --> 00:13:24,170
links I was trying different traversals

300
00:13:22,339 --> 00:13:27,050
you can actually traverse completely out

301
00:13:24,170 --> 00:13:29,660
<font color="#CCCCCC">of the get repository</font><font color="#E5E5E5"> and all I could do</font>

302
00:13:27,050 --> 00:13:32,899
was delete files on the file<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so</font>

303
00:13:29,660 --> 00:13:36,550
if<font color="#E5E5E5"> you stupid in your run get as root I</font>

304
00:13:32,899 --> 00:13:38,110
could delete your root filesystem<font color="#E5E5E5"> but</font>

305
00:13:36,550 --> 00:13:40,000
as an attacker that's not really useful

306
00:13:38,110 --> 00:13:43,839
<font color="#E5E5E5">I don't want a</font><font color="#CCCCCC"> DOS</font><font color="#E5E5E5"> I want to get code</font>

307
00:13:40,000 --> 00:13:46,450
execution<font color="#E5E5E5"> what actually happens</font><font color="#CCCCCC"> when</font>

308
00:13:43,839 --> 00:13:49,810
you've got a second sub module<font color="#E5E5E5"> if the</font>

309
00:13:46,450 --> 00:13:53,709
second sub module gets created first<font color="#E5E5E5"> so</font>

310
00:13:49,810 --> 00:13:56,018
there's no<font color="#CCCCCC"> they</font><font color="#E5E5E5"> know someone who's</font>

311
00:13:53,709 --> 00:13:59,859
<font color="#E5E5E5">currently in get directory modules and</font>

312
00:13:56,019 --> 00:14:02,740
the sub modules<font color="#E5E5E5"> name</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> create</font>

313
00:13:59,860 --> 00:14:05,560
<font color="#CCCCCC">the sub module and again another</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> I</font>

314
00:14:02,740 --> 00:14:08,560
bashed my head<font color="#CCCCCC"> against for ages is I</font>

315
00:14:05,560 --> 00:14:10,839
kept using I think<font color="#CCCCCC"> I had a</font><font color="#E5E5E5"> repository</font>

316
00:14:08,560 --> 00:14:14,890
called<font color="#CCCCCC"> pew and the next one I had X Y</font>

317
00:14:10,839 --> 00:14:17,110
Zed so<font color="#CCCCCC"> the sternum trigger</font><font color="#E5E5E5"> what you need</font>

318
00:14:14,890 --> 00:14:20,050
is<font color="#E5E5E5"> a sub module name that is</font>

319
00:14:17,110 --> 00:14:22,660
alphabetically before<font color="#E5E5E5"> your malicious sub</font>

320
00:14:20,050 --> 00:14:26,910
module so what will<font color="#CCCCCC"> happen is it will</font>

321
00:14:22,660 --> 00:14:29,620
<font color="#E5E5E5">create and clone this directory</font><font color="#CCCCCC"> AAA and</font>

322
00:14:26,910 --> 00:14:31,899
then when it needs to do subsequent sub

323
00:14:29,620 --> 00:14:34,390
module work you even already started

324
00:14:31,899 --> 00:14:36,820
initially<font color="#E5E5E5"> initializing sub modules this</font>

325
00:14:34,390 --> 00:14:39,430
<font color="#E5E5E5">is expected behavior that a sub module</font>

326
00:14:36,820 --> 00:14:42,820
might already contain<font color="#E5E5E5"> to get information</font>

327
00:14:39,430 --> 00:14:45,250
<font color="#E5E5E5">don't delete it</font><font color="#CCCCCC"> use what is there</font>

328
00:14:42,820 --> 00:14:48,700
<font color="#E5E5E5">already and this gives us our code</font>

329
00:14:45,250 --> 00:14:50,620
execution<font color="#E5E5E5"> so if we look at what has</font>

330
00:14:48,700 --> 00:14:54,490
happened<font color="#CCCCCC"> now we've essentially ended up</font>

331
00:14:50,620 --> 00:14:58,300
with this we've got<font color="#E5E5E5"> we've simply moved</font>

332
00:14:54,490 --> 00:15:01,270
our faith module from this uncontrolled

333
00:14:58,300 --> 00:15:04,000
area<font color="#E5E5E5"> into the controlled content now we</font>

334
00:15:01,270 --> 00:15:07,449
can check in a malicious get repository

335
00:15:04,000 --> 00:15:10,149
inside our get repository and when the

336
00:15:07,450 --> 00:15:12,940
sequence<font color="#E5E5E5"> of get clones happens people</font>

337
00:15:10,149 --> 00:15:15,820
<font color="#E5E5E5">use the contents that is stored in this</font>

338
00:15:12,940 --> 00:15:19,630
packet directory for us and we can get

339
00:15:15,820 --> 00:15:23,860
code execution<font color="#E5E5E5"> how do you get that code</font>

340
00:15:19,630 --> 00:15:26,459
execution<font color="#E5E5E5"> well get is really helpful in</font>

341
00:15:23,860 --> 00:15:29,949
the<font color="#CCCCCC"> sense</font><font color="#E5E5E5"> so it has a concept of hooks</font>

342
00:15:26,459 --> 00:15:34,569
<font color="#E5E5E5">get hooks can</font><font color="#CCCCCC"> be defined</font><font color="#E5E5E5"> to to trigger</font>

343
00:15:29,949 --> 00:15:36,130
at predefined intervals or depending on

344
00:15:34,570 --> 00:15:38,500
<font color="#E5E5E5">which actions get is currently</font>

345
00:15:36,130 --> 00:15:40,350
<font color="#CCCCCC">performing so you've got a pre-commit</font>

346
00:15:38,500 --> 00:15:42,339
hook for example if you want to prevent

347
00:15:40,350 --> 00:15:44,620
specific code from being committed

348
00:15:42,339 --> 00:15:47,380
<font color="#E5E5E5">accidentally you can set a pre-commit</font>

349
00:15:44,620 --> 00:15:50,110
hook<font color="#E5E5E5"> that will run every time the</font><font color="#CCCCCC"> get</font>

350
00:15:47,380 --> 00:15:50,499
commit command<font color="#E5E5E5"> execute the pre-commit</font>

351
00:15:50,110 --> 00:15:53,319
hook

352
00:15:50,499 --> 00:15:55,839
<font color="#E5E5E5">for fire</font><font color="#CCCCCC"> it'll run the script</font><font color="#E5E5E5"> check that</font>

353
00:15:53,319 --> 00:15:59,819
<font color="#E5E5E5">the committee is fine and allow it or</font>

354
00:15:55,839 --> 00:16:03,789
not allow it another hook that exists is

355
00:15:59,819 --> 00:16:06,429
<font color="#CCCCCC">this post checkout hook the post</font>

356
00:16:03,789 --> 00:16:08,759
<font color="#E5E5E5">checkout hook fires exactly as the name</font>

357
00:16:06,429 --> 00:16:12,848
<font color="#CCCCCC">suggests</font><font color="#E5E5E5"> as soon as the checkout happens</font>

358
00:16:08,759 --> 00:16:16,239
the<font color="#E5E5E5"> reason this is useful</font><font color="#CCCCCC"> for us is when</font>

359
00:16:12,849 --> 00:16:18,399
the<font color="#CCCCCC"> sub-module is is cloned it first</font>

360
00:16:16,239 --> 00:16:21,159
<font color="#CCCCCC">does it get clone of their</font><font color="#E5E5E5"> sub module</font>

361
00:16:18,399 --> 00:16:23,049
then it checks<font color="#E5E5E5"> the sub module and which</font>

362
00:16:21,159 --> 00:16:25,089
branch<font color="#E5E5E5"> that sub module is supposed to be</font>

363
00:16:23,049 --> 00:16:27,039
on is<font color="#E5E5E5"> its</font><font color="#CCCCCC"> but be a master branch</font><font color="#E5E5E5"> or a</font>

364
00:16:25,089 --> 00:16:30,489
different branch<font color="#E5E5E5"> and depending on</font><font color="#CCCCCC"> that</font>

365
00:16:27,039 --> 00:16:32,439
<font color="#E5E5E5">it would do a git checkout and try and</font>

366
00:16:30,489 --> 00:16:36,549
<font color="#CCCCCC">check you out them</font><font color="#E5E5E5"> to correct branch so</font>

367
00:16:32,439 --> 00:16:39,399
<font color="#E5E5E5">git</font><font color="#CCCCCC"> checkout</font><font color="#E5E5E5"> execute it spot the post</font>

368
00:16:36,549 --> 00:16:42,369
<font color="#CCCCCC">checkout script and execute this for us</font>

369
00:16:39,399 --> 00:16:46,629
<font color="#E5E5E5">and all the code that</font><font color="#CCCCCC"> we have stored</font><font color="#E5E5E5"> in</font>

370
00:16:42,369 --> 00:16:50,469
that script<font color="#E5E5E5"> we execute all in all quite</font>

371
00:16:46,629 --> 00:16:52,719
a simple<font color="#E5E5E5"> attack really useful from</font>

372
00:16:50,469 --> 00:16:55,119
perspective<font color="#CCCCCC"> we're not using any</font><font color="#E5E5E5"> memory</font>

373
00:16:52,719 --> 00:16:56,979
corruption<font color="#E5E5E5"> we simply abusing the</font>

374
00:16:55,119 --> 00:17:02,589
functionality<font color="#E5E5E5"> that's already in git and</font>

375
00:16:56,979 --> 00:17:08,919
a very small injection bug or more more

376
00:17:02,589 --> 00:17:10,750
logic bug than anything else<font color="#E5E5E5"> so now one</font>

377
00:17:08,919 --> 00:17:14,529
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> very first arguments</font><font color="#CCCCCC"> you hear</font>

378
00:17:10,750 --> 00:17:16,868
against an attack like<font color="#CCCCCC"> us is sure but I</font>

379
00:17:14,529 --> 00:17:19,240
take my<font color="#E5E5E5"> get repositories</font><font color="#CCCCCC"> I make</font><font color="#E5E5E5"> sure</font>

380
00:17:16,868 --> 00:17:23,259
<font color="#CCCCCC">that the code</font><font color="#E5E5E5"> I'm cloning is the code</font>

381
00:17:19,240 --> 00:17:24,579
I'm expecting<font color="#E5E5E5"> or well</font><font color="#CCCCCC"> you cloning a</font>

382
00:17:23,259 --> 00:17:27,368
repository you're gonna build it and

383
00:17:24,579 --> 00:17:30,009
execute<font color="#E5E5E5"> it anyway</font><font color="#CCCCCC"> so someone can just</font>

384
00:17:27,368 --> 00:17:33,309
<font color="#E5E5E5">put a backdoor into a code</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think about</font>

385
00:17:30,009 --> 00:17:35,200
<font color="#E5E5E5">this attack</font><font color="#CCCCCC"> is there a bunch of</font><font color="#E5E5E5"> tools</font>

386
00:17:33,309 --> 00:17:37,990
that<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a hidden dependency on get</font>

387
00:17:35,200 --> 00:17:40,210
that you one might not be expecting<font color="#CCCCCC"> that</font>

388
00:17:37,990 --> 00:17:41,860
it exists and<font color="#CCCCCC"> so you're</font><font color="#E5E5E5"> probably not</font>

389
00:17:40,210 --> 00:17:45,100
<font color="#CCCCCC">checking</font><font color="#E5E5E5"> the source code for those</font>

390
00:17:41,860 --> 00:17:47,080
repositories<font color="#CCCCCC"> that rely on</font><font color="#E5E5E5"> get another</font>

391
00:17:45,100 --> 00:17:50,830
thing is<font color="#CCCCCC"> that sub modules are cloned</font>

392
00:17:47,080 --> 00:17:52,449
recursively<font color="#E5E5E5"> so I can hide this in a</font><font color="#CCCCCC"> sub</font>

393
00:17:50,830 --> 00:17:54,820
<font color="#CCCCCC">module</font><font color="#E5E5E5"> officer module obviously a bunch</font>

394
00:17:52,450 --> 00:17:56,559
of other sub module<font color="#E5E5E5"> unless you going</font>

395
00:17:54,820 --> 00:17:59,320
through<font color="#CCCCCC"> everything or sub module that's</font>

396
00:17:56,559 --> 00:18:02,740
included in a repository<font color="#CCCCCC"> you won't spot</font>

397
00:17:59,320 --> 00:18:04,419
this your source code<font color="#CCCCCC"> analyze this</font><font color="#E5E5E5"> is</font>

398
00:18:02,740 --> 00:18:07,810
also<font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to spot this</font>

399
00:18:04,420 --> 00:18:10,840
because it's not in source<font color="#E5E5E5"> code it is in</font>

400
00:18:07,810 --> 00:18:13,840
the directory structure of the git

401
00:18:10,840 --> 00:18:16,330
repository<font color="#E5E5E5"> you look at all of</font><font color="#CCCCCC"> these</font>

402
00:18:13,840 --> 00:18:18,699
tools<font color="#E5E5E5"> when the</font><font color="#CCCCCC"> skip vulnerability came</font>

403
00:18:16,330 --> 00:18:20,710
out you could get a shell through<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font>

404
00:18:18,700 --> 00:18:23,440
<font color="#E5E5E5">these just by running them in their</font>

405
00:18:20,710 --> 00:18:25,960
default configuration the reason<font color="#E5E5E5"> for</font>

406
00:18:23,440 --> 00:18:28,660
<font color="#CCCCCC">that is because</font><font color="#E5E5E5"> as I mentioned get is</font>

407
00:18:25,960 --> 00:18:32,770
complicated<font color="#E5E5E5"> so these tools simply shell</font>

408
00:18:28,660 --> 00:18:35,080
out to get and ask it<font color="#E5E5E5"> to do a get</font><font color="#CCCCCC"> get</font>

409
00:18:32,770 --> 00:18:37,510
clone -<font color="#CCCCCC"> that's recursive</font><font color="#E5E5E5"> or get clone</font>

410
00:18:35,080 --> 00:18:43,090
<font color="#CCCCCC">sub modules in it that is a</font><font color="#E5E5E5"> default</font>

411
00:18:37,510 --> 00:18:44,530
behavior<font color="#CCCCCC"> of all of these tools so yet</font>

412
00:18:43,090 --> 00:18:47,770
what would an attack like<font color="#CCCCCC"> that look like</font>

413
00:18:44,530 --> 00:18:49,930
so if we look at docker you can actually

414
00:18:47,770 --> 00:18:53,170
<font color="#E5E5E5">get</font><font color="#CCCCCC"> a show by simply</font><font color="#E5E5E5"> doing a</font><font color="#CCCCCC"> docker</font>

415
00:18:49,930 --> 00:18:55,120
<font color="#CCCCCC">bowed of malicious repository because</font>

416
00:18:53,170 --> 00:19:04,480
docker<font color="#CCCCCC"> law relies</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> get in the</font>

417
00:18:55,120 --> 00:19:06,370
background<font color="#E5E5E5"> you get a shell again same as</font>

418
00:19:04,480 --> 00:19:09,670
<font color="#CCCCCC">before the reverse shell listener and</font>

419
00:19:06,370 --> 00:19:11,739
we're just<font color="#E5E5E5"> going to do you inject docker</font>

420
00:19:09,670 --> 00:19:13,930
<font color="#E5E5E5">latest version of docker but to get</font>

421
00:19:11,740 --> 00:19:17,440
<font color="#E5E5E5">forget binary and the back end is</font>

422
00:19:13,930 --> 00:19:19,930
outdated<font color="#E5E5E5"> good darker</font><font color="#CCCCCC"> bold from the exact</font>

423
00:19:17,440 --> 00:19:24,520
same directory or same<font color="#E5E5E5"> git repository as</font>

424
00:19:19,930 --> 00:19:26,500
before so to the docker bold what docker

425
00:19:24,520 --> 00:19:29,980
now does in the background<font color="#E5E5E5"> is it shells</font>

426
00:19:26,500 --> 00:19:31,990
out<font color="#E5E5E5"> to get and vulnerability triggers in</font>

427
00:19:29,980 --> 00:19:36,250
<font color="#CCCCCC">the background</font><font color="#E5E5E5"> we get a shell in the</font>

428
00:19:31,990 --> 00:19:39,250
context of the<font color="#E5E5E5"> docking user and our</font><font color="#CCCCCC"> dock</font>

429
00:19:36,250 --> 00:19:41,920
<font color="#CCCCCC">abode actually succeeds once this is</font>

430
00:19:39,250 --> 00:19:43,930
complete again<font color="#E5E5E5"> like the way I set up the</font>

431
00:19:41,920 --> 00:19:46,690
shell<font color="#E5E5E5"> that stopped the docking execution</font>

432
00:19:43,930 --> 00:19:49,120
<font color="#E5E5E5">but it's just that it the way I did the</font>

433
00:19:46,690 --> 00:19:51,790
shell this is all transparent<font color="#CCCCCC"> quiet in</font>

434
00:19:49,120 --> 00:19:53,860
the background exit code<font color="#E5E5E5"> zero nothing to</font>

435
00:19:51,790 --> 00:19:57,970
<font color="#E5E5E5">actually give</font><font color="#CCCCCC"> away that we've got code</font>

436
00:19:53,860 --> 00:20:02,679
execution and this goes a long way to

437
00:19:57,970 --> 00:20:04,570
addressing the other<font color="#E5E5E5"> other problem</font><font color="#CCCCCC"> that</font>

438
00:20:02,680 --> 00:20:09,160
people<font color="#CCCCCC"> normally point out with us with</font>

439
00:20:04,570 --> 00:20:11,710
<font color="#E5E5E5">this vulnerability because</font><font color="#CCCCCC"> dakka dakka</font>

440
00:20:09,160 --> 00:20:14,230
<font color="#CCCCCC">board is simply pulling</font><font color="#E5E5E5"> the code from</font>

441
00:20:11,710 --> 00:20:16,060
the dock from a git repository<font color="#CCCCCC"> you're</font>

442
00:20:14,230 --> 00:20:17,890
<font color="#E5E5E5">not expected</font><font color="#CCCCCC"> to be happening</font><font color="#E5E5E5"> code</font>

443
00:20:16,060 --> 00:20:21,070
execution to be happening<font color="#E5E5E5"> out</font>

444
00:20:17,890 --> 00:20:23,980
side<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> dock abode itself so when</font>

445
00:20:21,070 --> 00:20:25,870
docker does this the docker Damon first

446
00:20:23,980 --> 00:20:28,240
does the get clone<font color="#E5E5E5"> get your code</font>

447
00:20:25,870 --> 00:20:30,909
execution and then it sets up<font color="#CCCCCC"> the docker</font>

448
00:20:28,240 --> 00:20:33,640
context<font color="#E5E5E5"> then it executes the dark abode</font>

449
00:20:30,910 --> 00:20:35,500
<font color="#E5E5E5">which runs in</font><font color="#CCCCCC"> a container so maybe in</font>

450
00:20:33,640 --> 00:20:37,080
your<font color="#E5E5E5"> build environment you think your</font>

451
00:20:35,500 --> 00:20:40,270
builds are happening inside<font color="#CCCCCC"> a container</font>

452
00:20:37,080 --> 00:20:43,990
<font color="#E5E5E5">but this code execution happens before</font>

453
00:20:40,270 --> 00:20:46,270
<font color="#E5E5E5">that container is actually created</font><font color="#CCCCCC"> so</font>

454
00:20:43,990 --> 00:20:51,640
you've escaped the container<font color="#E5E5E5"> before</font><font color="#CCCCCC"> the</font>

455
00:20:46,270 --> 00:20:54,460
container existed really<font color="#CCCCCC"> useful now once</font>

456
00:20:51,640 --> 00:20:57,040
I realized that it<font color="#CCCCCC"> is possible</font><font color="#E5E5E5"> to trick</font>

457
00:20:54,460 --> 00:21:00,190
get into doing<font color="#E5E5E5"> things that you wanted to</font>

458
00:20:57,040 --> 00:21:03,129
do<font color="#E5E5E5"> and I knew</font><font color="#CCCCCC"> that other tools relied on</font>

459
00:21:00,190 --> 00:21:07,000
get in the background<font color="#E5E5E5"> so it</font><font color="#CCCCCC"> may be it's</font>

460
00:21:03,130 --> 00:21:08,980
<font color="#E5E5E5">possible to</font><font color="#CCCCCC"> combine that and abuse the</font>

461
00:21:07,000 --> 00:21:12,460
way that other applications<font color="#CCCCCC"> or other</font>

462
00:21:08,980 --> 00:21:17,470
<font color="#E5E5E5">tools use git and the way get lies files</font>

463
00:21:12,460 --> 00:21:19,780
out on the file<font color="#CCCCCC"> system so this</font><font color="#E5E5E5"> brought</font>

464
00:21:17,470 --> 00:21:22,810
<font color="#CCCCCC">about the next CVE</font><font color="#E5E5E5"> so this one is in</font>

465
00:21:19,780 --> 00:21:26,590
<font color="#E5E5E5">gold</font><font color="#CCCCCC"> so when</font><font color="#E5E5E5"> you do a go get - you and</font>

466
00:21:22,810 --> 00:21:29,110
you<font color="#CCCCCC"> point it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a go package</font><font color="#E5E5E5"> you end up</font>

467
00:21:26,590 --> 00:21:32,139
with code execution<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> another important</font>

468
00:21:29,110 --> 00:21:33,520
<font color="#E5E5E5">thing to note is and someone called me</font>

469
00:21:32,140 --> 00:21:36,340
out on<font color="#CCCCCC"> this they said</font><font color="#E5E5E5"> yeah but when you</font>

470
00:21:33,520 --> 00:21:38,650
do a go get there's a<font color="#CCCCCC"> bulb</font><font color="#E5E5E5"> that happens</font>

471
00:21:36,340 --> 00:21:41,740
anyway so that there's code execution

472
00:21:38,650 --> 00:21:44,530
<font color="#CCCCCC">it's expected behavior</font><font color="#E5E5E5"> the thing that</font>

473
00:21:41,740 --> 00:21:48,130
happens<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do is you can do a</font>

474
00:21:44,530 --> 00:21:50,680
go get - you -<font color="#E5E5E5"> D and with the - D and</font>

475
00:21:48,130 --> 00:21:52,660
actually says don't<font color="#E5E5E5"> build to go packages</font>

476
00:21:50,680 --> 00:21:56,440
<font color="#E5E5E5">so there is no build step there is no</font>

477
00:21:52,660 --> 00:21:58,150
code execution that<font color="#E5E5E5"> is expected so the</font>

478
00:21:56,440 --> 00:22:03,690
vulnerability still triggers<font color="#CCCCCC"> it</font><font color="#E5E5E5"> store</font>

479
00:21:58,150 --> 00:22:06,400
works and you get<font color="#E5E5E5"> quite execution now</font>

480
00:22:03,690 --> 00:22:10,620
again what this looks like<font color="#CCCCCC"> it's really</font>

481
00:22:06,400 --> 00:22:14,500
<font color="#CCCCCC">simple just as before</font><font color="#E5E5E5"> reverse shell</font>

482
00:22:10,620 --> 00:22:17,260
vulnerable version of of go<font color="#CCCCCC"> mr. Go Go</font>

483
00:22:14,500 --> 00:22:20,580
version pretty pretty recent but<font color="#CCCCCC"> it's</font>

484
00:22:17,260 --> 00:22:25,780
vulnerable<font color="#E5E5E5"> go get you pointed to</font><font color="#CCCCCC"> our</font>

485
00:22:20,580 --> 00:22:28,210
repository hosted on github<font color="#CCCCCC"> and as they</font>

486
00:22:25,780 --> 00:22:29,230
go get because<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> recurred execution</font>

487
00:22:28,210 --> 00:22:31,460
that happens in the<font color="#E5E5E5"> background</font>

488
00:22:29,230 --> 00:22:32,570
<font color="#E5E5E5">again this time it paused again</font>

489
00:22:31,460 --> 00:22:34,880
just because<font color="#E5E5E5"> of the type of</font><font color="#CCCCCC"> shell</font><font color="#E5E5E5"> I</font>

490
00:22:32,570 --> 00:22:36,710
<font color="#E5E5E5">chose but again it's super</font><font color="#CCCCCC"> silent</font>

491
00:22:34,880 --> 00:22:38,870
<font color="#CCCCCC">there's nothing to actually give away</font>

492
00:22:36,710 --> 00:22:41,380
and you can see we actually<font color="#CCCCCC"> get dropped</font>

493
00:22:38,870 --> 00:22:44,418
inside<font color="#E5E5E5"> a git repository with our</font><font color="#CCCCCC"> shell</font>

494
00:22:41,380 --> 00:22:46,789
<font color="#CCCCCC">if we go across we can see the go get</font>

495
00:22:44,419 --> 00:22:49,820
command executed there's nothing to let

496
00:22:46,789 --> 00:22:53,000
the user to anything funny<font color="#E5E5E5"> that anything</font>

497
00:22:49,820 --> 00:22:55,580
funny has happened<font color="#E5E5E5"> or that</font><font color="#CCCCCC"> the go get</font>

498
00:22:53,000 --> 00:22:58,279
failed<font color="#E5E5E5"> from a user perspective they've</font>

499
00:22:55,580 --> 00:23:13,610
downloaded the go code<font color="#CCCCCC"> and they can now</font>

500
00:22:58,279 --> 00:23:16,490
use use<font color="#E5E5E5"> that package so why does this</font>

501
00:23:13,610 --> 00:23:17,990
work<font color="#CCCCCC"> as I mentioned a lot of</font><font color="#E5E5E5"> tools have</font>

502
00:23:16,490 --> 00:23:19,760
a hidden dependency<font color="#CCCCCC"> and gets in the</font>

503
00:23:17,990 --> 00:23:23,029
background<font color="#E5E5E5"> and if you go and look at</font>

504
00:23:19,760 --> 00:23:25,820
<font color="#CCCCCC">your go packages now prior to go modules</font>

505
00:23:23,029 --> 00:23:29,720
<font color="#CCCCCC">this is still got packages if you look</font>

506
00:23:25,820 --> 00:23:32,450
in your go path<font color="#CCCCCC"> go path you'll see the</font>

507
00:23:29,720 --> 00:23:35,299
source directory<font color="#E5E5E5"> it creates a folder for</font>

508
00:23:32,450 --> 00:23:38,029
the package so<font color="#E5E5E5"> for packages</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> or</font>

509
00:23:35,299 --> 00:23:39,200
<font color="#CCCCCC">comm stalled route go download</font><font color="#E5E5E5"> and if</font>

510
00:23:38,029 --> 00:23:42,559
you go into<font color="#E5E5E5"> that</font><font color="#CCCCCC"> folder you'll see</font>

511
00:23:39,200 --> 00:23:44,480
<font color="#E5E5E5">you've got a dot get directory and you</font>

512
00:23:42,559 --> 00:23:46,129
go source code<font color="#E5E5E5"> so it's a it's quite</font>

513
00:23:44,480 --> 00:23:48,830
<font color="#CCCCCC">evident</font><font color="#E5E5E5"> that there was</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> a git clone</font>

514
00:23:46,130 --> 00:23:52,600
<font color="#E5E5E5">that happened so I had the thought of</font>

515
00:23:48,830 --> 00:23:56,870
what happens when<font color="#CCCCCC"> we have a package</font><font color="#E5E5E5"> that</font>

516
00:23:52,600 --> 00:24:00,110
whose name ends<font color="#CCCCCC"> and get well we actually</font>

517
00:23:56,870 --> 00:24:02,449
create a folder<font color="#CCCCCC"> called git and be able</font>

518
00:24:00,110 --> 00:24:05,990
<font color="#E5E5E5">to</font><font color="#CCCCCC"> reuse that when a second package is</font>

519
00:24:02,450 --> 00:24:08,620
is cloned unfortunately it<font color="#E5E5E5"> wasn't as</font>

520
00:24:05,990 --> 00:24:12,710
simple<font color="#CCCCCC"> as just doing</font><font color="#E5E5E5"> an import like this</font>

521
00:24:08,620 --> 00:24:16,639
<font color="#CCCCCC">if you do try this you end up creating</font>

522
00:24:12,710 --> 00:24:19,850
on the file system<font color="#CCCCCC"> and you go go</font><font color="#E5E5E5"> path</font>

523
00:24:16,640 --> 00:24:23,679
<font color="#CCCCCC">rev the coins for</font><font color="#E5E5E5"> cloud</font><font color="#CCCCCC"> /a</font><font color="#E5E5E5"> so I struck</font>

524
00:24:19,850 --> 00:24:25,908
it but that's<font color="#E5E5E5"> a legitimate package and</font>

525
00:24:23,679 --> 00:24:27,890
there's no code execution that that

526
00:24:25,909 --> 00:24:31,370
occurs because get just clones<font color="#CCCCCC"> itself</font>

527
00:24:27,890 --> 00:24:34,159
into a dot git folder<font color="#E5E5E5"> what you need to</font>

528
00:24:31,370 --> 00:24:38,809
do is set<font color="#CCCCCC"> up this Ness the</font><font color="#E5E5E5"> dependencies</font>

529
00:24:34,159 --> 00:24:40,850
or nested set of<font color="#CCCCCC"> Co imports so we start</font>

530
00:24:38,809 --> 00:24:43,220
<font color="#E5E5E5">with our target</font><font color="#CCCCCC"> package</font><font color="#E5E5E5"> so in this case</font>

531
00:24:40,850 --> 00:24:44,809
our target package was that hot one

532
00:24:43,220 --> 00:24:48,320
hosted on github<font color="#E5E5E5"> so</font>

533
00:24:44,809 --> 00:24:53,450
go troopers demo<font color="#CCCCCC"> and it has a dependency</font>

534
00:24:48,320 --> 00:24:56,989
on this package<font color="#CCCCCC"> slash</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> slash dot</font><font color="#E5E5E5"> get so</font>

535
00:24:53,450 --> 00:24:59,659
that that goes and creates this folder

536
00:24:56,989 --> 00:25:02,840
for us so we end up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Orkut</font><font color="#E5E5E5"> now we</font>

537
00:24:59,659 --> 00:25:05,599
need to get code into<font color="#CCCCCC"> the parent folder</font>

538
00:25:02,840 --> 00:25:07,399
<font color="#E5E5E5">so that</font><font color="#CCCCCC"> the parent folder will use the</font>

539
00:25:05,599 --> 00:25:10,549
dot<font color="#CCCCCC"> git directory that we've just</font>

540
00:25:07,399 --> 00:25:13,340
<font color="#E5E5E5">dropped to the disk as it's get</font>

541
00:25:10,549 --> 00:25:16,549
directory and<font color="#E5E5E5"> we we can</font><font color="#CCCCCC"> our control</font><font color="#E5E5E5"> code</font>

542
00:25:13,340 --> 00:25:19,488
execution<font color="#E5E5E5"> so simply import a</font><font color="#CCCCCC"> new project</font>

543
00:25:16,549 --> 00:25:21,499
<font color="#E5E5E5">another project or package that's just</font>

544
00:25:19,489 --> 00:25:25,220
<font color="#CCCCCC">that a you can see a is a parent of</font>

545
00:25:21,499 --> 00:25:27,739
docket<font color="#E5E5E5"> and then you just need to trigger</font>

546
00:25:25,220 --> 00:25:30,919
an update and the reason you need<font color="#E5E5E5"> to</font>

547
00:25:27,739 --> 00:25:32,179
<font color="#E5E5E5">trigger an update is so that you can</font>

548
00:25:30,919 --> 00:25:34,399
actually trigger one of<font color="#E5E5E5"> these get hooks</font>

549
00:25:32,179 --> 00:25:35,899
<font color="#E5E5E5">or one of the other get config options</font>

550
00:25:34,399 --> 00:25:39,559
because otherwise you just have<font color="#CCCCCC"> a git</font>

551
00:25:35,899 --> 00:25:41,869
clone<font color="#CCCCCC"> and there's no get hook for get</font>

552
00:25:39,559 --> 00:25:44,019
clones<font color="#E5E5E5"> or there's no way to actually get</font>

553
00:25:41,869 --> 00:25:46,488
code execution<font color="#CCCCCC"> just during a git clone</font>

554
00:25:44,019 --> 00:25:49,970
other than if you can control<font color="#E5E5E5"> a few</font>

555
00:25:46,489 --> 00:25:52,580
<font color="#E5E5E5">other other variables so what you need</font>

556
00:25:49,970 --> 00:25:56,989
<font color="#E5E5E5">to do is you need to do this kind of</font>

557
00:25:52,580 --> 00:25:59,960
circular<font color="#E5E5E5"> import so if you just have go</font>

558
00:25:56,989 --> 00:26:03,080
see trying to import itself again the go

559
00:25:59,960 --> 00:26:05,330
to go get process will shout at you and

560
00:26:03,080 --> 00:26:08,478
say you're being stupid<font color="#E5E5E5"> you're trying to</font>

561
00:26:05,330 --> 00:26:11,989
do a circular import<font color="#E5E5E5"> of a package you</font>

562
00:26:08,479 --> 00:26:14,419
can't do this it's<font color="#E5E5E5"> a cyclical import but</font>

563
00:26:11,989 --> 00:26:17,570
if you break<font color="#CCCCCC"> it out in to a separate</font>

564
00:26:14,419 --> 00:26:20,210
package you get go<font color="#E5E5E5"> see to import to</font>

565
00:26:17,570 --> 00:26:24,499
fetch go away and go<font color="#CCCCCC"> a actually</font><font color="#E5E5E5"> as the</font>

566
00:26:20,210 --> 00:26:27,289
dependency on go see when go a gets

567
00:26:24,499 --> 00:26:32,599
initialized<font color="#E5E5E5"> it goes I rely on go see</font>

568
00:26:27,289 --> 00:26:35,450
which loves<font color="#E5E5E5"> at this path it will trigger</font>

569
00:26:32,599 --> 00:26:39,979
a<font color="#E5E5E5"> get fetch to try and get the latest</font>

570
00:26:35,450 --> 00:26:42,289
<font color="#CCCCCC">version of that package and it'll</font>

571
00:26:39,979 --> 00:26:46,159
trigger<font color="#E5E5E5"> exploit and it also overrides</font>

572
00:26:42,289 --> 00:26:49,029
any<font color="#E5E5E5"> content that</font><font color="#CCCCCC"> that was storage OC</font><font color="#E5E5E5"> but</font>

573
00:26:46,159 --> 00:26:49,029
<font color="#CCCCCC">you get a code execution</font>

574
00:26:49,809 --> 00:26:54,289
it<font color="#E5E5E5"> seems really straightforward at this</font>

575
00:26:52,099 --> 00:26:56,359
point<font color="#E5E5E5"> I thought</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> you can just set up</font>

576
00:26:54,289 --> 00:26:58,129
our<font color="#E5E5E5"> git repositories in the correct</font>

577
00:26:56,359 --> 00:27:01,340
order<font color="#CCCCCC"> important in the correct or</font>

578
00:26:58,130 --> 00:27:02,380
and we<font color="#E5E5E5"> share code execution again not</font>

579
00:27:01,340 --> 00:27:04,970
that<font color="#E5E5E5"> simple</font>

580
00:27:02,380 --> 00:27:06,980
<font color="#E5E5E5">one when I was trying to report this</font>

581
00:27:04,970 --> 00:27:09,590
<font color="#E5E5E5">vulnerability to</font><font color="#CCCCCC"> the goaline team as</font>

582
00:27:06,980 --> 00:27:12,169
well<font color="#CCCCCC"> I initially said honor you need</font><font color="#E5E5E5"> to</font>

583
00:27:09,590 --> 00:27:15,860
create a custom get server<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

584
00:27:12,169 --> 00:27:17,179
can create<font color="#E5E5E5"> these nested get repositories</font>

585
00:27:15,860 --> 00:27:18,439
<font color="#CCCCCC">because if we try</font><font color="#E5E5E5"> to do this on</font>

586
00:27:17,179 --> 00:27:23,020
something<font color="#E5E5E5"> like github or any other</font>

587
00:27:18,440 --> 00:27:28,190
repositories<font color="#CCCCCC"> they'll see</font><font color="#E5E5E5"> that git as</font>

588
00:27:23,020 --> 00:27:30,408
just<font color="#CCCCCC"> a folder and see it as</font><font color="#E5E5E5"> not</font>

589
00:27:28,190 --> 00:27:31,150
legitimate<font color="#E5E5E5"> in your</font><font color="#CCCCCC"> repository and</font><font color="#E5E5E5"> won't</font>

590
00:27:30,409 --> 00:27:34,070
allow<font color="#CCCCCC"> it</font>

591
00:27:31,150 --> 00:27:36,650
so to get around<font color="#E5E5E5"> that one limitation and</font>

592
00:27:34,070 --> 00:27:39,439
be able<font color="#CCCCCC"> to host</font><font color="#E5E5E5"> this vulnerability on a</font>

593
00:27:36,650 --> 00:27:41,900
public get server<font color="#E5E5E5"> without requiring the</font>

594
00:27:39,440 --> 00:27:44,630
go team to set up their<font color="#CCCCCC"> own server you</font>

595
00:27:41,900 --> 00:27:48,080
can use what are called meta imports so

596
00:27:44,630 --> 00:27:52,970
your meta imports simply run as an HTTP

597
00:27:48,080 --> 00:27:55,580
service when the<font color="#E5E5E5"> go go get process hits</font>

598
00:27:52,970 --> 00:27:57,830
that that HTTP service<font color="#CCCCCC"> it says hey I'm</font>

599
00:27:55,580 --> 00:28:04,039
<font color="#CCCCCC">looking for this package so in</font><font color="#E5E5E5"> this case</font>

600
00:27:57,830 --> 00:28:06,320
is looking for<font color="#E5E5E5"> the package yep so it</font>

601
00:28:04,039 --> 00:28:08,270
hits the hits this<font color="#CCCCCC"> endpoint so you guys</font>

602
00:28:06,320 --> 00:28:11,149
rave<font color="#CCCCCC"> the constructs out it says hey I'm</font>

603
00:28:08,270 --> 00:28:13,668
looking for<font color="#E5E5E5"> slash</font><font color="#CCCCCC"> a dot git</font><font color="#E5E5E5"> and the meta</font>

604
00:28:11,150 --> 00:28:17,120
<font color="#E5E5E5">import service responds and says sure if</font>

605
00:28:13,669 --> 00:28:19,700
you're looking for that content drop it

606
00:28:17,120 --> 00:28:21,678
into that<font color="#E5E5E5"> location you fetch</font><font color="#CCCCCC"> it using</font>

607
00:28:19,700 --> 00:28:23,720
the git protocol and you<font color="#CCCCCC"> can actually</font>

608
00:28:21,679 --> 00:28:26,360
<font color="#E5E5E5">find it on github living inside this</font>

609
00:28:23,720 --> 00:28:29,419
repo<font color="#E5E5E5"> so it just does a meta redirect</font>

610
00:28:26,360 --> 00:28:30,590
essentially for you<font color="#E5E5E5"> the second part of</font>

611
00:28:29,419 --> 00:28:34,789
getting<font color="#E5E5E5"> this to</font><font color="#CCCCCC"> work</font>

612
00:28:30,590 --> 00:28:37,879
<font color="#CCCCCC">was that when go get requests the parent</font>

613
00:28:34,789 --> 00:28:41,450
folder<font color="#E5E5E5"> we use the</font><font color="#CCCCCC"> the meta</font><font color="#E5E5E5"> redirect</font>

614
00:28:37,880 --> 00:28:43,490
again but in this<font color="#E5E5E5"> case we say hey when</font>

615
00:28:41,450 --> 00:28:45,950
you fetch a content for<font color="#E5E5E5"> this parent</font>

616
00:28:43,490 --> 00:28:48,710
folder<font color="#E5E5E5"> slash a you should actually drop</font>

617
00:28:45,950 --> 00:28:51,350
it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> to slash a slash</font><font color="#E5E5E5"> a and the reason</font>

618
00:28:48,710 --> 00:28:54,740
<font color="#E5E5E5">for this is if you</font><font color="#CCCCCC"> just try and</font><font color="#E5E5E5"> drop it</font>

619
00:28:51,350 --> 00:28:56,809
<font color="#E5E5E5">into to slash a during your if you</font>

620
00:28:54,740 --> 00:28:59,750
remember the cyclical imports you had go

621
00:28:56,809 --> 00:29:05,950
see<font color="#CCCCCC"> importing go away when go a gets</font>

622
00:28:59,750 --> 00:29:08,360
initialized<font color="#E5E5E5"> get go get void if you get a</font>

623
00:29:05,950 --> 00:29:11,640
get command<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> get come on we'll</font>

624
00:29:08,360 --> 00:29:14,760
check if there's a current<font color="#E5E5E5"> check out</font>

625
00:29:11,640 --> 00:29:16,080
the<font color="#E5E5E5"> repository and it</font><font color="#CCCCCC"> will say oh</font><font color="#E5E5E5"> no</font>

626
00:29:14,760 --> 00:29:19,160
you've already checked<font color="#E5E5E5"> out this</font>

627
00:29:16,080 --> 00:29:22,080
<font color="#CCCCCC">repository you trying to import this</font><font color="#E5E5E5"> for</font>

628
00:29:19,160 --> 00:29:23,700
package<font color="#CCCCCC"> could go go see but it's</font><font color="#E5E5E5"> already</font>

629
00:29:22,080 --> 00:29:27,149
checked<font color="#E5E5E5"> out for package called go away</font>

630
00:29:23,700 --> 00:29:30,980
so we're not gonna<font color="#CCCCCC"> allow this by adding</font>

631
00:29:27,150 --> 00:29:33,450
that extra<font color="#CCCCCC"> /a or</font><font color="#E5E5E5"> smash whatever it</font>

632
00:29:30,980 --> 00:29:36,360
<font color="#E5E5E5">doesn't see that get repository is</font>

633
00:29:33,450 --> 00:29:38,300
existing on<font color="#E5E5E5"> disk and it just proceeds to</font>

634
00:29:36,360 --> 00:29:44,429
try and do a git clone<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> all the</font>

635
00:29:38,300 --> 00:29:45,750
subsequent<font color="#E5E5E5"> steps that you require so</font>

636
00:29:44,430 --> 00:29:51,810
what we end up<font color="#E5E5E5"> at with at this point</font>

637
00:29:45,750 --> 00:29:55,920
<font color="#CCCCCC">after the first first import so let's go</font>

638
00:29:51,810 --> 00:29:59,000
get the first package it creates<font color="#CCCCCC"> dot get</font>

639
00:29:55,920 --> 00:30:01,830
<font color="#E5E5E5">directly for</font><font color="#CCCCCC"> us some go source code</font><font color="#E5E5E5"> and</font>

640
00:29:59,000 --> 00:30:04,710
if you look inside<font color="#E5E5E5"> that get directory</font>

641
00:30:01,830 --> 00:30:08,159
<font color="#E5E5E5">it's actually a get repository itself</font><font color="#CCCCCC"> so</font>

642
00:30:04,710 --> 00:30:11,610
it's got<font color="#E5E5E5"> his own get repo but it also</font>

643
00:30:08,160 --> 00:30:13,710
has all<font color="#CCCCCC"> the same contents as what a dot</font>

644
00:30:11,610 --> 00:30:17,100
get direct you will<font color="#E5E5E5"> normally have so if</font>

645
00:30:13,710 --> 00:30:19,110
you<font color="#E5E5E5"> do get in it</font><font color="#CCCCCC"> Bay I don't have the</font>

646
00:30:17,100 --> 00:30:20,879
same kind of content<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> have your</font>

647
00:30:19,110 --> 00:30:23,129
<font color="#E5E5E5">your tracking history</font><font color="#CCCCCC"> everything</font><font color="#E5E5E5"> that</font>

648
00:30:20,880 --> 00:30:25,500
gets expects to be<font color="#E5E5E5"> living in the dot git</font>

649
00:30:23,130 --> 00:30:28,560
directory or<font color="#E5E5E5"> actually have some go</font>

650
00:30:25,500 --> 00:30:30,900
source code as well<font color="#CCCCCC"> a malicious script</font>

651
00:30:28,560 --> 00:30:35,340
that we're gonna execute usual get

652
00:30:30,900 --> 00:30:37,830
folders and a config file<font color="#E5E5E5"> now to get the</font>

653
00:30:35,340 --> 00:30:40,649
code execution initially I was trying<font color="#E5E5E5"> to</font>

654
00:30:37,830 --> 00:30:43,199
do this using<font color="#E5E5E5"> the get hooks again</font>

655
00:30:40,650 --> 00:30:45,450
unfortunately<font color="#CCCCCC"> none of the git commands</font>

656
00:30:43,200 --> 00:30:49,500
<font color="#E5E5E5">that get</font><font color="#CCCCCC"> executed or</font><font color="#E5E5E5"> ones the trigger</font>

657
00:30:45,450 --> 00:30:52,770
<font color="#E5E5E5">hook or yeah so now that the hooks that</font>

658
00:30:49,500 --> 00:30:56,100
we need are triggered the way around

659
00:30:52,770 --> 00:30:58,410
this was to<font color="#E5E5E5"> use the git config file so</font>

660
00:30:56,100 --> 00:31:01,250
when you<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> to get config file</font><font color="#CCCCCC"> one of</font>

661
00:30:58,410 --> 00:31:04,560
<font color="#CCCCCC">the call options is to say to get proxy</font>

662
00:31:01,250 --> 00:31:06,420
<font color="#E5E5E5">the get proxy says is hey if you're</font>

663
00:31:04,560 --> 00:31:09,240
cloning a<font color="#CCCCCC"> repository or</font><font color="#E5E5E5"> fetching a</font>

664
00:31:06,420 --> 00:31:12,630
repository<font color="#E5E5E5"> over the git protocol please</font>

665
00:31:09,240 --> 00:31:14,580
execute<font color="#E5E5E5"> the</font><font color="#CCCCCC"> script first</font><font color="#E5E5E5"> and proxy all</font>

666
00:31:12,630 --> 00:31:18,930
the traffic<font color="#E5E5E5"> through standard in standard</font>

667
00:31:14,580 --> 00:31:20,610
<font color="#CCCCCC">aft for that script</font><font color="#E5E5E5"> so easy peasy we set</font>

668
00:31:18,930 --> 00:31:21,960
<font color="#CCCCCC">up I'll get proxy we pointed to our</font>

669
00:31:20,610 --> 00:31:25,360
malicious script that we've dropped to

670
00:31:21,960 --> 00:31:27,850
<font color="#E5E5E5">disk and now we need</font><font color="#CCCCCC"> to tell</font>

671
00:31:25,360 --> 00:31:30,639
get to fetch<font color="#CCCCCC"> it fetch the repository</font>

672
00:31:27,850 --> 00:31:35,139
over<font color="#CCCCCC"> they get protocol</font><font color="#E5E5E5"> stumbling block</font>

673
00:31:30,640 --> 00:31:37,210
again so initial report<font color="#E5E5E5"> to go team said</font>

674
00:31:35,140 --> 00:31:40,270
hey this works<font color="#CCCCCC"> but you actually have to</font>

675
00:31:37,210 --> 00:31:42,700
<font color="#CCCCCC">run go get with - - and secure</font><font color="#E5E5E5"> the</font>

676
00:31:40,270 --> 00:31:47,830
reason<font color="#CCCCCC"> for this is when</font><font color="#E5E5E5"> you issue a go</font>

677
00:31:42,700 --> 00:31:49,870
get come on<font color="#E5E5E5"> go along each step of the</font>

678
00:31:47,830 --> 00:31:52,300
process<font color="#CCCCCC"> it will check the the protocol</font>

679
00:31:49,870 --> 00:31:54,429
<font color="#E5E5E5">that</font><font color="#CCCCCC"> gate is going to use for the clone</font>

680
00:31:52,300 --> 00:31:57,730
or for the fetch<font color="#E5E5E5"> and determines whether</font>

681
00:31:54,430 --> 00:32:00,880
it is secure or insecure<font color="#CCCCCC"> it's determined</font>

682
00:31:57,730 --> 00:32:03,580
<font color="#E5E5E5">to be secure</font><font color="#CCCCCC"> if it's over HTTP</font><font color="#E5E5E5"> or SSH</font>

683
00:32:00,880 --> 00:32:06,670
<font color="#CCCCCC">and if I stop agate or</font><font color="#E5E5E5"> just plain HTTP</font>

684
00:32:03,580 --> 00:32:08,139
it gets labeled as insecure<font color="#E5E5E5"> and go</font>

685
00:32:06,670 --> 00:32:11,140
shouts at<font color="#CCCCCC"> you says hey you don't want to</font>

686
00:32:08,140 --> 00:32:13,480
do this you<font color="#E5E5E5"> want to use you want to use</font>

687
00:32:11,140 --> 00:32:16,330
secure protocols<font color="#CCCCCC"> I guess you could</font>

688
00:32:13,480 --> 00:32:19,240
convince someone to<font color="#E5E5E5"> run your go get -</font>

689
00:32:16,330 --> 00:32:20,590
you - -<font color="#E5E5E5"> insecure but</font><font color="#CCCCCC"> I think most users</font>

690
00:32:19,240 --> 00:32:23,680
will<font color="#E5E5E5"> balk at the fact that they're</font>

691
00:32:20,590 --> 00:32:26,919
running<font color="#E5E5E5"> something else is insecure</font><font color="#CCCCCC"> so I</font>

692
00:32:23,680 --> 00:32:29,620
had to find<font color="#E5E5E5"> a</font><font color="#CCCCCC"> way around this the way</font>

693
00:32:26,920 --> 00:32:33,220
around this is<font color="#E5E5E5"> to use a quirk in the</font><font color="#CCCCCC"> way</font>

694
00:32:29,620 --> 00:32:35,560
git config works so git config<font color="#E5E5E5"> allows</font>

695
00:32:33,220 --> 00:32:38,140
you to<font color="#CCCCCC"> just specify</font><font color="#E5E5E5"> your config</font>

696
00:32:35,560 --> 00:32:40,120
information and to query<font color="#E5E5E5"> that so it's</font>

697
00:32:38,140 --> 00:32:42,940
query<font color="#E5E5E5"> the get config you just say get</font>

698
00:32:40,120 --> 00:32:46,060
config and<font color="#CCCCCC"> then the key that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to</font>

699
00:32:42,940 --> 00:32:50,110
query<font color="#E5E5E5"> so in this case remote dot origin</font>

700
00:32:46,060 --> 00:32:52,720
<font color="#E5E5E5">dot URL if you say get config remote</font>

701
00:32:50,110 --> 00:32:57,399
<font color="#CCCCCC">that</font><font color="#E5E5E5"> origin that you are all it is going</font>

702
00:32:52,720 --> 00:33:00,130
to return the second one so you<font color="#E5E5E5"> can have</font>

703
00:32:57,400 --> 00:33:01,630
multiple URLs in there but to get config

704
00:33:00,130 --> 00:33:04,750
command is only<font color="#E5E5E5"> going to return the last</font>

705
00:33:01,630 --> 00:33:06,730
one in the list<font color="#E5E5E5"> so go get does this it</font>

706
00:33:04,750 --> 00:33:08,110
goes<font color="#CCCCCC"> heyget</font><font color="#E5E5E5"> tell me which protocol</font>

707
00:33:06,730 --> 00:33:09,970
you're<font color="#E5E5E5"> going to be using for</font><font color="#CCCCCC"> this next</font>

708
00:33:08,110 --> 00:33:13,360
operation<font color="#CCCCCC"> it says oh sure I'm</font><font color="#E5E5E5"> going to</font>

709
00:33:09,970 --> 00:33:15,490
<font color="#E5E5E5">be using HTTP go gate goes oh</font><font color="#CCCCCC"> that's</font>

710
00:33:13,360 --> 00:33:18,370
great<font color="#CCCCCC"> that's secure please proceed</font>

711
00:33:15,490 --> 00:33:21,430
now when the git fetch command execute

712
00:33:18,370 --> 00:33:24,580
it goes and<font color="#E5E5E5"> does</font><font color="#CCCCCC"> this same process</font>

713
00:33:21,430 --> 00:33:27,040
internally<font color="#CCCCCC"> as</font><font color="#E5E5E5"> get config yet but the</font>

714
00:33:24,580 --> 00:33:32,350
internal process that<font color="#E5E5E5"> git uses returns</font>

715
00:33:27,040 --> 00:33:34,750
<font color="#E5E5E5">the first entry so really not a security</font>

716
00:33:32,350 --> 00:33:36,189
<font color="#CCCCCC">vulnerability in itself</font><font color="#E5E5E5"> but a nice nor</font>

717
00:33:34,750 --> 00:33:38,630
quick that when you try to<font color="#E5E5E5"> make a</font>

718
00:33:36,190 --> 00:33:41,470
security decision based on

719
00:33:38,630 --> 00:33:44,870
output or return from from the get

720
00:33:41,470 --> 00:33:47,120
command<font color="#E5E5E5"> you get two different results</font>

721
00:33:44,870 --> 00:33:51,739
<font color="#CCCCCC">and your</font><font color="#E5E5E5"> security decision ends up being</font>

722
00:33:47,120 --> 00:33:55,159
wrong<font color="#CCCCCC"> now finally put it all together</font>

723
00:33:51,740 --> 00:33:58,100
<font color="#CCCCCC">the this</font><font color="#E5E5E5"> is the content of the puted</font><font color="#CCCCCC"> SH</font>

724
00:33:55,160 --> 00:34:01,160
script<font color="#E5E5E5"> that's going to be executed so we</font>

725
00:33:58,100 --> 00:34:04,040
get our code execution<font color="#E5E5E5"> then we need to</font>

726
00:34:01,160 --> 00:34:06,380
do a bit<font color="#CCCCCC"> of cleanup</font><font color="#E5E5E5"> again first first</font>

727
00:34:04,040 --> 00:34:09,230
reports are sent<font color="#E5E5E5"> to the go team</font><font color="#CCCCCC"> it just</font>

728
00:34:06,380 --> 00:34:10,639
<font color="#CCCCCC">ended up bailing out and</font><font color="#E5E5E5"> you got</font><font color="#CCCCCC"> to code</font>

729
00:34:09,230 --> 00:34:12,340
execution and then it bailed out and

730
00:34:10,639 --> 00:34:15,470
said<font color="#CCCCCC"> I can't carry on</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> gate process</font>

731
00:34:12,340 --> 00:34:16,940
<font color="#E5E5E5">something went wrong along the way to</font>

732
00:34:15,469 --> 00:34:19,100
stop that<font color="#CCCCCC"> and you clean up the exploit</font>

733
00:34:16,940 --> 00:34:21,800
so that it is invisible<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> end-user</font>

734
00:34:19,100 --> 00:34:24,379
<font color="#E5E5E5">you need to do some cleanup so first you</font>

735
00:34:21,800 --> 00:34:26,629
end up doing<font color="#E5E5E5"> a get pull just to get the</font>

736
00:34:24,379 --> 00:34:30,100
current the parent folder<font color="#E5E5E5"> up to the</font>

737
00:34:26,629 --> 00:34:33,730
<font color="#E5E5E5">latest version that's available in get</font>

738
00:34:30,100 --> 00:34:36,469
then you remove<font color="#CCCCCC"> the files</font><font color="#E5E5E5"> there are</font>

739
00:34:33,730 --> 00:34:38,899
extra in this case so in<font color="#E5E5E5"> this case I had</font>

740
00:34:36,469 --> 00:34:41,629
an extra main<font color="#CCCCCC"> let go and then you need</font>

741
00:34:38,899 --> 00:34:45,859
<font color="#E5E5E5">to issue the expected command which</font><font color="#CCCCCC"> is a</font>

742
00:34:41,629 --> 00:34:48,350
<font color="#E5E5E5">git pull come on but to get the</font><font color="#CCCCCC"> output</font>

743
00:34:45,860 --> 00:34:51,260
from the<font color="#E5E5E5"> get</font><font color="#CCCCCC"> pool command</font><font color="#E5E5E5"> you need to</font>

744
00:34:48,350 --> 00:34:54,739
echo it<font color="#E5E5E5"> out of a standard in or stand it</font>

745
00:34:51,260 --> 00:34:57,320
out so<font color="#E5E5E5"> you do a</font><font color="#CCCCCC"> git trace packet which</font>

746
00:34:54,739 --> 00:35:00,140
<font color="#E5E5E5">this tells get to output the packets</font>

747
00:34:57,320 --> 00:35:01,420
<font color="#E5E5E5">that is being sent and received on to</font>

748
00:35:00,140 --> 00:35:03,500
stand out

749
00:35:01,420 --> 00:35:05,450
unfortunately that contains a bit of

750
00:35:03,500 --> 00:35:07,820
superfluous<font color="#CCCCCC"> information to make it</font>

751
00:35:05,450 --> 00:35:11,049
easier<font color="#CCCCCC"> to read but breaks to get</font>

752
00:35:07,820 --> 00:35:13,940
protocol<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> just do a bit of grip and</font>

753
00:35:11,050 --> 00:35:15,980
to get rid of that<font color="#E5E5E5"> and clean up the</font>

754
00:35:13,940 --> 00:35:18,620
protocol<font color="#CCCCCC"> for us and that's</font><font color="#E5E5E5"> how we end up</font>

755
00:35:15,980 --> 00:35:21,680
<font color="#E5E5E5">with a nice</font><font color="#CCCCCC"> clean exploit son runs go</font>

756
00:35:18,620 --> 00:35:24,049
get you package name and code execution

757
00:35:21,680 --> 00:35:31,430
happens in the background<font color="#CCCCCC"> users none the</font>

758
00:35:24,050 --> 00:35:32,690
wiser<font color="#CCCCCC"> nice clean exploit so this is</font>

759
00:35:31,430 --> 00:35:35,450
where my presentation hits<font color="#E5E5E5"> a bit of a</font>

760
00:35:32,690 --> 00:35:37,580
snag<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> really hoping to demonstrate</font>

761
00:35:35,450 --> 00:35:39,189
a third vulnerability<font color="#E5E5E5"> that relies don't</font>

762
00:35:37,580 --> 00:35:41,990
get in the background

763
00:35:39,190 --> 00:35:44,390
unfortunately the patches<font color="#E5E5E5"> aren't out yet</font>

764
00:35:41,990 --> 00:35:47,209
for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they I was</font><font color="#CCCCCC"> really hoping they</font>

765
00:35:44,390 --> 00:35:49,069
were going to patch this week so docker

766
00:35:47,210 --> 00:35:52,790
project there's a vulnerability<font color="#CCCCCC"> in</font>

767
00:35:49,070 --> 00:35:54,530
docker<font color="#E5E5E5"> build itself</font><font color="#CCCCCC"> the way it</font>

768
00:35:52,790 --> 00:35:56,270
interactions get you can get code

769
00:35:54,530 --> 00:35:58,340
execution<font color="#CCCCCC"> there should</font><font color="#E5E5E5"> be a pastor</font>

770
00:35:56,270 --> 00:36:00,890
coming<font color="#E5E5E5"> out at the end of this month</font><font color="#CCCCCC"> so</font>

771
00:35:58,340 --> 00:36:03,710
just keep an<font color="#E5E5E5"> eye out for it but I'll be</font>

772
00:36:00,890 --> 00:36:06,799
doing<font color="#CCCCCC"> a</font><font color="#E5E5E5"> blog post on that and the link</font>

773
00:36:03,710 --> 00:36:10,010
<font color="#E5E5E5">for that</font><font color="#CCCCCC"> will be up in the slides so</font>

774
00:36:06,800 --> 00:36:11,660
yeah<font color="#E5E5E5"> really hoping</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get another</font><font color="#CCCCCC"> demo</font>

775
00:36:10,010 --> 00:36:17,060
<font color="#CCCCCC">for you but unfortunately</font><font color="#E5E5E5"> there isn't</font>

776
00:36:11,660 --> 00:36:20,330
<font color="#E5E5E5">one okay so what now how do we actually</font>

777
00:36:17,060 --> 00:36:25,250
secure these pipelines<font color="#CCCCCC"> we've got this</font>

778
00:36:20,330 --> 00:36:27,410
<font color="#CCCCCC">problem of relying on</font><font color="#E5E5E5"> our tools relying</font>

779
00:36:25,250 --> 00:36:29,210
on the output from<font color="#CCCCCC"> our tools</font><font color="#E5E5E5"> to actually</font>

780
00:36:27,410 --> 00:36:31,339
make security decisions for us<font color="#CCCCCC"> and those</font>

781
00:36:29,210 --> 00:36:31,940
tools are relying<font color="#E5E5E5"> on a</font><font color="#CCCCCC"> single</font><font color="#E5E5E5"> point of</font>

782
00:36:31,340 --> 00:36:35,360
failure

783
00:36:31,940 --> 00:36:37,640
get in the background how do you secure

784
00:36:35,360 --> 00:36:39,710
it<font color="#E5E5E5"> so one is good supply chain</font>

785
00:36:37,640 --> 00:36:42,950
management<font color="#E5E5E5"> this is a really difficult</font>

786
00:36:39,710 --> 00:36:44,990
problem<font color="#CCCCCC"> if you look at some like</font><font color="#E5E5E5"> NPM</font><font color="#CCCCCC"> I</font>

787
00:36:42,950 --> 00:36:48,830
mentioned NPM is vulnerable to<font color="#E5E5E5"> this and</font>

788
00:36:44,990 --> 00:36:51,459
you<font color="#E5E5E5"> can go and nest this vulnerability</font>

789
00:36:48,830 --> 00:36:55,549
or an exploit for<font color="#E5E5E5"> this vulnerability in</font>

790
00:36:51,460 --> 00:37:00,580
NPM dependency and I was reading<font color="#CCCCCC"> a paper</font>

791
00:36:55,550 --> 00:37:04,790
last week<font color="#E5E5E5"> they said NPM universe has</font>

792
00:37:00,580 --> 00:37:08,150
<font color="#CCCCCC">750,000</font><font color="#E5E5E5"> packages how do you securely</font>

793
00:37:04,790 --> 00:37:10,910
manage<font color="#E5E5E5"> 750,000 packages who could have</font>

794
00:37:08,150 --> 00:37:12,530
any<font color="#E5E5E5"> number of nested dependencies in</font>

795
00:37:10,910 --> 00:37:14,899
them<font color="#E5E5E5"> that actually exploit this</font>

796
00:37:12,530 --> 00:37:17,030
vulnerability<font color="#CCCCCC"> so from a defensive</font>

797
00:37:14,900 --> 00:37:19,760
perspective it<font color="#E5E5E5"> is really</font><font color="#CCCCCC"> difficult to</font>

798
00:37:17,030 --> 00:37:22,310
try<font color="#CCCCCC"> and manage your supply chain you can</font>

799
00:37:19,760 --> 00:37:24,020
try your<font color="#E5E5E5"> best try know where your</font>

800
00:37:22,310 --> 00:37:26,509
packages are coming<font color="#E5E5E5"> from you can use</font>

801
00:37:24,020 --> 00:37:28,160
something like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> either no</font><font color="#CCCCCC"> three service</font>

802
00:37:26,510 --> 00:37:29,780
just<font color="#CCCCCC"> to make sure that the package that</font>

803
00:37:28,160 --> 00:37:32,240
<font color="#CCCCCC">you're receiving is the ones you</font>

804
00:37:29,780 --> 00:37:34,730
expecting or you host your<font color="#CCCCCC"> own NPM</font>

805
00:37:32,240 --> 00:37:37,549
registry your own docker registry<font color="#E5E5E5"> but</font>

806
00:37:34,730 --> 00:37:39,800
that gets rid of all this nice<font color="#E5E5E5"> DevOps</font>

807
00:37:37,550 --> 00:37:42,200
<font color="#E5E5E5">platform as a service infrastructure as</font>

808
00:37:39,800 --> 00:37:44,690
a service<font color="#E5E5E5"> world that we now live</font><font color="#CCCCCC"> in</font>

809
00:37:42,200 --> 00:37:47,299
where everything is hosted<font color="#E5E5E5"> and run for</font>

810
00:37:44,690 --> 00:37:51,950
us externally<font color="#CCCCCC"> that's a really difficult</font>

811
00:37:47,300 --> 00:37:54,140
<font color="#E5E5E5">problem to try and solve one one last</font>

812
00:37:51,950 --> 00:37:56,419
<font color="#CCCCCC">example of this is go modules are</font>

813
00:37:54,140 --> 00:37:58,730
actually moving<font color="#E5E5E5"> towards a module where</font>

814
00:37:56,420 --> 00:38:00,530
they can prove that<font color="#CCCCCC"> the source</font><font color="#E5E5E5"> code that</font>

815
00:37:58,730 --> 00:38:03,950
<font color="#CCCCCC">you download is the source code</font><font color="#E5E5E5"> that</font>

816
00:38:00,530 --> 00:38:06,050
you're expecting so they proposing the

817
00:38:03,950 --> 00:38:08,899
<font color="#E5E5E5">use of a notary service</font>

818
00:38:06,050 --> 00:38:11,930
the notary service were actually once

819
00:38:08,900 --> 00:38:14,630
you've<font color="#E5E5E5"> done a go get it was go we'll</font>

820
00:38:11,930 --> 00:38:16,279
check the<font color="#E5E5E5"> sha-256 or the signature of</font>

821
00:38:14,630 --> 00:38:17,330
the package that's<font color="#CCCCCC"> been</font><font color="#E5E5E5"> downloaded or</font>

822
00:38:16,280 --> 00:38:19,430
the<font color="#E5E5E5"> module that's been</font><font color="#CCCCCC"> downloaded</font>

823
00:38:17,330 --> 00:38:21,380
<font color="#E5E5E5">contact the notary service say hey I</font>

824
00:38:19,430 --> 00:38:23,870
<font color="#CCCCCC">just</font><font color="#E5E5E5"> downloaded this package this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

825
00:38:21,380 --> 00:38:25,820
signature I get and the hashes<font color="#E5E5E5"> for all</font>

826
00:38:23,870 --> 00:38:28,160
the files that<font color="#CCCCCC"> are downloaded</font><font color="#E5E5E5"> is this</font>

827
00:38:25,820 --> 00:38:31,340
what is expected<font color="#E5E5E5"> and the notary service</font>

828
00:38:28,160 --> 00:38:33,290
to say yea or<font color="#CCCCCC"> nay you might still have</font>

829
00:38:31,340 --> 00:38:34,910
<font color="#E5E5E5">ended up with code execution in that</font>

830
00:38:33,290 --> 00:38:36,890
point<font color="#E5E5E5"> but at least you know there's no</font>

831
00:38:34,910 --> 00:38:42,560
<font color="#CCCCCC">backdoor</font><font color="#E5E5E5"> and the code that</font><font color="#CCCCCC"> you</font>

832
00:38:36,890 --> 00:38:45,049
<font color="#CCCCCC">downloading another nice example is when</font>

833
00:38:42,560 --> 00:38:47,509
I showed all those tools<font color="#E5E5E5"> I initially had</font>

834
00:38:45,050 --> 00:38:50,090
rust cargo on the list of tools that<font color="#E5E5E5"> are</font>

835
00:38:47,510 --> 00:38:52,700
<font color="#CCCCCC">vulnerable</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> this specific way</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

836
00:38:50,090 --> 00:38:55,790
<font color="#E5E5E5">reason for</font><font color="#CCCCCC"> that is because rush kaga</font>

837
00:38:52,700 --> 00:38:58,069
uses<font color="#E5E5E5"> get in the background to set up the</font>

838
00:38:55,790 --> 00:39:01,490
packages<font color="#CCCCCC"> what I didn't realize is it</font>

839
00:38:58,070 --> 00:39:04,070
<font color="#E5E5E5">uses</font><font color="#CCCCCC"> lib get to the</font><font color="#E5E5E5"> lib get to library</font>

840
00:39:01,490 --> 00:39:06,740
to actually do the get cloning instead

841
00:39:04,070 --> 00:39:09,440
of shelling<font color="#E5E5E5"> out to get and</font><font color="#CCCCCC"> Lib get to</font>

842
00:39:06,740 --> 00:39:11,810
has made a<font color="#E5E5E5"> really good security decision</font>

843
00:39:09,440 --> 00:39:14,570
to not automatically execute anything

844
00:39:11,810 --> 00:39:17,000
<font color="#E5E5E5">like hooks or any external scripts</font>

845
00:39:14,570 --> 00:39:19,280
during<font color="#E5E5E5"> the setup process of a git</font>

846
00:39:17,000 --> 00:39:21,800
repository<font color="#CCCCCC"> that is all up to the end</font>

847
00:39:19,280 --> 00:39:24,680
user or<font color="#CCCCCC"> their end developer who's using</font>

848
00:39:21,800 --> 00:39:27,200
<font color="#E5E5E5">the library to actually do that</font><font color="#CCCCCC"> so even</font>

849
00:39:24,680 --> 00:39:29,060
<font color="#CCCCCC">though</font><font color="#E5E5E5"> Libya</font><font color="#CCCCCC"> - was vulnerable to the CV</font>

850
00:39:27,200 --> 00:39:32,180
2018 one one two three five

851
00:39:29,060 --> 00:39:34,190
it was not exploitable because in no

852
00:39:32,180 --> 00:39:37,040
hooks or no external prices they get

853
00:39:34,190 --> 00:39:39,770
executed<font color="#E5E5E5"> so that's another option look</font>

854
00:39:37,040 --> 00:39:42,850
at<font color="#E5E5E5"> using secure new implementations of</font>

855
00:39:39,770 --> 00:39:45,980
libraries such as Lib get<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to actually</font>

856
00:39:42,850 --> 00:39:48,170
<font color="#E5E5E5">as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> dependency for your source code</font>

857
00:39:45,980 --> 00:39:51,500
downloaders or<font color="#E5E5E5"> process</font><font color="#CCCCCC"> that download</font>

858
00:39:48,170 --> 00:39:54,620
<font color="#E5E5E5">your source code source code should also</font>

859
00:39:51,500 --> 00:39:58,340
be<font color="#E5E5E5"> fetched in a secure or isolated</font>

860
00:39:54,620 --> 00:40:00,380
system<font color="#E5E5E5"> as I mentioned with the the doc</font>

861
00:39:58,340 --> 00:40:03,920
example for<font color="#CCCCCC"> example if you running</font>

862
00:40:00,380 --> 00:40:07,160
<font color="#CCCCCC">docker</font><font color="#E5E5E5"> bold and pointing it at a git</font>

863
00:40:03,920 --> 00:40:11,120
repository<font color="#E5E5E5"> that that fetches and</font>

864
00:40:07,160 --> 00:40:14,560
<font color="#CCCCCC">executes your</font><font color="#E5E5E5"> bold scripts in in the</font>

865
00:40:11,120 --> 00:40:17,359
same process<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> same environment</font><font color="#CCCCCC"> and</font>

866
00:40:14,560 --> 00:40:19,070
<font color="#E5E5E5">and that Lisa leads into at least a</font>

867
00:40:17,360 --> 00:40:19,680
problem if there's a code execution

868
00:40:19,070 --> 00:40:22,290
during<font color="#CCCCCC"> the</font>

869
00:40:19,680 --> 00:40:24,870
both the download phase<font color="#E5E5E5"> your</font><font color="#CCCCCC"> board face</font>

870
00:40:22,290 --> 00:40:27,120
is also compromised<font color="#E5E5E5"> so you want to be</font>

871
00:40:24,870 --> 00:40:30,390
fetching code<font color="#E5E5E5"> in an</font><font color="#CCCCCC"> isolated system</font>

872
00:40:27,120 --> 00:40:32,490
<font color="#E5E5E5">making</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that the code hasn't been</font>

873
00:40:30,390 --> 00:40:34,230
<font color="#E5E5E5">tainted in any way before you transfer</font>

874
00:40:32,490 --> 00:40:40,470
it to your<font color="#CCCCCC"> bowled</font><font color="#E5E5E5"> system that does the</font>

875
00:40:34,230 --> 00:40:42,510
<font color="#CCCCCC">board</font><font color="#E5E5E5"> process I've gone a lot quicker</font>

876
00:40:40,470 --> 00:40:46,620
than<font color="#E5E5E5"> I</font><font color="#CCCCCC"> thought</font><font color="#E5E5E5"> oh five minutes quicker</font>

877
00:40:42,510 --> 00:40:48,930
than I<font color="#CCCCCC"> expected but I'm</font><font color="#E5E5E5"> available for</font>

878
00:40:46,620 --> 00:40:51,600
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> now I'm going to be</font><font color="#E5E5E5"> doing a</font>

879
00:40:48,930 --> 00:40:53,490
blog post on the<font color="#E5E5E5"> go vulnerability</font>

880
00:40:51,600 --> 00:40:55,910
<font color="#E5E5E5">putting that up on the Heroku blog most</font>

881
00:40:53,490 --> 00:40:57,990
likely otherwise the the get

882
00:40:55,910 --> 00:41:01,020
vulnerability I've written it<font color="#E5E5E5"> up on my</font>

883
00:40:57,990 --> 00:41:03,930
personal<font color="#CCCCCC"> blog and yeah there's any</font>

884
00:41:01,020 --> 00:41:05,400
questions and<font color="#E5E5E5"> also all the content</font><font color="#CCCCCC"> I'll</font>

885
00:41:03,930 --> 00:41:09,000
make<font color="#E5E5E5"> it available straight off to this</font>

886
00:41:05,400 --> 00:41:13,140
it's all lives<font color="#E5E5E5"> in a get repository how</font>

887
00:41:09,000 --> 00:41:14,220
<font color="#CCCCCC">meta so the</font><font color="#E5E5E5"> video is</font><font color="#CCCCCC"> the slides</font><font color="#E5E5E5"> with</font>

888
00:41:13,140 --> 00:41:16,759
speaker notes<font color="#E5E5E5"> and everything is</font>

889
00:41:14,220 --> 00:41:16,759
<font color="#E5E5E5">available there</font>

890
00:41:17,630 --> 00:41:22,090
[Applause]

