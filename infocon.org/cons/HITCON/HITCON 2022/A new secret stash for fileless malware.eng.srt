1
00:00:28,680 --> 00:00:31,780
[Music]

2
00:00:50,370 --> 00:00:52,000
[Music]

3
00:00:52,000 --> 00:00:54,399
hi i'm denis from kaspersky

4
00:00:54,399 --> 00:00:56,879
and really nice to be here on the hitcom

5
00:00:56,879 --> 00:01:00,000
piece 2022 thanks for the interest to

6
00:01:00,000 --> 00:01:02,000
the topic

7
00:01:02,000 --> 00:01:05,119
what i mostly do in kaspersky is thread

8
00:01:05,119 --> 00:01:07,920
intelligence reverse engineering and

9
00:01:07,920 --> 00:01:11,439
sometimes trainings on the same measures

10
00:01:11,439 --> 00:01:13,119
and i really think

11
00:01:13,119 --> 00:01:16,080
what topic this year

12
00:01:16,080 --> 00:01:18,560
has a real connection to the sub

13
00:01:18,560 --> 00:01:20,799
headline of the conference survival

14
00:01:20,799 --> 00:01:21,759
guide

15
00:01:21,759 --> 00:01:22,640
why

16
00:01:22,640 --> 00:01:23,920
because

17
00:01:23,920 --> 00:01:25,360
this attack

18
00:01:25,360 --> 00:01:27,439
has really

19
00:01:27,439 --> 00:01:30,960
applied so many techniques we consider

20
00:01:30,960 --> 00:01:34,400
actual modern and i really hope

21
00:01:34,400 --> 00:01:37,520
as a takeaway from the talk your blue

22
00:01:37,520 --> 00:01:41,040
team red team relaxing team would end up

23
00:01:41,040 --> 00:01:44,000
after this 40 minutes with some ideas

24
00:01:44,000 --> 00:01:46,159
some research ideas

25
00:01:46,159 --> 00:01:47,280
and some

26
00:01:47,280 --> 00:01:50,159
tips and tricks for your future work and

27
00:01:50,159 --> 00:01:51,680
research so

28
00:01:51,680 --> 00:01:54,720
let us slowly start i understand muslim

29
00:01:54,720 --> 00:01:57,439
is the participants we don't share the

30
00:01:57,439 --> 00:02:00,719
same mother tongue so i would start to

31
00:02:00,719 --> 00:02:01,759
speak

32
00:02:01,759 --> 00:02:05,280
slowly as far as i can as you see not a

33
00:02:05,280 --> 00:02:08,560
slower turkey mostly and really want to

34
00:02:08,560 --> 00:02:10,639
cover all this

35
00:02:10,639 --> 00:02:14,800
attack step by step let us go so firstly

36
00:02:14,800 --> 00:02:19,040
the plan for the next hour 30 minutes

37
00:02:19,040 --> 00:02:23,040
let us before the birth view before the

38
00:02:23,040 --> 00:02:25,440
overview of the attack

39
00:02:25,440 --> 00:02:28,480
let us firstly concentrate on the part

40
00:02:28,480 --> 00:02:31,360
which i considered the most interesting

41
00:02:31,360 --> 00:02:32,480
one

42
00:02:32,480 --> 00:02:36,640
i would emphasize with ability to work

43
00:02:36,640 --> 00:02:39,599
with the windows event logs

44
00:02:39,599 --> 00:02:43,200
and encrypted shell codes inside it with

45
00:02:43,200 --> 00:02:46,560
techniques we never observed before so

46
00:02:46,560 --> 00:02:49,440
we consider it as a brand new for we

47
00:02:49,440 --> 00:02:52,080
targeted malware that's why the

48
00:02:52,080 --> 00:02:54,160
separated part of the talk would be

49
00:02:54,160 --> 00:02:57,519
dedicated to this one and after it we

50
00:02:57,519 --> 00:03:00,640
would cover all the stages stage after

51
00:03:00,640 --> 00:03:03,680
stage from the commercial

52
00:03:03,680 --> 00:03:06,879
sets using by the attackers to the some

53
00:03:06,879 --> 00:03:10,000
free third-party tools and for all the

54
00:03:10,000 --> 00:03:11,599
modules to

55
00:03:11,599 --> 00:03:15,519
to the last stages last stages also not

56
00:03:15,519 --> 00:03:18,400
a single one you would see two of them

57
00:03:18,400 --> 00:03:21,440
for the local area network one and for

58
00:03:21,440 --> 00:03:24,000
the working with a real control service

59
00:03:24,000 --> 00:03:26,640
outside of the

60
00:03:26,640 --> 00:03:27,920
infected

61
00:03:27,920 --> 00:03:31,200
networks what else before the start i

62
00:03:31,200 --> 00:03:33,040
want to mention

63
00:03:33,040 --> 00:03:35,760
want to mention a lot of anti-detection

64
00:03:35,760 --> 00:03:38,959
tricks including the usage of the some

65
00:03:38,959 --> 00:03:43,280
esoteric compilers like a neem go and

66
00:03:43,280 --> 00:03:46,799
also not so esoteric gcc and the mingwv

67
00:03:46,799 --> 00:03:50,080
environment so you would see all this

68
00:03:50,080 --> 00:03:54,159
auxiliary preparation for the last stage

69
00:03:54,159 --> 00:03:55,519
trojans

70
00:03:55,519 --> 00:03:58,159
and also

71
00:03:58,159 --> 00:04:02,959
i would share the ideas why attackers

72
00:04:02,959 --> 00:04:06,400
decided to use some third party code

73
00:04:06,400 --> 00:04:10,000
okay so seems like a plan and i propose

74
00:04:10,000 --> 00:04:13,599
to follow it and after it also i really

75
00:04:13,599 --> 00:04:16,560
hope we would have some time for the

76
00:04:16,560 --> 00:04:18,320
discussion for the

77
00:04:18,320 --> 00:04:21,120
qna firstly before

78
00:04:21,120 --> 00:04:24,000
i would slowly go into this new

79
00:04:24,000 --> 00:04:27,199
technique of keeping shell codes inside

80
00:04:27,199 --> 00:04:29,680
the windows event logs

81
00:04:29,680 --> 00:04:33,680
let us take a look how usually malware

82
00:04:33,680 --> 00:04:36,000
use the logging

83
00:04:36,000 --> 00:04:38,800
right and actually and the

84
00:04:38,800 --> 00:04:42,560
shell codes as well logging typically

85
00:04:42,560 --> 00:04:43,759
it's

86
00:04:43,759 --> 00:04:46,800
if the malicious developer on the other

87
00:04:46,800 --> 00:04:47,840
side

88
00:04:47,840 --> 00:04:51,199
just prefer to debug not with a real

89
00:04:51,199 --> 00:04:54,720
debugger but like a printf like

90
00:04:54,720 --> 00:04:57,600
debugging with the sum messages

91
00:04:57,600 --> 00:05:00,160
a lot of the messages would be in a

92
00:05:00,160 --> 00:05:03,360
binary code via analyzing as reverses

93
00:05:03,360 --> 00:05:04,160
right

94
00:05:04,160 --> 00:05:07,759
why they are living within a release

95
00:05:07,759 --> 00:05:08,960
version

96
00:05:08,960 --> 00:05:11,520
maybe just keeping the to-do list to

97
00:05:11,520 --> 00:05:14,800
remove it later maybe maybe just don't

98
00:05:14,800 --> 00:05:18,880
mind okay let it be the messages

99
00:05:18,880 --> 00:05:23,039
but i also have another idea why

100
00:05:23,039 --> 00:05:26,479
sometimes we made such a logging inside

101
00:05:26,479 --> 00:05:28,240
the malware

102
00:05:28,240 --> 00:05:31,600
imagine the operator take the already

103
00:05:31,600 --> 00:05:33,680
tested model

104
00:05:33,680 --> 00:05:36,720
but now it's time to deploy it in the

105
00:05:36,720 --> 00:05:38,479
real environment

106
00:05:38,479 --> 00:05:41,120
real attack target

107
00:05:41,120 --> 00:05:44,320
and as you could imagine even tested in

108
00:05:44,320 --> 00:05:46,880
in their own environment

109
00:05:46,880 --> 00:05:49,440
everything could go wrong on the stage

110
00:05:49,440 --> 00:05:51,280
of the real infection

111
00:05:51,280 --> 00:05:54,479
all the ids ips all the network

112
00:05:54,479 --> 00:05:57,360
segmentation whatever could ruin all the

113
00:05:57,360 --> 00:06:00,960
plan and operator really wants to know

114
00:06:00,960 --> 00:06:04,880
which stages are already executed and

115
00:06:04,880 --> 00:06:07,360
which stages are

116
00:06:07,360 --> 00:06:10,160
couldn't execute because of some error

117
00:06:10,160 --> 00:06:12,240
maybe it's also

118
00:06:12,240 --> 00:06:15,680
a reason for the sum logging

119
00:06:15,680 --> 00:06:18,400
the typical malware logging exist to

120
00:06:18,400 --> 00:06:22,160
help operator to debug in the real life

121
00:06:22,160 --> 00:06:25,440
mode in a production we could say right

122
00:06:25,440 --> 00:06:28,639
okay anyway sometime it exists on a

123
00:06:28,639 --> 00:06:31,680
slide you could see him in a

124
00:06:31,680 --> 00:06:32,960
model

125
00:06:32,960 --> 00:06:35,840
in charge of steganography just keep the

126
00:06:35,840 --> 00:06:38,560
name of the function and name of the

127
00:06:38,560 --> 00:06:42,160
parameters taken from the bmp files

128
00:06:42,160 --> 00:06:44,400
while the esteganography decryption

129
00:06:44,400 --> 00:06:47,759
process right so sometimes it could help

130
00:06:47,759 --> 00:06:50,400
the analyst to understand what

131
00:06:50,400 --> 00:06:52,960
happens and once again maybe it would

132
00:06:52,960 --> 00:06:56,000
help attack operator to understand at

133
00:06:56,000 --> 00:06:59,280
which stage the infection chain was

134
00:06:59,280 --> 00:07:01,120
broken

135
00:07:01,120 --> 00:07:03,360
also uh

136
00:07:03,360 --> 00:07:04,560
sometimes

137
00:07:04,560 --> 00:07:06,880
we saw an examples

138
00:07:06,880 --> 00:07:09,840
with the logging disappearing so as a

139
00:07:09,840 --> 00:07:12,319
threat hunters we are taking a look at

140
00:07:12,319 --> 00:07:14,960
some models real for years actually for

141
00:07:14,960 --> 00:07:17,599
years and we could see on logging was

142
00:07:17,599 --> 00:07:20,800
there nowadays no logging anymore so

143
00:07:20,800 --> 00:07:23,360
sometimes it disappeared developers

144
00:07:23,360 --> 00:07:25,840
decide we don't need it anymore let's

145
00:07:25,840 --> 00:07:27,039
remove it

146
00:07:27,039 --> 00:07:31,039
time to describe the normal usage of the

147
00:07:31,039 --> 00:07:33,039
shell codes right

148
00:07:33,039 --> 00:07:35,599
where you could met the shell codes in

149
00:07:35,599 --> 00:07:37,360
infection chains

150
00:07:37,360 --> 00:07:39,360
i suppose mostly in the infected

151
00:07:39,360 --> 00:07:40,639
documents

152
00:07:40,639 --> 00:07:41,520
right

153
00:07:41,520 --> 00:07:44,560
and during some reflective loading

154
00:07:44,560 --> 00:07:48,960
so at some stages of the attack mostly

155
00:07:48,960 --> 00:07:51,759
early stages of the attack like an

156
00:07:51,759 --> 00:07:54,879
exploits or embedded code into the

157
00:07:54,879 --> 00:07:57,759
documents whatever the normal place for

158
00:07:57,759 --> 00:07:58,879
the

159
00:07:58,879 --> 00:08:01,360
shellcodes what's the difference between

160
00:08:01,360 --> 00:08:03,520
the normal code and

161
00:08:03,520 --> 00:08:06,080
this kind of the code it have to be

162
00:08:06,080 --> 00:08:09,840
position independent what it means

163
00:08:09,840 --> 00:08:13,440
shellcode couldn't enjoy the help of

164
00:08:13,440 --> 00:08:15,520
operating system

165
00:08:15,520 --> 00:08:18,560
pe file loader right if you are speaking

166
00:08:18,560 --> 00:08:21,840
about windows it could do everything by

167
00:08:21,840 --> 00:08:22,960
itself

168
00:08:22,960 --> 00:08:25,199
so no help from the site of the

169
00:08:25,199 --> 00:08:28,160
operating system mechanism that's why

170
00:08:28,160 --> 00:08:31,199
some like on with screenshot you can see

171
00:08:31,199 --> 00:08:33,120
all these tricks like

172
00:08:33,120 --> 00:08:37,919
call next instruction pop oxy x in a

173
00:08:37,919 --> 00:08:41,200
next instruction to get the current

174
00:08:41,200 --> 00:08:44,560
value in rap the current address of

175
00:08:44,560 --> 00:08:46,800
executed instruction

176
00:08:46,800 --> 00:08:49,519
so it nature of shell codes leads to

177
00:08:49,519 --> 00:08:53,760
some tricks inside with a code also a

178
00:08:53,760 --> 00:08:55,680
lot of the parsing of the process

179
00:08:55,680 --> 00:08:58,080
environment block and

180
00:08:58,080 --> 00:09:00,959
some executable windows files for the

181
00:09:00,959 --> 00:09:03,600
same reflective loading and for the

182
00:09:03,600 --> 00:09:06,240
searching of the system libraries to get

183
00:09:06,240 --> 00:09:10,000
the addresses of operating system api

184
00:09:10,000 --> 00:09:11,120
functions

185
00:09:11,120 --> 00:09:14,800
also nobody wants to save some readable

186
00:09:14,800 --> 00:09:17,360
strings to help the researcher and to

187
00:09:17,360 --> 00:09:18,440
help the

188
00:09:18,440 --> 00:09:22,240
automated security systems saw a lot of

189
00:09:22,240 --> 00:09:24,720
usage of the some hashes

190
00:09:24,720 --> 00:09:27,839
of api function names instead of the

191
00:09:27,839 --> 00:09:29,680
names itself

192
00:09:29,680 --> 00:09:31,519
enough for the normal

193
00:09:31,519 --> 00:09:34,560
shell codes agree i suppose every one of

194
00:09:34,560 --> 00:09:36,959
us method all the time

195
00:09:36,959 --> 00:09:37,760
but

196
00:09:37,760 --> 00:09:38,800
but

197
00:09:38,800 --> 00:09:40,000
why

198
00:09:40,000 --> 00:09:41,600
not to

199
00:09:41,600 --> 00:09:44,560
connect with two mechanism

200
00:09:44,560 --> 00:09:47,040
of the lodging

201
00:09:47,040 --> 00:09:48,640
and some

202
00:09:48,640 --> 00:09:52,080
small position independent shellcode

203
00:09:52,080 --> 00:09:55,200
what malicious engineer invented with

204
00:09:55,200 --> 00:09:56,080
time

205
00:09:56,080 --> 00:09:59,200
let us slowly get the idea even if you

206
00:09:59,200 --> 00:10:02,880
never develop some drivers for windows

207
00:10:02,880 --> 00:10:05,839
for example i don't never develop any

208
00:10:05,839 --> 00:10:07,920
drivers but i know

209
00:10:07,920 --> 00:10:10,560
what windows event logs

210
00:10:10,560 --> 00:10:13,519
could keep binary data

211
00:10:13,519 --> 00:10:15,279
so driver

212
00:10:15,279 --> 00:10:18,480
could not only write the message warning

213
00:10:18,480 --> 00:10:21,360
error or information message to the

214
00:10:21,360 --> 00:10:25,519
event logs but also dump some piece of

215
00:10:25,519 --> 00:10:30,000
binary data why this minidam could help

216
00:10:30,000 --> 00:10:34,399
the driver developers to debug what goes

217
00:10:34,399 --> 00:10:35,519
wrong

218
00:10:35,519 --> 00:10:38,399
imagine you're a third-party developer i

219
00:10:38,399 --> 00:10:41,600
don't know logitech whatever and your

220
00:10:41,600 --> 00:10:43,680
user your end user

221
00:10:43,680 --> 00:10:45,279
just reply

222
00:10:45,279 --> 00:10:47,839
something goes wrong and support could

223
00:10:47,839 --> 00:10:49,920
ask would you please share with mini

224
00:10:49,920 --> 00:10:52,240
dump and our

225
00:10:52,240 --> 00:10:54,880
third line of support could research the

226
00:10:54,880 --> 00:10:58,079
reason for this issue it's completely

227
00:10:58,079 --> 00:11:02,560
legit mechanism of keeping binary but

228
00:11:02,560 --> 00:11:05,440
into the event logs

229
00:11:05,440 --> 00:11:08,480
after it malicious engineer thinks hmm

230
00:11:08,480 --> 00:11:10,399
if it's binary

231
00:11:10,399 --> 00:11:13,120
when i could keep shellcode over there

232
00:11:13,120 --> 00:11:15,839
as well what could stop

233
00:11:15,839 --> 00:11:19,360
the malicious developer actually nothing

234
00:11:19,360 --> 00:11:22,800
so after it what they need

235
00:11:22,800 --> 00:11:25,760
they need some mechanism to put it over

236
00:11:25,760 --> 00:11:29,120
there into event logs and to get it from

237
00:11:29,120 --> 00:11:30,000
here

238
00:11:30,000 --> 00:11:32,160
and the main reason for all this

239
00:11:32,160 --> 00:11:36,480
development is seen for ages malware

240
00:11:36,480 --> 00:11:39,279
tried to hide itself from the plain

241
00:11:39,279 --> 00:11:42,399
sight from the live researchers from the

242
00:11:42,399 --> 00:11:45,200
automated system file system is the most

243
00:11:45,200 --> 00:11:48,320
visible part right if malware keeping us

244
00:11:48,320 --> 00:11:51,760
a file it would be detected in no time

245
00:11:51,760 --> 00:11:54,560
that's why all alternative data streams

246
00:11:54,560 --> 00:11:57,600
whatever vmi subscriptions windows

247
00:11:57,600 --> 00:12:01,040
system registry and now even windows

248
00:12:01,040 --> 00:12:02,959
event logs

249
00:12:02,959 --> 00:12:04,560
as places

250
00:12:04,560 --> 00:12:08,160
not so visible for the researchers and

251
00:12:08,160 --> 00:12:12,079
for the automated security systems right

252
00:12:12,079 --> 00:12:15,440
for sure it exists on the file level in

253
00:12:15,440 --> 00:12:18,079
case of our event logs for example it

254
00:12:18,079 --> 00:12:20,800
would be evtx files

255
00:12:20,800 --> 00:12:23,279
but in a proprietary format

256
00:12:23,279 --> 00:12:25,519
and maybe security solution would

257
00:12:25,519 --> 00:12:26,639
consider

258
00:12:26,639 --> 00:12:30,560
to time consuming to check with

259
00:12:30,560 --> 00:12:34,000
not so file system level artifacts for

260
00:12:34,000 --> 00:12:37,440
the malware this is the idea behind the

261
00:12:37,440 --> 00:12:39,600
shell codes into the

262
00:12:39,600 --> 00:12:43,839
event logs under windows enough words

263
00:12:43,839 --> 00:12:46,880
let us go straight to the code what we

264
00:12:46,880 --> 00:12:47,680
see

265
00:12:47,680 --> 00:12:48,959
here

266
00:12:48,959 --> 00:12:52,560
some allocation first of all right

267
00:12:52,560 --> 00:12:54,480
500 and

268
00:12:54,480 --> 00:12:56,800
12 000

269
00:12:56,800 --> 00:12:57,920
bytes

270
00:12:57,920 --> 00:13:01,279
initially allocated and after it

271
00:13:01,279 --> 00:13:05,839
developer just register the event source

272
00:13:05,839 --> 00:13:08,880
event source with name game management

273
00:13:08,880 --> 00:13:12,959
service i would name it kms from now on

274
00:13:12,959 --> 00:13:15,120
kms if you check

275
00:13:15,120 --> 00:13:17,200
your event log

276
00:13:17,200 --> 00:13:20,240
right now if you under windows you could

277
00:13:20,240 --> 00:13:22,320
check and you would see

278
00:13:22,320 --> 00:13:24,560
it's already existing

279
00:13:24,560 --> 00:13:25,839
source

280
00:13:25,839 --> 00:13:29,440
and it stands for the

281
00:13:29,440 --> 00:13:32,560
registration for the licensing mechanism

282
00:13:32,560 --> 00:13:34,880
for the office product for the operating

283
00:13:34,880 --> 00:13:36,959
system itself etc

284
00:13:36,959 --> 00:13:38,079
so

285
00:13:38,079 --> 00:13:42,320
opening the existing event source okay i

286
00:13:42,320 --> 00:13:45,040
got the idea after it

287
00:13:45,040 --> 00:13:48,320
the second api function windows api

288
00:13:48,320 --> 00:13:52,079
function name read event log

289
00:13:52,079 --> 00:13:54,800
read event log as usual the suffixes a

290
00:13:54,800 --> 00:13:57,680
and w stands for the ascii and white you

291
00:13:57,680 --> 00:13:59,519
could just

292
00:13:59,519 --> 00:14:01,839
please don't mind it stands for the let

293
00:14:01,839 --> 00:14:04,720
us use the white strings the meaningful

294
00:14:04,720 --> 00:14:07,920
part is a read event lock

295
00:14:07,920 --> 00:14:11,199
reading i make some comments here we are

296
00:14:11,199 --> 00:14:14,160
actually taking a look at

297
00:14:14,160 --> 00:14:16,720
the compiled code already

298
00:14:16,720 --> 00:14:18,639
uh after the

299
00:14:18,639 --> 00:14:19,760
analyst

300
00:14:19,760 --> 00:14:22,959
work with it right all the renamings all

301
00:14:22,959 --> 00:14:25,839
the structures created for you before

302
00:14:25,839 --> 00:14:28,240
the screenshot was made

303
00:14:28,240 --> 00:14:30,720
what is here please

304
00:14:30,720 --> 00:14:34,720
take a look at event logs sequentially

305
00:14:34,720 --> 00:14:38,800
forward so from the former to the letter

306
00:14:38,800 --> 00:14:40,480
and keep it

307
00:14:40,480 --> 00:14:44,639
in some allocated memory on heap right

308
00:14:44,639 --> 00:14:47,279
if it's not enough memory please

309
00:14:47,279 --> 00:14:48,959
reallock it

310
00:14:48,959 --> 00:14:52,079
but you could ask me okay it's just

311
00:14:52,079 --> 00:14:53,199
reading

312
00:14:53,199 --> 00:14:57,839
all the event logs provided by kms and

313
00:14:57,839 --> 00:15:00,560
you told us it's a legend

314
00:15:00,560 --> 00:15:02,959
so this code would just read not only

315
00:15:02,959 --> 00:15:05,839
malicious event logs but all of them

316
00:15:05,839 --> 00:15:08,800
true but take a look how

317
00:15:08,800 --> 00:15:11,040
it's going further

318
00:15:11,040 --> 00:15:12,320
it's

319
00:15:12,320 --> 00:15:16,000
taken to the container to the std string

320
00:15:16,000 --> 00:15:19,680
style container only needed part of this

321
00:15:19,680 --> 00:15:22,160
locks take a look at the filter

322
00:15:22,160 --> 00:15:24,639
filter is event category

323
00:15:24,639 --> 00:15:27,360
so developer knows for sure

324
00:15:27,360 --> 00:15:30,480
normal kms locks wouldn't use event

325
00:15:30,480 --> 00:15:33,600
category in a hexadecimal it would be

326
00:15:33,600 --> 00:15:36,639
four one for two in ascii like on a

327
00:15:36,639 --> 00:15:39,440
screenshot it's a a b

328
00:15:39,440 --> 00:15:43,600
never would use such a category only

329
00:15:43,600 --> 00:15:45,120
the custom

330
00:15:45,120 --> 00:15:48,480
locks from the malware would be use such

331
00:15:48,480 --> 00:15:51,920
a event category applying this filter

332
00:15:51,920 --> 00:15:55,279
they would filter out all the legit kms

333
00:15:55,279 --> 00:15:56,320
locks

334
00:15:56,320 --> 00:15:57,360
okay

335
00:15:57,360 --> 00:16:01,519
so the resulting string would keep our

336
00:16:01,519 --> 00:16:04,639
encrypted shellcode after it

337
00:16:04,639 --> 00:16:08,320
what else but before we are reading this

338
00:16:08,320 --> 00:16:10,720
data some model

339
00:16:10,720 --> 00:16:13,199
some malicious model have to put it over

340
00:16:13,199 --> 00:16:16,720
there for sure for sure the dropper drop

341
00:16:16,720 --> 00:16:21,120
contains two resources binary resources

342
00:16:21,120 --> 00:16:24,639
so i suppose you as me see it all the

343
00:16:24,639 --> 00:16:27,360
time keeping some data in the resources

344
00:16:27,360 --> 00:16:30,560
of the windows portable executable one

345
00:16:30,560 --> 00:16:33,519
resource for the launcher

346
00:16:33,519 --> 00:16:36,320
launch as a model which would take the

347
00:16:36,320 --> 00:16:38,560
code from the event log and run it

348
00:16:38,560 --> 00:16:41,040
decrypt and run it we saw it on the

349
00:16:41,040 --> 00:16:42,480
previous slide

350
00:16:42,480 --> 00:16:45,120
and one resource for the shellcode

351
00:16:45,120 --> 00:16:46,639
itself

352
00:16:46,639 --> 00:16:49,040
take a look we would need a little bit

353
00:16:49,040 --> 00:16:53,360
more windows api named report event

354
00:16:53,360 --> 00:16:56,160
and report event would put

355
00:16:56,160 --> 00:16:59,519
the data into the event log

356
00:16:59,519 --> 00:17:02,079
the arguments interesting for us it's

357
00:17:02,079 --> 00:17:05,280
once again category for one for two you

358
00:17:05,280 --> 00:17:08,319
see it's the same category a b

359
00:17:08,319 --> 00:17:09,839
and the type

360
00:17:09,839 --> 00:17:12,720
of the login it's just information not a

361
00:17:12,720 --> 00:17:15,280
warning not a critical arrow just some

362
00:17:15,280 --> 00:17:18,079
information please put it over there and

363
00:17:18,079 --> 00:17:20,720
the third argument i want to emphasize

364
00:17:20,720 --> 00:17:24,000
here is the id of the message

365
00:17:24,000 --> 00:17:26,160
it would be incremental

366
00:17:26,160 --> 00:17:29,200
starting from the 1 4 to 3

367
00:17:29,200 --> 00:17:32,720
1 4 to 3 would be first id

368
00:17:32,720 --> 00:17:36,080
of the first log message with the part

369
00:17:36,080 --> 00:17:37,840
of shellcode

370
00:17:37,840 --> 00:17:41,120
and incrementally all the others part of

371
00:17:41,120 --> 00:17:44,480
the shellcodes 8 kilobytes long each of

372
00:17:44,480 --> 00:17:48,400
them would be placed into our event logs

373
00:17:48,400 --> 00:17:51,600
so i intentionally put on this slide

374
00:17:51,600 --> 00:17:55,600
the writer and the reader for the event

375
00:17:55,600 --> 00:17:58,320
logs so you could see how it all

376
00:17:58,320 --> 00:17:59,520
happened

377
00:17:59,520 --> 00:18:00,480
so

378
00:18:00,480 --> 00:18:03,520
uh once again i consider this part of

379
00:18:03,520 --> 00:18:05,039
the

380
00:18:05,039 --> 00:18:08,000
malware the most interesting one due to

381
00:18:08,000 --> 00:18:10,240
the some

382
00:18:10,240 --> 00:18:13,440
noise some new ideas inside it never saw

383
00:18:13,440 --> 00:18:15,120
it before

384
00:18:15,120 --> 00:18:18,480
let us also take a briefly look inside

385
00:18:18,480 --> 00:18:22,000
the shell code we already discussed so

386
00:18:22,000 --> 00:18:23,200
the

387
00:18:23,200 --> 00:18:25,520
code inside the shell codes are a little

388
00:18:25,520 --> 00:18:28,160
bit different from the normal pe and as

389
00:18:28,160 --> 00:18:29,360
you could see

390
00:18:29,360 --> 00:18:30,240
here

391
00:18:30,240 --> 00:18:33,360
familiar parsing of the pe file it would

392
00:18:33,360 --> 00:18:37,280
be the next stage in our attack part 8

393
00:18:37,280 --> 00:18:38,480
just

394
00:18:38,480 --> 00:18:43,280
find in a system libraries needed apis

395
00:18:43,280 --> 00:18:46,960
based by have and running the function

396
00:18:46,960 --> 00:18:52,000
with a have found so it just

397
00:18:52,000 --> 00:18:54,559
if you would generate some shell code

398
00:18:54,559 --> 00:18:57,360
with your msf phenom you would see a

399
00:18:57,360 --> 00:18:58,480
little

400
00:18:58,480 --> 00:19:01,600
something similar to this picture

401
00:19:01,600 --> 00:19:03,440
okay now

402
00:19:03,440 --> 00:19:06,799
enough for this feature of event logs

403
00:19:06,799 --> 00:19:10,000
let us slowly go to the bird view of the

404
00:19:10,000 --> 00:19:12,480
attack what is

405
00:19:12,480 --> 00:19:16,559
besides this new mechanism

406
00:19:16,559 --> 00:19:20,400
i would like to emphasize the usage of

407
00:19:20,400 --> 00:19:24,000
at least two commercial tools

408
00:19:24,000 --> 00:19:24,799
the

409
00:19:24,799 --> 00:19:27,840
model of cobalt strike were detected in

410
00:19:27,840 --> 00:19:29,120
this case

411
00:19:29,120 --> 00:19:33,520
and also the traces of the throwback and

412
00:19:33,520 --> 00:19:36,240
silent break are everywhere in the

413
00:19:36,240 --> 00:19:39,440
models like in the original file names

414
00:19:39,440 --> 00:19:43,120
for the dll the encryption like in a

415
00:19:43,120 --> 00:19:45,280
throwback on the

416
00:19:45,280 --> 00:19:48,720
old free version of a throwback models

417
00:19:48,720 --> 00:19:50,240
on the github

418
00:19:50,240 --> 00:19:54,320
so it's obviously was uh in use also

419
00:19:54,320 --> 00:19:57,280
besides the usage over several

420
00:19:57,280 --> 00:20:00,400
commercial tools a lot of auxiliary

421
00:20:00,400 --> 00:20:01,520
models

422
00:20:01,520 --> 00:20:03,000
are for the

423
00:20:03,000 --> 00:20:04,640
anti-detection

424
00:20:04,640 --> 00:20:07,919
what i mean here they try

425
00:20:07,919 --> 00:20:09,840
to use some a little bit strange

426
00:20:09,840 --> 00:20:12,960
compilers like a neem and go i would

427
00:20:12,960 --> 00:20:15,039
show you the go model

428
00:20:15,039 --> 00:20:18,400
new model is something similar

429
00:20:18,400 --> 00:20:21,200
to just

430
00:20:21,200 --> 00:20:23,679
goes away from the detection right

431
00:20:23,679 --> 00:20:26,320
thinking okay for some times usage that

432
00:20:26,320 --> 00:20:29,440
some not so common compilers would keep

433
00:20:29,440 --> 00:20:32,320
us from the detection oh i don't think

434
00:20:32,320 --> 00:20:35,200
it's uh it's really happened but anyway

435
00:20:35,200 --> 00:20:37,440
please keep in mind nowadays some

436
00:20:37,440 --> 00:20:39,840
strange compilers were in use for

437
00:20:39,840 --> 00:20:42,720
anti-detection i'm wondering would we

438
00:20:42,720 --> 00:20:44,400
get some lisp

439
00:20:44,400 --> 00:20:45,520
samples

440
00:20:45,520 --> 00:20:47,360
for such a

441
00:20:47,360 --> 00:20:49,760
task about here in case of this targeted

442
00:20:49,760 --> 00:20:53,360
malware go and nim what's the language

443
00:20:53,360 --> 00:20:56,480
of the uh of their choice outside of c

444
00:20:56,480 --> 00:20:59,679
and c plus plus also two types of the

445
00:20:59,679 --> 00:21:02,880
trojan right the point number three two

446
00:21:02,880 --> 00:21:05,520
types of the trojan what i think about

447
00:21:05,520 --> 00:21:08,799
it for the lateral movement inside the

448
00:21:08,799 --> 00:21:10,640
local area network

449
00:21:10,640 --> 00:21:12,799
they stand with a

450
00:21:12,799 --> 00:21:17,039
named pipe version of the trojan and for

451
00:21:17,039 --> 00:21:20,400
the host which code really goes outside

452
00:21:20,400 --> 00:21:24,080
to the real c2 they choose http

453
00:21:24,080 --> 00:21:26,880
encrypted http based communication with

454
00:21:26,880 --> 00:21:29,760
a control server with another trojan and

455
00:21:29,760 --> 00:21:32,720
another common system

456
00:21:32,720 --> 00:21:35,600
this is it so we need now we need to

457
00:21:35,600 --> 00:21:39,039
cover with three points right usage of

458
00:21:39,039 --> 00:21:40,960
the some tool sets

459
00:21:40,960 --> 00:21:43,120
also some interesting part of the

460
00:21:43,120 --> 00:21:44,880
auxiliary models including

461
00:21:44,880 --> 00:21:47,520
anti-detection decryption whatever and

462
00:21:47,520 --> 00:21:50,720
some last stages which are more than one

463
00:21:50,720 --> 00:21:53,120
you see so with

464
00:21:53,120 --> 00:21:54,559
or

465
00:21:54,559 --> 00:21:55,840
it's a quite

466
00:21:55,840 --> 00:21:58,480
complicated right targeted malware as

467
00:21:58,480 --> 00:22:00,640
usual it's like

468
00:22:00,640 --> 00:22:03,039
i don't know like a chip with a

469
00:22:03,039 --> 00:22:05,760
different but like a system on the chip

470
00:22:05,760 --> 00:22:09,039
i could say with a real uh interesting

471
00:22:09,039 --> 00:22:10,799
targeted attack

472
00:22:10,799 --> 00:22:14,159
okay step by step anyway we could cover

473
00:22:14,159 --> 00:22:18,559
it third party trolls also maybe as we

474
00:22:18,559 --> 00:22:20,880
you also

475
00:22:20,880 --> 00:22:23,679
had an experience with the usage of some

476
00:22:23,679 --> 00:22:26,720
code from the github in this case it was

477
00:22:26,720 --> 00:22:28,159
a black bomb

478
00:22:28,159 --> 00:22:30,720
black bomb if you see it on a screenshot

479
00:22:30,720 --> 00:22:32,960
white and open on the github i

480
00:22:32,960 --> 00:22:35,120
personally met it several times in the

481
00:22:35,120 --> 00:22:37,760
malware it's a for sure it's not a

482
00:22:37,760 --> 00:22:41,440
malware by itself just useful for the

483
00:22:41,440 --> 00:22:42,640
malicious

484
00:22:42,640 --> 00:22:45,280
developers

485
00:22:45,919 --> 00:22:47,679
i could

486
00:22:47,679 --> 00:22:50,559
tell what are some code snippets from

487
00:22:50,559 --> 00:22:53,440
the github it's not new it happens all

488
00:22:53,440 --> 00:22:55,840
the time in our experience but

489
00:22:55,840 --> 00:22:59,520
simultaneously usage of true commercial

490
00:22:59,520 --> 00:23:00,720
toolset

491
00:23:00,720 --> 00:23:03,679
it's interesting it's interesting uh

492
00:23:03,679 --> 00:23:06,240
it's not a typical picture business

493
00:23:06,240 --> 00:23:09,280
point i want to emphasize here on this

494
00:23:09,280 --> 00:23:10,559
slide why

495
00:23:10,559 --> 00:23:13,919
we decided it's a presence of the black

496
00:23:13,919 --> 00:23:16,880
bone here take a look at this very

497
00:23:16,880 --> 00:23:20,400
typical trampoline picture

498
00:23:20,400 --> 00:23:21,360
if

499
00:23:21,360 --> 00:23:24,080
we would take out a look at the

500
00:23:24,080 --> 00:23:26,799
one way how to patch

501
00:23:26,799 --> 00:23:29,360
how to patch legit model

502
00:23:29,360 --> 00:23:33,520
during the dll side loading we would see

503
00:23:33,520 --> 00:23:36,480
the same picture let me describe it

504
00:23:36,480 --> 00:23:37,760
they took

505
00:23:37,760 --> 00:23:42,159
legit file windows file where fault.dll

506
00:23:42,159 --> 00:23:44,320
workfault.exe

507
00:23:44,320 --> 00:23:47,280
dot xe it's in charge

508
00:23:47,280 --> 00:23:49,039
of the

509
00:23:49,039 --> 00:23:50,799
error handling

510
00:23:50,799 --> 00:23:52,960
windows error handling workforce

511
00:23:52,960 --> 00:23:56,559
magazine they copy this legend file to

512
00:23:56,559 --> 00:23:57,760
the theme

513
00:23:57,760 --> 00:24:00,320
windows tasks

514
00:24:00,320 --> 00:24:03,039
it would be kept over there and they

515
00:24:03,039 --> 00:24:06,320
dropped the library with a very specific

516
00:24:06,320 --> 00:24:07,840
name verb

517
00:24:07,840 --> 00:24:12,159
w e r dot dll into the same directory so

518
00:24:12,159 --> 00:24:14,640
familia dlls for children hijacking

519
00:24:14,640 --> 00:24:17,679
right in the same directory white listed

520
00:24:17,679 --> 00:24:21,520
ledger file dll with a specific name and

521
00:24:21,520 --> 00:24:23,919
inside this dll

522
00:24:23,919 --> 00:24:26,799
they don't want the verb voltage

523
00:24:26,799 --> 00:24:29,360
continue its normal execution to report

524
00:24:29,360 --> 00:24:32,480
some errors no no they need to page

525
00:24:32,480 --> 00:24:34,960
entry point of the very fault and the

526
00:24:34,960 --> 00:24:36,080
patching

527
00:24:36,080 --> 00:24:39,360
is a completely familiar black bomb

528
00:24:39,360 --> 00:24:41,840
trampoline take a look so some

529
00:24:41,840 --> 00:24:44,799
preparation in memory code like on

530
00:24:44,799 --> 00:24:48,400
assembly level it would mean a move zero

531
00:24:48,400 --> 00:24:49,919
to

532
00:24:49,919 --> 00:24:52,720
move needed address to the rocks and

533
00:24:52,720 --> 00:24:54,400
jump rugs

534
00:24:54,400 --> 00:24:57,760
and what is our function to jump instead

535
00:24:57,760 --> 00:25:01,360
of the real entry point it's just it's a

536
00:25:01,360 --> 00:25:03,600
perfect function i could say take a look

537
00:25:03,600 --> 00:25:06,559
i name it wait an exit it just wait for

538
00:25:06,559 --> 00:25:09,600
single object of the real thread which

539
00:25:09,600 --> 00:25:12,159
is executed the main payload of the

540
00:25:12,159 --> 00:25:16,080
malicious dll so a familiar way of doing

541
00:25:16,080 --> 00:25:19,360
things a little bit funny i could say so

542
00:25:19,360 --> 00:25:21,760
instead of entry point of whitelisted

543
00:25:21,760 --> 00:25:25,200
legend process jumping to the waiting

544
00:25:25,200 --> 00:25:28,799
while malware end up its execution

545
00:25:28,799 --> 00:25:29,679
okay

546
00:25:29,679 --> 00:25:32,880
some way of program such a tasks what do

547
00:25:32,880 --> 00:25:36,080
i know little bit funny but possible

548
00:25:36,080 --> 00:25:37,360
what else

549
00:25:37,360 --> 00:25:38,880
so enough

550
00:25:38,880 --> 00:25:43,679
i don't want to spend too much time on a

551
00:25:43,679 --> 00:25:44,960
available

552
00:25:44,960 --> 00:25:47,200
code third party code because you could

553
00:25:47,200 --> 00:25:49,919
find its description or even source code

554
00:25:49,919 --> 00:25:52,960
on the github let us slowly go

555
00:25:52,960 --> 00:25:57,360
to the custom code to the anti-detection

556
00:25:57,360 --> 00:26:00,480
in anti-detection i want to besides

557
00:26:00,480 --> 00:26:03,440
several compilers i want to emphasize

558
00:26:03,440 --> 00:26:06,320
the following techniques patching you

559
00:26:06,320 --> 00:26:09,679
see one way of page ledger process

560
00:26:09,679 --> 00:26:12,880
i would also show you how they

561
00:26:12,880 --> 00:26:14,080
page

562
00:26:14,080 --> 00:26:17,600
another windows api function relating to

563
00:26:17,600 --> 00:26:21,919
the amci anti-malware modern interface

564
00:26:21,919 --> 00:26:25,600
in operating system and related also to

565
00:26:25,600 --> 00:26:28,960
the logging to the event normal event

566
00:26:28,960 --> 00:26:30,880
logging you would see

567
00:26:30,880 --> 00:26:33,440
also site loading i also described a

568
00:26:33,440 --> 00:26:35,760
little bit right take the rigid file

569
00:26:35,760 --> 00:26:38,559
copy it put the malicious dll in the

570
00:26:38,559 --> 00:26:41,440
same directory and they are done they

571
00:26:41,440 --> 00:26:44,320
had some kind of persistent and way of

572
00:26:44,320 --> 00:26:46,799
running malicious code in the alleged

573
00:26:46,799 --> 00:26:50,720
process environment okay and the last

574
00:26:50,720 --> 00:26:53,600
but not the least digital certificate

575
00:26:53,600 --> 00:26:55,919
digital certificate

576
00:26:55,919 --> 00:26:59,600
uh of some named fast invest

577
00:26:59,600 --> 00:27:03,760
while we are trying to search some legit

578
00:27:03,760 --> 00:27:06,559
executables signed with the same digital

579
00:27:06,559 --> 00:27:10,159
certificate actually we failed so my

580
00:27:10,159 --> 00:27:13,840
expectation is it's a certificate

581
00:27:13,840 --> 00:27:18,240
created only for the malicious models i

582
00:27:18,240 --> 00:27:21,440
wasn't able to find any legit software

583
00:27:21,440 --> 00:27:24,159
with the same digital certificate maybe

584
00:27:24,159 --> 00:27:27,919
i just don't find it maybe but to my

585
00:27:27,919 --> 00:27:31,120
knowledge uh it's not existing any legit

586
00:27:31,120 --> 00:27:34,559
software anyway to get the malicious

587
00:27:34,559 --> 00:27:36,480
file looks more legit some digital

588
00:27:36,480 --> 00:27:38,480
certificate exists

589
00:27:38,480 --> 00:27:41,760
okay let's go to the next way of

590
00:27:41,760 --> 00:27:44,640
patching and as you could imagine

591
00:27:44,640 --> 00:27:47,840
malware want to be silent they want only

592
00:27:47,840 --> 00:27:50,640
their own their own event locks with the

593
00:27:50,640 --> 00:27:53,120
shell code but they completely don't

594
00:27:53,120 --> 00:27:55,120
want the normal event lock of the

595
00:27:55,120 --> 00:27:56,960
malware execution

596
00:27:56,960 --> 00:27:59,200
for the incident response for the threat

597
00:27:59,200 --> 00:28:02,720
hunters no no they just page with the

598
00:28:02,720 --> 00:28:05,679
auxiliary models the functions like a

599
00:28:05,679 --> 00:28:07,919
notification register

600
00:28:07,919 --> 00:28:10,960
etv stands for the windows event

601
00:28:10,960 --> 00:28:14,159
logging mechanism so etv event register

602
00:28:14,159 --> 00:28:18,080
etc all the normal api function related

603
00:28:18,080 --> 00:28:19,760
to the event logs

604
00:28:19,760 --> 00:28:21,440
patched with a

605
00:28:21,440 --> 00:28:23,679
different part of the code which

606
00:28:23,679 --> 00:28:27,440
wouldn't let the messages appeared to

607
00:28:27,440 --> 00:28:28,159
the

608
00:28:28,159 --> 00:28:31,360
event logs nice yes i think so i think

609
00:28:31,360 --> 00:28:34,240
so the same with the mci related

610
00:28:34,240 --> 00:28:37,919
functions to be a little bit more silent

611
00:28:37,919 --> 00:28:41,520
but i could say the part with the amci

612
00:28:41,520 --> 00:28:43,360
i think it's a little bit commodity

613
00:28:43,360 --> 00:28:44,720
because in

614
00:28:44,720 --> 00:28:46,799
some frameworks it's always like a

615
00:28:46,799 --> 00:28:49,600
metasploit it's already to my knowledge

616
00:28:49,600 --> 00:28:54,480
the existing ability to avoid mci right

617
00:28:54,480 --> 00:28:57,360
so i wouldn't consider it as a

618
00:28:57,360 --> 00:29:00,240
or something new so new is a putting

619
00:29:00,240 --> 00:29:02,480
shell code into event logs but patching

620
00:29:02,480 --> 00:29:03,919
mci it's

621
00:29:03,919 --> 00:29:06,960
existed the functions are patching the

622
00:29:06,960 --> 00:29:10,240
notification it's also interesting part

623
00:29:10,240 --> 00:29:14,240
and on a screenshot you see the goal

624
00:29:14,240 --> 00:29:17,120
auxiliary model code we would came to it

625
00:29:17,120 --> 00:29:19,279
in more details

626
00:29:19,279 --> 00:29:20,799
and

627
00:29:20,799 --> 00:29:24,640
you would see how it helps them to hide

628
00:29:24,640 --> 00:29:28,559
a little bit okay so this is the goal

629
00:29:28,559 --> 00:29:30,559
wrapper for the next stage the next

630
00:29:30,559 --> 00:29:32,640
stage is common

631
00:29:32,640 --> 00:29:34,240
what we see here

632
00:29:34,240 --> 00:29:36,080
first of all

633
00:29:36,080 --> 00:29:39,360
came to our site it's some

634
00:29:39,360 --> 00:29:44,240
64. actually it's a four-time base64

635
00:29:44,240 --> 00:29:47,600
under this encrypted binary data some

636
00:29:47,600 --> 00:29:50,240
part of the next stage

637
00:29:50,240 --> 00:29:53,120
a hundred of such parts

638
00:29:53,120 --> 00:29:55,120
would be debased

639
00:29:55,120 --> 00:29:57,279
four times each

640
00:29:57,279 --> 00:30:01,120
and combined with each other in some not

641
00:30:01,120 --> 00:30:03,200
linear order

642
00:30:03,200 --> 00:30:06,159
and after it decrypted with the ies

643
00:30:06,159 --> 00:30:08,640
algorithm with the block cipher

644
00:30:08,640 --> 00:30:12,399
okay we wrote a script and we get the

645
00:30:12,399 --> 00:30:13,840
next stage

646
00:30:13,840 --> 00:30:16,880
it's interesting but more interesting

647
00:30:16,880 --> 00:30:19,760
over there it's take a look

648
00:30:19,760 --> 00:30:22,720
is into domain i named this function so

649
00:30:22,720 --> 00:30:26,720
auxiliary model checks if this model is

650
00:30:26,720 --> 00:30:27,679
uh

651
00:30:27,679 --> 00:30:30,080
into the domain if it's not into the

652
00:30:30,080 --> 00:30:32,720
domain if it's some home user nah i

653
00:30:32,720 --> 00:30:35,440
wouldn't continue i only need the user

654
00:30:35,440 --> 00:30:39,919
inside some domain okay and resolve page

655
00:30:39,919 --> 00:30:42,320
events i promise you on the previous

656
00:30:42,320 --> 00:30:45,039
slide to show some patching with the

657
00:30:45,039 --> 00:30:48,240
goal here i describe the concatenation

658
00:30:48,240 --> 00:30:51,440
and decryption let us take a look at a

659
00:30:51,440 --> 00:30:52,480
patching

660
00:30:52,480 --> 00:30:53,840
looks like this

661
00:30:53,840 --> 00:30:57,360
so we use some lazy type of the function

662
00:30:57,360 --> 00:31:00,399
pointers in goal and you see some

663
00:31:00,399 --> 00:31:03,360
changing real function address

664
00:31:03,360 --> 00:31:05,120
to the

665
00:31:05,120 --> 00:31:08,640
function provided by the many factors

666
00:31:08,640 --> 00:31:09,840
after it

667
00:31:09,840 --> 00:31:13,200
no functions from the etv mechanism

668
00:31:13,200 --> 00:31:16,159
event logging windows mechanism would be

669
00:31:16,159 --> 00:31:19,200
real coded for this process for this

670
00:31:19,200 --> 00:31:22,080
workforce right for another process

671
00:31:22,080 --> 00:31:24,080
logging would be okay but in this

672
00:31:24,080 --> 00:31:26,399
process it's patched so it's not a

673
00:31:26,399 --> 00:31:29,120
system-wide patching it's a process-wide

674
00:31:29,120 --> 00:31:31,039
patching to my understanding

675
00:31:31,039 --> 00:31:35,200
nice okay so i like the choosing of the

676
00:31:35,200 --> 00:31:39,840
compiler it was a go 1.18 so the new one

677
00:31:39,840 --> 00:31:41,600
with the register based coding

678
00:31:41,600 --> 00:31:44,000
convention and we were able to

679
00:31:44,000 --> 00:31:46,720
distinguish all this runtime function

680
00:31:46,720 --> 00:31:48,799
and understand and decrypt the next

681
00:31:48,799 --> 00:31:50,640
model it was interesting interesting

682
00:31:50,640 --> 00:31:54,240
part of the auxiliary models now

683
00:31:54,240 --> 00:31:57,440
time for the last stages right we

684
00:31:57,440 --> 00:32:00,880
already emphasize the most interesting

685
00:32:00,880 --> 00:32:04,320
event locks mechanism we spend some time

686
00:32:04,320 --> 00:32:05,279
on

687
00:32:05,279 --> 00:32:06,240
our

688
00:32:06,240 --> 00:32:09,919
third party code we just describe

689
00:32:09,919 --> 00:32:13,679
one auxiliary model with a not so common

690
00:32:13,679 --> 00:32:16,559
compiler with by the way new model would

691
00:32:16,559 --> 00:32:19,600
be a little like this but in a different

692
00:32:19,600 --> 00:32:23,200
compiler like go model and now time for

693
00:32:23,200 --> 00:32:25,760
the last stage

694
00:32:25,760 --> 00:32:28,240
interestingly the land version which i

695
00:32:28,240 --> 00:32:31,440
named based on named pipe it's a passive

696
00:32:31,440 --> 00:32:33,760
version it means it's just waiting for

697
00:32:33,760 --> 00:32:36,320
the connection it wouldn't just throw

698
00:32:36,320 --> 00:32:39,279
some packets just waiting nice okay

699
00:32:39,279 --> 00:32:42,159
nicely written and they're really fond

700
00:32:42,159 --> 00:32:45,200
of injection as you could imagine of all

701
00:32:45,200 --> 00:32:47,760
the previous talk they are fond of

702
00:32:47,760 --> 00:32:50,320
logging injection into the different

703
00:32:50,320 --> 00:32:53,519
processors are also their love they

704
00:32:53,519 --> 00:32:56,080
inject everywhere and what i want to

705
00:32:56,080 --> 00:33:00,720
emphasize it was a good research before

706
00:33:00,720 --> 00:33:01,519
the

707
00:33:01,519 --> 00:33:03,679
infection because

708
00:33:03,679 --> 00:33:06,399
one at one dlp system was in the

709
00:33:06,399 --> 00:33:08,240
infrastructure

710
00:33:08,240 --> 00:33:11,919
they with some previous models

711
00:33:11,919 --> 00:33:13,760
see the process list

712
00:33:13,760 --> 00:33:14,880
dlp

713
00:33:14,880 --> 00:33:16,799
with a name like this

714
00:33:16,799 --> 00:33:19,679
they register the web domain

715
00:33:19,679 --> 00:33:23,440
with a similar name like this dlp system

716
00:33:23,440 --> 00:33:27,039
and use with web domain ssc2

717
00:33:27,039 --> 00:33:29,120
i could say it's a good preparation

718
00:33:29,120 --> 00:33:32,000
right for the attack so even with the

719
00:33:32,000 --> 00:33:35,519
trojan used http encryption connection

720
00:33:35,519 --> 00:33:37,760
to the real situation outside the

721
00:33:37,760 --> 00:33:40,640
organization the traffic would be like

722
00:33:40,640 --> 00:33:43,679
it would come from the erp process right

723
00:33:43,679 --> 00:33:46,000
module is injected over there and the

724
00:33:46,000 --> 00:33:49,360
web domain name would be like the name

725
00:33:49,360 --> 00:33:52,080
of the dlp interesting i love it among

726
00:33:52,080 --> 00:33:54,399
the interesting comments uh is the

727
00:33:54,399 --> 00:33:56,480
interesting one of the comment is user

728
00:33:56,480 --> 00:33:58,880
excel please active please give me the

729
00:33:58,880 --> 00:34:00,559
amount of time

730
00:34:00,559 --> 00:34:04,080
after the last user input so operator

731
00:34:04,080 --> 00:34:05,360
could check

732
00:34:05,360 --> 00:34:08,000
15 minutes of inactivity maybe maybe

733
00:34:08,000 --> 00:34:10,960
user goes away and now it's

734
00:34:10,960 --> 00:34:13,520
more secure to do something with the

735
00:34:13,520 --> 00:34:16,399
host awesome good comment some

736
00:34:16,399 --> 00:34:18,879
randomization over sleep time

737
00:34:18,879 --> 00:34:21,839
it could i could say it's nice to add

738
00:34:21,839 --> 00:34:23,199
some

739
00:34:23,199 --> 00:34:26,159
not linear way to connect to make an

740
00:34:26,159 --> 00:34:29,679
activity to make the uh maybe incident

741
00:34:29,679 --> 00:34:32,560
response a little bit harder but in this

742
00:34:32,560 --> 00:34:35,839
case flip type randomization was a

743
00:34:35,839 --> 00:34:39,040
they just multiply the random amount of

744
00:34:39,040 --> 00:34:39,918
time

745
00:34:39,918 --> 00:34:40,879
to the

746
00:34:40,879 --> 00:34:46,320
from the one of 0.9 to 1.01

747
00:34:46,320 --> 00:34:49,199
so randomization was a quite a

748
00:34:49,199 --> 00:34:50,719
light one

749
00:34:50,719 --> 00:34:52,879
the difference between the connection

750
00:34:52,879 --> 00:34:55,440
time was not crucial i suppose for the

751
00:34:55,440 --> 00:34:56,719
ir

752
00:34:56,719 --> 00:34:59,359
okay you see some uh

753
00:34:59,359 --> 00:35:02,400
features of the different last stages

754
00:35:02,400 --> 00:35:05,359
let us take a look at them a little bit

755
00:35:05,359 --> 00:35:07,599
more it's a common system

756
00:35:07,599 --> 00:35:11,839
right and what is inside in case of http

757
00:35:11,839 --> 00:35:14,040
uh also interesting part is a

758
00:35:14,040 --> 00:35:17,359
randomization of the c2 if in an

759
00:35:17,359 --> 00:35:20,320
encrypted configuration data

760
00:35:20,320 --> 00:35:23,119
several control servers exist

761
00:35:23,119 --> 00:35:26,480
it's divided by the sign language

762
00:35:26,480 --> 00:35:29,599
and the algorithm would take random

763
00:35:29,599 --> 00:35:31,920
control server from the list

764
00:35:31,920 --> 00:35:34,960
okay one more randomization could be

765
00:35:34,960 --> 00:35:38,079
useful for the malicious developer and

766
00:35:38,079 --> 00:35:39,839
amongst the

767
00:35:39,839 --> 00:35:43,280
fingerprinting for the target they take

768
00:35:43,280 --> 00:35:45,359
machine guide from the window system

769
00:35:45,359 --> 00:35:48,400
registry and also a finger printing

770
00:35:48,400 --> 00:35:49,760
would include

771
00:35:49,760 --> 00:35:51,200
is approach

772
00:35:51,200 --> 00:35:53,839
has see a debug privilege for the

773
00:35:53,839 --> 00:35:57,040
privilege escalation or interesting part

774
00:35:57,040 --> 00:35:59,920
of the finger printing and one more

775
00:35:59,920 --> 00:36:01,200
thing why

776
00:36:01,200 --> 00:36:03,599
we consider code is related to the

777
00:36:03,599 --> 00:36:07,599
throwback encryption encryption idea

778
00:36:07,599 --> 00:36:09,920
based encryption is quite the same like

779
00:36:09,920 --> 00:36:13,599
an old version or free version of the

780
00:36:13,599 --> 00:36:15,599
throwback existing on

781
00:36:15,599 --> 00:36:19,359
github in the case of http trojan mostly

782
00:36:19,359 --> 00:36:22,079
the common system is quite short

783
00:36:22,079 --> 00:36:26,160
you see it on your screens i love is 99

784
00:36:26,160 --> 00:36:28,480
terminate everything so they just keep

785
00:36:28,480 --> 00:36:29,440
it

786
00:36:29,440 --> 00:36:31,920
at the bottom of the list but

787
00:36:31,920 --> 00:36:33,040
but

788
00:36:33,040 --> 00:36:35,119
it looks like

789
00:36:35,119 --> 00:36:38,160
you know some kind of constructor some

790
00:36:38,160 --> 00:36:41,440
version of http trojan

791
00:36:41,440 --> 00:36:44,000
would contain more profound common

792
00:36:44,000 --> 00:36:47,599
system like in the case of our

793
00:36:47,599 --> 00:36:51,599
version with named pipes so they could

794
00:36:51,599 --> 00:36:52,839
choose

795
00:36:52,839 --> 00:36:54,480
the

796
00:36:54,480 --> 00:36:58,079
media for the commons named pipes or

797
00:36:58,079 --> 00:37:00,640
encrypted http connection

798
00:37:00,640 --> 00:37:03,520
and combine the common system

799
00:37:03,520 --> 00:37:05,520
you see it's like i could imagine some

800
00:37:05,520 --> 00:37:07,839
repository from which they could

801
00:37:07,839 --> 00:37:10,800
compiled a different version of trojans

802
00:37:10,800 --> 00:37:12,880
like a constructor

803
00:37:12,880 --> 00:37:17,280
okay in case of a pipe the named pipe's

804
00:37:17,280 --> 00:37:18,320
name

805
00:37:18,320 --> 00:37:20,240
named pipe they choose the name the

806
00:37:20,240 --> 00:37:23,599
monolith but i suppose typically

807
00:37:23,599 --> 00:37:26,079
such kind of models created with a

808
00:37:26,079 --> 00:37:29,200
graphic user user interface

809
00:37:29,200 --> 00:37:32,400
constructors and i really suppose the

810
00:37:32,400 --> 00:37:35,040
operator could choose whatever name for

811
00:37:35,040 --> 00:37:37,520
these pipes i wouldn't expect it's a

812
00:37:37,520 --> 00:37:39,920
hard coded for all the

813
00:37:39,920 --> 00:37:42,400
cases but rc4 key

814
00:37:42,400 --> 00:37:44,800
for the binary files for the binary

815
00:37:44,800 --> 00:37:45,760
files

816
00:37:45,760 --> 00:37:48,240
the target would observe in a blue team

817
00:37:48,240 --> 00:37:50,400
would observe in infrastructure name of

818
00:37:50,400 --> 00:37:54,000
the pipe and rc4k would be hard coded

819
00:37:54,000 --> 00:37:57,520
but i would expect on

820
00:37:57,520 --> 00:38:00,000
the side of developer it could be easily

821
00:38:00,000 --> 00:38:01,599
changed with a

822
00:38:01,599 --> 00:38:04,000
graphic user interface constructor to

823
00:38:04,000 --> 00:38:05,839
another name and

824
00:38:05,839 --> 00:38:06,640
key

825
00:38:06,640 --> 00:38:08,079
and a

826
00:38:08,079 --> 00:38:10,720
comment system is a really profound

827
00:38:10,720 --> 00:38:13,280
dozens of them i couldn't take them all

828
00:38:13,280 --> 00:38:16,640
on a screenshot but you see on the

829
00:38:16,640 --> 00:38:19,359
previous slide it was i don't know

830
00:38:19,359 --> 00:38:22,320
dozens of the comments nothing more here

831
00:38:22,320 --> 00:38:24,320
it's a much more

832
00:38:24,320 --> 00:38:27,200
of them but as i mentioned the comments

833
00:38:27,200 --> 00:38:29,760
could migrate from the different

834
00:38:29,760 --> 00:38:34,480
versions it's a regarding the last stage

835
00:38:34,480 --> 00:38:38,160
so i think it's enough for my monologue

836
00:38:38,160 --> 00:38:41,440
beautifully this year i'm not in a

837
00:38:41,440 --> 00:38:45,200
taipei i really wish to be

838
00:38:45,200 --> 00:38:46,400
but

839
00:38:46,400 --> 00:38:49,440
i'm for sure available for the q a you

840
00:38:49,440 --> 00:38:52,560
could contact me now or you could

841
00:38:52,560 --> 00:38:55,599
contact me or pinging me online after

842
00:38:55,599 --> 00:38:58,960
the event and i really hope i

843
00:38:58,960 --> 00:39:02,560
would came another year if the committee

844
00:39:02,560 --> 00:39:04,000
would approve

845
00:39:04,000 --> 00:39:05,280
some topic

846
00:39:05,280 --> 00:39:06,640
i for sure

847
00:39:06,640 --> 00:39:08,079
would propose

848
00:39:08,079 --> 00:39:11,040
and what i want to give to us all the

849
00:39:11,040 --> 00:39:14,560
name is our hitcom piece 2022

850
00:39:14,560 --> 00:39:17,440
let me just wish to us all

851
00:39:17,440 --> 00:39:23,280
piece 2022 piece 2023 2024 and so on let

852
00:39:23,280 --> 00:39:26,400
it be all around the piece not rounds

853
00:39:26,400 --> 00:39:29,440
like in a sub-headline not around the

854
00:39:29,440 --> 00:39:32,720
survival but let me piece

855
00:39:32,720 --> 00:39:35,839
in different parts of our not so big

856
00:39:35,839 --> 00:39:39,599
world so now i hope this part from this

857
00:39:39,599 --> 00:39:43,040
targeted malware i emphasize in this

858
00:39:43,040 --> 00:39:45,839
really short amount of time was quite

859
00:39:45,839 --> 00:39:48,720
interesting and now i'm really want to

860
00:39:48,720 --> 00:39:52,400
see some questions about it so thanks

861
00:39:52,400 --> 00:39:55,930
for your time and see

862
00:39:55,930 --> 00:39:58,980
[Music]

863
00:40:07,440 --> 00:40:11,240
can you hear us deliciousness

864
00:40:36,960 --> 00:40:39,280
yeah i have one question uh so you

865
00:40:39,280 --> 00:40:40,960
mentioned that

866
00:40:40,960 --> 00:40:43,119
this there is a malware that was using

867
00:40:43,119 --> 00:40:45,119
these techniques in the wild right you

868
00:40:45,119 --> 00:40:47,359
mentioned cobalt is this the only family

869
00:40:47,359 --> 00:40:48,960
of the malware that

870
00:40:48,960 --> 00:40:52,560
uh is using this uh fileless because uh

871
00:40:52,560 --> 00:40:55,680
file less malware per se it's not really

872
00:40:55,680 --> 00:40:57,359
that new but this particular technique

873
00:40:57,359 --> 00:41:00,560
seems to be new like lurk in 2015 was

874
00:41:00,560 --> 00:41:03,200
using wireless techniques as well uh

875
00:41:03,200 --> 00:41:06,400
have you seen other uh

876
00:41:06,400 --> 00:41:08,720
malware strains utilizing the same

877
00:41:08,720 --> 00:41:10,640
techniques or you were mostly talking

878
00:41:10,640 --> 00:41:13,680
about the the cobalt

879
00:41:13,760 --> 00:41:16,240
uh cool question actually

880
00:41:16,240 --> 00:41:17,920
among the

881
00:41:17,920 --> 00:41:20,880
already known last stages

882
00:41:20,880 --> 00:41:23,920
besides the cobalt strike there is also

883
00:41:23,920 --> 00:41:25,920
a silent break right

884
00:41:25,920 --> 00:41:29,280
so silent break has a github repository

885
00:41:29,280 --> 00:41:33,119
a throwback it's a just available old

886
00:41:33,119 --> 00:41:35,520
available part of the code from them but

887
00:41:35,520 --> 00:41:36,319
but

888
00:41:36,319 --> 00:41:40,640
take a look the cobalt is like a

889
00:41:40,640 --> 00:41:43,200
next stage all the stuff with the

890
00:41:43,200 --> 00:41:45,599
windows event logs with the decrypting

891
00:41:45,599 --> 00:41:48,400
binary data from windows event log it's

892
00:41:48,400 --> 00:41:51,119
a little bit separated i couldn't be

893
00:41:51,119 --> 00:41:53,119
sure it's a part

894
00:41:53,119 --> 00:41:56,400
really a part of kobo strike right

895
00:41:56,400 --> 00:42:00,079
so it's a preparation but it was

896
00:42:00,079 --> 00:42:02,480
so interesting to see such kind of usage

897
00:42:02,480 --> 00:42:06,160
on windows event logs so i decide to uh

898
00:42:06,160 --> 00:42:07,680
to describe it

899
00:42:07,680 --> 00:42:12,160
and uh so far i couldn't be sure but my

900
00:42:12,160 --> 00:42:18,319
theory so far it may be the part of the

901
00:42:18,640 --> 00:42:20,240
commercial

902
00:42:20,240 --> 00:42:22,000
products from the

903
00:42:22,000 --> 00:42:25,200
excellent break but anyway i couldn't be

904
00:42:25,200 --> 00:42:28,000
sure because i don't have the

905
00:42:28,000 --> 00:42:31,200
reliable information so maybe

906
00:42:31,200 --> 00:42:34,480
the providers of commercial tools invent

907
00:42:34,480 --> 00:42:37,599
such methods not on operators of a

908
00:42:37,599 --> 00:42:40,640
targeted attack it's possible

909
00:42:40,640 --> 00:42:43,680
so i prefer so far to call all this

910
00:42:43,680 --> 00:42:46,160
amount of activity i described as a

911
00:42:46,160 --> 00:42:49,040
monolith just after the name of the

912
00:42:49,040 --> 00:42:52,079
named piper

913
00:42:52,079 --> 00:42:53,599
so you think it's a part of the

914
00:42:53,599 --> 00:42:56,000
commercial product that basically wraps

915
00:42:56,000 --> 00:42:58,720
the cobalt strike and maybe use it to go

916
00:42:58,720 --> 00:43:00,319
cobalt strike beckons

917
00:43:00,319 --> 00:43:02,720
not really part of the like

918
00:43:02,720 --> 00:43:04,400
in a while attacker toolkit but more

919
00:43:04,400 --> 00:43:07,119
like a commercial tool is it

920
00:43:07,119 --> 00:43:09,280
it's for sure in the wild so the

921
00:43:09,280 --> 00:43:12,480
activity was registered in the wild

922
00:43:12,480 --> 00:43:14,160
for sure that's

923
00:43:14,160 --> 00:43:16,800
how we know it

924
00:43:16,800 --> 00:43:19,760
but once again as a beacon

925
00:43:19,760 --> 00:43:22,160
it's a next statement it's inside right

926
00:43:22,160 --> 00:43:24,880
after all the shell codes decrypting

927
00:43:24,880 --> 00:43:27,359
there would be the cobalt strike become

928
00:43:27,359 --> 00:43:29,680
regarding the question of the is it

929
00:43:29,680 --> 00:43:32,640
commercial or not it's a just please

930
00:43:32,640 --> 00:43:33,680
please

931
00:43:33,680 --> 00:43:36,480
hear me once again it's just

932
00:43:36,480 --> 00:43:39,599
my thoughts because i couldn't tell you

933
00:43:39,599 --> 00:43:42,400
i get the code of this commercial tool i

934
00:43:42,400 --> 00:43:45,359
don't get it i don't put it right i just

935
00:43:45,359 --> 00:43:48,480
think such a kind of coding could and

936
00:43:48,480 --> 00:43:52,319
when i see such a last stages near it it

937
00:43:52,319 --> 00:43:55,359
could be so it's possible but just

938
00:43:55,359 --> 00:43:58,000
please consider it as some speculation

939
00:43:58,000 --> 00:44:01,040
from the researcher uh nothing more

940
00:44:01,040 --> 00:44:03,440
but i love the technique anyway whatever

941
00:44:03,440 --> 00:44:07,520
alter is behind i love the technique

942
00:44:07,839 --> 00:44:08,880
interesting

943
00:44:08,880 --> 00:44:10,400
any other

944
00:44:10,400 --> 00:44:12,960
questions

945
00:44:16,240 --> 00:44:19,040
oh yeah we have one question on uh

946
00:44:19,040 --> 00:44:21,440
online portal so i will just read it

947
00:44:21,440 --> 00:44:22,480
please

948
00:44:22,480 --> 00:44:24,800
is it possible that a fireless attack

949
00:44:24,800 --> 00:44:26,319
happened without

950
00:44:26,319 --> 00:44:30,640
logging and without web connection

951
00:44:30,720 --> 00:44:32,960
web connections they need actually web

952
00:44:32,960 --> 00:44:35,839
connection because downloaders are on

953
00:44:35,839 --> 00:44:36,800
board

954
00:44:36,800 --> 00:44:39,440
if we are speaking precisely about this

955
00:44:39,440 --> 00:44:42,880
attack without online a troll this check

956
00:44:42,880 --> 00:44:45,760
wouldn't work

957
00:44:46,079 --> 00:44:50,319
but for sure if in the prior operators

958
00:44:50,319 --> 00:44:52,880
deploy all needed models

959
00:44:52,880 --> 00:44:54,560
in some

960
00:44:54,560 --> 00:44:58,640
files places like vmi subscriptions like

961
00:44:58,640 --> 00:45:02,880
ntfs alternate data streams or like in

962
00:45:02,880 --> 00:45:05,520
this case in the binary part of windows

963
00:45:05,520 --> 00:45:08,720
event logs if all is available

964
00:45:08,720 --> 00:45:12,240
on site on premise malware it would

965
00:45:12,240 --> 00:45:15,440
become a possible in this case they need

966
00:45:15,440 --> 00:45:18,240
connection and also they would need

967
00:45:18,240 --> 00:45:21,440
connection to the uh control server in

968
00:45:21,440 --> 00:45:25,359
case of the http trojan in case of named

969
00:45:25,359 --> 00:45:28,079
pipes trojan used for the lateral

970
00:45:28,079 --> 00:45:30,839
movement it was a walk inside the

971
00:45:30,839 --> 00:45:33,359
organization infected organization

972
00:45:33,359 --> 00:45:37,119
perimeter so only local area network is

973
00:45:37,119 --> 00:45:39,119
needed

974
00:45:39,119 --> 00:45:41,280
this is it this is it please let me know

975
00:45:41,280 --> 00:45:43,520
if i'm answered i could elaborate for

976
00:45:43,520 --> 00:45:46,520
them

977
00:45:52,960 --> 00:45:55,359
and one of the artifacts in the code was

978
00:45:55,359 --> 00:45:58,839
actually that they were checking if the

979
00:45:58,839 --> 00:46:01,520
executed if the user if the model was

980
00:46:01,520 --> 00:46:03,680
executed under a user was in a domain

981
00:46:03,680 --> 00:46:05,920
right so they were not interested in the

982
00:46:05,920 --> 00:46:08,240
machines that are not part of the domain

983
00:46:08,240 --> 00:46:09,280
so

984
00:46:09,280 --> 00:46:10,640
do you think

985
00:46:10,640 --> 00:46:12,240
this is

986
00:46:12,240 --> 00:46:13,839
basically reveals the attacker's

987
00:46:13,839 --> 00:46:15,760
intentions that they target particular

988
00:46:15,760 --> 00:46:18,720
organization or they just wanted to have

989
00:46:18,720 --> 00:46:22,078
like higher value machines

990
00:46:22,240 --> 00:46:25,119
i think it says intentions not

991
00:46:25,119 --> 00:46:26,240
interesting

992
00:46:26,240 --> 00:46:29,520
in some home user and maybe if employee

993
00:46:29,520 --> 00:46:31,839
just take it's a

994
00:46:31,839 --> 00:46:35,200
laptop the business laptop to home and

995
00:46:35,200 --> 00:46:38,000
no vpn connection to the organization no

996
00:46:38,000 --> 00:46:39,280
domain

997
00:46:39,280 --> 00:46:42,000
not interesting at all so i think it

998
00:46:42,000 --> 00:46:44,880
could be a sign of their intentions uh

999
00:46:44,880 --> 00:46:47,440
to attack some corporate environment

1000
00:46:47,440 --> 00:46:50,560
nothing more i didn't observe any

1001
00:46:50,560 --> 00:46:52,800
mention of precise environment by the

1002
00:46:52,800 --> 00:46:53,599
way

1003
00:46:53,599 --> 00:46:55,920
who could stop them by checking precise

1004
00:46:55,920 --> 00:46:57,280
domain right

1005
00:46:57,280 --> 00:46:59,200
if it was be targeted only for one

1006
00:46:59,200 --> 00:47:01,200
organization they could just name it let

1007
00:47:01,200 --> 00:47:03,680
us check it's into the domain and the

1008
00:47:03,680 --> 00:47:06,720
name of the domain is like this not the

1009
00:47:06,720 --> 00:47:09,760
case only taken inside the way

1010
00:47:09,760 --> 00:47:11,680
we are interested so in the corporate

1011
00:47:11,680 --> 00:47:14,160
environment home environment no active

1012
00:47:14,160 --> 00:47:17,119
directory no domain now go

1013
00:47:17,119 --> 00:47:20,480
also a good part of the checking i also

1014
00:47:20,480 --> 00:47:23,040
like this fun and intention so my answer

1015
00:47:23,040 --> 00:47:25,520
would be intentions are taking a look

1016
00:47:25,520 --> 00:47:29,280
only at the some organizations

1017
00:47:29,280 --> 00:47:30,480
okay so

1018
00:47:30,480 --> 00:47:32,720
more like possibly a ransomware trade

1019
00:47:32,720 --> 00:47:34,640
actor who might be targeting

1020
00:47:34,640 --> 00:47:36,800
organizations and regular

1021
00:47:36,800 --> 00:47:38,800
machines would be of the less interest

1022
00:47:38,800 --> 00:47:41,440
something like that right

1023
00:47:41,440 --> 00:47:44,000
you could compare but inside this

1024
00:47:44,000 --> 00:47:47,440
campaign uh no encryption functionality

1025
00:47:47,440 --> 00:47:50,160
at all no encryption only stealing of

1026
00:47:50,160 --> 00:47:53,359
the data so the last stages just trying

1027
00:47:53,359 --> 00:47:55,599
to get the information

1028
00:47:55,599 --> 00:47:58,319
but i didn't observe any functions to

1029
00:47:58,319 --> 00:48:01,280
encrypt or some commercialization of

1030
00:48:01,280 --> 00:48:05,359
their effort not the case this time

1031
00:48:05,359 --> 00:48:06,720
interesting

1032
00:48:06,720 --> 00:48:09,280
so the intent likely the information

1033
00:48:09,280 --> 00:48:11,280
collection and based on the domain

1034
00:48:11,280 --> 00:48:13,440
checking information collection from

1035
00:48:13,440 --> 00:48:14,720
organizations

1036
00:48:14,720 --> 00:48:15,520
and

1037
00:48:15,520 --> 00:48:18,520
knowledge

1038
00:48:20,079 --> 00:48:22,400
completely agree so they would choke me

1039
00:48:22,400 --> 00:48:24,960
as i described machine id during the

1040
00:48:24,960 --> 00:48:27,119
finger printing calls them as usual all

1041
00:48:27,119 --> 00:48:29,040
the network settings

1042
00:48:29,040 --> 00:48:32,079
and after it you're using the operators

1043
00:48:32,079 --> 00:48:35,520
comments or maybe it would go for the

1044
00:48:35,520 --> 00:48:38,480
more precious data in a

1045
00:48:38,480 --> 00:48:40,240
database management system some

1046
00:48:40,240 --> 00:48:42,720
documents maybe

1047
00:48:42,720 --> 00:48:43,440
yep

1048
00:48:43,440 --> 00:48:46,319
so we have one more question here

1049
00:48:46,319 --> 00:48:49,280
is good mobile devices be targeted by

1050
00:48:49,280 --> 00:48:52,960
this uh fireless attack as well like

1051
00:48:52,960 --> 00:48:56,319
by this precise this targeted attack to

1052
00:48:56,319 --> 00:49:00,319
my knowledge is only so far aiming

1053
00:49:00,319 --> 00:49:04,319
of the pc operating system i didn't

1054
00:49:04,319 --> 00:49:08,000
observe any android or ios version

1055
00:49:08,000 --> 00:49:10,800
but i like the question because lately

1056
00:49:10,800 --> 00:49:13,040
maybe you're familiar with the scramble

1057
00:49:13,040 --> 00:49:15,359
cross trojan family

1058
00:49:15,359 --> 00:49:16,640
and

1059
00:49:16,640 --> 00:49:19,680
we found lately the version for example

1060
00:49:19,680 --> 00:49:23,200
for linux so the trend to spread their

1061
00:49:23,200 --> 00:49:25,680
presence on the different platforms is

1062
00:49:25,680 --> 00:49:26,800
for sure

1063
00:49:26,800 --> 00:49:30,240
already here but in this case i didn't

1064
00:49:30,240 --> 00:49:34,240
see so far any android or ios versions

1065
00:49:34,240 --> 00:49:36,720
but interest to different platforms are

1066
00:49:36,720 --> 00:49:38,880
for sure growing up

1067
00:49:38,880 --> 00:49:40,400
so

1068
00:49:40,400 --> 00:49:42,640
the last finding i really love was the

1069
00:49:42,640 --> 00:49:47,200
linux version of the scramble cross

1070
00:49:47,200 --> 00:49:48,400
okay

1071
00:49:48,400 --> 00:49:50,720
thanks a lot for your answers it was a

1072
00:49:50,720 --> 00:49:52,960
great pleasure

1073
00:49:52,960 --> 00:49:54,480
okay it was really a good pleasure could

1074
00:49:54,480 --> 00:49:58,000
i could i ask one question of the hit

1075
00:49:58,000 --> 00:50:00,960
code maybe is there any chance you would

1076
00:50:00,960 --> 00:50:04,240
cancel with uh one v current shine in

1077
00:50:04,240 --> 00:50:08,079
taipei because i really i uh

1078
00:50:08,079 --> 00:50:11,040
i will to fly but all this current giant

1079
00:50:11,040 --> 00:50:14,160
sitting in the hotel and have a

1080
00:50:14,160 --> 00:50:15,359
work day

1081
00:50:15,359 --> 00:50:17,760
finger fingers yeah fingers crossed that

1082
00:50:17,760 --> 00:50:19,839
it's going to improve for

1083
00:50:19,839 --> 00:50:22,480
next next year so if it's now three days

1084
00:50:22,480 --> 00:50:24,720
only and maybe for next year it's gonna

1085
00:50:24,720 --> 00:50:26,960
be like even better so yeah fingers

1086
00:50:26,960 --> 00:50:28,720
crossed

1087
00:50:28,720 --> 00:50:31,599
um so let's just hope that yes it would

1088
00:50:31,599 --> 00:50:34,319
be so thanks thanks for the interest and

1089
00:50:34,319 --> 00:50:37,040
hope to see you again thank you yeah it

1090
00:50:37,040 --> 00:50:40,960
was a very exciting talk that's a

1091
00:50:54,480 --> 00:50:57,640
thank you

