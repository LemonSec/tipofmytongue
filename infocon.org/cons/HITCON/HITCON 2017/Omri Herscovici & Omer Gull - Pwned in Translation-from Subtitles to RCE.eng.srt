1
00:00:06,670 --> 00:00:16,210
hi<font color="#E5E5E5"> welcome</font><font color="#CCCCCC"> to our talk Pony translation</font>

2
00:00:11,600 --> 00:00:16,210
from subtitles<font color="#E5E5E5"> to remote code execution</font>

3
00:00:16,689 --> 00:00:23,680
<font color="#E5E5E5">aim</font><font color="#CCCCCC"> we're all Murr and hombre we're</font>

4
00:00:20,689 --> 00:00:27,860
security researchers at checkpoint<font color="#E5E5E5"> and</font>

5
00:00:23,680 --> 00:00:31,340
let's<font color="#E5E5E5"> begin</font><font color="#CCCCCC"> so what we're</font><font color="#E5E5E5"> going to</font>

6
00:00:27,860 --> 00:00:32,598
present<font color="#E5E5E5"> today is a new concept</font><font color="#CCCCCC"> it's a</font>

7
00:00:31,340 --> 00:00:35,630
new attack vector

8
00:00:32,598 --> 00:00:38,390
we call it<font color="#E5E5E5"> subtitles drive-by attack and</font>

9
00:00:35,630 --> 00:00:41,240
it's important to<font color="#E5E5E5"> remember that this</font><font color="#CCCCCC"> is</font>

10
00:00:38,390 --> 00:00:43,400
<font color="#CCCCCC">not about</font><font color="#E5E5E5"> the vulnerabilities even</font>

11
00:00:41,240 --> 00:00:46,610
though we have plenty of<font color="#E5E5E5"> those this</font><font color="#CCCCCC"> is</font>

12
00:00:43,400 --> 00:00:50,839
<font color="#E5E5E5">about the notion</font><font color="#CCCCCC"> that subtitles</font><font color="#E5E5E5"> are</font>

13
00:00:46,610 --> 00:00:52,730
considered dangerous so<font color="#E5E5E5"> let's back up a</font>

14
00:00:50,840 --> 00:00:57,230
little<font color="#E5E5E5"> bit this is</font><font color="#CCCCCC"> how we use to watch</font>

15
00:00:52,730 --> 00:00:59,720
movies at<font color="#E5E5E5"> local cinema but as</font><font color="#CCCCCC"> technology</font>

16
00:00:57,230 --> 00:01:02,390
evolved the<font color="#E5E5E5"> internet became faster and</font>

17
00:00:59,720 --> 00:01:05,720
we<font color="#CCCCCC"> got lazier the movies entered our</font>

18
00:01:02,390 --> 00:01:08,619
living room<font color="#E5E5E5"> it could be a laptop a smart</font>

19
00:01:05,720 --> 00:01:12,200
TV<font color="#E5E5E5"> a Raspberry Pi and the streaming</font>

20
00:01:08,619 --> 00:01:13,939
options are endless<font color="#CCCCCC"> now</font><font color="#E5E5E5"> design with ease</font>

21
00:01:12,200 --> 00:01:16,490
<font color="#CCCCCC">of use in mind they take care</font><font color="#E5E5E5"> of</font>

22
00:01:13,939 --> 00:01:19,758
<font color="#CCCCCC">everything for us</font><font color="#E5E5E5"> they pull all the</font>

23
00:01:16,490 --> 00:01:25,669
metadata<font color="#E5E5E5"> the trailers thumbnails plot</font>

24
00:01:19,759 --> 00:01:28,009
info and subtitles and these are the

25
00:01:25,670 --> 00:01:29,799
<font color="#CCCCCC">statistics of daily downloads from one</font>

26
00:01:28,009 --> 00:01:32,509
of the main repository<font color="#E5E5E5"> open subtitles</font>

27
00:01:29,799 --> 00:01:34,969
<font color="#E5E5E5">ranging from</font><font color="#CCCCCC"> 7 million up to 10 million</font>

28
00:01:32,509 --> 00:01:38,840
<font color="#E5E5E5">downloads a day it's definitely a big</font>

29
00:01:34,969 --> 00:01:42,559
thing<font color="#E5E5E5"> obviously subtitles are used for a</font>

30
00:01:38,840 --> 00:01:45,709
<font color="#E5E5E5">non-native English</font><font color="#CCCCCC"> speakers like both</font>

31
00:01:42,560 --> 00:01:48,499
<font color="#E5E5E5">most of us but not only and to convey</font>

32
00:01:45,709 --> 00:01:53,090
the necessity of subtitles we'll use the

33
00:01:48,499 --> 00:01:56,749
power<font color="#E5E5E5"> of</font><font color="#CCCCCC"> memes they're used when you're</font>

34
00:01:53,090 --> 00:02:00,020
watching foreign films TV shows<font color="#E5E5E5"> like</font>

35
00:01:56,749 --> 00:02:02,089
pretentious French films<font color="#E5E5E5"> they're used</font>

36
00:02:00,020 --> 00:02:06,408
for convenience<font color="#E5E5E5"> in case there are any</font>

37
00:02:02,090 --> 00:02:10,640
sort<font color="#E5E5E5"> of time limitations and they're</font>

38
00:02:06,409 --> 00:02:13,880
used in Guy<font color="#CCCCCC"> Ritchie's movies sometimes</font>

39
00:02:10,639 --> 00:02:15,140
they<font color="#E5E5E5"> also provide critical notes for the</font>

40
00:02:13,880 --> 00:02:17,600
<font color="#CCCCCC">hearing-impaired</font>

41
00:02:15,140 --> 00:02:18,769
<font color="#CCCCCC">as you</font><font color="#E5E5E5"> can see but they usually have a</font>

42
00:02:17,600 --> 00:02:21,140
lot more<font color="#E5E5E5"> than</font>

43
00:02:18,770 --> 00:02:27,080
<font color="#CCCCCC">Tech's display</font><font color="#E5E5E5"> let's explore this</font>

44
00:02:21,140 --> 00:02:29,720
<font color="#E5E5E5">subtitles landscape we all know</font><font color="#CCCCCC"> srt sub</font>

45
00:02:27,080 --> 00:02:32,750
<font color="#CCCCCC">read text it supports a</font><font color="#E5E5E5"> very basic set</font>

46
00:02:29,720 --> 00:02:36,890
of HTML<font color="#E5E5E5"> tags like bold italic and so</font>

47
00:02:32,750 --> 00:02:39,950
forth<font color="#E5E5E5"> there's also the sub format that</font>

48
00:02:36,890 --> 00:02:43,630
<font color="#E5E5E5">stands for subviewer it supports basic</font>

49
00:02:39,950 --> 00:02:43,630
formatting like color<font color="#CCCCCC"> and fonts</font>

50
00:02:44,920 --> 00:02:53,029
sometimes<font color="#E5E5E5"> sub actually stands for</font><font color="#CCCCCC"> MP sub</font>

51
00:02:48,890 --> 00:02:55,880
that supports none of the above<font color="#E5E5E5"> and at</font>

52
00:02:53,030 --> 00:02:59,180
different<font color="#E5E5E5"> occasions sub can also stand</font>

53
00:02:55,880 --> 00:03:01,790
<font color="#E5E5E5">for micro DVD subtitles these sub</font>

54
00:02:59,180 --> 00:03:04,160
supports<font color="#E5E5E5"> formatting color schemes phone</font>

55
00:03:01,790 --> 00:03:08,209
configurations subtitles location and

56
00:03:04,160 --> 00:03:12,079
different character sets<font color="#E5E5E5"> another common</font>

57
00:03:08,210 --> 00:03:13,460
format is the substation alpha<font color="#E5E5E5"> it's a</font>

58
00:03:12,080 --> 00:03:16,760
bit more<font color="#E5E5E5"> sophisticated</font>

59
00:03:13,460 --> 00:03:19,640
it supports predefined style<font color="#E5E5E5"> names fonts</font>

60
00:03:16,760 --> 00:03:22,640
complex color palettes<font color="#E5E5E5"> outlines shadows</font>

61
00:03:19,640 --> 00:03:26,000
alignments margin<font color="#E5E5E5"> alpha level and</font>

62
00:03:22,640 --> 00:03:30,019
encodings<font color="#E5E5E5"> but it gets even more</font>

63
00:03:26,000 --> 00:03:33,890
impressive as we move on to advanced

64
00:03:30,020 --> 00:03:36,680
substation alpha now<font color="#E5E5E5"> a SS contains all</font>

65
00:03:33,890 --> 00:03:44,000
the functionality of<font color="#E5E5E5"> SSA with some</font>

66
00:03:36,680 --> 00:03:49,600
interesting<font color="#E5E5E5"> additions the</font><font color="#CCCCCC"> eighth Vass</font>

67
00:03:44,000 --> 00:03:53,690
format supports scaling angle shifting

68
00:03:49,600 --> 00:03:58,579
binary image embedding<font color="#CCCCCC"> binary font</font>

69
00:03:53,690 --> 00:04:01,730
embedding drawing yeah this is us

70
00:03:58,580 --> 00:04:05,150
actually drawing<font color="#E5E5E5"> a small dinosaur in as</font>

71
00:04:01,730 --> 00:04:07,369
part of<font color="#E5E5E5"> the subtitles in a movie and the</font>

72
00:04:05,150 --> 00:04:11,270
specification<font color="#E5E5E5"> even mentions system</font>

73
00:04:07,370 --> 00:04:14,120
<font color="#CCCCCC">commands this allows executing a</font>

74
00:04:11,270 --> 00:04:16,280
specified program as<font color="#CCCCCC"> Pryor's background</font>

75
00:04:14,120 --> 00:04:19,970
tasks<font color="#E5E5E5"> and we truly hope no one ever</font>

76
00:04:16,279 --> 00:04:22,479
<font color="#E5E5E5">implemented this bizarre feature but</font>

77
00:04:19,970 --> 00:04:27,919
back<font color="#CCCCCC"> to our subtitles they're actually</font>

78
00:04:22,480 --> 00:04:29,930
shitload of subtitle formats all in all

79
00:04:27,919 --> 00:04:32,539
during<font color="#CCCCCC"> our research we in Carden</font>

80
00:04:29,930 --> 00:04:35,330
encountered more than 25

81
00:04:32,540 --> 00:04:39,230
title formats<font color="#E5E5E5"> some are binary</font><font color="#CCCCCC"> some are</font>

82
00:04:35,330 --> 00:04:41,150
textual none are<font color="#E5E5E5"> well documented</font><font color="#CCCCCC"> so we</font>

83
00:04:39,230 --> 00:04:43,610
asked ourselves<font color="#E5E5E5"> can the unregulated</font>

84
00:04:41,150 --> 00:04:48,080
nature of the subtitle<font color="#CCCCCC"> Menace</font><font color="#E5E5E5"> be</font>

85
00:04:43,610 --> 00:04:50,330
exploited<font color="#E5E5E5"> our</font><font color="#CCCCCC"> first target was</font><font color="#E5E5E5"> the most</font>

86
00:04:48,080 --> 00:04:52,700
notorious<font color="#E5E5E5"> notorious streaming platform</font>

87
00:04:50,330 --> 00:04:54,680
we<font color="#E5E5E5"> know popcorn time and the</font>

88
00:04:52,700 --> 00:04:57,530
<font color="#CCCCCC">multi-platform Netflix for pirates</font>

89
00:04:54,680 --> 00:04:59,920
<font color="#E5E5E5">integrated deadly combination of a</font>

90
00:04:57,530 --> 00:05:02,960
BitTorrent<font color="#E5E5E5"> client a video player and</font>

91
00:04:59,920 --> 00:05:08,240
scraping capabilities under a very

92
00:05:02,960 --> 00:05:10,760
friendly user interface<font color="#E5E5E5"> now this</font>

93
00:05:08,240 --> 00:05:12,980
beautiful<font color="#CCCCCC"> WebKit powered interface is</font>

94
00:05:10,760 --> 00:05:13,670
packed with movie information<font color="#E5E5E5"> and</font>

95
00:05:12,980 --> 00:05:17,030
metadata

96
00:05:13,670 --> 00:05:19,640
it presents<font color="#E5E5E5"> trailers plot summaries cast</font>

97
00:05:17,030 --> 00:05:22,820
information cover photos IMDB ratings

98
00:05:19,640 --> 00:05:25,820
and much more but<font color="#E5E5E5"> the way it does it so</font>

99
00:05:22,820 --> 00:05:29,530
elegantly<font color="#E5E5E5"> beautiful is by using a</font>

100
00:05:25,820 --> 00:05:34,520
platform<font color="#E5E5E5"> that supports web technologies</font>

101
00:05:29,530 --> 00:05:39,099
<font color="#E5E5E5">technologies as html5 css3 and</font>

102
00:05:34,520 --> 00:05:42,650
JavaScript<font color="#CCCCCC"> built on top of an old</font><font color="#E5E5E5"> engine</font>

103
00:05:39,100 --> 00:05:47,300
<font color="#E5E5E5">the two main frameworks that allow such</font>

104
00:05:42,650 --> 00:05:50,060
beauty are<font color="#CCCCCC"> nwj s and electron both are</font>

105
00:05:47,300 --> 00:05:55,280
<font color="#E5E5E5">multi platform utilizing chromium and</font>

106
00:05:50,060 --> 00:05:57,980
supports<font color="#CCCCCC"> external plugins ok so we know</font>

107
00:05:55,280 --> 00:06:00,590
they look good<font color="#E5E5E5"> but are they vulnerable</font>

108
00:05:57,980 --> 00:06:02,930
to anything well these underlying

109
00:06:00,590 --> 00:06:04,940
technologies are<font color="#CCCCCC"> very interesting from</font>

110
00:06:02,930 --> 00:06:08,240
an attackers perspective<font color="#E5E5E5"> especially</font>

111
00:06:04,940 --> 00:06:11,090
<font color="#E5E5E5">because what might be considered as a</font>

112
00:06:08,240 --> 00:06:14,510
weak vulnerabilities<font color="#E5E5E5"> at least in bug</font>

113
00:06:11,090 --> 00:06:18,070
bounty programs such as the XSS can

114
00:06:14,510 --> 00:06:21,440
actually result<font color="#E5E5E5"> in remote code execution</font>

115
00:06:18,070 --> 00:06:23,890
<font color="#E5E5E5">because</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> js' is essentially a</font>

116
00:06:21,440 --> 00:06:27,290
JavaScript engine<font color="#E5E5E5"> with server-side</font>

117
00:06:23,890 --> 00:06:28,159
capabilities and all you need<font color="#E5E5E5"> to do in</font>

118
00:06:27,290 --> 00:06:31,790
nodejs

119
00:06:28,160 --> 00:06:34,790
in order to pop calculator is use this

120
00:06:31,790 --> 00:06:38,300
code which imports<font color="#E5E5E5"> the child's process</font>

121
00:06:34,790 --> 00:06:40,850
<font color="#E5E5E5">library and uses its exact function with</font>

122
00:06:38,300 --> 00:06:44,090
calc<font color="#CCCCCC"> as the argument</font><font color="#E5E5E5"> we'll talk about</font>

123
00:06:40,850 --> 00:06:46,460
this in<font color="#E5E5E5"> a minute</font><font color="#CCCCCC"> but back to popcorn</font>

124
00:06:44,090 --> 00:06:48,349
<font color="#E5E5E5">time to make life even</font>

125
00:06:46,460 --> 00:06:50,690
easier subtitles are being fetched

126
00:06:48,350 --> 00:06:53,090
<font color="#E5E5E5">automatically for both the user</font>

127
00:06:50,690 --> 00:06:56,330
convenience<font color="#E5E5E5"> and the attackers the</font>

128
00:06:53,090 --> 00:06:58,929
question remains can<font color="#CCCCCC"> this behavior be</font>

129
00:06:56,330 --> 00:07:02,419
exploited well behind<font color="#E5E5E5"> the scenes</font>

130
00:06:58,930 --> 00:07:05,750
<font color="#CCCCCC">popcorntime uses open subtitles as their</font>

131
00:07:02,419 --> 00:07:08,630
<font color="#E5E5E5">sole subtitle provider with over 4</font>

132
00:07:05,750 --> 00:07:11,720
million subtitles<font color="#E5E5E5"> a subtitle entries and</font>

133
00:07:08,630 --> 00:07:15,110
a very convenient<font color="#CCCCCC"> API</font><font color="#E5E5E5"> it is an extremely</font>

134
00:07:11,720 --> 00:07:17,030
popular repository<font color="#E5E5E5"> this API does not</font>

135
00:07:15,110 --> 00:07:19,280
only<font color="#E5E5E5"> allow for</font><font color="#CCCCCC"> easy search and download</font>

136
00:07:17,030 --> 00:07:22,520
as you would<font color="#E5E5E5"> have</font><font color="#CCCCCC"> expected from a</font>

137
00:07:19,280 --> 00:07:24,979
subtype of related<font color="#E5E5E5"> API and it even helps</font>

138
00:07:22,520 --> 00:07:28,099
you find the right<font color="#E5E5E5"> subtitle for your</font>

139
00:07:24,979 --> 00:07:32,150
movie and release<font color="#E5E5E5"> we'll dive deeper</font><font color="#CCCCCC"> into</font>

140
00:07:28,099 --> 00:07:33,650
that process<font color="#E5E5E5"> a bit later</font><font color="#CCCCCC"> now gaining</font>

141
00:07:32,150 --> 00:07:36,109
some knowledge about popcorntime

142
00:07:33,650 --> 00:07:39,258
infrastructure let's<font color="#E5E5E5"> see how subtitles</font>

143
00:07:36,110 --> 00:07:39,800
make the way from file download to the

144
00:07:39,259 --> 00:07:42,889
screen

145
00:07:39,800 --> 00:07:46,280
well<font color="#E5E5E5"> our journey begins as</font><font color="#CCCCCC"> soon as</font><font color="#E5E5E5"> the</font>

146
00:07:42,889 --> 00:07:48,380
user<font color="#E5E5E5"> starts playing a movie pop curtain</font>

147
00:07:46,280 --> 00:07:51,198
downloads the subtitles<font color="#E5E5E5"> and convert</font>

148
00:07:48,380 --> 00:07:55,460
whatever<font color="#E5E5E5"> format it gets to an SLT</font>

149
00:07:51,199 --> 00:07:58,370
<font color="#E5E5E5">timecode</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> after conversion it is passed</font>

150
00:07:55,460 --> 00:08:00,680
to<font color="#E5E5E5"> the update display function this</font>

151
00:07:58,370 --> 00:08:03,610
<font color="#CCCCCC">function will create an HTML span</font>

152
00:08:00,680 --> 00:08:07,639
containing the sub titles<font color="#CCCCCC"> text</font>

153
00:08:03,610 --> 00:08:11,659
well since the SRT format supports HTML

154
00:08:07,639 --> 00:08:13,370
tags<font color="#E5E5E5"> and this is a</font><font color="#CCCCCC"> WebKit they didn't</font>

155
00:08:11,659 --> 00:08:16,400
<font color="#E5E5E5">need to make</font><font color="#CCCCCC"> any implementation</font><font color="#E5E5E5"> to</font>

156
00:08:13,370 --> 00:08:19,820
support HTML<font color="#E5E5E5"> it's obviously built with</font>

157
00:08:16,400 --> 00:08:23,560
HTML<font color="#E5E5E5"> to its core but perhaps we can</font>

158
00:08:19,820 --> 00:08:27,800
write other things<font color="#E5E5E5"> than HTML like</font>

159
00:08:23,560 --> 00:08:32,120
<font color="#E5E5E5">JavaScript and sanitize</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> built</font>

160
00:08:27,800 --> 00:08:34,700
on top<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> web kits application well</font>

161
00:08:32,120 --> 00:08:37,820
let's write<font color="#E5E5E5"> this simple one this is how</font>

162
00:08:34,700 --> 00:08:41,329
a standard<font color="#CCCCCC"> SRT file looks like</font><font color="#E5E5E5"> we</font>

163
00:08:37,820 --> 00:08:47,450
already<font color="#CCCCCC"> know it supports HTML tags but</font>

164
00:08:41,328 --> 00:08:51,709
what if we try<font color="#E5E5E5"> to load an</font><font color="#CCCCCC"> image that</font>

165
00:08:47,450 --> 00:08:56,089
doesn't<font color="#E5E5E5"> exist</font><font color="#CCCCCC"> and provide it</font><font color="#E5E5E5"> with the</font>

166
00:08:51,709 --> 00:08:57,739
<font color="#CCCCCC">own error attribute exercise</font><font color="#E5E5E5"> 101 we know</font>

167
00:08:56,089 --> 00:09:00,050
the<font color="#E5E5E5"> on error attribute can run</font>

168
00:08:57,740 --> 00:09:05,959
<font color="#CCCCCC">JavaScript</font>

169
00:09:00,050 --> 00:09:08,959
so brace yourself yeah<font color="#E5E5E5"> okay we got our</font>

170
00:09:05,959 --> 00:09:13,399
first vulnerability<font color="#E5E5E5"> we managed to make</font>

171
00:09:08,959 --> 00:09:15,199
<font color="#E5E5E5">subtitles pop a message box</font><font color="#CCCCCC"> but that's</font>

172
00:09:13,399 --> 00:09:21,589
not good enough<font color="#CCCCCC"> let's try something a</font>

173
00:09:15,199 --> 00:09:25,099
bit<font color="#E5E5E5"> more advanced what if instead of the</font>

174
00:09:21,589 --> 00:09:27,679
alert<font color="#E5E5E5"> we write code to clean things up</font>

175
00:09:25,100 --> 00:09:30,110
remove the<font color="#CCCCCC"> revealing icon of the broken</font>

176
00:09:27,679 --> 00:09:33,230
image and append our malicious payload

177
00:09:30,110 --> 00:09:35,749
to<font color="#CCCCCC"> the page which would dynamically</font>

178
00:09:33,230 --> 00:09:41,600
create a script loaded from a remote

179
00:09:35,749 --> 00:09:44,239
host<font color="#E5E5E5"> our</font><font color="#CCCCCC"> host</font><font color="#E5E5E5"> well needless to say just</font>

180
00:09:41,600 --> 00:09:47,119
as we showed earlier<font color="#E5E5E5"> even the</font><font color="#CCCCCC"> jas will</font>

181
00:09:44,239 --> 00:09:51,319
utilize the<font color="#CCCCCC"> node.js capabilities of the</font>

182
00:09:47,119 --> 00:09:53,559
framework<font color="#E5E5E5"> to run a process let's take a</font>

183
00:09:51,319 --> 00:09:53,559
look

184
00:10:00,040 --> 00:10:05,790
the user opens popcorntime chooses his

185
00:10:02,680 --> 00:10:05,790
favorite movie

186
00:10:13,560 --> 00:10:17,270
knows<font color="#E5E5E5"> the</font><font color="#CCCCCC"> subtitling ones</font>

187
00:10:26,380 --> 00:10:30,780
now we can see the attackers<font color="#E5E5E5"> point of</font>

188
00:10:28,600 --> 00:10:30,780
<font color="#E5E5E5">view</font>

189
00:10:35,430 --> 00:10:44,400
and we get a remote<font color="#E5E5E5"> shell the victim is</font>

190
00:10:39,840 --> 00:10:46,470
<font color="#E5E5E5">now owned by the attacker okay cool so</font>

191
00:10:44,400 --> 00:10:49,020
<font color="#CCCCCC">we know how to create malicious</font>

192
00:10:46,470 --> 00:10:52,170
subtitles for popcorn<font color="#E5E5E5"> time which is</font>

193
00:10:49,020 --> 00:10:55,560
great<font color="#E5E5E5"> but how would</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> user get our</font>

194
00:10:52,170 --> 00:10:58,620
subtitles so let's talk<font color="#E5E5E5"> later about the</font>

195
00:10:55,560 --> 00:11:02,130
subtitles<font color="#CCCCCC"> supply chain with an average</font>

196
00:10:58,620 --> 00:11:04,470
<font color="#E5E5E5">of</font><font color="#CCCCCC"> eight million daily downloads</font><font color="#E5E5E5"> open</font>

197
00:11:02,130 --> 00:11:07,890
subtitles<font color="#E5E5E5"> is the world largest online</font>

198
00:11:04,470 --> 00:11:10,620
community<font color="#CCCCCC"> for</font><font color="#E5E5E5"> subtitles their extensive</font>

199
00:11:07,890 --> 00:11:13,530
<font color="#CCCCCC">API is widely integrated into many other</font>

200
00:11:10,620 --> 00:11:15,750
<font color="#E5E5E5">video players and among the basic</font>

201
00:11:13,530 --> 00:11:18,839
functions<font color="#E5E5E5"> you would expect to find in</font>

202
00:11:15,750 --> 00:11:22,350
such API is upload and download it has

203
00:11:18,840 --> 00:11:24,470
the<font color="#E5E5E5"> smart search capability this</font><font color="#CCCCCC"> smart</font>

204
00:11:22,350 --> 00:11:26,940
<font color="#CCCCCC">search is essentially a</font><font color="#E5E5E5"> change function</font>

205
00:11:24,470 --> 00:11:29,460
<font color="#E5E5E5">requesting all relevant</font><font color="#CCCCCC"> subtitles from</font>

206
00:11:26,940 --> 00:11:31,710
<font color="#E5E5E5">the server sort and rank them and</font>

207
00:11:29,460 --> 00:11:34,980
<font color="#E5E5E5">returning the best matching subtitle</font>

208
00:11:31,710 --> 00:11:39,210
subtitle for your movie<font color="#E5E5E5"> let's take a</font>

209
00:11:34,980 --> 00:11:41,400
look looking at the request of<font color="#E5E5E5"> the smart</font>

210
00:11:39,210 --> 00:11:44,850
<font color="#E5E5E5">search we can</font><font color="#CCCCCC"> see the only</font><font color="#E5E5E5"> argument</font>

211
00:11:41,400 --> 00:11:46,890
passed<font color="#CCCCCC"> is I am DB ID along with the</font>

212
00:11:44,850 --> 00:11:50,340
required language<font color="#E5E5E5"> in this case all</font>

213
00:11:46,890 --> 00:11:53,990
languages<font color="#E5E5E5"> well the response contains all</font>

214
00:11:50,340 --> 00:11:56,670
matching subtitles<font color="#CCCCCC"> to the IMDB</font><font color="#E5E5E5"> IDs</font>

215
00:11:53,990 --> 00:11:58,980
so obviously<font color="#CCCCCC"> Popkin time automatically</font>

216
00:11:56,670 --> 00:12:04,740
<font color="#E5E5E5">loads the subtitles will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> highest</font><font color="#CCCCCC"> rank</font>

217
00:11:58,980 --> 00:12:08,520
<font color="#E5E5E5">but what determines the rank</font><font color="#CCCCCC"> skill</font>

218
00:12:04,740 --> 00:12:11,160
<font color="#E5E5E5">through the documentation we bumped into</font>

219
00:12:08,520 --> 00:12:13,949
this ranking scheme we can see that<font color="#E5E5E5"> the</font>

220
00:12:11,160 --> 00:12:17,280
score is<font color="#CCCCCC"> based on five criteria</font><font color="#E5E5E5"> movie</font>

221
00:12:13,950 --> 00:12:20,730
hash tag<font color="#CCCCCC"> I am The Bee ad</font><font color="#E5E5E5"> fps and</font>

222
00:12:17,280 --> 00:12:23,069
something called<font color="#E5E5E5"> others also extra</font>

223
00:12:20,730 --> 00:12:25,530
points are<font color="#E5E5E5"> credited for being an admin</font>

224
00:12:23,070 --> 00:12:28,200
or a trusted<font color="#E5E5E5"> partner but since the only</font>

225
00:12:25,530 --> 00:12:31,260
<font color="#CCCCCC">arguments sent by popcorn time</font><font color="#E5E5E5"> is the</font>

226
00:12:28,200 --> 00:12:33,270
IMDB ID if we would have<font color="#E5E5E5"> wanted our</font>

227
00:12:31,260 --> 00:12:35,939
malicious subtitles to be chosen by<font color="#E5E5E5"> the</font>

228
00:12:33,270 --> 00:12:41,400
API<font color="#CCCCCC"> the maximum points we could have get</font>

229
00:12:35,940 --> 00:12:42,990
is<font color="#E5E5E5"> 5 as been anonymous uploaders a bit</font>

230
00:12:41,400 --> 00:12:44,939
discouraged<font color="#E5E5E5"> by the documentation</font><font color="#CCCCCC"> and</font>

231
00:12:42,990 --> 00:12:47,790
<font color="#E5E5E5">scores seen in other popular movies</font>

232
00:12:44,940 --> 00:12:49,209
which were higher<font color="#CCCCCC"> than 5 we</font><font color="#E5E5E5"> turn to the</font>

233
00:12:47,790 --> 00:12:53,349
source<font color="#E5E5E5"> code of open</font>

234
00:12:49,209 --> 00:12:56,079
subtitles<font color="#E5E5E5"> and open subtitles API we</font>

235
00:12:53,350 --> 00:12:57,309
learned<font color="#E5E5E5"> valuable lessons if you truly if</font>

236
00:12:56,079 --> 00:13:00,069
<font color="#E5E5E5">you truly want</font><font color="#CCCCCC"> to break something</font>

237
00:12:57,309 --> 00:13:02,769
<font color="#CCCCCC">reading the documentation is not the way</font>

238
00:13:00,069 --> 00:13:06,069
to go because<font color="#E5E5E5"> the source code revealed</font>

239
00:13:02,769 --> 00:13:09,399
an undocumented behavior<font color="#E5E5E5"> the match</font><font color="#CCCCCC"> text</font>

240
00:13:06,069 --> 00:13:13,929
<font color="#E5E5E5">function is called either way but what</font>

241
00:13:09,399 --> 00:13:16,269
is<font color="#E5E5E5"> match tags match</font><font color="#CCCCCC"> text</font><font color="#E5E5E5"> function will</font>

242
00:13:13,929 --> 00:13:20,649
break the file name<font color="#CCCCCC"> of the movie</font><font color="#E5E5E5"> and the</font>

243
00:13:16,269 --> 00:13:23,829
subtitles<font color="#E5E5E5"> to</font><font color="#CCCCCC"> tag text</font><font color="#E5E5E5"> and a tag is</font>

244
00:13:20,649 --> 00:13:26,079
basically<font color="#E5E5E5"> an isolated word or</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of</font>

245
00:13:23,829 --> 00:13:30,339
<font color="#CCCCCC">the file name which are usually</font>

246
00:13:26,079 --> 00:13:32,709
<font color="#CCCCCC">separated by dots and dashes</font><font color="#E5E5E5"> then a</font>

247
00:13:30,339 --> 00:13:34,779
short<font color="#E5E5E5"> loop checks how many share tags</font>

248
00:13:32,709 --> 00:13:37,589
that this does the subtitle file name

249
00:13:34,779 --> 00:13:40,839
and the movie<font color="#E5E5E5"> file name has in common</font>

250
00:13:37,589 --> 00:13:43,660
after<font color="#CCCCCC"> that a weird formula is taking</font>

251
00:13:40,839 --> 00:13:46,619
place the amount<font color="#CCCCCC"> of share tags</font><font color="#E5E5E5"> is</font>

252
00:13:43,660 --> 00:13:50,350
divided by the<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of movie tags and</font>

253
00:13:46,619 --> 00:13:53,050
multiplied<font color="#E5E5E5"> by</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> max score of</font><font color="#CCCCCC"> seven seven</font>

254
00:13:50,350 --> 00:13:55,899
which<font color="#CCCCCC"> is a constant number</font><font color="#E5E5E5"> it is the</font>

255
00:13:53,050 --> 00:13:58,959
maximum score and<font color="#CCCCCC"> that can be signed in</font>

256
00:13:55,899 --> 00:14:01,420
case of full compatibility between the

257
00:13:58,959 --> 00:14:05,888
<font color="#E5E5E5">two file names let's see a demonstration</font>

258
00:14:01,420 --> 00:14:07,540
of<font color="#E5E5E5"> how the function behaves and let's</font>

259
00:14:05,889 --> 00:14:11,499
assume<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> movie file name</font>

260
00:14:07,540 --> 00:14:15,610
streamed by popcorn<font color="#CCCCCC"> time we can easily</font>

261
00:14:11,499 --> 00:14:19,019
<font color="#E5E5E5">do that by</font><font color="#CCCCCC"> using sniffer and this is the</font>

262
00:14:15,610 --> 00:14:21,819
name of a candidate subtitles file name

263
00:14:19,019 --> 00:14:25,240
the code first splits the movie file

264
00:14:21,819 --> 00:14:29,170
name into tags<font color="#E5E5E5"> and then it splits the</font>

265
00:14:25,240 --> 00:14:30,970
<font color="#E5E5E5">subtitle fining the match text function</font>

266
00:14:29,170 --> 00:14:34,990
then checks how many share tags they

267
00:14:30,970 --> 00:14:38,339
have three in this<font color="#E5E5E5"> case the API then</font>

268
00:14:34,990 --> 00:14:42,399
goes<font color="#CCCCCC"> to its formula which is</font><font color="#E5E5E5"> share tags</font>

269
00:14:38,339 --> 00:14:45,759
<font color="#CCCCCC">three as we just saw</font><font color="#E5E5E5"> divided by tags in</font>

270
00:14:42,399 --> 00:14:48,879
the movie file name<font color="#E5E5E5"> eight we see that on</font>

271
00:14:45,759 --> 00:14:52,089
the<font color="#E5E5E5"> Left</font><font color="#CCCCCC"> multiplied by the max score</font>

272
00:14:48,879 --> 00:14:57,370
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is a constant number</font><font color="#E5E5E5"> of seven this</font>

273
00:14:52,089 --> 00:15:00,069
gives us the<font color="#E5E5E5"> final score</font><font color="#CCCCCC"> of two well</font>

274
00:14:57,370 --> 00:15:02,470
this<font color="#E5E5E5"> behavior makes it</font><font color="#CCCCCC"> river to achieve</font>

275
00:15:00,069 --> 00:15:03,459
full competitive compatibility<font color="#CCCCCC"> all we</font>

276
00:15:02,470 --> 00:15:07,000
have<font color="#E5E5E5"> to do</font>

277
00:15:03,460 --> 00:15:10,090
name our malicious subtitles identically

278
00:15:07,000 --> 00:15:13,570
<font color="#CCCCCC">to the movie in this case we get full</font>

279
00:15:10,090 --> 00:15:16,870
compatibility<font color="#CCCCCC"> Plus the IMDB ID five</font>

280
00:15:13,570 --> 00:15:21,570
points<font color="#E5E5E5"> we already had and we get</font><font color="#CCCCCC"> twelve</font>

281
00:15:16,870 --> 00:15:24,490
<font color="#E5E5E5">points but wait there</font><font color="#CCCCCC"> is more</font>

282
00:15:21,570 --> 00:15:26,170
these are the<font color="#E5E5E5"> recommended subtitle score</font>

283
00:15:24,490 --> 00:15:27,760
for some of the most popular<font color="#CCCCCC"> content</font>

284
00:15:26,170 --> 00:15:31,270
<font color="#E5E5E5">available online</font>

285
00:15:27,760 --> 00:15:34,330
Deadpool frozen<font color="#CCCCCC"> inception</font><font color="#E5E5E5"> Snowden and</font>

286
00:15:31,270 --> 00:15:37,180
<font color="#E5E5E5">West world season 1 episode 1 this graph</font>

287
00:15:34,330 --> 00:15:39,070
<font color="#CCCCCC">shows the</font><font color="#E5E5E5"> score of the</font><font color="#CCCCCC"> 7 most popular</font>

288
00:15:37,180 --> 00:15:41,250
languages in the world<font color="#CCCCCC"> displaying their</font>

289
00:15:39,070 --> 00:15:43,930
average<font color="#E5E5E5"> and</font><font color="#CCCCCC"> highest score</font>

290
00:15:41,250 --> 00:15:46,330
scanning automatically through a bunch

291
00:15:43,930 --> 00:15:49,569
<font color="#E5E5E5">of popular subtitles we notice the</font>

292
00:15:46,330 --> 00:15:54,700
<font color="#E5E5E5">highest score of a subtitle gut was 14</font>

293
00:15:49,570 --> 00:15:56,770
while the average is 10 so at this<font color="#E5E5E5"> point</font>

294
00:15:54,700 --> 00:16:00,040
<font color="#CCCCCC">we've showed</font><font color="#E5E5E5"> that we can consistently</font>

295
00:15:56,770 --> 00:16:02,500
achieve a solid score of 12<font color="#CCCCCC"> a higher</font>

296
00:16:00,040 --> 00:16:06,550
than the average<font color="#E5E5E5"> but</font><font color="#CCCCCC"> still where were</font>

297
00:16:02,500 --> 00:16:09,160
unsatisfied<font color="#E5E5E5"> so as you recall extra</font>

298
00:16:06,550 --> 00:16:12,939
points are credited for<font color="#E5E5E5"> being a trusted</font>

299
00:16:09,160 --> 00:16:17,380
<font color="#E5E5E5">a ranked user so crawling open subtitles</font>

300
00:16:12,940 --> 00:16:19,810
website we found this table apparently

301
00:16:17,380 --> 00:16:24,040
<font color="#E5E5E5">all</font><font color="#CCCCCC"> it takes to become a gold member and</font>

302
00:16:19,810 --> 00:16:24,910
earn<font color="#E5E5E5"> extra</font><font color="#CCCCCC"> 3 points</font><font color="#E5E5E5"> is a hundred and one</font>

303
00:16:24,040 --> 00:16:29,339
uploads

304
00:16:24,910 --> 00:16:32,589
so we<font color="#E5E5E5"> signed to a open subtitles</font><font color="#CCCCCC"> and</font>

305
00:16:29,340 --> 00:16:36,550
<font color="#E5E5E5">four minutes later and 40 lines of</font>

306
00:16:32,590 --> 00:16:38,620
Python<font color="#E5E5E5"> we were golden so we wrote a</font>

307
00:16:36,550 --> 00:16:42,030
small<font color="#E5E5E5"> script that gets the score of all</font>

308
00:16:38,620 --> 00:16:46,270
subtitles<font color="#CCCCCC"> available for a given movie</font><font color="#E5E5E5"> as</font>

309
00:16:42,030 --> 00:16:49,900
you<font color="#E5E5E5"> can see our subtitle has the</font><font color="#CCCCCC"> IIST</font>

310
00:16:46,270 --> 00:16:53,620
score of 15<font color="#E5E5E5"> well what this basically</font>

311
00:16:49,900 --> 00:16:56,650
<font color="#E5E5E5">means that</font><font color="#CCCCCC"> given any movie</font><font color="#E5E5E5"> we can force</font>

312
00:16:53,620 --> 00:17:00,340
your player<font color="#CCCCCC"> to load our crafted</font>

313
00:16:56,650 --> 00:17:04,150
malicious subtitles and exploit<font color="#E5E5E5"> your</font>

314
00:17:00,340 --> 00:17:07,650
machine<font color="#E5E5E5"> so let's see what else we can</font><font color="#CCCCCC"> do</font>

315
00:17:04,150 --> 00:17:07,650
it with it<font color="#E5E5E5"> over</font>

316
00:17:23,490 --> 00:17:32,800
<font color="#E5E5E5">all right hi so moving on our next</font>

317
00:17:29,800 --> 00:17:36,070
target<font color="#E5E5E5"> called</font><font color="#CCCCCC"> Cody which is formally</font>

318
00:17:32,800 --> 00:17:40,300
known<font color="#CCCCCC"> as</font><font color="#E5E5E5"> XBMC is an award-winning</font>

319
00:17:36,070 --> 00:17:43,780
<font color="#E5E5E5">open-source cross-platform and it is</font>

320
00:17:40,300 --> 00:17:46,990
available<font color="#E5E5E5"> in all major platforms</font><font color="#CCCCCC"> in 72</font>

321
00:17:43,780 --> 00:17:49,540
languages<font color="#E5E5E5"> and it is</font><font color="#CCCCCC"> used by over 40</font>

322
00:17:46,990 --> 00:17:52,780
<font color="#E5E5E5">million people it is probably the</font><font color="#CCCCCC"> most</font>

323
00:17:49,540 --> 00:17:55,659
common media center software around<font color="#CCCCCC"> and</font>

324
00:17:52,780 --> 00:17:58,930
it is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> a really popular combination</font>

325
00:17:55,660 --> 00:18:01,150
with<font color="#E5E5E5"> raspberry PI's and smart TV making</font>

326
00:17:58,930 --> 00:18:04,810
<font color="#E5E5E5">it kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> interesting from an attackers</font>

327
00:18:01,150 --> 00:18:06,850
perspective so this is the screen that

328
00:18:04,810 --> 00:18:10,330
is displayed when you want to<font color="#E5E5E5"> download</font>

329
00:18:06,850 --> 00:18:12,699
<font color="#E5E5E5">subtitles using Kodi this is the request</font>

330
00:18:10,330 --> 00:18:14,980
that is being sent<font color="#CCCCCC"> and we recognize it</font>

331
00:18:12,700 --> 00:18:19,540
as we're already<font color="#E5E5E5"> pretty familiar with</font>

332
00:18:14,980 --> 00:18:21,250
open<font color="#E5E5E5"> subtitles API structure and this is</font>

333
00:18:19,540 --> 00:18:24,670
the code that is actually<font color="#E5E5E5"> fetching those</font>

334
00:18:21,250 --> 00:18:27,460
subtitles<font color="#E5E5E5"> first the search subtitle</font>

335
00:18:24,670 --> 00:18:29,200
<font color="#E5E5E5">function is called and the response is</font>

336
00:18:27,460 --> 00:18:34,060
being saved<font color="#E5E5E5"> into a variable called</font>

337
00:18:29,200 --> 00:18:37,240
<font color="#E5E5E5">search data then a for loop iterates</font>

338
00:18:34,060 --> 00:18:39,220
<font color="#CCCCCC">over these results</font><font color="#E5E5E5"> extracting the</font>

339
00:18:37,240 --> 00:18:45,160
<font color="#CCCCCC">information from them</font><font color="#E5E5E5"> and formats them</font>

340
00:18:39,220 --> 00:18:47,650
into a string<font color="#E5E5E5"> called URL then each of</font>

341
00:18:45,160 --> 00:18:51,220
these created URL are sent into a

342
00:18:47,650 --> 00:18:54,430
function called add<font color="#E5E5E5"> directory item</font><font color="#CCCCCC"> which</font>

343
00:18:51,220 --> 00:18:56,500
in<font color="#CCCCCC"> turn results in this screen</font><font color="#E5E5E5"> and now</font>

344
00:18:54,430 --> 00:19:01,240
the user<font color="#CCCCCC"> can select his desired subtitle</font>

345
00:18:56,500 --> 00:19:03,790
<font color="#E5E5E5">and just continue watching the movie so</font>

346
00:19:01,240 --> 00:19:07,000
let's back up a<font color="#E5E5E5"> little bit and focus on</font>

347
00:19:03,790 --> 00:19:10,030
<font color="#E5E5E5">that URL string for a moment since open</font>

348
00:19:07,000 --> 00:19:12,160
subtitle is obviously<font color="#E5E5E5"> open the attacker</font>

349
00:19:10,030 --> 00:19:15,010
has complete control<font color="#E5E5E5"> over the file name</font>

350
00:19:12,160 --> 00:19:18,550
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is being</font><font color="#E5E5E5"> received under</font><font color="#CCCCCC"> the value</font>

351
00:19:15,010 --> 00:19:21,149
of sub<font color="#CCCCCC"> file name and here we see how</font>

352
00:19:18,550 --> 00:19:23,940
each<font color="#CCCCCC"> of those four keys</font><font color="#E5E5E5"> a in</font>

353
00:19:21,149 --> 00:19:30,689
item<font color="#E5E5E5"> data in item data are formatted</font>

354
00:19:23,940 --> 00:19:32,909
<font color="#E5E5E5">into the URL string so given the fact</font>

355
00:19:30,690 --> 00:19:38,129
<font color="#CCCCCC">that the attacker</font><font color="#E5E5E5"> completely controls</font>

356
00:19:32,909 --> 00:19:40,469
the file name<font color="#E5E5E5"> what can he do</font><font color="#CCCCCC"> with it so</font>

357
00:19:38,129 --> 00:19:44,129
<font color="#E5E5E5">usually the file name will be something</font>

358
00:19:40,469 --> 00:19:46,950
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> subtitle file name</font><font color="#E5E5E5"> Authority</font>

359
00:19:44,129 --> 00:19:50,189
but what if afterwards<font color="#E5E5E5"> we append the</font>

360
00:19:46,950 --> 00:19:55,859
ampersand sign and then<font color="#E5E5E5"> we add something</font>

361
00:19:50,190 --> 00:19:58,830
<font color="#E5E5E5">like this this would effectively</font>

362
00:19:55,859 --> 00:20:01,109
<font color="#E5E5E5">overwrite the</font><font color="#CCCCCC"> original link and IB</font>

363
00:19:58,830 --> 00:20:03,629
parameters which we<font color="#CCCCCC"> originally didn't</font>

364
00:20:01,109 --> 00:20:05,699
have any<font color="#E5E5E5"> control over simply because</font>

365
00:20:03,629 --> 00:20:08,820
this<font color="#E5E5E5"> is a string and it is being parsed</font>

366
00:20:05,700 --> 00:20:11,460
<font color="#E5E5E5">by a very basic split function</font><font color="#CCCCCC"> well how</font>

367
00:20:08,820 --> 00:20:13,979
<font color="#E5E5E5">does this help us because once the user</font>

368
00:20:11,460 --> 00:20:18,509
chooses<font color="#CCCCCC"> his subtitles the download</font>

369
00:20:13,979 --> 00:20:20,489
function<font color="#CCCCCC"> is called and the argument to</font>

370
00:20:18,509 --> 00:20:23,099
<font color="#E5E5E5">that download</font><font color="#CCCCCC"> function are derived from</font>

371
00:20:20,489 --> 00:20:26,690
<font color="#CCCCCC">that URL</font><font color="#E5E5E5"> string and these are the</font>

372
00:20:23,099 --> 00:20:31,918
arguments we can now control<font color="#CCCCCC"> the ID and</font>

373
00:20:26,690 --> 00:20:36,749
<font color="#CCCCCC">the link so how does this function</font>

374
00:20:31,919 --> 00:20:38,879
<font color="#E5E5E5">behave first it uses the open subtitle</font>

375
00:20:36,749 --> 00:20:42,149
<font color="#E5E5E5">API to try and download the subtitle</font>

376
00:20:38,879 --> 00:20:44,399
based on the ID given to it<font color="#E5E5E5"> but the</font>

377
00:20:42,149 --> 00:20:47,748
really<font color="#CCCCCC"> interesting part is what happens</font>

378
00:20:44,399 --> 00:20:50,309
<font color="#E5E5E5">when it fails if the ID does not exist</font>

379
00:20:47,749 --> 00:20:55,169
then the not result branch would be

380
00:20:50,309 --> 00:20:58,918
taken<font color="#E5E5E5"> and it downloads</font><font color="#CCCCCC"> a zip file from</font>

381
00:20:55,169 --> 00:21:00,629
the link<font color="#CCCCCC"> given to it so by changing</font><font color="#E5E5E5"> the</font>

382
00:20:58,919 --> 00:21:05,460
<font color="#E5E5E5">ID to something that doesn't</font><font color="#CCCCCC"> really</font>

383
00:21:00,629 --> 00:21:09,928
<font color="#E5E5E5">exist</font><font color="#CCCCCC"> such</font><font color="#E5E5E5"> as - 1 2</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> and overwriting</font>

384
00:21:05,460 --> 00:21:12,450
the<font color="#E5E5E5"> link to point to a zip file stored</font>

385
00:21:09,929 --> 00:21:15,659
on our servers<font color="#CCCCCC"> we can force Kodi to</font>

386
00:21:12,450 --> 00:21:17,339
download a remote zip file and after<font color="#CCCCCC"> the</font>

387
00:21:15,659 --> 00:21:20,969
<font color="#CCCCCC">download the zip file is sent</font><font color="#E5E5E5"> to the</font>

388
00:21:17,339 --> 00:21:23,399
function XBMC extract<font color="#E5E5E5"> now instead</font><font color="#CCCCCC"> of</font>

389
00:21:20,969 --> 00:21:25,259
using any standard library for<font color="#CCCCCC"> zip</font>

390
00:21:23,399 --> 00:21:27,748
extraction<font color="#CCCCCC"> Cody decided to implement</font>

391
00:21:25,259 --> 00:21:29,359
<font color="#E5E5E5">their own which as we</font><font color="#CCCCCC"> all know is</font>

392
00:21:27,749 --> 00:21:32,460
usually<font color="#CCCCCC"> a great idea</font><font color="#E5E5E5"> right</font>

393
00:21:29,359 --> 00:21:35,110
so downloading an arbitrary zip file

394
00:21:32,460 --> 00:21:37,059
from the internet<font color="#CCCCCC"> is definitely careless</font>

395
00:21:35,110 --> 00:21:39,370
training this behavior with another

396
00:21:37,059 --> 00:21:41,740
vulnerability<font color="#E5E5E5"> we found in Cody's</font>

397
00:21:39,370 --> 00:21:46,299
extraction method made it lethal<font color="#CCCCCC"> let's</font>

398
00:21:41,740 --> 00:21:48,669
see what<font color="#CCCCCC"> Cody</font><font color="#E5E5E5"> built in extract archive</font>

399
00:21:46,299 --> 00:21:50,830
function does<font color="#E5E5E5"> is building a fire path</font>

400
00:21:48,669 --> 00:21:53,590
based on the folder names<font color="#E5E5E5"> inside the</font>

401
00:21:50,830 --> 00:21:55,899
archive but what Cody<font color="#E5E5E5"> neglected to</font>

402
00:21:53,590 --> 00:21:58,269
handle are fuller names that contains

403
00:21:55,899 --> 00:22:01,059
two dots<font color="#E5E5E5"> so that's right we have</font>

404
00:21:58,269 --> 00:22:03,940
directory traversal here so all we have

405
00:22:01,059 --> 00:22:07,330
to<font color="#CCCCCC"> do to create</font><font color="#E5E5E5"> all we have to do is to</font>

406
00:22:03,940 --> 00:22:09,460
create<font color="#E5E5E5"> a zip file that contains</font><font color="#CCCCCC"> dots as</font>

407
00:22:07,330 --> 00:22:14,158
folder names and then we can make<font color="#E5E5E5"> the</font>

408
00:22:09,460 --> 00:22:18,100
extraction<font color="#CCCCCC"> just create any Python</font><font color="#E5E5E5"> script</font>

409
00:22:14,159 --> 00:22:20,260
<font color="#E5E5E5">we choose to overwrite the add-on itself</font>

410
00:22:18,100 --> 00:22:23,860
<font color="#E5E5E5">which will be immediately called again</font>

411
00:22:20,260 --> 00:22:27,220
thus executing our code this resulted<font color="#E5E5E5"> in</font>

412
00:22:23,860 --> 00:22:31,168
this CV and our second vulnerability for

413
00:22:27,220 --> 00:22:31,169
today let's see<font color="#E5E5E5"> that in action</font>

414
00:22:47,960 --> 00:22:53,020
user opens<font color="#CCCCCC"> cody</font><font color="#E5E5E5"> such as his favorite</font>

415
00:22:50,720 --> 00:22:53,020
film

416
00:23:21,780 --> 00:23:27,060
<font color="#E5E5E5">all right now we open the subtitle menu</font>

417
00:23:24,300 --> 00:23:31,050
we discussed earlier<font color="#E5E5E5"> and due</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> our</font>

418
00:23:27,060 --> 00:23:34,260
fantastic<font color="#CCCCCC"> rating of subtitles</font><font color="#E5E5E5"> all of the</font>

419
00:23:31,050 --> 00:23:36,360
three<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> top entries will be our</font>

420
00:23:34,260 --> 00:23:39,110
malicious subtitles so you can choose

421
00:23:36,360 --> 00:23:39,110
whatever you<font color="#E5E5E5"> like</font>

422
00:23:45,930 --> 00:23:49,850
again we see<font color="#E5E5E5"> the attackers</font><font color="#CCCCCC"> perspective</font>

423
00:23:54,330 --> 00:24:00,929
we<font color="#CCCCCC"> did a reverse show and tiny</font><font color="#E5E5E5"> B&C</font><font color="#CCCCCC"> now</font>

424
00:23:58,950 --> 00:24:05,760
we<font color="#E5E5E5"> have complete control over</font><font color="#CCCCCC"> the</font>

425
00:24:00,930 --> 00:24:08,700
victims computer<font color="#E5E5E5"> so moving on to the</font>

426
00:24:05,760 --> 00:24:11,790
next<font color="#E5E5E5"> victim</font><font color="#CCCCCC"> while</font><font color="#E5E5E5"> popcorntime definitely</font>

427
00:24:08,700 --> 00:24:14,370
marked the rise of streaming apps being

428
00:24:11,790 --> 00:24:16,320
temporarily shut<font color="#CCCCCC"> down by the MPAA it</font>

429
00:24:14,370 --> 00:24:20,250
left users<font color="#CCCCCC"> looking for answers</font><font color="#E5E5E5"> and</font>

430
00:24:16,320 --> 00:24:22,379
<font color="#E5E5E5">stream I</font><font color="#CCCCCC"> offered just</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> like popcorn</font>

431
00:24:20,250 --> 00:24:25,080
time it is designed with the<font color="#E5E5E5"> ease</font><font color="#CCCCCC"> of use</font>

432
00:24:22,380 --> 00:24:29,400
in<font color="#E5E5E5"> mind and actually has quite similar</font>

433
00:24:25,080 --> 00:24:31,050
user interface<font color="#E5E5E5"> interestingly enough</font>

434
00:24:29,400 --> 00:24:33,390
<font color="#CCCCCC">stream a</font><font color="#E5E5E5"> oh sure the</font><font color="#CCCCCC"> Fuca</font>

435
00:24:31,050 --> 00:24:36,210
characteristics<font color="#CCCCCC"> with popcorn</font><font color="#E5E5E5"> time under</font>

436
00:24:33,390 --> 00:24:39,480
the hood<font color="#E5E5E5"> most importantly for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> it is</font>

437
00:24:36,210 --> 00:24:40,080
<font color="#CCCCCC">also a</font><font color="#E5E5E5"> WebKit based application and you</font>

438
00:24:39,480 --> 00:24:43,110
guessed it<font color="#E5E5E5"> right</font>

439
00:24:40,080 --> 00:24:45,960
<font color="#E5E5E5">it also uses open subtitle as</font><font color="#CCCCCC"> its</font>

440
00:24:43,110 --> 00:24:47,850
<font color="#CCCCCC">subtitle provider</font><font color="#E5E5E5"> so we thought that</font>

441
00:24:45,960 --> 00:24:49,950
<font color="#CCCCCC">would be easy</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we tried the same</font>

442
00:24:47,850 --> 00:24:52,860
trick that<font color="#E5E5E5"> we used on</font><font color="#CCCCCC"> popcorn time you</font>

443
00:24:49,950 --> 00:24:56,340
can<font color="#CCCCCC"> actually see the broken</font><font color="#E5E5E5"> the broken</font>

444
00:24:52,860 --> 00:24:59,490
image icon at the bottom but no message

445
00:24:56,340 --> 00:25:02,610
box appeared so that didn't<font color="#E5E5E5"> really</font><font color="#CCCCCC"> work</font>

446
00:24:59,490 --> 00:25:04,770
<font color="#E5E5E5">and apparently our JavaScript has been</font>

447
00:25:02,610 --> 00:25:06,290
sanitized<font color="#E5E5E5"> and it was time to dig a</font>

448
00:25:04,770 --> 00:25:09,240
little deeper

449
00:25:06,290 --> 00:25:11,670
so<font color="#E5E5E5"> stray mile code is archived as an</font>

450
00:25:09,240 --> 00:25:13,920
Acer file which is a simple<font color="#CCCCCC"> tower-like</font>

451
00:25:11,670 --> 00:25:15,630
format<font color="#E5E5E5"> that just concatenates all the</font>

452
00:25:13,920 --> 00:25:19,260
files together<font color="#E5E5E5"> but without any</font>

453
00:25:15,630 --> 00:25:20,970
compression<font color="#E5E5E5"> so we use the nodejs library</font>

454
00:25:19,260 --> 00:25:23,730
to extract it and<font color="#E5E5E5"> we got all the</font>

455
00:25:20,970 --> 00:25:27,810
<font color="#E5E5E5">necessary files we needed in order to</font>

456
00:25:23,730 --> 00:25:30,090
<font color="#E5E5E5">inspect the</font><font color="#CCCCCC"> code extracting the source</font>

457
00:25:27,810 --> 00:25:32,820
code and<font color="#CCCCCC"> pre defying it we realized</font><font color="#E5E5E5"> that</font>

458
00:25:30,090 --> 00:25:36,120
any text<font color="#E5E5E5"> editor screen is passed through</font>

459
00:25:32,820 --> 00:25:39,360
angular<font color="#E5E5E5"> sanitize and the</font><font color="#CCCCCC"> sanitize</font>

460
00:25:36,120 --> 00:25:41,610
service will parse an HTML and only

461
00:25:39,360 --> 00:25:43,409
allow<font color="#CCCCCC"> for safe and whitelisted markup</font>

462
00:25:41,610 --> 00:25:45,840
and attributes to survive thus

463
00:25:43,410 --> 00:25:48,180
sterilizing the<font color="#E5E5E5"> strings so it contains</font>

464
00:25:45,840 --> 00:25:51,870
<font color="#E5E5E5">no scripting expression or dangerous</font>

465
00:25:48,180 --> 00:25:55,080
attributes<font color="#CCCCCC"> for so while having to use</font>

466
00:25:51,870 --> 00:25:57,330
only<font color="#E5E5E5"> static HTML tags really limited our</font>

467
00:25:55,080 --> 00:26:00,570
options this called for a really

468
00:25:57,330 --> 00:26:02,669
creative solution so if you've<font color="#E5E5E5"> ever used</font>

469
00:26:00,570 --> 00:26:06,760
<font color="#CCCCCC">Strama you must be familiar</font><font color="#E5E5E5"> with their</font>

470
00:26:02,670 --> 00:26:09,850
support us pop-up banner now

471
00:26:06,760 --> 00:26:12,940
we know that we can<font color="#E5E5E5"> use static HTML tags</font>

472
00:26:09,850 --> 00:26:16,510
right<font color="#E5E5E5"> so what if we</font><font color="#CCCCCC"> present this same</font>

473
00:26:12,940 --> 00:26:19,900
<font color="#E5E5E5">image of the supporters banner using an</font>

474
00:26:16,510 --> 00:26:23,679
image tag<font color="#E5E5E5"> but we surrounded with an</font><font color="#CCCCCC"> href</font>

475
00:26:19,900 --> 00:26:25,990
tag<font color="#CCCCCC"> this</font><font color="#E5E5E5"> way there's no script to be</font>

476
00:26:23,679 --> 00:26:28,720
sanitized<font color="#E5E5E5"> once the user would click like</font>

477
00:26:25,990 --> 00:26:30,520
he always does<font color="#E5E5E5"> in order to close it but</font>

478
00:26:28,720 --> 00:26:33,160
when he will click it again<font color="#E5E5E5"> he will be</font>

479
00:26:30,520 --> 00:26:36,450
redirected to<font color="#CCCCCC"> our malicious JavaScript</font>

480
00:26:33,160 --> 00:26:41,640
with the same code showed<font color="#E5E5E5"> shown earlier</font>

481
00:26:36,450 --> 00:26:41,640
<font color="#E5E5E5">so let's take a look at this demo</font>

482
00:27:16,190 --> 00:27:22,210
and we get a<font color="#E5E5E5"> car there's no</font><font color="#CCCCCC"> fancy</font>

483
00:27:18,320 --> 00:27:25,330
reverse gel here<font color="#E5E5E5"> just a nice so</font>

484
00:27:22,210 --> 00:27:28,250
<font color="#E5E5E5">realizing the disastrous potential of</font>

485
00:27:25,330 --> 00:27:30,500
subtitle as an attack vector<font color="#CCCCCC"> we move on</font>

486
00:27:28,250 --> 00:27:32,570
and I'm pretty<font color="#E5E5E5"> sure that</font><font color="#CCCCCC"> there is no</font>

487
00:27:30,500 --> 00:27:37,250
need to introduce<font color="#E5E5E5"> our next target</font>

488
00:27:32,570 --> 00:27:40,100
<font color="#E5E5E5">because with over</font><font color="#CCCCCC"> 118 million users VLC</font>

489
00:27:37,250 --> 00:27:42,920
is definitely one of the<font color="#E5E5E5"> most common</font>

490
00:27:40,100 --> 00:27:45,530
media players out there<font color="#E5E5E5"> and it is open</font>

491
00:27:42,920 --> 00:27:49,210
source<font color="#E5E5E5"> and available in almost any</font>

492
00:27:45,530 --> 00:27:52,340
<font color="#E5E5E5">platform in imaginable</font><font color="#CCCCCC"> so at this point</font>

493
00:27:49,210 --> 00:27:53,560
<font color="#CCCCCC">on</font><font color="#E5E5E5"> I live now</font><font color="#CCCCCC"> also a</font><font color="#E5E5E5"> member of our team</font>

494
00:27:52,340 --> 00:27:56,270
<font color="#E5E5E5">right here in the crowd</font>

495
00:27:53,560 --> 00:28:00,350
join us<font color="#CCCCCC"> and</font><font color="#E5E5E5"> much of the work shown here</font>

496
00:27:56,270 --> 00:28:03,290
is due to his contribution so<font color="#CCCCCC"> VLC</font><font color="#E5E5E5"> in</font>

497
00:28:00,350 --> 00:28:05,480
fact is<font color="#E5E5E5"> a complete multimedia</font><font color="#CCCCCC"> we're more</font>

498
00:28:03,290 --> 00:28:08,720
just like<font color="#CCCCCC"> direction over energy streamer</font>

499
00:28:05,480 --> 00:28:11,030
<font color="#E5E5E5">where you can load</font><font color="#CCCCCC"> and load the plugins</font>

500
00:28:08,720 --> 00:28:13,880
<font color="#E5E5E5">and modules dynamically depending on the</font>

501
00:28:11,030 --> 00:28:16,460
necessity so the core framework is just

502
00:28:13,880 --> 00:28:18,710
used to<font color="#E5E5E5"> do the wiring between the</font>

503
00:28:16,460 --> 00:28:21,200
different modules<font color="#E5E5E5"> and the media</font>

504
00:28:18,710 --> 00:28:23,990
processing<font color="#CCCCCC"> so whether it's from inputs</font>

505
00:28:21,200 --> 00:28:24,800
like files or network network streams to

506
00:28:23,990 --> 00:28:27,470
outputs

507
00:28:24,800 --> 00:28:29,629
whether<font color="#E5E5E5"> they're audio or video on</font><font color="#CCCCCC"> a</font>

508
00:28:27,470 --> 00:28:32,000
screen<font color="#CCCCCC"> or on a network</font><font color="#E5E5E5"> it uses modules</font>

509
00:28:29,630 --> 00:28:34,610
to do most of the work<font color="#CCCCCC"> in every stage</font>

510
00:28:32,000 --> 00:28:38,060
like various<font color="#E5E5E5"> democ</font><font color="#CCCCCC"> sir's decoders and</font>

511
00:28:34,610 --> 00:28:40,969
<font color="#E5E5E5">filters now being described even by its</font>

512
00:28:38,060 --> 00:28:42,610
own authors as a very popular<font color="#E5E5E5"> but quite</font>

513
00:28:40,970 --> 00:28:45,500
large and complex piece of<font color="#E5E5E5"> software</font>

514
00:28:42,610 --> 00:28:47,959
<font color="#CCCCCC">we're pretty confident that subtitles</font>

515
00:28:45,500 --> 00:28:52,280
related<font color="#E5E5E5"> fun abilities do exist</font>

516
00:28:47,960 --> 00:28:54,670
so let's find<font color="#CCCCCC"> them textual subtitles are</font>

517
00:28:52,280 --> 00:28:58,190
parsed by<font color="#E5E5E5"> VLC</font><font color="#CCCCCC"> in the Mocs are called</font>

518
00:28:54,670 --> 00:29:00,440
subtitles dot<font color="#CCCCCC"> c</font><font color="#E5E5E5"> and these are all the</font>

519
00:28:58,190 --> 00:29:03,020
<font color="#E5E5E5">supported formats</font><font color="#CCCCCC"> and their respective</font>

520
00:29:00,440 --> 00:29:05,510
<font color="#E5E5E5">parsing function as you can see that's</font>

521
00:29:03,020 --> 00:29:07,490
quite<font color="#E5E5E5"> a lot and the de-mux</font><font color="#CCCCCC"> our only</font><font color="#E5E5E5"> job</font>

522
00:29:05,510 --> 00:29:10,070
<font color="#E5E5E5">is to parse the different timing</font>

523
00:29:07,490 --> 00:29:12,800
conventions of<font color="#E5E5E5"> each format and then send</font>

524
00:29:10,070 --> 00:29:15,590
every subtitle<font color="#E5E5E5"> to its decoder</font><font color="#CCCCCC"> now other</font>

525
00:29:12,800 --> 00:29:17,720
than<font color="#E5E5E5"> SSA in a SS that</font><font color="#CCCCCC"> Omri discussed</font>

526
00:29:15,590 --> 00:29:20,600
earlier<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are decoded by</font><font color="#E5E5E5"> a dedicated</font>

527
00:29:17,720 --> 00:29:24,340
<font color="#E5E5E5">library</font><font color="#CCCCCC"> all other formats are decoded by</font>

528
00:29:20,600 --> 00:29:26,929
VLC's own decoder<font color="#E5E5E5"> subs duck</font><font color="#CCCCCC"> so again</font>

529
00:29:24,340 --> 00:29:29,550
rolling<font color="#E5E5E5"> their own decoder that's a</font>

530
00:29:26,930 --> 00:29:33,360
pretty bad decision and

531
00:29:29,550 --> 00:29:36,389
things will go wrong so this<font color="#E5E5E5"> subs</font><font color="#CCCCCC"> that</font>

532
00:29:33,360 --> 00:29:40,020
takes every subtitle here<font color="#E5E5E5"> we see an</font>

533
00:29:36,390 --> 00:29:43,500
example<font color="#E5E5E5"> with SRT and parses it</font><font color="#CCCCCC"> textfield</font>

534
00:29:40,020 --> 00:29:45,930
<font color="#E5E5E5">it creators it then creates two versions</font>

535
00:29:43,500 --> 00:29:48,570
of it the first<font color="#CCCCCC"> is a plain</font><font color="#E5E5E5"> text</font><font color="#CCCCCC"> version</font>

536
00:29:45,930 --> 00:29:50,670
with all tags and attributes and styling

537
00:29:48,570 --> 00:29:54,000
stripped off and this would be used in

538
00:29:50,670 --> 00:29:55,890
case later rendering will fail and the

539
00:29:54,000 --> 00:29:58,910
second more feature-rich version is

540
00:29:55,890 --> 00:30:01,650
referred to<font color="#E5E5E5"> as the HTML subtitle and</font>

541
00:29:58,910 --> 00:30:03,480
HTML sub that will contain<font color="#E5E5E5"> all the fancy</font>

542
00:30:01,650 --> 00:30:06,680
styling attributes such<font color="#CCCCCC"> as phones and</font>

543
00:30:03,480 --> 00:30:09,630
alignments etc and<font color="#CCCCCC"> after being decoded</font>

544
00:30:06,680 --> 00:30:14,340
<font color="#E5E5E5">subtitles are sent to the final stage of</font>

545
00:30:09,630 --> 00:30:16,620
rendering so going over<font color="#E5E5E5"> the VLC subtitle</font>

546
00:30:14,340 --> 00:30:19,080
related code we immediately noticed a

547
00:30:16,620 --> 00:30:21,780
lot of parsing is being done using raw

548
00:30:19,080 --> 00:30:24,090
pointers instead of just the<font color="#E5E5E5"> built-ins</font>

549
00:30:21,780 --> 00:30:26,610
<font color="#E5E5E5">string functions and this is generally a</font>

550
00:30:24,090 --> 00:30:30,899
bad<font color="#CCCCCC"> idea let's see an example of it so</font>

551
00:30:26,610 --> 00:30:34,020
again this is how<font color="#E5E5E5"> a basic SRT subtitle</font>

552
00:30:30,900 --> 00:30:36,630
look like and this code uses PSD

553
00:30:34,020 --> 00:30:39,480
subtitle<font color="#E5E5E5"> a variable to parse the</font>

554
00:30:36,630 --> 00:30:42,570
subtitle one<font color="#E5E5E5"> byte at</font><font color="#CCCCCC"> a time</font><font color="#E5E5E5"> in this case</font>

555
00:30:39,480 --> 00:30:49,440
the code just identified<font color="#E5E5E5"> the HTML font</font>

556
00:30:42,570 --> 00:30:52,620
tag and it then moved on to consuming in

557
00:30:49,440 --> 00:30:56,070
its attributes<font color="#CCCCCC"> the face attribute in</font>

558
00:30:52,620 --> 00:30:59,250
this case so the decoder<font color="#CCCCCC"> will continue</font>

559
00:30:56,070 --> 00:31:03,330
reading<font color="#CCCCCC"> from the buffer</font><font color="#E5E5E5"> until a closing</font>

560
00:30:59,250 --> 00:31:08,300
bracket<font color="#E5E5E5"> is</font><font color="#CCCCCC"> met what this means is that</font>

561
00:31:03,330 --> 00:31:08,300
in case the closing bracket<font color="#E5E5E5"> is missing</font>

562
00:31:09,350 --> 00:31:14,000
the<font color="#E5E5E5"> puzzle</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> just keep on reading</font>

563
00:31:11,490 --> 00:31:17,310
<font color="#E5E5E5">resulting in</font><font color="#CCCCCC"> an out</font><font color="#E5E5E5"> of bound read</font>

564
00:31:14,000 --> 00:31:21,000
vulnerability that was assigned<font color="#E5E5E5"> with</font>

565
00:31:17,310 --> 00:31:24,179
this CV so while auditing the code

566
00:31:21,000 --> 00:31:25,890
manually<font color="#CCCCCC"> we also</font><font color="#E5E5E5"> started fuzzing VLC</font><font color="#CCCCCC"> for</font>

567
00:31:24,180 --> 00:31:28,530
subtitles related vulnerabilities<font color="#E5E5E5"> and</font>

568
00:31:25,890 --> 00:31:32,100
our weapon of<font color="#CCCCCC"> choice</font><font color="#E5E5E5"> was the brilliant</font>

569
00:31:28,530 --> 00:31:34,560
<font color="#E5E5E5">AFL and this security oriented father</font>

570
00:31:32,100 --> 00:31:36,689
<font color="#E5E5E5">employs</font><font color="#CCCCCC"> compile-time</font><font color="#E5E5E5"> instrumentation and</font>

571
00:31:34,560 --> 00:31:39,000
genetic algorithms<font color="#CCCCCC"> to discover new</font>

572
00:31:36,690 --> 00:31:42,450
internal<font color="#CCCCCC"> states</font><font color="#E5E5E5"> and trigger edge cases</font>

573
00:31:39,000 --> 00:31:42,960
<font color="#E5E5E5">in the targeted binary so getting the</font>

574
00:31:42,450 --> 00:31:46,169
<font color="#CCCCCC">fuzz comb</font>

575
00:31:42,960 --> 00:31:49,610
<font color="#E5E5E5">right was a bit tricky we created a</font>

576
00:31:46,169 --> 00:31:52,440
corpus and also created of<font color="#E5E5E5"> dictionary</font>

577
00:31:49,610 --> 00:31:55,709
but our main obstacle was<font color="#CCCCCC"> the fact that</font>

578
00:31:52,440 --> 00:31:57,570
our fuzzing server had no GUI so we

579
00:31:55,710 --> 00:32:01,409
overcame this<font color="#E5E5E5"> challenge by using that</font>

580
00:31:57,570 --> 00:32:04,470
<font color="#CCCCCC">transcold functionality this option will</font>

581
00:32:01,409 --> 00:32:07,679
make<font color="#CCCCCC"> VLC convert a movie from one codec</font>

582
00:32:04,470 --> 00:32:09,570
<font color="#E5E5E5">to another while attaching the subtitles</font>

583
00:32:07,679 --> 00:32:13,200
but displaying nothing so<font color="#CCCCCC"> that was</font>

584
00:32:09,570 --> 00:32:16,529
<font color="#E5E5E5">perfect for for us and so what is the</font>

585
00:32:13,200 --> 00:32:19,049
corpus<font color="#E5E5E5"> a corpus is a set of initial test</font>

586
00:32:16,529 --> 00:32:21,450
cases<font color="#CCCCCC"> comprising of valid files that</font>

587
00:32:19,049 --> 00:32:23,908
represents the protocol or functionality

588
00:32:21,450 --> 00:32:27,990
that is<font color="#E5E5E5"> being false and we plan to start</font>

589
00:32:23,909 --> 00:32:29,970
with<font color="#E5E5E5"> SRT</font><font color="#CCCCCC"> and a SS simply as these were</font>

590
00:32:27,990 --> 00:32:33,659
the<font color="#E5E5E5"> format's</font><font color="#CCCCCC"> that we researched first</font>

591
00:32:29,970 --> 00:32:36,149
and so for<font color="#E5E5E5"> our purpose we</font><font color="#CCCCCC"> cherry picked</font>

592
00:32:33,659 --> 00:32:38,220
<font color="#CCCCCC">variants of this file that incorporated</font>

593
00:32:36,149 --> 00:32:41,158
some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the more exotic features we</font>

594
00:32:38,220 --> 00:32:44,669
discussed earlier<font color="#E5E5E5"> so this is the basic</font>

595
00:32:41,159 --> 00:32:47,190
time convention of<font color="#E5E5E5"> SRT format and we</font>

596
00:32:44,669 --> 00:32:49,289
intended on adding more<font color="#E5E5E5"> formats to the</font>

597
00:32:47,190 --> 00:32:52,320
corpus as we go along<font color="#E5E5E5"> but the amazing</font>

598
00:32:49,289 --> 00:32:55,350
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we didn't need to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> FL</font>

599
00:32:52,320 --> 00:32:57,360
just blindly build<font color="#CCCCCC"> a valid subtitle</font>

600
00:32:55,350 --> 00:33:00,120
files of<font color="#E5E5E5"> different formats with just</font>

601
00:32:57,360 --> 00:33:03,449
zero<font color="#E5E5E5"> knowledge in this case he created</font>

602
00:33:00,120 --> 00:33:05,549
the<font color="#CCCCCC"> jss format all by itself</font><font color="#E5E5E5"> and this is</font>

603
00:33:03,450 --> 00:33:07,770
a great<font color="#E5E5E5"> demonstration of one of AFL</font>

604
00:33:05,549 --> 00:33:10,500
strengths that<font color="#E5E5E5"> is assembly level</font>

605
00:33:07,770 --> 00:33:13,200
instrumentation because<font color="#CCCCCC"> the odds of a</font>

606
00:33:10,500 --> 00:33:15,360
traditional<font color="#CCCCCC"> fuzzer to just</font><font color="#E5E5E5"> randomly flip</font>

607
00:33:13,200 --> 00:33:19,279
bits and<font color="#E5E5E5"> bytes to take one time in</font>

608
00:33:15,360 --> 00:33:21,719
convention of<font color="#CCCCCC"> SRT and turn it into a JSS</font>

609
00:33:19,279 --> 00:33:24,240
time<font color="#E5E5E5"> convention are extremely low</font>

610
00:33:21,720 --> 00:33:27,480
however through assembly level

611
00:33:24,240 --> 00:33:29,789
instrumentation<font color="#E5E5E5"> AFL notices how minor a</font>

612
00:33:27,480 --> 00:33:32,340
mutation<font color="#E5E5E5"> trigger slightly different code</font>

613
00:33:29,789 --> 00:33:34,950
<font color="#CCCCCC">paths every time and it uses those as a</font>

614
00:33:32,340 --> 00:33:38,639
seed for further fuzzing<font color="#CCCCCC"> grounds</font><font color="#E5E5E5"> so</font>

615
00:33:34,950 --> 00:33:40,679
great<font color="#CCCCCC"> job</font><font color="#E5E5E5"> AFL</font><font color="#CCCCCC"> and it didn't take it too</font>

616
00:33:38,640 --> 00:33:44,309
long<font color="#E5E5E5"> to lock down on a vulnerable</font>

617
00:33:40,679 --> 00:33:47,970
function called<font color="#E5E5E5"> parse</font><font color="#CCCCCC"> j SS and j SS</font>

618
00:33:44,309 --> 00:33:50,428
stands for a<font color="#E5E5E5"> Jacob</font><font color="#CCCCCC"> subscript files</font><font color="#E5E5E5"> this</font>

619
00:33:47,970 --> 00:33:52,830
<font color="#E5E5E5">is a very flexible format allowing for</font>

620
00:33:50,429 --> 00:33:54,899
some really<font color="#E5E5E5"> interesting functionality it</font>

621
00:33:52,830 --> 00:33:57,239
relies heavily on directives and

622
00:33:54,899 --> 00:33:59,549
<font color="#CCCCCC">directives is a series of character code</font>

623
00:33:57,239 --> 00:34:01,679
strung together and they determine the

624
00:33:59,549 --> 00:34:04,440
<font color="#CCCCCC">subtitles position and font and color</font>

625
00:34:01,679 --> 00:34:07,589
and so forth<font color="#CCCCCC"> they come in two forms</font>

626
00:34:04,440 --> 00:34:09,839
first<font color="#CCCCCC"> is Vega global directive that will</font>

627
00:34:07,589 --> 00:34:11,940
<font color="#E5E5E5">affect all lines below it in the text</font>

628
00:34:09,839 --> 00:34:13,759
file<font color="#E5E5E5"> and there is the inline directive</font>

629
00:34:11,940 --> 00:34:16,559
affecting only<font color="#CCCCCC"> the current line</font><font color="#E5E5E5"> and</font>

630
00:34:13,760 --> 00:34:19,919
these<font color="#E5E5E5"> are some of the more common</font>

631
00:34:16,559 --> 00:34:22,649
directives<font color="#E5E5E5"> used in</font><font color="#CCCCCC"> jss T which stands</font>

632
00:34:19,918 --> 00:34:25,138
<font color="#E5E5E5">for timer is used to set the time</font>

633
00:34:22,649 --> 00:34:27,839
<font color="#CCCCCC">resolution 100 units a second</font><font color="#E5E5E5"> in this</font>

634
00:34:25,139 --> 00:34:30,480
case s that stands<font color="#E5E5E5"> for shift will cause</font>

635
00:34:27,839 --> 00:34:31,889
all events to occur<font color="#E5E5E5"> to any time units</font>

636
00:34:30,480 --> 00:34:35,099
<font color="#E5E5E5">sooner than</font><font color="#CCCCCC"> usual</font>

637
00:34:31,889 --> 00:34:38,399
<font color="#E5E5E5">F that will send font number</font><font color="#CCCCCC"> 3 you</font><font color="#E5E5E5"> can</font>

638
00:34:35,099 --> 00:34:43,529
actually predefined up to<font color="#E5E5E5"> 10 phones I</font>

639
00:34:38,399 --> 00:34:46,199
think<font color="#CCCCCC"> two phone number</font><font color="#E5E5E5"> 18 and for an</font>

640
00:34:43,529 --> 00:34:49,500
<font color="#E5E5E5">inline directive that this is the</font>

641
00:34:46,199 --> 00:34:51,839
example<font color="#E5E5E5"> it will display</font><font color="#CCCCCC"> the following</font>

642
00:34:49,500 --> 00:34:54,899
<font color="#E5E5E5">text using color palette number</font><font color="#CCCCCC"> two</font>

643
00:34:51,839 --> 00:34:57,328
<font color="#E5E5E5">which can also be user defined so yes</font>

644
00:34:54,899 --> 00:35:01,200
it's really<font color="#E5E5E5"> weird and VLC doesn't do a</font>

645
00:34:57,329 --> 00:35:03,930
<font color="#E5E5E5">great job in parsing those so looking</font><font color="#CCCCCC"> at</font>

646
00:35:01,200 --> 00:35:06,328
the basic<font color="#CCCCCC"> parts Gass function we can see</font>

647
00:35:03,930 --> 00:35:08,700
<font color="#CCCCCC">that VLC again iterates over the lines</font>

648
00:35:06,329 --> 00:35:12,150
with a while<font color="#CCCCCC"> loop again one</font><font color="#E5E5E5"> byte at the</font>

649
00:35:08,700 --> 00:35:15,118
time it purses time<font color="#E5E5E5"> codes and a handful</font>

650
00:35:12,150 --> 00:35:17,730
of supported directives and<font color="#CCCCCC"> the text</font>

651
00:35:15,119 --> 00:35:19,980
itself obviously<font color="#E5E5E5"> and the crash found by</font>

652
00:35:17,730 --> 00:35:22,470
<font color="#CCCCCC">a file was due to an out of bounds read</font>

653
00:35:19,980 --> 00:35:28,559
while trying<font color="#CCCCCC"> to skip some of the</font>

654
00:35:22,470 --> 00:35:31,410
<font color="#E5E5E5">unsupported directives so here and</font>

655
00:35:28,559 --> 00:35:33,480
throughout<font color="#E5E5E5"> PSC text is a pointer to a</font>

656
00:35:31,410 --> 00:35:36,569
null terminated string allocated on the

657
00:35:33,480 --> 00:35:39,930
heap<font color="#E5E5E5"> and the code</font><font color="#CCCCCC"> assume a directive is</font>

658
00:35:36,569 --> 00:35:42,839
always followed<font color="#CCCCCC"> by a space</font><font color="#E5E5E5"> therefore it</font>

659
00:35:39,930 --> 00:35:46,140
with look for this space<font color="#CCCCCC"> to</font><font color="#E5E5E5"> indicate the</font>

660
00:35:42,839 --> 00:35:48,119
<font color="#CCCCCC">end</font><font color="#E5E5E5"> of a directive</font><font color="#CCCCCC"> in case the directive</font>

661
00:35:46,140 --> 00:35:50,129
is written<font color="#CCCCCC"> without any following spaces</font>

662
00:35:48,119 --> 00:35:54,049
this while loop<font color="#E5E5E5"> will skip the null by</font>

663
00:35:50,130 --> 00:35:57,210
<font color="#E5E5E5">terminator over running the buffer and</font>

664
00:35:54,049 --> 00:35:59,490
<font color="#CCCCCC">that</font><font color="#E5E5E5"> was a sign with this</font><font color="#CCCCCC"> CV</font><font color="#E5E5E5"> and this</font>

665
00:35:57,210 --> 00:36:02,130
gutter attention to the<font color="#CCCCCC"> power CSS</font>

666
00:35:59,490 --> 00:36:04,109
function and we soon manually found

667
00:36:02,130 --> 00:36:06,180
another<font color="#CCCCCC"> two out</font><font color="#E5E5E5"> of boundary issues in</font>

668
00:36:04,109 --> 00:36:08,910
parsing of<font color="#E5E5E5"> the directives</font><font color="#CCCCCC"> that actually</font>

669
00:36:06,180 --> 00:36:11,460
were supported<font color="#E5E5E5"> so moving on</font>

670
00:36:08,910 --> 00:36:14,730
<font color="#E5E5E5">the</font><font color="#CCCCCC"> JSS format we stumbled upon the font</font>

671
00:36:11,460 --> 00:36:17,490
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the color directives</font><font color="#E5E5E5"> as you can see</font>

672
00:36:14,730 --> 00:36:19,320
the code includes a double increment to

673
00:36:17,490 --> 00:36:21,779
skip<font color="#E5E5E5"> from the directive right to the</font>

674
00:36:19,320 --> 00:36:24,890
<font color="#CCCCCC">argument</font><font color="#E5E5E5"> but in case a directive didn't</font>

675
00:36:21,780 --> 00:36:27,600
contain any argument to follow it

676
00:36:24,890 --> 00:36:30,540
meaning it ended with a null termination

677
00:36:27,600 --> 00:36:32,880
this double increment<font color="#E5E5E5"> just skip the null</font>

678
00:36:30,540 --> 00:36:36,980
terminator<font color="#CCCCCC"> but let's see how this code</font>

679
00:36:32,880 --> 00:36:36,980
is combined<font color="#CCCCCC"> within</font><font color="#E5E5E5"> the bigger</font><font color="#CCCCCC"> picture</font>

680
00:36:38,180 --> 00:36:43,379
so this is this entire chunk of code is

681
00:36:41,670 --> 00:36:44,840
within<font color="#E5E5E5"> a while loop and here is our</font>

682
00:36:43,380 --> 00:36:47,130
double increment<font color="#CCCCCC"> right there and</font>

683
00:36:44,840 --> 00:36:49,260
<font color="#E5E5E5">skipping the null byte we actually</font>

684
00:36:47,130 --> 00:36:52,680
remain in the while loop<font color="#E5E5E5"> copying from a</font>

685
00:36:49,260 --> 00:36:56,520
PSD text to PSD<font color="#CCCCCC"> text - that's over there</font>

686
00:36:52,680 --> 00:37:00,120
<font color="#E5E5E5">and however PSD text - is only the</font>

687
00:36:56,520 --> 00:37:01,980
length of PSD text plus<font color="#CCCCCC"> one so while we</font>

688
00:37:00,120 --> 00:37:03,750
are<font color="#E5E5E5"> reading out</font><font color="#CCCCCC"> of buffer at one</font><font color="#E5E5E5"> place</font>

689
00:37:01,980 --> 00:37:06,390
we are<font color="#E5E5E5"> also riding out</font><font color="#CCCCCC"> of buffer at</font>

690
00:37:03,750 --> 00:37:09,300
another<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> six vulnerability</font><font color="#E5E5E5"> a</font>

691
00:37:06,390 --> 00:37:12,720
heat based overflow<font color="#E5E5E5"> actually allowed</font><font color="#CCCCCC"> us</font>

692
00:37:09,300 --> 00:37:15,990
to ultimate<font color="#E5E5E5"> to ultimately run arbitrary</font>

693
00:37:12,720 --> 00:37:18,480
<font color="#E5E5E5">code on the machine so at another case</font>

694
00:37:15,990 --> 00:37:20,609
<font color="#CCCCCC">you can see that when</font><font color="#E5E5E5"> the parsing loop</font>

695
00:37:18,480 --> 00:37:24,030
reaches a null<font color="#E5E5E5"> terminator in a specific</font>

696
00:37:20,610 --> 00:37:28,020
<font color="#CCCCCC">case for some reason it intentionally</font>

697
00:37:24,030 --> 00:37:31,290
decides to skip it<font color="#E5E5E5"> making this number</font>

698
00:37:28,020 --> 00:37:34,110
<font color="#E5E5E5">seven vulnerability so let's talk about</font>

699
00:37:31,290 --> 00:37:36,330
<font color="#CCCCCC">exploit</font><font color="#E5E5E5"> ability for a second these bugs</font>

700
00:37:34,110 --> 00:37:38,310
are definitely not trivial<font color="#CCCCCC"> to exploit</font>

701
00:37:36,330 --> 00:37:42,690
however it is<font color="#E5E5E5"> interesting to note that</font>

702
00:37:38,310 --> 00:37:45,600
the main binary of<font color="#CCCCCC"> VLC is not a SLR or</font>

703
00:37:42,690 --> 00:37:48,360
<font color="#CCCCCC">pirate as it's called in</font><font color="#E5E5E5"> Linux and by</font>

704
00:37:45,600 --> 00:37:51,210
design<font color="#E5E5E5"> the main binary is just wiring</font>

705
00:37:48,360 --> 00:37:54,150
liberal<font color="#CCCCCC"> C</font><font color="#E5E5E5"> core and the plugins but it</font>

706
00:37:51,210 --> 00:37:56,220
does offer some quite useful gadgets so

707
00:37:54,150 --> 00:37:59,340
for example this gadget<font color="#E5E5E5"> that will find</font>

708
00:37:56,220 --> 00:38:01,980
<font color="#E5E5E5">the symbol</font><font color="#CCCCCC"> of whatever string is in RSI</font>

709
00:37:59,340 --> 00:38:04,830
<font color="#E5E5E5">and then call</font><font color="#CCCCCC"> it with our beaks</font><font color="#E5E5E5"> as an</font>

710
00:38:01,980 --> 00:38:07,860
argument<font color="#E5E5E5"> which is quite useful right</font>

711
00:38:04,830 --> 00:38:11,910
so for quick PLC<font color="#E5E5E5"> we had one of the team</font>

712
00:38:07,860 --> 00:38:14,250
member<font color="#E5E5E5"> and I to develop an exploit for</font>

713
00:38:11,910 --> 00:38:17,359
this vulnerability<font color="#E5E5E5"> for the moment</font>

714
00:38:14,250 --> 00:38:17,360
ignoring a SLR

715
00:38:33,089 --> 00:38:39,929
and we get a<font color="#CCCCCC"> cool so let's sum up</font>

716
00:38:37,259 --> 00:38:42,509
this research we<font color="#CCCCCC"> discuss the complete</font>

717
00:38:39,929 --> 00:38:46,369
madness<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> subject</font><font color="#CCCCCC"> landscape we</font>

718
00:38:42,509 --> 00:38:49,380
saw we had over<font color="#E5E5E5"> 25 subtitle formats</font>

719
00:38:46,369 --> 00:38:51,209
none of them well documented<font color="#CCCCCC"> without any</font>

720
00:38:49,380 --> 00:38:54,329
dedicated<font color="#E5E5E5"> library and zero</font>

721
00:38:51,209 --> 00:38:56,399
<font color="#E5E5E5">standardization between players we were</font>

722
00:38:54,329 --> 00:38:58,829
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> gain a full remote code</font>

723
00:38:56,400 --> 00:39:01,109
execution<font color="#E5E5E5"> on four major platforms now</font>

724
00:38:58,829 --> 00:39:04,349
<font color="#E5E5E5">please note that these were the</font><font color="#CCCCCC"> only</font>

725
00:39:01,109 --> 00:39:06,328
platforms that we<font color="#CCCCCC"> researched</font><font color="#E5E5E5"> so this</font>

726
00:39:04,349 --> 00:39:09,029
means that<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> other platforms out</font>

727
00:39:06,329 --> 00:39:11,999
<font color="#CCCCCC">there probably vulnerable to subtitle</font>

728
00:39:09,029 --> 00:39:14,130
<font color="#CCCCCC">driveway attacks</font><font color="#E5E5E5"> we're also able to</font>

729
00:39:11,999 --> 00:39:16,979
<font color="#E5E5E5">manipulate the subtitle repos a</font>

730
00:39:14,130 --> 00:39:19,249
repository<font color="#E5E5E5"> ranking scheme thus taking</font>

731
00:39:16,979 --> 00:39:22,739
control<font color="#E5E5E5"> completely over the entire</font>

732
00:39:19,249 --> 00:39:25,799
<font color="#E5E5E5">subtitle supply chain and this means</font>

733
00:39:22,739 --> 00:39:28,229
<font color="#E5E5E5">that what we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> presented is a brand</font>

734
00:39:25,799 --> 00:39:30,989
new malware delivery system completely

735
00:39:28,229 --> 00:39:32,779
transparent<font color="#E5E5E5"> to the user requiring no</font>

736
00:39:30,989 --> 00:39:36,390
user interaction which in our case

737
00:39:32,779 --> 00:39:40,140
included over<font color="#E5E5E5"> 220 million potential</font>

738
00:39:36,390 --> 00:39:42,839
victims now the notion<font color="#CCCCCC"> of</font><font color="#E5E5E5"> attackers</font>

739
00:39:40,140 --> 00:39:45,629
being able to<font color="#E5E5E5"> upload malicious subtitles</font>

740
00:39:42,839 --> 00:39:46,979
to a major repository and forcing the

741
00:39:45,630 --> 00:39:49,499
different players to download them

742
00:39:46,979 --> 00:39:51,989
<font color="#E5E5E5">should now be taking into account as a</font>

743
00:39:49,499 --> 00:39:54,359
new valid attack vector and prepare the

744
00:39:51,989 --> 00:39:58,499
security vendors and<font color="#CCCCCC"> Industry</font><font color="#E5E5E5"> to</font>

745
00:39:54,359 --> 00:40:01,499
<font color="#E5E5E5">mitigate</font><font color="#CCCCCC"> it and now</font><font color="#E5E5E5"> Omri and myself made</font>

746
00:39:58,499 --> 00:40:03,509
<font color="#E5E5E5">a little bonus</font><font color="#CCCCCC"> for you</font><font color="#E5E5E5"> our audience we</font>

747
00:40:01,499 --> 00:40:07,698
<font color="#E5E5E5">curated our favorite color popping</font>

748
00:40:03,509 --> 00:40:07,699
<font color="#E5E5E5">scenes into a beautiful compilation</font>

749
00:40:07,729 --> 00:40:12,779
actually on<font color="#CCCCCC"> on the first</font><font color="#E5E5E5"> draft of this</font>

750
00:40:10,439 --> 00:40:15,689
<font color="#CCCCCC">stock</font><font color="#E5E5E5"> this bonus was titled</font><font color="#CCCCCC"> two girls</font>

751
00:40:12,779 --> 00:40:18,239
<font color="#CCCCCC">one calc</font><font color="#E5E5E5"> but that almost got us fired so</font>

752
00:40:15,689 --> 00:40:21,049
we had to tone it<font color="#E5E5E5"> down a little bit</font><font color="#CCCCCC"> here</font>

753
00:40:18,239 --> 00:40:21,049
it<font color="#CCCCCC"> is enjoy</font>

754
00:40:28,560 --> 00:40:39,400
people<font color="#E5E5E5"> sometimes make mistakes</font><font color="#CCCCCC"> yes they</font>

755
00:40:34,990 --> 00:40:40,779
do tonight<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> a real voice this</font>

756
00:40:39,400 --> 00:40:42,280
box<font color="#E5E5E5"> just interpret signals from the</font>

757
00:40:40,780 --> 00:40:54,310
computer and<font color="#E5E5E5"> turns them into sound</font>

758
00:40:42,280 --> 00:40:55,680
shall we<font color="#E5E5E5"> play</font><font color="#CCCCCC"> then yeah what is</font><font color="#E5E5E5"> it so</font>

759
00:40:54,310 --> 00:40:58,739
<font color="#E5E5E5">what</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> guess</font>

760
00:40:55,680 --> 00:40:58,739
[Music]

761
00:41:00,700 --> 00:41:04,569
<font color="#CCCCCC">by being</font><font color="#E5E5E5"> that woody</font>

762
00:41:29,030 --> 00:41:34,170
and that's just<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sample of the exciting</font>

763
00:41:31,680 --> 00:41:38,160
exploits ahead in<font color="#E5E5E5"> our first feature</font>

764
00:41:34,170 --> 00:41:39,510
motion picture<font color="#CCCCCC"> holy memoranda folks</font><font color="#E5E5E5"> make</font>

765
00:41:38,160 --> 00:41:50,990
a note not<font color="#E5E5E5"> to</font><font color="#CCCCCC"> miss</font><font color="#E5E5E5"> it</font>

766
00:41:39,510 --> 00:41:50,990
good<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> Robin thank you</font>

767
00:41:51,700 --> 00:41:55,379
[Music]

768
00:41:52,370 --> 00:41:58,439
[Applause]

769
00:41:55,380 --> 00:41:58,439
[Music]

770
00:41:59,430 --> 00:42:05,140
I'm evil<font color="#CCCCCC"> y'all</font><font color="#E5E5E5"> did</font><font color="#CCCCCC"> tikka taco each I</font>

771
00:42:02,410 --> 00:42:05,859
<font color="#CCCCCC">would</font><font color="#E5E5E5"> be there she's all they</font><font color="#CCCCCC"> owe</font><font color="#E5E5E5"> you a</font>

772
00:42:05,140 --> 00:42:09,460
job

773
00:42:05,860 --> 00:42:12,670
hi hi this is a wonderful research<font color="#E5E5E5"> and</font>

774
00:42:09,460 --> 00:42:16,480
it's<font color="#E5E5E5"> shocking and crazy and thank you</font>

775
00:42:12,670 --> 00:42:19,150
yes<font color="#E5E5E5"> so I want to ask one really</font>

776
00:42:16,480 --> 00:42:21,460
important<font color="#E5E5E5"> question</font><font color="#CCCCCC"> did how did the</font>

777
00:42:19,150 --> 00:42:23,740
<font color="#E5E5E5">Bender's</font><font color="#CCCCCC"> pass those things you know</font><font color="#E5E5E5"> you</font>

778
00:42:21,460 --> 00:42:25,810
<font color="#CCCCCC">know cross-site scripting has existed</font>

779
00:42:23,740 --> 00:42:29,680
for a long<font color="#E5E5E5"> time lots of you know</font>

780
00:42:25,810 --> 00:42:32,380
<font color="#E5E5E5">bypassing and things like that</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> did</font>

781
00:42:29,680 --> 00:42:36,370
they<font color="#E5E5E5"> fix it and do you guys think it's</font>

782
00:42:32,380 --> 00:42:38,890
safe to<font color="#CCCCCC"> do the patches Thanks</font>

783
00:42:36,370 --> 00:42:40,240
<font color="#E5E5E5">okay so obviously each</font><font color="#CCCCCC"> platform had</font>

784
00:42:38,890 --> 00:42:43,000
different vulnerabilities

785
00:42:40,240 --> 00:42:46,149
<font color="#CCCCCC">sumit XSS I mean logical bugs I mean</font>

786
00:42:43,000 --> 00:42:48,780
<font color="#E5E5E5">memory corruptions and we contacted all</font>

787
00:42:46,150 --> 00:42:51,640
<font color="#E5E5E5">the vendors according to the 90 days</font>

788
00:42:48,780 --> 00:42:54,490
industry standard of responsible

789
00:42:51,640 --> 00:42:56,500
disclosure<font color="#CCCCCC"> some were more responsive</font>

790
00:42:54,490 --> 00:42:59,770
than<font color="#E5E5E5"> others but at the</font><font color="#CCCCCC"> end everyone</font>

791
00:42:56,500 --> 00:43:04,120
patched their software<font color="#CCCCCC"> so these bugs are</font>

792
00:42:59,770 --> 00:43:07,210
solved<font color="#E5E5E5"> are they safely solve those</font>

793
00:43:04,120 --> 00:43:14,410
specific bugs are<font color="#CCCCCC"> yeah but could be</font>

794
00:43:07,210 --> 00:43:17,890
others the<font color="#E5E5E5"> WebKit based players</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are</font>

795
00:43:14,410 --> 00:43:20,529
still vulnerable<font color="#CCCCCC"> if you can get any</font>

796
00:43:17,890 --> 00:43:24,490
JavaScript<font color="#CCCCCC"> running</font><font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> no there are</font>

797
00:43:20,530 --> 00:43:27,250
actually mitigations built into the web

798
00:43:24,490 --> 00:43:32,109
kits they were not activated<font color="#E5E5E5"> at some</font>

799
00:43:27,250 --> 00:43:34,540
cases and there are some sort of

800
00:43:32,110 --> 00:43:38,230
mitigations but currently these bugs

801
00:43:34,540 --> 00:43:46,660
aren't supposed to<font color="#E5E5E5"> work anymore okay I</font>

802
00:43:38,230 --> 00:43:48,520
<font color="#E5E5E5">think hope so okay thanks</font><font color="#CCCCCC"> okay yeah your</font>

803
00:43:46,660 --> 00:43:49,560
toes<font color="#E5E5E5"> are a young</font><font color="#CCCCCC"> VCO players on your</font>

804
00:43:48,520 --> 00:43:52,240
<font color="#E5E5E5">laptop</font>

805
00:43:49,560 --> 00:43:58,390
<font color="#CCCCCC">obviousiy</font><font color="#E5E5E5"> voz how many people using the</font>

806
00:43:52,240 --> 00:44:02,439
VLC<font color="#CCCCCC"> I'm that tough</font><font color="#E5E5E5"> oh you can so it's</font>

807
00:43:58,390 --> 00:44:04,170
powerful<font color="#CCCCCC"> I want to be alright danger are</font>

808
00:44:02,440 --> 00:44:08,860
<font color="#E5E5E5">you still using it</font>

809
00:44:04,170 --> 00:44:10,990
are you<font color="#CCCCCC"> what</font><font color="#E5E5E5"> stop to stop watching</font>

810
00:44:08,860 --> 00:44:14,520
<font color="#E5E5E5">movies</font>

811
00:44:10,990 --> 00:44:16,540
<font color="#CCCCCC">Oh how much do I pay over</font><font color="#E5E5E5"> won't either</font>

812
00:44:14,520 --> 00:44:23,200
<font color="#E5E5E5">what's up man Peter I kind of pins at</font>

813
00:44:16,540 --> 00:44:30,339
the base of<font color="#CCCCCC"> it says moolah</font><font color="#E5E5E5"> LOD</font><font color="#CCCCCC"> VR has</font>

814
00:44:23,200 --> 00:44:32,830
your<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are like four</font><font color="#CCCCCC"> vendors</font>

815
00:44:30,339 --> 00:44:36,150
you you you know<font color="#E5E5E5"> investigated which</font>

816
00:44:32,830 --> 00:44:40,029
which one of them do<font color="#E5E5E5"> you</font><font color="#CCCCCC"> think is the</font>

817
00:44:36,150 --> 00:44:42,970
has the most sense of security<font color="#E5E5E5"> written</font>

818
00:44:40,030 --> 00:44:48,190
in their code<font color="#E5E5E5"> so you would recommend</font><font color="#CCCCCC"> us</font>

819
00:44:42,970 --> 00:44:51,040
on a safety<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> I don't know about the</font>

820
00:44:48,190 --> 00:44:53,710
most safe code<font color="#E5E5E5"> but definitely</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> see</font>

821
00:44:51,040 --> 00:44:56,830
I<font color="#CCCCCC"> think responded to us within very few</font>

822
00:44:53,710 --> 00:45:00,310
minutes<font color="#CCCCCC"> and they're</font><font color="#E5E5E5"> really active and</font>

823
00:44:56,830 --> 00:45:02,770
involved<font color="#E5E5E5"> in us checking their patches</font>

824
00:45:00,310 --> 00:45:05,320
<font color="#E5E5E5">and wondering whatever it's secure and I</font>

825
00:45:02,770 --> 00:45:08,080
do know<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> VLC version version</font>

826
00:45:05,320 --> 00:45:10,450
<font color="#CCCCCC">three</font><font color="#E5E5E5"> is currently being developed I</font>

827
00:45:08,080 --> 00:45:14,560
don't think it's still like the main

828
00:45:10,450 --> 00:45:15,970
version<font color="#E5E5E5"> right now but they took the time</font>

829
00:45:14,560 --> 00:45:23,440
to make<font color="#CCCCCC"> sure that these vulnerabilities</font>

830
00:45:15,970 --> 00:45:26,098
are not in the following version<font color="#CCCCCC"> oh you</font>

831
00:45:23,440 --> 00:45:26,099
go<font color="#E5E5E5"> to a hurry</font>

832
00:45:26,130 --> 00:45:29,410
hello thank<font color="#CCCCCC"> you</font><font color="#E5E5E5"> for your wonderful</font>

833
00:45:28,330 --> 00:45:30,970
presentation

834
00:45:29,410 --> 00:45:33,490
I was wondering because<font color="#E5E5E5"> there are a lot</font>

835
00:45:30,970 --> 00:45:35,680
<font color="#CCCCCC">of online</font><font color="#E5E5E5"> streaming services so you can</font>

836
00:45:33,490 --> 00:45:37,419
like watch movies<font color="#CCCCCC"> in your browser kind</font>

837
00:45:35,680 --> 00:45:40,779
of like YouTube<font color="#E5E5E5"> and some of those</font>

838
00:45:37,420 --> 00:45:42,430
<font color="#E5E5E5">services also load subtitles so did you</font>

839
00:45:40,780 --> 00:45:46,390
guys look into<font color="#E5E5E5"> whether those services</font>

840
00:45:42,430 --> 00:45:49,089
have bilities thank you no<font color="#E5E5E5"> actually we</font>

841
00:45:46,390 --> 00:45:50,680
<font color="#E5E5E5">haven't and since it's running within</font>

842
00:45:49,089 --> 00:45:52,630
your browser I assume it doesn't<font color="#E5E5E5"> have</font>

843
00:45:50,680 --> 00:45:55,690
any<font color="#E5E5E5"> server-side capabilities like</font><font color="#CCCCCC"> we've</font>

844
00:45:52,630 --> 00:45:58,000
seen<font color="#CCCCCC"> in the nodejs</font><font color="#E5E5E5"> so your chrome can</font>

845
00:45:55,690 --> 00:46:01,810
just easily<font color="#E5E5E5"> pop a</font><font color="#CCCCCC"> calque</font><font color="#E5E5E5"> well it's not</font>

846
00:45:58,000 --> 00:46:03,369
that<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> and but no we didn't look</font><font color="#E5E5E5"> at</font>

847
00:46:01,810 --> 00:46:05,080
these are<font color="#E5E5E5"> the only platforms that we</font>

848
00:46:03,369 --> 00:46:09,119
<font color="#E5E5E5">research but we encourage you to have</font><font color="#CCCCCC"> a</font>

849
00:46:05,080 --> 00:46:09,119
look<font color="#E5E5E5"> it's an interesting from a field</font>

850
00:46:11,960 --> 00:46:21,230
how<font color="#E5E5E5"> now woman this is objective 9:30 so</font>

851
00:46:17,339 --> 00:46:21,230
<font color="#E5E5E5">you can look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> my Google</font>

852
00:46:23,970 --> 00:46:31,899
yeah I wonder<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> that there are so many</font>

853
00:46:28,299 --> 00:46:37,829
<font color="#E5E5E5">extensions of</font><font color="#CCCCCC"> formats outside yeah and</font>

854
00:46:31,900 --> 00:46:37,829
which one is the one you recommend

855
00:46:37,920 --> 00:46:48,880
because everything<font color="#E5E5E5"> seems</font><font color="#CCCCCC"> to well usually</font>

856
00:46:46,089 --> 00:46:53,099
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> not at your choice you just</font>

857
00:46:48,880 --> 00:46:54,279
<font color="#E5E5E5">download these subtitles offered for you</font>

858
00:46:53,099 --> 00:46:56,319
<font color="#E5E5E5">yeah</font>

859
00:46:54,279 --> 00:46:58,660
as we showed sometimes<font color="#CCCCCC"> these subtitles</font>

860
00:46:56,319 --> 00:47:00,369
<font color="#E5E5E5">are being</font><font color="#CCCCCC"> downloaded</font><font color="#E5E5E5"> automatically so</font>

861
00:46:58,660 --> 00:47:04,180
you don't<font color="#CCCCCC"> even</font><font color="#E5E5E5"> have the the options you</font>

862
00:47:00,369 --> 00:47:08,739
teach<font color="#CCCCCC"> sure to choose um I don't think</font>

863
00:47:04,180 --> 00:47:11,578
<font color="#CCCCCC">there there's</font><font color="#E5E5E5"> better</font><font color="#CCCCCC"> subtitle formats</font>

864
00:47:08,739 --> 00:47:15,279
than others I mean some do provide

865
00:47:11,579 --> 00:47:17,259
interesting capabilities<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's it it</font>

866
00:47:15,279 --> 00:47:20,519
all<font color="#CCCCCC"> comes down to how the the code</font>

867
00:47:17,259 --> 00:47:23,710
parses the subtitles and if it has any

868
00:47:20,519 --> 00:47:41,788
vulnerabilities at the the parsing

869
00:47:23,710 --> 00:47:44,499
process probably<font color="#E5E5E5"> would be safer although</font>

870
00:47:41,789 --> 00:47:48,249
you might not<font color="#CCCCCC"> want to do that</font><font color="#E5E5E5"> because</font>

871
00:47:44,499 --> 00:47:51,569
SRT does support basic HTML sometimes

872
00:47:48,249 --> 00:47:54,640
you do<font color="#E5E5E5"> want bold or italic and</font>

873
00:47:51,569 --> 00:47:56,049
vulnerabilities<font color="#CCCCCC"> I know it's it's like</font>

874
00:47:54,640 --> 00:47:58,960
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> big discussion of how the</font>

875
00:47:56,049 --> 00:48:01,029
invulnerability<font color="#E5E5E5"> can be triggered but</font>

876
00:47:58,960 --> 00:48:04,299
<font color="#E5E5E5">usually that would</font><font color="#CCCCCC"> be like the</font><font color="#E5E5E5"> first</font>

877
00:48:01,029 --> 00:48:13,229
step<font color="#CCCCCC"> that might get you out of</font><font color="#E5E5E5"> most</font>

878
00:48:04,299 --> 00:48:16,259
<font color="#E5E5E5">dangerous for the values I wonder does</font>

879
00:48:13,229 --> 00:48:19,390
<font color="#CCCCCC">there's open subtitles provide better</font>

880
00:48:16,259 --> 00:48:23,190
review mechanism if there's some

881
00:48:19,390 --> 00:48:25,808
malicious user to<font color="#CCCCCC"> upload the Evo</font>

882
00:48:23,190 --> 00:48:28,589
subtitles<font color="#CCCCCC"> to their on their website</font>

883
00:48:25,809 --> 00:48:28,589
<font color="#E5E5E5">thank you</font>

884
00:48:30,180 --> 00:48:35,710
actually open subtitle doesn't have any

885
00:48:33,250 --> 00:48:39,700
vulnerabilities per<font color="#E5E5E5"> se within their</font>

886
00:48:35,710 --> 00:48:42,250
mechanism but actually once<font color="#E5E5E5"> we contact</font>

887
00:48:39,700 --> 00:48:43,808
<font color="#E5E5E5">them and told them about it</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> asked</font>

888
00:48:42,250 --> 00:48:46,660
us if we would like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> advertise</font>

889
00:48:43,809 --> 00:48:49,510
<font color="#E5E5E5">something like some put some like a</font>

890
00:48:46,660 --> 00:48:51,038
textual message<font color="#E5E5E5"> within the subtitle and</font>

891
00:48:49,510 --> 00:48:53,650
we thought<font color="#E5E5E5"> it's pretty funny because we</font>

892
00:48:51,039 --> 00:48:56,980
can just<font color="#CCCCCC"> put our exploit into into all</font>

893
00:48:53,650 --> 00:48:59,770
the<font color="#CCCCCC"> subtitles but no I'm not aware of</font>

894
00:48:56,980 --> 00:49:01,930
any change that<font color="#E5E5E5"> they did and I'm</font><font color="#CCCCCC"> not</font>

895
00:48:59,770 --> 00:49:03,430
really sure<font color="#CCCCCC"> if they should because it's</font>

896
00:49:01,930 --> 00:49:07,049
not a vulnerability<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know just like a</font>

897
00:49:03,430 --> 00:49:07,049
banking mechanism it's a ranking scheme

898
00:49:11,010 --> 00:49:27,309
<font color="#CCCCCC">open this Hong Kong</font><font color="#E5E5E5"> since I know you if</font>

899
00:49:21,670 --> 00:49:34,329
we convert<font color="#CCCCCC"> ot subtitle SRT or a subtitle</font>

900
00:49:27,309 --> 00:49:39,789
file into the webvtt format is a good

901
00:49:34,329 --> 00:49:43,089
way to of all<font color="#CCCCCC"> oh okay well obviously</font>

902
00:49:39,789 --> 00:49:45,609
less complex formats are prone to less

903
00:49:43,089 --> 00:49:51,038
vulnerabilities right and webvtt is

904
00:49:45,609 --> 00:49:53,799
simpler<font color="#CCCCCC"> than a SS or SSA but again I can</font>

905
00:49:51,039 --> 00:49:55,510
tell you like the<font color="#E5E5E5"> problem they can be</font>

906
00:49:53,799 --> 00:49:57,460
vulnerabilities within the parsing<font color="#E5E5E5"> of</font>

907
00:49:55,510 --> 00:50:00,220
that timing<font color="#CCCCCC"> Convention which is</font><font color="#E5E5E5"> no</font>

908
00:49:57,460 --> 00:50:02,529
control over you know it's just time<font color="#E5E5E5"> but</font>

909
00:50:00,220 --> 00:50:03,788
these are the<font color="#E5E5E5"> vulnerabilities that we</font>

910
00:50:02,529 --> 00:50:05,559
take a look<font color="#E5E5E5"> and you know this entire</font>

911
00:50:03,789 --> 00:50:08,440
research was just<font color="#CCCCCC"> like a concept to</font>

912
00:50:05,559 --> 00:50:11,109
present how subtitles can be<font color="#E5E5E5"> dangerous</font>

913
00:50:08,440 --> 00:50:14,520
<font color="#E5E5E5">so I'm not saying</font><font color="#CCCCCC"> that these are</font><font color="#E5E5E5"> the</font>

914
00:50:11,109 --> 00:50:14,520
<font color="#CCCCCC">only vulnerabilities that do exist</font>

915
00:50:20,549 --> 00:50:26,079
<font color="#CCCCCC">pyramid or anew or push them</font><font color="#E5E5E5"> down at the</font>

916
00:50:23,200 --> 00:50:28,328
<font color="#E5E5E5">gym now</font><font color="#CCCCCC"> this I'm talking</font><font color="#E5E5E5"> parenting's</font>

917
00:50:26,079 --> 00:50:29,289
<font color="#E5E5E5">help and sorry token you can't do it the</font>

918
00:50:28,329 --> 00:50:33,010
<font color="#E5E5E5">most she needs</font>

919
00:50:29,289 --> 00:50:36,430
cbet tuition<font color="#CCCCCC"> go talk to</font><font color="#E5E5E5"> her</font><font color="#CCCCCC"> wait on come</font>

920
00:50:33,010 --> 00:50:39,249
on<font color="#E5E5E5"> okay Lawrence now you're not campaign</font>

921
00:50:36,430 --> 00:50:40,310
I don't<font color="#CCCCCC"> personally dozen system recovery</font>

922
00:50:39,249 --> 00:50:47,069
this<font color="#E5E5E5"> year</font><font color="#CCCCCC"> thank you</font>

923
00:50:40,310 --> 00:50:47,070
[Applause]

