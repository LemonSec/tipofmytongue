1
00:00:06,060 --> 00:00:13,200
a Kuwait Saddam some<font color="#E5E5E5"> paneer</font><font color="#CCCCCC"> my sushi</font>

2
00:00:11,550 --> 00:00:17,880
<font color="#CCCCCC">nigga honey and tonic on his ginger</font>

3
00:00:13,200 --> 00:00:21,539
<font color="#E5E5E5">don't wanna cry</font><font color="#CCCCCC"> shanku na da gachi see</font>

4
00:00:17,880 --> 00:00:24,960
<font color="#CCCCCC">adults dolls iguana Christ</font><font color="#E5E5E5"> Popo msting</font>

5
00:00:21,539 --> 00:00:28,170
<font color="#CCCCCC">ee</font><font color="#E5E5E5"> to the same SM beat up</font><font color="#CCCCCC"> his</font><font color="#E5E5E5"> pro window</font>

6
00:00:24,960 --> 00:00:30,690
so it's probably nah not took a second

7
00:00:28,170 --> 00:00:32,610
<font color="#CCCCCC">we knows he's probably has its</font><font color="#E5E5E5"> home may</font>

8
00:00:30,690 --> 00:00:35,969
<font color="#E5E5E5">call</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they say</font><font color="#CCCCCC"> bills right at you</font>

9
00:00:32,610 --> 00:00:39,030
<font color="#E5E5E5">cool just</font><font color="#CCCCCC"> tongue treating hi Susie</font><font color="#E5E5E5"> and</font>

10
00:00:35,969 --> 00:00:40,530
just make all cheesy<font color="#E5E5E5"> just your vacation</font>

11
00:00:39,030 --> 00:00:43,769
<font color="#E5E5E5">time wait I think I see</font><font color="#CCCCCC"> and fast</font>

12
00:00:40,530 --> 00:00:45,120
<font color="#E5E5E5">watching ho chasity</font><font color="#CCCCCC"> chi-su waiting for</font>

13
00:00:43,769 --> 00:00:48,659
why she it's all set

14
00:00:45,120 --> 00:00:51,449
<font color="#CCCCCC">maintain so height and me no more she's</font>

15
00:00:48,659 --> 00:00:53,998
one<font color="#CCCCCC"> pony colors</font><font color="#E5E5E5"> hard history</font><font color="#CCCCCC"> take a</font>

16
00:00:51,449 --> 00:00:54,568
<font color="#E5E5E5">Tracy</font><font color="#CCCCCC"> Sgt as long as it touches his</font>

17
00:00:53,999 --> 00:00:56,940
opponent John

18
00:00:54,569 --> 00:00:58,409
<font color="#CCCCCC">that's another GTA the proven</font><font color="#E5E5E5"> chance to</font>

19
00:00:56,940 --> 00:01:00,030
need some more children took<font color="#E5E5E5"> a lot on</font>

20
00:00:58,409 --> 00:01:04,309
the cheese<font color="#CCCCCC"> was eating it hot or tight</font>

21
00:01:00,030 --> 00:01:06,630
<font color="#CCCCCC">say</font><font color="#E5E5E5"> anemia te da na kuru boyish in</font>

22
00:01:04,309 --> 00:01:14,420
<font color="#CCCCCC">geosciences fed onto</font><font color="#E5E5E5"> the team huh</font>

23
00:01:06,630 --> 00:01:17,009
<font color="#E5E5E5">no no johnson curry</font><font color="#CCCCCC"> Nicholas hello</font>

24
00:01:14,420 --> 00:01:20,810
thank you I have no idea of what you

25
00:01:17,009 --> 00:01:20,810
said but that's probably<font color="#E5E5E5"> good</font>

26
00:01:20,930 --> 00:01:27,149
<font color="#E5E5E5">why thank you guys I'm quite delighted</font>

27
00:01:24,659 --> 00:01:29,420
actually to be asked<font color="#E5E5E5"> to be standing here</font>

28
00:01:27,149 --> 00:01:33,180
before<font color="#E5E5E5"> you</font>

29
00:01:29,420 --> 00:01:35,579
<font color="#CCCCCC">so yeah I've I've heard when I cry I</font>

30
00:01:33,180 --> 00:01:38,430
<font color="#CCCCCC">think so yeah I didn't actually</font>

31
00:01:35,579 --> 00:01:44,309
understand<font color="#CCCCCC"> that so he's right I'm going</font>

32
00:01:38,430 --> 00:01:46,649
<font color="#E5E5E5">to talk about SMB today</font><font color="#CCCCCC"> but yeah guys</font>

33
00:01:44,310 --> 00:01:50,210
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> be mistaken</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> dropping any</font>

34
00:01:46,649 --> 00:01:56,189
<font color="#CCCCCC">surveys here I don't want to be</font><font color="#E5E5E5"> fired</font>

35
00:01:50,210 --> 00:01:58,770
<font color="#CCCCCC">alright let's start that I can't believe</font>

36
00:01:56,189 --> 00:02:03,600
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> doing this presentation on a</font>

37
00:01:58,770 --> 00:02:06,270
<font color="#CCCCCC">Macbook</font><font color="#E5E5E5"> that's a shooter oven so let me</font>

38
00:02:03,600 --> 00:02:09,600
take some<font color="#E5E5E5"> time so to introduce myself so</font>

39
00:02:06,270 --> 00:02:11,640
<font color="#E5E5E5">Who am I where am i gradually I used to</font>

40
00:02:09,600 --> 00:02:14,879
be an exploiter

41
00:02:11,640 --> 00:02:17,019
so I know<font color="#E5E5E5"> work at Microsoft</font><font color="#CCCCCC"> but before</font>

42
00:02:14,879 --> 00:02:20,590
that I<font color="#E5E5E5"> used to work for</font>

43
00:02:17,020 --> 00:02:23,380
company<font color="#CCCCCC"> might know guys</font><font color="#E5E5E5"> it's called view</font>

44
00:02:20,590 --> 00:02:26,140
<font color="#CCCCCC">pen it was called view pen</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> were</font>

45
00:02:23,380 --> 00:02:29,680
doing exploits<font color="#E5E5E5"> we were doing some</font>

46
00:02:26,140 --> 00:02:34,779
vulnerability research<font color="#E5E5E5"> doing some zero</font>

47
00:02:29,680 --> 00:02:37,120
deism<font color="#CCCCCC"> and I do</font><font color="#E5E5E5"> remember one day</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font>

48
00:02:34,780 --> 00:02:39,880
in<font color="#CCCCCC"> Kansai quest</font><font color="#E5E5E5"> so before I joined</font>

49
00:02:37,120 --> 00:02:43,390
Microsoft and I was standing<font color="#CCCCCC"> I was</font>

50
00:02:39,880 --> 00:02:46,180
sitting at<font color="#CCCCCC"> a</font><font color="#E5E5E5"> table</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> he was from</font>

51
00:02:43,390 --> 00:02:48,760
Microsoft right in front of<font color="#E5E5E5"> me and he</font>

52
00:02:46,180 --> 00:02:51,910
told<font color="#E5E5E5"> me</font><font color="#CCCCCC"> Niko</font><font color="#E5E5E5"> we've never met you don't</font>

53
00:02:48,760 --> 00:02:55,840
know me but I know<font color="#E5E5E5"> your work really</font>

54
00:02:51,910 --> 00:02:58,120
really well<font color="#CCCCCC"> I was like</font><font color="#E5E5E5"> all right I don't</font>

55
00:02:55,840 --> 00:02:59,140
<font color="#E5E5E5">know I'm not very</font><font color="#CCCCCC"> sure about</font><font color="#E5E5E5"> what you're</font>

56
00:02:58,120 --> 00:03:03,310
talking<font color="#CCCCCC"> about</font>

57
00:02:59,140 --> 00:03:06,250
but you<font color="#E5E5E5"> know so no so yeah I'm now</font>

58
00:03:03,310 --> 00:03:10,420
working<font color="#E5E5E5"> for Microsoft so we nsrc to</font>

59
00:03:06,250 --> 00:03:14,220
Microsoft Security Response Team<font color="#CCCCCC"> so what</font>

60
00:03:10,420 --> 00:03:17,440
are<font color="#CCCCCC"> we doing there well we serve crisis</font>

61
00:03:14,220 --> 00:03:22,170
well it's not only<font color="#E5E5E5"> about solving crisis</font>

62
00:03:17,440 --> 00:03:24,970
but crisis happens from<font color="#E5E5E5"> time to time and</font>

63
00:03:22,170 --> 00:03:28,890
with the kind of stuff that I'm going<font color="#CCCCCC"> to</font>

64
00:03:24,970 --> 00:03:31,630
<font color="#E5E5E5">talk about no but yeah we are more like</font>

65
00:03:28,890 --> 00:03:34,269
focusing or actually in my team<font color="#E5E5E5"> on</font>

66
00:03:31,630 --> 00:03:39,430
anything that<font color="#CCCCCC"> has to do with</font><font color="#E5E5E5"> exploit</font><font color="#CCCCCC"> our</font>

67
00:03:34,270 --> 00:03:42,190
<font color="#E5E5E5">abilities right medications just</font><font color="#CCCCCC"> to make</font>

68
00:03:39,430 --> 00:03:45,970
<font color="#CCCCCC">it</font><font color="#E5E5E5"> hard for you</font><font color="#CCCCCC"> guys so that</font><font color="#E5E5E5"> your next</font>

69
00:03:42,190 --> 00:03:50,910
<font color="#E5E5E5">exploit will take probably</font><font color="#CCCCCC"> forever you</font>

70
00:03:45,970 --> 00:03:55,720
see I'm quite confident about that so

71
00:03:50,910 --> 00:03:59,440
<font color="#E5E5E5">I'd like to start this story again from</font>

72
00:03:55,720 --> 00:04:02,770
Twitter<font color="#E5E5E5"> as always so I do remember that</font>

73
00:03:59,440 --> 00:04:08,579
day there was<font color="#CCCCCC"> a Friday in April I was</font>

74
00:04:02,770 --> 00:04:10,750
again in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> ring in Asia South Korea and</font>

75
00:04:08,580 --> 00:04:13,780
so for that conference

76
00:04:10,750 --> 00:04:16,418
his name is<font color="#E5E5E5"> zero Khan so it's about zero</font>

77
00:04:13,780 --> 00:04:18,100
days of course<font color="#E5E5E5"> and so that was all</font>

78
00:04:16,418 --> 00:04:20,798
Friday night we were going to a

79
00:04:18,100 --> 00:04:24,730
<font color="#E5E5E5">restaurant and I quickly checked Twitter</font>

80
00:04:20,798 --> 00:04:26,570
and you<font color="#E5E5E5"> know on my feet were like stuff</font>

81
00:04:24,730 --> 00:04:30,140
about

82
00:04:26,570 --> 00:04:32,540
<font color="#CCCCCC">this guy's</font><font color="#E5E5E5"> shadow brokers so just just a</font>

83
00:04:30,140 --> 00:04:35,960
quick question guys home in your view

84
00:04:32,540 --> 00:04:40,640
<font color="#E5E5E5">I've heard about when I cry or</font><font color="#CCCCCC"> shadow</font>

85
00:04:35,960 --> 00:04:45,530
brokers<font color="#E5E5E5"> any anybody</font><font color="#CCCCCC"> alright</font>

86
00:04:40,640 --> 00:04:48,770
many people so checking my Twitter feeds

87
00:04:45,530 --> 00:04:51,500
<font color="#E5E5E5">so apparently I was a release of like</font>

88
00:04:48,770 --> 00:04:54,680
several exploit<font color="#E5E5E5"> just to drop to a public</font>

89
00:04:51,500 --> 00:04:57,620
so I didn't have<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> with me</font>

90
00:04:54,680 --> 00:05:00,770
so quite hard<font color="#CCCCCC"> to just assess if it's</font>

91
00:04:57,620 --> 00:05:03,710
true if it's false on<font color="#E5E5E5"> I was like okay so</font>

92
00:05:00,770 --> 00:05:06,770
that's probably synonym<font color="#E5E5E5"> of crisis coming</font>

93
00:05:03,710 --> 00:05:09,409
<font color="#E5E5E5">up from</font><font color="#CCCCCC"> um SRC</font><font color="#E5E5E5"> and then on over to it</font>

94
00:05:06,770 --> 00:05:12,109
like<font color="#E5E5E5"> 30 minutes later saying yeah it's</font>

95
00:05:09,410 --> 00:05:17,960
about<font color="#CCCCCC"> zero days and</font><font color="#E5E5E5"> probably affecting</font>

96
00:05:12,110 --> 00:05:22,820
<font color="#CCCCCC">vs my protocol as like and then sure</font>

97
00:05:17,960 --> 00:05:25,760
after<font color="#CCCCCC"> one</font><font color="#E5E5E5"> guy</font><font color="#CCCCCC"> bridgie guy on Twitter</font>

98
00:05:22,820 --> 00:05:26,599
again<font color="#E5E5E5"> saying oh god is gonna be a</font>

99
00:05:25,760 --> 00:05:29,630
bloodbath

100
00:05:26,600 --> 00:05:32,870
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is exploits they do repo on the</font>

101
00:05:29,630 --> 00:05:35,810
<font color="#E5E5E5">latest versions of Windows and when I</font>

102
00:05:32,870 --> 00:05:36,320
saw<font color="#E5E5E5"> that</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it I</font><font color="#CCCCCC"> found</font><font color="#E5E5E5"> that is not</font>

103
00:05:35,810 --> 00:05:39,350
possible

104
00:05:36,320 --> 00:05:41,870
what did we miss<font color="#CCCCCC"> what did</font><font color="#E5E5E5"> I miss that</font>

105
00:05:39,350 --> 00:05:45,710
<font color="#CCCCCC">shouldn't</font><font color="#E5E5E5"> be that shouldn't happen like</font>

106
00:05:41,870 --> 00:05:48,320
this<font color="#E5E5E5"> and so I went to</font><font color="#CCCCCC"> sleep and then on</font>

107
00:05:45,710 --> 00:05:50,570
Saturday morning check my Twitter feeds

108
00:05:48,320 --> 00:05:54,290
again<font color="#E5E5E5"> and there was that blog</font><font color="#CCCCCC"> post from</font>

109
00:05:50,570 --> 00:05:57,020
<font color="#CCCCCC">philip</font><font color="#E5E5E5"> miner from VN SRC saying that the</font>

110
00:05:54,290 --> 00:05:59,240
team during<font color="#E5E5E5"> the night my night in South</font>

111
00:05:57,020 --> 00:06:01,700
Korea had taken time<font color="#CCCCCC"> to review all of</font>

112
00:05:59,240 --> 00:06:05,630
this<font color="#CCCCCC"> exploits and it turned out</font><font color="#E5E5E5"> that</font>

113
00:06:01,700 --> 00:06:09,950
most of them had<font color="#CCCCCC"> been fixed so this is</font>

114
00:06:05,630 --> 00:06:13,060
I'm going<font color="#E5E5E5"> today to talk about the SMB</font>

115
00:06:09,950 --> 00:06:15,920
exploits<font color="#E5E5E5"> some of these exploits affected</font>

116
00:06:13,060 --> 00:06:19,760
for example<font color="#E5E5E5"> exchange yeah I won't be</font>

117
00:06:15,920 --> 00:06:23,060
talking<font color="#E5E5E5"> ballot</font><font color="#CCCCCC"> on the SMB so this</font>

118
00:06:19,760 --> 00:06:24,920
<font color="#CCCCCC">exploits were indeed fixed</font><font color="#E5E5E5"> so what are</font>

119
00:06:23,060 --> 00:06:27,790
we talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> we are talking</font>

120
00:06:24,920 --> 00:06:31,100
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> fix</font><font color="#CCCCCC"> that was released</font><font color="#E5E5E5"> in March</font>

121
00:06:27,790 --> 00:06:32,030
so as you can see on that<font color="#E5E5E5"> slide so there</font>

122
00:06:31,100 --> 00:06:34,550
were<font color="#E5E5E5"> six</font>

123
00:06:32,030 --> 00:06:38,090
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> five of</font><font color="#E5E5E5"> them were</font>

124
00:06:34,550 --> 00:06:38,810
critical<font color="#CCCCCC"> the last one was are</font><font color="#E5E5E5"> an info</font>

125
00:06:38,090 --> 00:06:40,030
disclosure

126
00:06:38,810 --> 00:06:44,350
<font color="#CCCCCC">Ranieri</font><font color="#E5E5E5"> team</font>

127
00:06:40,030 --> 00:06:51,520
so so yeah<font color="#CCCCCC"> I know I've heard about des</font>

128
00:06:44,350 --> 00:06:54,400
<font color="#E5E5E5">bugs in at some point in 2017</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was on</font>

129
00:06:51,520 --> 00:06:56,919
vacation<font color="#E5E5E5"> about that when this kind of</font>

130
00:06:54,400 --> 00:06:59,560
thing<font color="#CCCCCC"> happened and I was</font><font color="#E5E5E5"> asking</font><font color="#CCCCCC"> in</font>

131
00:06:56,920 --> 00:07:01,510
France in<font color="#E5E5E5"> VF and quickly checked my</font>

132
00:06:59,560 --> 00:07:04,090
emails apparently there was some<font color="#E5E5E5"> stuff</font>

133
00:07:01,510 --> 00:07:06,550
<font color="#CCCCCC">going on about SMB and you know guys I</font>

134
00:07:04,090 --> 00:07:08,560
<font color="#E5E5E5">used to be a quite an</font><font color="#CCCCCC"> exploiter at UPenn</font>

135
00:07:06,550 --> 00:07:11,590
<font color="#E5E5E5">like mainly working on flash or</font>

136
00:07:08,560 --> 00:07:15,100
JavaScript or this<font color="#E5E5E5"> kind of thing and SMB</font>

137
00:07:11,590 --> 00:07:19,750
have<font color="#CCCCCC"> I had no</font><font color="#E5E5E5"> experience with</font><font color="#CCCCCC"> that but I</font>

138
00:07:15,100 --> 00:07:23,620
read this in<font color="#CCCCCC"> the that Fred</font><font color="#E5E5E5"> and and it</font>

139
00:07:19,750 --> 00:07:27,100
sounds<font color="#E5E5E5"> quite</font><font color="#CCCCCC"> interesting so so let's</font>

140
00:07:23,620 --> 00:07:30,460
let's<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that more into details</font>

141
00:07:27,100 --> 00:07:35,050
<font color="#E5E5E5">so for this presentation I'm going to</font>

142
00:07:30,460 --> 00:07:38,500
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> vulnerabilities that were</font>

143
00:07:35,050 --> 00:07:40,660
used by this<font color="#E5E5E5"> eternal exploits</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> talked</font>

144
00:07:38,500 --> 00:07:44,919
<font color="#CCCCCC">about also how</font><font color="#E5E5E5"> these exploits world</font>

145
00:07:40,660 --> 00:07:48,820
I will mentioned or mediations<font color="#E5E5E5"> from for</font>

146
00:07:44,919 --> 00:07:50,799
Windows 10<font color="#E5E5E5"> and then in Vienna I will be</font>

147
00:07:48,820 --> 00:07:54,159
talking<font color="#CCCCCC"> about some of</font><font color="#E5E5E5"> the research we</font>

148
00:07:50,800 --> 00:07:57,940
did<font color="#E5E5E5"> alongside like some of our</font><font color="#CCCCCC"> books to</font>

149
00:07:54,160 --> 00:08:02,830
<font color="#E5E5E5">be fixed so</font><font color="#CCCCCC"> let's start with</font><font color="#E5E5E5"> probably</font>

150
00:07:57,940 --> 00:08:05,500
the<font color="#E5E5E5"> most famous one the</font><font color="#CCCCCC"> eternal blue so</font>

151
00:08:02,830 --> 00:08:10,539
why do I say that<font color="#CCCCCC"> this is a most famous</font>

152
00:08:05,500 --> 00:08:13,270
one<font color="#CCCCCC"> because for some reasons this was</font>

153
00:08:10,540 --> 00:08:16,030
<font color="#E5E5E5">the exploit</font><font color="#CCCCCC"> that was adapted</font><font color="#E5E5E5"> and ported</font>

154
00:08:13,270 --> 00:08:23,979
to one a cry<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> ask me why</font><font color="#E5E5E5"> which was</font>

155
00:08:16,030 --> 00:08:27,849
this<font color="#E5E5E5"> one</font><font color="#CCCCCC"> impartial so this this exploit</font>

156
00:08:23,979 --> 00:08:32,500
was abusing<font color="#E5E5E5"> Verner be</font><font color="#CCCCCC"> team an integer</font>

157
00:08:27,850 --> 00:08:35,409
<font color="#E5E5E5">rap so what is that</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is on this</font><font color="#CCCCCC"> ice</font>

158
00:08:32,500 --> 00:08:38,580
I've put<font color="#CCCCCC"> event snippets</font><font color="#E5E5E5"> that you guys</font>

159
00:08:35,409 --> 00:08:43,710
can have<font color="#CCCCCC"> a good</font><font color="#E5E5E5"> idea of what this is</font>

160
00:08:38,580 --> 00:08:45,850
<font color="#E5E5E5">really about so yeah so integral</font><font color="#CCCCCC"> raps so</font>

161
00:08:43,710 --> 00:08:48,370
what is that<font color="#CCCCCC"> thing</font>

162
00:08:45,850 --> 00:08:50,970
so<font color="#CCCCCC"> usually when we've got this kind</font><font color="#E5E5E5"> of</font>

163
00:08:48,370 --> 00:08:53,670
vulnerability<font color="#E5E5E5"> you</font>

164
00:08:50,970 --> 00:08:55,620
if you talk to me about an integer up<font color="#E5E5E5"> I</font>

165
00:08:53,670 --> 00:08:58,469
will be<font color="#CCCCCC"> thinking about</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> some</font>

166
00:08:55,620 --> 00:09:00,570
bugs<font color="#E5E5E5"> in a in a in an image parser like</font>

167
00:08:58,470 --> 00:09:03,990
typically<font color="#CCCCCC"> you're you're dealing with a</font>

168
00:09:00,570 --> 00:09:06,270
JPEG or<font color="#E5E5E5"> Ajith I imagine so the</font><font color="#CCCCCC"> sizes the</font>

169
00:09:03,990 --> 00:09:10,230
dimensions<font color="#E5E5E5"> of that teacher hold on</font><font color="#CCCCCC"> to</font>

170
00:09:06,270 --> 00:09:14,520
bytes and an attacker has<font color="#E5E5E5"> put I don't</font>

171
00:09:10,230 --> 00:09:18,030
know<font color="#CCCCCC"> which</font><font color="#E5E5E5"> he has set it to</font><font color="#CCCCCC"> 0 x FF FF</font>

172
00:09:14,520 --> 00:09:21,270
and then for some reason<font color="#E5E5E5"> so parser well</font>

173
00:09:18,030 --> 00:09:24,720
<font color="#E5E5E5">rounder is going to</font><font color="#CCCCCC"> allocate that 0xffff</font>

174
00:09:21,270 --> 00:09:28,500
<font color="#CCCCCC">+ 1 which is going to wrap on 16 bits</font>

175
00:09:24,720 --> 00:09:31,590
and then<font color="#CCCCCC"> be an allocation and</font><font color="#E5E5E5"> then 0</font>

176
00:09:28,500 --> 00:09:33,750
<font color="#E5E5E5">probably and then data will be written</font>

177
00:09:31,590 --> 00:09:36,750
to that buffer causing of course<font color="#E5E5E5"> a</font>

178
00:09:33,750 --> 00:09:40,260
<font color="#CCCCCC">Hippogriff rule and then triggering</font><font color="#E5E5E5"> the</font>

179
00:09:36,750 --> 00:09:45,150
<font color="#E5E5E5">Egyptian etc etc in that case this</font><font color="#CCCCCC"> is a</font>

180
00:09:40,260 --> 00:09:48,090
bit different<font color="#CCCCCC"> so as you can see on this</font>

181
00:09:45,150 --> 00:09:50,610
picture varies<font color="#E5E5E5"> that function will</font><font color="#CCCCCC"> FY</font>

182
00:09:48,090 --> 00:09:54,780
function that's a macro which is pointer

183
00:09:50,610 --> 00:09:58,110
<font color="#E5E5E5">deep short so what is this about first</font>

184
00:09:54,780 --> 00:10:03,180
introduce you to two structures this one

185
00:09:58,110 --> 00:10:07,450
so this I feel I<font color="#CCCCCC"> feel list list</font><font color="#E5E5E5"> which</font>

186
00:10:03,180 --> 00:10:09,770
which is<font color="#E5E5E5"> supposed to embed several items</font>

187
00:10:07,450 --> 00:10:12,990
[Music]

188
00:10:09,770 --> 00:10:16,860
<font color="#CCCCCC">structure on your left you can</font><font color="#E5E5E5"> see that</font>

189
00:10:12,990 --> 00:10:19,800
<font color="#E5E5E5">these</font><font color="#CCCCCC"> these FVA times</font><font color="#E5E5E5"> or where</font><font color="#CCCCCC"> they're</font>

190
00:10:16,860 --> 00:10:23,130
<font color="#CCCCCC">very something missing here but the</font>

191
00:10:19,800 --> 00:10:27,630
items they contain<font color="#CCCCCC"> there's three members</font>

192
00:10:23,130 --> 00:10:30,750
<font color="#CCCCCC">+ 2 / buffers so they're their size</font><font color="#E5E5E5"> can</font>

193
00:10:27,630 --> 00:10:35,160
actually vary<font color="#E5E5E5"> so what this bug is</font><font color="#CCCCCC"> all</font>

194
00:10:30,750 --> 00:10:39,360
about this<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> is about processing a</font>

195
00:10:35,160 --> 00:10:42,689
list of items<font color="#CCCCCC"> this is about three</font>

196
00:10:39,360 --> 00:10:45,570
processing<font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> list of items in order</font>

197
00:10:42,690 --> 00:10:48,690
<font color="#CCCCCC">to determine</font><font color="#E5E5E5"> a size to locate data and</font>

198
00:10:45,570 --> 00:10:52,589
then write<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that buffer so how does</font>

199
00:10:48,690 --> 00:10:56,190
that<font color="#E5E5E5"> work</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> well the source code is</font>

200
00:10:52,589 --> 00:10:59,010
<font color="#E5E5E5">quite being so I didn't want to put it</font>

201
00:10:56,190 --> 00:11:01,769
there so I<font color="#CCCCCC"> just pass it</font>

202
00:10:59,010 --> 00:11:03,899
<font color="#CCCCCC">screenshot from from NIDA</font><font color="#E5E5E5"> it shows that</font>

203
00:11:01,769 --> 00:11:07,860
there is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> loop and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tube is actually</font>

204
00:11:03,899 --> 00:11:10,110
iterating for all these elements in that

205
00:11:07,860 --> 00:11:13,290
<font color="#E5E5E5">in</font><font color="#CCCCCC"> that list</font>

206
00:11:10,110 --> 00:11:17,790
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> assessing Versailles so usually</font>

207
00:11:13,290 --> 00:11:20,579
<font color="#E5E5E5">when we talk</font><font color="#CCCCCC"> about GSM be v1 so that all</font>

208
00:11:17,790 --> 00:11:24,599
protocol we are talking about messages

209
00:11:20,579 --> 00:11:29,399
<font color="#E5E5E5">that shouldn't be more that more than</font>

210
00:11:24,600 --> 00:11:33,680
<font color="#CCCCCC">10,000</font><font color="#E5E5E5"> bytes in X so very small messages</font>

211
00:11:29,399 --> 00:11:38,190
so circunstances<font color="#CCCCCC"> this</font><font color="#E5E5E5"> function with just</font>

212
00:11:33,680 --> 00:11:40,920
fine but we're talking<font color="#CCCCCC"> about exploits</font>

213
00:11:38,190 --> 00:11:43,430
and<font color="#CCCCCC"> variability we are of course</font><font color="#E5E5E5"> talking</font>

214
00:11:40,920 --> 00:11:48,149
about<font color="#E5E5E5"> edge cases so what happens there</font>

215
00:11:43,430 --> 00:11:51,989
<font color="#E5E5E5">so let's assume that somebody sends a</font>

216
00:11:48,149 --> 00:11:57,209
massive packet<font color="#E5E5E5"> so packet containing more</font>

217
00:11:51,990 --> 00:12:03,449
than<font color="#CCCCCC"> 10,000 bytes</font><font color="#E5E5E5"> so that function that</font>

218
00:11:57,209 --> 00:12:07,079
I just show you<font color="#CCCCCC"> before</font><font color="#E5E5E5"> is going to loop</font>

219
00:12:03,449 --> 00:12:11,670
<font color="#E5E5E5">to process all the items and determine</font>

220
00:12:07,079 --> 00:12:16,500
size<font color="#E5E5E5"> the turn it's going to</font><font color="#CCCCCC"> to determine</font>

221
00:12:11,670 --> 00:12:19,439
the last items<font color="#E5E5E5"> that is varied in that</font>

222
00:12:16,500 --> 00:12:22,050
packet<font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> you're you sending a</font>

223
00:12:19,440 --> 00:12:24,570
packet<font color="#CCCCCC"> to a server and and you're</font>

224
00:12:22,050 --> 00:12:27,750
telling the<font color="#E5E5E5"> server that varies I know</font>

225
00:12:24,570 --> 00:12:30,390
<font color="#E5E5E5">right</font><font color="#CCCCCC"> 20 20 thousand bytes</font><font color="#E5E5E5"> in that</font>

226
00:12:27,750 --> 00:12:32,519
packet so server is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to just check</font>

227
00:12:30,390 --> 00:12:37,980
if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> telling</font><font color="#CCCCCC"> the truth and it we</font>

228
00:12:32,519 --> 00:12:40,140
don't<font color="#E5E5E5"> accurately calculate and of course</font>

229
00:12:37,980 --> 00:12:42,360
here is where's the<font color="#CCCCCC"> bug stanza because</font>

230
00:12:40,140 --> 00:12:46,709
if you've got<font color="#E5E5E5"> enough data you're going</font>

231
00:12:42,360 --> 00:12:50,370
<font color="#E5E5E5">to rub that counter and so that because</font>

232
00:12:46,709 --> 00:12:53,910
of that integer<font color="#E5E5E5"> wrap the server is</font><font color="#CCCCCC"> going</font>

233
00:12:50,370 --> 00:12:58,440
<font color="#CCCCCC">to believe that</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is actually more</font>

234
00:12:53,910 --> 00:13:01,050
data than the reason and<font color="#CCCCCC"> so it's going</font>

235
00:12:58,440 --> 00:13:04,290
<font color="#CCCCCC">to allocate</font><font color="#E5E5E5"> a buffer according to a size</font>

236
00:13:01,050 --> 00:13:07,370
<font color="#E5E5E5">but then there will be a loop that is</font>

237
00:13:04,290 --> 00:13:09,930
bounded by the last valid element

238
00:13:07,370 --> 00:13:12,270
<font color="#CCCCCC">insistence in</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> of that bug</font><font color="#E5E5E5"> that</font>

239
00:13:09,930 --> 00:13:16,890
<font color="#CCCCCC">lasts</font><font color="#E5E5E5"> very determined is</font>

240
00:13:12,270 --> 00:13:22,370
to be outside<font color="#E5E5E5"> of us hope</font><font color="#CCCCCC"> and so we eat</font>

241
00:13:16,890 --> 00:13:25,080
<font color="#E5E5E5">direct referrals of road conditions so</font>

242
00:13:22,370 --> 00:13:28,290
<font color="#E5E5E5">yet so that's pretty</font><font color="#CCCCCC"> straightforward you</font>

243
00:13:25,080 --> 00:13:30,690
<font color="#CCCCCC">just allocate data</font><font color="#E5E5E5"> and then you rest</font>

244
00:13:28,290 --> 00:13:36,209
<font color="#E5E5E5">will</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> right past the bounds and and</font>

245
00:13:30,690 --> 00:13:40,560
that's it so a stupid bug how did these

246
00:13:36,210 --> 00:13:43,650
guys exploit it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I believe you know</font>

247
00:13:40,560 --> 00:13:46,170
I've seen exploits<font color="#E5E5E5"> in my life so far and</font>

248
00:13:43,650 --> 00:13:51,540
I do believe<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the guys who did that</font>

249
00:13:46,170 --> 00:13:54,170
<font color="#E5E5E5">are quite smart you know if I had to</font>

250
00:13:51,540 --> 00:13:58,920
exploit<font color="#CCCCCC"> that thing I would think</font><font color="#E5E5E5"> about</font>

251
00:13:54,170 --> 00:14:01,170
abusing an object directly into SRV

252
00:13:58,920 --> 00:14:03,540
that's is<font color="#E5E5E5"> that assembly on a library</font>

253
00:14:01,170 --> 00:14:07,620
<font color="#E5E5E5">these guys we did it a bit differently</font>

254
00:14:03,540 --> 00:14:11,640
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> they used some object populated</font>

255
00:14:07,620 --> 00:14:15,030
by<font color="#CCCCCC"> SRV net and</font><font color="#E5E5E5"> this object are created</font>

256
00:14:11,640 --> 00:14:19,439
<font color="#CCCCCC">not actually when you create a</font>

257
00:14:15,030 --> 00:14:25,650
connection<font color="#CCCCCC"> to port</font><font color="#E5E5E5"> 4</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> 5 so when you</font>

258
00:14:19,440 --> 00:14:30,180
send<font color="#E5E5E5"> a syn packet to</font><font color="#CCCCCC"> power 4 4 5</font><font color="#E5E5E5"> and is</font>

259
00:14:25,650 --> 00:14:35,900
going to allocate a new MDL<font color="#E5E5E5"> so a memory</font>

260
00:14:30,180 --> 00:14:41,010
descriptor<font color="#E5E5E5"> list object in Interpol</font><font color="#CCCCCC"> and</font>

261
00:14:35,900 --> 00:14:44,630
it's<font color="#E5E5E5"> going to initialize some structure</font>

262
00:14:41,010 --> 00:14:49,260
there<font color="#CCCCCC"> and that's where the fun begins</font>

263
00:14:44,630 --> 00:14:54,380
<font color="#E5E5E5">guys what we did was to sculpt the hip</font>

264
00:14:49,260 --> 00:14:57,960
<font color="#E5E5E5">so that which</font><font color="#CCCCCC"> they were</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> scoot</font>

265
00:14:54,380 --> 00:14:59,910
<font color="#CCCCCC">let me use</font><font color="#E5E5E5"> spoon instead of hip here so</font>

266
00:14:57,960 --> 00:15:02,160
that that buffer that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were going to</font>

267
00:14:59,910 --> 00:15:07,920
<font color="#E5E5E5">overflow who would be placed right</font>

268
00:15:02,160 --> 00:15:10,620
before<font color="#CCCCCC"> theirs</font><font color="#E5E5E5"> and years and then after</font>

269
00:15:07,920 --> 00:15:13,860
triggering that<font color="#E5E5E5"> overflow they would</font>

270
00:15:10,620 --> 00:15:17,520
overwrite<font color="#CCCCCC"> one MDL with some control data</font>

271
00:15:13,860 --> 00:15:21,270
and this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> yeah where it gets</font>

272
00:15:17,520 --> 00:15:23,610
interesting because<font color="#E5E5E5"> how how do you</font>

273
00:15:21,270 --> 00:15:26,300
exploit that<font color="#CCCCCC"> wherein it turns out that</font>

274
00:15:23,610 --> 00:15:30,780
there's<font color="#CCCCCC"> Andy</font><font color="#E5E5E5"> else contains a point</font>

275
00:15:26,300 --> 00:15:32,880
that that can be used to write so that

276
00:15:30,780 --> 00:15:36,180
are received by<font color="#E5E5E5"> the connection on this</font>

277
00:15:32,880 --> 00:15:39,630
<font color="#CCCCCC">picture</font><font color="#E5E5E5"> there you can see on screen the</font>

278
00:15:36,180 --> 00:15:42,120
second part is<font color="#E5E5E5"> just about sending data</font>

279
00:15:39,630 --> 00:15:45,660
<font color="#CCCCCC">today's des connections</font><font color="#E5E5E5"> so what happens</font>

280
00:15:42,120 --> 00:15:49,530
<font color="#E5E5E5">so we are</font><font color="#CCCCCC"> allocating an MDL</font><font color="#E5E5E5"> and then we</font>

281
00:15:45,660 --> 00:15:52,709
are overflowing on it<font color="#E5E5E5"> and then we are</font>

282
00:15:49,530 --> 00:15:55,949
like<font color="#E5E5E5"> just using some pointers in that</font>

283
00:15:52,710 --> 00:15:58,140
idea to write that<font color="#CCCCCC"> out to well somewhere</font>

284
00:15:55,950 --> 00:16:00,840
in<font color="#E5E5E5"> memory but since now that data has</font>

285
00:15:58,140 --> 00:16:11,640
been overwritten<font color="#CCCCCC"> we are now able to</font>

286
00:16:00,840 --> 00:16:16,490
write it one arbitrary location in<font color="#E5E5E5"> in</font>

287
00:16:11,640 --> 00:16:19,770
<font color="#E5E5E5">memory and</font><font color="#CCCCCC"> Anja</font><font color="#E5E5E5"> so this of course runs</font>

288
00:16:16,490 --> 00:16:22,440
with<font color="#E5E5E5"> kernel in the kernel so</font><font color="#CCCCCC"> with</font>

289
00:16:19,770 --> 00:16:25,910
highest privileges so it's pretty much

290
00:16:22,440 --> 00:16:29,010
game over<font color="#CCCCCC"> so what did those guys do well</font>

291
00:16:25,910 --> 00:16:31,380
<font color="#E5E5E5">it was</font><font color="#CCCCCC"> quite straightforward for them so</font>

292
00:16:29,010 --> 00:16:37,350
this exploit only worked up to Windows 7

293
00:16:31,380 --> 00:16:41,340
<font color="#CCCCCC">and on Windows 7</font><font color="#E5E5E5"> the whole</font><font color="#CCCCCC"> region is can</font>

294
00:16:37,350 --> 00:16:44,640
be<font color="#CCCCCC"> executable so it can be executed so</font>

295
00:16:41,340 --> 00:16:48,450
what we did was just the abuse that

296
00:16:44,640 --> 00:16:52,380
arbitrary<font color="#E5E5E5"> rights and our</font><font color="#CCCCCC"> payload to read</font>

297
00:16:48,450 --> 00:16:55,050
write execute<font color="#CCCCCC"> a memory page and just</font>

298
00:16:52,380 --> 00:16:57,000
have another function pointer

299
00:16:55,050 --> 00:16:59,939
overwritten in that structure<font color="#E5E5E5"> in that</font>

300
00:16:57,000 --> 00:17:03,720
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> air structure to hijack the</font>

301
00:16:59,940 --> 00:17:04,199
exaction flow yeah<font color="#E5E5E5"> that works on Windows</font>

302
00:17:03,720 --> 00:17:06,569
7

303
00:17:04,199 --> 00:17:08,280
<font color="#E5E5E5">RTC works it doesn't</font><font color="#CCCCCC"> work on our</font><font color="#E5E5E5"> systems</font>

304
00:17:06,569 --> 00:17:10,579
<font color="#E5E5E5">but on Windows 7</font>

305
00:17:08,280 --> 00:17:15,569
yeah I have to<font color="#E5E5E5"> say that this works and</font>

306
00:17:10,579 --> 00:17:17,698
so why this exploit was adapted to wanna

307
00:17:15,569 --> 00:17:23,040
cry yeah perhaps<font color="#CCCCCC"> because it's quite</font>

308
00:17:17,699 --> 00:17:25,050
simple one guy who tried<font color="#CCCCCC"> into an</font>

309
00:17:23,040 --> 00:17:27,990
actually who managed<font color="#E5E5E5"> to exploit it for</font>

310
00:17:25,050 --> 00:17:30,690
<font color="#CCCCCC">Windows 8 I'm not sure exactly why he</font>

311
00:17:27,990 --> 00:17:34,500
did that<font color="#E5E5E5"> but on Windows 8</font><font color="#CCCCCC"> hit system</font>

312
00:17:30,690 --> 00:17:37,560
<font color="#CCCCCC">behaves differently so this</font><font color="#E5E5E5"> hydrogen is</font>

313
00:17:34,500 --> 00:17:40,169
<font color="#E5E5E5">not executable so the guy had to to</font>

314
00:17:37,560 --> 00:17:43,408
trigger<font color="#E5E5E5"> that bomb twice</font>

315
00:17:40,169 --> 00:17:47,580
to set<font color="#CCCCCC"> the</font><font color="#E5E5E5"> NX bit to zero and then</font>

316
00:17:43,409 --> 00:17:50,249
figure<font color="#CCCCCC"> against the</font><font color="#E5E5E5"> bug well just to to</font>

317
00:17:47,580 --> 00:17:53,129
have<font color="#CCCCCC"> a the same</font><font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> I haven't in</font>

318
00:17:50,249 --> 00:17:56,460
any I don't<font color="#CCCCCC"> think I've</font><font color="#E5E5E5"> seen any</font>

319
00:17:53,129 --> 00:17:59,279
<font color="#E5E5E5">successful part</font><font color="#CCCCCC"> of this particular</font>

320
00:17:56,460 --> 00:18:03,179
annuity on the latest Windows 10

321
00:17:59,279 --> 00:18:06,179
versions but I believe it<font color="#E5E5E5"> could</font><font color="#CCCCCC"> be could</font>

322
00:18:03,179 --> 00:18:09,299
<font color="#CCCCCC">be potentially do ever but that would be</font>

323
00:18:06,179 --> 00:18:12,119
<font color="#E5E5E5">quite a challenge how this thing was</font>

324
00:18:09,299 --> 00:18:16,440
<font color="#CCCCCC">fixed</font><font color="#E5E5E5"> as I show</font><font color="#CCCCCC"> you in my first slide</font>

325
00:18:12,119 --> 00:18:19,350
<font color="#CCCCCC">all these all</font><font color="#E5E5E5"> these had to do with that</font>

326
00:18:16,440 --> 00:18:21,809
pointer diff<font color="#E5E5E5"> short thing so it's quite</font>

327
00:18:19,350 --> 00:18:26,610
it's quite weird to see to see that

328
00:18:21,809 --> 00:18:33,509
macro 9 pointers<font color="#E5E5E5"> even on a 32-bit system</font>

329
00:18:26,610 --> 00:18:35,428
<font color="#CCCCCC">which should be on 42</font><font color="#E5E5E5"> so yeah so the fix</font>

330
00:18:33,509 --> 00:18:38,190
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that was quite a</font><font color="#E5E5E5"> stretch first wife</font>

331
00:18:35,429 --> 00:18:40,409
<font color="#CCCCCC">Laura we just changed that pointer short</font>

332
00:18:38,190 --> 00:18:42,629
pointer<font color="#CCCCCC"> give short two pointer diff and</font>

333
00:18:40,409 --> 00:18:47,549
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> writing a short and we write</font>

334
00:18:42,629 --> 00:18:49,799
along and that's<font color="#E5E5E5"> the worst</font><font color="#CCCCCC"> is there any</font>

335
00:18:47,549 --> 00:18:52,529
other<font color="#E5E5E5"> places where this vulnerability</font>

336
00:18:49,799 --> 00:18:55,230
could have been<font color="#E5E5E5"> found</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> there was</font><font color="#CCCCCC"> under</font>

337
00:18:52,529 --> 00:18:58,080
function a very similar to that<font color="#CCCCCC"> function</font>

338
00:18:55,230 --> 00:19:01,039
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I can't</font><font color="#CCCCCC"> pronounce</font><font color="#E5E5E5"> the name</font><font color="#CCCCCC"> yeah it</font>

339
00:18:58,080 --> 00:19:04,529
was<font color="#E5E5E5"> fixed as</font><font color="#CCCCCC"> well is there any over</font>

340
00:19:01,039 --> 00:19:05,340
function<font color="#CCCCCC"> that use this</font><font color="#E5E5E5"> not that I'm</font>

341
00:19:04,529 --> 00:19:09,990
aware of

342
00:19:05,340 --> 00:19:14,789
so we should<font color="#E5E5E5"> be safe let me talk now</font>

343
00:19:09,990 --> 00:19:17,820
<font color="#CCCCCC">about eternal champion so this one was</font>

344
00:19:14,789 --> 00:19:26,220
about abusing some race conditions this

345
00:19:17,820 --> 00:19:28,200
one is quite<font color="#CCCCCC"> good race conditions</font><font color="#E5E5E5"> so</font>

346
00:19:26,220 --> 00:19:31,679
what this is about<font color="#E5E5E5"> this one is about</font>

347
00:19:28,200 --> 00:19:35,460
abusing transactions<font color="#E5E5E5"> so let me first</font>

348
00:19:31,679 --> 00:19:38,059
talk about some<font color="#E5E5E5"> transactions so in SMB</font>

349
00:19:35,460 --> 00:19:43,350
<font color="#CCCCCC">one you've got three types of</font>

350
00:19:38,059 --> 00:19:46,860
transaction<font color="#CCCCCC"> ante transaction</font><font color="#E5E5E5"> trans</font>

351
00:19:43,350 --> 00:19:48,928
transactions and<font color="#E5E5E5"> transactions - so how</font>

352
00:19:46,860 --> 00:19:51,418
does this<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> works</font><font color="#E5E5E5"> so basically</font>

353
00:19:48,929 --> 00:19:53,010
you've<font color="#CCCCCC"> got your client</font><font color="#E5E5E5"> and you are</font>

354
00:19:51,419 --> 00:19:55,020
<font color="#E5E5E5">talking to a server</font><font color="#CCCCCC"> -</font>

355
00:19:53,010 --> 00:19:57,120
cents a transaction<font color="#CCCCCC"> request and the</font>

356
00:19:55,020 --> 00:19:59,700
server<font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to reply with a</font>

357
00:19:57,120 --> 00:20:04,590
<font color="#E5E5E5">transaction</font><font color="#CCCCCC"> written response that's</font>

358
00:19:59,700 --> 00:20:10,170
quite<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> that transaction</font><font color="#E5E5E5"> requests</font>

359
00:20:04,590 --> 00:20:12,419
<font color="#E5E5E5">it has several fields</font><font color="#CCCCCC"> so on this field</font>

360
00:20:10,170 --> 00:20:15,540
<font color="#E5E5E5">you for example specify the amount of</font>

361
00:20:12,420 --> 00:20:17,580
data that that<font color="#CCCCCC"> your that you are</font>

362
00:20:15,540 --> 00:20:20,490
embedding<font color="#E5E5E5"> you</font><font color="#CCCCCC"> specifies the number</font><font color="#E5E5E5"> of</font>

363
00:20:17,580 --> 00:20:23,429
<font color="#E5E5E5">parameters that</font><font color="#CCCCCC"> this packet contains</font><font color="#E5E5E5"> you</font>

364
00:20:20,490 --> 00:20:28,740
specify<font color="#E5E5E5"> as a number of</font><font color="#CCCCCC"> setup bytes</font><font color="#E5E5E5"> also</font>

365
00:20:23,430 --> 00:20:32,970
so<font color="#E5E5E5"> this is all for some internal use for</font>

366
00:20:28,740 --> 00:20:36,780
<font color="#E5E5E5">assembling and it is also said in the</font>

367
00:20:32,970 --> 00:20:40,800
specification<font color="#CCCCCC"> that if your transaction</font>

368
00:20:36,780 --> 00:20:43,770
packet is too large and then you can use

369
00:20:40,800 --> 00:20:46,379
some secondary<font color="#CCCCCC"> transaction packets</font><font color="#E5E5E5"> and</font>

370
00:20:43,770 --> 00:20:48,270
in that case it's quite simple as well

371
00:20:46,380 --> 00:20:50,730
you send a primary transaction on

372
00:20:48,270 --> 00:20:54,210
request<font color="#E5E5E5"> server says okay send me more</font>

373
00:20:50,730 --> 00:20:57,300
and and then you send the other<font color="#E5E5E5"> one</font><font color="#CCCCCC"> so</font>

374
00:20:54,210 --> 00:20:59,640
how do<font color="#E5E5E5"> you specify that you need more</font>

375
00:20:57,300 --> 00:21:02,040
packets<font color="#E5E5E5"> where there is a field in the</font>

376
00:20:59,640 --> 00:21:04,380
transaction<font color="#CCCCCC"> object which is called</font><font color="#E5E5E5"> max</font>

377
00:21:02,040 --> 00:21:06,780
there<font color="#E5E5E5"> are two fields</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> desert</font>

378
00:21:04,380 --> 00:21:11,610
<font color="#E5E5E5">called</font><font color="#CCCCCC"> max parameter count</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Max there</font>

379
00:21:06,780 --> 00:21:15,000
account<font color="#E5E5E5"> and so basically if that account</font>

380
00:21:11,610 --> 00:21:16,860
is<font color="#CCCCCC"> different from</font><font color="#E5E5E5"> max that account or if</font>

381
00:21:15,000 --> 00:21:19,680
parameter<font color="#CCCCCC"> count is</font><font color="#E5E5E5"> different from max</font>

382
00:21:16,860 --> 00:21:24,780
parameter account then the server will

383
00:21:19,680 --> 00:21:26,820
<font color="#E5E5E5">know that more requests need need to</font><font color="#CCCCCC"> be</font>

384
00:21:24,780 --> 00:21:28,860
sent by a client to process the

385
00:21:26,820 --> 00:21:32,149
transaction<font color="#E5E5E5"> that's quite simple that's</font>

386
00:21:28,860 --> 00:21:37,560
why it works<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then goes if anything</font>

387
00:21:32,150 --> 00:21:40,650
what<font color="#E5E5E5"> what happens if if right after the</font>

388
00:21:37,560 --> 00:21:43,710
first transaction<font color="#CCCCCC"> then we send an</font>

389
00:21:40,650 --> 00:21:47,130
unexpected<font color="#E5E5E5"> secondary transaction</font><font color="#CCCCCC"> let's</font>

390
00:21:43,710 --> 00:21:48,920
say that we have one transaction<font color="#E5E5E5"> with</font>

391
00:21:47,130 --> 00:21:54,420
that<font color="#E5E5E5"> account</font>

392
00:21:48,920 --> 00:21:56,850
equal<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> I said it's not max parameter</font>

393
00:21:54,420 --> 00:21:59,820
count<font color="#CCCCCC"> Oh max that account</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> total</font>

394
00:21:56,850 --> 00:22:02,879
<font color="#E5E5E5">that account and total primary account</font><font color="#CCCCCC"> I</font>

395
00:21:59,820 --> 00:22:04,530
come back to<font color="#E5E5E5"> to viewers later but yeah</font>

396
00:22:02,880 --> 00:22:05,960
so basically<font color="#E5E5E5"> you've got a primary</font>

397
00:22:04,530 --> 00:22:08,990
transaction and<font color="#E5E5E5"> you</font>

398
00:22:05,960 --> 00:22:12,950
<font color="#E5E5E5">that account equal to turn that account</font>

399
00:22:08,990 --> 00:22:16,130
<font color="#CCCCCC">I know the client said</font><font color="#E5E5E5"> a second</font><font color="#CCCCCC"> a second</font>

400
00:22:12,950 --> 00:22:20,480
transaction so secondary transaction

401
00:22:16,130 --> 00:22:24,169
this one is unexpected<font color="#CCCCCC"> we've an over</font>

402
00:22:20,480 --> 00:22:28,220
that<font color="#E5E5E5"> account</font><font color="#CCCCCC"> so it turns out that the</font>

403
00:22:24,169 --> 00:22:31,429
code in in the server in the secondary

404
00:22:28,220 --> 00:22:34,100
transaction is quite robust<font color="#CCCCCC"> I'd say at</font>

405
00:22:31,429 --> 00:22:35,990
least<font color="#E5E5E5"> you cannot have like a stupid</font>

406
00:22:34,100 --> 00:22:39,439
buffer overflow<font color="#CCCCCC"> I mean for example</font>

407
00:22:35,990 --> 00:22:41,360
specifying<font color="#CCCCCC"> that account</font><font color="#E5E5E5"> which is greater</font>

408
00:22:39,440 --> 00:22:45,740
than<font color="#CCCCCC"> total that</font><font color="#E5E5E5"> account yes the server</font>

409
00:22:41,360 --> 00:22:50,168
is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reject that but what server</font>

410
00:22:45,740 --> 00:22:54,140
does not<font color="#E5E5E5"> is validating whether or not</font>

411
00:22:50,169 --> 00:22:58,130
that that<font color="#E5E5E5"> primary packet should</font><font color="#CCCCCC"> be</font>

412
00:22:54,140 --> 00:23:01,250
completed<font color="#E5E5E5"> so which means</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font>

413
00:22:58,130 --> 00:23:03,649
send a secondary transaction and<font color="#E5E5E5"> that</font>

414
00:23:01,250 --> 00:23:06,679
first<font color="#E5E5E5"> packet</font><font color="#CCCCCC"> has already that accounts</font>

415
00:23:03,649 --> 00:23:08,870
<font color="#CCCCCC">and</font><font color="#E5E5E5"> set to</font><font color="#CCCCCC"> torrid</font><font color="#E5E5E5"> that account yes the</font>

416
00:23:06,679 --> 00:23:12,529
server<font color="#E5E5E5"> just won't care and it's just</font>

417
00:23:08,870 --> 00:23:17,899
going<font color="#E5E5E5"> to increment that that account and</font>

418
00:23:12,529 --> 00:23:21,080
here is<font color="#CCCCCC"> above so you</font><font color="#E5E5E5"> end up with</font><font color="#CCCCCC"> the</font>

419
00:23:17,899 --> 00:23:24,860
<font color="#E5E5E5">primary transaction being executed while</font>

420
00:23:21,080 --> 00:23:28,010
data are still being appended to that

421
00:23:24,860 --> 00:23:32,479
first<font color="#E5E5E5"> connection how did these guys</font>

422
00:23:28,010 --> 00:23:36,500
exploit that this is if you take<font color="#CCCCCC"> a we're</font>

423
00:23:32,480 --> 00:23:39,230
shocked but capture of these exploits

424
00:23:36,500 --> 00:23:42,950
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> quickly see that it starts</font><font color="#CCCCCC"> with a</font>

425
00:23:39,230 --> 00:23:48,220
funky packet<font color="#E5E5E5"> so this this TCP packet it</font>

426
00:23:42,950 --> 00:23:51,860
embeds<font color="#CCCCCC"> 8</font><font color="#E5E5E5"> SMB I think the first one is</font>

427
00:23:48,220 --> 00:23:54,919
primary transaction<font color="#E5E5E5"> for the ante rename</font>

428
00:23:51,860 --> 00:23:56,479
function so I took<font color="#E5E5E5"> more about this</font>

429
00:23:54,919 --> 00:23:58,940
<font color="#E5E5E5">function later but this function</font>

430
00:23:56,480 --> 00:24:01,640
<font color="#CCCCCC">basically does nothing</font><font color="#E5E5E5"> it just say it's</font>

431
00:23:58,940 --> 00:24:03,740
<font color="#E5E5E5">like the assembly</font><font color="#CCCCCC"> eco function you send</font>

432
00:24:01,640 --> 00:24:06,710
out a to<font color="#E5E5E5"> it and</font><font color="#CCCCCC"> it will reply with the</font>

433
00:24:03,740 --> 00:24:09,289
sender<font color="#CCCCCC"> up so this is the first</font><font color="#E5E5E5"> assembly</font>

434
00:24:06,710 --> 00:24:11,990
<font color="#E5E5E5">the second assembly is a secondary</font>

435
00:24:09,289 --> 00:24:14,539
present transaction<font color="#E5E5E5"> one that is not</font>

436
00:24:11,990 --> 00:24:18,409
<font color="#CCCCCC">expected and all the other assemblies</font>

437
00:24:14,539 --> 00:24:19,340
are just to create some<font color="#E5E5E5"> transactions in</font>

438
00:24:18,409 --> 00:24:24,289
the pool

439
00:24:19,340 --> 00:24:27,470
so what happens the thing<font color="#E5E5E5"> is that these</font>

440
00:24:24,289 --> 00:24:29,720
guys they were<font color="#E5E5E5"> quite clever quite smart</font>

441
00:24:27,470 --> 00:24:33,710
<font color="#E5E5E5">in the way they did</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> because we</font><font color="#CCCCCC"> our</font>

442
00:24:29,720 --> 00:24:37,669
first transaction<font color="#CCCCCC"> it is set</font><font color="#E5E5E5"> to contain</font>

443
00:24:33,710 --> 00:24:42,230
more data<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so server</font><font color="#E5E5E5"> can just under</font>

444
00:24:37,669 --> 00:24:45,379
in one request<font color="#CCCCCC"> and I'm saying here that</font>

445
00:24:42,230 --> 00:24:49,639
the server will need to send at least

446
00:24:45,379 --> 00:24:51,860
<font color="#E5E5E5">two responses to complete that</font>

447
00:24:49,639 --> 00:24:57,258
transaction<font color="#E5E5E5"> this is because the buffer</font>

448
00:24:51,860 --> 00:24:59,918
is too loud<font color="#E5E5E5"> so the server</font><font color="#CCCCCC"> when it when</font>

449
00:24:57,259 --> 00:25:05,450
<font color="#CCCCCC">it</font><font color="#E5E5E5"> gets that first and cheering request</font>

450
00:24:59,919 --> 00:25:08,659
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> it is just echoing the first</font>

451
00:25:05,450 --> 00:25:12,610
transaction<font color="#E5E5E5"> and then it is that this</font>

452
00:25:08,659 --> 00:25:16,429
this request has more data than what

453
00:25:12,610 --> 00:25:19,658
<font color="#CCCCCC">that what the request the response</font><font color="#E5E5E5"> can</font>

454
00:25:16,429 --> 00:25:24,350
contain so it's<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to queue</font><font color="#CCCCCC"> up</font>

455
00:25:19,659 --> 00:25:26,809
<font color="#E5E5E5">another request another response in in</font>

456
00:25:24,350 --> 00:25:28,998
<font color="#E5E5E5">another</font><font color="#CCCCCC"> fred and this is where the rest</font>

457
00:25:26,809 --> 00:25:31,610
condition<font color="#E5E5E5"> happens</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> on the second</font>

458
00:25:28,999 --> 00:25:33,499
<font color="#CCCCCC">SMB there</font><font color="#E5E5E5"> is a secondary transaction</font>

459
00:25:31,610 --> 00:25:39,678
<font color="#E5E5E5">that is going to increment that that</font>

460
00:25:33,499 --> 00:25:41,240
account<font color="#CCCCCC"> so when we enter</font><font color="#E5E5E5"> the code that</font>

461
00:25:39,679 --> 00:25:43,879
is responsible<font color="#E5E5E5"> for parsing that</font>

462
00:25:41,240 --> 00:25:45,649
secondary transaction we are going to

463
00:25:43,879 --> 00:25:49,070
<font color="#E5E5E5">increment a field called</font>

464
00:25:45,649 --> 00:25:51,979
in data and<font color="#CCCCCC"> also we know</font><font color="#E5E5E5"> sorry we are</font>

465
00:25:49,070 --> 00:25:55,809
going<font color="#CCCCCC"> to increment that field called</font>

466
00:25:51,980 --> 00:25:59,450
that account<font color="#E5E5E5"> and then we write data to</font>

467
00:25:55,809 --> 00:26:01,970
<font color="#E5E5E5">to V in data buffer but this we don't</font>

468
00:25:59,450 --> 00:26:04,220
care<font color="#E5E5E5"> the only thing that matters here is</font>

469
00:26:01,970 --> 00:26:07,700
the<font color="#CCCCCC"> fact that we are infinitely in daraa</font>

470
00:26:04,220 --> 00:26:10,249
<font color="#E5E5E5">because this that account because this</font>

471
00:26:07,700 --> 00:26:14,059
that account will be<font color="#E5E5E5"> used</font><font color="#CCCCCC"> in Vienna in</font>

472
00:26:10,249 --> 00:26:17,690
assembly<font color="#CCCCCC"> a complete a complete</font><font color="#E5E5E5"> execute</font>

473
00:26:14,059 --> 00:26:21,529
transaction to fill the second as a

474
00:26:17,690 --> 00:26:25,909
second response and this<font color="#E5E5E5"> is where these</font>

475
00:26:21,529 --> 00:26:28,789
guys managed to<font color="#CCCCCC"> lead</font><font color="#E5E5E5"> memory because so</font>

476
00:26:25,909 --> 00:26:31,399
initially you<font color="#E5E5E5"> had you have your</font><font color="#CCCCCC"> in data</font>

477
00:26:28,789 --> 00:26:32,269
buffer which is<font color="#E5E5E5"> pointing to a valid</font>

478
00:26:31,399 --> 00:26:34,309
location in

479
00:26:32,269 --> 00:26:36,950
<font color="#E5E5E5">a transaction</font><font color="#CCCCCC"> object and then you</font>

480
00:26:34,309 --> 00:26:39,200
<font color="#E5E5E5">increment</font><font color="#CCCCCC"> that account</font><font color="#E5E5E5"> so now the server</font>

481
00:26:36,950 --> 00:26:41,149
has just no idea that<font color="#E5E5E5"> it's going to</font>

482
00:26:39,200 --> 00:26:43,700
<font color="#CCCCCC">reach</font><font color="#E5E5E5"> memory and this is exactly what</font>

483
00:26:41,149 --> 00:26:48,428
happened<font color="#CCCCCC"> so these guys they exploited</font>

484
00:26:43,700 --> 00:26:50,929
that that issue<font color="#E5E5E5"> first to leak memory and</font>

485
00:26:48,429 --> 00:26:54,229
on that<font color="#E5E5E5"> picture you can see what very</font>

486
00:26:50,929 --> 00:26:57,769
basically some pool<font color="#CCCCCC"> hitters</font><font color="#E5E5E5"> so to know</font>

487
00:26:54,229 --> 00:27:01,129
whether well to know the<font color="#CCCCCC"> architecture of</font>

488
00:26:57,769 --> 00:27:04,309
the server<font color="#E5E5E5"> and also some pointers</font><font color="#CCCCCC"> where</font>

489
00:27:01,129 --> 00:27:06,949
for the<font color="#CCCCCC"> next step so what is the</font><font color="#E5E5E5"> next</font>

490
00:27:04,309 --> 00:27:12,019
step<font color="#CCCCCC"> you know this bug is not only about</font>

491
00:27:06,950 --> 00:27:15,049
<font color="#E5E5E5">leaking information it's it's on</font><font color="#CCCCCC"> RC so</font>

492
00:27:12,019 --> 00:27:17,719
it's where it gets a bit<font color="#CCCCCC"> more</font>

493
00:27:15,049 --> 00:27:20,059
<font color="#E5E5E5">interesting there are some functions</font>

494
00:27:17,719 --> 00:27:22,789
<font color="#E5E5E5">well innocent</font><font color="#CCCCCC"> Vivian they</font><font color="#E5E5E5"> are like tons</font>

495
00:27:20,059 --> 00:27:25,820
of<font color="#E5E5E5"> function</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can reach with just</font>

496
00:27:22,789 --> 00:27:28,158
one<font color="#E5E5E5"> transaction</font><font color="#CCCCCC"> so there is one which</font><font color="#E5E5E5"> is</font>

497
00:27:25,820 --> 00:27:31,718
that<font color="#CCCCCC"> query</font><font color="#E5E5E5"> path information function</font>

498
00:27:28,159 --> 00:27:34,579
which is using that in that<font color="#E5E5E5"> of Hilda and</font>

499
00:27:31,719 --> 00:27:37,219
<font color="#E5E5E5">actually it's resetting it</font><font color="#CCCCCC"> to a stack</font>

500
00:27:34,579 --> 00:27:39,859
buffer and that's<font color="#E5E5E5"> quite bad because in</font>

501
00:27:37,219 --> 00:27:42,349
this case when we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> eating the</font>

502
00:27:39,859 --> 00:27:44,658
secondary transaction<font color="#E5E5E5"> we are going to</font>

503
00:27:42,349 --> 00:27:45,279
use that in<font color="#E5E5E5"> data buffer</font><font color="#CCCCCC"> again to write</font>

504
00:27:44,659 --> 00:27:48,889
<font color="#E5E5E5">that out</font>

505
00:27:45,279 --> 00:27:52,249
we didn't take we didn't care about that

506
00:27:48,889 --> 00:27:54,289
<font color="#E5E5E5">when we were leaking memory but here we</font>

507
00:27:52,249 --> 00:27:56,209
do care about<font color="#CCCCCC"> that because when we</font><font color="#E5E5E5"> are</font>

508
00:27:54,289 --> 00:27:57,829
going<font color="#E5E5E5"> to use that in the lab ever we are</font>

509
00:27:56,209 --> 00:28:00,469
<font color="#CCCCCC">just going to write that hat to a stack</font>

510
00:27:57,829 --> 00:28:03,320
<font color="#E5E5E5">and this this</font><font color="#CCCCCC"> does not make any sense</font>

511
00:28:00,469 --> 00:28:05,599
<font color="#E5E5E5">this should be pointing to a pool so</font><font color="#CCCCCC"> we</font>

512
00:28:03,320 --> 00:28:08,928
end up<font color="#E5E5E5"> with a nice stack corruption</font>

513
00:28:05,599 --> 00:28:12,139
which can be abused<font color="#E5E5E5"> of course to</font><font color="#CCCCCC"> execute</font>

514
00:28:08,929 --> 00:28:15,019
<font color="#CCCCCC">arbitrary code</font><font color="#E5E5E5"> so the fastest way is of</font>

515
00:28:12,139 --> 00:28:18,168
course to overwrite a<font color="#E5E5E5"> return</font><font color="#CCCCCC"> address on</font>

516
00:28:15,019 --> 00:28:21,349
<font color="#E5E5E5">the stack and have it pointing right</font>

517
00:28:18,169 --> 00:28:25,219
somewhere somewhere in the pool<font color="#E5E5E5"> on</font>

518
00:28:21,349 --> 00:28:28,039
<font color="#E5E5E5">Windows 7 it doesn't make any difference</font>

519
00:28:25,219 --> 00:28:31,129
<font color="#CCCCCC">support is executable</font><font color="#E5E5E5"> so you can just</font>

520
00:28:28,039 --> 00:28:32,899
return anywhere and have<font color="#E5E5E5"> your shellcode</font>

521
00:28:31,129 --> 00:28:35,809
<font color="#E5E5E5">executed and that's it</font>

522
00:28:32,899 --> 00:28:39,090
again<font color="#CCCCCC"> that's quite a simple exploit</font>

523
00:28:35,809 --> 00:28:42,658
quite a reliable one<font color="#E5E5E5"> and</font>

524
00:28:39,090 --> 00:28:47,039
<font color="#CCCCCC">yes and quite a disastrous body</font><font color="#E5E5E5"> as well</font>

525
00:28:42,659 --> 00:28:49,440
so how did<font color="#CCCCCC"> we fix that thing the fix for</font>

526
00:28:47,039 --> 00:28:52,529
this one is a bit complicated because

527
00:28:49,440 --> 00:28:56,519
<font color="#E5E5E5">these days transactions they are just</font>

528
00:28:52,529 --> 00:29:02,129
all<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the places</font><font color="#CCCCCC"> so what we ended up</font>

529
00:28:56,519 --> 00:29:05,490
was to define<font color="#CCCCCC"> well to use that execute</font>

530
00:29:02,129 --> 00:29:07,980
flag for<font color="#CCCCCC"> a transaction and</font><font color="#E5E5E5"> so whenever a</font>

531
00:29:05,490 --> 00:29:10,889
transaction would be<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> we would</font>

532
00:29:07,980 --> 00:29:13,769
set<font color="#E5E5E5"> that execute flag so that in case</font>

533
00:29:10,889 --> 00:29:17,309
the secondary transaction would<font color="#E5E5E5"> come we</font>

534
00:29:13,769 --> 00:29:20,519
would<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that this is a</font><font color="#E5E5E5"> flag is already</font>

535
00:29:17,309 --> 00:29:23,730
set so we should just<font color="#CCCCCC"> drop it that was a</font>

536
00:29:20,519 --> 00:29:26,759
part<font color="#CCCCCC"> fixed another</font><font color="#E5E5E5"> part was to add lock</font>

537
00:29:23,730 --> 00:29:29,039
pretty much everywhere<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the code</font><font color="#E5E5E5"> so</font>

538
00:29:26,759 --> 00:29:30,419
that<font color="#E5E5E5"> to be sure that no other race</font>

539
00:29:29,039 --> 00:29:32,700
condition captain

540
00:29:30,419 --> 00:29:34,740
so typically you've got a lock on the

541
00:29:32,700 --> 00:29:36,629
connection object<font color="#E5E5E5"> and each time that</font>

542
00:29:34,740 --> 00:29:41,249
<font color="#CCCCCC">lock is set then you</font><font color="#E5E5E5"> can be sure that</font>

543
00:29:36,629 --> 00:29:44,639
there won't<font color="#E5E5E5"> be any overfed writing or</font>

544
00:29:41,249 --> 00:29:47,789
using the transaction<font color="#CCCCCC"> I hope that</font>

545
00:29:44,639 --> 00:29:51,209
districts would<font color="#E5E5E5"> be a robust we'll see</font>

546
00:29:47,789 --> 00:29:54,899
<font color="#E5E5E5">let's talk now about another one eternal</font>

547
00:29:51,210 --> 00:29:57,409
romance<font color="#E5E5E5"> this one was abusing two</font>

548
00:29:54,899 --> 00:30:00,959
separate authorities I quite like this

549
00:29:57,409 --> 00:30:07,019
this exploit<font color="#E5E5E5"> so the first one was again</font>

550
00:30:00,960 --> 00:30:09,360
an information<font color="#CCCCCC"> leak so we are again</font>

551
00:30:07,019 --> 00:30:15,480
talking about<font color="#CCCCCC"> transactions here</font><font color="#E5E5E5"> that's</font>

552
00:30:09,360 --> 00:30:19,529
at the<font color="#CCCCCC"> very heart of so this this</font><font color="#E5E5E5"> this</font>

553
00:30:15,480 --> 00:30:25,619
memory leak<font color="#E5E5E5"> happens when you send a</font>

554
00:30:19,529 --> 00:30:29,220
transaction<font color="#E5E5E5"> and you you try to</font><font color="#CCCCCC"> read some</font>

555
00:30:25,619 --> 00:30:34,289
bytes from a<font color="#E5E5E5"> pipe so varies in the in a</font>

556
00:30:29,220 --> 00:30:37,409
code for SLV<font color="#CCCCCC"> big</font><font color="#E5E5E5"> name time</font><font color="#CCCCCC"> restart big</font>

557
00:30:34,289 --> 00:30:40,919
name pipe varies varies<font color="#E5E5E5"> or something at</font>

558
00:30:37,409 --> 00:30:43,860
<font color="#E5E5E5">the end that specifies how much data is</font>

559
00:30:40,919 --> 00:30:48,179
available in<font color="#E5E5E5"> the pipe and what went</font>

560
00:30:43,860 --> 00:30:50,459
wrong here<font color="#E5E5E5"> is that we failed at checking</font>

561
00:30:48,179 --> 00:30:54,030
<font color="#E5E5E5">whether that</font>

562
00:30:50,460 --> 00:30:58,320
<font color="#E5E5E5">Dada was actually fitting in the</font>

563
00:30:54,030 --> 00:31:00,540
transaction object<font color="#E5E5E5"> so in the transaction</font>

564
00:30:58,320 --> 00:31:05,310
<font color="#CCCCCC">object you've got a pointer</font><font color="#E5E5E5"> which is</font>

565
00:31:00,540 --> 00:31:07,680
called out data<font color="#E5E5E5"> and the response so the</font>

566
00:31:05,310 --> 00:31:12,860
packet returned by the server would take

567
00:31:07,680 --> 00:31:17,360
that pointer and would copy that account

568
00:31:12,860 --> 00:31:21,209
<font color="#E5E5E5">bytes from this pointer and send them to</font>

569
00:31:17,360 --> 00:31:23,850
to the client<font color="#E5E5E5"> so since we</font><font color="#CCCCCC"> are not</font>

570
00:31:21,210 --> 00:31:26,010
validating that that account this<font color="#CCCCCC"> is</font>

571
00:31:23,850 --> 00:31:30,780
<font color="#CCCCCC">where the magnetic ount that I was</font>

572
00:31:26,010 --> 00:31:32,370
<font color="#E5E5E5">talking about earlier</font><font color="#CCCCCC"> can comes into</font>

573
00:31:30,780 --> 00:31:36,120
action<font color="#E5E5E5"> so the client is actually</font>

574
00:31:32,370 --> 00:31:39,929
<font color="#E5E5E5">specifying the amount of</font><font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> that it</font>

575
00:31:36,120 --> 00:31:43,229
can under and so in this exploit for

576
00:31:39,930 --> 00:31:46,350
example<font color="#E5E5E5"> it was set</font><font color="#CCCCCC"> to one</font><font color="#E5E5E5"> so which means</font>

577
00:31:43,230 --> 00:31:48,390
<font color="#E5E5E5">that only one bite could be read should</font>

578
00:31:46,350 --> 00:31:53,490
be sent by<font color="#E5E5E5"> the server</font>

579
00:31:48,390 --> 00:31:56,160
this of course<font color="#CCCCCC"> they don't work and what</font>

580
00:31:53,490 --> 00:32:00,000
happens is that<font color="#E5E5E5"> instead where the server</font>

581
00:31:56,160 --> 00:32:03,690
would just leak memory<font color="#E5E5E5"> starting at some</font>

582
00:32:00,000 --> 00:32:08,430
crazy offset in<font color="#CCCCCC"> any in</font><font color="#E5E5E5"> in the</font>

583
00:32:03,690 --> 00:32:10,170
transaction<font color="#E5E5E5"> object so I was mentioning</font><font color="#CCCCCC"> I</font>

584
00:32:08,430 --> 00:32:13,110
was talking about a crazy offset<font color="#CCCCCC"> why is</font>

585
00:32:10,170 --> 00:32:16,170
<font color="#CCCCCC">that so these guys whoever did is that</font>

586
00:32:13,110 --> 00:32:24,449
specifies a max parameter<font color="#CCCCCC"> account to be</font>

587
00:32:16,170 --> 00:32:28,530
set to<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> x5 for</font><font color="#E5E5E5"> 5400 why that number</font>

588
00:32:24,450 --> 00:32:31,950
<font color="#CCCCCC">well it turns out</font><font color="#E5E5E5"> that when we allocate</font>

589
00:32:28,530 --> 00:32:35,280
a transaction<font color="#CCCCCC"> object</font><font color="#E5E5E5"> there is some code</font>

590
00:32:31,950 --> 00:32:37,800
that<font color="#E5E5E5"> that checks how much data we</font><font color="#CCCCCC"> want</font>

591
00:32:35,280 --> 00:32:41,250
<font color="#E5E5E5">to</font><font color="#CCCCCC"> allocate and this transaction</font><font color="#E5E5E5"> subject</font>

592
00:32:37,800 --> 00:32:43,200
<font color="#E5E5E5">they are like the perfect target for an</font>

593
00:32:41,250 --> 00:32:47,760
attacker because there's<font color="#E5E5E5"> those objects</font>

594
00:32:43,200 --> 00:32:48,360
they<font color="#CCCCCC"> can be as big</font><font color="#E5E5E5"> as you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> and these</font>

595
00:32:47,760 --> 00:32:50,490
guys

596
00:32:48,360 --> 00:32:54,020
<font color="#E5E5E5">so this if I specified that max</font>

597
00:32:50,490 --> 00:32:58,140
parameter<font color="#E5E5E5"> account to that value so that</font>

598
00:32:54,020 --> 00:33:01,230
the<font color="#E5E5E5"> in data buffer would be with point</font>

599
00:32:58,140 --> 00:33:04,960
at the very end<font color="#CCCCCC"> of the packet</font><font color="#E5E5E5"> and see</font>

600
00:33:01,230 --> 00:33:07,779
<font color="#CCCCCC">the size of the minimum</font><font color="#E5E5E5"> size of a</font>

601
00:33:04,960 --> 00:33:12,340
transaction<font color="#E5E5E5"> is almost about this value</font>

602
00:33:07,779 --> 00:33:17,019
so<font color="#CCCCCC"> that would lead the server to read</font>

603
00:33:12,340 --> 00:33:19,629
data after<font color="#CCCCCC"> the bounds of of the</font>

604
00:33:17,019 --> 00:33:23,009
transaction object<font color="#E5E5E5"> so</font><font color="#CCCCCC"> here we've got our</font>

605
00:33:19,629 --> 00:33:28,539
memory again<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're able</font><font color="#E5E5E5"> to read data</font>

606
00:33:23,009 --> 00:33:31,330
<font color="#E5E5E5">the architecture etc etc let me talk now</font>

607
00:33:28,539 --> 00:33:35,769
<font color="#E5E5E5">about the second bugs and that's my</font>

608
00:33:31,330 --> 00:33:38,590
<font color="#E5E5E5">favorite one this one is disastrous so</font>

609
00:33:35,769 --> 00:33:42,360
before that let<font color="#CCCCCC"> me talk about there's</font>

610
00:33:38,590 --> 00:33:46,389
<font color="#E5E5E5">this request there's</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> annex request</font>

611
00:33:42,360 --> 00:33:48,850
so with this request<font color="#E5E5E5"> you're normally</font>

612
00:33:46,389 --> 00:33:51,399
supposed<font color="#E5E5E5"> to write data to a file to a</font>

613
00:33:48,850 --> 00:33:54,340
pipe or<font color="#CCCCCC"> something that is and according</font>

614
00:33:51,399 --> 00:33:57,908
to<font color="#CCCCCC"> a specification</font><font color="#E5E5E5"> if you've got a lot</font>

615
00:33:54,340 --> 00:34:00,699
of<font color="#E5E5E5"> data</font><font color="#CCCCCC"> you can split this des</font><font color="#E5E5E5"> request</font>

616
00:33:57,909 --> 00:34:03,340
into several and so how does<font color="#CCCCCC"> that thing</font>

617
00:34:00,700 --> 00:34:06,190
<font color="#E5E5E5">work</font><font color="#CCCCCC"> it's pretty much</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> with</font>

618
00:34:03,340 --> 00:34:10,710
transaction<font color="#E5E5E5"> you you've got this field</font>

619
00:34:06,190 --> 00:34:13,149
<font color="#CCCCCC">total</font><font color="#E5E5E5"> account and I know you've sent</font>

620
00:34:10,710 --> 00:34:16,000
that account you<font color="#E5E5E5"> see that that account</font>

621
00:34:13,149 --> 00:34:19,270
is lower than total<font color="#E5E5E5"> dragon so you know</font>

622
00:34:16,000 --> 00:34:22,300
that more packets are<font color="#E5E5E5"> coming and how as</font>

623
00:34:19,270 --> 00:34:24,129
a server can fight that packets let's

624
00:34:22,300 --> 00:34:26,440
say that<font color="#E5E5E5"> you send like five different</font>

625
00:34:24,129 --> 00:34:29,290
<font color="#CCCCCC">write annex requests all of them</font>

626
00:34:26,440 --> 00:34:31,089
requiring more data so what happens is

627
00:34:29,290 --> 00:34:33,520
that the server<font color="#E5E5E5"> is going to use a</font>

628
00:34:31,089 --> 00:34:36,279
function<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> SRV find</font>

629
00:34:33,520 --> 00:34:39,790
transaction based on several<font color="#E5E5E5"> information</font>

630
00:34:36,280 --> 00:34:47,020
<font color="#E5E5E5">found in</font><font color="#CCCCCC"> the packet and</font><font color="#E5E5E5"> this is where</font>

631
00:34:39,790 --> 00:34:50,679
things go wild<font color="#CCCCCC"> this this find SRV find</font>

632
00:34:47,020 --> 00:34:53,379
transaction<font color="#E5E5E5"> it's also used in in the</font>

633
00:34:50,679 --> 00:34:56,649
transaction<font color="#E5E5E5"> requests so in the case</font><font color="#CCCCCC"> of</font>

634
00:34:53,379 --> 00:35:00,069
the right<font color="#CCCCCC"> Enix</font><font color="#E5E5E5"> request where when we</font>

635
00:34:56,649 --> 00:35:03,339
write data to to the transaction object

636
00:35:00,069 --> 00:35:06,670
<font color="#E5E5E5">we are using the indirect pointer but in</font>

637
00:35:03,339 --> 00:35:09,040
this in<font color="#CCCCCC"> these particular</font><font color="#E5E5E5"> cases we are</font>

638
00:35:06,670 --> 00:35:11,740
each time we<font color="#CCCCCC"> are received some data we</font>

639
00:35:09,040 --> 00:35:14,590
are incrementing<font color="#E5E5E5"> the indebted pointer</font>

640
00:35:11,740 --> 00:35:18,580
and this is where things go by

641
00:35:14,590 --> 00:35:20,830
because if you look at the code for that

642
00:35:18,580 --> 00:35:23,620
<font color="#E5E5E5">under the secondary transaction you'll</font>

643
00:35:20,830 --> 00:35:27,310
see<font color="#E5E5E5"> that instead</font><font color="#CCCCCC"> as we</font><font color="#E5E5E5"> in data pointer</font>

644
00:35:23,620 --> 00:35:29,770
is always a remains remains<font color="#CCCCCC"> the same</font>

645
00:35:27,310 --> 00:35:32,529
<font color="#E5E5E5">which means</font><font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> have a</font>

646
00:35:29,770 --> 00:35:35,650
<font color="#E5E5E5">transaction</font><font color="#CCCCCC"> cross over</font><font color="#E5E5E5"> this is how we</font>

647
00:35:32,530 --> 00:35:37,750
<font color="#CCCCCC">called</font><font color="#E5E5E5"> it where you</font><font color="#CCCCCC"> have a write</font><font color="#E5E5E5"> annex</font>

648
00:35:35,650 --> 00:35:41,620
request followed by a secondary

649
00:35:37,750 --> 00:35:44,590
transaction that<font color="#E5E5E5"> will be abusing that in</font>

650
00:35:41,620 --> 00:35:47,020
that<font color="#E5E5E5"> a pointer and this is this</font><font color="#CCCCCC"> is</font>

651
00:35:44,590 --> 00:35:49,540
disastrous<font color="#CCCCCC"> because now you're able to</font>

652
00:35:47,020 --> 00:35:53,710
<font color="#CCCCCC">write</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> out out of bounds of the</font>

653
00:35:49,540 --> 00:35:56,200
transaction object<font color="#E5E5E5"> and the crazy things</font>

654
00:35:53,710 --> 00:35:58,810
about<font color="#E5E5E5"> this is of course you have set can</font>

655
00:35:56,200 --> 00:36:00,669
<font color="#CCCCCC">be controlled</font><font color="#E5E5E5"> so you fabricated your</font>

656
00:35:58,810 --> 00:36:03,310
object in the pool and<font color="#CCCCCC"> you're able</font><font color="#E5E5E5"> to</font>

657
00:36:00,670 --> 00:36:06,400
<font color="#E5E5E5">write</font><font color="#CCCCCC"> that out</font><font color="#E5E5E5"> basically anywhere after</font>

658
00:36:03,310 --> 00:36:10,299
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so it's it's a really</font><font color="#CCCCCC"> interesting</font>

659
00:36:06,400 --> 00:36:14,320
but in terms of<font color="#E5E5E5"> writing and exploit how</font>

660
00:36:10,300 --> 00:36:17,350
did these guys exploit it well if you

661
00:36:14,320 --> 00:36:19,780
try to exploit that<font color="#CCCCCC"> bug you soon figure</font>

662
00:36:17,350 --> 00:36:22,299
out that it's really<font color="#E5E5E5"> really</font><font color="#CCCCCC"> easy to have</font>

663
00:36:19,780 --> 00:36:26,230
<font color="#E5E5E5">a write an arbitrary write primitive</font>

664
00:36:22,300 --> 00:36:28,870
this is because transactions object<font color="#E5E5E5"> have</font>

665
00:36:26,230 --> 00:36:35,950
been made such<font color="#E5E5E5"> that there is a pointer</font>

666
00:36:28,870 --> 00:36:39,759
<font color="#CCCCCC">to the in data object written at at</font><font color="#E5E5E5"> port</font>

667
00:36:35,950 --> 00:36:42,069
<font color="#E5E5E5">0 of cetera so if you if you spray the</font>

668
00:36:39,760 --> 00:36:43,690
pool with several transaction<font color="#CCCCCC"> object and</font>

669
00:36:42,070 --> 00:36:47,710
you happen to<font color="#CCCCCC"> overwrite that pointer</font>

670
00:36:43,690 --> 00:36:50,170
then you'll be<font color="#E5E5E5"> typically able to write</font>

671
00:36:47,710 --> 00:36:54,870
data at an arbitrary<font color="#E5E5E5"> location when</font><font color="#CCCCCC"> you</font>

672
00:36:50,170 --> 00:36:56,710
send a secondary request to<font color="#CCCCCC"> to</font>

673
00:36:54,870 --> 00:37:02,740
transaction<font color="#CCCCCC"> object that has been</font>

674
00:36:56,710 --> 00:37:05,950
overwritten regarding more of their

675
00:37:02,740 --> 00:37:08,049
exploit<font color="#E5E5E5"> varies yeah very something</font><font color="#CCCCCC"> that</font>

676
00:37:05,950 --> 00:37:11,799
I'm<font color="#CCCCCC"> not very sure</font><font color="#E5E5E5"> of that</font>

677
00:37:08,050 --> 00:37:15,520
these guys they used a sequence of three

678
00:37:11,800 --> 00:37:19,080
different transactions to to to to

679
00:37:15,520 --> 00:37:21,700
<font color="#E5E5E5">exploit that that issue to are enough</font>

680
00:37:19,080 --> 00:37:24,790
trust<font color="#E5E5E5"> me about</font><font color="#CCCCCC"> it</font>

681
00:37:21,700 --> 00:37:28,609
so these guys

682
00:37:24,790 --> 00:37:31,250
actually here is to get an arbitrary

683
00:37:28,610 --> 00:37:34,720
primitive and what<font color="#CCCCCC"> this guy's did the</font>

684
00:37:31,250 --> 00:37:38,360
first over<font color="#CCCCCC"> route as we ended a buffer of</font>

685
00:37:34,720 --> 00:37:41,149
a second transaction<font color="#E5E5E5"> in the pool and</font>

686
00:37:38,360 --> 00:37:44,540
then<font color="#E5E5E5"> they use that second transaction to</font>

687
00:37:41,150 --> 00:37:47,270
overwrite the out data buffer<font color="#CCCCCC"> a pointer</font>

688
00:37:44,540 --> 00:37:50,570
of<font color="#E5E5E5"> third transaction in the pool well</font>

689
00:37:47,270 --> 00:37:52,880
that works<font color="#E5E5E5"> in Vienna</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> just be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

690
00:37:50,570 --> 00:37:57,200
reference that first transaction to read

691
00:37:52,880 --> 00:37:59,900
<font color="#E5E5E5">data anywhere in a pool and yeah that</font>

692
00:37:57,200 --> 00:38:01,850
indeed works<font color="#E5E5E5"> but it just required an</font>

693
00:37:59,900 --> 00:38:06,410
additional transaction I'm not sure

694
00:38:01,850 --> 00:38:06,950
exactly why<font color="#CCCCCC"> we did that but it really it</font>

695
00:38:06,410 --> 00:38:12,410
works

696
00:38:06,950 --> 00:38:15,649
so what<font color="#E5E5E5"> once they had that read and</font>

697
00:38:12,410 --> 00:38:19,279
write primitive what did we do

698
00:38:15,650 --> 00:38:23,600
again we are<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about Windows seven</font>

699
00:38:19,280 --> 00:38:28,010
here<font color="#CCCCCC"> we will talk</font><font color="#E5E5E5"> about another exploit</font>

700
00:38:23,600 --> 00:38:31,910
<font color="#E5E5E5">later but this this thing was just about</font>

701
00:38:28,010 --> 00:38:36,560
like<font color="#E5E5E5"> finding read write an executable</font>

702
00:38:31,910 --> 00:38:39,890
section somewhere in memory<font color="#E5E5E5"> so yeah so</font>

703
00:38:36,560 --> 00:38:43,250
what<font color="#E5E5E5"> in on Windows 7 you don't have</font>

704
00:38:39,890 --> 00:38:45,790
anything like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> so what is guess what</font>

705
00:38:43,250 --> 00:38:49,040
these guys did was just to reference

706
00:38:45,790 --> 00:38:51,380
<font color="#E5E5E5">somewhere in the pool that</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> be of</font>

707
00:38:49,040 --> 00:38:53,509
course executable put their data here

708
00:38:51,380 --> 00:38:58,280
<font color="#E5E5E5">and that's it and job done</font>

709
00:38:53,510 --> 00:39:01,520
the only<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that's a remarkable is</font>

710
00:38:58,280 --> 00:39:04,220
that to trigger their payload the

711
00:39:01,520 --> 00:39:05,960
instead<font color="#E5E5E5"> of just like</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> over</font>

712
00:39:04,220 --> 00:39:09,439
<font color="#E5E5E5">writing a stack pointer or something</font>

713
00:39:05,960 --> 00:39:12,470
very instead<font color="#E5E5E5"> over root pointer in an</font>

714
00:39:09,440 --> 00:39:16,280
array of function<font color="#E5E5E5"> in a dispatch table so</font>

715
00:39:12,470 --> 00:39:19,430
that<font color="#E5E5E5"> with a particular SMB request sent</font>

716
00:39:16,280 --> 00:39:22,850
to a server they would be sure that we

717
00:39:19,430 --> 00:39:28,100
would<font color="#E5E5E5"> get cut</font><font color="#CCCCCC"> addiction</font><font color="#E5E5E5"> so that that was</font>

718
00:39:22,850 --> 00:39:32,740
<font color="#CCCCCC">an that</font><font color="#E5E5E5"> was quite a good exploit yep so</font>

719
00:39:28,100 --> 00:39:32,740
yeah I<font color="#E5E5E5"> just</font><font color="#CCCCCC"> talked about all of this</font>

720
00:39:36,260 --> 00:39:48,090
hold on<font color="#CCCCCC"> I I was not I</font><font color="#E5E5E5"> was yeah sorry</font>

721
00:39:44,520 --> 00:39:50,220
guys<font color="#CCCCCC"> so let's talk</font><font color="#E5E5E5"> now about eternal</font>

722
00:39:48,090 --> 00:39:56,130
<font color="#CCCCCC">energy as the last one so this one</font>

723
00:39:50,220 --> 00:39:59,640
actually<font color="#E5E5E5"> doesn't use any any elitism</font><font color="#CCCCCC"> so</font>

724
00:39:56,130 --> 00:40:02,750
what you can quickly see when you do a

725
00:39:59,640 --> 00:40:05,940
wireshark capture is that the first

726
00:40:02,750 --> 00:40:07,950
packets are sent<font color="#E5E5E5"> just to triggers a</font>

727
00:40:05,940 --> 00:40:11,100
memory<font color="#CCCCCC"> that we see you that we saw in</font>

728
00:40:07,950 --> 00:40:14,730
eternal<font color="#CCCCCC"> champions so again they use that</font>

729
00:40:11,100 --> 00:40:17,940
<font color="#CCCCCC">race condition which is quite quite</font>

730
00:40:14,730 --> 00:40:21,060
reliable to leak memory<font color="#E5E5E5"> and and that's</font>

731
00:40:17,940 --> 00:40:26,250
it if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> next the next</font><font color="#CCCCCC"> step was to</font>

732
00:40:21,060 --> 00:40:28,529
<font color="#E5E5E5">get the RC remote code execution bug</font><font color="#CCCCCC"> has</font>

733
00:40:26,250 --> 00:40:31,260
eternal<font color="#CCCCCC"> romance</font><font color="#E5E5E5"> the only difference</font>

734
00:40:28,530 --> 00:40:33,990
between eternal Romans<font color="#E5E5E5"> and this one</font>

735
00:40:31,260 --> 00:40:35,850
<font color="#E5E5E5">eternal</font><font color="#CCCCCC"> synergy is the target on this</font>

736
00:40:33,990 --> 00:40:38,609
one these guys they want you to target

737
00:40:35,850 --> 00:40:42,690
<font color="#E5E5E5">Windows 8 and on</font><font color="#CCCCCC"> Windows 8</font><font color="#E5E5E5"> the pool</font>

738
00:40:38,610 --> 00:40:46,080
wasn't made exploitable<font color="#CCCCCC"> so they had to</font>

739
00:40:42,690 --> 00:40:49,980
figure<font color="#E5E5E5"> out a</font><font color="#CCCCCC"> different way to execute</font>

740
00:40:46,080 --> 00:40:53,880
<font color="#E5E5E5">our code but it turned out that on</font>

741
00:40:49,980 --> 00:40:56,940
Windows<font color="#E5E5E5"> 8 the anti binary you can you</font>

742
00:40:53,880 --> 00:40:59,850
can see<font color="#E5E5E5"> that were some read write and</font>

743
00:40:56,940 --> 00:41:02,910
execute sections in<font color="#E5E5E5"> it so what we</font><font color="#CCCCCC"> did</font>

744
00:40:59,850 --> 00:41:05,279
was<font color="#E5E5E5"> just used abuse that read and write</font>

745
00:41:02,910 --> 00:41:09,029
primitive that they had<font color="#E5E5E5"> just write their</font>

746
00:41:05,280 --> 00:41:12,780
data to<font color="#E5E5E5"> that section and then yeah that</font>

747
00:41:09,030 --> 00:41:15,390
was that<font color="#CCCCCC"> was a so remaining was exactly</font>

748
00:41:12,780 --> 00:41:19,050
the<font color="#E5E5E5"> same the over</font><font color="#CCCCCC"> wrote</font><font color="#E5E5E5"> a pointer in the</font>

749
00:41:15,390 --> 00:41:21,180
<font color="#E5E5E5">dispatch table and then yeah that was it</font>

750
00:41:19,050 --> 00:41:23,310
you just send a<font color="#CCCCCC"> part search</font><font color="#E5E5E5"> request to</font>

751
00:41:21,180 --> 00:41:25,529
that<font color="#E5E5E5"> server and</font><font color="#CCCCCC"> you've got your you got</font>

752
00:41:23,310 --> 00:41:29,430
your cutting section so yeah<font color="#E5E5E5"> quite a</font>

753
00:41:25,530 --> 00:41:32,940
good exploit as well none of<font color="#CCCCCC"> these</font>

754
00:41:29,430 --> 00:41:38,370
exploits<font color="#E5E5E5"> worked directly on Windows 10</font>

755
00:41:32,940 --> 00:41:40,740
<font color="#E5E5E5">and yeah</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> I'm an exploiter so I I</font>

756
00:41:38,370 --> 00:41:43,630
thought I would have preferred to<font color="#E5E5E5"> see</font>

757
00:41:40,740 --> 00:41:46,299
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> I mean</font>

758
00:41:43,630 --> 00:41:48,930
current exploit<font color="#E5E5E5"> for Windows 10 is not</font>

759
00:41:46,300 --> 00:41:53,050
something that<font color="#E5E5E5"> you see every every day</font>

760
00:41:48,930 --> 00:41:55,480
but on Windows<font color="#E5E5E5"> 10 and specifically on</font>

761
00:41:53,050 --> 00:41:56,550
<font color="#E5E5E5">the latest versions we've got several</font>

762
00:41:55,480 --> 00:42:01,240
<font color="#E5E5E5">mediations</font>

763
00:41:56,550 --> 00:42:06,180
<font color="#E5E5E5">that make this exploit fail</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> default</font>

764
00:42:01,240 --> 00:42:09,160
so for example all these features<font color="#E5E5E5"> like</font>

765
00:42:06,180 --> 00:42:11,379
executing data<font color="#CCCCCC"> in the pool yeah</font><font color="#E5E5E5"> this</font>

766
00:42:09,160 --> 00:42:15,339
this is gone<font color="#E5E5E5"> this doesn't work anymore</font>

767
00:42:11,380 --> 00:42:18,430
<font color="#CCCCCC">so I know</font><font color="#E5E5E5"> that you guys are hackers and</font>

768
00:42:15,340 --> 00:42:20,290
I<font color="#CCCCCC"> believe that if you have if</font><font color="#E5E5E5"> you know</font>

769
00:42:18,430 --> 00:42:22,810
about<font color="#CCCCCC"> something like this like how to</font>

770
00:42:20,290 --> 00:42:25,029
<font color="#E5E5E5">make the</font><font color="#CCCCCC"> full executable</font><font color="#E5E5E5"> or how to find</font>

771
00:42:22,810 --> 00:42:26,230
out some read write and execute section

772
00:42:25,030 --> 00:42:28,690
somewhere in the kernel

773
00:42:26,230 --> 00:42:32,350
you should probably report it to us<font color="#CCCCCC"> cuz</font>

774
00:42:28,690 --> 00:42:36,010
I believe<font color="#CCCCCC"> that it might</font><font color="#E5E5E5"> qualify for the</font>

775
00:42:32,350 --> 00:42:39,460
bounty submissions and<font color="#CCCCCC"> you'd get</font><font color="#E5E5E5"> of</font>

776
00:42:36,010 --> 00:42:42,460
course a reward for that<font color="#E5E5E5"> the other thing</font>

777
00:42:39,460 --> 00:42:47,860
that I<font color="#E5E5E5"> quite like is know that we've got</font>

778
00:42:42,460 --> 00:42:49,990
<font color="#E5E5E5">kernel CFG so you cannot just overwrite</font>

779
00:42:47,860 --> 00:42:53,020
<font color="#E5E5E5">like a pointer in the dispatch</font><font color="#CCCCCC"> table and</font>

780
00:42:49,990 --> 00:42:55,000
just have it executing<font color="#E5E5E5"> yeah that that</font>

781
00:42:53,020 --> 00:42:58,620
<font color="#E5E5E5">won't work as the system won't let you</font>

782
00:42:55,000 --> 00:43:01,510
do<font color="#E5E5E5"> that you can always try to bypass it</font>

783
00:42:58,620 --> 00:43:04,720
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you probably spend some time late</font>

784
00:43:01,510 --> 00:43:06,910
and then<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> the rest mitigation that</font>

785
00:43:04,720 --> 00:43:10,629
<font color="#E5E5E5">I'm going to talk</font><font color="#CCCCCC"> about is the fact</font><font color="#E5E5E5"> that</font>

786
00:43:06,910 --> 00:43:13,180
on<font color="#CCCCCC"> craters</font><font color="#E5E5E5"> floor so which is which would</font>

787
00:43:10,630 --> 00:43:17,380
be released<font color="#CCCCCC"> later this year</font>

788
00:43:13,180 --> 00:43:20,770
SMB v1 will be disabled by default<font color="#CCCCCC"> so</font>

789
00:43:17,380 --> 00:43:23,140
yeah<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> this protocol</font>

790
00:43:20,770 --> 00:43:25,570
<font color="#CCCCCC">this doesn't mean that</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> not going</font>

791
00:43:23,140 --> 00:43:27,730
<font color="#CCCCCC">to support it we do care about this if</font>

792
00:43:25,570 --> 00:43:30,810
you<font color="#E5E5E5"> if you've got some bugs</font><font color="#CCCCCC"> we fix</font><font color="#E5E5E5"> them</font>

793
00:43:27,730 --> 00:43:34,480
but we<font color="#E5E5E5"> are just going to duplicate it</font>

794
00:43:30,810 --> 00:43:36,779
<font color="#E5E5E5">these</font><font color="#CCCCCC"> dissing</font><font color="#E5E5E5"> state bugs from so long</font>

795
00:43:34,480 --> 00:43:43,950
ago<font color="#CCCCCC"> yeah it's time to move to something</font>

796
00:43:36,780 --> 00:43:48,910
to<font color="#E5E5E5"> something more secure so what else</font>

797
00:43:43,950 --> 00:43:53,169
did we do so I just<font color="#E5E5E5"> focused so far on</font><font color="#CCCCCC"> 6</font>

798
00:43:48,910 --> 00:43:56,799
bugs<font color="#E5E5E5"> that we've received when I saw that</font>

799
00:43:53,170 --> 00:43:59,230
<font color="#E5E5E5">6 box I was like</font><font color="#CCCCCC"> fan must be averse eh</font>

800
00:43:56,800 --> 00:44:00,910
it's not<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> des bugs they are they</font>

801
00:43:59,230 --> 00:44:03,450
<font color="#CCCCCC">are so critical</font>

802
00:44:00,910 --> 00:44:07,120
yeah<font color="#E5E5E5"> they must</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> overs in the code so</font>

803
00:44:03,450 --> 00:44:09,580
<font color="#CCCCCC">we around we did some research on that</font>

804
00:44:07,120 --> 00:44:12,490
<font color="#E5E5E5">code I was absolutely not familiar with</font>

805
00:44:09,580 --> 00:44:15,580
<font color="#E5E5E5">that and in Vienna</font><font color="#CCCCCC"> I believe</font><font color="#E5E5E5"> that we</font>

806
00:44:12,490 --> 00:44:17,709
sixth<font color="#E5E5E5"> twenty something like that so on</font>

807
00:44:15,580 --> 00:44:23,860
the next slide<font color="#E5E5E5"> I'm just going to show</font>

808
00:44:17,710 --> 00:44:27,310
you that we fixed so I start with a flow

809
00:44:23,860 --> 00:44:29,530
in that create options<font color="#E5E5E5"> function so when</font>

810
00:44:27,310 --> 00:44:32,380
you look<font color="#E5E5E5"> at the code so that</font><font color="#CCCCCC"> code is</font>

811
00:44:29,530 --> 00:44:35,590
quite<font color="#E5E5E5"> huge</font><font color="#CCCCCC"> actually so I believe that as</font>

812
00:44:32,380 --> 00:44:38,500
<font color="#E5E5E5">a survey that</font><font color="#CCCCCC"> sis DL</font><font color="#E5E5E5"> is around 300</font>

813
00:44:35,590 --> 00:44:41,710
kilobytes<font color="#CCCCCC"> so we are still</font><font color="#E5E5E5"> like a few</font>

814
00:44:38,500 --> 00:44:44,200
function to to look at and so we

815
00:44:41,710 --> 00:44:46,600
essentially focused our research on the

816
00:44:44,200 --> 00:44:49,419
transaction area<font color="#CCCCCC"> and for example when</font>

817
00:44:46,600 --> 00:44:51,640
you look<font color="#CCCCCC"> at this function which can be</font>

818
00:44:49,420 --> 00:44:55,240
<font color="#CCCCCC">code</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example with an SMB open</font>

819
00:44:51,640 --> 00:44:58,509
<font color="#E5E5E5">request you can see that there are some</font>

820
00:44:55,240 --> 00:45:01,810
checks<font color="#E5E5E5"> at some</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> whether</font><font color="#CCCCCC"> V assembly</font>

821
00:44:58,510 --> 00:45:04,510
contains<font color="#E5E5E5"> some extra arguments it turns</font>

822
00:45:01,810 --> 00:45:07,630
out that in this case<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example we</font>

823
00:45:04,510 --> 00:45:11,650
<font color="#CCCCCC">were not checking correctly if the size</font>

824
00:45:07,630 --> 00:45:14,530
of V allocated out<font color="#E5E5E5"> data buffer was</font>

825
00:45:11,650 --> 00:45:19,540
enough<font color="#E5E5E5"> so we would</font><font color="#CCCCCC"> end up with an out</font>

826
00:45:14,530 --> 00:45:22,950
have gone right<font color="#E5E5E5"> of 20 bytes in</font><font color="#CCCCCC"> X - yeah</font>

827
00:45:19,540 --> 00:45:27,520
we<font color="#E5E5E5"> don't want that fixed what else</font>

828
00:45:22,950 --> 00:45:31,210
<font color="#E5E5E5">something a bit more subtle let's say in</font>

829
00:45:27,520 --> 00:45:33,940
the NT transaction code<font color="#E5E5E5"> they were this</font>

830
00:45:31,210 --> 00:45:36,160
code is<font color="#E5E5E5"> very complicated it's quite ugly</font>

831
00:45:33,940 --> 00:45:39,790
to look at if you<font color="#CCCCCC"> in my</font><font color="#E5E5E5"> opinion but</font>

832
00:45:36,160 --> 00:45:42,129
anyway we had<font color="#E5E5E5"> a look and you can</font><font color="#CCCCCC"> see</font>

833
00:45:39,790 --> 00:45:45,430
that at some point<font color="#CCCCCC"> the code is making</font>

834
00:45:42,130 --> 00:45:48,400
some assumptions on different values<font color="#E5E5E5"> a</font>

835
00:45:45,430 --> 00:45:51,069
set in in the transaction<font color="#E5E5E5"> and one of</font>

836
00:45:48,400 --> 00:45:54,130
them is a<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> count field we haven't</font>

837
00:45:51,070 --> 00:45:55,870
talked about<font color="#E5E5E5"> that so at one</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> the</font>

838
00:45:54,130 --> 00:45:58,600
code words<font color="#E5E5E5"> making an assumption and</font>

839
00:45:55,870 --> 00:46:01,240
<font color="#E5E5E5">setup count and at</font><font color="#CCCCCC"> another point it was</font>

840
00:45:58,600 --> 00:46:04,089
<font color="#E5E5E5">making another assumption</font><font color="#CCCCCC"> but this time</font>

841
00:46:01,240 --> 00:46:07,149
based<font color="#E5E5E5"> on max setup count so since that</font>

842
00:46:04,090 --> 00:46:10,600
<font color="#E5E5E5">two values are</font><font color="#CCCCCC"> different they are not</font>

843
00:46:07,150 --> 00:46:12,790
<font color="#E5E5E5">the same we we had we had</font>

844
00:46:10,600 --> 00:46:15,279
like yeah<font color="#E5E5E5"> well if there was an issue in</font>

845
00:46:12,790 --> 00:46:20,230
<font color="#CCCCCC">that</font><font color="#E5E5E5"> good so this would typically end up</font>

846
00:46:15,280 --> 00:46:22,240
in another<font color="#E5E5E5"> pool overflow in</font><font color="#CCCCCC"> inner code</font>

847
00:46:20,230 --> 00:46:25,300
and of course<font color="#E5E5E5"> we fixed it</font>

848
00:46:22,240 --> 00:46:28,029
what else<font color="#CCCCCC"> something something</font>

849
00:46:25,300 --> 00:46:30,040
I'd say a bit more<font color="#E5E5E5"> subtile</font><font color="#CCCCCC"> but yeah when</font>

850
00:46:28,030 --> 00:46:32,680
you<font color="#CCCCCC"> look at the code for</font><font color="#E5E5E5"> restart right</font>

851
00:46:30,040 --> 00:46:36,850
<font color="#CCCCCC">named pipe various dysfunction is quite</font>

852
00:46:32,680 --> 00:46:41,770
small<font color="#E5E5E5"> but very something it's like it's</font>

853
00:46:36,850 --> 00:46:44,110
<font color="#E5E5E5">visiting some</font><font color="#CCCCCC"> Sun some values and and</font>

854
00:46:41,770 --> 00:46:48,460
then you see that it's trying<font color="#E5E5E5"> to write</font>

855
00:46:44,110 --> 00:46:51,700
something<font color="#E5E5E5"> to to support the out</font>

856
00:46:48,460 --> 00:46:55,390
parameter buffer but the thing is that

857
00:46:51,700 --> 00:46:57,879
<font color="#E5E5E5">we've got</font><font color="#CCCCCC"> these fields like max data</font>

858
00:46:55,390 --> 00:47:00,670
max<font color="#E5E5E5"> data count max parameter counts</font>

859
00:46:57,880 --> 00:47:04,360
these fields are specifically used<font color="#E5E5E5"> to</font>

860
00:47:00,670 --> 00:47:06,520
allocate<font color="#E5E5E5"> the out parameter and out the</font>

861
00:47:04,360 --> 00:47:09,070
buffer but<font color="#E5E5E5"> in that case there was</font>

862
00:47:06,520 --> 00:47:12,550
nothing in that<font color="#E5E5E5"> code that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> checking</font>

863
00:47:09,070 --> 00:47:14,740
if we could actually write<font color="#E5E5E5"> data to that</font>

864
00:47:12,550 --> 00:47:17,920
out<font color="#CCCCCC"> parameter buffer</font><font color="#E5E5E5"> so in the worst</font>

865
00:47:14,740 --> 00:47:22,120
<font color="#E5E5E5">case we would go</font><font color="#CCCCCC"> of by</font><font color="#E5E5E5"> 2 here this is</font>

866
00:47:17,920 --> 00:47:24,460
fixed let's come back to that<font color="#CCCCCC"> NT rename</font>

867
00:47:22,120 --> 00:47:28,420
function that the shadow brokers have

868
00:47:24,460 --> 00:47:30,640
been<font color="#E5E5E5"> I mean whoever would as I turn</font><font color="#CCCCCC"> on</font>

869
00:47:28,420 --> 00:47:32,920
exploits<font color="#E5E5E5"> have been using so what is that</font>

870
00:47:30,640 --> 00:47:36,720
<font color="#CCCCCC">function</font><font color="#E5E5E5"> that function</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> she does</font>

871
00:47:32,920 --> 00:47:40,600
nothing<font color="#E5E5E5"> as I told you</font><font color="#CCCCCC"> before it was just</font>

872
00:47:36,720 --> 00:47:44,410
similar<font color="#E5E5E5"> to the SMB eco function because</font>

873
00:47:40,600 --> 00:47:50,319
just<font color="#E5E5E5"> echoing the original packet that we</font>

874
00:47:44,410 --> 00:47:54,339
sent and so what we found<font color="#E5E5E5"> was for an</font>

875
00:47:50,320 --> 00:47:57,610
exploit this function is amazing it's

876
00:47:54,340 --> 00:48:01,270
amazing<font color="#E5E5E5"> say that you've got a big</font>

877
00:47:57,610 --> 00:48:03,670
<font color="#CCCCCC">transaction</font><font color="#E5E5E5"> and you're coding that until</font>

878
00:48:01,270 --> 00:48:05,950
you rename function and then you use for

879
00:48:03,670 --> 00:48:10,270
<font color="#CCCCCC">example the out of bound issue that</font>

880
00:48:05,950 --> 00:48:12,910
eternal<font color="#E5E5E5"> Romans was using to overwrite</font>

881
00:48:10,270 --> 00:48:16,960
some<font color="#CCCCCC"> fields in the transaction object</font>

882
00:48:12,910 --> 00:48:20,500
<font color="#CCCCCC">and since that original buffer is huge</font>

883
00:48:16,960 --> 00:48:21,960
<font color="#CCCCCC">as a server will need to</font><font color="#E5E5E5"> response</font><font color="#CCCCCC"> at</font>

884
00:48:20,500 --> 00:48:24,480
least<font color="#E5E5E5"> when you</font>

885
00:48:21,960 --> 00:48:27,450
we need to send two packets to a client

886
00:48:24,480 --> 00:48:30,330
<font color="#E5E5E5">and because of that function there was</font>

887
00:48:27,450 --> 00:48:33,359
absolutely no validation<font color="#E5E5E5"> on that account</font>

888
00:48:30,330 --> 00:48:36,330
<font color="#E5E5E5">parameter count and</font><font color="#CCCCCC"> setup count values</font>

889
00:48:33,359 --> 00:48:39,869
<font color="#E5E5E5">so you could just overwrite this field</font>

890
00:48:36,330 --> 00:48:44,009
and read<font color="#E5E5E5"> back like anything you</font><font color="#CCCCCC"> wanted</font>

891
00:48:39,869 --> 00:48:47,160
in<font color="#E5E5E5"> memory and this was even worse if you</font>

892
00:48:44,010 --> 00:48:49,950
were<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this bug in in the</font>

893
00:48:47,160 --> 00:48:52,589
secondary function<font color="#E5E5E5"> transactions where</font>

894
00:48:49,950 --> 00:48:55,109
you would be allocating data and then

895
00:48:52,589 --> 00:48:59,820
you you could specify an offset<font color="#E5E5E5"> where</font>

896
00:48:55,109 --> 00:49:03,150
you<font color="#E5E5E5"> wanted to to write the</font><font color="#CCCCCC"> data buffer</font>

897
00:48:59,820 --> 00:49:05,490
<font color="#E5E5E5">so here we had like an initialized</font>

898
00:49:03,150 --> 00:49:07,349
memory issue<font color="#E5E5E5"> where you could actually</font>

899
00:49:05,490 --> 00:49:09,509
choose V offset<font color="#E5E5E5"> where you want</font><font color="#CCCCCC"> it to</font>

900
00:49:07,349 --> 00:49:12,119
write<font color="#CCCCCC"> that out</font><font color="#E5E5E5"> and then dispatch</font><font color="#CCCCCC"> later</font>

901
00:49:09,510 --> 00:49:16,140
<font color="#E5E5E5">that object</font><font color="#CCCCCC"> - as a transaction function</font>

902
00:49:12,119 --> 00:49:19,830
but nothing was actually initializing

903
00:49:16,140 --> 00:49:22,379
the buffer allocated<font color="#E5E5E5"> so what you could</font>

904
00:49:19,830 --> 00:49:24,900
do was for<font color="#CCCCCC"> example a target VNT random</font>

905
00:49:22,380 --> 00:49:28,230
function with some large transactions

906
00:49:24,900 --> 00:49:30,690
<font color="#E5E5E5">and just constantly set V offset in the</font>

907
00:49:28,230 --> 00:49:32,010
<font color="#E5E5E5">secondary</font><font color="#CCCCCC"> transaction to</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> so that the</font>

908
00:49:30,690 --> 00:49:34,710
<font color="#E5E5E5">entire buffer would be left</font>

909
00:49:32,010 --> 00:49:38,670
uninitialized<font color="#E5E5E5"> so this is well he called</font>

910
00:49:34,710 --> 00:49:42,000
a heap visualizer<font color="#E5E5E5"> and a remote one we</font>

911
00:49:38,670 --> 00:49:44,970
don't need that feature<font color="#E5E5E5"> fixed what else</font>

912
00:49:42,000 --> 00:49:51,240
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I sometimes</font><font color="#E5E5E5"> ask in</font>

913
00:49:44,970 --> 00:49:54,089
interview<font color="#CCCCCC"> so in in in</font><font color="#E5E5E5"> in C you can</font>

914
00:49:51,240 --> 00:49:57,799
define<font color="#E5E5E5"> some structures and in their</font>

915
00:49:54,089 --> 00:50:01,950
structures you<font color="#E5E5E5"> can have different</font>

916
00:49:57,800 --> 00:50:03,930
variables<font color="#E5E5E5"> different types and in this</font>

917
00:50:01,950 --> 00:50:06,899
<font color="#E5E5E5">function for</font><font color="#CCCCCC"> example a snapshot function</font>

918
00:50:03,930 --> 00:50:09,810
<font color="#E5E5E5">you were using a snapshot structure and</font>

919
00:50:06,900 --> 00:50:14,040
this structure<font color="#E5E5E5"> had defined a buffer in</font>

920
00:50:09,810 --> 00:50:17,670
VN<font color="#E5E5E5"> the buffer of size 1</font><font color="#CCCCCC"> and it turns out</font>

921
00:50:14,040 --> 00:50:19,800
<font color="#E5E5E5">that in</font><font color="#CCCCCC"> some specific</font><font color="#E5E5E5"> case when snapshot</font>

922
00:50:17,670 --> 00:50:22,320
count was set to<font color="#E5E5E5"> 0 we would just return</font>

923
00:50:19,800 --> 00:50:25,890
<font color="#E5E5E5">that buffer at that structure</font><font color="#CCCCCC"> but</font>

924
00:50:22,320 --> 00:50:28,890
without having it fully initialized<font color="#E5E5E5"> so</font>

925
00:50:25,890 --> 00:50:32,339
we could be<font color="#CCCCCC"> leaking</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> 2 bytes to the</font>

926
00:50:28,890 --> 00:50:35,200
<font color="#E5E5E5">client that</font><font color="#CCCCCC"> is fixed</font><font color="#E5E5E5"> again</font>

927
00:50:32,340 --> 00:50:39,970
something a bit<font color="#CCCCCC"> more interesting in</font><font color="#E5E5E5"> the</font>

928
00:50:35,200 --> 00:50:43,290
<font color="#CCCCCC">IOC TR in a function that under some is</font>

929
00:50:39,970 --> 00:50:47,410
<font color="#CCCCCC">it here here was that</font><font color="#E5E5E5"> code that could</font>

930
00:50:43,290 --> 00:50:49,930
that was used actually to return some

931
00:50:47,410 --> 00:50:54,339
data to the client<font color="#CCCCCC"> but that code was</font>

932
00:50:49,930 --> 00:50:57,580
<font color="#CCCCCC">actually using</font><font color="#E5E5E5"> a fixed value and and in</font>

933
00:50:54,340 --> 00:51:00,370
some<font color="#E5E5E5"> condition it was possible to have</font>

934
00:50:57,580 --> 00:51:03,580
the server<font color="#CCCCCC"> returned a smaller buffer</font>

935
00:51:00,370 --> 00:51:05,859
than what it was expected and I mean

936
00:51:03,580 --> 00:51:07,360
that<font color="#CCCCCC"> case we would</font><font color="#E5E5E5"> just leak memory from</font>

937
00:51:05,860 --> 00:51:10,420
the stack<font color="#CCCCCC"> that's a</font><font color="#E5E5E5"> really interesting</font>

938
00:51:07,360 --> 00:51:16,510
<font color="#CCCCCC">feature</font><font color="#E5E5E5"> that unfortunately we don't need</font>

939
00:51:10,420 --> 00:51:20,650
fixed<font color="#CCCCCC"> another one</font><font color="#E5E5E5"> this one in the</font><font color="#CCCCCC"> career</font>

940
00:51:16,510 --> 00:51:23,050
descriptor<font color="#E5E5E5"> SMB so as you can see</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this</font>

941
00:51:20,650 --> 00:51:26,710
on<font color="#E5E5E5"> this picture at the end of the</font>

942
00:51:23,050 --> 00:51:29,530
function<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> setting different values</font>

943
00:51:26,710 --> 00:51:32,980
right<font color="#E5E5E5"> that account parameter count etc</font>

944
00:51:29,530 --> 00:51:35,020
<font color="#E5E5E5">but look at this parameter</font><font color="#CCCCCC"> count</font><font color="#E5E5E5"> set to</font>

945
00:51:32,980 --> 00:51:35,530
max parameter come this<font color="#E5E5E5"> doesn't make any</font>

946
00:51:35,020 --> 00:51:38,920
<font color="#CCCCCC">sense</font>

947
00:51:35,530 --> 00:51:43,390
we are just returning a buffer to<font color="#CCCCCC"> the</font>

948
00:51:38,920 --> 00:51:46,000
client with a large and saying that yeah

949
00:51:43,390 --> 00:51:48,490
we are going to return a large amount of

950
00:51:46,000 --> 00:51:49,570
parameters<font color="#CCCCCC"> but this</font><font color="#E5E5E5"> max parameter value</font>

951
00:51:48,490 --> 00:51:52,689
it can<font color="#E5E5E5"> be arbitrary</font>

952
00:51:49,570 --> 00:51:54,430
so in<font color="#CCCCCC"> VN we are just going</font><font color="#E5E5E5"> to return an</font>

953
00:51:52,690 --> 00:51:56,740
arbitrary amount<font color="#E5E5E5"> of data of</font>

954
00:51:54,430 --> 00:52:01,020
uninitialized data to the client again

955
00:51:56,740 --> 00:52:04,779
<font color="#CCCCCC">hit visualizer we don't need</font><font color="#E5E5E5"> that fixed</font>

956
00:52:01,020 --> 00:52:07,690
one of the last one again<font color="#E5E5E5"> something like</font>

957
00:52:04,780 --> 00:52:11,320
<font color="#CCCCCC">this in restart</font><font color="#E5E5E5"> I ain't here you see TL</font>

958
00:52:07,690 --> 00:52:13,590
or<font color="#E5E5E5"> you could have again right parameter</font>

959
00:52:11,320 --> 00:52:17,620
<font color="#CCCCCC">count</font><font color="#E5E5E5"> sent to max parameter count</font><font color="#CCCCCC"> yeah</font>

960
00:52:13,590 --> 00:52:19,180
<font color="#E5E5E5">it's gone</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of my last one</font><font color="#E5E5E5"> probably</font>

961
00:52:17,620 --> 00:52:23,170
<font color="#E5E5E5">the last one</font>

962
00:52:19,180 --> 00:52:27,160
this function in resort Col<font color="#CCCCCC"> name pipe</font>

963
00:52:23,170 --> 00:52:29,800
<font color="#E5E5E5">where in case you were using a very old</font>

964
00:52:27,160 --> 00:52:32,710
dialect<font color="#E5E5E5"> you would you could actually</font>

965
00:52:29,800 --> 00:52:36,580
trigger an an<font color="#CCCCCC"> error and have the code</font>

966
00:52:32,710 --> 00:52:39,100
<font color="#E5E5E5">return success without that account</font>

967
00:52:36,580 --> 00:52:41,130
parameter<font color="#E5E5E5"> quotient etc so again</font><font color="#CCCCCC"> you</font>

968
00:52:39,100 --> 00:52:42,299
<font color="#E5E5E5">would be leaking everything in memory</font>

969
00:52:41,130 --> 00:52:46,939
<font color="#E5E5E5">don't</font>

970
00:52:42,299 --> 00:52:49,859
<font color="#E5E5E5">is that or I wish yeah I wish it</font><font color="#CCCCCC"> was or</font>

971
00:52:46,939 --> 00:52:54,029
<font color="#E5E5E5">so I told you that I believe</font><font color="#CCCCCC"> that we</font>

972
00:52:49,859 --> 00:52:57,660
fixed around<font color="#E5E5E5"> 20 bugs and we probably fix</font>

973
00:52:54,029 --> 00:52:59,579
some over even if we if we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to</font>

974
00:52:57,660 --> 00:53:05,399
duplicate that prokhor<font color="#CCCCCC"> we</font><font color="#E5E5E5"> still support</font>

975
00:52:59,579 --> 00:53:07,529
<font color="#CCCCCC">it regarding</font><font color="#E5E5E5"> know of the exploits so</font>

976
00:53:05,400 --> 00:53:10,199
I've said that none<font color="#CCCCCC"> of that</font>

977
00:53:07,529 --> 00:53:13,349
from the eternal exploit reproduced

978
00:53:10,199 --> 00:53:15,059
successfully on Windows 10<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> true</font>

979
00:53:13,349 --> 00:53:16,670
but<font color="#E5E5E5"> you guys are going</font><font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> me yeah</font>

980
00:53:15,059 --> 00:53:20,429
but there were some exploits<font color="#E5E5E5"> made</font>

981
00:53:16,670 --> 00:53:22,799
publicly<font color="#CCCCCC"> available</font><font color="#E5E5E5"> targeting Windows 10</font>

982
00:53:20,429 --> 00:53:25,380
RS<font color="#CCCCCC"> 1 for example and I say yes you're</font>

983
00:53:22,799 --> 00:53:28,049
right and in turns out that yeah<font color="#CCCCCC"> there</font>

984
00:53:25,380 --> 00:53:30,390
was one<font color="#CCCCCC"> guy who who successfully managed</font>

985
00:53:28,049 --> 00:53:35,249
to exploit<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Windows 10 RS 1 so this is</font>

986
00:53:30,390 --> 00:53:36,538
<font color="#E5E5E5">the anniversary update and this guy he</font>

987
00:53:35,249 --> 00:53:40,348
that was<font color="#E5E5E5"> very interesting because</font>

988
00:53:36,539 --> 00:53:42,630
instead<font color="#CCCCCC"> of corrupting some stuff in</font>

989
00:53:40,349 --> 00:53:45,359
memory and redirecting the<font color="#E5E5E5"> float</font>

990
00:53:42,630 --> 00:53:49,019
<font color="#E5E5E5">he just focused on over writing</font><font color="#CCCCCC"> token</font>

991
00:53:45,359 --> 00:53:53,299
with with<font color="#CCCCCC"> an old token</font><font color="#E5E5E5"> and so this would</font>

992
00:53:49,019 --> 00:53:56,399
give<font color="#CCCCCC"> him the</font><font color="#E5E5E5"> full privileged permissions</font>

993
00:53:53,299 --> 00:54:00,299
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> the full system permissions on on</font>

994
00:53:56,400 --> 00:54:03,359
<font color="#E5E5E5">vsms server so he was</font><font color="#CCCCCC"> able to write</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> 5</font>

995
00:54:00,299 --> 00:54:06,839
anywhere on on the<font color="#E5E5E5"> drive that was quite</font>

996
00:54:03,359 --> 00:54:10,380
a good exploit<font color="#CCCCCC"> I quite like this one but</font>

997
00:54:06,839 --> 00:54:15,150
<font color="#E5E5E5">still it took him it took this guy's</font><font color="#CCCCCC"> 2</font>

998
00:54:10,380 --> 00:54:17,789
months to write correct exploits<font color="#E5E5E5"> I mean</font>

999
00:54:15,150 --> 00:54:20,130
something is writing RS 1 which<font color="#E5E5E5"> means</font>

1000
00:54:17,789 --> 00:54:22,499
<font color="#E5E5E5">that or a mediation work where it's</font>

1001
00:54:20,130 --> 00:54:24,269
working<font color="#CCCCCC"> if there is a</font><font color="#E5E5E5"> perfect exploit</font>

1002
00:54:22,499 --> 00:54:28,529
that worked and it takes you two months

1003
00:54:24,269 --> 00:54:32,339
<font color="#E5E5E5">to adapt it to one</font><font color="#CCCCCC"> of the most</font><font color="#E5E5E5"> recent</font>

1004
00:54:28,529 --> 00:54:35,189
builds of Windows 10<font color="#E5E5E5"> then it</font><font color="#CCCCCC"> means that</font>

1005
00:54:32,339 --> 00:54:38,130
<font color="#E5E5E5">yeah we are winning</font><font color="#CCCCCC"> we're well we need</font>

1006
00:54:35,189 --> 00:54:41,999
to<font color="#CCCCCC"> defend one or it's it's it's on a</font>

1007
00:54:38,130 --> 00:54:44,279
good way and<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> our well I believe</font>

1008
00:54:41,999 --> 00:54:47,879
it's all for me<font color="#E5E5E5"> for this</font><font color="#CCCCCC"> talk so thank</font>

1009
00:54:44,279 --> 00:54:51,089
you guys<font color="#E5E5E5"> for</font><font color="#CCCCCC"> listening I hope</font><font color="#E5E5E5"> that you</font>

1010
00:54:47,880 --> 00:54:53,330
have understood something about<font color="#E5E5E5"> this</font>

1011
00:54:51,089 --> 00:54:55,980
plantation

1012
00:54:53,330 --> 00:54:58,290
we you guys you know we are always

1013
00:54:55,980 --> 00:55:02,130
hiring<font color="#CCCCCC"> at Microsoft and specifically at</font>

1014
00:54:58,290 --> 00:55:05,160
<font color="#CCCCCC">VMs or C so the Java is really cool</font>

1015
00:55:02,130 --> 00:55:07,140
trust me<font color="#CCCCCC"> you see so many things so if</font>

1016
00:55:05,160 --> 00:55:09,930
<font color="#E5E5E5">you if you think</font><font color="#CCCCCC"> that you you've got</font>

1017
00:55:07,140 --> 00:55:13,529
some<font color="#E5E5E5"> some skills about that yeah trust</font>

1018
00:55:09,930 --> 00:55:16,830
<font color="#E5E5E5">me don't be shy</font><font color="#CCCCCC"> just talk to</font><font color="#E5E5E5"> me and I</font>

1019
00:55:13,530 --> 00:55:23,190
can probably put in touch with<font color="#CCCCCC"> somebody</font>

1020
00:55:16,830 --> 00:55:26,490
who's who's hiring or yeah<font color="#E5E5E5"> so VMs</font>

1021
00:55:23,190 --> 00:55:30,540
Narciso we are<font color="#CCCCCC"> split into both the UK</font>

1022
00:55:26,490 --> 00:55:33,120
and the<font color="#CCCCCC"> u.s. so I'm in the</font><font color="#E5E5E5"> UK</font><font color="#CCCCCC"> but most</font>

1023
00:55:30,540 --> 00:55:36,029
of the team is<font color="#E5E5E5"> in the US but still we we</font>

1024
00:55:33,120 --> 00:55:38,339
are interesting<font color="#E5E5E5"> but we are interested by</font>

1025
00:55:36,030 --> 00:55:42,300
the Chinese hackers<font color="#E5E5E5"> so guys yeah don't</font>

1026
00:55:38,340 --> 00:55:50,430
be shy<font color="#CCCCCC"> send your CV</font><font color="#E5E5E5"> this is this is a</font>

1027
00:55:42,300 --> 00:56:01,580
fun adventure<font color="#E5E5E5"> so thank you</font><font color="#CCCCCC"> boyo</font><font color="#E5E5E5"> Massimo</font>

1028
00:55:50,430 --> 00:56:04,470
<font color="#CCCCCC">Andy any question</font><font color="#E5E5E5"> okay now woman</font>

1029
00:56:01,580 --> 00:56:06,990
contagion<font color="#CCCCCC"> Akatsuki Montara to the SMB 30</font>

1030
00:56:04,470 --> 00:56:07,439
<font color="#E5E5E5">GTA</font><font color="#CCCCCC"> neurons audience is only</font><font color="#E5E5E5"> a fashion</font>

1031
00:56:06,990 --> 00:56:09,899
<font color="#E5E5E5">just</font>

1032
00:56:07,440 --> 00:56:13,140
<font color="#CCCCCC">SMPTE here at</font><font color="#E5E5E5"> least</font><font color="#CCCCCC"> Union higher</font><font color="#E5E5E5"> Windows</font>

1033
00:56:09,900 --> 00:56:15,420
10<font color="#CCCCCC"> how Windows hung with no tens of the</font>

1034
00:56:13,140 --> 00:56:18,029
omec<font color="#E5E5E5"> I Tina</font><font color="#CCCCCC"> had or hear</font><font color="#E5E5E5"> her in</font><font color="#CCCCCC"> the</font>

1035
00:56:15,420 --> 00:56:24,530
engine<font color="#CCCCCC"> Jack oh now</font><font color="#E5E5E5"> woman tied to Johnson</font>

1036
00:56:18,030 --> 00:56:24,530
City<font color="#CCCCCC"> Nikolas thanks guys</font>

