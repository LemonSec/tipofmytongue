1
00:00:00,000 --> 00:00:12,490
good morning my name is Jason and I'll
be doing the next talk we're gonna talk

2
00:00:12,490 --> 00:00:17,680
about application security tools but
before I get rolling here at like to

3
00:00:17,680 --> 00:00:24,490
understand who it is that I'm talking to
so developers in the room you

4
00:00:24,990 --> 00:00:32,668
application security practitioners you
those general interested parties couple

5
00:00:32,668 --> 00:00:37,468
of them to excellent so for some reason
you looked at a thing on board and you

6
00:00:37,469 --> 00:00:41,770
were like I wanna go to that talk or
you're just in the last document that's

7
00:00:41,770 --> 00:00:42,210
fine

8
00:00:42,210 --> 00:00:47,969
my name's Jason I'm a security
consultant for a company called ask that

9
00:00:47,969 --> 00:00:52,190
consulting were based out of San
Francisco arkansans are all over the

10
00:00:52,190 --> 00:00:58,920
place so you know the offices in San
Francisco I live in Hilliard basically

11
00:00:58,920 --> 00:01:04,339
what I do for Aztec is I either go into
organizations that have an application

12
00:01:04,339 --> 00:01:09,119
security problem of some kind either
they're trying to install tools are

13
00:01:09,119 --> 00:01:13,270
trying to put things together maybe they
need a pen test on I do have a security

14
00:01:13,270 --> 00:01:18,729
pen testing help organizations build
software development life cycles with

15
00:01:18,729 --> 00:01:24,740
security in mind and I do training for
all sorts of things Wireless incident

16
00:01:24,740 --> 00:01:30,899
response application security all kinds
of stuff I'm a DIY enthusiasts and our

17
00:01:30,900 --> 00:01:34,880
columbus idea found remember I'm
actually the person one of the three

18
00:01:34,880 --> 00:01:39,530
people that made the bad as you're all
aware so if you're interested in

19
00:01:39,530 --> 00:01:43,220
Columbus idea foundry install a QR
reader and scan the code I promise you

20
00:01:43,220 --> 00:01:48,490
it's a we're gonna talk about the day
while we're going to talk about some of

21
00:01:48,490 --> 00:01:54,380
the tools you probably already have if
you have any amount of application

22
00:01:54,380 --> 00:01:55,630
security

23
00:01:55,630 --> 00:02:01,579
installed in your organization you
probably have one of these tools I'm

24
00:02:01,579 --> 00:02:06,500
gonna show you specific things though I
am going to speak of them in

25
00:02:06,500 --> 00:02:10,729
generalities for instance I will mention
bear code but when I talk about very

26
00:02:10,729 --> 00:02:15,519
good really I'm talking about a static
analyzer we're going to look at things

27
00:02:15,519 --> 00:02:22,010
like AWS security just recently I did
application security work for an

28
00:02:22,010 --> 00:02:27,390
organization that said hey can you look
at my AWS security groups and see if I

29
00:02:27,390 --> 00:02:32,768
have any problems and it turned out they
did so I'm gonna show you how did that

30
00:02:32,769 --> 00:02:38,099
work it doesn't cost anything so it's
pretty easy to do it you have a Cali box

31
00:02:38,099 --> 00:02:42,099
you can install it with one command line
we're going to look at things like

32
00:02:42,099 --> 00:02:47,880
searching through logs to find an
attacker and using your logs to notify

33
00:02:47,880 --> 00:02:52,440
they are being attacked a lot of
organizations just don't do that the

34
00:02:52,440 --> 00:02:56,440
majority of this talk comes from my
experience with its about 2,000

35
00:02:56,440 --> 00:03:01,980
companies I work with the billed as
TLC's caress TLC and when I walk in on

36
00:03:01,980 --> 00:03:05,018
day one I asked a lot of the same
questions and I get a lot of the same

37
00:03:05,019 --> 00:03:09,579
answers are you doing today nothing or
we've got four to five sitting on a

38
00:03:09,579 --> 00:03:14,920
shelf somewhere or you know we'd love to
have a dynamic tests go on our QA

39
00:03:14,920 --> 00:03:19,530
environment but we just don't know what
to do so I'm gonna talk about some of

40
00:03:19,530 --> 00:03:23,230
the tools that you may have already
bought and how to plug them together a

41
00:03:23,230 --> 00:03:28,530
little bit better so you get a little
more value out of the theme today is

42
00:03:28,530 --> 00:03:33,980
going to be integrate everything right
if you have a Splunk instance and you

43
00:03:33,980 --> 00:03:38,209
are not looking at your web blogs you
should look at your web locks integrate

44
00:03:38,209 --> 00:03:43,829
back piece if you have a static analyzer
you should plug that thing in your IDE

45
00:03:43,829 --> 00:03:46,970
you should plug it into your build
service all of these things should be

46
00:03:46,970 --> 00:03:51,950
communicating together to build an
environment will talk about how to use

47
00:03:51,950 --> 00:03:57,560
things like a dynamic environment a
dynamic scanner to improve your web

48
00:03:57,560 --> 00:03:58,610
application firewall

49
00:03:58,610 --> 00:04:03,590
things like that so it's some of the
things that you're gonna wanna need in

50
00:04:03,590 --> 00:04:07,110
order to make this work usually got to
have somebody with scripting knowledge

51
00:04:07,110 --> 00:04:11,610
or experience on board in your
organization whether that be somebody

52
00:04:11,610 --> 00:04:16,920
knows Perl Python or some kind of
Windows language I'm not big windows

53
00:04:16,920 --> 00:04:21,950
guys so I'm not gonna mention them too
much and a desire to have your tools

54
00:04:21,950 --> 00:04:25,710
connect together all of the things
should be built so that they all talk to

55
00:04:25,710 --> 00:04:30,060
each other makes it a lot better and
it'd be a good idea if you had an

56
00:04:30,060 --> 00:04:35,430
architect whether it's your security
architect or somebody in your

57
00:04:35,430 --> 00:04:40,630
organization to architect how you're
gonna have all these pieces communicate

58
00:04:40,630 --> 00:04:46,080
you get a lot of data out of the things
you already have and you can use it for

59
00:04:46,080 --> 00:04:51,690
to improve your security as well as just
have a better understanding our

60
00:04:51,690 --> 00:04:57,190
operational environment so the basic
framework is you go out and you buy some

61
00:04:57,190 --> 00:05:01,800
tool this store is going to generate
data right but most of us don't use it

62
00:05:01,800 --> 00:05:07,260
so we run fortify after we get the five
hundred thousand results back fortify we

63
00:05:07,260 --> 00:05:12,120
go through a false-positive reduction
step down at two hundred thousand

64
00:05:12,120 --> 00:05:16,320
results and and basically had that
report off to the development and say

65
00:05:16,320 --> 00:05:21,090
good luck but there's a lot of data
captured inside of those results and we

66
00:05:21,090 --> 00:05:24,859
should probably be using that also two
hundred thousand results in a single

67
00:05:24,860 --> 00:05:28,790
report to a developer is like any of
them nothing right they're never gonna

68
00:05:28,790 --> 00:05:33,630
look at it they don't care about that
and that becomes problematic so we need

69
00:05:33,630 --> 00:05:37,450
to clean up the way that behavior is so
we can look at how our vulnerability

70
00:05:37,450 --> 00:05:42,640
scanners gather data we can look at
analyzing logs getting out of things out

71
00:05:42,640 --> 00:05:45,419
of our dynamic scanning environment for
instance for us that expanding

72
00:05:45,419 --> 00:05:52,700
environment and take some meaningful
actions on this stuff so dynamic scanner

73
00:05:52,700 --> 00:05:57,169
for those of you don't know is a box
that goes out to your website

74
00:05:57,169 --> 00:06:01,830
usually the first thing that it does is
it grabs all of the eight rafts on the

75
00:06:01,830 --> 00:06:05,438
site to figure out what links are there
and it goes and visits the links to see

76
00:06:05,439 --> 00:06:09,389
if there's parameters and I'll start
fussing those parameters right so I've

77
00:06:09,389 --> 00:06:14,409
got input parameter for search box does
it take script tax doesn't echo script

78
00:06:14,409 --> 00:06:19,770
tag back to me right if it does that's a
finding it puts it in a report but what

79
00:06:19,770 --> 00:06:24,998
if we just took that report and instead
of handing it to development we handed

80
00:06:24,999 --> 00:06:29,919
to our Web Application Firewall we have
this takes the signature part of web

81
00:06:29,919 --> 00:06:34,389
application firewall and makes it your
signatures right that's your problem

82
00:06:34,389 --> 00:06:38,620
that you're trying to block not the ones
that some are indeed I will read up fire

83
00:06:38,620 --> 00:06:44,580
has figured out if your search parameter
has a problem and your web application

84
00:06:44,580 --> 00:06:48,859
firewall doesn't notice that that's bad
so what you want to do is feed that data

85
00:06:48,860 --> 00:06:53,370
in almost all of the web solutions out
there will accept any dynamic scanners

86
00:06:53,370 --> 00:06:58,120
input including ModSecurity if you have
the commercial version if you don't then

87
00:06:58,120 --> 00:07:01,259
you gotta write their own rules but if
you are running a commercial version

88
00:07:01,259 --> 00:07:06,139
used to run in your writing your own
rules anyway but dynamic scanners are

89
00:07:06,139 --> 00:07:11,289
really useful for a couple of use cases
trade as I'm saying testing parameters

90
00:07:11,289 --> 00:07:15,318
an automated way not a bad idea
something that you should be looking at

91
00:07:15,319 --> 00:07:19,800
right but what do you do with the output
well oftentimes you walk back to a

92
00:07:19,800 --> 00:07:25,680
developer and say hey the key parameters
on this search box it's got cross-site

93
00:07:25,680 --> 00:07:30,349
scripting on it and your development
stop is gonna go okay I'll fix that and

94
00:07:30,349 --> 00:07:34,979
then they wonder you know sort of when
do they have time to do that so the wife

95
00:07:34,979 --> 00:07:42,029
can kind of be intermediaries that right
to try that up it looks for new attack

96
00:07:42,029 --> 00:07:47,629
vectors are out there how many guys are
running angular couple of us how many

97
00:07:47,629 --> 00:07:53,870
you know about the angular escape attack
that came out a couple of months ago one

98
00:07:53,870 --> 00:08:00,379
of us and it's caused you and i know
bill and so when that new attack vector

99
00:08:00,379 --> 00:08:04,330
came out the WAB signatures were all
improved to detect this stuff the

100
00:08:04,330 --> 00:08:07,270
dynamic scanner signature on proved to
detect that stuff

101
00:08:07,270 --> 00:08:12,240
so if you're running dynamic scanning
it's a good idea to hire what happened

102
00:08:12,240 --> 00:08:17,360
to it and make it all work I don't
actually have to demonstrate this on

103
00:08:17,360 --> 00:08:22,290
I've set this up a few times it's really
hard to just fun up in perpetuity like a

104
00:08:22,290 --> 00:08:26,390
hook me up you know they they don't want
to send you a $200,000 equipment to do a

105
00:08:26,390 --> 00:08:31,560
demo be nice if they did though when I
am gonna down some of the other things

106
00:08:31,560 --> 00:08:36,340
so some of the dynamic scanning products
that are out there if you don't have one

107
00:08:36,340 --> 00:08:38,500
already there's plenty of them

108
00:08:38,500 --> 00:08:43,039
HP makes one or they went out and bought
one IBM did the same thing as a company

109
00:08:43,039 --> 00:08:52,199
called a kinetics very cold outside 1133
a patio spire iron whilst there's over

110
00:08:52,200 --> 00:08:56,840
50 of them if you got the SEC tools
marketplace there's a guy out there

111
00:08:56,840 --> 00:09:02,810
that's been testing these tools he runs
the ball against the same baseline and

112
00:09:02,810 --> 00:09:04,530
it can give you some pretty good
information

113
00:09:04,530 --> 00:09:08,760
thing to really watch out for those of
you go out there he doesn't list them

114
00:09:08,760 --> 00:09:14,450
best to worst I think its alphabetical
or something so the one of the top isn't

115
00:09:14,450 --> 00:09:18,300
the best one you have to kind of search
through it we've done our own analysis

116
00:09:18,300 --> 00:09:22,050
on this and we found that some of the
free tools are actually better than the

117
00:09:22,050 --> 00:09:26,359
commercial products out there it just
depends on your code based on what it is

118
00:09:26,360 --> 00:09:31,850
you're doing selects catfish might
outperform HP for you I doubt it but

119
00:09:31,850 --> 00:09:40,230
it's possible so some best practices can
in QA as well as production right when

120
00:09:40,230 --> 00:09:44,970
things make it all the way to production
it's more expensive if you go look at

121
00:09:44,970 --> 00:09:50,260
the charts on this bill explained to you
that cost fourteen times more to fix a

122
00:09:50,260 --> 00:09:54,550
problem in production than it does to
find the problem in QA and fix it there

123
00:09:54,550 --> 00:09:57,160
also

124
00:09:57,160 --> 00:10:01,500
developers are used to having QA say
this doesn't work and they have a

125
00:10:01,500 --> 00:10:05,750
communication mechanism to tell
development does not working right

126
00:10:05,750 --> 00:10:10,910
your security team probably isn't
plugged in to develop a difference and

127
00:10:10,910 --> 00:10:14,819
so that makes it a little bit harder to
do this but if you're finding things in

128
00:10:14,820 --> 00:10:17,650
your dynamic scanning environment and
you want to automate that process

129
00:10:17,650 --> 00:10:19,610
there's a really great to other

130
00:10:19,610 --> 00:10:24,220
thread fix and what threat fix it does
it look set all of your scanning output

131
00:10:24,220 --> 00:10:29,970
and hooks into your defect tracking
system this is produced by a group of

132
00:10:29,970 --> 00:10:34,690
guys called the number back in Texas
there's a freeware version as well as

133
00:10:34,690 --> 00:10:38,959
commercial version I haven't seen much
of a difference between the freeware

134
00:10:38,959 --> 00:10:42,859
version in the commercial version so
it's a pretty good tool to get for free

135
00:10:43,640 --> 00:10:48,439
it'll go to your dynamic scanner full
results and opened your box for you or

136
00:10:48,440 --> 00:10:53,279
open Bugzilla tickets or get or whatever
your defect tracking system is to get

137
00:10:53,279 --> 00:10:56,269
together and make it work correctly

138
00:10:56,269 --> 00:11:02,339
typically what happens when you're using
a dynamic scanner for whap tuning is

139
00:11:02,339 --> 00:11:05,860
your trip across the parameter that's
got some kind of problem right so my

140
00:11:05,860 --> 00:11:11,510
question mark in this case the name
parameter after the question mark and

141
00:11:11,510 --> 00:11:16,050
you are I insert some kind of alert and
then a token that tracks it as it goes

142
00:11:16,050 --> 00:11:21,859
along the scanners actually doing and
then you get some XML output RCSB or

143
00:11:21,860 --> 00:11:28,380
whatever and you just dump that India
Wow most of the wife's will allow for

144
00:11:28,380 --> 00:11:33,779
you to upload any of the commercial
products that are out there as new rule

145
00:11:33,779 --> 00:11:39,199
sets some of them will monitor a folder
so you can just keep dumping things into

146
00:11:39,199 --> 00:11:42,519
the folder and monitor the folder and
autotune the rules for you

147
00:11:43,110 --> 00:11:48,829
anybody ever done an activity like that
where you watch a folder and just

148
00:11:48,829 --> 00:11:53,260
automatically update becomes problematic
rate you're gonna end up with rules

149
00:11:53,260 --> 00:11:57,199
rules rules and then eventually there
will be a problem so there should be a

150
00:11:57,199 --> 00:12:03,120
little bit of watching this activity as
you go along almost all of our founders

151
00:12:03,120 --> 00:12:06,930
as I said work with all the dynamic
scanning vendors if you're using the

152
00:12:06,930 --> 00:12:11,079
commercial version of ModSecurity the
little bit of an extra step where you go

153
00:12:11,079 --> 00:12:13,888
out to their website dumped in your
results and

154
00:12:13,889 --> 00:12:20,189
give you rules but it only works on the
commercial version so keep that in mind

155
00:12:20,189 --> 00:12:26,858
so some things to ask yourself do I have
a dynamic scanner or do I have a need

156
00:12:26,859 --> 00:12:31,459
for 12 I have a laugh or do I have a
need for one if the answer is yes we

157
00:12:31,459 --> 00:12:34,160
have a dynamic scanner and yes we have a
lab and they're not plugged together

158
00:12:34,160 --> 00:12:38,639
that's a great integration point to
allow for you to get things together

159
00:12:38,639 --> 00:12:43,169
better as a dynamic scanner gives you
out put the needs to be fixed

160
00:12:43,169 --> 00:12:47,850
you should have a way to integrate that
scanner into your defect tracking system

161
00:12:47,850 --> 00:12:52,379
and like I said read fix a great way to
do that but there's other tools out

162
00:12:52,379 --> 00:12:56,249
there allow for it as well if you're
good with scripting languages you can

163
00:12:56,249 --> 00:13:02,069
just crippled think all rights let's
talk about static scanners so static

164
00:13:02,069 --> 00:13:10,199
analyzers looked at coat most of us have
one I booked into like I say about 2,000

165
00:13:10,199 --> 00:13:14,439
organizations to talk about application
security and just about every one of

166
00:13:14,439 --> 00:13:18,419
those organizations has told me they
either a fortify sitting on shell or

167
00:13:18,419 --> 00:13:23,429
they have apps can sitting on a shelf or
they've done something with very code

168
00:13:23,429 --> 00:13:27,399
but they don't ever have a complete
solution built out of this thing

169
00:13:28,199 --> 00:13:32,969
typically it's run by the security team
right because tuning these things

170
00:13:32,970 --> 00:13:37,189
difficult understanding how is work
clothes gonna go is difficult but what

171
00:13:37,189 --> 00:13:41,099
happens when it goes the security team
was already made it through QA you're

172
00:13:41,100 --> 00:13:45,749
basically waiting to go to production
and tell the security bottleneck occurs

173
00:13:45,749 --> 00:13:51,059
and then somebody from securities gonna
be like way got sequins action here we

174
00:13:51,059 --> 00:13:56,419
have taken us all the way back to the
beginning so that creates an environment

175
00:13:56,419 --> 00:14:01,459
where security is in contention point
and you never want that it also creates

176
00:14:01,459 --> 00:14:06,008
an environment where you're too late in
the process to fix things right how many

177
00:14:06,009 --> 00:14:10,089
of you have heard what we really need to
fix this in a meeting and the next thing

178
00:14:10,089 --> 00:14:13,639
that said is we'll fix it later right
and it gets put into production

179
00:14:14,509 --> 00:14:16,680
i've seen that happen a bunch of times

180
00:14:16,680 --> 00:14:21,380
oftentimes static analyzer output things
that a developer doesn't understand the

181
00:14:21,380 --> 00:14:24,830
needs to be explained to them why it's a
bad thing if I say you're using a

182
00:14:24,830 --> 00:14:29,930
backrub graphic each year using bad for
graphic algorithm because you know it's

183
00:14:29,930 --> 00:14:34,050
all over to PHP and it's running this
thing is pretty easy to figure out we

184
00:14:34,050 --> 00:14:39,810
upgrade it's easy to solve but if it's
something like sequins action in a

185
00:14:39,810 --> 00:14:44,229
dynamic part of a pram rise query then
it's a little bit more difficult to say

186
00:14:44,230 --> 00:14:47,279
hey wait you're doing dynamic input here

187
00:14:47,279 --> 00:14:52,300
yes thanks for using a primer ice cream
but he broke it and so you have to go

188
00:14:52,300 --> 00:14:56,329
through a little bit more with that the
other really big promise that account as

189
00:14:56,330 --> 00:15:01,610
they dumped out a ton of false positives
and every time I talk to somebody that

190
00:15:01,610 --> 00:15:05,779
says yeah we've got four to five we
spent a $5,000,000 put that thing in and

191
00:15:05,779 --> 00:15:09,439
even brought pro services and get going
but it gave us so many false positives

192
00:15:09,440 --> 00:15:14,580
we don't even running or I heard that
bunches and bunches of times what you

193
00:15:14,580 --> 00:15:18,350
want to try to do is get into an
environment where understanding what

194
00:15:18,350 --> 00:15:22,990
your false positives are that the
analyzers giving you and then just

195
00:15:22,990 --> 00:15:29,310
throwing those results where filtering
them out if you can so what ends up

196
00:15:29,310 --> 00:15:34,529
happening when you build a secure
software development lifecycle as you

197
00:15:34,529 --> 00:15:40,270
have all of your tools plugged in right
most of the static analyzers out there I

198
00:15:40,270 --> 00:15:44,650
saw yesterday check marks is here
they've got an idea integration very

199
00:15:44,650 --> 00:15:47,130
cold house one that I'll demonstrator in
a minute

200
00:15:47,130 --> 00:15:51,779
HP Haslam just about all of the static
analyzers will plugged right into your I

201
00:15:51,779 --> 00:15:55,680
D so developers don't even have to leave
their environment seize their defects

202
00:15:55,680 --> 00:16:01,270
and I'll show it to you in a bit but we
typically do is have a developer write

203
00:16:01,270 --> 00:16:07,120
code and either check that code into the
main branch and then build server will

204
00:16:07,120 --> 00:16:12,690
build and scan or we can just have them
scan it themselves right out there I D

205
00:16:12,690 --> 00:16:17,820
environment find the problems fixed them
right there and then get the code to

206
00:16:17,820 --> 00:16:24,640
deploy couple that with using something
like you're built environment to build

207
00:16:24,640 --> 00:16:27,420
442 fire code or whatever

208
00:16:27,420 --> 00:16:32,000
ship that code up and have it scanned
when the developer comes in for the next

209
00:16:32,000 --> 00:16:35,960
day's work they can just pull its
results down sitting right in front of

210
00:16:35,960 --> 00:16:41,340
them and it's really easy for them to
deal with the problems if you're doing

211
00:16:41,340 --> 00:16:46,610
it this way rather than finding 500,000
problems you only find thirty or forty

212
00:16:46,610 --> 00:16:51,580
the first time that you sweep through
this would also happens as a developer

213
00:16:51,580 --> 00:16:57,000
the the cycle of Understanding between
writing the code and finding the flaws

214
00:16:57,000 --> 00:17:01,480
become so short that they organically
understand all I shouldn't use that

215
00:17:01,480 --> 00:17:05,980
library anymore but I need to take this
important run through validation routine

216
00:17:05,980 --> 00:17:10,010
or I've gotta do some kind of control
flow on this data that came in and they

217
00:17:10,010 --> 00:17:16,030
understand it at a much much more
personal level and allows for them to

218
00:17:16,030 --> 00:17:22,720
organically change the way that they
code and make it better so continuous

219
00:17:22,720 --> 00:17:27,460
integration is your goal right what you
wanna do is have your Jenkins build

220
00:17:28,220 --> 00:17:34,320
thing all the way up to have the source
repo analyzed and then scanned and then

221
00:17:34,320 --> 00:17:37,320
give you the information back question

222
00:17:42,220 --> 00:17:46,919
by persons source code so here's my take
on this and I'll tell you right now I

223
00:17:46,919 --> 00:17:50,090
worked very code so it's going to come a
little that way

224
00:17:50,090 --> 00:17:55,480
source code is a lot of code on a page I
don't have any context for understanding

225
00:17:55,480 --> 00:18:02,140
on how that code is going to be run if
I'm analyzing by code or binary code I

226
00:18:02,140 --> 00:18:05,960
do have a little bit of understanding
MOUs were on the way there does it is

227
00:18:05,960 --> 00:18:09,100
the instrument and environment and force
data through the application they see

228
00:18:09,100 --> 00:18:10,340
what happens to it

229
00:18:10,340 --> 00:18:16,178
HP goes line-by-line and says okay
you're picking up a perimeter here you

230
00:18:16,179 --> 00:18:19,049
know what are you doing to it and it
looks through the code and sorry I don't

231
00:18:19,049 --> 00:18:24,710
see any validation routine on this you
probably have a problem and so it's

232
00:18:24,710 --> 00:18:30,760
possible to build continuous integration
and either environment so realistically

233
00:18:30,760 --> 00:18:34,950
are gonna hook HP instead of India build
environment you're gonna look into your

234
00:18:34,950 --> 00:18:40,510
source repo and haven't read it right I
also like tools like son a type for this

235
00:18:40,510 --> 00:18:44,700
summer types not really a static
analyzer what it does it looks at

236
00:18:44,700 --> 00:18:48,590
libraries are using all the third party
stuff and it says alright well you're

237
00:18:48,590 --> 00:18:53,360
downloading this job a library that
we've known for eight years has

238
00:18:53,360 --> 00:18:58,428
vulnerabilities in it the better one is
down here and you should upgrade to that

239
00:18:58,429 --> 00:19:03,200
so we're trying to do is get to the
point where we have continuous

240
00:19:03,200 --> 00:19:08,679
integration development to build cycle
OPSEC team whoever is involved in

241
00:19:08,679 --> 00:19:14,450
development understands this from a
dropout to what an IDE immigration looks

242
00:19:14,450 --> 00:19:21,490
like just to show you how this can be a
lot easier for any organization to use

243
00:19:21,490 --> 00:19:25,929
and to put together so in this case it's
very code by happen now America account

244
00:19:25,929 --> 00:19:30,690
please don't this is not a very good
sales pitch this HP check marks whoever

245
00:19:30,690 --> 00:19:36,140
I just don't happen our check marks
account this is Eclipse I've got an

246
00:19:36,140 --> 00:19:39,789
application that I'm writing here I went
ahead and up at the top of the

247
00:19:39,789 --> 00:19:44,980
application I just installed the
barricade plugin and I can say uploading

248
00:19:44,980 --> 00:19:48,010
scandal push my code up to code

249
00:19:48,010 --> 00:19:55,390
or whoever your services and it will go
run the analysis on it once the analysis

250
00:19:55,390 --> 00:19:59,550
is complete I get an email and I just
simply say download the results and it

251
00:19:59,550 --> 00:20:04,879
publishes the results for me right in
the eye Dee if this particular branch

252
00:20:04,880 --> 00:20:08,390
was sitting here on the screen all I
have to do is double click on this will

253
00:20:08,390 --> 00:20:12,920
take me to the line of code that I need
to go fix and it'll help me fix it so

254
00:20:12,920 --> 00:20:17,950
realistically making security part of
the development life cycle is not a

255
00:20:17,950 --> 00:20:23,110
difficult thing it takes me about two
minutes to get this instrument and

256
00:20:23,110 --> 00:20:29,919
functioning and you can scan in a way
that nobody is watching you

257
00:20:29,920 --> 00:20:34,610
over if anybody has ever use of area
code you know you do policy scanning so

258
00:20:34,610 --> 00:20:39,050
you set up a policy and you say what
things you'll allow which won't allow

259
00:20:39,050 --> 00:20:45,960
inside your policy so lovely noise great
and once you have that built everything

260
00:20:45,960 --> 00:20:50,290
gets evaluated to that policy but in
this case we can do something simple and

261
00:20:50,290 --> 00:20:54,680
say just scan and tell me what my
problems our rights and no policies

262
00:20:54,680 --> 00:20:57,410
associated nobody's looking over your
shoulder

263
00:20:57,410 --> 00:21:01,190
you never want that contention between
security and development of security and

264
00:21:01,190 --> 00:21:09,660
anybody really because eventually the
tools we just won't get used anymore so

265
00:21:09,660 --> 00:21:16,330
static analyzers should be instrumented
as part of the development life cycle

266
00:21:16,330 --> 00:21:20,360
but as we move up into QA there's plenty
of things that we can do there as well

267
00:21:20,360 --> 00:21:26,899
so what I like to do when I talk to the
QA organization as I say have you ever

268
00:21:26,900 --> 00:21:32,860
used any security products and the
answer is almost always know and I say

269
00:21:32,860 --> 00:21:35,709
well you know there's really great free
products out there that you could just

270
00:21:35,710 --> 00:21:42,570
put in and use so for instance during QA
oftentimes their places where we input

271
00:21:42,570 --> 00:21:47,010
integers you have to ask yourself the
question what what's that bounded set

272
00:21:47,010 --> 00:21:53,520
look like can I put in ten billion can I
put in all 9's and all 9's means nine

273
00:21:53,520 --> 00:21:56,550
million on negative numbers in

274
00:21:56,550 --> 00:22:02,020
right bank transfers of negative
balances are always fun so what we do as

275
00:22:02,020 --> 00:22:07,210
we approach the QA organization and we
say hey why don't we put security in as

276
00:22:07,210 --> 00:22:11,660
a step here you're looking for the
button is the button blue the story told

277
00:22:11,660 --> 00:22:15,400
me that they're supposed to be about
intense blue if the button is not blue

278
00:22:15,400 --> 00:22:21,130
or not there goes our code defects write
you a speaks to development in the

279
00:22:21,130 --> 00:22:24,610
language of broken software hey this is
a defect that we have heard this is a

280
00:22:24,610 --> 00:22:29,219
prominent you need to go fix and so what
we're trying to do is get to the stage

281
00:22:29,220 --> 00:22:33,000
where security bugs and function bugs
and it really any code bugs are

282
00:22:33,000 --> 00:22:37,410
discovered plugs or not trying to point
fingers were not trying to say hey we've

283
00:22:37,410 --> 00:22:42,150
broken security in some way and so what
we try to do is just get you a to be

284
00:22:42,150 --> 00:22:48,280
part of this team usually this requires
a little bit of an education component

285
00:22:48,280 --> 00:22:53,879
sit down your QA guys take him through
secure coding class give them seabee

286
00:22:53,880 --> 00:22:58,310
teason secure coding whatever that means
train up your QA team so that they

287
00:22:58,310 --> 00:23:04,220
understand what software bugs associated
with security look like teach them how

288
00:23:04,220 --> 00:23:10,030
to detect security flaws doesn't have to
be extremely deep training where they

289
00:23:10,030 --> 00:23:14,720
spend all day reading books on web
application attacks it can be fairly

290
00:23:14,720 --> 00:23:20,040
simple but the reason why you want to
embed this in QA is because they speak

291
00:23:20,040 --> 00:23:24,550
the language and they use the tools that
development is used to so whatever

292
00:23:24,550 --> 00:23:29,000
defect tracking system is that you have
that security doesn't have access to for

293
00:23:29,000 --> 00:23:33,370
sure the QA guys have access to it and
so they're going to be able to do

294
00:23:34,170 --> 00:23:39,910
defect reporting and stop quite easily
you can also create much more meaningful

295
00:23:39,910 --> 00:23:45,860
test this way and it allows for you to
get your QA guys on board with this

296
00:23:45,860 --> 00:23:52,750
whole security idea so we're gonna do
now is just fire up bird anybody here

297
00:23:52,750 --> 00:23:56,120
use birth familiar with you

298
00:23:56,640 --> 00:24:04,830
so I'm running basically the most recent
version 39 what I'm gonna do is simply

299
00:24:04,830 --> 00:24:16,790
take my web browser and tell it to
listen to start speaking to my proxy and

300
00:24:16,790 --> 00:24:21,740
I've got this web application called the
budget store and what the budget store

301
00:24:21,740 --> 00:24:26,240
is just a broken web app it's an
application that I worked on for a

302
00:24:26,240 --> 00:24:31,530
little while and it allows for me to do
demonstrations of you know there's a

303
00:24:31,530 --> 00:24:37,910
retail store if you will so whenever I
see a web application that has any kind

304
00:24:37,910 --> 00:24:41,850
of search for places for input I
immediately started doing things like

305
00:24:41,850 --> 00:24:54,020
this where I throw you know some kind of
alert at it and it popped up on the

306
00:24:54,020 --> 00:24:54,560
screen

307
00:24:54,560 --> 00:24:58,560
okay we've got cross-site scripting I
validated I ran my script in this app

308
00:24:58,560 --> 00:25:03,669
that's a problem we now go fix this
problem right but the other thing that

309
00:25:03,670 --> 00:25:09,500
we also can look at here as well what
can i type into this box how long can I

310
00:25:09,500 --> 00:25:14,430
type is it can accept input all day
maybe it is maybe we don't want that

311
00:25:14,430 --> 00:25:18,140
maybe we needed to validate that this
only accepted 10 strings in this input

312
00:25:18,140 --> 00:25:22,850
and so I stick this in there and it
gives me this craziness right so if I

313
00:25:22,850 --> 00:25:28,350
move over to burp I can pretty easily
drop in here sorry

314
00:25:36,550 --> 00:25:49,940
awesome whoever's phone is on vibrate
like that that's crazy you're gonna hurt

315
00:25:49,940 --> 00:26:15,180
yourself I promise so you can see the
page and you can also see here where I

316
00:26:15,180 --> 00:26:21,380
have a parameter that I inserted you can
see the script tags that I sent out and

317
00:26:21,380 --> 00:26:25,040
you can see the response from the web
server that came back what I'm gonna do

318
00:26:25,040 --> 00:26:30,620
if I'm working with a QA team is gonna
say what we want to do here is to move

319
00:26:30,620 --> 00:26:35,830
this over to a tool and sidebar called
intruder and what intruders gonna do is

320
00:26:35,830 --> 00:26:41,790
it's going to look at my request that
I've made and it's gonna say alright I

321
00:26:41,790 --> 00:26:46,840
see parameters here so what I'm going to
do is help you I'm going to mark all

322
00:26:46,840 --> 00:26:54,050
these parameters of this is never useful
I don't know why did this but every time

323
00:26:54,050 --> 00:26:57,500
I do the psycho clearly parameters hour
and I say all right the one I really

324
00:26:57,500 --> 00:27:02,130
care about is this one right and your QA
team can quite easily go are at the Q

325
00:27:02,130 --> 00:27:06,990
parameter ok what we're going to do here
is really mess with this thing and all I

326
00:27:06,990 --> 00:27:11,020
have to do is go like this and say ad
and now I put a token on this parameter

327
00:27:11,020 --> 00:27:15,830
anything that I want to do from now on
is going to change the values inside of

328
00:27:15,830 --> 00:27:21,050
this token so if I wanna do something
like negative value testing I can come

329
00:27:21,050 --> 00:27:27,379
in here and say what I want to do is a
negative one right maybe I want to do a

330
00:27:27,380 --> 00:27:29,990
negative a thousand

331
00:27:29,990 --> 00:27:34,660
that I just say start attack and it'll
run through and drop those parameters in

332
00:27:34,660 --> 00:27:39,240
place and I will give me responses back
and I can see what the server has done

333
00:27:39,240 --> 00:27:43,800
with the information that comes back out
of the tool if your QA team has an

334
00:27:43,800 --> 00:27:48,649
understanding of how to test these
parameters they can put they can build a

335
00:27:48,650 --> 00:27:53,240
test load scenario right for negative
numbers positive numbers whatever

336
00:27:53,240 --> 00:27:57,809
billion A's how it is that they want to
test these things that can stick them in

337
00:27:57,809 --> 00:28:03,030
here and test with it right as part of
the QA process it's quite simple to do

338
00:28:03,030 --> 00:28:06,710
you mean I just done on stage here
obviously I know how to use the store

339
00:28:06,710 --> 00:28:11,800
but it only takes seconds to teach
someone the tools free which makes it a

340
00:28:11,800 --> 00:28:16,710
lot better the way I showed it to you is
the free version if you want to spend

341
00:28:16,710 --> 00:28:22,900
$350 on this you can come down here and
say instead of the payloads where I add

342
00:28:22,900 --> 00:28:27,340
them in manually I can pick them out of
a list and run the payload off the

343
00:28:27,340 --> 00:28:31,100
on-board list but the free version
allows for you type in whatever it is

344
00:28:31,100 --> 00:28:35,780
that you want to your QA team can add a
new tool of their sweet cost them

345
00:28:35,780 --> 00:28:40,790
nothing and they can start doing
security test thing right in the QA

346
00:28:40,790 --> 00:28:47,870
process so we're going out of QA let's
talk about operations right so we move

347
00:28:47,870 --> 00:28:52,120
this thing and production it sitting
there all happily running you got your

348
00:28:52,120 --> 00:28:57,469
store up anybody can buy all the calls
that they want and that's going to

349
00:28:57,470 --> 00:29:03,030
generate logs logs are going to show
things like login logout the requests

350
00:29:03,030 --> 00:29:08,090
that are made to the application what
we're gonna do is just simply instrument

351
00:29:08,090 --> 00:29:15,409
are logs so that the logs will tell us
when things are going wrong right so all

352
00:29:15,410 --> 00:29:18,730
of that application attacks that
happened are going to be visible in your

353
00:29:18,730 --> 00:29:22,760
logs and if you've ever seen a data
breach happened across the web

354
00:29:22,760 --> 00:29:26,770
application you can just go to the top
of the log file and scroll as fast as

355
00:29:26,770 --> 00:29:30,650
you can and you'll see it right this big
blob floating by and you go wrong there

356
00:29:30,650 --> 00:29:31,290
is

357
00:29:31,290 --> 00:29:36,680
so if the human eye can pick that up for
sure computers can do it way better and

358
00:29:36,680 --> 00:29:41,270
so instrumental your logs with some sort
of alerting mechanism is not that hard

359
00:29:41,270 --> 00:29:46,300
you can do this with Python or perot
just drifting across the logs or you can

360
00:29:46,300 --> 00:29:50,830
use something like Splunk most
organizations that care about their logs

361
00:29:50,830 --> 00:29:56,860
have Splunk anyway this is the title of
stalkers application security with the

362
00:29:56,860 --> 00:30:01,370
stuff you already have so I'm assuming
that you have sprung but if you don't

363
00:30:01,370 --> 00:30:05,760
rewrite some scripts in the new house
but most organizations look at their

364
00:30:05,760 --> 00:30:11,310
logs as an artifact I work for a company
that was contacted by the sky and

365
00:30:11,310 --> 00:30:15,179
Finland who said I found cross-site
scripting in your website anybody ever

366
00:30:15,180 --> 00:30:16,170
have this happen

367
00:30:16,170 --> 00:30:20,010
somebody contact them and says we got
you got problems nobody raised their

368
00:30:20,010 --> 00:30:24,120
hand alright well this guy lives in
Finland is named john albert is a free

369
00:30:24,120 --> 00:30:26,520
right now

370
00:30:26,520 --> 00:30:32,670
cross-site scripting on our website you
should go fix that and I said to myself

371
00:30:32,670 --> 00:30:37,490
I wonder what it looks like when he's
trying to attack someone so I went and

372
00:30:37,490 --> 00:30:41,660
looked at the logs right and in the
large screamed it hears all these script

373
00:30:41,660 --> 00:30:46,290
tags and craziness come across in this
parameter there it was right there we

374
00:30:46,290 --> 00:30:50,620
didn't know he was doing it and tell he
emailed us because we don't wander the

375
00:30:50,620 --> 00:30:56,010
logs right now and the reason why I'm
standing here and telling you this thing

376
00:30:56,010 --> 00:31:01,470
is most organizations look at the logs
as some kind of artifact we can go back

377
00:31:01,470 --> 00:31:06,440
to this thing and dive into it later but
I'm telling you right now all of the

378
00:31:06,440 --> 00:31:10,160
activity that's happening in your logs
right now is stuff that you should care

379
00:31:10,160 --> 00:31:15,260
about right now you should be looking at
your laws so why not use your large as a

380
00:31:15,260 --> 00:31:21,100
real-time alerting tool right now you
answer me logs some attacker rode your

381
00:31:21,100 --> 00:31:25,629
application they sendin cross-site
scripting tests are they send in you

382
00:31:25,630 --> 00:31:29,400
know some kind of sequence action probe
whatever the thing is right

383
00:31:29,400 --> 00:31:33,730
your application is going to log all the
requests are complying in by the way

384
00:31:33,730 --> 00:31:37,180
given a lot of this space if you crash
because your log disk

385
00:31:37,180 --> 00:31:42,440
that's just comical you shouldn't do
that what you need to do then is

386
00:31:42,440 --> 00:31:45,910
correlate the logs you've gotta have
some kind of engine that will run

387
00:31:45,910 --> 00:31:51,340
through your logs index the data that's
there and understand what's in there and

388
00:31:51,340 --> 00:31:55,860
then instruments alerting so that way
you can be notified when attackers

389
00:31:55,860 --> 00:32:02,000
happening so let's look at what a probe
looks like inside of the logs and in

390
00:32:02,000 --> 00:32:06,860
true demo fashion I tested this last
night worked perfectly

391
00:32:06,860 --> 00:32:14,270
this morning my license is expired on
long as you would expect live demos

392
00:32:14,270 --> 00:32:18,629
never work right but if I just simply
come in here and I look for things like

393
00:32:18,630 --> 00:32:23,490
you know do I see the word test I can
scroll down and you can see

394
00:32:24,350 --> 00:32:33,840
scroll down a little bit and you can see
I through this test at this morning when

395
00:32:33,840 --> 00:32:37,789
I got my license as a back up and
running through this you know little

396
00:32:37,789 --> 00:32:42,379
stripping test at it and sure enough the
longest seeing it what's great about

397
00:32:42,380 --> 00:32:48,320
Splunk as I can now mark this up and say
if you see event's like this text me to

398
00:32:48,320 --> 00:32:52,780
eat whatever it is that you would like
to use as your learning style you can

399
00:32:52,780 --> 00:32:53,678
have it

400
00:32:53,679 --> 00:32:57,169
popular to you that says hey you're
being probed right now somebody is

401
00:32:57,169 --> 00:33:02,620
looking at your application you are
under attack and you can use this

402
00:33:02,620 --> 00:33:08,020
information to have your you know SEC
ops team of ops team where the team is

403
00:33:08,020 --> 00:33:12,799
its monitoring production suddenly start
looking at things well what's the source

404
00:33:12,799 --> 00:33:17,590
address on this where's that coming from
maybe we can just geofence this area for

405
00:33:17,590 --> 00:33:21,668
sure you start seeing attacks like this
in their originating from finland I can

406
00:33:21,669 --> 00:33:26,850
give you the guys email address that's
doing it and there's a few of those guys

407
00:33:26,850 --> 00:33:32,020
out there by the way is only interested
in security he didn't want money on a

408
00:33:32,020 --> 00:33:36,629
t-shirt he just wanted us to not have
process gripping our website because

409
00:33:36,630 --> 00:33:41,140
they want to stop spreading around but
not everybody's altruistic like that

410
00:33:41,140 --> 00:33:46,600
right so you're logged are screaming the
problems I have but you're using them as

411
00:33:46,600 --> 00:33:50,649
an artifact you're going to look at them
later right to know what the average

412
00:33:50,650 --> 00:33:57,760
time is to detect that you've been
breached its over six months right

413
00:33:57,760 --> 00:34:03,280
the target breach went on and on and on
for a really long time so keeping your

414
00:34:03,280 --> 00:34:06,559
logs for a long time is a good idea but
would it be better to notify you right

415
00:34:06,559 --> 00:34:11,149
away hey you're right now you should
probably take a look at that that's a

416
00:34:11,149 --> 00:34:12,549
little bit

417
00:34:12,550 --> 00:34:18,560
better way to approach the thing alright
so something I just stumbled across

418
00:34:31,670 --> 00:34:55,880
sure that's a problem I'd like that
that's not a really simple problem

419
00:34:55,880 --> 00:35:00,340
that's all I won't be able to tell you
that it's exploitable I will be able to

420
00:35:00,340 --> 00:35:06,750
tell you they are being broke which is
the first step and it's important if you

421
00:35:06,750 --> 00:35:10,150
don't want to pay attention to the
alerts you don't have to but if you

422
00:35:10,150 --> 00:35:16,890
drive in and look at you know this guy
has thrown 58 script tested me for sure

423
00:35:16,890 --> 00:35:28,490
you're you're being probed sure it does
but I the reason I'm bringing this up as

424
00:35:28,490 --> 00:35:32,220
I walked into hundreds and hundreds of
organizations that are doing this

425
00:35:33,110 --> 00:35:43,190
yeah that's another point yeah if you
generate enough noise there won't be

426
00:35:43,190 --> 00:35:48,080
enough signal for anybody to care right
so and it's a good point at something

427
00:35:48,080 --> 00:35:52,410
they have to be careful of mine flood
but if you know that you have specific

428
00:35:52,410 --> 00:35:55,930
parameters are vulnerable to a thing and
you don't have a laugh this is a good

429
00:35:55,930 --> 00:36:04,390
way to find out so we stumbled across
this thing my boss actually found this

430
00:36:04,390 --> 00:36:09,940
for me we were doing application
security review for an organization that

431
00:36:09,940 --> 00:36:15,970
has all of their stuff posted an Amazon
and they said well could you take a look

432
00:36:15,970 --> 00:36:18,279
at the way we have a permissions set

433
00:36:18,280 --> 00:36:22,870
for application services and our
security groups and Amazon and I said

434
00:36:22,870 --> 00:36:28,490
yeah sure you know send me the WSDL
output and they send you a file that

435
00:36:28,490 --> 00:36:34,089
looks like this if you go into your
Amazon environment and do it all output

436
00:36:34,090 --> 00:36:39,190
for your security groups this is what
you get accepted to wait longer so it's

437
00:36:39,190 --> 00:36:43,160
just pages and pages and pages of these
IPOs can touch the security group which

438
00:36:43,160 --> 00:36:47,259
can do this thing and it's a real pain
to sort through it and figure out are

439
00:36:47,260 --> 00:36:51,170
there were done and I P the overlapping
space here you know what are the

440
00:36:51,170 --> 00:36:56,860
potential problems so we found this
really great to get and if you just

441
00:36:56,860 --> 00:37:02,340
google AWS visualizer that'll get you
there and what's really great about this

442
00:37:02,340 --> 00:37:08,410
thing is it takes all of this Jason
output and turns it into a visual

443
00:37:08,410 --> 00:37:14,839
representation of your security groups
so here's the screencap of it but if I

444
00:37:14,840 --> 00:37:20,500
move out here there's a little bit
better it's an SVG file so it renders a

445
00:37:20,500 --> 00:37:25,330
little bit weird in a web browser but
you can immediately see the value at the

446
00:37:25,330 --> 00:37:29,410
top are the IP addresses and then in the
middle for security groups and at the

447
00:37:29,410 --> 00:37:33,680
bottom it's what what they can do and as
you scroll through this thing

448
00:37:34,460 --> 00:37:38,180
stuff starts to immediately leap out at
you for instance there's a 10 address

449
00:37:38,180 --> 00:37:44,190
space redundant host route and side of
it so I ask the question why is this

450
00:37:44,190 --> 00:37:48,460
redundant host route here it seems like
you're duplicating effort and creating

451
00:37:48,460 --> 00:37:54,810
problems all at the same time it turns
out Amazon forces this on to you you

452
00:37:54,810 --> 00:38:00,830
can't undo it and what it is I think
enough people have gone in and deleted

453
00:38:00,830 --> 00:38:05,880
things and then called Amazon and said
it doesn't work but they forced the one

454
00:38:05,880 --> 00:38:10,730
you so that things will stay connected
and keep working but as I went through

455
00:38:10,730 --> 00:38:15,770
the analysis of this application I said
well there's a bunch of public IP

456
00:38:15,770 --> 00:38:19,860
addresses here not this has all been
cleaned up its not their addresses don't

457
00:38:19,860 --> 00:38:21,809
go right now down none of this makes
sense

458
00:38:21,809 --> 00:38:26,059
but I went through it I said we can you
give me a list of the known IP addresses

459
00:38:26,059 --> 00:38:29,809
that should be connecting two things and
they gave me the list I looked at the

460
00:38:29,809 --> 00:38:33,569
top and I found an IP address in there
that did not exist in their known list

461
00:38:33,569 --> 00:38:38,630
right and I said what is this thing oh
yeah we put that VPN box in like two

462
00:38:38,630 --> 00:38:39,489
years ago

463
00:38:39,489 --> 00:38:44,359
ripped it out last year when they left
the security group stuff in there AWS

464
00:38:44,359 --> 00:38:51,180
environment so for sure there are things
hiding in places that we all need to go

465
00:38:51,180 --> 00:38:56,118
evaluate this doesn't cost anything this
tour is free if you have a Cali box all

466
00:38:56,119 --> 00:39:00,259
you have to do a gem install AWS
visualizer and you're done it will

467
00:39:00,259 --> 00:39:04,910
process the Jason data for you and I'll
put it like this so free tools are

468
00:39:04,910 --> 00:39:08,999
always fun you know freedom beer but
this is the way that you want to do this

469
00:39:08,999 --> 00:39:18,598
thing and questions so few successes
organizations that I hold up as

470
00:39:18,599 --> 00:39:23,269
organizations that are doing things well
we work with a lot of financial

471
00:39:23,269 --> 00:39:28,738
organizations big organizations that
oftentimes when you walk in and say what

472
00:39:28,739 --> 00:39:33,329
are we doing for application security
today I almost always get this but we've

473
00:39:33,329 --> 00:39:38,089
got fifteen hundred applications seven
of them we care about and we don't do

474
00:39:38,089 --> 00:39:41,670
analysis for security on anything else I
hear that a lot

475
00:39:42,489 --> 00:39:46,689
all is a difficult problem right you
want to look at all of your applications

476
00:39:46,689 --> 00:39:51,848
and I hate to bring up target over and
over and over but target had an

477
00:39:51,849 --> 00:39:55,009
application that they didn't care about
and look what happened to them right

478
00:39:55,009 --> 00:39:59,689
it's an example of what can go on as to
what you want to try to do is look at

479
00:39:59,689 --> 00:40:03,920
all of your apps if you start to turn
this into your development lifecycle you

480
00:40:03,920 --> 00:40:08,239
can get all the apps that you develop if
you build a better security program

481
00:40:08,239 --> 00:40:12,689
that's more than just Survey Monkey and
spreadsheets you can end up with all of

482
00:40:12,689 --> 00:40:20,229
your inbound applications cleaned up we
work with an organization over a couple

483
00:40:20,229 --> 00:40:25,848
of years that's a healthcare
organization and they always have to do

484
00:40:25,849 --> 00:40:27,650
things like informed the hip

485
00:40:27,650 --> 00:40:30,830
or the some kind of policy that held
over their head that they have to go

486
00:40:30,830 --> 00:40:37,080
live by and what ends up happening as a
myopic focus on just that I need to be

487
00:40:37,080 --> 00:40:41,490
habitable I need to be whatever
compliant and they push to go that way

488
00:40:42,430 --> 00:40:45,819
those of us that working security no
security delivers compliance compliance

489
00:40:45,820 --> 00:40:50,260
does not deliver security so if you have
a secure environment you end up like

490
00:40:50,260 --> 00:40:54,040
this all the techniques that I brought
up today were implemented by this health

491
00:40:54,040 --> 00:40:58,400
care organization I think they're here
today they spoken publicly about this so

492
00:40:58,400 --> 00:41:05,370
I mention their name at the Mayo Clinic
they have built environment where all of

493
00:41:05,370 --> 00:41:10,049
their code gets canned every night for
all of their applications gets pushed up

494
00:41:10,050 --> 00:41:14,720
through build services etc all of their
development staff use I D integrations

495
00:41:14,720 --> 00:41:17,270
to look at all of their applications

496
00:41:17,270 --> 00:41:21,230
anything that comes from a vendor has to
go through a vendor assessment process

497
00:41:21,230 --> 00:41:26,930
which they make their vendors pay for
you will deliver me this report as you

498
00:41:26,930 --> 00:41:34,140
get this done and what I love about this
is a gentleman who was the CISO for Mayo

499
00:41:34,140 --> 00:41:40,629
Clinic he'll explain to you that good
software security pays for the tools

500
00:41:40,630 --> 00:41:45,050
that you need for it if you let it go
you're going to end up with high costs

501
00:41:45,050 --> 00:41:49,430
and trying to repair things if you fix
it early money that you spend on the

502
00:41:49,430 --> 00:41:56,330
tools that you have is going to be given
back to you and and huge ways some other

503
00:41:56,330 --> 00:41:57,569
things to consider

504
00:41:57,570 --> 00:42:02,650
I brought up some to type on and
organization is another 10 black if

505
00:42:02,650 --> 00:42:06,370
you're using any open source software or
software that you don't know where it

506
00:42:06,370 --> 00:42:07,450
came from

507
00:42:07,450 --> 00:42:12,100
start looking at these kinds of tools
understand that when you go to pull down

508
00:42:12,100 --> 00:42:17,250
a library at that library may be
vulnerable that library maybe fifteen

509
00:42:17,250 --> 00:42:20,630
years old and vulnerable right a lot of
the software that's on the Internet

510
00:42:20,630 --> 00:42:27,020
today is an abandoned master's degree
project right so you have to keep that

511
00:42:27,020 --> 00:42:29,990
in mind for your point these things down

512
00:42:29,990 --> 00:42:35,270
have you thought about maybe just
instrument in your applications so that

513
00:42:35,270 --> 00:42:38,050
it doesn't really matter what your
developers do

514
00:42:38,050 --> 00:42:44,250
they're starting to come on board these
new terms raskin I asked I just looked

515
00:42:44,250 --> 00:42:50,330
at a company called property when I was
out at RSA and they will instrument your

516
00:42:50,330 --> 00:42:54,190
Java stack so that it doesn't matter
what kind of input validation routine

517
00:42:54,190 --> 00:43:01,260
year on Dell do there's granted it's a
it's kind of a signature-based thing and

518
00:43:01,260 --> 00:43:04,160
only block certain things but if you're
being plagued by cross-site scripting

519
00:43:04,160 --> 00:43:09,310
it's a pretty good an easy way to get
rid of just layer doesn't make mistakes

520
00:43:09,310 --> 00:43:14,660
and clean it up with the tools that you
have so no matter how you build it

521
00:43:14,660 --> 00:43:18,580
something that your vendors are never
going to tell you you need to buy the

522
00:43:18,580 --> 00:43:21,930
tools that work for your thing right

523
00:43:21,930 --> 00:43:25,549
check marks is always going to tell you
we cover all all applications but if it

524
00:43:25,550 --> 00:43:29,830
doesn't cover your application it's
useless fake officer really important

525
00:43:29,830 --> 00:43:35,650
than a broad scale and look at all the
different types of services that are

526
00:43:35,650 --> 00:43:40,140
available to you if you don't spend
money on pro services you need to spend

527
00:43:40,140 --> 00:43:45,170
time on pro services instrument the stop
put it together make it part of your

528
00:43:45,170 --> 00:43:49,880
software development lifecycle if you
buy a widget make the vendor train you

529
00:43:49,880 --> 00:43:56,630
on it right we often see shelf wear due
to train drivers right they just use

530
00:43:56,630 --> 00:43:59,840
that thing so they don't do it and plug
it together as much as you can

531
00:44:00,620 --> 00:44:04,930
any information or data that you can get
you can glean that data and use it for

532
00:44:04,930 --> 00:44:10,100
something else and it's really good idea
to have development life cycle that uses

533
00:44:10,100 --> 00:44:13,770
all of the tools and all the
communication mechanism can enter my

534
00:44:13,770 --> 00:44:18,970
time if you have any questions you can
ask them now I think sixty seconds left

535
00:44:18,970 --> 00:44:23,970
or you can stop me at the end of the
bank thank you very much

