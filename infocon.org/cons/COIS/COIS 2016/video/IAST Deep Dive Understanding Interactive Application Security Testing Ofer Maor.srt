1
00:00:00,000 --> 00:00:05,690
my name is offer more and I'm talk I
will talk to you today about security

2
00:00:05,690 --> 00:00:08,670
automation security test animation is
part of the software development

3
00:00:08,670 --> 00:00:17,300
lifecycle so few words about myself I do
security strategy and synopsis how many

4
00:00:17,300 --> 00:00:17,980
people here

5
00:00:17,980 --> 00:00:24,140
heard about synopsis very low so how
many people have heard about Kaveri d

6
00:00:24,140 --> 00:00:31,849
similar so synopsis sinopsis actually
very large software company we've

7
00:00:31,849 --> 00:00:37,059
traditionally been focused on chip
design software so that's why must have

8
00:00:37,059 --> 00:00:41,839
never heard about us but in last couple
of years we created a new business unit

9
00:00:41,840 --> 00:00:47,340
for security software software testing
the bunch of products we acquired a

10
00:00:47,340 --> 00:00:52,250
bunch of companies including my company
which is how I joined synapses so worth

11
00:00:52,250 --> 00:00:56,239
getting tonight that's their commercial
plug now we can move forward

12
00:00:56,780 --> 00:01:03,250
I've been doing security most of my life
my professional life I've been doing

13
00:01:03,250 --> 00:01:09,850
application security since about 2001 it
was very uncommon to talk about it that

14
00:01:09,850 --> 00:01:15,419
I had a chance to work from pretty much
every side of the spectrum as a pen

15
00:01:15,420 --> 00:01:20,990
tester in a hacker and application
firewall application scanner and code

16
00:01:20,990 --> 00:01:26,899
analyzer I came up with a new technology
for code analysis which is called I

17
00:01:26,900 --> 00:01:31,040
asked you haven't heard about that
interesting to learn about that as well

18
00:01:31,040 --> 00:01:38,520
that's what I do in the last years was
my product with the highest I've spent a

19
00:01:38,520 --> 00:01:43,149
lot of time helping organizations build
security test automation into their

20
00:01:43,149 --> 00:01:48,640
development life cycle and with a strong
focus on a jail where automation is very

21
00:01:48,640 --> 00:01:53,250
big and that will talk about today I've
been with last post is part of this

22
00:01:53,250 --> 00:02:01,170
event since its inception in 2002 been
that chapter leader 40 asp is relevant

23
00:02:01,170 --> 00:02:03,300
part of the committees

24
00:02:03,300 --> 00:02:10,430
I'm also really avid photographer and I
really liked 21 times stand at the

25
00:02:10,430 --> 00:02:15,070
podium and speak about my photos but
apparently that doesn't get accepted so

26
00:02:15,070 --> 00:02:24,350
I have an agile she down to go on with
that ok so let's go on the actual

27
00:02:24,350 --> 00:02:30,200
security challenge so what is the
address security challenge so it may

28
00:02:30,200 --> 00:02:34,570
sound stupid but it's really very
similar to whatever challenges we have

29
00:02:34,570 --> 00:02:40,940
was normal software development only in
much shorter time frames and while that

30
00:02:40,940 --> 00:02:45,990
sounds trivial that creates new takes on
these challenges so the first thing we

31
00:02:45,990 --> 00:02:49,770
have was a joke is that we have very
short cycles right we used to develop

32
00:02:49,770 --> 00:02:54,090
software over a year now we develop
software over the course of four weeks

33
00:02:54,090 --> 00:03:01,460
three weeks one week 1 day 1 hour I have
customers that push hundreds of new

34
00:03:01,460 --> 00:03:06,890
features per day in continuous delivery
and they wanna kill that test that

35
00:03:06,890 --> 00:03:12,738
tested for functionality tested for
security and push that within hours it's

36
00:03:12,739 --> 00:03:17,220
remarkable it's amazing to see that and
a lot of things get compromised in the

37
00:03:17,220 --> 00:03:25,360
way and we'll talk about that so we have
very short cycles and as a result it's

38
00:03:25,360 --> 00:03:31,400
very hard to plug security in right and
the security people we we are outsiders

39
00:03:31,400 --> 00:03:36,060
to the development process and that
doesn't work when it's very short cycles

40
00:03:36,060 --> 00:03:39,550
right if it takes us I'm not even
talking about continuous delivery but if

41
00:03:39,550 --> 00:03:43,910
its stake if it takes a week to build
test and delivering new software

42
00:03:43,910 --> 00:03:49,440
security people become a bottleneck and
so we have to have security done by

43
00:03:49,440 --> 00:03:54,280
developers and we've tried that for a
lot of years right and it's not really

44
00:03:54,280 --> 00:03:58,810
working great for us so we'll talk about
today will how we can make that work to

45
00:03:58,810 --> 00:04:03,890
some extent and he's the only solution
we have to let security being handled by

46
00:04:03,890 --> 00:04:05,730
developers

47
00:04:05,730 --> 00:04:09,480
and the problem is that developers don't
necessarily understand the problem or

48
00:04:09,480 --> 00:04:14,879
they don't and I know we will promote
security training and I'll talk about

49
00:04:14,879 --> 00:04:20,659
that later but realistically and trust
me I love training I love security

50
00:04:20,660 --> 00:04:23,560
training for developers I think
everybody should train their developer

51
00:04:23,560 --> 00:04:28,690
for security all the time but it's not a
full solution they will not become

52
00:04:28,690 --> 00:04:34,150
experts we all know that developers
change their jobs every six to eighteen

53
00:04:34,150 --> 00:04:42,260
month and yeah that's that's life now
and we just can't really make them

54
00:04:42,260 --> 00:04:48,110
security experts and they're having a
hard time prioritizing risks so one of

55
00:04:48,110 --> 00:04:51,510
the problems and we all know that was
security and as we start security

56
00:04:51,510 --> 00:04:55,949
testing is that we get too much data you
get too many findings too many problems

57
00:04:55,949 --> 00:05:01,919
too many potential problems too many
risks and we want the developers to take

58
00:05:01,919 --> 00:05:04,919
control of that and prioritized and
that's not gonna happen because they

59
00:05:04,919 --> 00:05:10,820
can't do that so all this is creating a
new set of challenges that we need to

60
00:05:10,820 --> 00:05:17,260
resolve and to resolve that we need
automation and I will come back to this

61
00:05:17,260 --> 00:05:22,889
war had a lot of times during my talk
today but realistically everything

62
00:05:22,889 --> 00:05:29,130
that's happening in an agile development
lifecycle needs to be fully automated if

63
00:05:29,130 --> 00:05:35,180
we need people in the process it's a
fail if we say oh just this little thing

64
00:05:35,180 --> 00:05:40,810
here with the will go through a security
guy it's a fail because we will become a

65
00:05:40,810 --> 00:05:47,110
bottleneck because it's amazing how much
of this is going on every day that we

66
00:05:47,110 --> 00:05:51,979
just can't hire enough people to give an
answer to that so we need a solution

67
00:05:51,979 --> 00:05:56,610
that's fully automated we need a
solution that's continuous it can work

68
00:05:56,610 --> 00:06:00,940
all the time together with the rest of
the development life cycle which is

69
00:06:00,940 --> 00:06:06,520
continues today in that show work and we
needed to be practical and this is a big

70
00:06:06,520 --> 00:06:14,880
thing and practical is hard for security
people we tend to be very professional

71
00:06:14,880 --> 00:06:18,640
everything needs to be great it was a
talk how many of you were here in the

72
00:06:18,640 --> 00:06:19,280
previous

73
00:06:19,280 --> 00:06:25,299
talk about threat modeling just a bunch
but it's it was a good talk because we

74
00:06:25,300 --> 00:06:30,790
have to know what we focus on because
realistically and as we go to rapid

75
00:06:30,790 --> 00:06:36,030
development even more so we're not gonna
fix everything we're going to go live to

76
00:06:36,030 --> 00:06:42,619
production with their abilities and
that's fine as long as we know which

77
00:06:42,620 --> 00:06:47,090
will their abilities and we can live
with them for certain amount of time and

78
00:06:47,090 --> 00:06:55,530
we have compensating controls of course
so what I'm gonna do with you now is go

79
00:06:55,530 --> 00:07:01,010
over three customers that we have that
we work with to build a program like

80
00:07:01,010 --> 00:07:04,539
that and I'm not going to talk about a
product too much but more about the

81
00:07:04,540 --> 00:07:09,160
process and what we've been there and
there are three different cases because

82
00:07:09,160 --> 00:07:14,650
the first case is a very immature
company in terms of both Agilent

83
00:07:14,650 --> 00:07:19,310
security and the third cases of a very
mature and so we can see the differences

84
00:07:19,310 --> 00:07:23,620
would you see what works everywhere we
can see what might not work in certain

85
00:07:23,620 --> 00:07:29,060
cases and we're small crowd so feel free
to ask questions as we go along the way

86
00:07:29,060 --> 00:07:34,970
to the end so first case insurance
company

87
00:07:35,580 --> 00:07:42,630
medium-sized insurance company not very
big abdel maturity I saying transition

88
00:07:42,630 --> 00:07:46,800
it was really when we came there were
just starting their agile transformation

89
00:07:46,800 --> 00:07:52,960
project and this is a big word now if
your consultant if you go to customers

90
00:07:52,960 --> 00:07:57,690
you will see that everybody's doing a
joke transformation everybody wants to

91
00:07:57,690 --> 00:08:02,780
be a joke and you go to these
organizations that still have a two-year

92
00:08:02,780 --> 00:08:10,349
wonderful process and there we're just
getting ready to move to a joke and that

93
00:08:10,350 --> 00:08:13,590
is because their bosses heard that a gel
is good

94
00:08:13,590 --> 00:08:17,590
told them to move to a jail but they
don't have the right team and so that's

95
00:08:17,590 --> 00:08:23,070
a big part of the challenge everybody
wants to be at the majority of the big

96
00:08:23,070 --> 00:08:26,950
organizations are still struggling very
hard with that and as we try to give

97
00:08:26,950 --> 00:08:30,860
them solutions we need to adapt to that
there's very few customers that are

98
00:08:30,860 --> 00:08:32,250
really a joke

99
00:08:32,250 --> 00:08:40,440
later but so these guys they were very
not that they had one project which was

100
00:08:40,440 --> 00:08:46,110
their new agile project and they came to
us and say we need a full solution for

101
00:08:46,110 --> 00:08:53,980
all our projects which are all a gel at
some level being done and they did

102
00:08:53,980 --> 00:08:58,950
understand security pretty well as their
insurance company they've been doing

103
00:08:58,950 --> 00:09:04,290
interesting for years so that was the
good side but they had very little

104
00:09:04,290 --> 00:09:08,980
automation from the functionality
perspective and will talk about this so

105
00:09:08,980 --> 00:09:14,160
a lot of homegrown apps to have about
you dozens of applications they

106
00:09:14,160 --> 00:09:18,810
developed internally or through
outsourcing but they own the coded IP

107
00:09:18,810 --> 00:09:26,540
wheat which are getting 15 systems some
our customer-facing summer agent a

108
00:09:26,540 --> 00:09:35,319
facing some internal and I said varying
levels of maturity into a jail with some

109
00:09:35,320 --> 00:09:43,339
again lead projects had full continuous
integration everything automated and

110
00:09:43,339 --> 00:09:50,790
test automation there's nothing really
maybe use integration server but still a

111
00:09:50,790 --> 00:09:57,010
very slow process and luckily they
wanted the focus to be on the new system

112
00:09:57,010 --> 00:10:02,330
the new architecture which was good for
us although overtime they as they saw

113
00:10:02,330 --> 00:10:07,580
their transitioning a lot slower than he
wanted the change the process to fit

114
00:10:07,580 --> 00:10:12,100
some of the older technologies so what
were the challenges so the first

115
00:10:12,100 --> 00:10:18,250
challenge was no security background for
developers that's always the case and

116
00:10:18,250 --> 00:10:23,200
and we keep it this way the second
challenge as I said different and Joe

117
00:10:23,200 --> 00:10:27,730
maturity we couldn't have one process
that fits all but we try to create a lot

118
00:10:27,730 --> 00:10:33,110
of flexibility the third problem was
that there was insufficient test

119
00:10:33,110 --> 00:10:36,800
automation from a functionality
perspective now when we do security

120
00:10:36,800 --> 00:10:42,620
testing we like to see what the
applications during from functionality

121
00:10:42,620 --> 00:10:44,490
perspective if you don't have

122
00:10:44,490 --> 00:10:49,620
test automation that makes it harder to
introduce security test items they're

123
00:10:49,620 --> 00:10:55,490
not environments for that there's no
scripts to record and so on so they had

124
00:10:55,490 --> 00:11:01,240
very limited test automation and they
had very limited security resources so

125
00:11:01,240 --> 00:11:05,250
we're talking about a medium-sized
insurance company that five people in

126
00:11:05,250 --> 00:11:08,480
the security department not the
application security department the

127
00:11:08,480 --> 00:11:14,080
security right so firewalls policies
applique security all that was five

128
00:11:14,080 --> 00:11:23,290
people probably not so many resources to
help the process and of course being

129
00:11:23,290 --> 00:11:27,599
their insurance company a lot of
regulation that they need to meet liver

130
00:11:27,600 --> 00:11:32,660
to top it all they use a lot of
different technologies again that's very

131
00:11:32,660 --> 00:11:38,969
common for every large enterprises
java.net mainframe bunch of other things

132
00:11:38,970 --> 00:11:45,370
so the first thing we did when we came
over it was to work on the process will

133
00:11:45,370 --> 00:11:50,190
never write because bringing just a
technology that testing is great but it

134
00:11:50,190 --> 00:11:56,950
will not help so the first thing we have
to facility the cooperation between the

135
00:11:56,950 --> 00:12:02,320
R&D insecurity and you'll see that was
all my cases so I mentioned this before

136
00:12:02,320 --> 00:12:08,190
if you wanna do a jail and you went into
rapid development and you wanted to

137
00:12:08,190 --> 00:12:13,640
security in there you have to get the
developers or some part of the

138
00:12:13,640 --> 00:12:19,000
developers like the DevOps to take
ownership of the security and if you're

139
00:12:19,000 --> 00:12:23,660
getting a lot of pushback from them then
this is what you need to solve before

140
00:12:23,660 --> 00:12:30,719
anything else you cannot deliver
software quickly without somebody inside

141
00:12:30,720 --> 00:12:37,760
the development organization only and
security will not work they seen a lot

142
00:12:37,760 --> 00:12:42,079
of that so the first thing we got them
on board luckily the lady that was

143
00:12:42,079 --> 00:12:48,529
heading their whole DevOps and agile
transformation efforts was very

144
00:12:48,529 --> 00:12:53,199
cooperative and she was very happy to
take ownership on that she felt like

145
00:12:53,199 --> 00:12:56,140
that's part of what would make the
difference

146
00:12:56,140 --> 00:13:02,280
and we got on board the second thing was
while we did that was to make sure that

147
00:13:02,280 --> 00:13:05,959
the security people don't feel like
they're losing control right where

148
00:13:05,960 --> 00:13:11,520
security people we have to be in control
that's who we are and we are now giving

149
00:13:11,520 --> 00:13:15,750
the security responsibility to somebody
else that's not measured by security and

150
00:13:15,750 --> 00:13:21,130
not you know their butt on the line if
they get hacked so we have to make sure

151
00:13:21,130 --> 00:13:24,360
that we stay with security visibility
and I'll talk about that from the

152
00:13:24,360 --> 00:13:30,980
technical perspective in a min and we
created a weekly Approval Committee why

153
00:13:30,980 --> 00:13:36,210
and basically that there you know even
their address all is just fairly at 34

154
00:13:36,210 --> 00:13:40,680
weeks friends we're not talking
continues delivery here so they said we

155
00:13:40,680 --> 00:13:46,989
build a policy which stands what is good
or bad in principle but once a week we

156
00:13:46,990 --> 00:13:50,960
meet with look at the results from all
the different projects and if you want

157
00:13:50,960 --> 00:13:55,100
to go live the security has to approve
that is part of that committee so that's

158
00:13:55,100 --> 00:14:02,000
not fully automated I know but again we
had that and it works really well they

159
00:14:02,000 --> 00:14:08,150
came to trust the system over time and
now it's just a good way of discussing

160
00:14:08,150 --> 00:14:14,949
with security and things were not sure
about we did R&D training that was part

161
00:14:14,950 --> 00:14:19,270
of the project booze very basic the
point was not to teach the developers

162
00:14:19,270 --> 00:14:23,680
how to be security experts because they
will not it was more of an awareness

163
00:14:23,680 --> 00:14:27,839
training is like there is a distinct
home application security so you'd be

164
00:14:27,840 --> 00:14:33,510
amazed we go through this insurance
company for training about 250

165
00:14:33,510 --> 00:14:38,060
developers and asking how many people
here have heard about sequel injection

166
00:14:38,060 --> 00:14:41,280
and less than a third of the people in
the room rate

167
00:14:41,280 --> 00:14:48,750
yes that was a year and a half ago not
ten years ago so that's still the

168
00:14:48,750 --> 00:14:54,970
situation so we gave them basic training
get to know you know sequin jacket for

169
00:14:54,970 --> 00:14:58,890
us it's gripping there is this thing
called application security we're

170
00:14:58,890 --> 00:15:03,400
introducing a new solution and you
product that will give you results you

171
00:15:03,400 --> 00:15:06,270
need to take care of it's important

172
00:15:06,270 --> 00:15:13,860
and we created a risk policy right so we
sat down with them and essentially there

173
00:15:13,860 --> 00:15:19,360
were two parts to this one part was we
need to make sure watch from your

174
00:15:19,360 --> 00:15:26,400
perspective makes sense to go live with
enough not to go out and they said well

175
00:15:26,400 --> 00:15:29,560
at the point where at where we still
have a lot of problems and we want to

176
00:15:29,560 --> 00:15:34,369
move forward we don't want to break the
bill too much so anything high or

177
00:15:34,370 --> 00:15:40,050
critical we don't go live but all the
mediums and lows we can live with that

178
00:15:40,050 --> 00:15:45,780
and the other part of that was that they
look to water product that is in terms

179
00:15:45,780 --> 00:15:51,069
of saying well this is hi this is low to
medium and they changed and so we needed

180
00:15:51,070 --> 00:15:55,530
to provide them with a way to edit their
risk level the product reduces because

181
00:15:55,530 --> 00:16:00,189
certain things that from our perspective
might be considered medium would be a

182
00:16:00,190 --> 00:16:05,690
violation of regulations for them and so
they needed to change and so we created

183
00:16:05,690 --> 00:16:11,780
this policy and essentially with this
policy were able to say we can live with

184
00:16:11,780 --> 00:16:15,579
that of course with 26 deflator and
we'll talk about it second we can live

185
00:16:15,580 --> 00:16:21,650
with that we can live with that and we
can control it and the last part was

186
00:16:21,650 --> 00:16:26,510
they wanted multiple output channels
what do you mean by that

187
00:16:27,270 --> 00:16:31,420
so we have this product that finds
vulnerabilities and different people in

188
00:16:31,420 --> 00:16:36,500
their organization want to consume this
differently so we have one output to

189
00:16:36,500 --> 00:16:39,740
developers echoes through the bug
tracking system we have another up

190
00:16:39,740 --> 00:16:47,110
security through PDF reports and so on
and so on so in terms of technologies

191
00:16:47,110 --> 00:16:52,640
they had Jenkins as their continuous
integration that probably by far the

192
00:16:52,640 --> 00:16:56,210
most popular build server out there

193
00:16:56,710 --> 00:17:02,520
takes code from all the Jap Java and.net
repositories builds it runs the test

194
00:17:02,520 --> 00:17:07,510
automation then runs the security
automation they had ticket tracking with

195
00:17:07,510 --> 00:17:12,750
HP Quality Center so basically the bug
system so one of the things that we

196
00:17:12,750 --> 00:17:18,380
strongly believe in if you want to have
developers be part of the process you

197
00:17:18,380 --> 00:17:19,580
need to speak in Devon

198
00:17:19,579 --> 00:17:24,069
her language and the first thing is how
do you see the data to them and

199
00:17:24,069 --> 00:17:29,330
developers they have a very clear motive
operation they write code for some time

200
00:17:29,330 --> 00:17:31,610
and they fix bugs for the rest of it

201
00:17:31,610 --> 00:17:39,620
ok and they fix bugs that come through
the ticketing in some more advanced

202
00:17:39,620 --> 00:17:43,389
organizations everything comes through
the ticketing not just the bugs but also

203
00:17:43,390 --> 00:17:50,030
their requirements and so if you try to
push and you weigh like reports or a new

204
00:17:50,030 --> 00:17:55,280
user interface for the security system
to give them the feet of what they need

205
00:17:55,280 --> 00:17:59,800
to do in security you're confusing that
you're making them work in a way that's

206
00:17:59,800 --> 00:18:05,250
not natural for them and they will push
back they don't like security right

207
00:18:05,250 --> 00:18:09,220
developers don't like security it's it
they don't feel like it's helping them

208
00:18:09,220 --> 00:18:13,790
because they need to deliver
functionality on time and that just

209
00:18:13,790 --> 00:18:19,230
takes more time so at least we need to
help them so we integrate into ticketing

210
00:18:19,230 --> 00:18:25,740
system so they had HP they had some
static analysis for quality open source

211
00:18:25,740 --> 00:18:29,990
static analysis that was actually not
integrated into the process because it

212
00:18:29,990 --> 00:18:35,110
had too many false positives and that's
not easy to work with in an automated

213
00:18:35,110 --> 00:18:42,020
environment and then whatever they say
created and you build they deployed that

214
00:18:42,020 --> 00:18:47,580
built into their test environment and
render test automation which again

215
00:18:47,580 --> 00:18:57,399
wasn't fully covered and did a whole
bunch of manual testing on that ongoing

216
00:18:57,400 --> 00:19:05,810
throughout the Sprint so how did we
integrate so we integrated to launch

217
00:19:05,810 --> 00:19:10,870
from the Jenkins so whenever a new build
this created after test automation takes

218
00:19:10,870 --> 00:19:17,429
place security on a meeting takes place
and we integrated with both automated

219
00:19:17,430 --> 00:19:21,330
speed an annual testing and now this
important if you have full test

220
00:19:21,330 --> 00:19:25,470
automation and you don't you never have
full test automation people say they

221
00:19:25,470 --> 00:19:30,220
have full test automation but don't
really but if you have almost full test

222
00:19:30,220 --> 00:19:32,740
automation then it's very good to run

223
00:19:32,740 --> 00:19:37,990
security testing as part of that right
you can see what test animation is doing

224
00:19:37,990 --> 00:19:44,090
and then run security test automation on
top of that but if you don't have test

225
00:19:44,090 --> 00:19:47,530
automation and you try to run your
security test automation off that you'll

226
00:19:47,530 --> 00:19:53,379
have coverage problems because your test
automation only test 10% of our appt and

227
00:19:53,380 --> 00:19:59,170
what about the rest and so what we did
was we actually integrated so we see the

228
00:19:59,170 --> 00:20:05,240
manual testing and we can later replay
that so we would actually automatically

229
00:20:05,240 --> 00:20:09,280
replay their manual testing as test
automation because they didn't have

230
00:20:09,280 --> 00:20:15,399
enough test automation on their own so
we merged everything we saw from

231
00:20:15,400 --> 00:20:20,740
automated manual testing and we ran that
every day and then as I said we created

232
00:20:20,740 --> 00:20:25,900
multiple outfits so there were a few
outputs to the first output was a bill

233
00:20:25,900 --> 00:20:31,670
drinker so when you create a building
Jenkins right you create the bill and

234
00:20:31,670 --> 00:20:36,710
then you can run to run a bunch of
scripts and if they return a certain

235
00:20:36,710 --> 00:20:42,520
output you can script the Jenkins to say
this build is broken right because it in

236
00:20:42,520 --> 00:20:48,679
compile for it compiled but it didn't
pass basic sanity and so if it doesn't

237
00:20:48,679 --> 00:20:55,340
pass basic security sanity meaning it
has high or critical findings to build

238
00:20:55,340 --> 00:21:00,360
will break and that's a big deal if
you're the first person fight to break

239
00:21:00,360 --> 00:21:07,959
bills right so if a developer introduces
a new vulnerability to build breaks and

240
00:21:07,960 --> 00:21:11,690
all the findings that are found are
pushed into the bug tracking system

241
00:21:11,690 --> 00:21:16,809
where they can be fixed so the ones that
are higher critical because they break

242
00:21:16,809 --> 00:21:21,620
the build they become blockers you have
to fix them before you can release the

243
00:21:21,620 --> 00:21:27,479
product the rest of them go into the
queue into the back of the bugs and they

244
00:21:27,480 --> 00:21:32,760
will be remediated after a certain
amount of time they get in the mix with

245
00:21:32,760 --> 00:21:37,300
the rest of the bugs we didn't
prioritize medium or lower security bugs

246
00:21:37,300 --> 00:21:41,090
were not prioritize over other votes
right

247
00:21:41,090 --> 00:21:45,059
functionality bags is also a risk for an
organization

248
00:21:45,059 --> 00:21:49,769
and and they said we create a PDF report
that was sent to the security so they

249
00:21:49,769 --> 00:21:54,899
can look at it before their weekly
committees so that's screenshots of

250
00:21:54,899 --> 00:22:02,049
that's a screenshot of how this looks
basically a bunch of systems all they

251
00:22:02,049 --> 00:22:08,789
want is it in green are ones that are
find meaning the work they build there

252
00:22:08,789 --> 00:22:14,019
was nothing that broke the build the one
in red is broken meaning it has a

253
00:22:14,019 --> 00:22:19,669
critical finding in it and this can be
managed you can click into that this is

254
00:22:19,669 --> 00:22:21,230
the Jenkins you are right

255
00:22:21,230 --> 00:22:24,240
are you it's a Jenkins you I
everything's there

256
00:22:24,240 --> 00:22:34,799
everything's represented there together
with all the non-security yes right from

257
00:22:34,799 --> 00:22:39,779
the Jenkins from the built perspective
if I'm to build manager this means that

258
00:22:39,779 --> 00:22:46,580
this bill has passed so it may still
have their abilities but nothing very

259
00:22:46,580 --> 00:22:56,519
you know higher critical severity so
they are pushed into the bug tracking

260
00:22:56,519 --> 00:23:04,169
system and their flag with security flag
so the security people as part of that

261
00:23:04,169 --> 00:23:08,169
we we gave them they gave them
credentials to the bug tracking system

262
00:23:08,169 --> 00:23:13,200
they can get a reports both security
bugs like any other type of bug and you

263
00:23:13,200 --> 00:23:17,309
know you have a weekly report of bugs
how many bugs are over a month old

264
00:23:17,309 --> 00:23:27,850
global mobile the whole thing and get it
it has to be created in in a in my vote

265
00:23:27,850 --> 00:23:31,769
because i dont wife will not be able to
work ok

266
00:23:37,059 --> 00:23:45,168
so case number too so this was a really
interesting case is actually earlier two

267
00:23:45,169 --> 00:23:48,090
and a half years ago we started working
with them

268
00:23:48,090 --> 00:23:54,689
UK retailer a Joe maturity very high so
one of the things you'll notice is that

269
00:23:54,690 --> 00:24:00,240
everybody that e-commerce is very edge
oh and that is because Amazon this

270
00:24:00,240 --> 00:24:05,080
killing everybody Amazon is extremely
actually keep changing their website

271
00:24:05,080 --> 00:24:12,220
Amazon works in continuous delivery
amazingly and I met a bunch of retailers

272
00:24:12,220 --> 00:24:18,749
it were true there a gel transition
process instead it's horrible Amazon

273
00:24:18,749 --> 00:24:22,499
comes out with this new feature we want
to have something similar it takes a

274
00:24:22,499 --> 00:24:28,129
year to swear waterfall so they're all
transition to a drought and these guys

275
00:24:28,129 --> 00:24:32,469
they were very a job it's probably one
of the best adult shops they've seen

276
00:24:32,470 --> 00:24:38,220
very very mature but at the same time
very immature from a security

277
00:24:38,220 --> 00:24:42,570
perspective so they actually reached out
to us because they got hacked

278
00:24:44,230 --> 00:24:50,029
injection we talk to them apparently
they hire this pen testing company to do

279
00:24:50,029 --> 00:24:56,259
apprentice once a year apparently was a
very bad company because we ran our

280
00:24:56,259 --> 00:24:59,789
product I mean just just very
superficial and found a bunch of

281
00:24:59,789 --> 00:25:04,559
sequence actions crisis gripping you
know nothing fancy just the the run of

282
00:25:04,559 --> 00:25:10,840
the mill vulnerabilities obviously they
and so they came to do this so now

283
00:25:10,840 --> 00:25:17,100
they're UK retailer with a very large
e-commerce platform that has different

284
00:25:17,100 --> 00:25:23,570
flavors so they have different brand so
it's one technology but different brands

285
00:25:23,570 --> 00:25:29,490
as I said three weeks sprints very
strict enforcement so this was really

286
00:25:29,490 --> 00:25:35,559
cool about these guys they did scrum to
the letter and so they had three weeks

287
00:25:35,559 --> 00:25:40,389
Prince the last automation ran on that
they would deliver on Mondays the last

288
00:25:40,389 --> 00:25:46,019
automation would run Saturday Sunday if
something Field on Saturday Sunday it

289
00:25:46,019 --> 00:25:47,590
was pulled out of the building

290
00:25:47,590 --> 00:25:53,418
morning before the build was there was
no will delivery Tuesday no its not

291
00:25:53,419 --> 00:26:02,529
ready it out and they they enforce it
really well so their security maturity

292
00:26:02,529 --> 00:26:08,510
and it said was very low that of that
two people and security departments and

293
00:26:08,510 --> 00:26:13,080
that included the story of physical
security so the guy that ran the

294
00:26:13,080 --> 00:26:20,439
security was ex-police very nice guy but
not into computer stuff at all he had

295
00:26:20,440 --> 00:26:25,360
another guy under him the did all the
computer stuff so obviously they had a

296
00:26:25,360 --> 00:26:33,840
lot of challenges here and so obviously
again their developers had no security

297
00:26:33,840 --> 00:26:35,360
background and so on

298
00:26:35,360 --> 00:26:41,189
however again we were lucky guy who was
owning the application that got hacked

299
00:26:41,190 --> 00:26:49,279
became personally interested in fixing
that and so we got development

300
00:26:49,279 --> 00:26:54,580
cooperativity again they had nothing
before we came nothing in terms of

301
00:26:54,580 --> 00:26:59,789
security in the development you know
threat modeling securities I nothing

302
00:26:59,789 --> 00:27:07,908
just they've been just doing their stuff
and the three-week sprint at first I was

303
00:27:07,909 --> 00:27:12,130
seemed like a very strict thing to live
with from a security perspective but it

304
00:27:12,130 --> 00:27:17,840
actually proved pretty well so again we
got R&D to support us

305
00:27:17,840 --> 00:27:24,158
really they drove the thing if in in the
previous company security drove it in

306
00:27:24,159 --> 00:27:29,279
R&D came on board this was driven by
aren t they were concerned about their

307
00:27:29,279 --> 00:27:34,490
application security said yeah we think
we need to do that but they simply don't

308
00:27:34,490 --> 00:27:41,100
have the resources we created a security
workflow they had a lot of test

309
00:27:41,100 --> 00:27:46,320
automation in fact they had almost
everything and test automation and they

310
00:27:46,320 --> 00:27:49,610
wanted to limit the number of
environments that the use all the time

311
00:27:49,610 --> 00:27:53,959
so they didn't want to run security
animation everyday they wanted to

312
00:27:53,960 --> 00:27:58,780
maximize the functionality animation so
eventually we agreed to run security

313
00:27:58,780 --> 00:28:00,930
automation once a week so in

314
00:28:00,930 --> 00:28:05,680
or three weeks prints they had each week
was a minister Prince and at the end of

315
00:28:05,680 --> 00:28:12,200
each week they would run security test
two weeks 1 and to generally it's where

316
00:28:12,200 --> 00:28:18,350
they built functionality and weeks 3 was
the week where they fixed everything and

317
00:28:18,350 --> 00:28:22,209
so at the end of week 1 and at the end
of week 2 we would run security test on

318
00:28:22,210 --> 00:28:28,800
new code and the week three tests again
the weekend before the release had to

319
00:28:28,800 --> 00:28:35,320
verify that there were no issues and
again very strict if there was an issue

320
00:28:35,320 --> 00:28:42,600
a security issue that was above the
threshold which was medium or higher for

321
00:28:42,600 --> 00:28:47,399
them they would not include that in the
bill they would remove the future

322
00:28:47,400 --> 00:28:55,150
because that feature was smaller and so
that that made us very nervous when we

323
00:28:55,150 --> 00:29:01,020
came in because that means the security
will cause features not to be on time

324
00:29:01,020 --> 00:29:07,590
and as you know this can make people
nervous but because we had to support of

325
00:29:07,590 --> 00:29:12,620
their Indian because they had an
incident just shortly before it work

326
00:29:12,620 --> 00:29:18,340
everybody was on board it still works it
became their culture and they now

327
00:29:18,340 --> 00:29:24,290
understand it's been over two years that
they're working this way and again

328
00:29:24,290 --> 00:29:29,950
there's weekly reports in PDF for the
security people again it's they're not

329
00:29:29,950 --> 00:29:34,010
involved in the process at all but they
want to audit and the control at least

330
00:29:34,010 --> 00:29:39,270
from you know a liability standpoint so
again

331
00:29:39,270 --> 00:29:46,060
Jenkins for CI JIRA for their ticketing
doesn't really matter but what's

332
00:29:46,060 --> 00:29:52,929
interesting is that all there's testing
infrastructure in the car and it was not

333
00:29:52,930 --> 00:29:58,640
a static testing and infrastructure so
it wouldn't be like well here's your

334
00:29:58,640 --> 00:30:03,950
server this is what would test you push
a new version we tested know every time

335
00:30:03,950 --> 00:30:09,620
they create a new build the spin you
Amazon machines and deploy the prior to

336
00:30:09,620 --> 00:30:12,840
them then they deploy all their testing
scripts to them

337
00:30:12,840 --> 00:30:18,340
and everything to them when I met them
first time that was pretty innovative

338
00:30:18,340 --> 00:30:22,490
novel today we have a lot of customers
to do that

339
00:30:22,490 --> 00:30:28,440
orchestration has become big any extra
fantastic because again at first we were

340
00:30:28,440 --> 00:30:33,270
a little nervous how how would we deploy
our product automatically every time but

341
00:30:33,270 --> 00:30:39,230
realistically it really helped us
because once we realize that their APIs

342
00:30:39,230 --> 00:30:42,440
pretty big and it requires resources and
they don't want to disrupt their

343
00:30:42,440 --> 00:30:47,659
existing automation we simply use their
scripts to create a new environment on

344
00:30:47,659 --> 00:30:54,059
Amazon that is the security testing
infirm and so it's easy to replicate

345
00:30:54,059 --> 00:30:58,559
testing environments and get what you
need so every week they spin a new

346
00:30:58,559 --> 00:31:03,230
environment just for security testing
which means we can do as rigorous

347
00:31:03,230 --> 00:31:07,789
testing as we want we don't need to do
any optimization I think it runs for

348
00:31:07,789 --> 00:31:15,110
about six hours to do the full test of
their app which is fine because on a new

349
00:31:15,110 --> 00:31:21,418
completely clean environment
everything's automatically deployed they

350
00:31:21,419 --> 00:31:27,230
deployed there are defects to deploy
their their functionality testing we

351
00:31:27,230 --> 00:31:41,429
record the functionality testing and
then deploy those onto the security so

352
00:31:41,429 --> 00:31:45,549
we integrated with their selenium which
is what they use for functionality

353
00:31:45,549 --> 00:31:53,760
testing so we can learn all that data
and then again everything can break

354
00:31:53,760 --> 00:32:01,100
bildt's there's HTML reports on top of
the Jenkins you and the bug tracking

355
00:32:01,100 --> 00:32:06,959
system for partly for security partly
for project management from the

356
00:32:06,960 --> 00:32:12,190
development side that wants to get that
through the reports and the PDF reports

357
00:32:12,190 --> 00:32:18,120
so they actually scripted these HTML
reports on top of our product that's not

358
00:32:18,120 --> 00:32:22,530
we don't do that thats just results from
the command line scripting with the

359
00:32:22,530 --> 00:32:23,840
colors so

360
00:32:23,840 --> 00:32:30,070
every Jenkins build you can click and
get this from the Jenkins see line which

361
00:32:30,070 --> 00:32:36,620
just get the highlight of the results so
it's not just the failure or pass and

362
00:32:36,620 --> 00:32:42,500
you can get all the reports backwards
for every day so you just log into that

363
00:32:42,500 --> 00:32:47,890
they created and you get all the results
you click it and you see everything of

364
00:32:47,890 --> 00:32:55,549
course you can get to the full report
PDF report everything you want they've

365
00:32:55,549 --> 00:32:59,289
been working on this for over two years
now and very happy

366
00:33:00,490 --> 00:33:14,210
process works may find vulnerabilities
once in awhile questions so the third

367
00:33:14,210 --> 00:33:21,620
case in as we're progressing third place
is a very large e-commerce not Amazon

368
00:33:21,620 --> 00:33:26,639
but very large e-commerce you definitely
know the name if I told you they were

369
00:33:26,640 --> 00:33:32,880
very mature they're very large were
talking hundreds of developers one of

370
00:33:32,880 --> 00:33:39,980
the largest e-commerce sites in the
world again they were big legacy they've

371
00:33:39,980 --> 00:33:47,049
been doing a dull transformation for
four years now and they're still about

372
00:33:47,049 --> 00:33:50,059
half and half but still have about half
their side on their old infrastructure

373
00:33:50,059 --> 00:33:54,350
and half of their new Angela
infrastructure they have a very at the

374
00:33:54,350 --> 00:34:00,620
fans and child dev ops infrastructure
that she acquired companies specializing

375
00:34:00,620 --> 00:34:07,439
in debt just to get the ball rolling and
it's a very big site to modulation side

376
00:34:07,440 --> 00:34:11,639
it has multiple in France front-end and
back-end components done by different

377
00:34:11,639 --> 00:34:15,659
teams will get to that later but when we
find things we need to be able to tell

378
00:34:15,659 --> 00:34:19,109
who's the owner for everything

379
00:34:19,109 --> 00:34:25,069
hundreds of engineers development QA
DevOps so it's a big it's a big shop to

380
00:34:25,070 --> 00:34:31,389
go into and they're very heavily
invested in security so as we came in

381
00:34:31,389 --> 00:34:34,960
they were already using static analysis
dynamic analysis

382
00:34:35,760 --> 00:34:44,200
protesting code reviews everything and
they wanted another earlier they want

383
00:34:44,199 --> 00:34:50,609
another layer in automation as part of
kuwait and the reason they wanted it was

384
00:34:50,610 --> 00:34:56,340
because they had a bunch of static
analyzers and code review processes but

385
00:34:56,340 --> 00:34:59,790
they also had something running in
production

386
00:34:59,790 --> 00:35:04,350
black box scanner in production that
keeps running regularly any 2000

387
00:35:04,350 --> 00:35:09,650
something it found across its grip and
they were very unhappy because they've

388
00:35:09,650 --> 00:35:14,890
all this process in place to prevent
vulnerabilities for getting their

389
00:35:14,890 --> 00:35:19,670
production sites and yet something was
found and from their perspective the

390
00:35:19,670 --> 00:35:23,680
only reason they were on the black box
scanner on the production site is

391
00:35:23,680 --> 00:35:29,250
because he needs to show them that
they're clean and so they realized that

392
00:35:29,250 --> 00:35:36,240
the static analysis process that they
had was not perfect and that they should

393
00:35:36,240 --> 00:35:40,509
use it but it's a perfect and part of
the reason there was not perfect is

394
00:35:40,510 --> 00:35:44,660
because static analysis sometimes
generate false positives and so you need

395
00:35:44,660 --> 00:35:51,240
to be very fast development you need to
be a little light on what you actually

396
00:35:51,240 --> 00:35:56,569
consider is verified and sell something
fell in between the cracks and so they

397
00:35:56,570 --> 00:36:01,700
they wanted to introduce another
security testing later in the QA test

398
00:36:01,700 --> 00:36:08,910
automation phase and that's how we came
to me that so multiple components by

399
00:36:08,910 --> 00:36:14,299
multiple teams as they said they need
the ability when so the way our product

400
00:36:14,300 --> 00:36:20,390
testing tire application but when I find
a problem and I open a bug for it it

401
00:36:20,390 --> 00:36:27,109
needs to be open on the rights because
otherwise we need a person to allocate

402
00:36:27,110 --> 00:36:31,890
those two specific components and if
it's a person that it's not automated if

403
00:36:31,890 --> 00:36:37,529
it's an automated becomes a bottleneck
and it isn't working very dynamic

404
00:36:37,530 --> 00:36:42,260
testing environment everything is
orchestrated automatically a little bit

405
00:36:42,260 --> 00:36:45,260
by far previous customer but more so

406
00:36:46,119 --> 00:36:53,299
so home-grown DevOps so here's the thing
if you're very large retailer you have a

407
00:36:53,299 --> 00:36:56,299
problem putting all your stuff on Amazon

408
00:36:57,220 --> 00:37:02,279
carrier number one competitor for small
retailer it's finally here very large

409
00:37:02,279 --> 00:37:08,190
retailer even though Amazon is a
separate silo Amazon Web Services and so

410
00:37:08,190 --> 00:37:14,380
they built everything required but they
had their own everything their own cloud

411
00:37:14,380 --> 00:37:19,940
their own CIA drone test automation
their own everything and I think was

412
00:37:19,940 --> 00:37:28,940
supported or known technologies to us
and highly agile rapid environment with

413
00:37:28,940 --> 00:37:33,180
continuous delivery so we're not talking
about Sprint anymore we're talking about

414
00:37:33,180 --> 00:37:39,558
daily artifacts new code being pushed
into production every day which is you

415
00:37:39,559 --> 00:37:44,220
know where where where the world's going
in five years we'll be looking back at

416
00:37:44,220 --> 00:37:51,970
people who don't do daily articles it
really only release code once a week and

417
00:37:51,970 --> 00:37:57,819
again because it's a daily process
security cannot be involved I'm kind of

418
00:37:57,819 --> 00:38:03,220
repeating myself but it's really all
about that so process was initiated by

419
00:38:03,220 --> 00:38:08,700
the security group as I said because of
this incident Simonson and they weren't

420
00:38:08,700 --> 00:38:16,160
there were just unhappy about finding
something in production the goddamn ops

421
00:38:16,160 --> 00:38:23,920
on board I i that happened before we
came we gave them training to the QA and

422
00:38:23,920 --> 00:38:27,739
Dev ups but the training was not about
security was not about how to treat

423
00:38:27,739 --> 00:38:32,970
secure code 202 security testing those
training about the process the process

424
00:38:32,970 --> 00:38:38,919
of including security test automation
inside their existing test manual and

425
00:38:38,920 --> 00:38:48,430
automated tests and they wanted security
tests to be part of other testing if you

426
00:38:48,430 --> 00:38:52,788
remember when my previous customer they
did it is a separate one once a week

427
00:38:52,789 --> 00:38:57,640
thing on a dedicated environment here
they wanted it included inside a test

428
00:38:57,640 --> 00:38:59,220
and then reason was

429
00:38:59,220 --> 00:39:05,589
because as I said was rapid development
we can test the whole application all

430
00:39:05,590 --> 00:39:09,820
the time we just have to test the
changes or the new features of the new

431
00:39:09,820 --> 00:39:15,140
functionality and so that has to be in
line with whatever they're doing from

432
00:39:15,140 --> 00:39:19,770
their test automation for functionality
because that's already staying with what

433
00:39:19,770 --> 00:39:22,200
they're doing

434
00:39:22,200 --> 00:39:25,259
again

435
00:39:25,869 --> 00:39:31,310
medium or higher blocks especially in
this is especially important when you do

436
00:39:31,310 --> 00:39:36,080
automated continuous delivery right
because it whatever doesn't block the

437
00:39:36,080 --> 00:39:40,098
bill is pushed to production if the bill
doesn't break it's pushed to production

438
00:39:40,099 --> 00:39:44,990
it's an automated process there's
nothing like with with the three weeks

439
00:39:44,990 --> 00:39:50,629
Prince the actual push to production
somebody finds it off with a click but

440
00:39:50,630 --> 00:39:57,330
in here its automated somebody checks in
the new code all the tests gets done if

441
00:39:57,330 --> 00:40:02,799
all the tests come back clean or clean
to the level that we agreed on its push

442
00:40:02,800 --> 00:40:08,190
to production and of course it's not
push to 100% for their actions using

443
00:40:08,190 --> 00:40:17,609
push to 10 percent with a/b testing but
still it's it's out there so from our

444
00:40:17,609 --> 00:40:23,339
side as offender as we came in there
what they said was once we deploy that

445
00:40:23,339 --> 00:40:30,240
POC we run it for a few months we want
to make sure that it comes clean meaning

446
00:40:30,240 --> 00:40:36,149
we never ever ever seen production again
something for the time being we're good

447
00:40:36,150 --> 00:40:44,339
security group supervises the process
has visibility to reports again but is

448
00:40:44,339 --> 00:40:49,820
not part of the process so as I said
they have their home-grown CI

449
00:40:49,820 --> 00:40:57,320
orchestration cloud the only thing these
which was standardized was gerra whose

450
00:40:57,320 --> 00:41:03,520
group so they create a new build every
day and they create a new set off

451
00:41:03,520 --> 00:41:08,710
environment every day and one of the
challenges as the day environments don't

452
00:41:08,710 --> 00:41:11,600
look the same every day so let's

453
00:41:11,600 --> 00:41:16,319
say to their environments build our own
servers and let's say that now they've

454
00:41:16,320 --> 00:41:22,080
improved the search functionality so
they would create more its servers off

455
00:41:22,080 --> 00:41:25,970
the test components into a test
environment so they can test for

456
00:41:25,970 --> 00:41:30,060
performance and run their full test
automation quickly enough and then the

457
00:41:30,060 --> 00:41:34,509
next day they added something with a
cart so there was another server that

458
00:41:34,510 --> 00:41:41,670
has more instances so everything is
created dynamically terrifying process

459
00:41:41,670 --> 00:41:49,660
and then they orchestrate the new builds
and all their test automation so when

460
00:41:49,660 --> 00:41:53,600
there's a new feature they have new test
automation scripts and everything is

461
00:41:53,600 --> 00:41:58,069
orchestrated in your weight that tells
which scripts should run so they have

462
00:41:58,070 --> 00:42:02,930
test automation for everything but they
can't run test automation every on every

463
00:42:02,930 --> 00:42:07,980
build because they're full regression
test automation not talking security

464
00:42:07,980 --> 00:42:15,660
just functionality takes about 12 to 18
hours to figure out even though they

465
00:42:15,660 --> 00:42:21,870
have over a 10 servers it's a big
applications test so they can do that

466
00:42:21,870 --> 00:42:28,810
every day because 18 hours that takes
most of it so the only run what's

467
00:42:28,810 --> 00:42:32,509
changed and then of course there's a
separate process on the side that does

468
00:42:32,510 --> 00:42:37,790
regular full regression test but it's
not in the pipeline of the continuous

469
00:42:37,790 --> 00:42:48,790
delivery and so hybrid automation they
call it basically they have selenium for

470
00:42:48,790 --> 00:42:53,279
whatever is it that web front end and
they have their homegrown stuff for

471
00:42:53,280 --> 00:42:57,370
everything that's what services even
though saw him supports web services

472
00:42:57,370 --> 00:43:03,609
they wrote their own stuff so we spent a
lot of time with them

473
00:43:03,610 --> 00:43:08,770
building their orchestration to support
the deployment of our products as part

474
00:43:08,770 --> 00:43:16,080
of their last the variable orchestration
and so now every server that they

475
00:43:16,080 --> 00:43:20,930
deployed at least in the system that we
have already pointed to get on with our

476
00:43:20,930 --> 00:43:24,879
stuff on it and everything is fully
automated

477
00:43:24,880 --> 00:43:29,440
we don't see that so that we can support
its on their regular testing

478
00:43:29,440 --> 00:43:33,430
environments so when they're under
existing shower we test automation its

479
00:43:33,430 --> 00:43:40,609
dormant but it's still there everything
is there we did of course full CI

480
00:43:40,609 --> 00:43:47,140
integration and we directed all the
tests all the functionality test

481
00:43:47,140 --> 00:43:51,339
automation to go through our product so
we can see them so we can know what

482
00:43:51,339 --> 00:43:57,788
functionality is currently being tested
so we monitor their test automation and

483
00:43:57,789 --> 00:44:02,420
based on that we know what we need to
test because they define as part of

484
00:44:02,420 --> 00:44:07,720
their process that the test automation
runs only on things that have changed or

485
00:44:07,720 --> 00:44:13,959
you in the system and so by monitoring
their test automation we can tell what

486
00:44:13,960 --> 00:44:20,660
needs to have security tests and not
just the whole system is so the security

487
00:44:20,660 --> 00:44:26,259
test run daily right after the
functionality testing again full JIRA

488
00:44:26,259 --> 00:44:31,859
bug tracking integration as I said we
created specialized custom custom

489
00:44:31,859 --> 00:44:37,430
feature for them where we were able to
define based on class cather's which

490
00:44:37,430 --> 00:44:43,129
part of the application belongs to which
team and so as we open the bug it goes

491
00:44:43,130 --> 00:44:51,130
directly to the relevant organisation
and so after its done they run their

492
00:44:51,130 --> 00:44:59,700
black box tool and production to make
sure that clean so questions

493
00:45:06,650 --> 00:45:09,650
they are ya

494
00:45:19,410 --> 00:45:29,930
off our product into that the Blackrock
scanner obviously doesn't do that I

495
00:45:29,930 --> 00:45:34,250
don't think what I think black book
scanning specific production has a lot

496
00:45:34,250 --> 00:45:40,820
of limitations and it's not their main
security measure is just their final

497
00:45:40,820 --> 00:45:47,090
verification process that it's just that
you know there's this I won't mention

498
00:45:47,090 --> 00:45:52,360
names but it's a big task based black
box canning company and they run it

499
00:45:52,360 --> 00:45:57,620
regularly just to make sure nothing
slipped between the cracks and they

500
00:45:57,620 --> 00:46:00,710
understand it's a perfect that's why
this static analysis and runtime

501
00:46:00,710 --> 00:46:05,920
analysis and all the process in place
it's just another layer and I'd read

502
00:46:05,920 --> 00:46:09,670
mostly looks at the more technical
injection cross-site scripting

503
00:46:09,670 --> 00:46:26,119
vulnerabilities are questions so far

504
00:46:26,119 --> 00:46:30,119
prepped by product is during runtime
code analysis so it

505
00:46:30,119 --> 00:46:36,970
instruments to code and see how it's
running and so it has certain advantages

506
00:46:36,970 --> 00:46:41,939
over static analysis for this type of
testing but it can also be done with

507
00:46:41,940 --> 00:46:45,880
static analysis assuming you have the
right technology that doesn't produce

508
00:46:45,880 --> 00:47:13,080
false-positive and again I

509
00:47:13,080 --> 00:47:17,230
I really want to go into specific
product and then there's there are some

510
00:47:17,230 --> 00:47:22,490
products that you could use their other
products that unfortunately are not very

511
00:47:22,490 --> 00:47:27,220
optimized for that so when I created my
product I was very focused on training

512
00:47:27,220 --> 00:47:31,890
something that developers can use their
other products some of the earlier

513
00:47:31,890 --> 00:47:36,839
static analyzers in the industry that
may not be so developer friendly and

514
00:47:36,840 --> 00:47:41,490
more geared towards usage by security
people and in that case it will be

515
00:47:41,490 --> 00:47:49,759
difficult to implement a process like
that but they're still well thank you

516
00:47:49,760 --> 00:47:53,710
very much free time I know it's late
part of the day

