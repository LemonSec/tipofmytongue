1
00:00:00,000 --> 00:00:04,960
good sound check great ok well go ahead
and get started well good afternoon

2
00:00:04,960 --> 00:00:08,670
everybody she gets her gonna be
superintendent today could you guys got

3
00:00:08,670 --> 00:00:12,210
done with lunch and you're filled up
with hopefully some good food

4
00:00:12,210 --> 00:00:19,130
conference here so hopefully we can I
say pay attention to me by my name is

5
00:00:19,130 --> 00:00:24,250
Joshua Clark I'm actually based out of
the West Coast base of san francisco

6
00:00:24,250 --> 00:00:28,269
jimenez road tour to do some shows this
week and this happen if you wanna buy

7
00:00:28,269 --> 00:00:34,170
stops I'm a Solutions Architect for
check marks for some of you that don't

8
00:00:34,170 --> 00:00:38,760
know check marks check marks is a
company that develops products first

9
00:00:38,760 --> 00:00:44,420
source code analysis so what we do is we
scan source code for vulnerabilities so

10
00:00:44,420 --> 00:00:47,309
security defects like what we'll talk
about today

11
00:00:47,309 --> 00:00:53,078
these are things that we do okay and so
the purpose of this talk today in OJ s

12
00:00:53,079 --> 00:00:58,030
highway at exit full-throttle this talk
is basically based on some research that

13
00:00:58,030 --> 00:01:02,430
we've done internally check marks on the
new platform node.js so how many guys

14
00:01:02,430 --> 00:01:07,380
have heard no Jess ok how many of your
actively developing programs on the new

15
00:01:07,380 --> 00:01:10,810
jets platform okay so it's a good thing

16
00:01:11,369 --> 00:01:17,270
new platform in the same rules apply so
that people know about no jazz they're

17
00:01:17,270 --> 00:01:20,589
kind of getting I'm see probably white
canvas talk today to find out you know

18
00:01:20,590 --> 00:01:21,340
what's this

19
00:01:21,340 --> 00:01:25,619
what are some of the security and
security implications with no jazz

20
00:01:25,619 --> 00:01:31,360
platform that's we're gonna be talking
about today so like I said check marks

21
00:01:31,360 --> 00:01:34,850
what we did is we did some research last
year we done several talks on this

22
00:01:34,850 --> 00:01:39,979
network here today to talk to you about
OJ as we talk about here's a quick

23
00:01:39,979 --> 00:01:44,658
agenda for today so we're going to talk
about the node.js architecture so for

24
00:01:44,659 --> 00:01:48,360
those of you that don't know about john
Jaso explain the node.js architecture

25
00:01:48,360 --> 00:01:53,979
will then talk about the security
implications of developing applications

26
00:01:53,979 --> 00:01:57,659
on a node.js platform so if you have
traditional web apps and removing them

27
00:01:57,659 --> 00:02:01,270
2010 jazz platform we're going to talk
about some of those those

28
00:02:01,270 --> 00:02:04,550
vulnerabilities associated with with
node.js

29
00:02:04,550 --> 00:02:10,039
and so someone to talk about because
nobody less is now service will talk

30
00:02:10,039 --> 00:02:15,670
about that we'll talk will do a kind of
a code review on how part of

31
00:02:16,250 --> 00:02:22,690
with no jazz platform with that we
cryptography so talk about 10 buildings

32
00:02:22,690 --> 00:02:28,840
there will talk about Jason Segel
injection so with no J assets primarily

33
00:02:28,840 --> 00:02:33,180
server-side JavaScript and understand
JavaScript his client side server-side

34
00:02:33,180 --> 00:02:36,810
no jess is a server-side JavaScript
framework talks playing their detection

35
00:02:36,810 --> 00:02:42,160
minute and one of the buildings
associated with that is JSON injection

36
00:02:43,120 --> 00:02:46,210
another type of one billion we
discovered is a regular expression

37
00:02:46,210 --> 00:02:50,880
denounced or service Sina regular
expressions are we'll talk about you

38
00:02:50,880 --> 00:02:55,390
know regular expression down service and
how that can affect a node.js platform

39
00:02:55,390 --> 00:03:00,279
and then finally at the end will be some
take away just basically you know when

40
00:03:00,280 --> 00:03:02,300
you get down to the stalk and what you
gonna do

41
00:03:02,300 --> 00:03:09,930
going after the presentation so let's
talk about the nude jazz architecture so

42
00:03:09,930 --> 00:03:17,580
node.js is basically an event driven
framework that is comprised of a single

43
00:03:17,580 --> 00:03:21,920
single threaded event loop which isn't
metal that's constantly listening for

44
00:03:21,920 --> 00:03:23,079
requests

45
00:03:23,080 --> 00:03:28,590
there is an event you so choose basic
gonna be prosecuted those requests that

46
00:03:28,590 --> 00:03:31,480
come in and the event loop constantly
listens for those and the whole purpose

47
00:03:31,480 --> 00:03:35,450
of doing a node.js architectures that
you can get you can have high response

48
00:03:35,450 --> 00:03:39,700
rate so you're not not waiting for
requests to process it is very fast and

49
00:03:39,700 --> 00:03:43,750
very efficient and also memory footprint
for the process is very low as well so

50
00:03:43,750 --> 00:03:51,040
no Jess processes don't consume a lot of
memory box so with this with this

51
00:03:51,040 --> 00:03:55,109
architecture you also have concept of
callbacks where you basically said a

52
00:03:55,110 --> 00:04:00,020
function and then go out to do its work
for example name I need you file do I

53
00:04:00,020 --> 00:04:03,910
owe processing and I needed to database
processing or a new network processing

54
00:04:03,910 --> 00:04:10,010
and that that process will come back
into the loop and keep going and so this

55
00:04:10,010 --> 00:04:14,799
is kind of a very technical side
relegated to use this as an example of

56
00:04:14,800 --> 00:04:19,570
node.js architecture sure many of you
have been to a fast food restaurant in

57
00:04:19,570 --> 00:04:26,140
the past month or so and we go to a fast
food restaurant go up you're basically

58
00:04:26,140 --> 00:04:31,060
the event you try to go up to the cash
register and you put in your order and

59
00:04:31,060 --> 00:04:35,960
the register the cash cashier is
basically the same threat right they

60
00:04:35,960 --> 00:04:38,700
process your request and they handed off
to an event handler which may be

61
00:04:38,700 --> 00:04:43,409
multiple workers which is basically that
that that that loops read it's basically

62
00:04:43,410 --> 00:04:47,760
going in processing the request and so
then handler computer workers from needs

63
00:04:47,760 --> 00:04:51,469
to make a cheese burgers and fries and
so on so this is kind of a

64
00:04:51,470 --> 00:04:58,910
human-readable example of how to do just
works so I can make sense you guys so

65
00:04:58,910 --> 00:05:03,610
let's talk about what this architecture
means for you know development or even

66
00:05:03,610 --> 00:05:07,550
triple sec right we care right well when
it comes to architecture abusing know

67
00:05:07,550 --> 00:05:09,950
just why would you want to do that where
there's there's good reasons to use

68
00:05:09,950 --> 00:05:14,599
node.js and there's bad bad reason
season so one of the good reasons to use

69
00:05:14,600 --> 00:05:19,050
node.js would be an application that
doing high and put you know I O for

70
00:05:19,050 --> 00:05:23,080
example you talk to the database or you
need applications gonna have high user

71
00:05:23,080 --> 00:05:28,020
action which is basically web right to
different types of applications like any

72
00:05:28,020 --> 00:05:33,390
kind of web app its processing how user
know Jess will be a good platform to use

73
00:05:33,390 --> 00:05:38,969
what is no jazz bad for well no jess is
not good for doing high CPU intensive

74
00:05:38,970 --> 00:05:44,890
operations if I need to do some kind of
large algorithm are some kind of math

75
00:05:44,890 --> 00:05:50,219
function that is gonna do some
processing on CPU human resources not

76
00:05:50,220 --> 00:05:54,940
such a good idea can I show you right
here in a minute and then remember again

77
00:05:54,940 --> 00:05:59,610
it's single-threaded process threats

78
00:06:00,990 --> 00:06:06,440
understand that and so for example our
first type of vulnerability with respect

79
00:06:06,440 --> 00:06:12,380
to know jess is an hour of service to
guests can see this basic basic code

80
00:06:12,380 --> 00:06:16,080
right here right always is doing a loop
and what he's doing is it takes a number

81
00:06:16,080 --> 00:06:19,880
and is going to count that number one
through whatever the number you specify

82
00:06:19,880 --> 00:06:23,930
for identify specified 5 its gonna count
12345 and it's going to some of those

83
00:06:23,930 --> 00:06:28,479
numbers up its gonna do it is a CPU
operation right into some addition here

84
00:06:28,479 --> 00:06:35,820
now I'll show you why that why that's
why that matters here so fast and so

85
00:06:35,820 --> 00:06:57,900
bear with me here so come over to my
screen hair course

86
00:06:58,490 --> 00:07:40,440
breaks right away so that's when you
loser ok so now that you can see my

87
00:07:40,440 --> 00:07:45,539
screen again but i wanna show you is
basically I have no Jess application

88
00:07:45,539 --> 00:07:50,520
running here and show you so if you come
here to our task manager you'll see that

89
00:07:50,520 --> 00:07:55,969
there is a note process here running CPU
0 right here on our hearts or

90
00:07:55,970 --> 00:08:00,380
notification will run it it's gonna do a
loop system operation just does 1215

91
00:08:00,380 --> 00:08:06,039
pretty basic you know it really hit the
CPU analysis and that up a little bit

92
00:08:06,039 --> 00:08:12,159
and try large number right safe ok now
what happens when you do a large number

93
00:08:12,159 --> 00:08:17,789
like that go back to our CPU here it's
kind of

94
00:08:19,320 --> 00:08:23,640
my 02

95
00:08:27,620 --> 00:08:32,280
maximizing the CPU right so what does
that mean so that other requests that I

96
00:08:32,280 --> 00:08:36,189
have if I go back to the other the other
tab here and I try to do a small

97
00:08:36,190 --> 00:08:40,760
operation like some of 5 bc it's going
to have to wait for that other process

98
00:08:40,760 --> 00:08:45,750
to go and in the meantime our task
manager here when it comes back

99
00:08:45,750 --> 00:08:54,310
basically over basically I'm getting
denying myself of service because the

100
00:08:54,310 --> 00:09:00,140
process can respond cuz it's doing a
high CPU operation you can see here my

101
00:09:00,140 --> 00:09:05,400
CPU is using almost 4 percent CPU
quad-core box so it's one of the courses

102
00:09:05,400 --> 00:09:10,720
fully utilized and so the point here is
Jess if you don't obviously in this case

103
00:09:10,720 --> 00:09:13,690
in this case you wanna check the
inbounds whatever you're accepting but

104
00:09:13,690 --> 00:09:19,250
high CPU intensive operation totally
denies denying my application service or

105
00:09:19,250 --> 00:09:20,290
any other user

106
00:09:20,290 --> 00:09:23,589
you know that's trying to interact with
the service is not going to be able to

107
00:09:23,590 --> 00:09:29,660
get a response and so one of the things
going to take you know however long it's

108
00:09:29,660 --> 00:09:33,250
gonna take a process but just a basic
loop like from one to whatever number I

109
00:09:33,250 --> 00:09:44,320
specify was basically blocking blocking
the process and other single threat to

110
00:09:44,320 --> 00:09:51,780
presentation processing endures in the
back

111
00:09:53,180 --> 00:10:00,800
so now serves very basic demo right I
just won 200 million and i cant dude

112
00:10:00,800 --> 00:10:05,370
instances basically under spots so
imagine a business application for

113
00:10:05,370 --> 00:10:09,270
trying to migrate no jazz you do the
same thing somebody specifies a high

114
00:10:09,270 --> 00:10:16,579
number of high CPU somebody codes in a
bad functions using the CPU of service

115
00:10:19,220 --> 00:10:26,410
allocate all her CPU so let's look at
another type of vulnerability with

116
00:10:26,410 --> 00:10:32,040
respect to to node.js what we were able
to do is we did our research then we

117
00:10:32,040 --> 00:10:36,930
looked at open source application we saw
an application out here she had learned

118
00:10:36,930 --> 00:10:41,050
from the code to protect you know what
is actually doing basically creating a

119
00:10:41,050 --> 00:10:47,219
new user account and it's actually this
the sexual piece of code kind of

120
00:10:47,220 --> 00:10:50,870
competes with the office now generates

121
00:10:50,870 --> 00:10:55,740
for authentication simply see any
problems out of the gate with this

122
00:10:55,740 --> 00:11:07,770
source of problems and what it what is
the security risk of losing any five

123
00:11:07,770 --> 00:11:14,360
right so any five is actually a pretty
strong hashing algorithm but it's easily

124
00:11:14,360 --> 00:11:20,610
reversible there's rainbow tables with
remote ablest Yes No

125
00:11:20,610 --> 00:11:24,670
basically rainbow tables just basically
precomputed Hashem all the values that

126
00:11:24,670 --> 00:11:29,020
for example specify one and I and II 5
has that one through a billion I

127
00:11:29,020 --> 00:11:33,620
basically a table all those look up so
easily reversible basically you know

128
00:11:33,620 --> 00:11:36,850
there's rainbow tables available on the
internet for example and show you

129
00:11:36,850 --> 00:11:40,920
actually created a fairly large rainbow
table that used for tomorrow by Andy

130
00:11:40,920 --> 00:11:45,599
five is one of the things that's wrong
with this the source code anything else

131
00:11:50,080 --> 00:12:00,890
ok was at her exactly yes week perng so
mad that random right is a random number

132
00:12:00,890 --> 00:12:04,350
generator based on the system in this
case it's going to be based on the node

133
00:12:04,350 --> 00:12:10,500
platform ok so let's talk about so so
yeah we're basically those two types of

134
00:12:10,500 --> 00:12:14,190
water bill as we have in the source code
and math outright random not really

135
00:12:14,190 --> 00:12:19,510
random write can be gassed figure out
which will find out later and then also

136
00:12:19,510 --> 00:12:24,050
indy five israeli says hashing algorithm
but it's out of date I mean it's it's a

137
00:12:24,050 --> 00:12:29,599
very strong but it can be reversed
fairly easy with rainbow tables so why

138
00:12:29,600 --> 00:12:34,190
does this important way to care may well
be eight if you know Google's V eight

139
00:12:34,190 --> 00:12:39,310
JavaScript engine that runs inside of
chrome and also inside of the node

140
00:12:39,310 --> 00:12:43,550
process ok so this should kind of
interesting more right because you're

141
00:12:43,550 --> 00:12:46,620
going to migrate applications to know
that should be considered the engines

142
00:12:46,620 --> 00:12:52,740
it's running process so this is kind of
a technical director here to show with

143
00:12:52,740 --> 00:12:58,450
when you do cite a random number
generator yassin value ok you see value

144
00:12:58,450 --> 00:13:01,750
with a with a state which is another
private value those values together

145
00:13:01,750 --> 00:13:06,090
create a random number that random
number that's what returned from a that

146
00:13:06,090 --> 00:13:10,860
random to the end user and then the
other state value is used in the next

147
00:13:10,860 --> 00:13:16,050
operation for the next generation of the
next math at random number ok now this

148
00:13:16,050 --> 00:13:19,550
research isn't primarily due to check
marks but Amit Klein actually was able

149
00:13:19,550 --> 00:13:24,479
to detect this back in 2009 you could
see the link I posted there basically

150
00:13:24,480 --> 00:13:29,170
they detected that the dude said a
random number generator from V eight is

151
00:13:29,170 --> 00:13:34,449
actually pretty weak and so so commit
crimes actually the one that first

152
00:13:34,450 --> 00:13:39,040
detected this responsibility but this
was in Google Chrome but again VA is

153
00:13:39,040 --> 00:13:44,579
actually used in notes so the same rules
apply here for for notification so what

154
00:13:44,580 --> 00:13:49,550
we gonna do it this way we why do we
care about this while we go back to our

155
00:13:49,550 --> 00:13:54,219
code example here the purpose of that
that diagram showing how those values

156
00:13:54,220 --> 00:13:58,910
are determined is if you can get the you
can find out with those those three

157
00:13:58,910 --> 00:14:01,180
random numbers are you can basically
find out

158
00:14:01,180 --> 00:14:05,699
what you can actually guess what the
next the next round numbers gonna be ok

159
00:14:05,700 --> 00:14:09,120
so I'ma show you kind of how we went
through with are you know I researched

160
00:14:09,120 --> 00:14:13,090
actually find had guests get passwords
that were based on this code lock here

161
00:14:13,090 --> 00:14:17,990
and so what we need to do that what we
need to do that well given three brand

162
00:14:17,990 --> 00:14:24,270
new passwords we should be able to
determine the future future number ok so

163
00:14:24,270 --> 00:14:29,910
first we're gonna need to do is to take
the Indy 500 look that up when you do a

164
00:14:29,910 --> 00:14:35,920
reverse a BMD 543 passwords from the
original the original random number that

165
00:14:35,920 --> 00:14:41,250
was generated so that state diagrams are
there to see and then the numbers are

166
00:14:41,250 --> 00:14:45,400
gonna do those three numbers generator
we get those we get the hash reverse

167
00:14:45,400 --> 00:14:49,600
that and then we're going to basically
compute the state variable to get the

168
00:14:49,600 --> 00:15:00,100
fourth consecutive random number and so
again why why then do we know why then

169
00:15:00,100 --> 00:15:03,750
do we care about this well how many
applications do you know how many guys

170
00:15:03,750 --> 00:15:08,190
using applications that have forget
password functionality probably

171
00:15:08,190 --> 00:15:11,160
everybody right now but he forgot your
password they were they do they decided

172
00:15:11,160 --> 00:15:16,740
to email or some random number generator
using to generate random passwords are a

173
00:15:16,740 --> 00:15:21,730
number of the targets hashed ok so let's
take a look here and see how this is how

174
00:15:21,730 --> 00:15:28,410
this is gonna work so we can given three
random numbers the value in that state 0

175
00:15:28,410 --> 00:15:33,610
and state one can then be inferred so
then all future values can be can be

176
00:15:33,610 --> 00:15:34,870
known in advance

177
00:15:34,870 --> 00:15:40,820
however Google knows about this right is
this guy he he detected this back in you

178
00:15:40,820 --> 00:15:42,990
know 2009 reported it

179
00:15:42,990 --> 00:15:45,860
Google looks at it as a low severity
vulnerability within their engine

180
00:15:45,860 --> 00:15:50,200
because particularly with chrome every
tab is its own process right and so

181
00:15:50,200 --> 00:15:54,790
every every tab is going to have its own
you know its own state so it can be

182
00:15:54,790 --> 00:15:58,870
pretty hard within you know that's why
Google kind of identifies as low

183
00:15:58,870 --> 00:16:03,590
severity finding however with respect to
know what we're talking about

184
00:16:04,180 --> 00:16:07,180
notice a single process which can have
multiple users that are trying to track

185
00:16:08,070 --> 00:16:11,860
and that's kind of our networks right
that's the whole the whole purpose of

186
00:16:11,860 --> 00:16:16,100
this talk right and so if you have one
note process and have multiple requests

187
00:16:16,100 --> 00:16:17,170
they're coming in

188
00:16:17,170 --> 00:16:22,729
note itself is just gonna have one state
value and so you could potentially guess

189
00:16:22,730 --> 00:16:27,720
the next number and number in the
process let's look at a kind of a

190
00:16:27,720 --> 00:16:33,670
walkthrough of how we gonna do this kind
of a diagram here so for example in a

191
00:16:33,670 --> 00:16:39,670
web application I mean user ago and I
register registered user account I get

192
00:16:39,670 --> 00:16:46,229
back a password register another user or
password so on and so on and then

193
00:16:46,230 --> 00:16:49,820
basically I'm have those three passwords
right I want to have those passwords

194
00:16:49,820 --> 00:16:56,060
right I'm gonna do my my look up right
cuz I have the actual to hash thats

195
00:16:56,060 --> 00:17:01,189
returned to me and I a look that up and
the rainbow table ok so when I go back

196
00:17:01,190 --> 00:17:07,670
to RMB 50 table take are taking a hash
values send those in order to get back

197
00:17:07,670 --> 00:17:15,959
33 random numbers ok now that we have
those random numbers we should be a

198
00:17:15,959 --> 00:17:20,459
basin are based on its research you
should be able to generate the fourth

199
00:17:20,459 --> 00:17:27,180
consecutive number we have all three ok

200
00:17:28,329 --> 00:17:31,580
so this is what we do take all three of
those numbers in the morning basically

201
00:17:31,580 --> 00:17:37,039
try to find out what the fourth password
is based on new math and based on our

202
00:17:37,039 --> 00:17:42,570
notice so this is kind of the use case
for what we're gonna try to demonstrate

203
00:17:42,570 --> 00:17:54,340
here so if you think it's gonna work one
guy to get ok well let's give it a shot

204
00:17:54,340 --> 00:18:02,299
somebody got here to my application here
and so I have running here I have a

205
00:18:02,299 --> 00:18:04,389
node.js application that's running here

206
00:18:04,389 --> 00:18:11,370
$49.99 I have a MongoDB server running
here is a process so what I want to do

207
00:18:11,370 --> 00:18:20,719
is go to my site this is a secure site K
has a lock on that means to secure a lot

208
00:18:20,720 --> 00:18:25,510
like that and it looks like me to secure
ok so my site here I'm gonna go ahead

209
00:18:25,510 --> 00:18:30,879
and test out of value here I'm gonna
create a user called test one my email

210
00:18:30,880 --> 00:18:36,029
just gonna say tests we gonna get my
value here this is my hash out now you

211
00:18:36,029 --> 00:18:42,260
can go ahead and put that here in my
little thing a value on it will call

212
00:18:42,260 --> 00:18:47,049
this you know what's going here and
create another user

213
00:18:54,700 --> 00:19:04,130
to come here and do you know there's
three registers again so essentially

214
00:19:04,130 --> 00:19:07,000
what have I done right if we use that
same code that was in that demo their

215
00:19:07,000 --> 00:19:12,680
values three right so I have three
matches that have created mass at random

216
00:19:12,680 --> 00:19:19,030
and he 5 hash values have generated know
what am I gonna do it this way back here

217
00:19:19,030 --> 00:19:21,210
to my fancy

218
00:19:21,210 --> 00:19:27,070
the eighth random number generator and
basically take the indy five decoder so

219
00:19:27,070 --> 00:19:29,500
gotta get values right so come here

220
00:19:29,500 --> 00:19:37,880
value value on this guy Jason here brute
force it there's our value and look up

221
00:19:37,880 --> 00:19:43,240
here

222
00:19:44,400 --> 00:19:53,110
second value now obviously you're doing
this demo here you know this can all be

223
00:19:53,110 --> 00:19:58,760
scripted too because you're not going to
be doing it as a whole process could be

224
00:19:58,760 --> 00:20:02,120
scripted so that if you think about
random numbers and other people other

225
00:20:02,120 --> 00:20:05,560
people could be coming in like one
talking and password which could ruin my

226
00:20:05,560 --> 00:20:13,250
my demo so keep that in mind but there's
nobody else has and systems to have

227
00:20:13,250 --> 00:20:18,520
these three values here so remember if
we go back to its research given the

228
00:20:18,520 --> 00:20:23,220
given the values of those three random
values let's see if it works so it's

229
00:20:23,220 --> 00:20:27,280
heart-wrenching those numbers for
node.js to see what are our third

230
00:20:27,280 --> 00:20:32,629
password or miscarriage third hashes
gonna be a fireworks

231
00:20:36,880 --> 00:20:46,270
so we have hash here which is nine see
this would be are expected so I went to

232
00:20:46,270 --> 00:21:07,430
my expected value and come back here
just for looks pretty much anybody

233
00:21:07,430 --> 00:21:12,900
thinks they said the point here is a web
application right

234
00:21:12,900 --> 00:21:16,930
taken three random value that generated
same thing I forgot password setup you

235
00:21:16,930 --> 00:21:19,840
can do the same thing and if you can can
see the screen up their numbers are

236
00:21:19,840 --> 00:21:25,419
exactly the same so same thing and web
app you know we crypto is important

237
00:21:25,420 --> 00:21:29,310
right so you want to make sure you're
using code that sharing passwords 22

238
00:21:29,310 --> 00:21:35,480
strong crypto algorithm that a weak one
because it can easily be gets here

239
00:21:36,700 --> 00:21:42,250
presentation so what's next in our our
talk here

240
00:21:42,250 --> 00:21:45,970
MongoDB so MongoDB how many people know
about MongoDB

241
00:21:47,370 --> 00:21:55,879
care about right so MongoDB
traditionally it's no secret database so

242
00:21:55,880 --> 00:21:59,340
what is no sequel well when I was doing
my research on OC courtside

243
00:21:59,340 --> 00:22:05,120
traditionally known these types of data
structures no sequels like 10 sequels

244
00:22:05,120 --> 00:22:09,189
not know sequins just not only see types
of databases

245
00:22:10,330 --> 00:22:14,710
Server and Oracle so MongoDB is a
document oriented architecture writes

246
00:22:14,710 --> 00:22:18,930
own set of tables you have documents
said rose you have collections case of

247
00:22:18,930 --> 00:22:24,000
documents to document database and
everything gets stored as a JSONObject

248
00:22:24,000 --> 00:22:29,500
reggie of Jason documents and database
is how many of you have heard of the

249
00:22:29,500 --> 00:22:36,870
meet the mean stack of course I mean
stack is mom go right for you Database

250
00:22:36,870 --> 00:22:42,860
Express forefront and angular 44
JavaScript and then no jazz has your

251
00:22:42,860 --> 00:22:44,678
platform for your server

252
00:22:44,679 --> 00:22:48,350
case it means a lot of people are
migrating to the main stack and that's

253
00:22:48,350 --> 00:22:53,759
kind of talk about here so with with
Mongo right totally different different

254
00:22:53,759 --> 00:22:59,499
data structure gonna show you kind of
why we care about this so again the

255
00:22:59,499 --> 00:23:03,559
architecture of a Mongo database you
have your your document you have your

256
00:23:03,559 --> 00:23:07,529
collections and you can insert something
in so you basically insert things in

257
00:23:07,529 --> 00:23:12,679
answer to item here with card quantity
15 then with the next the next record

258
00:23:12,679 --> 00:23:18,129
that I want to insert in their name
elephant with size 72 totally different

259
00:23:18,129 --> 00:23:21,998
structure or totally different field
values . manga doesn't care about what

260
00:23:21,999 --> 00:23:25,929
the with the string is just a JSONObject
rate and so it doesn't really matter

261
00:23:25,929 --> 00:23:30,590
here for and that's kind of how this is
different typically you have traditional

262
00:23:30,590 --> 00:23:36,230
databases columns that are specific on
the datatype Jason just a block objects

263
00:23:36,230 --> 00:23:41,519
have all kinds of values inside so when
you go to insert in inserting data and

264
00:23:41,519 --> 00:23:44,409
that's what it looks like if you want to
retrieve the data right you can just

265
00:23:44,409 --> 00:23:48,929
call it out fine on the collections at a
return back on the item's k you gonna do

266
00:23:48,929 --> 00:23:52,700
selection criteria so could you find so
show me all the products that have the

267
00:23:52,700 --> 00:23:58,350
quantity 15 then you can also do filter
criteria so show me all the products

268
00:23:58,350 --> 00:24:03,418
that have shown me all the products that
have a quantity greater than 15 K and

269
00:24:03,419 --> 00:24:07,460
these are kind of so I can actually
write in my own JSONObject return back

270
00:24:07,460 --> 00:24:10,490
items and why does that matter so if you
look down on the bottom piece of code

271
00:24:10,490 --> 00:24:16,149
there are object to create an object and
then object our quality across 15 and

272
00:24:16,149 --> 00:24:20,979
then I can basically search based on
that Jason object case of a new way of

273
00:24:20,980 --> 00:24:22,480
doing you know

274
00:24:22,480 --> 00:24:25,860
operations against a different type of
data structure not traditionally known

275
00:24:25,860 --> 00:24:33,899
you see full strength values out ok to
parameterize Jason so when it comes to

276
00:24:33,899 --> 00:24:38,479
security though what is this what does
this mean right here with respect to

277
00:24:38,480 --> 00:24:41,820
what is this one has seen this before

278
00:24:41,820 --> 00:24:44,990
yes yes

279
00:24:44,990 --> 00:24:48,340
writes this is traditionally if I wanna
you know right

280
00:24:48,340 --> 00:24:52,580
dragged it out of a database of you
drive select command from users where

281
00:24:52,580 --> 00:24:57,399
username equals user-supplied values and
password in this case and we all know

282
00:24:57,400 --> 00:25:03,710
that this is no suggestion cuz I could
get code like this obviously bypass the

283
00:25:03,710 --> 00:25:11,100
filtering mechanism supply my own values
so I could do seem so with what about

284
00:25:11,100 --> 00:25:16,199
with no secret but no secret going on so
is so with a MongoDB there's no sequence

285
00:25:16,200 --> 00:25:23,929
action right to seek rejection in this
cold here say it again

286
00:25:23,929 --> 00:25:31,870
yeah yeah so in this case the same thing
right we we just passing valuable

287
00:25:31,870 --> 00:25:36,780
because there's no sequel there's no she
wants action right because the same case

288
00:25:36,780 --> 00:25:40,809
here right I can still still just
passing in those values including a JSON

289
00:25:40,809 --> 00:25:45,970
object not show you here in a minute why
this could be bad right she take that

290
00:25:45,970 --> 00:25:52,150
request that carried out using this
again this is no code here right so my

291
00:25:52,150 --> 00:25:56,950
note code get my username password I
call a manga database just passing my

292
00:25:56,950 --> 00:26:02,750
username and password now what happened
because we know that this is basically

293
00:26:02,750 --> 00:26:07,720
creating a JSON object right there's
also specific operators within JSON the

294
00:26:07,720 --> 00:26:13,410
specific model that can be used in that
Jason object that gets created by the

295
00:26:13,410 --> 00:26:19,250
operator called a greater than operator
ok so all I need to do right cuz I'm

296
00:26:19,250 --> 00:26:21,840
supplying username and password

297
00:26:21,840 --> 00:26:26,659
dollar sign GTE is greater than 80 the
username and password

298
00:26:26,660 --> 00:26:34,530
what do you guys think that's gonna be
able to show you

299
00:26:37,710 --> 00:26:43,080
get to them so basically what what

300
00:26:43,080 --> 00:26:46,600
with that greater than operator that I
have that I can pass in its basically

301
00:26:46,600 --> 00:26:50,299
gonna allow me to you know if I do my
saying look up here phone lookup the

302
00:26:50,299 --> 00:26:57,309
users based on my values name and
password will call the Find method and

303
00:26:57,309 --> 00:27:01,049
basically what that's going to create
for me as a user but it's gonna create a

304
00:27:01,049 --> 00:27:05,470
signature thats gonna talk to the node
server with using a password but if I

305
00:27:05,470 --> 00:27:10,289
supply those greater than operators
right after the user object right

306
00:27:10,289 --> 00:27:16,470
basically I'm gonna have you no talk to
my server go to my lookup user greater

307
00:27:16,470 --> 00:27:19,470
than a and user and password greater
than a

308
00:27:20,070 --> 00:27:23,379
think that's going to return

309
00:27:23,380 --> 00:27:30,029
take a look see here at the demo show
you how that works so I go back here to

310
00:27:30,029 --> 00:27:36,700
my demo machine and we go to hear

311
00:27:44,490 --> 00:28:03,440
so let's do this and have a site so here
is my

312
00:28:03,440 --> 00:28:09,639
my my basic simple site thats front end
node talking to a can talk to them on

313
00:28:09,639 --> 00:28:16,740
the database will try to login as a an
admin user similar query great

314
00:28:16,740 --> 00:28:20,590
administrators right so took admin admin
password

315
00:28:20,590 --> 00:28:24,149
let's go back in here and let's try
again once tried as admin and then try

316
00:28:24,149 --> 00:28:27,149
it with a you know a phony password one
that we don't know

317
00:28:27,690 --> 00:28:33,149
ok so it failed didn't work so I logged
in as admin were logged in as a

318
00:28:33,149 --> 00:28:39,668
incorrect password and I wasn't able to
login ok so now that we have this

319
00:28:39,669 --> 00:28:46,370
instead of typing in let's do our
greater than function greater than a and

320
00:28:46,370 --> 00:29:01,719
greater than this case user

321
00:29:11,020 --> 00:29:22,850
and password greater than that's why
don't you think so this right this is me

322
00:29:22,850 --> 00:29:27,169
to any user name password on this
shouldn't you should pick me up right

323
00:29:27,170 --> 00:29:44,830
back to this guy next time I just have
the script so much his passes through

324
00:29:44,830 --> 00:29:52,610
the sky

325
00:29:52,610 --> 00:29:55,610
guy you are

326
00:29:59,970 --> 00:30:04,200
I just hit that and it requested and it
returned me back as an administrator can

327
00:30:04,200 --> 00:30:10,030
of you guys can see that but if you can
see the text that there I did my greater

328
00:30:10,030 --> 00:30:15,490
than equals I did user greater than a
and you know the password greater than a

329
00:30:15,490 --> 00:30:18,570
show essentially what I've done is
unable to perform sequence action

330
00:30:18,570 --> 00:30:25,480
against an ounce equaled database ok so
obviously in this case right we still

331
00:30:25,480 --> 00:30:29,440
have you know like I said this is a
sequel injection or sequence action

332
00:30:29,440 --> 00:30:32,220
against the Mongo Mongo database

333
00:30:32,220 --> 00:30:45,510
come back here again so what are some
you know what are some ways to prevent

334
00:30:45,510 --> 00:30:51,360
this right how could I how can I prevent
this well what happens if I just you

335
00:30:51,360 --> 00:30:54,379
know I don't look at the past when you
look at the users and then I do some

336
00:30:54,380 --> 00:30:59,270
kind of compare against the candidate
password and the and the password and

337
00:30:59,270 --> 00:31:07,210
look at that party supply right so what
about that still not gonna work ok

338
00:31:07,210 --> 00:31:12,520
because if I'm allowed to pass in as
user on the passing my username I could

339
00:31:12,520 --> 00:31:17,200
basically then passed in my own Jason
object which as you see there there's a

340
00:31:17,200 --> 00:31:20,830
greater than object there's about 30
other different types of operators that

341
00:31:20,830 --> 00:31:27,570
today that are used to basically Syria
are used within Mongo that allows you to

342
00:31:27,570 --> 00:31:31,780
kind of performing operator operations
for example the next type of one that

343
00:31:31,780 --> 00:31:38,370
would look at here is regular expression
right because I could you know if I

344
00:31:38,370 --> 00:31:41,899
passed my username from declining
conspire that value what's to stop me

345
00:31:41,900 --> 00:31:45,790
from playing my username in supplying a
regular expression on top of that too

346
00:31:45,790 --> 00:31:48,220
then look up another value

347
00:31:48,220 --> 00:31:53,820
and then this can lead to regular
expression denial of service through to

348
00:31:53,820 --> 00:31:59,010
the same same contract here at supply my
username and then I'm basically crafting

349
00:31:59,010 --> 00:32:04,230
that request so I can supply a red regex
regex is another dollar dollar sign

350
00:32:04,230 --> 00:32:08,840
regex just like dollars and greater than
or less than and then I can supply my

351
00:32:08,840 --> 00:32:14,928
own regex now supplier and regex
function what is regex normally require

352
00:32:14,929 --> 00:32:20,500
from a computer from throwing it away
what is it what is regular expression

353
00:32:20,500 --> 00:32:21,929
doing what is it

354
00:32:21,929 --> 00:32:31,100
using to do to check for CPU hey what
are known applications bad at CPU

355
00:32:31,100 --> 00:32:36,389
intensive operations ok so regular
expression denounced service if I have a

356
00:32:36,390 --> 00:32:42,340
regular expression that's fairly complex
what they can do to my note instance

357
00:32:44,289 --> 00:32:47,289
regular expressions announcers

358
00:32:47,970 --> 00:32:53,159
remembering jazz highly sensitive CPU
operations as a single thread for the

359
00:32:53,159 --> 00:32:56,000
user code redox

360
00:32:56,000 --> 00:32:59,530
expression down service is gonna
basically denied my application of

361
00:32:59,530 --> 00:33:00,668
service

362
00:33:00,669 --> 00:33:07,850
this is my last fancy demo of the day
this is basically a blurb reg expression

363
00:33:07,850 --> 00:33:13,480
that I've crafted up here so you can
obviously go to Austin take a look at

364
00:33:13,480 --> 00:33:18,679
this there is no think it's tricky about
reg expressions is you gotta be careful

365
00:33:19,340 --> 00:33:23,408
create some arbitrary expression most
people are doing you know passwords are

366
00:33:23,409 --> 00:33:27,960
doing emails structure for you know have
a specific email address or other types

367
00:33:27,960 --> 00:33:31,830
of validation expressions again you
gotta remember their Jass

368
00:33:32,380 --> 00:33:36,240
allow the user to supply any those
values they can create their own or if

369
00:33:36,240 --> 00:33:40,490
you are writing your own regular
expression and the right one thats the

370
00:33:40,490 --> 00:33:45,450
CPU you could have ended our services
and so

371
00:33:45,960 --> 00:33:57,529
with this guy here come back to my demo
machine here and supply this guy

372
00:34:13,399 --> 00:34:22,429
ok so I know this works

373
00:34:25,210 --> 00:34:30,570
expression ability that you should
consider when you're looking at OJS

374
00:34:30,570 --> 00:34:39,429
applications and definitely something
that so let's go back here basically

375
00:34:39,429 --> 00:34:46,168
talked a little bit more about are you
know some of the key takeaways from what

376
00:34:46,168 --> 00:34:49,929
we talked about here today in a
presentation and so the node.js

377
00:34:49,929 --> 00:34:54,080
architecture key takeaway is that you
know we have a new platform that we're

378
00:34:54,080 --> 00:34:58,130
trying to migrate applications too many
large software vendors have started

379
00:34:58,130 --> 00:35:03,580
migrating IBM HP Microsoft lot of people
have sort of move their applications to

380
00:35:03,580 --> 00:35:08,210
the node.js architecture so there's
obviously based on what we found it

381
00:35:08,210 --> 00:35:11,119
today there's you know if I had more
time I would go through a lot more

382
00:35:11,119 --> 00:35:14,339
vulnerabilities but the time that we
have in these are some of that you know

383
00:35:14,339 --> 00:35:17,910
just by looking at the architecture you
can see out of box there's quite a few

384
00:35:17,910 --> 00:35:26,379
three main vulnerabilities that we found
in our service we crypto Jason Segel

385
00:35:26,380 --> 00:35:30,530
injection and even regular expression
down service would like to say about

386
00:35:30,530 --> 00:35:33,460
this is you know it's a new platform you
know same rules apply

387
00:35:33,460 --> 00:35:37,040
rights and we started doing application
security and other platforms

388
00:35:37,920 --> 00:35:42,170
you know we had to go through all their
abilities in the same types of

389
00:35:42,170 --> 00:35:44,349
vulnerabilities K

390
00:35:44,349 --> 00:35:48,650
so one of the things I found it during
my research note security they asked

391
00:35:48,650 --> 00:35:52,599
have a specific website if you wanna do
your own research looking to node.js to

392
00:35:52,599 --> 00:35:57,079
find things you can contribute back to
new security data i/o contributed to the

393
00:35:57,079 --> 00:36:03,999
platform particularly when it comes to
this presentation using code written no

394
00:36:03,999 --> 00:36:08,149
gesture to writing no jessup patients
are migrating applications from

395
00:36:08,150 --> 00:36:12,739
traditional apps to note platform always
validate the input length always make

396
00:36:12,739 --> 00:36:16,249
sure balloting kind of user-supplied
input anything that's coming from you

397
00:36:16,249 --> 00:36:21,209
make sure balloting that against a white
lists depending on the use case and

398
00:36:21,210 --> 00:36:26,930
allowing admitted care Pacific
characters not just a value some other

399
00:36:26,930 --> 00:36:30,979
takeaways is that each coding language
has its own pitfalls right certain

400
00:36:30,979 --> 00:36:32,618
languages are good at certain things

401
00:36:32,619 --> 00:36:36,569
scripting languages you know get some
things are compiled languages are better

402
00:36:36,569 --> 00:36:41,509
than other types of applications so be
mindful of your architectures removing

403
00:36:41,509 --> 00:36:45,710
migraine your apps to node.js be
considered these types of these types of

404
00:36:45,710 --> 00:36:50,249
vulnerabilities and make sure you
understand a language and its and what

405
00:36:50,249 --> 00:36:55,689
it can do so no jazz server-side
JavaScript to execute I mean these are

406
00:36:55,690 --> 00:37:00,749
just some of the basic one or two is
that we have a bunch more that we know

407
00:37:00,749 --> 00:37:05,819
that we can scan for Inditex and again
remember the concept node.js as it is

408
00:37:05,819 --> 00:37:09,799
highly you know anything that requires
high CPU and he kind of task is doing

409
00:37:09,799 --> 00:37:18,509
the high CPU is gonna give you a service
station and so we are so with that kind

410
00:37:18,509 --> 00:37:23,390
of don't my my presentation you wanna
stop by the check marks booth to learn

411
00:37:23,390 --> 00:37:27,129
more about our product and how we can
detect just these vulnerabilities and

412
00:37:27,130 --> 00:37:32,829
even more feel free to stop by and I can
give you more of a deeper dive so thank

413
00:37:32,829 --> 00:37:34,680
you

414
00:37:34,680 --> 00:37:38,029
any questions for me

415
00:37:41,450 --> 00:37:44,779
well thanks for coming I appreciate I'm
thank you

