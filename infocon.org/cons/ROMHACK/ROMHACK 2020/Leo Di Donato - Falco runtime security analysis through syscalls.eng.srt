1
00:00:15,360 --> 00:00:19,919
uh during this talk we're gonna talk

2
00:00:17,119 --> 00:00:20,960
and explore falco in particular we're

3
00:00:19,920 --> 00:00:23,920
gonna

4
00:00:20,960 --> 00:00:25,039
we're gonna see what's happening uh in

5
00:00:23,920 --> 00:00:28,480
our system and now

6
00:00:25,039 --> 00:00:31,119
falco uh traces everything's from the

7
00:00:28,480 --> 00:00:32,320
kernels upwards to provide us the last

8
00:00:31,119 --> 00:00:34,160
line of defense

9
00:00:32,320 --> 00:00:36,480
especially in cloud native security

10
00:00:34,160 --> 00:00:38,640
contexts i don't know maybe how familiar

11
00:00:36,480 --> 00:00:40,398
you are with kubernetes containers that

12
00:00:38,640 --> 00:00:43,120
kind of that today we

13
00:00:40,399 --> 00:00:44,559
have fun with but basically that's the

14
00:00:43,120 --> 00:00:47,120
landscape that file

15
00:00:44,559 --> 00:00:48,000
falco targets so ends up who already

16
00:00:47,120 --> 00:00:51,120
knows who

17
00:00:48,000 --> 00:00:53,519
what falco is here no one okay i can go

18
00:00:51,120 --> 00:00:55,599
away bye-bye

19
00:00:53,520 --> 00:00:58,239
anyway if you want to know more you can

20
00:00:55,600 --> 00:00:59,600
go on github falco security slash falco

21
00:00:58,239 --> 00:01:02,399
falco

22
00:00:59,600 --> 00:01:03,680
and spain so what falco is so maybe you

23
00:01:02,399 --> 00:01:07,439
can take a look after

24
00:01:03,680 --> 00:01:08,960
the tour to our guitar so briefly before

25
00:01:07,439 --> 00:01:11,039
to really start

26
00:01:08,960 --> 00:01:12,240
a bit of history falco was created in

27
00:01:11,040 --> 00:01:16,240
2016

28
00:01:12,240 --> 00:01:18,158
by ces league as an open source project

29
00:01:16,240 --> 00:01:19,920
from day one i don't know why since they

30
00:01:18,159 --> 00:01:20,560
did it i don't know why she pays me a

31
00:01:19,920 --> 00:01:22,960
salary

32
00:01:20,560 --> 00:01:23,680
but this is life i mean and since the

33
00:01:22,960 --> 00:01:26,320
beginning

34
00:01:23,680 --> 00:01:27,840
the focus of falco has been to pass

35
00:01:26,320 --> 00:01:30,559
liberty speed events

36
00:01:27,840 --> 00:01:32,799
libsyn's p events are uh basically

37
00:01:30,560 --> 00:01:34,640
events from this libra library libsyns

38
00:01:32,799 --> 00:01:38,079
which is another open source library

39
00:01:34,640 --> 00:01:40,159
from uh cisco from sisdig that

40
00:01:38,079 --> 00:01:42,639
handle cisco's proc file system

41
00:01:40,159 --> 00:01:45,119
information metadata from containers

42
00:01:42,640 --> 00:01:47,280
from orchestrators like mesosphere

43
00:01:45,119 --> 00:01:50,000
kubernetes and things like that

44
00:01:47,280 --> 00:01:51,759
anyway the scope of falco is to track

45
00:01:50,000 --> 00:01:54,240
everything's happening

46
00:01:51,759 --> 00:01:55,439
in at lowest level of your system and

47
00:01:54,240 --> 00:01:58,560
match

48
00:01:55,439 --> 00:02:01,600
these signals with security policies and

49
00:01:58,560 --> 00:02:04,799
i think eventually and hopefully fire

50
00:02:01,600 --> 00:02:08,318
alert two years later

51
00:02:04,799 --> 00:02:10,080
2018 falco was donated to cncf the cloud

52
00:02:08,318 --> 00:02:11,760
native computing foundation is a branch

53
00:02:10,080 --> 00:02:14,239
of the linux foundation

54
00:02:11,760 --> 00:02:15,040
and falc has been the first ever uh

55
00:02:14,239 --> 00:02:18,160
sandbox

56
00:02:15,040 --> 00:02:19,359
project in the security uh topic uh it

57
00:02:18,160 --> 00:02:21,040
started to gain some re

58
00:02:19,360 --> 00:02:22,879
some really serious traction to the

59
00:02:21,040 --> 00:02:24,480
point that me and the other three

60
00:02:22,879 --> 00:02:26,560
maintainers had to

61
00:02:24,480 --> 00:02:28,399
basically start a boring weekly

62
00:02:26,560 --> 00:02:30,160
community call to which by the way i

63
00:02:28,400 --> 00:02:33,519
invite anyone to participate

64
00:02:30,160 --> 00:02:36,319
on wednesday 5 pm italian time

65
00:02:33,519 --> 00:02:37,280
so past january falco has been

66
00:02:36,319 --> 00:02:41,280
officially

67
00:02:37,280 --> 00:02:43,519
incubated by the cncf uh

68
00:02:41,280 --> 00:02:44,319
branch of the linux foundation and we

69
00:02:43,519 --> 00:02:47,360
don't know where

70
00:02:44,319 --> 00:02:50,640
we'll we'll end up with this we'll see

71
00:02:47,360 --> 00:02:52,560
when mai my name is leonardo donato

72
00:02:50,640 --> 00:02:54,879
i'm an open source software engineer

73
00:02:52,560 --> 00:02:57,599
assistant where my daily job as

74
00:02:54,879 --> 00:02:58,560
i probably already imagined now is to

75
00:02:57,599 --> 00:03:01,518
code falco

76
00:02:58,560 --> 00:03:02,800
evolve it and maintain it in case you're

77
00:03:01,519 --> 00:03:05,120
wondering yes

78
00:03:02,800 --> 00:03:07,440
i spend all day on github because i mean

79
00:03:05,120 --> 00:03:10,159
that's there there is the source code so

80
00:03:07,440 --> 00:03:11,120
basically my workflow is github and

81
00:03:10,159 --> 00:03:13,519
kernel so

82
00:03:11,120 --> 00:03:15,440
let's see it uh if there's a photo of me

83
00:03:13,519 --> 00:03:18,800
that i use usually in talk

84
00:03:15,440 --> 00:03:20,800
in talks when i go in usa

85
00:03:18,800 --> 00:03:22,959
states and other parts of the world i

86
00:03:20,800 --> 00:03:24,879
suppose i imagine i should have

87
00:03:22,959 --> 00:03:26,400
removed the caption here about italian

88
00:03:24,879 --> 00:03:28,319
and gestures because

89
00:03:26,400 --> 00:03:29,680
i see that these jokes does not work

90
00:03:28,319 --> 00:03:32,879
really well in italy

91
00:03:29,680 --> 00:03:34,000
so you can usually find me on twitter

92
00:03:32,879 --> 00:03:35,760
github

93
00:03:34,000 --> 00:03:37,200
usually the webverse with leo did the

94
00:03:35,760 --> 00:03:40,399
nickname feel free to

95
00:03:37,200 --> 00:03:42,399
follow me send me direct messages

96
00:03:40,400 --> 00:03:45,280
whatever i like to socialize we can talk

97
00:03:42,400 --> 00:03:48,879
about everything about bpf kernel linux

98
00:03:45,280 --> 00:03:51,760
and security so the plans for the next

99
00:03:48,879 --> 00:03:52,480
30 40 minutes are to look at beautiful

100
00:03:51,760 --> 00:03:54,480
photos of

101
00:03:52,480 --> 00:03:55,679
our country when it does not rain like

102
00:03:54,480 --> 00:03:58,798
today and

103
00:03:55,680 --> 00:04:01,439
uh to get the skin you know falco tries

104
00:03:58,799 --> 00:04:04,239
to solve the runtime security problem by

105
00:04:01,439 --> 00:04:05,840
uh even for cloud native runtime cloud

106
00:04:04,239 --> 00:04:08,159
native environments by

107
00:04:05,840 --> 00:04:10,640
basically tracing all these c schools

108
00:04:08,159 --> 00:04:13,679
happening at the kernel level so

109
00:04:10,640 --> 00:04:14,159
this talk is played in three parts first

110
00:04:13,680 --> 00:04:17,040
of all

111
00:04:14,159 --> 00:04:18,798
we reason about the runtime security the

112
00:04:17,040 --> 00:04:21,680
concept of random security

113
00:04:18,798 --> 00:04:22,799
in modern contexts in cloud native

114
00:04:21,680 --> 00:04:26,000
contexts

115
00:04:22,800 --> 00:04:26,400
uh that for which for which fog is made

116
00:04:26,000 --> 00:04:30,000
for

117
00:04:26,400 --> 00:04:33,359
so then we'll focus on how to secure

118
00:04:30,000 --> 00:04:36,320
all these environments by tracing

119
00:04:33,360 --> 00:04:38,639
the linux kernel why and now to make

120
00:04:36,320 --> 00:04:42,719
cisco's coming from linux kernel

121
00:04:38,639 --> 00:04:42,720
with container metadata container

122
00:04:43,440 --> 00:04:46,960
other information grabbed from container

123
00:04:45,759 --> 00:04:49,759
and time apis

124
00:04:46,960 --> 00:04:50,719
kubernetes audit logs and so on we'll

125
00:04:49,759 --> 00:04:53,280
see how falco

126
00:04:50,720 --> 00:04:55,040
engine then asserts rules as a rule

127
00:04:53,280 --> 00:04:57,758
language or rule engine that has

128
00:04:55,040 --> 00:04:59,840
that is easy to assert those rules that

129
00:04:57,759 --> 00:05:01,919
define policies

130
00:04:59,840 --> 00:05:04,400
against the events that we collected and

131
00:05:01,919 --> 00:05:07,919
finally we'll try to have some fun

132
00:05:04,400 --> 00:05:08,840
about some cities on kubernetes and some

133
00:05:07,919 --> 00:05:12,719
other

134
00:05:08,840 --> 00:05:15,840
detections that i will demo

135
00:05:12,720 --> 00:05:18,560
so what does security mean to me

136
00:05:15,840 --> 00:05:19,599
how to characterize the security concept

137
00:05:18,560 --> 00:05:21,840
i don't know you but

138
00:05:19,600 --> 00:05:23,520
i personally don't want anything

139
00:05:21,840 --> 00:05:24,080
happening in my system without me even

140
00:05:23,520 --> 00:05:26,400
noticing

141
00:05:24,080 --> 00:05:28,560
it i want to control things that can

142
00:05:26,400 --> 00:05:29,758
happen and things that cannot at least

143
00:05:28,560 --> 00:05:32,639
in this context

144
00:05:29,759 --> 00:05:34,720
and since preemptive control is not

145
00:05:32,639 --> 00:05:38,479
always possible and we know this

146
00:05:34,720 --> 00:05:40,080
i also need deep visibility

147
00:05:38,479 --> 00:05:41,919
into my system to be able to know as

148
00:05:40,080 --> 00:05:44,080
soon as possible

149
00:05:41,919 --> 00:05:45,440
what just happened basically i think of

150
00:05:44,080 --> 00:05:48,560
security in terms of

151
00:05:45,440 --> 00:05:50,880
two words prevention and detection what

152
00:05:48,560 --> 00:05:54,160
did you worship in comma

153
00:05:50,880 --> 00:05:57,280
someone wants to reply i don't think so

154
00:05:54,160 --> 00:05:58,479
policies both concepts use some kind of

155
00:05:57,280 --> 00:06:01,679
policies right

156
00:05:58,479 --> 00:06:04,000
uh to describe the allowed or disallowed

157
00:06:01,680 --> 00:06:05,520
behavior for a process in the linux

158
00:06:04,000 --> 00:06:08,400
context

159
00:06:05,520 --> 00:06:09,599
in terms of system calls their arguments

160
00:06:08,400 --> 00:06:12,318
and asterisks is

161
00:06:09,600 --> 00:06:13,199
assessed the difference are that the

162
00:06:12,319 --> 00:06:16,319
first word

163
00:06:13,199 --> 00:06:17,919
prevention is about

164
00:06:16,319 --> 00:06:21,440
is connected to the concept of

165
00:06:17,919 --> 00:06:24,799
enforcement do not allow some actions

166
00:06:21,440 --> 00:06:27,360
of from some persons to happen at all

167
00:06:24,800 --> 00:06:28,720
because of some policies tools in this

168
00:06:27,360 --> 00:06:30,479
category usually

169
00:06:28,720 --> 00:06:32,800
change the behavioral process by

170
00:06:30,479 --> 00:06:36,960
preventing system calls to

171
00:06:32,800 --> 00:06:39,919
even happen while tools

172
00:06:36,960 --> 00:06:41,440
in the other category paul the policy

173
00:06:39,919 --> 00:06:44,080
concept in the other category

174
00:06:41,440 --> 00:06:44,800
is a bit different the concept there is

175
00:06:44,080 --> 00:06:47,520
to

176
00:06:44,800 --> 00:06:48,000
define some policies to monitor the

177
00:06:47,520 --> 00:06:50,400
behavior

178
00:06:48,000 --> 00:06:52,160
of processes and be notified when they

179
00:06:50,400 --> 00:06:53,198
steps outside so that you can take

180
00:06:52,160 --> 00:06:57,120
countermeasures

181
00:06:53,199 --> 00:07:00,080
then so we also can think about security

182
00:06:57,120 --> 00:07:00,800
in terms of this uh i will not say the

183
00:07:00,080 --> 00:07:03,758
economy

184
00:07:00,800 --> 00:07:05,199
because they are the same phase of a

185
00:07:03,759 --> 00:07:08,400
medal

186
00:07:05,199 --> 00:07:10,720
but we can also describe security

187
00:07:08,400 --> 00:07:12,080
uh looking at these two aspects in terms

188
00:07:10,720 --> 00:07:15,120
of enforcement

189
00:07:12,080 --> 00:07:16,960
and not versus auditing

190
00:07:15,120 --> 00:07:18,560
not versus is important i will explain

191
00:07:16,960 --> 00:07:20,638
now why i think so

192
00:07:18,560 --> 00:07:22,080
some example anyway of enforcement tools

193
00:07:20,639 --> 00:07:25,280
are secamp

194
00:07:22,080 --> 00:07:28,318
second bpf c linux hypermore

195
00:07:25,280 --> 00:07:30,719
even the authorization mechanism like

196
00:07:28,319 --> 00:07:31,919
kubernetes rules based assess control or

197
00:07:30,720 --> 00:07:33,599
the policy based

198
00:07:31,919 --> 00:07:35,440
admission plugins that we have in

199
00:07:33,599 --> 00:07:37,199
kubernetes fits this category

200
00:07:35,440 --> 00:07:38,479
since they will prevent something to

201
00:07:37,199 --> 00:07:41,360
happen on your cluster

202
00:07:38,479 --> 00:07:43,680
depending on some policy while tools

203
00:07:41,360 --> 00:07:45,440
like odd and falco itself

204
00:07:43,680 --> 00:07:46,879
belong to the other side the auditing

205
00:07:45,440 --> 00:07:49,440
side of the security topic

206
00:07:46,879 --> 00:07:51,440
a topic that especially in cloud native

207
00:07:49,440 --> 00:07:53,599
in modern contexts

208
00:07:51,440 --> 00:07:55,280
has not been solved there's a lot really

209
00:07:53,599 --> 00:07:58,960
a lot to do but

210
00:07:55,280 --> 00:08:01,679
now can falco solved

211
00:07:58,960 --> 00:08:03,120
all our security concerns in these

212
00:08:01,680 --> 00:08:06,560
contexts

213
00:08:03,120 --> 00:08:08,800
i have to be honest not at all i mean

214
00:08:06,560 --> 00:08:09,759
software is made of layers like these

215
00:08:08,800 --> 00:08:12,319
image shows

216
00:08:09,759 --> 00:08:13,919
and so it's security so and this is even

217
00:08:12,319 --> 00:08:14,800
more true in cloud native environments

218
00:08:13,919 --> 00:08:16,639
nowadays

219
00:08:14,800 --> 00:08:18,240
as you can see this came here i drew in

220
00:08:16,639 --> 00:08:19,919
the slide

221
00:08:18,240 --> 00:08:22,080
these are environments that embrace

222
00:08:19,919 --> 00:08:24,479
changes as as they're constant as the

223
00:08:22,080 --> 00:08:26,318
fundamental part opening to those to a

224
00:08:24,479 --> 00:08:27,120
lot of possibility but also to a lot of

225
00:08:26,319 --> 00:08:29,199
unknowns

226
00:08:27,120 --> 00:08:30,240
i mean you have orchestrators that

227
00:08:29,199 --> 00:08:32,880
brings down

228
00:08:30,240 --> 00:08:33,599
pods with services brings up others on

229
00:08:32,880 --> 00:08:35,760
others know

230
00:08:33,599 --> 00:08:36,800
different nodes differ with different

231
00:08:35,760 --> 00:08:40,640
maybe also

232
00:08:36,799 --> 00:08:42,559
adaptive uh limit and resources so it's

233
00:08:40,640 --> 00:08:44,319
change everything changes here

234
00:08:42,559 --> 00:08:46,399
constantly

235
00:08:44,320 --> 00:08:48,720
and the simple rule of the world is that

236
00:08:46,399 --> 00:08:51,279
sometimes like this year for example

237
00:08:48,720 --> 00:08:53,360
unexpected unexpected things i will not

238
00:08:51,279 --> 00:08:56,800
say shitty things but unexpected things

239
00:08:53,360 --> 00:08:58,959
happen and i mean

240
00:08:56,800 --> 00:09:00,399
world have you ever expected in the

241
00:08:58,959 --> 00:09:03,040
pandemic to be to

242
00:09:00,399 --> 00:09:03,600
assist to an in-person conference i

243
00:09:03,040 --> 00:09:05,439
would not

244
00:09:03,600 --> 00:09:07,120
have expected so unexpected things

245
00:09:05,440 --> 00:09:09,440
happen

246
00:09:07,120 --> 00:09:11,200
and anyway we have to respond uh to

247
00:09:09,440 --> 00:09:16,800
those event in a timely and

248
00:09:11,200 --> 00:09:16,800
accurate way so farco is here to

249
00:09:17,519 --> 00:09:23,680
enable us to detect intrusions

250
00:09:21,360 --> 00:09:24,640
malicious behaviors generally security

251
00:09:23,680 --> 00:09:28,239
threats

252
00:09:24,640 --> 00:09:31,519
at runtime but let also me

253
00:09:28,240 --> 00:09:34,480
be clear about

254
00:09:31,519 --> 00:09:35,279
this fact that security is made of layer

255
00:09:34,480 --> 00:09:38,880
and

256
00:09:35,279 --> 00:09:39,920
we i'm not suggesting to use talk as a

257
00:09:38,880 --> 00:09:42,640
solution

258
00:09:39,920 --> 00:09:43,199
for everything i already talked with

259
00:09:42,640 --> 00:09:45,600
someone

260
00:09:43,200 --> 00:09:47,440
some people here that were yesterday

261
00:09:45,600 --> 00:09:49,360
dinner about this concert stress people

262
00:09:47,440 --> 00:09:52,640
about this concept

263
00:09:49,360 --> 00:09:54,880
we need to use prevention tools

264
00:09:52,640 --> 00:09:58,399
and detection tools together in a

265
00:09:54,880 --> 00:10:00,399
layered fashion for example we have to

266
00:09:58,399 --> 00:10:02,640
implement what's called a defense in

267
00:10:00,399 --> 00:10:05,120
depth strategy defense in depth term

268
00:10:02,640 --> 00:10:06,880
is a term that derives since your room

269
00:10:05,120 --> 00:10:09,360
from a late roman

270
00:10:06,880 --> 00:10:10,720
military strategy that was a bit

271
00:10:09,360 --> 00:10:13,920
different from the

272
00:10:10,720 --> 00:10:17,120
software concept that concept was about

273
00:10:13,920 --> 00:10:20,399
intentionally setting ground to organ

274
00:10:17,120 --> 00:10:22,000
reorganize and then counter attack the

275
00:10:20,399 --> 00:10:24,320
opponents

276
00:10:22,000 --> 00:10:25,040
and because they had not all the

277
00:10:24,320 --> 00:10:27,279
strength to

278
00:10:25,040 --> 00:10:28,240
govern all the borders all these attacks

279
00:10:27,279 --> 00:10:30,480
surfaced

280
00:10:28,240 --> 00:10:31,600
in computer science defense in depth

281
00:10:30,480 --> 00:10:34,640
means that

282
00:10:31,600 --> 00:10:35,279
just means that at every level every

283
00:10:34,640 --> 00:10:38,800
degree

284
00:10:35,279 --> 00:10:41,120
you have to use a technique

285
00:10:38,800 --> 00:10:42,640
a combined techniques of prevention and

286
00:10:41,120 --> 00:10:46,079
techniques of detection

287
00:10:42,640 --> 00:10:48,640
maybe creating a feedback loop

288
00:10:46,079 --> 00:10:50,319
that continuously uh monitor and

289
00:10:48,640 --> 00:10:52,000
continues improve the detect

290
00:10:50,320 --> 00:10:53,360
the security posture of your

291
00:10:52,000 --> 00:10:55,360
environments for example

292
00:10:53,360 --> 00:10:57,839
let's me let's make a concrete example

293
00:10:55,360 --> 00:10:59,839
you could use falco and there are

294
00:10:57,839 --> 00:11:01,839
companies that do this is also very big

295
00:10:59,839 --> 00:11:04,959
companies like like shopify they use

296
00:11:01,839 --> 00:11:05,600
falco and they find policies on farco to

297
00:11:04,959 --> 00:11:08,880
detect

298
00:11:05,600 --> 00:11:10,959
a very strict set

299
00:11:08,880 --> 00:11:12,160
of policies they're interested in and

300
00:11:10,959 --> 00:11:16,000
every time they

301
00:11:12,160 --> 00:11:16,880
find that somehow someone inside someone

302
00:11:16,000 --> 00:11:20,880
outside

303
00:11:16,880 --> 00:11:23,680
uh stepped outside of those policies

304
00:11:20,880 --> 00:11:25,680
they immediately have a team that

305
00:11:23,680 --> 00:11:27,920
creates a farmer profiles

306
00:11:25,680 --> 00:11:29,760
for the containers and the kind of

307
00:11:27,920 --> 00:11:30,399
explode that have been found so they

308
00:11:29,760 --> 00:11:32,880
basically

309
00:11:30,399 --> 00:11:34,560
continuously day by day week by week

310
00:11:32,880 --> 00:11:36,880
improve the security posture

311
00:11:34,560 --> 00:11:38,399
they have on their clusters and they in

312
00:11:36,880 --> 00:11:39,200
their flight machine i mean their

313
00:11:38,399 --> 00:11:41,040
machine is very

314
00:11:39,200 --> 00:11:43,839
their fleet is very big it's like 300

315
00:11:41,040 --> 00:11:43,839
servers so

316
00:11:44,399 --> 00:11:48,320
so what's runtime security in the

317
00:11:46,320 --> 00:11:51,440
context i've just described

318
00:11:48,320 --> 00:11:53,040
runtime security can be seen last like

319
00:11:51,440 --> 00:11:54,240
the last line of defense let's try with

320
00:11:53,040 --> 00:11:56,639
the metaphor

321
00:11:54,240 --> 00:11:57,680
she was kelly look how beautiful she was

322
00:11:56,639 --> 00:12:00,639
my little dog

323
00:11:57,680 --> 00:12:01,920
uh i have a lot locks on my door and

324
00:12:00,639 --> 00:12:05,040
those and allen

325
00:12:01,920 --> 00:12:08,079
think of these like compliance rules

326
00:12:05,040 --> 00:12:09,360
but she alerted me when things were not

327
00:12:08,079 --> 00:12:13,040
going right

328
00:12:09,360 --> 00:12:16,000
policy violations when little bro

329
00:12:13,040 --> 00:12:16,639
was misbehaving with my mama think of

330
00:12:16,000 --> 00:12:18,639
him like

331
00:12:16,639 --> 00:12:20,800
compromising inside there is still is

332
00:12:18,639 --> 00:12:23,279
very very big compromise inside

333
00:12:20,800 --> 00:12:24,000
my house or if there's something

334
00:12:23,279 --> 00:12:26,959
suspicious

335
00:12:24,000 --> 00:12:28,000
happening outside the nearby anomalies

336
00:12:26,959 --> 00:12:30,800
zero days

337
00:12:28,000 --> 00:12:32,240
so she detected runtime anomalies in my

338
00:12:30,800 --> 00:12:34,719
life at home

339
00:12:32,240 --> 00:12:36,399
and she was may she rest in peace very

340
00:12:34,720 --> 00:12:38,720
serious about her job i mean look at

341
00:12:36,399 --> 00:12:40,959
the photo she was very very serious so

342
00:12:38,720 --> 00:12:43,279
while prevention is about locking

343
00:12:40,959 --> 00:12:45,040
the doors detection is about

344
00:12:43,279 --> 00:12:48,079
continuously monitoring

345
00:12:45,040 --> 00:12:50,639
the inside and the perimeter

346
00:12:48,079 --> 00:12:51,359
the full unique way to do this is by as

347
00:12:50,639 --> 00:12:53,600
said

348
00:12:51,360 --> 00:12:54,720
tracing and detecting everything

349
00:12:53,600 --> 00:12:56,880
happening

350
00:12:54,720 --> 00:12:58,000
inside the box from the bot on the

351
00:12:56,880 --> 00:13:00,959
kernel up

352
00:12:58,000 --> 00:13:02,720
instead of using the usual top down and

353
00:13:00,959 --> 00:13:05,199
side cars approach

354
00:13:02,720 --> 00:13:07,360
like other security monitoring solutions

355
00:13:05,200 --> 00:13:10,480
and engines do nowadays

356
00:13:07,360 --> 00:13:13,920
but how that's possible

357
00:13:10,480 --> 00:13:15,040
how to i mean okay we trace cisco's

358
00:13:13,920 --> 00:13:18,800
other shoes and then

359
00:13:15,040 --> 00:13:22,240
then we need an engine that's able to

360
00:13:18,800 --> 00:13:25,120
create a mechanism to match what we

361
00:13:22,240 --> 00:13:28,000
found by tracing the syscalls

362
00:13:25,120 --> 00:13:30,240
to what we described with the policies

363
00:13:28,000 --> 00:13:32,880
so we need basically a language and an

364
00:13:30,240 --> 00:13:34,720
engine that's able to after a parser an

365
00:13:32,880 --> 00:13:37,920
engine that's able to

366
00:13:34,720 --> 00:13:39,519
pass this to towards the data set of

367
00:13:37,920 --> 00:13:41,279
signals and events coming from the

368
00:13:39,519 --> 00:13:43,279
kernel plus

369
00:13:41,279 --> 00:13:44,800
signals and events coming from container

370
00:13:43,279 --> 00:13:49,839
and times container metadata

371
00:13:44,800 --> 00:13:49,839
kubernetes audit logs and so on

372
00:13:51,839 --> 00:13:57,920
okay so maybe

373
00:13:55,760 --> 00:14:00,160
someone at this point could argue why

374
00:13:57,920 --> 00:14:01,599
tracing the c score why going so lower

375
00:14:00,160 --> 00:14:04,399
in the stack

376
00:14:01,600 --> 00:14:06,480
well nowadays the production

377
00:14:04,399 --> 00:14:08,240
environments are filled with i said with

378
00:14:06,480 --> 00:14:11,120
so many pads

379
00:14:08,240 --> 00:14:12,880
so many services side cars containers

380
00:14:11,120 --> 00:14:16,079
monitor tools things change

381
00:14:12,880 --> 00:14:16,959
every like 10 10 seconds and i try to

382
00:14:16,079 --> 00:14:19,359
draw

383
00:14:16,959 --> 00:14:20,479
an abstraction diagram here on the right

384
00:14:19,360 --> 00:14:23,760
side

385
00:14:20,480 --> 00:14:27,360
don't criticize my designer

386
00:14:23,760 --> 00:14:27,760
skills and this basically exemplifies

387
00:14:27,360 --> 00:14:30,880
the

388
00:14:27,760 --> 00:14:33,680
today's typical production environments

389
00:14:30,880 --> 00:14:35,760
it turns out that exactly this

390
00:14:33,680 --> 00:14:36,880
complexity the one that i tried to

391
00:14:35,760 --> 00:14:39,519
abstract here

392
00:14:36,880 --> 00:14:40,079
and the one that was some slides ago in

393
00:14:39,519 --> 00:14:44,320
the

394
00:14:40,079 --> 00:14:45,040
layered environments is the exact reason

395
00:14:44,320 --> 00:14:46,720
we

396
00:14:45,040 --> 00:14:48,480
should go look under the hoods if you

397
00:14:46,720 --> 00:14:50,480
think about i mean

398
00:14:48,480 --> 00:14:52,240
in the end whatever program we are here

399
00:14:50,480 --> 00:14:54,079
at whatever point in the stack

400
00:14:52,240 --> 00:14:55,600
disregarding the language is written

401
00:14:54,079 --> 00:14:58,638
were c sharp

402
00:14:55,600 --> 00:15:00,720
whatever c c plus plus javascript

403
00:14:58,639 --> 00:15:02,079
no with node.js with some other

404
00:15:00,720 --> 00:15:04,320
javascript engine roof

405
00:15:02,079 --> 00:15:05,519
who knows whatever whatever the language

406
00:15:04,320 --> 00:15:08,560
whatever the cisco

407
00:15:05,519 --> 00:15:11,040
wrapper it's it uses it can be

408
00:15:08,560 --> 00:15:12,399
uh it can use muzzle it can use lmc it

409
00:15:11,040 --> 00:15:15,120
can use whatever

410
00:15:12,399 --> 00:15:16,880
and in the end it will run uh it will

411
00:15:15,120 --> 00:15:17,760
making will end up making a lot of

412
00:15:16,880 --> 00:15:20,399
cisco's

413
00:15:17,760 --> 00:15:22,959
in the kernel a big this because at

414
00:15:20,399 --> 00:15:26,880
least for linux the system calls

415
00:15:22,959 --> 00:15:27,599
uh only not not no honestly not only

416
00:15:26,880 --> 00:15:30,959
there are other

417
00:15:27,600 --> 00:15:31,680
little things but are the principal

418
00:15:30,959 --> 00:15:35,279
mechanism

419
00:15:31,680 --> 00:15:37,920
to basically tell the machine

420
00:15:35,279 --> 00:15:38,639
to do things on the hardware to do real

421
00:15:37,920 --> 00:15:40,479
things

422
00:15:38,639 --> 00:15:42,240
and so whether the task regards

423
00:15:40,480 --> 00:15:45,440
networking i o

424
00:15:42,240 --> 00:15:47,920
processes so this does not matter uh

425
00:15:45,440 --> 00:15:49,360
at all so that's instead of looking at

426
00:15:47,920 --> 00:15:51,599
every layer here

427
00:15:49,360 --> 00:15:52,399
putting a sidecar in every pod in every

428
00:15:51,600 --> 00:15:55,600
system that

429
00:15:52,399 --> 00:15:58,320
our clients says we just grew under the

430
00:15:55,600 --> 00:15:59,199
look under dude under the table and we

431
00:15:58,320 --> 00:16:00,800
don't give a

432
00:15:59,199 --> 00:16:04,240
sorry for what the about what's

433
00:16:00,800 --> 00:16:04,240
happening above us

434
00:16:05,360 --> 00:16:09,199
but to do this a set of unique

435
00:16:08,560 --> 00:16:12,319
challenges

436
00:16:09,199 --> 00:16:14,639
arises honestly uh i said cisco are

437
00:16:12,320 --> 00:16:17,600
basically the api that abstracts

438
00:16:14,639 --> 00:16:19,120
the hardware for us and they are very

439
00:16:17,600 --> 00:16:22,399
powerful mechanism

440
00:16:19,120 --> 00:16:24,320
but not very much from my user's user

441
00:16:22,399 --> 00:16:27,279
space perspective

442
00:16:24,320 --> 00:16:29,120
this because to bring a cisco there's a

443
00:16:27,279 --> 00:16:30,800
separation between camera space and use

444
00:16:29,120 --> 00:16:33,519
space to bring us c schools happening

445
00:16:30,800 --> 00:16:35,359
to use the space for example you have to

446
00:16:33,519 --> 00:16:37,519
do another cisco

447
00:16:35,360 --> 00:16:39,279
guess what you have to do if you want to

448
00:16:37,519 --> 00:16:41,120
know the time and event is happening

449
00:16:39,279 --> 00:16:43,040
i mean time in security i think it's

450
00:16:41,120 --> 00:16:45,680
very important guess what

451
00:16:43,040 --> 00:16:48,079
another c school except for the very

452
00:16:45,680 --> 00:16:50,000
braves playing with air dtsc

453
00:16:48,079 --> 00:16:51,599
things like that but that's another

454
00:16:50,000 --> 00:16:52,720
topic that's a world completely

455
00:16:51,600 --> 00:16:55,600
different story

456
00:16:52,720 --> 00:16:56,160
also there are a very a lot of c schools

457
00:16:55,600 --> 00:16:58,320
and

458
00:16:56,160 --> 00:17:00,160
with every kernel release they can

459
00:16:58,320 --> 00:17:02,079
change and they do

460
00:17:00,160 --> 00:17:04,959
they can gain new parameters they can

461
00:17:02,079 --> 00:17:05,918
gain deprecations new cisco's can be

462
00:17:04,959 --> 00:17:08,799
introduced

463
00:17:05,919 --> 00:17:09,280
and things like that so it can be really

464
00:17:08,799 --> 00:17:12,959
really

465
00:17:09,280 --> 00:17:15,439
painful to keep falcon track

466
00:17:12,959 --> 00:17:17,919
but we can do we can't do otherwise i

467
00:17:15,439 --> 00:17:18,400
mean otherwise the next talk title will

468
00:17:17,919 --> 00:17:20,799
be

469
00:17:18,400 --> 00:17:21,520
how simple is to bypass falco using new

470
00:17:20,799 --> 00:17:23,280
sea schools

471
00:17:21,520 --> 00:17:24,959
and that's by the way the talk that i

472
00:17:23,280 --> 00:17:26,160
will give you rubicon america in

473
00:17:24,959 --> 00:17:28,880
december so please

474
00:17:26,160 --> 00:17:29,520
join me come look at my fast falcom i

475
00:17:28,880 --> 00:17:32,960
too

476
00:17:29,520 --> 00:17:35,520
so um

477
00:17:32,960 --> 00:17:36,160
furthermore as we said we need to com to

478
00:17:35,520 --> 00:17:39,039
combine

479
00:17:36,160 --> 00:17:41,360
this huge flow of kernel events we are

480
00:17:39,039 --> 00:17:43,280
obtaining tracing cisco's with data

481
00:17:41,360 --> 00:17:44,399
from other various tools that are very

482
00:17:43,280 --> 00:17:47,520
common in today's

483
00:17:44,400 --> 00:17:50,000
very complex setup this because

484
00:17:47,520 --> 00:17:51,520
cisco's are the main interface towards

485
00:17:50,000 --> 00:17:54,240
the kernel

486
00:17:51,520 --> 00:17:56,400
and the hardware that it abstracts but

487
00:17:54,240 --> 00:17:59,840
cisco salon will not be enough

488
00:17:56,400 --> 00:18:01,360
and we all know this will not be enough

489
00:17:59,840 --> 00:18:04,159
to create a software that deals with

490
00:18:01,360 --> 00:18:07,360
runtime security in real time

491
00:18:04,160 --> 00:18:10,160
we want to connect these kernel events

492
00:18:07,360 --> 00:18:11,760
that we are grabbing from there with

493
00:18:10,160 --> 00:18:14,480
kubernetes metadata

494
00:18:11,760 --> 00:18:14,879
or with data from the container on time

495
00:18:14,480 --> 00:18:18,080
with

496
00:18:14,880 --> 00:18:20,240
all the logs from other k other

497
00:18:18,080 --> 00:18:21,918
other source of information for example

498
00:18:20,240 --> 00:18:25,600
if you need if you use

499
00:18:21,919 --> 00:18:28,720
falco to monitor your

500
00:18:25,600 --> 00:18:29,678
aws something a wsck yes cluster or

501
00:18:28,720 --> 00:18:33,120
whatever

502
00:18:29,679 --> 00:18:35,360
you may want to combine

503
00:18:33,120 --> 00:18:36,559
the ciscos that are happening on the

504
00:18:35,360 --> 00:18:39,840
actual nodes

505
00:18:36,559 --> 00:18:42,960
with cloud trails audit logs so

506
00:18:39,840 --> 00:18:44,959
to basically combine together more

507
00:18:42,960 --> 00:18:45,679
informations and gain more visibility

508
00:18:44,960 --> 00:18:50,000
more

509
00:18:45,679 --> 00:18:53,360
actionable insights but

510
00:18:50,000 --> 00:18:54,880
there's another issue here cisco's are

511
00:18:53,360 --> 00:18:56,639
very very

512
00:18:54,880 --> 00:18:59,120
fast and performance they happen at a

513
00:18:56,640 --> 00:19:02,240
rate that's completely different

514
00:18:59,120 --> 00:19:03,120
to the rate of docker demo container the

515
00:19:02,240 --> 00:19:05,280
api

516
00:19:03,120 --> 00:19:07,918
things that we need to go look to gain

517
00:19:05,280 --> 00:19:10,960
these other actionable insights

518
00:19:07,919 --> 00:19:11,679
which are by the way is ways lower uh of

519
00:19:10,960 --> 00:19:15,760
the cisco

520
00:19:11,679 --> 00:19:17,840
so there's the i did another

521
00:19:15,760 --> 00:19:19,679
another difficult point here was to

522
00:19:17,840 --> 00:19:23,280
basically

523
00:19:19,679 --> 00:19:26,400
create a way for falco to asynchronously

524
00:19:23,280 --> 00:19:28,639
process every kind of information coming

525
00:19:26,400 --> 00:19:30,880
from kubernetes container metadata

526
00:19:28,640 --> 00:19:32,880
or other sources in a secret way and

527
00:19:30,880 --> 00:19:35,360
reconcile the data later

528
00:19:32,880 --> 00:19:36,480
with the cisco's information so to know

529
00:19:35,360 --> 00:19:40,320
that

530
00:19:36,480 --> 00:19:40,320
at the end the result

531
00:19:40,880 --> 00:19:45,760
was and this that you know the container

532
00:19:43,679 --> 00:19:48,160
id the container name or the kubernetes

533
00:19:45,760 --> 00:19:51,360
node name the kubernetes part where

534
00:19:48,160 --> 00:19:53,039
that c schools for for example mounting

535
00:19:51,360 --> 00:19:55,360
a tcr etcos

536
00:19:53,039 --> 00:19:56,480
and dumping a lot of data inside

537
00:19:55,360 --> 00:19:58,639
basically dosing

538
00:19:56,480 --> 00:20:00,720
the nodes of your cluster was done so

539
00:19:58,640 --> 00:20:03,600
that way you would be able to know

540
00:20:00,720 --> 00:20:05,440
exactly the container that was exploited

541
00:20:03,600 --> 00:20:08,399
the container where the

542
00:20:05,440 --> 00:20:10,080
shell was spawned and you can do some

543
00:20:08,400 --> 00:20:14,240
kind of forensics

544
00:20:10,080 --> 00:20:16,879
or past that analysis

545
00:20:14,240 --> 00:20:18,480
or in real time if if you attach the

546
00:20:16,880 --> 00:20:21,840
falco alerts because

547
00:20:18,480 --> 00:20:23,200
falco alerts can fire alerts via syslog

548
00:20:21,840 --> 00:20:26,080
by a grpc

549
00:20:23,200 --> 00:20:26,640
in various other ways you can attach to

550
00:20:26,080 --> 00:20:29,199
that

551
00:20:26,640 --> 00:20:31,039
other tools to then do something

552
00:20:29,200 --> 00:20:33,760
automatically to for example

553
00:20:31,039 --> 00:20:35,039
eradicate that container block that that

554
00:20:33,760 --> 00:20:37,360
zone of the cluster

555
00:20:35,039 --> 00:20:38,879
and things like that always in the logic

556
00:20:37,360 --> 00:20:42,479
that i told before

557
00:20:38,880 --> 00:20:45,360
to integrate the prevention and the

558
00:20:42,480 --> 00:20:45,360
detection phase

559
00:20:45,679 --> 00:20:50,240
so this is in summary what the falco

560
00:20:48,880 --> 00:20:52,640
drivers do

561
00:20:50,240 --> 00:20:54,400
and we are going to dive a bit into this

562
00:20:52,640 --> 00:20:57,120
right now

563
00:20:54,400 --> 00:20:59,120
let me ask you a question uh how to get

564
00:20:57,120 --> 00:21:02,320
cisco to user space

565
00:20:59,120 --> 00:21:04,719
and use them as one of the falco

566
00:21:02,320 --> 00:21:06,559
inputs i mean the first thing that the

567
00:21:04,720 --> 00:21:09,039
first option that came to

568
00:21:06,559 --> 00:21:10,480
my to our mind was to write a current

569
00:21:09,039 --> 00:21:13,200
module

570
00:21:10,480 --> 00:21:13,919
good luck with that really good luck i

571
00:21:13,200 --> 00:21:17,760
will not have

572
00:21:13,919 --> 00:21:20,159
that ever participated in it

573
00:21:17,760 --> 00:21:21,600
i mean doing a kernel model comes with a

574
00:21:20,159 --> 00:21:23,440
lot of downsides

575
00:21:21,600 --> 00:21:24,799
above on the development side named

576
00:21:23,440 --> 00:21:26,799
kernel panics

577
00:21:24,799 --> 00:21:27,840
like two or three times two or three

578
00:21:26,799 --> 00:21:31,600
times a day

579
00:21:27,840 --> 00:21:34,879
and the deployment want to

580
00:21:31,600 --> 00:21:37,600
for example imagine that you you

581
00:21:34,880 --> 00:21:39,120
ship a new version of falco and a new

582
00:21:37,600 --> 00:21:42,480
version of the

583
00:21:39,120 --> 00:21:45,280
kernel module input and you need to

584
00:21:42,480 --> 00:21:47,120
contact people that's using falco maybe

585
00:21:45,280 --> 00:21:49,918
with the triad inflate

586
00:21:47,120 --> 00:21:51,280
300 machines fleet and say well you just

587
00:21:49,919 --> 00:21:54,080
need to update

588
00:21:51,280 --> 00:21:54,879
your 300 dos just write a script and

589
00:21:54,080 --> 00:21:58,799
update all you

590
00:21:54,880 --> 00:22:00,240
all the kernels there and maybe you also

591
00:21:58,799 --> 00:22:02,158
need to tell them you also need to

592
00:22:00,240 --> 00:22:03,520
compile the camera model for because you

593
00:22:02,159 --> 00:22:05,679
have that camera really

594
00:22:03,520 --> 00:22:06,639
released blah blah blah so i mean it's

595
00:22:05,679 --> 00:22:10,240
not always

596
00:22:06,640 --> 00:22:12,000
suitable like as a solution

597
00:22:10,240 --> 00:22:13,440
also because in some environments like

598
00:22:12,000 --> 00:22:16,080
banks

599
00:22:13,440 --> 00:22:17,360
canada module season is not trust okay

600
00:22:16,080 --> 00:22:20,879
loading camera mod is

601
00:22:17,360 --> 00:22:23,280
not not allowed usually an alternative

602
00:22:20,880 --> 00:22:26,320
so we need an alternative and we

603
00:22:23,280 --> 00:22:28,720
said we told okay what's alternative now

604
00:22:26,320 --> 00:22:29,439
we started investigating and we found

605
00:22:28,720 --> 00:22:31,760
okay that's

606
00:22:29,440 --> 00:22:33,600
this magic this new cool kit technology

607
00:22:31,760 --> 00:22:36,720
called dbpf

608
00:22:33,600 --> 00:22:39,360
does anyone know what the bpf is here

609
00:22:36,720 --> 00:22:40,080
no one good pretty good i'm the only one

610
00:22:39,360 --> 00:22:43,678
knowing

611
00:22:40,080 --> 00:22:44,639
linux here i'm joking evpf is a new

612
00:22:43,679 --> 00:22:48,640
technology

613
00:22:44,640 --> 00:22:51,600
really new is 2014. honestly it was

614
00:22:48,640 --> 00:22:54,720
created in 1992

615
00:22:51,600 --> 00:22:57,840
but it was limited to

616
00:22:54,720 --> 00:23:00,240
packet to packet tracing

617
00:22:57,840 --> 00:23:01,678
at that that time then it was extended

618
00:23:00,240 --> 00:23:05,440
by alex say

619
00:23:01,679 --> 00:23:08,799
in 2013 2014

620
00:23:05,440 --> 00:23:11,919
to basically create a technology to make

621
00:23:08,799 --> 00:23:14,158
us able to code the kernel without

622
00:23:11,919 --> 00:23:18,559
risking

623
00:23:14,159 --> 00:23:22,960
to panic it and without

624
00:23:18,559 --> 00:23:26,240
risking to expose holes or

625
00:23:22,960 --> 00:23:28,080
safety issues in the end it's

626
00:23:26,240 --> 00:23:29,600
this because in the kernel has been

627
00:23:28,080 --> 00:23:32,639
created a virtual machine

628
00:23:29,600 --> 00:23:34,000
which uh puts likes on safety and

629
00:23:32,640 --> 00:23:37,120
security

630
00:23:34,000 --> 00:23:39,919
a virtual machine that when

631
00:23:37,120 --> 00:23:40,799
receives the bpf code which is just a

632
00:23:39,919 --> 00:23:44,480
set of

633
00:23:40,799 --> 00:23:46,158
restricted c statically analyzes it

634
00:23:44,480 --> 00:23:47,679
and then just in time compiles it for

635
00:23:46,159 --> 00:23:49,840
performance reasons

636
00:23:47,679 --> 00:23:51,840
and uh does some optimization and while

637
00:23:49,840 --> 00:23:53,199
verifying it the code that it receives

638
00:23:51,840 --> 00:23:55,279
before executing it

639
00:23:53,200 --> 00:23:57,919
it verifies that for example there are

640
00:23:55,279 --> 00:24:00,080
no new point or the references

641
00:23:57,919 --> 00:24:01,840
that there are not unbounded loops you

642
00:24:00,080 --> 00:24:02,840
cannot iterate so it's not turing

643
00:24:01,840 --> 00:24:06,399
complete

644
00:24:02,840 --> 00:24:09,840
bpf and things like that

645
00:24:06,400 --> 00:24:10,320
so to avoid it happens and it happened

646
00:24:09,840 --> 00:24:14,000
to me

647
00:24:10,320 --> 00:24:16,158
personally that the avpf virtual machine

648
00:24:14,000 --> 00:24:18,080
which is which should be safe and it's

649
00:24:16,159 --> 00:24:21,919
advertised to be extremely safe

650
00:24:18,080 --> 00:24:25,120
in reality it is uh can expose some bugs

651
00:24:21,919 --> 00:24:26,960
uh that make it makes it makes it no not

652
00:24:25,120 --> 00:24:28,158
that secure anymore but that's another

653
00:24:26,960 --> 00:24:30,000
thing i mean that's something that will

654
00:24:28,159 --> 00:24:33,840
be happening in our field

655
00:24:30,000 --> 00:24:35,840
so uh i should not spend other event 20

656
00:24:33,840 --> 00:24:36,639
minutes talking about the bpf otherwise

657
00:24:35,840 --> 00:24:40,080
giovanni will

658
00:24:36,640 --> 00:24:42,000
will kill me but maybe that's the topic

659
00:24:40,080 --> 00:24:45,439
for another talk

660
00:24:42,000 --> 00:24:49,520
uh okay in case we maybe

661
00:24:45,440 --> 00:24:52,880
uh even last thing on the bpf a bpf

662
00:24:49,520 --> 00:24:54,960
is uh performs expose the same

663
00:24:52,880 --> 00:24:57,679
performances of the kernel module

664
00:24:54,960 --> 00:24:58,799
uh there there is just a bit of lower

665
00:24:57,679 --> 00:25:02,159
red but in the

666
00:24:58,799 --> 00:25:02,879
five percent so it's not it's something

667
00:25:02,159 --> 00:25:06,000
very

668
00:25:02,880 --> 00:25:07,279
and it's only usable on newer linux

669
00:25:06,000 --> 00:25:10,799
kernel i mean

670
00:25:07,279 --> 00:25:14,960
4.4 but we suggest 4.14

671
00:25:10,799 --> 00:25:18,320
4.16 so if you have a fleet with the

672
00:25:14,960 --> 00:25:20,720
of centos machines with 3.10 something

673
00:25:18,320 --> 00:25:21,678
kernels you need to use kernel model if

674
00:25:20,720 --> 00:25:25,200
you can't

675
00:25:21,679 --> 00:25:26,799
we there are other ways to input things

676
00:25:25,200 --> 00:25:29,840
to falco we are working on

677
00:25:26,799 --> 00:25:31,120
one it's pdig but it has been made for

678
00:25:29,840 --> 00:25:34,080
other kind of

679
00:25:31,120 --> 00:25:36,000
services it has been made for things

680
00:25:34,080 --> 00:25:37,600
like managed kubernetes services for

681
00:25:36,000 --> 00:25:38,880
example when you go on your cloud

682
00:25:37,600 --> 00:25:42,080
provider

683
00:25:38,880 --> 00:25:44,240
and you install things

684
00:25:42,080 --> 00:25:46,000
uh a kubernetes that because you don't

685
00:25:44,240 --> 00:25:48,320
want to manage and handle

686
00:25:46,000 --> 00:25:49,520
kubernetes installation and i feel you i

687
00:25:48,320 --> 00:25:52,559
mean in that case

688
00:25:49,520 --> 00:25:53,039
uh but usually for example on amw as far

689
00:25:52,559 --> 00:25:55,600
gate

690
00:25:53,039 --> 00:25:56,480
you have no access at all to the last

691
00:25:55,600 --> 00:25:58,879
machine

692
00:25:56,480 --> 00:26:00,159
so you cannot install an bpf probe

693
00:25:58,880 --> 00:26:04,000
neither a current module

694
00:26:00,159 --> 00:26:05,279
no and so we created pdig pdig basically

695
00:26:04,000 --> 00:26:08,240
it's a ptrace based

696
00:26:05,279 --> 00:26:09,520
producer that runs completely in user

697
00:26:08,240 --> 00:26:10,960
space so you don't need the kernel that

698
00:26:09,520 --> 00:26:11,520
leads runs completely into space and

699
00:26:10,960 --> 00:26:14,720
looks

700
00:26:11,520 --> 00:26:17,200
the kernels happen in the the ciscos

701
00:26:14,720 --> 00:26:18,480
happening the kernel with the ptrees and

702
00:26:17,200 --> 00:26:22,720
magic with the

703
00:26:18,480 --> 00:26:26,159
assembly trampolines it's very hackish

704
00:26:22,720 --> 00:26:28,000
very very active uh slower really slower

705
00:26:26,159 --> 00:26:29,440
than the other two methods but i mean if

706
00:26:28,000 --> 00:26:32,320
you have no other options

707
00:26:29,440 --> 00:26:32,960
this way you can you could still install

708
00:26:32,320 --> 00:26:36,879
falco

709
00:26:32,960 --> 00:26:38,000
with pdig and monitor your aws target

710
00:26:36,880 --> 00:26:41,120
clusters

711
00:26:38,000 --> 00:26:42,240
because i mean who knows what happens

712
00:26:41,120 --> 00:26:44,719
maybe you have compromised

713
00:26:42,240 --> 00:26:46,640
insiders maybe would you trust your

714
00:26:44,720 --> 00:26:49,760
cloud providers to be able to

715
00:26:46,640 --> 00:26:52,000
uh active to timely respond to any zero

716
00:26:49,760 --> 00:26:54,080
day or an anomaly or cv

717
00:26:52,000 --> 00:26:56,799
that happens i will not so you need to

718
00:26:54,080 --> 00:26:56,799
monitor things

719
00:26:57,520 --> 00:27:04,080
okay here's there's a diagram describing

720
00:27:00,880 --> 00:27:06,080
in a bit more detail how falco works

721
00:27:04,080 --> 00:27:08,000
when using the kernel module

722
00:27:06,080 --> 00:27:09,678
as an input driver as you can see

723
00:27:08,000 --> 00:27:12,000
there's the separation i was talking

724
00:27:09,679 --> 00:27:13,440
about before between the kernel space

725
00:27:12,000 --> 00:27:14,880
and the user space

726
00:27:13,440 --> 00:27:16,640
in the current spaces where the kernel

727
00:27:14,880 --> 00:27:18,640
module leaves

728
00:27:16,640 --> 00:27:20,720
at the upper boundary of the user space

729
00:27:18,640 --> 00:27:22,480
there's falc on top of a two other

730
00:27:20,720 --> 00:27:23,600
libraries which are the very important

731
00:27:22,480 --> 00:27:28,080
libraries that we do

732
00:27:23,600 --> 00:27:28,080
extensive use libsyns and libs gap

733
00:27:28,399 --> 00:27:32,559
the camera module attaches to the start

734
00:27:30,159 --> 00:27:34,799
of execution of every cisco of every

735
00:27:32,559 --> 00:27:37,600
cisco that we track in the current and

736
00:27:34,799 --> 00:27:39,760
also to the end of every cisco's to grab

737
00:27:37,600 --> 00:27:42,799
the argument the start and post

738
00:27:39,760 --> 00:27:44,640
execution uh with a mechanism we call

739
00:27:42,799 --> 00:27:45,679
fillers then the kernel modules

740
00:27:44,640 --> 00:27:47,840
basically

741
00:27:45,679 --> 00:27:51,039
augments makes the arguments of the

742
00:27:47,840 --> 00:27:54,559
cisco human readable somehow

743
00:27:51,039 --> 00:27:56,240
and finally it also grabs contextual

744
00:27:54,559 --> 00:27:58,000
information from the operating system

745
00:27:56,240 --> 00:27:58,880
and for example from the proc file

746
00:27:58,000 --> 00:28:02,000
system

747
00:27:58,880 --> 00:28:03,520
on linux and finally

748
00:28:02,000 --> 00:28:06,000
puts all this information in a ring

749
00:28:03,520 --> 00:28:08,240
buffer well it

750
00:28:06,000 --> 00:28:09,120
it actually does not put things in the

751
00:28:08,240 --> 00:28:12,799
ring buffer it

752
00:28:09,120 --> 00:28:14,719
puts in ring buffer only uh

753
00:28:12,799 --> 00:28:16,799
the memory pointer so basically shading

754
00:28:14,720 --> 00:28:19,760
that part of memory for

755
00:28:16,799 --> 00:28:21,520
performances reasons but what's a ring

756
00:28:19,760 --> 00:28:25,279
buffer

757
00:28:21,520 --> 00:28:25,918
a wiring buffer that's a vital part of

758
00:28:25,279 --> 00:28:27,919
falco

759
00:28:25,919 --> 00:28:29,679
a ring buffer is an elegant circular

760
00:28:27,919 --> 00:28:32,880
data structure with a fixed size

761
00:28:29,679 --> 00:28:35,679
eight megabytes in case of falco acting

762
00:28:32,880 --> 00:28:37,840
as a first thing for start queue

763
00:28:35,679 --> 00:28:39,520
it's very important because saving

764
00:28:37,840 --> 00:28:42,559
millions of ciscos

765
00:28:39,520 --> 00:28:45,760
per second and having to process pass

766
00:28:42,559 --> 00:28:47,360
them a match against a set of rules puts

767
00:28:45,760 --> 00:28:48,559
a really hard requirements on

768
00:28:47,360 --> 00:28:51,600
performances

769
00:28:48,559 --> 00:28:54,639
and this was for us the only way uh

770
00:28:51,600 --> 00:28:56,879
for falco to be effective because we

771
00:28:54,640 --> 00:28:59,279
don't need to shuffle memory around when

772
00:28:56,880 --> 00:29:02,320
other events come in we

773
00:28:59,279 --> 00:29:03,200
with ring buffer things just circle and

774
00:29:02,320 --> 00:29:05,279
you just

775
00:29:03,200 --> 00:29:07,200
get last one so you don't need to move

776
00:29:05,279 --> 00:29:09,200
memory to do copies and to do things

777
00:29:07,200 --> 00:29:12,240
like that that are very very

778
00:29:09,200 --> 00:29:15,120
time consuming and

779
00:29:12,240 --> 00:29:16,240
uh when this is when you use the kernel

780
00:29:15,120 --> 00:29:18,959
module

781
00:29:16,240 --> 00:29:21,520
basically the concrete implementation of

782
00:29:18,960 --> 00:29:25,200
the ring buffers there's one for cpu

783
00:29:21,520 --> 00:29:28,879
will be created like a dev devices

784
00:29:25,200 --> 00:29:30,960
so you will if you have eight uh cpu

785
00:29:28,880 --> 00:29:32,880
you will have that falcon zero the falco

786
00:29:30,960 --> 00:29:34,240
one the falcon 7

787
00:29:32,880 --> 00:29:36,320
and that would be the concrete

788
00:29:34,240 --> 00:29:40,399
implementation uh of the

789
00:29:36,320 --> 00:29:41,918
this mechanism uh

790
00:29:40,399 --> 00:29:43,439
mechanism between the kernel and user

791
00:29:41,919 --> 00:29:47,279
space that we use

792
00:29:43,440 --> 00:29:50,399
once we have data in user space

793
00:29:47,279 --> 00:29:53,679
which are grabbed through libs gap uh

794
00:29:50,399 --> 00:29:54,080
libsys printers the games and does that

795
00:29:53,679 --> 00:29:57,919
thing

796
00:29:54,080 --> 00:29:59,678
of reconciling these ciscos with the

797
00:29:57,919 --> 00:30:01,760
other contextual information about the

798
00:29:59,679 --> 00:30:04,399
context where they happen for example

799
00:30:01,760 --> 00:30:04,799
grabbing the container id the container

800
00:30:04,399 --> 00:30:08,080
name

801
00:30:04,799 --> 00:30:11,039
the container image name maybe you have

802
00:30:08,080 --> 00:30:11,678
maybe someone created an executable in a

803
00:30:11,039 --> 00:30:14,799
container

804
00:30:11,679 --> 00:30:17,840
you want to know which image has been

805
00:30:14,799 --> 00:30:21,520
uh which image has lost

806
00:30:17,840 --> 00:30:24,879
its immutability and things like that

807
00:30:21,520 --> 00:30:26,480
and then it everything comes to falcos

808
00:30:24,880 --> 00:30:29,360
there's the engine for the language and

809
00:30:26,480 --> 00:30:29,360
the policy matching

810
00:30:29,679 --> 00:30:34,159
then i said companies uh they want to

811
00:30:31,840 --> 00:30:35,199
use to or write to you hey falco

812
00:30:34,159 --> 00:30:38,559
seems very

813
00:30:35,200 --> 00:30:40,559
very very cool but we we cannot

814
00:30:38,559 --> 00:30:42,399
allow to insert the kernel module

815
00:30:40,559 --> 00:30:45,360
because

816
00:30:42,399 --> 00:30:45,918
blah blah blah i mean i gave reasons to

817
00:30:45,360 --> 00:30:47,760
do

818
00:30:45,919 --> 00:30:49,679
to disallow this session of kernel

819
00:30:47,760 --> 00:30:51,919
module and

820
00:30:49,679 --> 00:30:53,120
after a bit time we say them well we got

821
00:30:51,919 --> 00:30:56,080
you no worries

822
00:30:53,120 --> 00:30:57,518
uh you can have the same exactly

823
00:30:56,080 --> 00:31:00,080
functionality use this

824
00:30:57,519 --> 00:31:01,360
using this new curved technology bpf

825
00:31:00,080 --> 00:31:04,320
[Music]

826
00:31:01,360 --> 00:31:05,199
uh since we built an ebpf probe too in

827
00:31:04,320 --> 00:31:08,799
this case

828
00:31:05,200 --> 00:31:10,799
as diagram shows there is no ring buffer

829
00:31:08,799 --> 00:31:12,799
involved because the bpf virtual machine

830
00:31:10,799 --> 00:31:15,918
does not allow you to move memory

831
00:31:12,799 --> 00:31:18,639
between the kernel and the user space

832
00:31:15,919 --> 00:31:19,519
and for reasons i mean its purpose to be

833
00:31:18,640 --> 00:31:22,320
very safe would

834
00:31:19,519 --> 00:31:24,240
have been complete garbage if they would

835
00:31:22,320 --> 00:31:27,279
have allowed that

836
00:31:24,240 --> 00:31:30,559
anyway luckily a bpf

837
00:31:27,279 --> 00:31:34,480
has this feature very very cool called

838
00:31:30,559 --> 00:31:36,960
maps as you can see in the diagram here

839
00:31:34,480 --> 00:31:37,600
basically the maps are the vital part of

840
00:31:36,960 --> 00:31:40,000
the falcor

841
00:31:37,600 --> 00:31:41,039
architecture in this case in this use

842
00:31:40,000 --> 00:31:44,720
case here we have

843
00:31:41,039 --> 00:31:47,840
a library lipscope that's responsible

844
00:31:44,720 --> 00:31:51,840
basically to get the health

845
00:31:47,840 --> 00:31:55,760
of the company bpf source code

846
00:31:51,840 --> 00:31:58,000
parse it past the ebp of map sections

847
00:31:55,760 --> 00:31:59,039
that he found said pass the road trace

848
00:31:58,000 --> 00:32:01,120
point

849
00:31:59,039 --> 00:32:03,120
that we put on cisco's the normal

850
00:32:01,120 --> 00:32:05,360
transponders that we put on cisco's

851
00:32:03,120 --> 00:32:06,479
the other things that we do you probes

852
00:32:05,360 --> 00:32:10,320
and things like that to

853
00:32:06,480 --> 00:32:12,000
grab other informations and mount

854
00:32:10,320 --> 00:32:13,760
everything with the everything of this

855
00:32:12,000 --> 00:32:14,000
in the kernel in the bpf virtual machine

856
00:32:13,760 --> 00:32:17,360
and

857
00:32:14,000 --> 00:32:20,880
so let the bpf probe of farco

858
00:32:17,360 --> 00:32:24,000
run when this is running

859
00:32:20,880 --> 00:32:25,679
uh libscop also receives from the map

860
00:32:24,000 --> 00:32:28,799
that he created

861
00:32:25,679 --> 00:32:31,039
data through the bpf maps

862
00:32:28,799 --> 00:32:32,158
and this data will flow to libsys that

863
00:32:31,039 --> 00:32:35,039
against us

864
00:32:32,159 --> 00:32:36,399
the the same game of before so

865
00:32:35,039 --> 00:32:39,039
reconciling this data

866
00:32:36,399 --> 00:32:43,600
with kubernetes data container metadata

867
00:32:39,039 --> 00:32:45,279
containment data

868
00:32:43,600 --> 00:32:47,439
it took a while for us to reach this

869
00:32:45,279 --> 00:32:51,679
point but on

870
00:32:47,440 --> 00:32:55,360
the top level of the diagrams that we

871
00:32:51,679 --> 00:32:55,679
we've seen right now there was falco

872
00:32:55,360 --> 00:32:59,120
with

873
00:32:55,679 --> 00:33:02,080
the icon of falco and what

874
00:32:59,120 --> 00:33:02,639
what remains of falco is just very

875
00:33:02,080 --> 00:33:06,399
simple

876
00:33:02,640 --> 00:33:08,880
continuous loop that reads those events

877
00:33:06,399 --> 00:33:11,918
uh by calling the next method of

878
00:33:08,880 --> 00:33:14,159
validity perspective instance

879
00:33:11,919 --> 00:33:16,000
and outputs alert about security threats

880
00:33:14,159 --> 00:33:19,120
you declared with falco rules

881
00:33:16,000 --> 00:33:22,720
when its engine finds a match i mean i

882
00:33:19,120 --> 00:33:25,518
removed a bit of code here but this is

883
00:33:22,720 --> 00:33:26,399
what basically all falco does it's very

884
00:33:25,519 --> 00:33:28,880
very simple

885
00:33:26,399 --> 00:33:31,678
and all the magic is clearly in the bpf

886
00:33:28,880 --> 00:33:35,360
probe or in the kernel model probe

887
00:33:31,679 --> 00:33:35,679
here there's a bit of magic with engine

888
00:33:35,360 --> 00:33:38,320
with

889
00:33:35,679 --> 00:33:38,799
with the language but nothing really

890
00:33:38,320 --> 00:33:42,320
cool

891
00:33:38,799 --> 00:33:44,080
as the other two things notice also that

892
00:33:42,320 --> 00:33:47,360
the falco rules language as

893
00:33:44,080 --> 00:33:51,039
uh as we will see very soon uh

894
00:33:47,360 --> 00:33:53,199
operators and filters provided by libsys

895
00:33:51,039 --> 00:33:56,960
which is part of falco implementing

896
00:33:53,200 --> 00:34:00,240
for the filtering mechanism

897
00:33:56,960 --> 00:34:02,320
of those events so maybe asking yourself

898
00:34:00,240 --> 00:34:03,279
now maybe i bored you so much okay leo

899
00:34:02,320 --> 00:34:05,200
but what

900
00:34:03,279 --> 00:34:07,519
how do we define policies go straight to

901
00:34:05,200 --> 00:34:10,960
the point how would do we describe

902
00:34:07,519 --> 00:34:13,599
what is a security threat for us

903
00:34:10,960 --> 00:34:15,280
and answer is pretty straightforward

904
00:34:13,599 --> 00:34:16,879
with the falcorus language

905
00:34:15,280 --> 00:34:19,520
the falcon rules language is also very

906
00:34:16,879 --> 00:34:21,520
simple it's a yamon subset

907
00:34:19,520 --> 00:34:23,839
and this is this is make it very very

908
00:34:21,520 --> 00:34:25,199
easy to learn and very hard to indent

909
00:34:23,839 --> 00:34:28,719
correctly but that's

910
00:34:25,199 --> 00:34:34,399
yummerfold not my fault sorry and

911
00:34:28,719 --> 00:34:38,399
and no love because i love always

912
00:34:34,399 --> 00:34:40,078
sorry and unlike other policy languages

913
00:34:38,399 --> 00:34:42,000
where basically i don't know if you ever

914
00:34:40,079 --> 00:34:44,159
tried to write uh

915
00:34:42,000 --> 00:34:45,599
a ceiling policy apartment things like

916
00:34:44,159 --> 00:34:47,280
that yama is

917
00:34:45,599 --> 00:34:49,040
very simple the only defect is the

918
00:34:47,280 --> 00:34:50,240
indenting of the example but it's very

919
00:34:49,040 --> 00:34:54,000
very simple to

920
00:34:50,239 --> 00:34:56,319
to to learn you can write conditions

921
00:34:54,000 --> 00:34:57,599
you can group conditions into macros to

922
00:34:56,320 --> 00:35:01,280
later reuse them

923
00:34:57,599 --> 00:35:04,560
you can write lists to have more easier

924
00:35:01,280 --> 00:35:06,320
comparisons in conditions you can give

925
00:35:04,560 --> 00:35:09,279
names to rules you can even

926
00:35:06,320 --> 00:35:09,920
customize the output data rule when

927
00:35:09,280 --> 00:35:13,440
files

928
00:35:09,920 --> 00:35:14,720
will give you uh customizing the output

929
00:35:13,440 --> 00:35:16,800
field that you want maybe you don't want

930
00:35:14,720 --> 00:35:18,799
the continuity you just want to continue

931
00:35:16,800 --> 00:35:20,160
you can change you can change it it's

932
00:35:18,800 --> 00:35:24,000
very very

933
00:35:20,160 --> 00:35:24,560
simple and very very soon we're working

934
00:35:24,000 --> 00:35:27,280
on

935
00:35:24,560 --> 00:35:29,440
also another thing that's accepted for

936
00:35:27,280 --> 00:35:32,000
rules because in some environments maybe

937
00:35:29,440 --> 00:35:32,960
you want to you don't want fire alerts

938
00:35:32,000 --> 00:35:36,079
for something that

939
00:35:32,960 --> 00:35:38,000
you know that can be an issue

940
00:35:36,079 --> 00:35:40,079
but it's it's an issue that you can

941
00:35:38,000 --> 00:35:44,480
allow and so we are working also on

942
00:35:40,079 --> 00:35:47,359
exceptions for for rules

943
00:35:44,480 --> 00:35:48,960
what else we have a very very big

944
00:35:47,359 --> 00:35:51,359
default rule set

945
00:35:48,960 --> 00:35:53,680
uh i don't remember how many rules are

946
00:35:51,359 --> 00:35:54,720
and now but it's a huge file there are

947
00:35:53,680 --> 00:35:58,000
like five

948
00:35:54,720 --> 00:36:00,160
uh yaml files one for

949
00:35:58,000 --> 00:36:02,480
i mean linux security another for

950
00:36:00,160 --> 00:36:03,040
applications like databases things like

951
00:36:02,480 --> 00:36:05,440
that

952
00:36:03,040 --> 00:36:06,800
you can find them over in the rules

953
00:36:05,440 --> 00:36:09,040
directory of the

954
00:36:06,800 --> 00:36:10,839
falco repository go there grab them try

955
00:36:09,040 --> 00:36:13,599
them

956
00:36:10,839 --> 00:36:15,279
but other things that

957
00:36:13,599 --> 00:36:17,359
i mean there are a lot of rules we could

958
00:36:15,280 --> 00:36:19,839
not spend we will need a week

959
00:36:17,359 --> 00:36:20,640
to to look at every every rule that we

960
00:36:19,839 --> 00:36:24,078
provide

961
00:36:20,640 --> 00:36:25,279
but two things two rules humongous two

962
00:36:24,079 --> 00:36:28,560
things that uh

963
00:36:25,280 --> 00:36:29,920
i would it's worth mentioning in my

964
00:36:28,560 --> 00:36:32,400
opinion right now

965
00:36:29,920 --> 00:36:33,280
is this poland macro that's a macro that

966
00:36:32,400 --> 00:36:35,280
you can use to

967
00:36:33,280 --> 00:36:36,960
briefly in a pretty straightforward way

968
00:36:35,280 --> 00:36:39,680
create rules to detect

969
00:36:36,960 --> 00:36:40,720
when someone spawned the shell in your

970
00:36:39,680 --> 00:36:43,118
containers

971
00:36:40,720 --> 00:36:44,959
in your environments whatever or the

972
00:36:43,119 --> 00:36:47,920
cloud metadata from container

973
00:36:44,960 --> 00:36:48,960
basically a very common pattern in cloud

974
00:36:47,920 --> 00:36:52,800
native contacts

975
00:36:48,960 --> 00:36:56,400
is to abuse the

976
00:36:52,800 --> 00:37:00,960
the container metadata server to

977
00:36:56,400 --> 00:37:04,000
grab some credentials and secrets and

978
00:37:00,960 --> 00:37:07,040
that link put a rule that's used

979
00:37:04,000 --> 00:37:07,839
by falco users to detect when someone is

980
00:37:07,040 --> 00:37:10,560
using

981
00:37:07,839 --> 00:37:11,520
this uh mechanism this approach to

982
00:37:10,560 --> 00:37:15,920
exfiltrates

983
00:37:11,520 --> 00:37:19,119
credentials uh tokens from the

984
00:37:15,920 --> 00:37:19,119
the cluster and so on

985
00:37:19,839 --> 00:37:26,480
let this is let's now see

986
00:37:23,520 --> 00:37:29,680
this this is another example of another

987
00:37:26,480 --> 00:37:32,720
abnormal activity detected by falco

988
00:37:29,680 --> 00:37:35,598
i'm referring to a very very common

989
00:37:32,720 --> 00:37:39,200
remote code execution use case

990
00:37:35,599 --> 00:37:43,920
called container drift this means that

991
00:37:39,200 --> 00:37:46,480
in some way someone changed things

992
00:37:43,920 --> 00:37:48,400
in the container image changing the

993
00:37:46,480 --> 00:37:49,119
immutability of the control images i was

994
00:37:48,400 --> 00:37:52,320
saying

995
00:37:49,119 --> 00:37:55,520
before a subset

996
00:37:52,320 --> 00:37:59,440
of such changes are executables

997
00:37:55,520 --> 00:38:02,240
creating uh in a container at runtime

998
00:37:59,440 --> 00:38:03,200
detecting such behavior can help can

999
00:38:02,240 --> 00:38:06,240
really help flag

1000
00:38:03,200 --> 00:38:08,720
critical security issues related to

1001
00:38:06,240 --> 00:38:10,479
remote code execution

1002
00:38:08,720 --> 00:38:12,160
so as you can see this slide here with

1003
00:38:10,480 --> 00:38:15,200
the final rule to fire

1004
00:38:12,160 --> 00:38:18,399
an alert with when a new file

1005
00:38:15,200 --> 00:38:21,919
is created in a container with

1006
00:38:18,400 --> 00:38:24,079
execution permissions and

1007
00:38:21,920 --> 00:38:26,400
we use the ease open exec filter of

1008
00:38:24,079 --> 00:38:29,839
libsys that falco provides us

1009
00:38:26,400 --> 00:38:30,400
but i recorded a demo on ascii cinema i

1010
00:38:29,839 --> 00:38:32,380
don't know

1011
00:38:30,400 --> 00:38:34,000
if i can click here and try to

1012
00:38:32,380 --> 00:38:35,839
[Music]

1013
00:38:34,000 --> 00:38:37,359
let me try if i found the mouse i don't

1014
00:38:35,839 --> 00:38:42,480
know where okay

1015
00:38:37,359 --> 00:38:47,839
nope come here

1016
00:38:42,480 --> 00:38:47,839
okay let's take a look

1017
00:38:49,119 --> 00:38:53,280
okay for the sake of simplicity i

1018
00:38:51,440 --> 00:38:56,079
already created the

1019
00:38:53,280 --> 00:38:57,280
the rule set containing all only the

1020
00:38:56,079 --> 00:38:59,760
this rule

1021
00:38:57,280 --> 00:39:01,599
to detect container drift as you can see

1022
00:38:59,760 --> 00:39:04,240
the same that they put in the slide

1023
00:39:01,599 --> 00:39:06,240
there are some macros to the to

1024
00:39:04,240 --> 00:39:09,520
basically exclude

1025
00:39:06,240 --> 00:39:12,078
docker and run c container on time from

1026
00:39:09,520 --> 00:39:14,480
uh throwing this art because we know

1027
00:39:12,079 --> 00:39:17,280
that we are using docker and

1028
00:39:14,480 --> 00:39:19,520
basically we are using this open exec

1029
00:39:17,280 --> 00:39:21,680
and even type dividend of cisco is open

1030
00:39:19,520 --> 00:39:24,720
open at create

1031
00:39:21,680 --> 00:39:25,839
we are in a container and not and this

1032
00:39:24,720 --> 00:39:29,118
action was not done

1033
00:39:25,839 --> 00:39:32,400
by rancie or by docker

1034
00:39:29,119 --> 00:39:32,400
so basically we now

1035
00:39:32,720 --> 00:39:38,399
start falco with dash air giving this

1036
00:39:35,599 --> 00:39:41,680
yamal to falco falco starts

1037
00:39:38,400 --> 00:39:43,119
and now we will try to run a container

1038
00:39:41,680 --> 00:39:45,279
maybe an alpine and a boot i don't

1039
00:39:43,119 --> 00:39:47,680
remember what i ran here

1040
00:39:45,280 --> 00:39:49,040
and we try to write in the container

1041
00:39:47,680 --> 00:39:49,359
with the tool chain of the container

1042
00:39:49,040 --> 00:39:51,359
that

1043
00:39:49,359 --> 00:39:53,440
exists in the container this is a reason

1044
00:39:51,359 --> 00:39:54,880
why you should never put two chains in

1045
00:39:53,440 --> 00:39:58,160
containers

1046
00:39:54,880 --> 00:40:01,599
in production thank you very much

1047
00:39:58,160 --> 00:40:01,598
and basically

1048
00:40:01,760 --> 00:40:08,560
we we will try to now

1049
00:40:05,119 --> 00:40:11,599
create a malicious little c file

1050
00:40:08,560 --> 00:40:13,599
compile it and execute it and we will

1051
00:40:11,599 --> 00:40:16,319
see if falco is able to detect it

1052
00:40:13,599 --> 00:40:16,319
on time or not

1053
00:40:20,720 --> 00:40:24,240
i don't remember if okay basically we

1054
00:40:23,200 --> 00:40:27,359
are creating here

1055
00:40:24,240 --> 00:40:28,078
uh we are doing a cisco a creative

1056
00:40:27,359 --> 00:40:31,200
school

1057
00:40:28,079 --> 00:40:34,000
and on a file called blabla

1058
00:40:31,200 --> 00:40:36,399
we compile it and we execute and filter

1059
00:40:34,000 --> 00:40:39,839
the text that basically someone

1060
00:40:36,400 --> 00:40:41,040
in the container created uh executed a

1061
00:40:39,839 --> 00:40:43,599
command addatta

1062
00:40:41,040 --> 00:40:44,400
with with a file creating a file blah

1063
00:40:43,599 --> 00:40:47,599
blah that's

1064
00:40:44,400 --> 00:40:50,560
a new executable and you're done

1065
00:40:47,599 --> 00:40:52,160
so seems to work function i don't know

1066
00:40:50,560 --> 00:40:54,640
now i don't know how to come back to

1067
00:40:52,160 --> 00:41:07,759
farco here

1068
00:40:54,640 --> 00:41:10,480
if i found a mouse

1069
00:41:07,760 --> 00:41:10,480
it's on the right

1070
00:41:11,520 --> 00:41:14,640
yes yes yes yes

1071
00:41:15,599 --> 00:41:21,839
okay but okay

1072
00:41:28,000 --> 00:41:32,800
let's move on can i come back to this

1073
00:41:30,560 --> 00:41:32,799
one

1074
00:41:32,839 --> 00:41:39,359
okay let's move on

1075
00:41:37,119 --> 00:41:39,359
so

1076
00:41:41,280 --> 00:41:47,839
bad things can happen right for example

1077
00:41:44,720 --> 00:41:51,680
recently kubernetes

1078
00:41:47,839 --> 00:41:56,560
cv has been found and it affected

1079
00:41:51,680 --> 00:41:56,560
a lot of kubernetes versions

1080
00:41:57,280 --> 00:42:01,760
i mean we all agree that detecting

1081
00:41:59,520 --> 00:42:04,319
exploitation attempts

1082
00:42:01,760 --> 00:42:05,359
of this vulnerability is critical right

1083
00:42:04,319 --> 00:42:08,079
dcv

1084
00:42:05,359 --> 00:42:10,400
is was a bit critical because it was a

1085
00:42:08,079 --> 00:42:14,000
server-side request forgery

1086
00:42:10,400 --> 00:42:16,720
in a in the kuber controller manager

1087
00:42:14,000 --> 00:42:18,960
basically allowing certain users to leak

1088
00:42:16,720 --> 00:42:22,078
up to 500 bytes of

1089
00:42:18,960 --> 00:42:23,599
arbitrary information from unprotected

1090
00:42:22,079 --> 00:42:26,640
endpoint

1091
00:42:23,599 --> 00:42:28,480
within the master's host network such as

1092
00:42:26,640 --> 00:42:31,279
loopback services

1093
00:42:28,480 --> 00:42:32,800
this can be caused by an attacker with

1094
00:42:31,280 --> 00:42:36,160
permission to create a pod

1095
00:42:32,800 --> 00:42:40,720
or a storage class

1096
00:42:36,160 --> 00:42:43,759
with certain volume types to

1097
00:42:40,720 --> 00:42:47,520
cause the kubercontrol manager to

1098
00:42:43,760 --> 00:42:50,640
execute some get or pass frequencies

1099
00:42:47,520 --> 00:42:52,319
uh from the masters of us network which

1100
00:42:50,640 --> 00:42:54,480
means you can grab credentials

1101
00:42:52,319 --> 00:42:55,440
and things like that the good news is

1102
00:42:54,480 --> 00:42:56,890
that

1103
00:42:55,440 --> 00:42:58,640
with falco and uh

1104
00:42:56,890 --> 00:43:00,640
[Music]

1105
00:42:58,640 --> 00:43:02,560
language that that guy was loving so

1106
00:43:00,640 --> 00:43:05,279
much

1107
00:43:02,560 --> 00:43:05,839
it's very easy to write rules to detect

1108
00:43:05,280 --> 00:43:07,599
this

1109
00:43:05,839 --> 00:43:09,359
and some at least detect this then the

1110
00:43:07,599 --> 00:43:12,000
mitigation can be

1111
00:43:09,359 --> 00:43:13,040
done with other tools but to detect this

1112
00:43:12,000 --> 00:43:16,319
basically

1113
00:43:13,040 --> 00:43:19,440
you have to write a condition like this

1114
00:43:16,319 --> 00:43:21,440
we are a kubernetes event we are in a

1115
00:43:19,440 --> 00:43:25,119
pod in a creation phase

1116
00:43:21,440 --> 00:43:29,440
that's going on with sas system

1117
00:43:25,119 --> 00:43:32,000
and there's one of the

1118
00:43:29,440 --> 00:43:33,119
that the affected volume in the pod and

1119
00:43:32,000 --> 00:43:35,599
that's

1120
00:43:33,119 --> 00:43:36,720
the macro affected volumizing pod that

1121
00:43:35,599 --> 00:43:39,440
basically

1122
00:43:36,720 --> 00:43:40,319
lists scalar you could buy glass refresh

1123
00:43:39,440 --> 00:43:43,920
that where

1124
00:43:40,319 --> 00:43:47,119
the volume providers uh affected

1125
00:43:43,920 --> 00:43:50,480
so basically this way you

1126
00:43:47,119 --> 00:43:51,040
detected half of that cd and in the

1127
00:43:50,480 --> 00:43:54,000
other

1128
00:43:51,040 --> 00:43:55,279
the other way the the other part of the

1129
00:43:54,000 --> 00:43:58,079
cd was about

1130
00:43:55,280 --> 00:43:59,760
not part but storage class so again we

1131
00:43:58,079 --> 00:44:02,400
are writing a condition

1132
00:43:59,760 --> 00:44:03,760
that says okay is this a key ft a

1133
00:44:02,400 --> 00:44:07,040
kubernetes event and

1134
00:44:03,760 --> 00:44:10,240
a storage glass as is being created

1135
00:44:07,040 --> 00:44:13,680
successfully with one of the affected

1136
00:44:10,240 --> 00:44:16,959
storage processes that's just a list

1137
00:44:13,680 --> 00:44:18,560
and a macro that uses the in operator

1138
00:44:16,960 --> 00:44:19,200
because farkas all these operators

1139
00:44:18,560 --> 00:44:21,119
pre-match

1140
00:44:19,200 --> 00:44:22,640
in contains things like that it's a

1141
00:44:21,119 --> 00:44:26,480
language and

1142
00:44:22,640 --> 00:44:28,799
so this way you can like in

1143
00:44:26,480 --> 00:44:30,240
zero time if you have falco on your

1144
00:44:28,800 --> 00:44:33,680
kubernetes cluster

1145
00:44:30,240 --> 00:44:37,279
detect if someone is using

1146
00:44:33,680 --> 00:44:39,520
that cd on your cluster

1147
00:44:37,280 --> 00:44:40,960
we should probably move forward and know

1148
00:44:39,520 --> 00:44:44,240
how much time i have

1149
00:44:40,960 --> 00:44:46,720
but and probably i'm starting i mean

1150
00:44:44,240 --> 00:44:47,680
i'm hungry so we should so we should go

1151
00:44:46,720 --> 00:44:49,359
with something now

1152
00:44:47,680 --> 00:44:51,759
but nevertheless for the very bravest

1153
00:44:49,359 --> 00:44:54,880
interesting learning more about falco

1154
00:44:51,760 --> 00:44:56,880
the importance of runtime

1155
00:44:54,880 --> 00:44:58,240
detection even in environments like

1156
00:44:56,880 --> 00:45:01,520
kubernetes

1157
00:44:58,240 --> 00:45:03,118
and containers that should theoretically

1158
00:45:01,520 --> 00:45:04,640
provide better resolution i mean at

1159
00:45:03,119 --> 00:45:07,119
least this is how they advertise

1160
00:45:04,640 --> 00:45:10,640
containers kubernetes isolation

1161
00:45:07,119 --> 00:45:13,119
theoretically in reality

1162
00:45:10,640 --> 00:45:13,920
there's a lot of fun out there i put

1163
00:45:13,119 --> 00:45:17,520
here

1164
00:45:13,920 --> 00:45:20,319
two pointers that i consider worth to

1165
00:45:17,520 --> 00:45:20,800
to take a look at they are two very very

1166
00:45:20,319 --> 00:45:23,440
recent

1167
00:45:20,800 --> 00:45:25,040
cds that have been discovered yes

1168
00:45:23,440 --> 00:45:28,160
against kubernetes cluster

1169
00:45:25,040 --> 00:45:31,200
the one on the left on july that one

1170
00:45:28,160 --> 00:45:35,920
is like one week 10 days ago

1171
00:45:31,200 --> 00:45:38,799
so the one on the right is a

1172
00:45:35,920 --> 00:45:39,760
the one on the left is about exploiting

1173
00:45:38,800 --> 00:45:44,240
a bag

1174
00:45:39,760 --> 00:45:48,079
in the kubernetes cubelet that was

1175
00:45:44,240 --> 00:45:51,520
basically uh not considering uh

1176
00:45:48,079 --> 00:45:54,560
in a completely correct way uh the pods

1177
00:45:51,520 --> 00:45:57,599
mounting atc us so basically letting

1178
00:45:54,560 --> 00:45:58,400
the attacker mounting ethicios in some

1179
00:45:57,599 --> 00:46:01,440
cases

1180
00:45:58,400 --> 00:46:03,040
and putting a lot of data in like a lot

1181
00:46:01,440 --> 00:46:04,240
of data i mean one megabyte two

1182
00:46:03,040 --> 00:46:08,160
megabytes and it is

1183
00:46:04,240 --> 00:46:10,560
atc us file basically dosing

1184
00:46:08,160 --> 00:46:13,040
your nodes with just that so basically

1185
00:46:10,560 --> 00:46:15,200
create a pod that mounts a tcs

1186
00:46:13,040 --> 00:46:16,960
and puts a lot of data inside it is us

1187
00:46:15,200 --> 00:46:20,399
the first things that he does when iran

1188
00:46:16,960 --> 00:46:22,240
when it runs it will bring your nodes

1189
00:46:20,400 --> 00:46:23,520
it will dust your nodes like the nail

1190
00:46:22,240 --> 00:46:26,560
service so

1191
00:46:23,520 --> 00:46:28,800
it's a medium severity one

1192
00:46:26,560 --> 00:46:29,599
and i put the link there there's a link

1193
00:46:28,800 --> 00:46:31,920
on how to

1194
00:46:29,599 --> 00:46:33,839
detect it with falco and mitigate it

1195
00:46:31,920 --> 00:46:38,000
with the apartment profiles

1196
00:46:33,839 --> 00:46:40,880
as soon as detected on the right side

1197
00:46:38,000 --> 00:46:41,280
of the of this slide there is the other

1198
00:46:40,880 --> 00:46:44,560
cv

1199
00:46:41,280 --> 00:46:46,400
the very recent one that was discovered

1200
00:46:44,560 --> 00:46:47,279
in reality was used on kubernetes what

1201
00:46:46,400 --> 00:46:48,800
was discovered

1202
00:46:47,280 --> 00:46:51,760
has been discovered in the packet socket

1203
00:46:48,800 --> 00:46:54,240
facility of the linux kernel

1204
00:46:51,760 --> 00:46:55,680
it affects all the linux kernel greater

1205
00:46:54,240 --> 00:46:57,598
than 4.6

1206
00:46:55,680 --> 00:46:59,759
so a lot of versions since we are today

1207
00:46:57,599 --> 00:47:03,359
to 5.85

1208
00:46:59,760 --> 00:47:05,839
5.9 and basically it affects all major

1209
00:47:03,359 --> 00:47:08,839
distributions of linux

1210
00:47:05,839 --> 00:47:11,359
it can be used to gain root assets from

1211
00:47:08,839 --> 00:47:13,839
unprivileged local process

1212
00:47:11,359 --> 00:47:14,960
so also from continents and pods this is

1213
00:47:13,839 --> 00:47:18,400
why they use

1214
00:47:14,960 --> 00:47:20,559
it on kubernetes it allows a bad doctor

1215
00:47:18,400 --> 00:47:23,280
to trigger memory corruption that can be

1216
00:47:20,559 --> 00:47:25,599
used and exploited to hijack data

1217
00:47:23,280 --> 00:47:26,960
resources and the most severe cases take

1218
00:47:25,599 --> 00:47:29,599
complete control

1219
00:47:26,960 --> 00:47:30,079
of your system of your machines so i

1220
00:47:29,599 --> 00:47:32,559
would

1221
00:47:30,079 --> 00:47:33,760
consider to go read this if you have

1222
00:47:32,559 --> 00:47:36,160
like 10 minutes

1223
00:47:33,760 --> 00:47:37,040
of spare time because it's very very

1224
00:47:36,160 --> 00:47:41,200
funny

1225
00:47:37,040 --> 00:47:43,440
let's say this way as promised

1226
00:47:41,200 --> 00:47:45,200
at the end the year in the slide i put a

1227
00:47:43,440 --> 00:47:47,280
bit of resources for those interesting

1228
00:47:45,200 --> 00:47:49,439
maybe in

1229
00:47:47,280 --> 00:47:50,960
learning more about btf this technology

1230
00:47:49,440 --> 00:47:53,920
that we use to

1231
00:47:50,960 --> 00:47:55,119
trace all the everything happening in

1232
00:47:53,920 --> 00:47:59,440
the linux kernel

1233
00:47:55,119 --> 00:48:00,319
i did a podcast for google about a bpf

1234
00:47:59,440 --> 00:48:02,880
you can find

1235
00:48:00,319 --> 00:48:04,319
it at the first link or you can read the

1236
00:48:02,880 --> 00:48:07,440
book from michael league about

1237
00:48:04,319 --> 00:48:09,759
bpf florence fontana are

1238
00:48:07,440 --> 00:48:12,160
if you're just interested in looking at

1239
00:48:09,760 --> 00:48:13,520
the ring buffer implementation or the

1240
00:48:12,160 --> 00:48:17,359
fillers to

1241
00:48:13,520 --> 00:48:20,079
make the cisco's data human readable

1242
00:48:17,359 --> 00:48:21,759
just go there for people that loves yaml

1243
00:48:20,079 --> 00:48:23,680
they can click to the last link

1244
00:48:21,760 --> 00:48:26,079
falcon default rule set so they can look

1245
00:48:23,680 --> 00:48:28,720
at like ten thousand lines of yammer

1246
00:48:26,079 --> 00:48:30,160
so that's it if you have any questions

1247
00:48:28,720 --> 00:48:34,160
please feel free to

1248
00:48:30,160 --> 00:48:36,240
throw questions with me uh otherwise uh

1249
00:48:34,160 --> 00:48:39,040
you can find me on the kubernetes lock

1250
00:48:36,240 --> 00:48:40,160
on the falco's lock or the cncf slack

1251
00:48:39,040 --> 00:48:43,119
i'm ludido

1252
00:48:40,160 --> 00:48:45,118
uh everywhere feel free to contact me

1253
00:48:43,119 --> 00:48:45,920
being me over twitter follow me asking

1254
00:48:45,119 --> 00:48:49,839
questions

1255
00:48:45,920 --> 00:48:49,839
thanks to everyone

1256
00:49:08,640 --> 00:49:10,720
you

