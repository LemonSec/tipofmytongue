1
00:00:15,599 --> 00:00:20,560
so i'm going to switch to english now

2
00:00:17,840 --> 00:00:21,359
and i'm going to be talking about byy

3
00:00:20,560 --> 00:00:24,960
payloads

4
00:00:21,359 --> 00:00:25,439
uh so by payloads is a completely new

5
00:00:24,960 --> 00:00:28,800
term

6
00:00:25,439 --> 00:00:31,519
that i made up for these kind of

7
00:00:28,800 --> 00:00:32,960
payloads and it stands for bring your

8
00:00:31,519 --> 00:00:34,399
own interpreter and it basically allows

9
00:00:32,960 --> 00:00:37,680
you to fuse

10
00:00:34,399 --> 00:00:38,960
scripting languages with uh your.net

11
00:00:37,680 --> 00:00:39,920
tradecraft and we're going to be talking

12
00:00:38,960 --> 00:00:42,480
about this in depth

13
00:00:39,920 --> 00:00:44,399
i'm also going to be going through these

14
00:00:42,480 --> 00:00:46,160
slides rather fast and that's just

15
00:00:44,399 --> 00:00:46,800
because there's a lot of content to get

16
00:00:46,160 --> 00:00:48,559
to

17
00:00:46,800 --> 00:00:50,078
uh very quickly okay and i also have

18
00:00:48,559 --> 00:00:53,280
some demos that hopefully

19
00:00:50,079 --> 00:00:55,280
uh will uh be helpful

20
00:00:53,280 --> 00:00:57,440
in order to actually visualize how

21
00:00:55,280 --> 00:01:00,000
things work that i'm gonna explain

22
00:00:57,440 --> 00:01:00,879
okay so quick where my slide my name is

23
00:01:00,000 --> 00:01:03,840
marcello

24
00:01:00,879 --> 00:01:05,039
i go by bite bleeder on the intertubes i

25
00:01:03,840 --> 00:01:06,479
work for black hills information

26
00:01:05,040 --> 00:01:08,000
security

27
00:01:06,479 --> 00:01:10,240
i'm also the founder of porquita

28
00:01:08,000 --> 00:01:13,280
industries which is a community that

29
00:01:10,240 --> 00:01:16,399
tries to support uh open source

30
00:01:13,280 --> 00:01:17,360
uh soft software developers and um we

31
00:01:16,400 --> 00:01:19,040
can talk about

32
00:01:17,360 --> 00:01:20,240
some and if you if you're interested in

33
00:01:19,040 --> 00:01:20,880
that we can definitely talk about that

34
00:01:20,240 --> 00:01:23,280
as well

35
00:01:20,880 --> 00:01:24,720
uh i'm also the creator of uh crack map

36
00:01:23,280 --> 00:01:26,080
execs on trinity and a bunch of other

37
00:01:24,720 --> 00:01:26,880
open source projects that you can find

38
00:01:26,080 --> 00:01:29,920
on my github

39
00:01:26,880 --> 00:01:32,640
when the github link is there and um

40
00:01:29,920 --> 00:01:34,159
i've spoken at places i've i've i

41
00:01:32,640 --> 00:01:36,479
sometimes co-teach

42
00:01:34,159 --> 00:01:37,520
for sans and i got papers with shiny

43
00:01:36,479 --> 00:01:40,560
stuff

44
00:01:37,520 --> 00:01:44,158
that's that basically sums it up so

45
00:01:40,560 --> 00:01:45,759
uh for this talk uh we're going to

46
00:01:44,159 --> 00:01:47,600
be covering really quickly the

47
00:01:45,759 --> 00:01:49,360
motivation and background

48
00:01:47,600 --> 00:01:50,640
of why i tried doing this in the first

49
00:01:49,360 --> 00:01:52,399
place

50
00:01:50,640 --> 00:01:54,960
uh some of the key.net framework

51
00:01:52,399 --> 00:01:56,240
concepts some kidney framework concepts

52
00:01:54,960 --> 00:01:58,240
and the reason why we need to talk

53
00:01:56,240 --> 00:01:59,759
about.net framework is because in order

54
00:01:58,240 --> 00:02:01,439
to understand

55
00:01:59,759 --> 00:02:03,119
exactly what i'm about to be explaining

56
00:02:01,439 --> 00:02:03,919
we need to all be on the same page in

57
00:02:03,119 --> 00:02:07,119
terms of

58
00:02:03,920 --> 00:02:08,080
understanding some key dotnet framework

59
00:02:07,119 --> 00:02:09,919
concepts

60
00:02:08,080 --> 00:02:11,599
um i'm then gonna be talking about

61
00:02:09,919 --> 00:02:14,319
embedding interpreters and engines

62
00:02:11,599 --> 00:02:14,640
which is the main point of this talk and

63
00:02:14,319 --> 00:02:17,519
we're

64
00:02:14,640 --> 00:02:18,879
i'm gonna be demoing some example by

65
00:02:17,520 --> 00:02:20,959
payloads and i'm gonna be talking about

66
00:02:18,879 --> 00:02:22,640
two tools if we have the time because

67
00:02:20,959 --> 00:02:24,720
there is a lot of content here that i

68
00:02:22,640 --> 00:02:27,359
developed silent trinity which is

69
00:02:24,720 --> 00:02:28,080
a uh a command and control platform that

70
00:02:27,360 --> 00:02:29,920
i made

71
00:02:28,080 --> 00:02:32,480
which attempts to weaponize some of

72
00:02:29,920 --> 00:02:34,720
these concepts into a fully fledged

73
00:02:32,480 --> 00:02:36,480
c2 framework and we're then we're going

74
00:02:34,720 --> 00:02:38,000
to be talking about jormungandr which is

75
00:02:36,480 --> 00:02:40,160
another

76
00:02:38,000 --> 00:02:42,080
project that sort of tries to weaponize

77
00:02:40,160 --> 00:02:43,359
this using python.net and hopefully

78
00:02:42,080 --> 00:02:47,120
we'll get to that as well

79
00:02:43,360 --> 00:02:50,480
and then detection and then

80
00:02:47,120 --> 00:02:53,360
questions and answers

81
00:02:50,480 --> 00:02:54,640
so just really quickly the the real

82
00:02:53,360 --> 00:02:58,080
motivation behind this

83
00:02:54,640 --> 00:02:59,279
is because uh the death of powershell

84
00:02:58,080 --> 00:03:01,280
tradecraft so if you're

85
00:02:59,280 --> 00:03:02,800
from if you're not from the red teaming

86
00:03:01,280 --> 00:03:03,680
community or pen testing community not

87
00:03:02,800 --> 00:03:06,959
familiar with

88
00:03:03,680 --> 00:03:11,200
what's been going on lately um

89
00:03:06,959 --> 00:03:12,800
past six six years ago i'm gonna i'm

90
00:03:11,200 --> 00:03:14,958
probably messing that time frame out but

91
00:03:12,800 --> 00:03:16,720
the past six years or so uh the pen

92
00:03:14,959 --> 00:03:18,319
testing in red team community was mainly

93
00:03:16,720 --> 00:03:19,760
using powershell for basically

94
00:03:18,319 --> 00:03:22,879
everything related to

95
00:03:19,760 --> 00:03:24,959
testing okay so be it uh payloads be it

96
00:03:22,879 --> 00:03:25,920
um getting initial code execution on a

97
00:03:24,959 --> 00:03:28,640
machine

98
00:03:25,920 --> 00:03:30,319
uh just basically everything in a

99
00:03:28,640 --> 00:03:31,279
windows environment we use powershell

100
00:03:30,319 --> 00:03:33,359
for okay

101
00:03:31,280 --> 00:03:34,560
and uh some of the now spectre ops

102
00:03:33,360 --> 00:03:36,159
people

103
00:03:34,560 --> 00:03:38,879
created a powershell empire which

104
00:03:36,159 --> 00:03:41,120
essentially weaponized a lot of these

105
00:03:38,879 --> 00:03:41,920
uh powershell scripts that uh people

106
00:03:41,120 --> 00:03:43,760
were writing

107
00:03:41,920 --> 00:03:45,440
and put it tied it together into whole

108
00:03:43,760 --> 00:03:48,319
nice little framework for us okay

109
00:03:45,440 --> 00:03:49,040
and empire is basically just a c2

110
00:03:48,319 --> 00:03:51,040
platform

111
00:03:49,040 --> 00:03:52,640
that throws around powershell scripts so

112
00:03:51,040 --> 00:03:52,959
you run a little powershell script on

113
00:03:52,640 --> 00:03:55,599
the

114
00:03:52,959 --> 00:03:57,360
victim machine and it calls back to your

115
00:03:55,599 --> 00:03:59,760
c2 and then downloads more powershell

116
00:03:57,360 --> 00:04:01,519
scripts which are tasks

117
00:03:59,760 --> 00:04:03,920
so this is essentially how really

118
00:04:01,519 --> 00:04:05,760
quickly really quickly how powershell

119
00:04:03,920 --> 00:04:09,679
empire works okay so you run

120
00:04:05,760 --> 00:04:10,159
a a little tiny uh piece of powershell

121
00:04:09,680 --> 00:04:13,280
script

122
00:04:10,159 --> 00:04:14,079
on a victim endpoint right and that

123
00:04:13,280 --> 00:04:17,358
little script

124
00:04:14,080 --> 00:04:19,040
then calls back to your c2 uh server

125
00:04:17,358 --> 00:04:21,120
which will host power which will be

126
00:04:19,040 --> 00:04:24,240
powershell empire

127
00:04:21,120 --> 00:04:26,240
uh and then uh powershell empire uh when

128
00:04:24,240 --> 00:04:28,000
that uh when that agent keeps calling

129
00:04:26,240 --> 00:04:30,320
back powershell empire will just throw

130
00:04:28,000 --> 00:04:31,520
back a powershell script okay and that

131
00:04:30,320 --> 00:04:34,080
powershell script

132
00:04:31,520 --> 00:04:34,799
will be dynamically evaluated on the

133
00:04:34,080 --> 00:04:37,280
endpoint

134
00:04:34,800 --> 00:04:38,080
and then the results of that power

135
00:04:37,280 --> 00:04:40,400
system will

136
00:04:38,080 --> 00:04:42,080
send back to the c2 framework and that's

137
00:04:40,400 --> 00:04:43,120
basically how powershell empire works in

138
00:04:42,080 --> 00:04:45,120
a nutshell okay

139
00:04:43,120 --> 00:04:47,600
that's really ten thousand foot overview

140
00:04:45,120 --> 00:04:50,720
of how that works now

141
00:04:47,600 --> 00:04:54,720
um in terms of offensive tradecraft uh

142
00:04:50,720 --> 00:04:57,199
this was pretty amazing because

143
00:04:54,720 --> 00:04:57,840
scripting languages from a offensive

144
00:04:57,199 --> 00:05:01,120
standpoint

145
00:04:57,840 --> 00:05:02,880
allow you to be extremely flexible with

146
00:05:01,120 --> 00:05:05,280
your tradecraft okay

147
00:05:02,880 --> 00:05:06,880
uh they're dynamically evaluated which

148
00:05:05,280 --> 00:05:08,080
is the the main thing about scripting

149
00:05:06,880 --> 00:05:10,000
language is that they're dynamically

150
00:05:08,080 --> 00:05:12,560
evaluated and that brings so much

151
00:05:10,000 --> 00:05:13,919
uh flexibility in terms of uh tradecraft

152
00:05:12,560 --> 00:05:14,720
when it comes to red teaming and pen

153
00:05:13,919 --> 00:05:16,639
testing

154
00:05:14,720 --> 00:05:17,919
it's also installed by default and it

155
00:05:16,639 --> 00:05:19,680
allows for completely in memory

156
00:05:17,919 --> 00:05:21,520
execution which is fantastic so

157
00:05:19,680 --> 00:05:23,840
completely file us this sort of ushered

158
00:05:21,520 --> 00:05:26,880
in the era of fileless

159
00:05:23,840 --> 00:05:28,880
attacks and malware and

160
00:05:26,880 --> 00:05:30,240
it also had access to that net apis okay

161
00:05:28,880 --> 00:05:31,120
and this is a very fundamental thing to

162
00:05:30,240 --> 00:05:33,840
understand

163
00:05:31,120 --> 00:05:34,240
the the real power and powershell come

164
00:05:33,840 --> 00:05:37,359
from

165
00:05:34,240 --> 00:05:38,400
comes from accessing those.net apis okay

166
00:05:37,360 --> 00:05:39,759
so it's a

167
00:05:38,400 --> 00:05:41,039
net language and we'll talk about that

168
00:05:39,759 --> 00:05:41,919
in a second we'll talk about what that

169
00:05:41,039 --> 00:05:46,080
means in a second

170
00:05:41,919 --> 00:05:47,440
okay now um years went on and microsoft

171
00:05:46,080 --> 00:05:48,159
decided to finally do something about

172
00:05:47,440 --> 00:05:50,560
this

173
00:05:48,160 --> 00:05:51,199
so starting with out of this actually i

174
00:05:50,560 --> 00:05:52,639
think

175
00:05:51,199 --> 00:05:53,759
ah actually i don't recall top of my

176
00:05:52,639 --> 00:05:54,880
head but i think starting with

177
00:05:53,759 --> 00:05:56,960
powershell 4.0

178
00:05:54,880 --> 00:05:58,080
that might i might have typed with that

179
00:05:56,960 --> 00:05:59,840
i think i might have meant powershell

180
00:05:58,080 --> 00:06:01,680
5.0 but i think it was 4.0

181
00:05:59,840 --> 00:06:03,039
microsoft introduced a bunch of defenses

182
00:06:01,680 --> 00:06:06,240
into the powershell runtime

183
00:06:03,039 --> 00:06:09,520
in order to start combating or at least

184
00:06:06,240 --> 00:06:12,000
um or at least

185
00:06:09,520 --> 00:06:13,120
getting rid of the low hanging fruit uh

186
00:06:12,000 --> 00:06:14,880
or like

187
00:06:13,120 --> 00:06:16,639
get it sort of like trying to deny the

188
00:06:14,880 --> 00:06:18,639
lowest denominator attacker

189
00:06:16,639 --> 00:06:20,479
access to endpoints right and they did

190
00:06:18,639 --> 00:06:22,800
this by introducing amsi

191
00:06:20,479 --> 00:06:23,599
which is nothing but a signature based

192
00:06:22,800 --> 00:06:26,240
av

193
00:06:23,600 --> 00:06:27,120
engine inside the powershell runtime

194
00:06:26,240 --> 00:06:28,800
itself

195
00:06:27,120 --> 00:06:30,319
and the great thing about amzee though

196
00:06:28,800 --> 00:06:32,960
is it allows you to

197
00:06:30,319 --> 00:06:34,639
signature uh completely in-memory

198
00:06:32,960 --> 00:06:36,159
scripts okay so that's that's the that's

199
00:06:34,639 --> 00:06:38,479
the great thing about amazing

200
00:06:36,160 --> 00:06:41,120
uh there's also a script block module

201
00:06:38,479 --> 00:06:42,719
transcription logging so every

202
00:06:41,120 --> 00:06:44,880
powershell script that get executed in

203
00:06:42,720 --> 00:06:46,880
the powershell runtime gets logged

204
00:06:44,880 --> 00:06:48,159
to disk uh and then there's also

205
00:06:46,880 --> 00:06:50,319
constrained language mode

206
00:06:48,160 --> 00:06:51,599
which is essentially a way of limiting

207
00:06:50,319 --> 00:06:53,280
powershell's features

208
00:06:51,599 --> 00:06:55,360
okay so these are all the defenses that

209
00:06:53,280 --> 00:06:57,599
microsoft introduced

210
00:06:55,360 --> 00:06:59,440
so how did how did the red team and

211
00:06:57,599 --> 00:07:01,919
pentesting community respond well

212
00:06:59,440 --> 00:07:02,560
uh we started patching amsi so people

213
00:07:01,919 --> 00:07:04,080
just

214
00:07:02,560 --> 00:07:06,000
started discovering that hey we can

215
00:07:04,080 --> 00:07:09,198
actually patch this

216
00:07:06,000 --> 00:07:12,080
amzi feature out itself out

217
00:07:09,199 --> 00:07:13,360
of the powershell runtime dynamically

218
00:07:12,080 --> 00:07:16,318
and this is because

219
00:07:13,360 --> 00:07:18,720
of powershell being able to access

220
00:07:16,319 --> 00:07:20,560
those.net apis okay so you can just

221
00:07:18,720 --> 00:07:22,319
essentially run powershell code that

222
00:07:20,560 --> 00:07:24,240
patches out amsi within

223
00:07:22,319 --> 00:07:26,000
its runtime okay but then you have a

224
00:07:24,240 --> 00:07:27,360
problem because microsoft's starting

225
00:07:26,000 --> 00:07:29,759
introducing signatures

226
00:07:27,360 --> 00:07:31,599
of the mz patches so you have to bypass

227
00:07:29,759 --> 00:07:34,639
the mz patches in order to am

228
00:07:31,599 --> 00:07:36,159
to actually bypass amsi it was a big it

229
00:07:34,639 --> 00:07:39,199
was it was just a big problem

230
00:07:36,160 --> 00:07:40,479
uh but there's also obfuscation we can

231
00:07:39,199 --> 00:07:42,160
use obfuscation to get around

232
00:07:40,479 --> 00:07:42,560
signature-based detection that's that's

233
00:07:42,160 --> 00:07:45,120
you know

234
00:07:42,560 --> 00:07:45,919
that's school stuff that's pretty basic

235
00:07:45,120 --> 00:07:48,000
stuff and

236
00:07:45,919 --> 00:07:49,599
it can be effective office powershell

237
00:07:48,000 --> 00:07:50,639
obfuscation can be effective but it's

238
00:07:49,599 --> 00:07:53,199
operationally

239
00:07:50,639 --> 00:07:53,919
cumbersome um and it's not exactly

240
00:07:53,199 --> 00:07:56,960
something

241
00:07:53,919 --> 00:07:58,000
that it fits easily within uh pen

242
00:07:56,960 --> 00:08:00,080
testing and red teaming

243
00:07:58,000 --> 00:08:01,840
workflows there's also powershell

244
00:08:00,080 --> 00:08:03,520
version 2 and this is uh

245
00:08:01,840 --> 00:08:04,719
i find this everywhere by the way i

246
00:08:03,520 --> 00:08:06,719
still find powershell version 2

247
00:08:04,720 --> 00:08:08,479
everywhere which is absolutely amazing

248
00:08:06,720 --> 00:08:10,479
powershell version 2 doesn't have any of

249
00:08:08,479 --> 00:08:11,919
these defenses so if you find

250
00:08:10,479 --> 00:08:13,599
in an environment if you're doing a pen

251
00:08:11,919 --> 00:08:15,039
test and you find that

252
00:08:13,599 --> 00:08:17,360
there is powershell version two

253
00:08:15,039 --> 00:08:19,440
installed uh you can just run powershell

254
00:08:17,360 --> 00:08:22,080
version two and none of these defenses

255
00:08:19,440 --> 00:08:24,160
will be in place okay uh and you can

256
00:08:22,080 --> 00:08:25,359
start powershell two by just passing the

257
00:08:24,160 --> 00:08:27,280
dash v

258
00:08:25,360 --> 00:08:29,280
two argument to powershell and just

259
00:08:27,280 --> 00:08:31,359
start up the version two runtime okay

260
00:08:29,280 --> 00:08:32,478
so like if you use powershell version

261
00:08:31,360 --> 00:08:33,039
two you don't have to worry about any of

262
00:08:32,479 --> 00:08:34,560
this stuff

263
00:08:33,039 --> 00:08:36,559
and you can revert back to powershell

264
00:08:34,559 --> 00:08:39,119
tradecraft but

265
00:08:36,559 --> 00:08:40,880
uh sometimes environments don't have

266
00:08:39,120 --> 00:08:41,919
power to two installed so how did the

267
00:08:40,880 --> 00:08:43,679
red team

268
00:08:41,919 --> 00:08:46,319
uh community and the pentester community

269
00:08:43,679 --> 00:08:49,519
started started addressing this problem

270
00:08:46,320 --> 00:08:51,680
uh they moved to c sharp okay

271
00:08:49,519 --> 00:08:52,959
and uh the reason why they did that

272
00:08:51,680 --> 00:08:54,800
we'll talk about in a second but this

273
00:08:52,959 --> 00:08:57,518
was the great tooling migration of

274
00:08:54,800 --> 00:08:58,399
2017 and 2019. everything that was

275
00:08:57,519 --> 00:09:01,600
powerful

276
00:08:58,399 --> 00:09:02,480
then started moving to c sharp and the

277
00:09:01,600 --> 00:09:04,399
reason for that

278
00:09:02,480 --> 00:09:05,920
were the number of reasons uh if you

279
00:09:04,399 --> 00:09:08,880
knew powershell you already saw a new

280
00:09:05,920 --> 00:09:10,479
c-sharp if you had to do

281
00:09:08,880 --> 00:09:12,000
some of the lower level stuff in

282
00:09:10,480 --> 00:09:14,000
powershell you have to write seep sharp

283
00:09:12,000 --> 00:09:15,360
code

284
00:09:14,000 --> 00:09:17,760
it can do everything that powershell can

285
00:09:15,360 --> 00:09:19,760
do and even better and it actually was

286
00:09:17,760 --> 00:09:21,680
originally not subjected to any of the

287
00:09:19,760 --> 00:09:23,040
defenses in place for powershell and

288
00:09:21,680 --> 00:09:25,839
again we'll talk about this

289
00:09:23,040 --> 00:09:27,599
in a few minutes uh at least in terms of

290
00:09:25,839 --> 00:09:31,040
like why that that's the case

291
00:09:27,600 --> 00:09:33,920
eg amz and uh but this has changed

292
00:09:31,040 --> 00:09:34,560
as of net 4.8 so that 94.8 introduced

293
00:09:33,920 --> 00:09:36,479
amsi

294
00:09:34,560 --> 00:09:38,399
in the underlying dot net framework as

295
00:09:36,480 --> 00:09:41,680
opposed to just the powershell runtime

296
00:09:38,399 --> 00:09:43,200
so now you can signature off uh so now

297
00:09:41,680 --> 00:09:45,120
you can detect maliciously sharp

298
00:09:43,200 --> 00:09:46,560
binaries as well but

299
00:09:45,120 --> 00:09:49,279
again we'll we'll talk about that in a

300
00:09:46,560 --> 00:09:50,079
second okay so in response to that the

301
00:09:49,279 --> 00:09:53,600
spectre ops team

302
00:09:50,080 --> 00:09:55,279
yet again uh released a uh c2 framework

303
00:09:53,600 --> 00:09:57,760
in order to weaponize

304
00:09:55,279 --> 00:09:58,959
uh in order to make weaponizing c sharp

305
00:09:57,760 --> 00:10:00,880
a lot easier okay

306
00:09:58,959 --> 00:10:03,359
and this is basically the equivalent of

307
00:10:00,880 --> 00:10:04,880
powershell empire in c sharp covenant

308
00:10:03,360 --> 00:10:06,399
is essentially the equivalent of

309
00:10:04,880 --> 00:10:09,200
powershell empire and c-sharp

310
00:10:06,399 --> 00:10:10,880
and how does it work it works by

311
00:10:09,200 --> 00:10:14,640
executing

312
00:10:10,880 --> 00:10:16,560
some sort either a c-sharp binary or

313
00:10:14,640 --> 00:10:18,319
some sort of feature in windows that can

314
00:10:16,560 --> 00:10:20,079
execute c sharp code which

315
00:10:18,320 --> 00:10:22,959
incredibly enough there are a lot of

316
00:10:20,079 --> 00:10:25,839
those uh you get a call back

317
00:10:22,959 --> 00:10:27,518
and instead of uh power and as a

318
00:10:25,839 --> 00:10:30,640
difference between powershell and

319
00:10:27,519 --> 00:10:32,160
empire and covenant instead of just

320
00:10:30,640 --> 00:10:34,959
throwing down raw

321
00:10:32,160 --> 00:10:36,480
source code of a script it actually has

322
00:10:34,959 --> 00:10:39,760
to dynamically compile

323
00:10:36,480 --> 00:10:42,640
the c-sharp code on the fly server side

324
00:10:39,760 --> 00:10:44,720
and then send down to the endpoint a

325
00:10:42,640 --> 00:10:46,160
compiled c-sharp binary okay

326
00:10:44,720 --> 00:10:47,920
so this is one of the key differences

327
00:10:46,160 --> 00:10:50,480
between covenant and empire

328
00:10:47,920 --> 00:10:52,000
uh and we'll talk about why i find this

329
00:10:50,480 --> 00:10:53,519
a little bit weird well i find this a

330
00:10:52,000 --> 00:10:55,680
little bit um

331
00:10:53,519 --> 00:10:56,640
uh not convenient in a second and this

332
00:10:55,680 --> 00:10:59,599
is what led me to

333
00:10:56,640 --> 00:11:01,279
this research and then you and then the

334
00:10:59,600 --> 00:11:02,880
c sharp and then the task just sends

335
00:11:01,279 --> 00:11:04,160
back its result okay so

336
00:11:02,880 --> 00:11:06,160
this is one of the main differences

337
00:11:04,160 --> 00:11:06,800
between powershell empire and covenant

338
00:11:06,160 --> 00:11:09,199
is that

339
00:11:06,800 --> 00:11:11,040
it it's not source code anymore we're

340
00:11:09,200 --> 00:11:12,880
now sending down compiled binaries and

341
00:11:11,040 --> 00:11:15,120
we're now compiling stuff because again

342
00:11:12,880 --> 00:11:16,720
like c sharp is a compiled language

343
00:11:15,120 --> 00:11:18,320
and powershell is a scripting language

344
00:11:16,720 --> 00:11:19,519
so you have to compile it in order to do

345
00:11:18,320 --> 00:11:20,959
anything c sharp

346
00:11:19,519 --> 00:11:22,720
so you're probably wondering okay so

347
00:11:20,959 --> 00:11:25,920
what's the big deal

348
00:11:22,720 --> 00:11:29,200
well i really kind of love

349
00:11:25,920 --> 00:11:31,439
the the whole powershell test testing

350
00:11:29,200 --> 00:11:33,839
workflow okay so

351
00:11:31,440 --> 00:11:35,680
it's not as using c sharp really just

352
00:11:33,839 --> 00:11:37,839
isn't as flexible and easy

353
00:11:35,680 --> 00:11:40,479
as a dynamic scripting language because

354
00:11:37,839 --> 00:11:41,920
you have to deal with compilation

355
00:11:40,480 --> 00:11:43,680
and in order to actually do that

356
00:11:41,920 --> 00:11:44,160
compilation in the first place you

357
00:11:43,680 --> 00:11:47,120
actually

358
00:11:44,160 --> 00:11:48,880
there's a lot of overhead and uh in

359
00:11:47,120 --> 00:11:50,560
terms of code and in terms of setup

360
00:11:48,880 --> 00:11:51,200
needed in order to actually get to a

361
00:11:50,560 --> 00:11:54,638
point

362
00:11:51,200 --> 00:11:58,000
where you can easily uh weaponize

363
00:11:54,639 --> 00:12:00,320
and deploy c-sharp payloads

364
00:11:58,000 --> 00:12:02,720
okay and you can do this via a number of

365
00:12:00,320 --> 00:12:04,560
ways but ci cd pipelines boilerplate

366
00:12:02,720 --> 00:12:05,440
code etc like there's a there's a bunch

367
00:12:04,560 --> 00:12:06,719
of

368
00:12:05,440 --> 00:12:09,519
things that you can do in order to make

369
00:12:06,720 --> 00:12:10,000
this easier but it's not as simple as

370
00:12:09,519 --> 00:12:12,160
just

371
00:12:10,000 --> 00:12:13,040
throwing a powershell script down to an

372
00:12:12,160 --> 00:12:14,800
endpoint

373
00:12:13,040 --> 00:12:16,560
getting that dynamically evaluated on

374
00:12:14,800 --> 00:12:19,680
the endpoint itself and then receiving

375
00:12:16,560 --> 00:12:21,199
the task output okay that's that's the

376
00:12:19,680 --> 00:12:23,279
that's the main motivation behind this

377
00:12:21,200 --> 00:12:25,519
so i thought to myself okay

378
00:12:23,279 --> 00:12:26,560
can we go back to throwing source code

379
00:12:25,519 --> 00:12:28,800
around right

380
00:12:26,560 --> 00:12:29,920
i want i want to be able to go back to

381
00:12:28,800 --> 00:12:34,160
the good old days

382
00:12:29,920 --> 00:12:35,839
of using powershell i want to find a way

383
00:12:34,160 --> 00:12:37,199
of doing everything that i can do in

384
00:12:35,839 --> 00:12:39,040
powershell

385
00:12:37,200 --> 00:12:40,320
uh without going through powershell

386
00:12:39,040 --> 00:12:41,839
though because

387
00:12:40,320 --> 00:12:44,480
now that powershell has all of these

388
00:12:41,839 --> 00:12:47,440
defenses i can't really use powershell

389
00:12:44,480 --> 00:12:48,959
but is there a way somehow of doing the

390
00:12:47,440 --> 00:12:50,000
same thing i was able to do in

391
00:12:48,959 --> 00:12:51,920
powershell only

392
00:12:50,000 --> 00:12:53,519
without powershell and i know i'm saying

393
00:12:51,920 --> 00:12:55,040
powershell a lot but uh

394
00:12:53,519 --> 00:12:57,040
wait till i get to the net section and

395
00:12:55,040 --> 00:12:59,839
then i'm going to be saying.net a lot

396
00:12:57,040 --> 00:13:00,240
um so there really are only two options

397
00:12:59,839 --> 00:13:02,399
uh

398
00:13:00,240 --> 00:13:03,519
by default on windows when it comes to

399
00:13:02,399 --> 00:13:07,200
doing something like this there's

400
00:13:03,519 --> 00:13:09,519
jscript and vbscript and then there's

401
00:13:07,200 --> 00:13:10,800
sort of a couple others but they're not

402
00:13:09,519 --> 00:13:12,399
they're not as

403
00:13:10,800 --> 00:13:13,920
as good as jscript and vbscript so i'm

404
00:13:12,399 --> 00:13:15,200
just going to leave those out they're

405
00:13:13,920 --> 00:13:16,560
provided by default through the windows

406
00:13:15,200 --> 00:13:19,440
script host

407
00:13:16,560 --> 00:13:20,319
however again both are also subjected to

408
00:13:19,440 --> 00:13:23,279
amsi

409
00:13:20,320 --> 00:13:24,639
which is a problem you know in terms of

410
00:13:23,279 --> 00:13:25,600
an attacker like i don't want to deal

411
00:13:24,639 --> 00:13:26,959
with any of that i don't want to

412
00:13:25,600 --> 00:13:27,760
obfuscate stuff i don't want to do

413
00:13:26,959 --> 00:13:29,518
anything so

414
00:13:27,760 --> 00:13:31,040
i just want to get around amzee as much

415
00:13:29,519 --> 00:13:32,560
as possible and you

416
00:13:31,040 --> 00:13:34,480
you really can't do as much as

417
00:13:32,560 --> 00:13:37,518
powershell as c-sharp can

418
00:13:34,480 --> 00:13:40,560
in jscript or vbscript okay so that's

419
00:13:37,519 --> 00:13:42,399
sort of the that was sort of a

420
00:13:40,560 --> 00:13:44,479
a non-starter for me so that that

421
00:13:42,399 --> 00:13:46,240
already just made me not want to use

422
00:13:44,480 --> 00:13:46,800
jscript and vbscript because i really

423
00:13:46,240 --> 00:13:48,480
couldn't do

424
00:13:46,800 --> 00:13:50,240
everything that i could do in powershell

425
00:13:48,480 --> 00:13:53,040
okay

426
00:13:50,240 --> 00:13:53,519
so this is where dot net comes into play

427
00:13:53,040 --> 00:13:56,959
okay

428
00:13:53,519 --> 00:13:58,639
and we're gonna be talking a little bit

429
00:13:56,959 --> 00:14:00,638
about the.net language

430
00:13:58,639 --> 00:14:02,399
and my approach to solving this problem

431
00:14:00,639 --> 00:14:04,320
which is um

432
00:14:02,399 --> 00:14:05,760
trying to find the scripting language

433
00:14:04,320 --> 00:14:08,959
that allows me

434
00:14:05,760 --> 00:14:11,760
to um do all of the stuff that i could

435
00:14:08,959 --> 00:14:14,959
do in powershell only without powershell

436
00:14:11,760 --> 00:14:18,000
somehow right so this is my humble

437
00:14:14,959 --> 00:14:18,959
description of.what.net is we have to go

438
00:14:18,000 --> 00:14:20,720
over some

439
00:14:18,959 --> 00:14:22,239
key.net framework concepts in order to

440
00:14:20,720 --> 00:14:23,040
completely grasp what i'm about to talk

441
00:14:22,240 --> 00:14:25,600
about

442
00:14:23,040 --> 00:14:28,480
so this is my description of it because

443
00:14:25,600 --> 00:14:30,800
if you go to microsoft documentation

444
00:14:28,480 --> 00:14:32,880
it's not exactly clear what dot net is

445
00:14:30,800 --> 00:14:35,359
from their documentation okay and

446
00:14:32,880 --> 00:14:37,360
a lot of people tend to be confused to

447
00:14:35,360 --> 00:14:39,360
what actually.net is okay

448
00:14:37,360 --> 00:14:41,600
so my humble description of that net is

449
00:14:39,360 --> 00:14:44,000
it's a language independent

450
00:14:41,600 --> 00:14:45,519
development platform comprised of a set

451
00:14:44,000 --> 00:14:46,720
of tools infrastructure and libraries

452
00:14:45,519 --> 00:14:48,639
that enables you to create

453
00:14:46,720 --> 00:14:52,079
cross-platform applications

454
00:14:48,639 --> 00:14:56,000
okay now the key phrase of that sentence

455
00:14:52,079 --> 00:14:59,040
is a language independent platform okay

456
00:14:56,000 --> 00:15:01,120
dot net is not a language this is a main

457
00:14:59,040 --> 00:15:02,800
misconception that a lot of people have

458
00:15:01,120 --> 00:15:04,000
when people think of dot net they are

459
00:15:02,800 --> 00:15:05,680
they immediately think of c

460
00:15:04,000 --> 00:15:07,120
sharp they have good reason of doing

461
00:15:05,680 --> 00:15:09,839
that but c

462
00:15:07,120 --> 00:15:10,800
sharp isn't only that isn't that net and

463
00:15:09,839 --> 00:15:14,160
that net isn't c

464
00:15:10,800 --> 00:15:17,519
sharp that net is just a set of tools

465
00:15:14,160 --> 00:15:19,439
that allows you to build your own

466
00:15:17,519 --> 00:15:20,720
language programming language to

467
00:15:19,440 --> 00:15:23,920
interact with it

468
00:15:20,720 --> 00:15:26,560
okay let that sink in for a second so

469
00:15:23,920 --> 00:15:28,079
we're not it's just it's just a way of

470
00:15:26,560 --> 00:15:29,680
building it it provides microsoft

471
00:15:28,079 --> 00:15:31,599
provides you a way of building your own

472
00:15:29,680 --> 00:15:35,040
language in order to interact

473
00:15:31,600 --> 00:15:36,880
with net tools and infrastructure that

474
00:15:35,040 --> 00:15:38,160
allows you to build that allows you to

475
00:15:36,880 --> 00:15:41,839
interact with the windows operating

476
00:15:38,160 --> 00:15:41,839
system okay so it's language independent

477
00:15:42,000 --> 00:15:45,920
so this is where we get into that net

478
00:15:44,480 --> 00:15:47,759
languages because we talked about it

479
00:15:45,920 --> 00:15:50,399
being language dependent

480
00:15:47,759 --> 00:15:51,279
that means that there are a bunch of net

481
00:15:50,399 --> 00:15:54,399
languages

482
00:15:51,279 --> 00:15:56,399
these languages are built

483
00:15:54,399 --> 00:15:57,600
to interact with the.net framework some

484
00:15:56,399 --> 00:15:59,759
of these are

485
00:15:57,600 --> 00:16:00,639
uh developed and supported officially by

486
00:15:59,759 --> 00:16:02,480
microsoft

487
00:16:00,639 --> 00:16:04,160
and some of them are not they're

488
00:16:02,480 --> 00:16:05,440
third-party languages that

489
00:16:04,160 --> 00:16:07,519
other people have built so there's

490
00:16:05,440 --> 00:16:08,480
c-sharp there's powershell and there's f

491
00:16:07,519 --> 00:16:11,360
sharp there's also

492
00:16:08,480 --> 00:16:12,480
vbscript technically and jscript but

493
00:16:11,360 --> 00:16:15,199
these are the main

494
00:16:12,480 --> 00:16:17,680
these three are the main um official.net

495
00:16:15,199 --> 00:16:19,359
languages supported by microsoft okay

496
00:16:17,680 --> 00:16:21,599
you'll notice powershell is in there

497
00:16:19,360 --> 00:16:24,079
powershell is a net language

498
00:16:21,600 --> 00:16:24,639
okay c-sharp is a data language f sharp

499
00:16:24,079 --> 00:16:27,680
is a dot

500
00:16:24,639 --> 00:16:29,360
language on top of that there are other

501
00:16:27,680 --> 00:16:31,359
third-party languages that microsoft

502
00:16:29,360 --> 00:16:32,800
has no involvement in and the community

503
00:16:31,360 --> 00:16:34,480
has built on top of

504
00:16:32,800 --> 00:16:36,719
that.net framework so there's iron

505
00:16:34,480 --> 00:16:39,120
python iron python

506
00:16:36,720 --> 00:16:40,399
is nothing more than a python

507
00:16:39,120 --> 00:16:42,079
implementation

508
00:16:40,399 --> 00:16:43,519
on top of the dotnet framework okay so

509
00:16:42,079 --> 00:16:46,560
this is completely different

510
00:16:43,519 --> 00:16:47,440
from normal python it it looks the same

511
00:16:46,560 --> 00:16:49,518
but it's different

512
00:16:47,440 --> 00:16:50,800
okay because normal python is based off

513
00:16:49,519 --> 00:16:52,320
of c

514
00:16:50,800 --> 00:16:53,920
iron python is based on the net

515
00:16:52,320 --> 00:16:55,600
framework so two very completely

516
00:16:53,920 --> 00:16:56,479
different beasts once you examine the

517
00:16:55,600 --> 00:16:59,759
internals of

518
00:16:56,480 --> 00:17:00,959
each language there's also an uh boolean

519
00:16:59,759 --> 00:17:02,399
which i'm going to be talking about in a

520
00:17:00,959 --> 00:17:06,159
second which is amazing

521
00:17:02,399 --> 00:17:07,439
bulang is also a python inspired.net

522
00:17:06,160 --> 00:17:11,199
language

523
00:17:07,439 --> 00:17:14,160
there's also iron ruby so these are all

524
00:17:11,199 --> 00:17:15,919
third-party languages that can interact

525
00:17:14,160 --> 00:17:19,760
with the.net framework

526
00:17:15,919 --> 00:17:22,559
okay now um

527
00:17:19,760 --> 00:17:23,520
before i go any further one one

528
00:17:22,559 --> 00:17:25,760
consequence

529
00:17:23,520 --> 00:17:27,520
a con a very important consequence of

530
00:17:25,760 --> 00:17:29,440
all these languages being

531
00:17:27,520 --> 00:17:31,200
uh implemented on top of the same

532
00:17:29,440 --> 00:17:32,880
framework is that they're all

533
00:17:31,200 --> 00:17:35,200
interoperable with each other

534
00:17:32,880 --> 00:17:36,880
okay so what that means is that what you

535
00:17:35,200 --> 00:17:38,960
can do in powershell

536
00:17:36,880 --> 00:17:40,640
you can do an iron python what you can

537
00:17:38,960 --> 00:17:42,160
do in iron ruby you can do in c

538
00:17:40,640 --> 00:17:44,400
sharp what you can do in f sharp you can

539
00:17:42,160 --> 00:17:48,000
do in boolean and so on and so forth

540
00:17:44,400 --> 00:17:49,520
okay um this also means

541
00:17:48,000 --> 00:17:51,039
since they're all based on the same

542
00:17:49,520 --> 00:17:53,360
framework that

543
00:17:51,039 --> 00:17:55,280
you can embed them within one another

544
00:17:53,360 --> 00:17:58,159
and things will just work

545
00:17:55,280 --> 00:17:59,280
okay because the underlying objects and

546
00:17:58,160 --> 00:18:02,400
apis

547
00:17:59,280 --> 00:18:04,399
are all the same and net

548
00:18:02,400 --> 00:18:06,320
provides you with the ability of

549
00:18:04,400 --> 00:18:08,400
embedding languages within one another

550
00:18:06,320 --> 00:18:11,439
for specific purposes

551
00:18:08,400 --> 00:18:13,760
so you can totally just take c sharp

552
00:18:11,440 --> 00:18:15,440
and embed that within powershell okay

553
00:18:13,760 --> 00:18:16,559
you can take powershell and embed that

554
00:18:15,440 --> 00:18:18,320
in c sharp

555
00:18:16,559 --> 00:18:20,879
and you can take boolean and embed that

556
00:18:18,320 --> 00:18:23,120
in powershell c sharp within boolean and

557
00:18:20,880 --> 00:18:24,799
everything will just work

558
00:18:23,120 --> 00:18:26,399
it's just absolutely amazing the more

559
00:18:24,799 --> 00:18:27,600
you go into the net framework the more

560
00:18:26,400 --> 00:18:29,840
you realize it's

561
00:18:27,600 --> 00:18:31,199
very much a marvel of engineering it

562
00:18:29,840 --> 00:18:33,039
really is amazing

563
00:18:31,200 --> 00:18:34,480
um so that's one thing that you have to

564
00:18:33,039 --> 00:18:36,160
keep in mind

565
00:18:34,480 --> 00:18:38,400
we also need to talk about what a

566
00:18:36,160 --> 00:18:40,080
dot-net assembly is because

567
00:18:38,400 --> 00:18:42,160
this is also a crucial thing to

568
00:18:40,080 --> 00:18:45,678
understand so that net assembly

569
00:18:42,160 --> 00:18:48,400
is essentially anything from

570
00:18:45,679 --> 00:18:50,000
a a.net language you take a net language

571
00:18:48,400 --> 00:18:52,559
you compile it to something

572
00:18:50,000 --> 00:18:54,160
that's a dot-net assembly okay so you

573
00:18:52,559 --> 00:18:55,678
take c-sharp for example

574
00:18:54,160 --> 00:18:57,919
again this is just an example right you

575
00:18:55,679 --> 00:18:58,480
can you can compile powershell too by

576
00:18:57,919 --> 00:19:00,160
the way

577
00:18:58,480 --> 00:19:01,360
and you'll you could turn it into a

578
00:19:00,160 --> 00:19:03,039
dot-net assembly as well but i'm just

579
00:19:01,360 --> 00:19:05,039
making c-sharp an example here

580
00:19:03,039 --> 00:19:06,160
you turn c a c-sharp code into an

581
00:19:05,039 --> 00:19:09,280
executable

582
00:19:06,160 --> 00:19:11,600
that is a c-sharp assembly okay you turn

583
00:19:09,280 --> 00:19:13,039
c-sharp into a dll that's also a c-sharp

584
00:19:11,600 --> 00:19:16,320
assembly

585
00:19:13,039 --> 00:19:21,440
from that net's point of view uh then

586
00:19:16,320 --> 00:19:23,678
a a dot xe or a dot dll

587
00:19:21,440 --> 00:19:25,600
that's been compiled from a.net language

588
00:19:23,679 --> 00:19:27,280
is the same thing there is no difference

589
00:19:25,600 --> 00:19:28,000
from that net language's point of view

590
00:19:27,280 --> 00:19:30,080
okay

591
00:19:28,000 --> 00:19:31,600
it's also important distinction to make

592
00:19:30,080 --> 00:19:34,399
that

593
00:19:31,600 --> 00:19:34,719
those dot that dot exe and that that

594
00:19:34,400 --> 00:19:37,360
that

595
00:19:34,720 --> 00:19:38,160
dll that was compiled from a.net

596
00:19:37,360 --> 00:19:41,039
language

597
00:19:38,160 --> 00:19:42,400
in our example with c sharp are not the

598
00:19:41,039 --> 00:19:44,400
same as native

599
00:19:42,400 --> 00:19:46,880
executables and dlls on windows okay so

600
00:19:44,400 --> 00:19:49,039
the format is completely different so

601
00:19:46,880 --> 00:19:50,799
a you take c sharp you compile it to a

602
00:19:49,039 --> 00:19:53,280
dot executable

603
00:19:50,799 --> 00:19:54,160
to a dot exe that is not going to be the

604
00:19:53,280 --> 00:19:57,840
same format

605
00:19:54,160 --> 00:20:00,559
as a non-managed language executable so

606
00:19:57,840 --> 00:20:01,439
c c plus plus for example c plus is not

607
00:20:00,559 --> 00:20:04,158
a

608
00:20:01,440 --> 00:20:06,080
net language if you compile c plus plus

609
00:20:04,159 --> 00:20:08,159
it will not generate a.net assembly

610
00:20:06,080 --> 00:20:09,360
it'll generate a native executable and

611
00:20:08,159 --> 00:20:10,240
if you analyze the format it'll be

612
00:20:09,360 --> 00:20:11,760
completely different

613
00:20:10,240 --> 00:20:13,440
i'm not going to be talking about what

614
00:20:11,760 --> 00:20:14,158
the the differences between the format

615
00:20:13,440 --> 00:20:15,360
because

616
00:20:14,159 --> 00:20:17,919
that could be a whole different talk of

617
00:20:15,360 --> 00:20:20,559
its own moving on

618
00:20:17,919 --> 00:20:22,880
uh there's also a very very important

619
00:20:20,559 --> 00:20:25,120
part of the.net framework

620
00:20:22,880 --> 00:20:27,039
which is the fact that it's reflective

621
00:20:25,120 --> 00:20:30,639
in nature which this means is that

622
00:20:27,039 --> 00:20:34,000
you can take code

623
00:20:30,640 --> 00:20:36,240
and build upon it you can you can

624
00:20:34,000 --> 00:20:37,520
basically build code with code and

625
00:20:36,240 --> 00:20:37,919
there's a lot of other implications as

626
00:20:37,520 --> 00:20:39,200
well

627
00:20:37,919 --> 00:20:41,440
one of the other implications is that

628
00:20:39,200 --> 00:20:43,039
there's an amazing function in that net

629
00:20:41,440 --> 00:20:43,760
framework which is responsible for most

630
00:20:43,039 --> 00:20:45,520
of the

631
00:20:43,760 --> 00:20:47,919
c-sharp tradecraft and that net

632
00:20:45,520 --> 00:20:48,320
tradecraft which is assembly.load okay

633
00:20:47,919 --> 00:20:51,919
so

634
00:20:48,320 --> 00:20:52,399
assembly.load is a api within.net which

635
00:20:51,919 --> 00:20:55,520
allows

636
00:20:52,400 --> 00:20:56,240
which accepts a byte array okay and you

637
00:20:55,520 --> 00:20:59,840
can just

638
00:20:56,240 --> 00:21:01,760
give it a bite array of a net assembly

639
00:20:59,840 --> 00:21:02,879
and it'll automatically just load that

640
00:21:01,760 --> 00:21:04,720
within memory

641
00:21:02,880 --> 00:21:06,799
okay remember when we talked about

642
00:21:04,720 --> 00:21:10,559
what's a.net assembly two seconds ago

643
00:21:06,799 --> 00:21:13,120
that net assembly is any any executable

644
00:21:10,559 --> 00:21:13,678
generated that's been compiled from that

645
00:21:13,120 --> 00:21:15,600
language

646
00:21:13,679 --> 00:21:16,720
what this means is that you can take the

647
00:21:15,600 --> 00:21:19,439
bytes of that

648
00:21:16,720 --> 00:21:21,120
raw executable pass it to assembly.load

649
00:21:19,440 --> 00:21:22,640
and it'll automatically just load that

650
00:21:21,120 --> 00:21:24,320
within memory reflectively without

651
00:21:22,640 --> 00:21:26,480
leaving any traces on disks

652
00:21:24,320 --> 00:21:28,639
this is essentially the equivalent of

653
00:21:26,480 --> 00:21:31,840
reflective dll and pe injection

654
00:21:28,640 --> 00:21:33,760
built into a language okay so

655
00:21:31,840 --> 00:21:35,360
you let that sink in for a second if

656
00:21:33,760 --> 00:21:36,080
you're not familiar with that.net

657
00:21:35,360 --> 00:21:38,479
framework

658
00:21:36,080 --> 00:21:40,158
this might be a little bit hard to

659
00:21:38,480 --> 00:21:40,880
completely grasp but you can think of

660
00:21:40,159 --> 00:21:44,400
this

661
00:21:40,880 --> 00:21:45,039
as reflective dll and reflective pe

662
00:21:44,400 --> 00:21:48,159
injection

663
00:21:45,039 --> 00:21:50,240
built in to a language okay and you can

664
00:21:48,159 --> 00:21:52,480
imagine how powerful that is

665
00:21:50,240 --> 00:21:53,919
from a development standpoint but also

666
00:21:52,480 --> 00:21:58,000
from an attacker's standpoint

667
00:21:53,919 --> 00:22:00,960
okay so

668
00:21:58,000 --> 00:22:01,440
what this means essentially is that you

669
00:22:00,960 --> 00:22:04,559
can take

670
00:22:01,440 --> 00:22:07,200
any one of these languages compile them

671
00:22:04,559 --> 00:22:08,799
right to you can compile any one of

672
00:22:07,200 --> 00:22:09,440
these languages let's just get that out

673
00:22:08,799 --> 00:22:12,960
of the way

674
00:22:09,440 --> 00:22:16,080
and on top of that you can take

675
00:22:12,960 --> 00:22:17,120
that generated executable or dll and

676
00:22:16,080 --> 00:22:19,678
load it within

677
00:22:17,120 --> 00:22:20,320
any one any one of these other languages

678
00:22:19,679 --> 00:22:25,520
as well

679
00:22:20,320 --> 00:22:28,399
so if you took a boolang.executable.exe

680
00:22:25,520 --> 00:22:29,360
you can totally call assembly.load in

681
00:22:28,400 --> 00:22:31,679
powershell

682
00:22:29,360 --> 00:22:33,039
and load the boolang executable there

683
00:22:31,679 --> 00:22:35,840
okay

684
00:22:33,039 --> 00:22:37,200
and you can just keep on doing this over

685
00:22:35,840 --> 00:22:38,840
and over again with different other

686
00:22:37,200 --> 00:22:41,840
languages

687
00:22:38,840 --> 00:22:45,199
now this is

688
00:22:41,840 --> 00:22:47,439
the main that's sort of the main meat

689
00:22:45,200 --> 00:22:49,440
behind like what i've been researching

690
00:22:47,440 --> 00:22:52,480
what i'm what i'm talking about

691
00:22:49,440 --> 00:22:54,240
and this is exactly what i needed in

692
00:22:52,480 --> 00:22:58,240
terms of

693
00:22:54,240 --> 00:23:01,120
finding a way to dynamically

694
00:22:58,240 --> 00:23:02,159
to basically access that knight apis

695
00:23:01,120 --> 00:23:03,520
dynamically

696
00:23:02,159 --> 00:23:05,840
through a scripting language without

697
00:23:03,520 --> 00:23:09,360
going through powershell because

698
00:23:05,840 --> 00:23:12,720
while c sharp is a compiled language

699
00:23:09,360 --> 00:23:14,158
iron python boo and iron ruby are

700
00:23:12,720 --> 00:23:16,320
dynamic languages they're scripting

701
00:23:14,159 --> 00:23:18,080
languages and they can do

702
00:23:16,320 --> 00:23:20,480
whatever powershell can do because

703
00:23:18,080 --> 00:23:23,280
they're based on the same.net framework

704
00:23:20,480 --> 00:23:24,880
okay so what this means is that you can

705
00:23:23,280 --> 00:23:28,639
completely bypass

706
00:23:24,880 --> 00:23:31,360
to an extent to an extent all of the

707
00:23:28,640 --> 00:23:32,640
um modern defenses that microsoft has

708
00:23:31,360 --> 00:23:35,678
put in place

709
00:23:32,640 --> 00:23:38,400
into the powershell and net runtimes

710
00:23:35,679 --> 00:23:39,120
by simply switching to another.net

711
00:23:38,400 --> 00:23:42,400
language

712
00:23:39,120 --> 00:23:45,678
okay so um

713
00:23:42,400 --> 00:23:47,840
instead of running like a running

714
00:23:45,679 --> 00:23:48,880
reflect reflectively injecting mimikats

715
00:23:47,840 --> 00:23:50,720
through powershell

716
00:23:48,880 --> 00:23:52,000
you can reflectively inject mimikats

717
00:23:50,720 --> 00:23:55,600
through boo

718
00:23:52,000 --> 00:23:58,720
and almost 100 guaranteed

719
00:23:55,600 --> 00:23:59,199
it won't trigger as many alerts as it

720
00:23:58,720 --> 00:24:02,240
would

721
00:23:59,200 --> 00:24:03,679
with powershell okay and again one of

722
00:24:02,240 --> 00:24:05,120
the consequences of

723
00:24:03,679 --> 00:24:07,279
being all based on the same.net

724
00:24:05,120 --> 00:24:08,799
framework is that you can embed them

725
00:24:07,279 --> 00:24:10,960
within one another and that's exactly

726
00:24:08,799 --> 00:24:13,200
what i'm going to be doing so

727
00:24:10,960 --> 00:24:14,480
again like all of the defenses

728
00:24:13,200 --> 00:24:15,120
originally were in the powershell

729
00:24:14,480 --> 00:24:16,720
runtime

730
00:24:15,120 --> 00:24:18,239
they were introduced into the.net

731
00:24:16,720 --> 00:24:22,480
framework but i can just

732
00:24:18,240 --> 00:24:25,600
jump to another.net language in order to

733
00:24:22,480 --> 00:24:29,200
bypass some if not all of those defenses

734
00:24:25,600 --> 00:24:30,399
okay so incredibly enough

735
00:24:29,200 --> 00:24:31,679
i'm going to be talking about how to

736
00:24:30,400 --> 00:24:32,240
actually go about embedding these

737
00:24:31,679 --> 00:24:35,360
languages

738
00:24:32,240 --> 00:24:37,279
and actually do that okay so uh

739
00:24:35,360 --> 00:24:39,039
incredibly enough if you've been pen

740
00:24:37,279 --> 00:24:42,080
testing or dealing with

741
00:24:39,039 --> 00:24:42,799
um red teaming or pentest tradecraft

742
00:24:42,080 --> 00:24:45,600
recently

743
00:24:42,799 --> 00:24:46,000
in any recent number of years you've

744
00:24:45,600 --> 00:24:47,760
probably

745
00:24:46,000 --> 00:24:49,360
done this a number of times without even

746
00:24:47,760 --> 00:24:52,400
knowing it uh

747
00:24:49,360 --> 00:24:54,799
there are a number of projects out there

748
00:24:52,400 --> 00:24:56,960
that take c-sharp code and embed it with

749
00:24:54,799 --> 00:24:58,879
pow embed it within powershell

750
00:24:56,960 --> 00:25:00,000
and the right and vice versa so they

751
00:24:58,880 --> 00:25:01,520
take powershell

752
00:25:00,000 --> 00:25:03,200
embedded in c sharp for a number of

753
00:25:01,520 --> 00:25:04,240
reasons there is a there's a product

754
00:25:03,200 --> 00:25:07,440
called powerline

755
00:25:04,240 --> 00:25:11,039
which essentially allows you to uh

756
00:25:07,440 --> 00:25:14,480
take c-sharp code right and uh

757
00:25:11,039 --> 00:25:17,039
sorry it essentially allows you to embed

758
00:25:14,480 --> 00:25:17,919
the powershell runtime within c sharp in

759
00:25:17,039 --> 00:25:21,400
order to

760
00:25:17,919 --> 00:25:22,799
run powershell code without calling

761
00:25:21,400 --> 00:25:25,600
powershell.exe

762
00:25:22,799 --> 00:25:28,240
okay so you can run powershell without

763
00:25:25,600 --> 00:25:30,158
the actual powershell.exe executable

764
00:25:28,240 --> 00:25:31,760
because again they're all based on the

765
00:25:30,159 --> 00:25:34,240
same.net framework

766
00:25:31,760 --> 00:25:34,879
you can embed these languages within one

767
00:25:34,240 --> 00:25:36,159
another

768
00:25:34,880 --> 00:25:37,679
and all of them will just work so there

769
00:25:36,159 --> 00:25:39,200
are a lot of projects that have been

770
00:25:37,679 --> 00:25:42,480
doing this already

771
00:25:39,200 --> 00:25:46,159
the only new thing that i've done

772
00:25:42,480 --> 00:25:48,320
is used non-default microsoft.net

773
00:25:46,159 --> 00:25:51,520
languages like boolean and iron python

774
00:25:48,320 --> 00:25:52,879
okay and there's also the reverse right

775
00:25:51,520 --> 00:25:53,600
you can take c sharp code embedded in

776
00:25:52,880 --> 00:25:55,039
powershell

777
00:25:53,600 --> 00:25:57,039
and some of these projects you have to

778
00:25:55,039 --> 00:25:58,879
do that in order to do

779
00:25:57,039 --> 00:26:00,640
certain low-level things so one of the

780
00:25:58,880 --> 00:26:03,840
first languages i experimented with

781
00:26:00,640 --> 00:26:07,840
is iron python and iron python um

782
00:26:03,840 --> 00:26:10,879
allows you to it's basically python

783
00:26:07,840 --> 00:26:14,240
based on.net right so

784
00:26:10,880 --> 00:26:18,320
uh it was amazing but the problem was

785
00:26:14,240 --> 00:26:20,720
uh you cannot call native methods

786
00:26:18,320 --> 00:26:21,840
uh with iron python because of a number

787
00:26:20,720 --> 00:26:26,240
of bucks okay

788
00:26:21,840 --> 00:26:29,279
so there is a specific uh

789
00:26:26,240 --> 00:26:31,440
part of the of any net language that

790
00:26:29,279 --> 00:26:35,520
allows you to essentially call

791
00:26:31,440 --> 00:26:37,120
uh native win32 apis okay and the reason

792
00:26:35,520 --> 00:26:38,240
why we want to do that as pen testers

793
00:26:37,120 --> 00:26:40,158
and red teamers

794
00:26:38,240 --> 00:26:41,520
is because those knit those low level

795
00:26:40,159 --> 00:26:43,279
132 apis

796
00:26:41,520 --> 00:26:44,879
allow you to do all the good stuff that

797
00:26:43,279 --> 00:26:48,720
we want usually like

798
00:26:44,880 --> 00:26:52,640
inject shell code uh interact with

799
00:26:48,720 --> 00:26:54,559
like network rpc windows stuff like

800
00:26:52,640 --> 00:26:57,360
all the good stuff resides in those

801
00:26:54,559 --> 00:26:59,840
native rpc calls okay

802
00:26:57,360 --> 00:27:01,199
that net a lot provides a way to

803
00:26:59,840 --> 00:27:04,879
interact with those

804
00:27:01,200 --> 00:27:07,520
native rpc native calls using a specific

805
00:27:04,880 --> 00:27:09,919
uh piece of code for lack of a better

806
00:27:07,520 --> 00:27:12,158
way of explaining it right now

807
00:27:09,919 --> 00:27:13,200
that's called dll import so this dll

808
00:27:12,159 --> 00:27:15,840
import attribute

809
00:27:13,200 --> 00:27:17,600
allows you to basically interact with

810
00:27:15,840 --> 00:27:20,720
unmanaged languages such as c

811
00:27:17,600 --> 00:27:24,158
plus plus or other languages like that

812
00:27:20,720 --> 00:27:25,520
okay so this is one of the first

813
00:27:24,159 --> 00:27:26,640
languages i experimented with

814
00:27:25,520 --> 00:27:28,080
unfortunately like

815
00:27:26,640 --> 00:27:30,240
it doesn't have that feature it was

816
00:27:28,080 --> 00:27:31,840
broken uh but i

817
00:27:30,240 --> 00:27:33,360
played with it anyway it was one of the

818
00:27:31,840 --> 00:27:34,879
first ways i started actually

819
00:27:33,360 --> 00:27:36,320
learning.net

820
00:27:34,880 --> 00:27:38,000
and all of the all of the and i'm going

821
00:27:36,320 --> 00:27:39,439
to be doing some demos in a second but

822
00:27:38,000 --> 00:27:40,640
all of the code snippets

823
00:27:39,440 --> 00:27:42,399
and all of this stuff that i'm going to

824
00:27:40,640 --> 00:27:43,520
be showing you is publicly available

825
00:27:42,399 --> 00:27:45,760
it's at this link

826
00:27:43,520 --> 00:27:48,000
that is on the slide right now at the

827
00:27:45,760 --> 00:27:51,200
offensive dlr repo

828
00:27:48,000 --> 00:27:52,120
you can in that repo you can find two

829
00:27:51,200 --> 00:27:55,679
files

830
00:27:52,120 --> 00:27:57,678
sharpsnake.cs and invokeironpython.ps1

831
00:27:55,679 --> 00:27:58,880
which embed the iron python runtime

832
00:27:57,679 --> 00:28:02,640
within a c-sharp

833
00:27:58,880 --> 00:28:04,000
and powershell file respectively

834
00:28:02,640 --> 00:28:05,520
another important thing to note and

835
00:28:04,000 --> 00:28:07,760
again i'm sort of blowing through this

836
00:28:05,520 --> 00:28:11,039
because there's a lot to talk about here

837
00:28:07,760 --> 00:28:12,720
is that arm python requires four dlls

838
00:28:11,039 --> 00:28:14,080
that are not present on windows by

839
00:28:12,720 --> 00:28:17,600
default in order to actually

840
00:28:14,080 --> 00:28:20,799
spin up its uh interpreter

841
00:28:17,600 --> 00:28:22,320
uh but because of net

842
00:28:20,799 --> 00:28:24,639
and because of that assembly that load

843
00:28:22,320 --> 00:28:26,480
function and be set and because

844
00:28:24,640 --> 00:28:28,480
you can just basically take you can

845
00:28:26,480 --> 00:28:29,840
essentially take these four dlls embed

846
00:28:28,480 --> 00:28:32,080
them within the powershell script

847
00:28:29,840 --> 00:28:33,360
itself and then load them at runtime in

848
00:28:32,080 --> 00:28:35,520
order to actually start

849
00:28:33,360 --> 00:28:37,039
iron python okay so you can completely

850
00:28:35,520 --> 00:28:39,120
do this all filelessly

851
00:28:37,039 --> 00:28:40,480
without actually needing those four dlls

852
00:28:39,120 --> 00:28:44,479
installed on the machine

853
00:28:40,480 --> 00:28:46,240
okay so i'm going to just skip directly

854
00:28:44,480 --> 00:28:47,600
to boolean because boolang is the best

855
00:28:46,240 --> 00:28:48,799
okay so if you haven't heard of bulang

856
00:28:47,600 --> 00:28:51,600
bulang is amazing

857
00:28:48,799 --> 00:28:52,399
everyone should be using it uh you know

858
00:28:51,600 --> 00:28:53,600
i guess

859
00:28:52,399 --> 00:28:55,360
yeah probably yeah everyone should be

860
00:28:53,600 --> 00:28:57,279
using it sure let's go with that uh

861
00:28:55,360 --> 00:29:00,000
bulang was originally

862
00:28:57,279 --> 00:29:01,679
um built for the unity gaming engine i

863
00:29:00,000 --> 00:29:03,840
found this out only at defcon i

864
00:29:01,679 --> 00:29:04,960
i had no clue what it was originally for

865
00:29:03,840 --> 00:29:06,720
when i started using it

866
00:29:04,960 --> 00:29:08,000
i only found out i was using it for

867
00:29:06,720 --> 00:29:08,480
malware that's the only thing i was

868
00:29:08,000 --> 00:29:10,960
using it

869
00:29:08,480 --> 00:29:12,640
however it was apparently built for the

870
00:29:10,960 --> 00:29:13,840
unity gaming engine i didn't know that i

871
00:29:12,640 --> 00:29:16,559
found that out of defcon last

872
00:29:13,840 --> 00:29:18,639
a couple years ago and it's basically a

873
00:29:16,559 --> 00:29:21,440
love trial between python and c sharp

874
00:29:18,640 --> 00:29:22,880
okay and it has it's very it's very much

875
00:29:21,440 --> 00:29:25,520
inspired by python but it has some

876
00:29:22,880 --> 00:29:27,120
c-sharp stuff thrown in there as well

877
00:29:25,520 --> 00:29:28,960
but the great thing about boolean is

878
00:29:27,120 --> 00:29:29,840
that you can call native functions so it

879
00:29:28,960 --> 00:29:31,919
has

880
00:29:29,840 --> 00:29:34,959
this dll import attribute that allows

881
00:29:31,919 --> 00:29:37,520
you to call those low level functions

882
00:29:34,960 --> 00:29:38,640
and what you see on the screen here is a

883
00:29:37,520 --> 00:29:41,200
6

884
00:29:38,640 --> 00:29:41,760
what no sorry it's a 16 line boo lang

885
00:29:41,200 --> 00:29:44,159
script

886
00:29:41,760 --> 00:29:44,799
okay so this is boolang that allows you

887
00:29:44,159 --> 00:29:47,440
to

888
00:29:44,799 --> 00:29:49,279
do a memory dump of a process okay so

889
00:29:47,440 --> 00:29:50,960
we're basically invoking the mini dump

890
00:29:49,279 --> 00:29:53,360
write dump api

891
00:29:50,960 --> 00:29:54,320
uh through boolang and allows you to

892
00:29:53,360 --> 00:29:56,959
dump

893
00:29:54,320 --> 00:29:58,960
uh the in this case lsas right but you

894
00:29:56,960 --> 00:30:00,720
can do any process i guess but lsas is

895
00:29:58,960 --> 00:30:03,440
by far the most interesting one on

896
00:30:00,720 --> 00:30:03,919
on windows you can essentially dump the

897
00:30:03,440 --> 00:30:07,279
uh

898
00:30:03,919 --> 00:30:07,600
memory of a process uh to disk okay so

899
00:30:07,279 --> 00:30:09,520
this

900
00:30:07,600 --> 00:30:11,678
in 16 lines like we've accomplished

901
00:30:09,520 --> 00:30:12,720
something that uh previously we could

902
00:30:11,679 --> 00:30:15,279
only do

903
00:30:12,720 --> 00:30:15,919
in powershell or c-sharp but with

904
00:30:15,279 --> 00:30:19,520
boolean

905
00:30:15,919 --> 00:30:21,440
we're we're sort of not subjective to

906
00:30:19,520 --> 00:30:22,720
all of those defenses that are in place

907
00:30:21,440 --> 00:30:26,799
in those two run times

908
00:30:22,720 --> 00:30:28,640
okay and i'm going to be demoing a few

909
00:30:26,799 --> 00:30:30,399
examples of bulang in a second so

910
00:30:28,640 --> 00:30:31,039
everyone start this is a live demo so

911
00:30:30,399 --> 00:30:33,678
everyone start

912
00:30:31,039 --> 00:30:35,440
praying to the demogods right now but

913
00:30:33,679 --> 00:30:37,840
i'm going to be showing you

914
00:30:35,440 --> 00:30:39,039
invoke jump scare which is gonna do some

915
00:30:37,840 --> 00:30:40,959
shell code injection

916
00:30:39,039 --> 00:30:42,720
with boolean it's gonna be a bulang

917
00:30:40,960 --> 00:30:44,559
interpreter embedded within a powershell

918
00:30:42,720 --> 00:30:45,360
script that's gonna be executing that

919
00:30:44,559 --> 00:30:48,480
shell code

920
00:30:45,360 --> 00:30:50,080
okay uh

921
00:30:48,480 --> 00:30:51,120
and but again like all of these code

922
00:30:50,080 --> 00:30:52,399
snippets are available on that

923
00:30:51,120 --> 00:30:53,520
repository so if you want to follow

924
00:30:52,399 --> 00:30:55,520
along and

925
00:30:53,520 --> 00:30:57,519
and hopefully the font is big enough but

926
00:30:55,520 --> 00:30:58,720
uh i'll make it very large so everyone

927
00:30:57,519 --> 00:31:01,200
can hopefully see

928
00:30:58,720 --> 00:31:01,840
um but it requires it also important to

929
00:31:01,200 --> 00:31:03,360
know that boo

930
00:31:01,840 --> 00:31:05,439
boo lang also requires three dot net

931
00:31:03,360 --> 00:31:07,279
assemblies to run however you can

932
00:31:05,440 --> 00:31:08,880
again take care of that with some net

933
00:31:07,279 --> 00:31:10,480
magic and assembly that load so it's

934
00:31:08,880 --> 00:31:12,880
fine

935
00:31:10,480 --> 00:31:14,320
um and i'm just gonna i'm gonna do that

936
00:31:12,880 --> 00:31:16,320
right now so

937
00:31:14,320 --> 00:31:17,519
here goes nothing this is gonna be uh

938
00:31:16,320 --> 00:31:20,080
this is gonna be interesting so i'm

939
00:31:17,519 --> 00:31:25,600
gonna stop presenting that window

940
00:31:20,080 --> 00:31:28,960
and then i'm going to present

941
00:31:25,600 --> 00:31:28,959
uh windows 10

942
00:31:29,039 --> 00:31:34,080
which hopefully did not update no i do

943
00:31:32,320 --> 00:31:36,799
not want to update there you go see

944
00:31:34,080 --> 00:31:37,918
that's that i knew it i knew it i knew

945
00:31:36,799 --> 00:31:41,279
it it was in my bones

946
00:31:37,919 --> 00:31:43,039
okay so uh this is the boulang

947
00:31:41,279 --> 00:31:44,320
shell code injection script but before i

948
00:31:43,039 --> 00:31:47,519
get to that

949
00:31:44,320 --> 00:31:50,080
uh let me just pull up

950
00:31:47,519 --> 00:31:51,200
the powershell script here okay so i'm

951
00:31:50,080 --> 00:31:54,080
using powershell

952
00:31:51,200 --> 00:31:55,279
but again it's not advisable to use

953
00:31:54,080 --> 00:31:56,559
powershell the only reason why i'm using

954
00:31:55,279 --> 00:31:58,640
powershell is because

955
00:31:56,559 --> 00:31:59,840
everyone's i feel like powershell is

956
00:31:58,640 --> 00:32:01,360
definitely something that

957
00:31:59,840 --> 00:32:02,879
everyone is a little bit familiar with

958
00:32:01,360 --> 00:32:04,719
as opposed to c sharp

959
00:32:02,880 --> 00:32:06,559
but again like you can totally embed

960
00:32:04,720 --> 00:32:08,880
boolean within c sharp and there is an

961
00:32:06,559 --> 00:32:11,039
example of that on the repository

962
00:32:08,880 --> 00:32:13,039
um on the offensive dlr repository

963
00:32:11,039 --> 00:32:14,320
that's linked in the slides okay

964
00:32:13,039 --> 00:32:16,640
but this is an example of embedding

965
00:32:14,320 --> 00:32:19,519
boolean within c sharp okay so

966
00:32:16,640 --> 00:32:20,880
this is just a uh really simple

967
00:32:19,519 --> 00:32:23,440
powershell script

968
00:32:20,880 --> 00:32:24,880
that takes the three and you know what

969
00:32:23,440 --> 00:32:28,320
i'm gonna make this

970
00:32:24,880 --> 00:32:28,720
larger there you go hopefully that's big

971
00:32:28,320 --> 00:32:32,080
enough

972
00:32:28,720 --> 00:32:33,039
i made it super big um that takes the

973
00:32:32,080 --> 00:32:35,678
these are the three

974
00:32:33,039 --> 00:32:37,039
boulang dlls needed to actually spin up

975
00:32:35,679 --> 00:32:39,919
the boulang

976
00:32:37,039 --> 00:32:41,519
interpreter right this is just some

977
00:32:39,919 --> 00:32:43,600
shell code that i generated from

978
00:32:41,519 --> 00:32:46,559
msfvenom that will pop calc

979
00:32:43,600 --> 00:32:47,760
okay and that will be passed to the

980
00:32:46,559 --> 00:32:50,480
boulang script

981
00:32:47,760 --> 00:32:51,440
which will be dynamically compiled on

982
00:32:50,480 --> 00:32:54,000
the fly

983
00:32:51,440 --> 00:32:54,960
and executed okay so this is the load

984
00:32:54,000 --> 00:32:55,919
assembly here

985
00:32:54,960 --> 00:32:57,120
we're actually remember that load

986
00:32:55,919 --> 00:32:59,120
assembly function that we talked about

987
00:32:57,120 --> 00:33:00,158
this is actually going to go out and

988
00:32:59,120 --> 00:33:03,279
load those two

989
00:33:00,159 --> 00:33:04,640
those three dlls uh in order for boolang

990
00:33:03,279 --> 00:33:07,279
to start

991
00:33:04,640 --> 00:33:08,720
and we're then just going to call some

992
00:33:07,279 --> 00:33:11,200
um

993
00:33:08,720 --> 00:33:13,200
some bulang compiler apis in order to

994
00:33:11,200 --> 00:33:16,799
actually compile the boolean script

995
00:33:13,200 --> 00:33:20,320
okay and the boolean script is

996
00:33:16,799 --> 00:33:22,240
um on disk but

997
00:33:20,320 --> 00:33:23,600
like if you wanted to very completely

998
00:33:22,240 --> 00:33:27,120
weaponize this you would

999
00:33:23,600 --> 00:33:27,360
make an http request to a remote server

1000
00:33:27,120 --> 00:33:30,399
and

1001
00:33:27,360 --> 00:33:33,039
download it remotely okay this is a

1002
00:33:30,399 --> 00:33:33,760
which is exactly what the original idea

1003
00:33:33,039 --> 00:33:36,480
of this was

1004
00:33:33,760 --> 00:33:37,919
find a replacement for powershell that's

1005
00:33:36,480 --> 00:33:38,960
essentially what this was so again we're

1006
00:33:37,919 --> 00:33:42,399
going back

1007
00:33:38,960 --> 00:33:44,640
to using source code as

1008
00:33:42,399 --> 00:33:45,918
a way of conducting post exploitation as

1009
00:33:44,640 --> 00:33:47,679
opposed to binaries

1010
00:33:45,919 --> 00:33:49,200
okay and this is the boolean script that

1011
00:33:47,679 --> 00:33:51,760
we're going to be executing so this is

1012
00:33:49,200 --> 00:33:53,200
again always on the offensive dlr repo

1013
00:33:51,760 --> 00:33:56,320
these these are just the

1014
00:33:53,200 --> 00:33:58,559
some dll imports in order to actually in

1015
00:33:56,320 --> 00:33:59,439
call all the necessary functions in

1016
00:33:58,559 --> 00:34:02,080
order to

1017
00:33:59,440 --> 00:34:03,600
inject show code and i ported over three

1018
00:34:02,080 --> 00:34:04,720
shell code injection techniques so

1019
00:34:03,600 --> 00:34:06,879
there's the inject

1020
00:34:04,720 --> 00:34:07,919
create remote thread method the standard

1021
00:34:06,880 --> 00:34:09,679
classic one

1022
00:34:07,919 --> 00:34:11,440
there's wait for single object method

1023
00:34:09,679 --> 00:34:13,839
and then there's a somewhat

1024
00:34:11,440 --> 00:34:14,560
a little esoteric but pretty well known

1025
00:34:13,839 --> 00:34:17,918
by now

1026
00:34:14,560 --> 00:34:19,279
cue user apc method uh so this is this

1027
00:34:17,918 --> 00:34:20,480
is what we're actually going to be

1028
00:34:19,280 --> 00:34:22,800
executing

1029
00:34:20,480 --> 00:34:24,240
within the embedded boolean compiler

1030
00:34:22,800 --> 00:34:28,079
within the powershell script

1031
00:34:24,239 --> 00:34:34,479
okay so uh

1032
00:34:28,079 --> 00:34:39,200
i am now going to run this

1033
00:34:34,480 --> 00:34:39,199
so i got my invoke jump scare

1034
00:34:42,480 --> 00:34:45,520
oh no it helps if i spell let's try that

1035
00:34:44,960 --> 00:34:49,040
yeah

1036
00:34:45,520 --> 00:34:51,520
invoke oh my god one second

1037
00:34:49,040 --> 00:34:53,279
it is i just want to point out it is uh

1038
00:34:51,520 --> 00:34:54,800
4 30 in the morning here so

1039
00:34:53,280 --> 00:34:56,399
like my brain's still waking up i

1040
00:34:54,800 --> 00:34:59,760
apologize uh

1041
00:34:56,399 --> 00:34:59,759
jump scare perfect

1042
00:35:01,040 --> 00:35:08,560
boo okay and we have calc

1043
00:35:04,880 --> 00:35:11,680
okay so what this did again just a

1044
00:35:08,560 --> 00:35:15,440
recap uh we've essentially

1045
00:35:11,680 --> 00:35:19,118
found a way of dynamically

1046
00:35:15,440 --> 00:35:21,599
executing code without

1047
00:35:19,119 --> 00:35:22,800
using powershell so it's a completely

1048
00:35:21,599 --> 00:35:26,079
different language

1049
00:35:22,800 --> 00:35:27,040
and it bypass and it sort of removes the

1050
00:35:26,079 --> 00:35:31,760
need

1051
00:35:27,040 --> 00:35:33,599
of obfuscating powershell scripts

1052
00:35:31,760 --> 00:35:35,440
because you can now just write all of

1053
00:35:33,599 --> 00:35:37,520
your post exploitation in boolang and

1054
00:35:35,440 --> 00:35:39,280
embed that within any dotnet language

1055
00:35:37,520 --> 00:35:41,759
in order to actually conduct

1056
00:35:39,280 --> 00:35:44,240
post-exploitation okay

1057
00:35:41,760 --> 00:35:45,040
and again to fully weaponize this like

1058
00:35:44,240 --> 00:35:46,959
this is

1059
00:35:45,040 --> 00:35:49,440
a really dumb way of doing things but to

1060
00:35:46,960 --> 00:35:52,880
fully weaponize this you would grab

1061
00:35:49,440 --> 00:35:56,240
this boolean script

1062
00:35:52,880 --> 00:35:59,040
from a remote server right

1063
00:35:56,240 --> 00:36:00,399
and via http or whatever c2 column you

1064
00:35:59,040 --> 00:36:02,240
prefer

1065
00:36:00,400 --> 00:36:03,920
and actually execute this dynamically

1066
00:36:02,240 --> 00:36:04,879
which is exactly what silent trinity

1067
00:36:03,920 --> 00:36:07,119
does which is the

1068
00:36:04,880 --> 00:36:08,240
project that i uh made in order to

1069
00:36:07,119 --> 00:36:12,720
actually

1070
00:36:08,240 --> 00:36:15,759
tie these things all together okay um

1071
00:36:12,720 --> 00:36:16,399
just one more thing before i go on that

1072
00:36:15,760 --> 00:36:19,280
was a

1073
00:36:16,400 --> 00:36:21,119
really complicated that was sort of a it

1074
00:36:19,280 --> 00:36:22,880
wasn't exactly probably the best way of

1075
00:36:21,119 --> 00:36:27,200
introducing this concept to you

1076
00:36:22,880 --> 00:36:30,640
so uh because of that i did write

1077
00:36:27,200 --> 00:36:33,439
another ver another uh boolang

1078
00:36:30,640 --> 00:36:34,078
powershell script uh that's a little bit

1079
00:36:33,440 --> 00:36:37,200
easier

1080
00:36:34,079 --> 00:36:39,520
to understand this is so and this really

1081
00:36:37,200 --> 00:36:43,118
gives you hopefully gives you an idea

1082
00:36:39,520 --> 00:36:43,839
of uh sort of the the power that this

1083
00:36:43,119 --> 00:36:47,359
gives you

1084
00:36:43,839 --> 00:36:48,720
um i what this does is it actually

1085
00:36:47,359 --> 00:36:50,480
dynamically compute this so this is

1086
00:36:48,720 --> 00:36:51,919
bulang source code within the powershell

1087
00:36:50,480 --> 00:36:54,240
script there is boo

1088
00:36:51,920 --> 00:36:55,599
source right so this is boolean source

1089
00:36:54,240 --> 00:36:58,000
code within the powershell script

1090
00:36:55,599 --> 00:36:59,200
that'll get dynamically compiled and

1091
00:36:58,000 --> 00:37:02,640
executed

1092
00:36:59,200 --> 00:37:06,839
when i run this right so if i

1093
00:37:02,640 --> 00:37:09,839
do this

1094
00:37:06,839 --> 00:37:12,720
invoke boolean

1095
00:37:09,839 --> 00:37:13,520
so hello from bulan okay so this is the

1096
00:37:12,720 --> 00:37:17,919
output

1097
00:37:13,520 --> 00:37:21,200
right here of this

1098
00:37:17,920 --> 00:37:24,960
so we've basically found the way

1099
00:37:21,200 --> 00:37:27,598
of dynamically executing

1100
00:37:24,960 --> 00:37:29,119
code that allows you to do everything

1101
00:37:27,599 --> 00:37:31,520
that powershell does

1102
00:37:29,119 --> 00:37:32,560
only without using powershell okay and

1103
00:37:31,520 --> 00:37:35,280
on top of that

1104
00:37:32,560 --> 00:37:36,960
you can embed this within other.net

1105
00:37:35,280 --> 00:37:39,520
languages such as c-sharp

1106
00:37:36,960 --> 00:37:40,640
which allows you to add scripting

1107
00:37:39,520 --> 00:37:43,759
capabilities

1108
00:37:40,640 --> 00:37:46,960
to your implants and malware

1109
00:37:43,760 --> 00:37:49,280
okay hopefully that makes sense

1110
00:37:46,960 --> 00:37:50,480
and before i continue let me stop

1111
00:37:49,280 --> 00:37:53,760
presenting

1112
00:37:50,480 --> 00:37:59,119
and then go back to the slides

1113
00:37:53,760 --> 00:37:59,119
i want to see my powerpoint yes please

1114
00:38:02,320 --> 00:38:05,680
okay so it should be back to the

1115
00:38:04,000 --> 00:38:06,480
powerpoint slide now okay so that was

1116
00:38:05,680 --> 00:38:08,240
just boolean

1117
00:38:06,480 --> 00:38:09,839
but once i started going down this

1118
00:38:08,240 --> 00:38:11,598
rabbit hole i found a bunch of other

1119
00:38:09,839 --> 00:38:13,200
dot-net languages that i could use such

1120
00:38:11,599 --> 00:38:16,000
as clear script okay

1121
00:38:13,200 --> 00:38:18,160
clear script is amazing uh it is a

1122
00:38:16,000 --> 00:38:20,400
officially supported microsoft

1123
00:38:18,160 --> 00:38:22,078
project which is also something

1124
00:38:20,400 --> 00:38:23,760
fantastic

1125
00:38:22,079 --> 00:38:25,119
and it basically was designed to do

1126
00:38:23,760 --> 00:38:26,800
exactly what i want

1127
00:38:25,119 --> 00:38:28,800
it allows you to add scripting

1128
00:38:26,800 --> 00:38:30,320
capabilities to your.net applications

1129
00:38:28,800 --> 00:38:32,800
that's exactly what i want

1130
00:38:30,320 --> 00:38:33,599
it supports jscript and vbscript out of

1131
00:38:32,800 --> 00:38:37,040
the box

1132
00:38:33,599 --> 00:38:39,839
okay now this doesn't

1133
00:38:37,040 --> 00:38:41,440
i originally thought this provided i

1134
00:38:39,839 --> 00:38:43,040
originally thought this had its own

1135
00:38:41,440 --> 00:38:46,720
jscript implementation

1136
00:38:43,040 --> 00:38:48,720
okay it does not it uses the

1137
00:38:46,720 --> 00:38:50,240
built-in jscript implementation and vba

1138
00:38:48,720 --> 00:38:53,598
script implementation

1139
00:38:50,240 --> 00:38:55,040
of um a built uh of the windows script

1140
00:38:53,599 --> 00:38:58,240
host environment on windows

1141
00:38:55,040 --> 00:39:00,560
okay so what this means is that any code

1142
00:38:58,240 --> 00:39:01,279
that you run any jscript or vbscript

1143
00:39:00,560 --> 00:39:04,320
code that you

1144
00:39:01,280 --> 00:39:06,000
run through this clear script engine is

1145
00:39:04,320 --> 00:39:09,280
subjected to amsi

1146
00:39:06,000 --> 00:39:09,280
okay however

1147
00:39:09,520 --> 00:39:14,000
there is an incredible thing that

1148
00:39:11,280 --> 00:39:15,920
clearscript allows you to do

1149
00:39:14,000 --> 00:39:18,480
remember before when i mentioned that

1150
00:39:15,920 --> 00:39:20,720
jscript and vbscript natively

1151
00:39:18,480 --> 00:39:22,640
can't do everything that powershell does

1152
00:39:20,720 --> 00:39:23,839
because it can't really access a lot of

1153
00:39:22,640 --> 00:39:26,160
the.net apis

1154
00:39:23,839 --> 00:39:27,279
that gives the power of powershell where

1155
00:39:26,160 --> 00:39:30,319
clearscript

1156
00:39:27,280 --> 00:39:33,520
allows you to basically

1157
00:39:30,320 --> 00:39:36,960
give more power to jscript and vbscript

1158
00:39:33,520 --> 00:39:37,759
by exposing net apis to those two

1159
00:39:36,960 --> 00:39:40,320
languages

1160
00:39:37,760 --> 00:39:41,040
okay so this right here on the screen is

1161
00:39:40,320 --> 00:39:44,400
a

1162
00:39:41,040 --> 00:39:45,279
uh i'm gonna like 30 line yeah probably

1163
00:39:44,400 --> 00:39:47,920
a 20 line c

1164
00:39:45,280 --> 00:39:49,680
sharp code uh that embeds the clear

1165
00:39:47,920 --> 00:39:53,280
script engine

1166
00:39:49,680 --> 00:39:54,240
and dynamically executes jscript within

1167
00:39:53,280 --> 00:39:57,680
clearscript

1168
00:39:54,240 --> 00:39:59,680
right however if if you're familiar with

1169
00:39:57,680 --> 00:40:01,919
c sharp you'll see some funky stuff

1170
00:39:59,680 --> 00:40:05,040
going on here because you'll notice that

1171
00:40:01,920 --> 00:40:05,760
i am calling dot net apis from jscript

1172
00:40:05,040 --> 00:40:08,839
now okay

1173
00:40:05,760 --> 00:40:10,800
so clearscript allows you to expose the

1174
00:40:08,839 --> 00:40:13,440
underlying.net engine

1175
00:40:10,800 --> 00:40:15,400
to jscript and vbscript and actually

1176
00:40:13,440 --> 00:40:18,720
dynamically call

1177
00:40:15,400 --> 00:40:20,240
those.net apis okay so what this means

1178
00:40:18,720 --> 00:40:23,118
is that now we can we can

1179
00:40:20,240 --> 00:40:24,399
actually use jscript and vbscript

1180
00:40:23,119 --> 00:40:26,319
through clear script

1181
00:40:24,400 --> 00:40:27,760
embedded in c-sharp or whatever other

1182
00:40:26,319 --> 00:40:31,359
language

1183
00:40:27,760 --> 00:40:33,359
to do post-exploitation

1184
00:40:31,359 --> 00:40:35,598
okay and i'm gonna be showing i'm gonna

1185
00:40:33,359 --> 00:40:39,520
be doing a demo of that

1186
00:40:35,599 --> 00:40:40,560
and um one other thing that i would like

1187
00:40:39,520 --> 00:40:42,960
to mention here

1188
00:40:40,560 --> 00:40:44,400
i did see it say before this is

1189
00:40:42,960 --> 00:40:48,640
subjected to amsi

1190
00:40:44,400 --> 00:40:52,319
but because um because

1191
00:40:48,640 --> 00:40:55,680
clearscript allows you to expose dot

1192
00:40:52,319 --> 00:40:59,200
net engine to jscript you can actually

1193
00:40:55,680 --> 00:41:00,799
now patch amsy out using jscript and

1194
00:40:59,200 --> 00:41:01,598
vbscript so now we're back to the whole

1195
00:41:00,800 --> 00:41:03,599
powershell

1196
00:41:01,599 --> 00:41:05,280
situation where you know we're playing

1197
00:41:03,599 --> 00:41:07,359
the chicken and the egg problem

1198
00:41:05,280 --> 00:41:09,440
but because of clear script you can now

1199
00:41:07,359 --> 00:41:12,160
inject shell code you can now

1200
00:41:09,440 --> 00:41:13,520
do all of this crazy all of the great

1201
00:41:12,160 --> 00:41:15,440
great and crazy stuff that we do as

1202
00:41:13,520 --> 00:41:18,240
pentesters and red teamers

1203
00:41:15,440 --> 00:41:18,960
through jscript mvb script okay which is

1204
00:41:18,240 --> 00:41:20,560
incredible

1205
00:41:18,960 --> 00:41:22,640
and allows you to do a lot of great

1206
00:41:20,560 --> 00:41:25,119
stuff um with other

1207
00:41:22,640 --> 00:41:25,759
existing tooling like kodiak if you're

1208
00:41:25,119 --> 00:41:27,280
familiar with

1209
00:41:25,760 --> 00:41:29,119
code i think i pronounced that wrong

1210
00:41:27,280 --> 00:41:33,040
every single time but there's a

1211
00:41:29,119 --> 00:41:35,280
jscript c2 platform called kodiak

1212
00:41:33,040 --> 00:41:36,240
one of its limitations is it can't do

1213
00:41:35,280 --> 00:41:39,040
this yet

1214
00:41:36,240 --> 00:41:41,520
it can't call.net it can't uh call

1215
00:41:39,040 --> 00:41:43,440
native apis but with clearscript

1216
00:41:41,520 --> 00:41:44,640
you can completely do that with kodiak

1217
00:41:43,440 --> 00:41:46,640
so that's that's another

1218
00:41:44,640 --> 00:41:48,400
that's another thing to keep in mind i'm

1219
00:41:46,640 --> 00:41:51,598
going to be quickly demoing you

1220
00:41:48,400 --> 00:41:55,119
uh invoke clear script now uh

1221
00:41:51,599 --> 00:41:57,839
so uh let me

1222
00:41:55,119 --> 00:42:00,640
go let me present the right screen so

1223
00:41:57,839 --> 00:42:03,920
i'm gonna stop presenting

1224
00:42:00,640 --> 00:42:08,160
in a window yes

1225
00:42:03,920 --> 00:42:08,160
and i'm gonna go to windows 10

1226
00:42:09,839 --> 00:42:14,319
is it doing it it's it's thinking about

1227
00:42:12,880 --> 00:42:15,599
it yeah there you go okay so you

1228
00:42:14,319 --> 00:42:18,560
hopefully should see

1229
00:42:15,599 --> 00:42:20,400
my windows 10 vm now let's go back to

1230
00:42:18,560 --> 00:42:23,040
that folder

1231
00:42:20,400 --> 00:42:24,640
uh and again like this is all on that

1232
00:42:23,040 --> 00:42:27,119
offensive dlr repository

1233
00:42:24,640 --> 00:42:29,040
so that's fine you can get this this

1234
00:42:27,119 --> 00:42:30,480
code from there

1235
00:42:29,040 --> 00:42:32,640
but again what i'm going to be doing

1236
00:42:30,480 --> 00:42:34,560
here is showing you a powershell script

1237
00:42:32,640 --> 00:42:35,839
which embeds clear script within

1238
00:42:34,560 --> 00:42:39,520
powershell

1239
00:42:35,839 --> 00:42:42,960
and is going to be

1240
00:42:39,520 --> 00:42:47,280
uh basically executing

1241
00:42:42,960 --> 00:42:48,400
net apis okay so here we have the again

1242
00:42:47,280 --> 00:42:50,400
it it's the

1243
00:42:48,400 --> 00:42:52,480
if the code patterns are all the same

1244
00:42:50,400 --> 00:42:54,000
you have a dll which you have to load

1245
00:42:52,480 --> 00:42:56,800
with assembly.load

1246
00:42:54,000 --> 00:42:58,560
you then get access to the code within

1247
00:42:56,800 --> 00:42:59,680
that dll which in this case is the clear

1248
00:42:58,560 --> 00:43:01,759
script engine

1249
00:42:59,680 --> 00:43:03,759
and you can now access all the

1250
00:43:01,760 --> 00:43:06,800
functionality through powershell or any

1251
00:43:03,760 --> 00:43:08,480
net language you prefer so here

1252
00:43:06,800 --> 00:43:10,960
what i'm going to be doing is just

1253
00:43:08,480 --> 00:43:13,520
calling the system.console.writeline

1254
00:43:10,960 --> 00:43:14,640
which is going to write to the screen

1255
00:43:13,520 --> 00:43:15,359
which is going to just write to the

1256
00:43:14,640 --> 00:43:18,720
terminal

1257
00:43:15,359 --> 00:43:21,200
and i'm also going to be executing um

1258
00:43:18,720 --> 00:43:23,520
a command a operating system command

1259
00:43:21,200 --> 00:43:25,118
through the wscript shell activex object

1260
00:43:23,520 --> 00:43:28,240
this is just to demonstrate

1261
00:43:25,119 --> 00:43:31,760
that now you can access both

1262
00:43:28,240 --> 00:43:33,598
jscript apis native jscript apis and

1263
00:43:31,760 --> 00:43:35,599
that net apis because without

1264
00:43:33,599 --> 00:43:38,079
clearscript you wouldn't be able

1265
00:43:35,599 --> 00:43:39,359
to access this system.console.writeline

1266
00:43:38,079 --> 00:43:44,319
function okay

1267
00:43:39,359 --> 00:43:44,319
so um i'm going to load this in

1268
00:43:49,359 --> 00:43:53,839
and there we go so again

1269
00:43:54,160 --> 00:44:00,480
hopefully i've i'm conveying

1270
00:43:57,280 --> 00:44:02,079
uh hopefully i'm i'm i'm explaining this

1271
00:44:00,480 --> 00:44:04,240
in a way where you start to understand

1272
00:44:02,079 --> 00:44:05,280
sort of the power that lies in something

1273
00:44:04,240 --> 00:44:08,560
like this because

1274
00:44:05,280 --> 00:44:10,720
you can now do everything

1275
00:44:08,560 --> 00:44:12,000
dynamically as opposed to using

1276
00:44:10,720 --> 00:44:14,959
executables

1277
00:44:12,000 --> 00:44:15,920
and go back to the way we used to

1278
00:44:14,960 --> 00:44:19,119
operate

1279
00:44:15,920 --> 00:44:21,520
with powershell okay to an extent

1280
00:44:19,119 --> 00:44:22,640
and there is again there's so much to

1281
00:44:21,520 --> 00:44:24,800
talk about here

1282
00:44:22,640 --> 00:44:26,000
some of the stuff some some of how this

1283
00:44:24,800 --> 00:44:26,960
works i still don't completely

1284
00:44:26,000 --> 00:44:29,839
understand

1285
00:44:26,960 --> 00:44:30,720
but uh again like hopefully i'm i'm

1286
00:44:29,839 --> 00:44:32,880
explaining this

1287
00:44:30,720 --> 00:44:34,078
well now let's go back to my slides here

1288
00:44:32,880 --> 00:44:36,400
real quick

1289
00:44:34,079 --> 00:44:38,000
and how much time i think i i'm running

1290
00:44:36,400 --> 00:44:41,680
out i think i'm

1291
00:44:38,000 --> 00:44:45,119
almost there um but

1292
00:44:41,680 --> 00:44:47,759
let's go back to my slides

1293
00:44:45,119 --> 00:44:48,800
and uh yeah someone is gonna have to

1294
00:44:47,760 --> 00:44:50,400
stop me

1295
00:44:48,800 --> 00:44:52,319
giovanni you're gonna have to stop me if

1296
00:44:50,400 --> 00:44:54,079
if i if i go

1297
00:44:52,319 --> 00:44:56,640
because i'm just gonna keep going okay

1298
00:44:54,079 --> 00:44:58,079
so uh net alchemy recipes

1299
00:44:56,640 --> 00:45:00,160
so again like the more i went through

1300
00:44:58,079 --> 00:45:04,079
this rabbit hole uh the more

1301
00:45:00,160 --> 00:45:06,078
um i found the more uh languages i found

1302
00:45:04,079 --> 00:45:07,760
so these are all the.net languages that

1303
00:45:06,079 --> 00:45:08,480
i've found so far okay so what this

1304
00:45:07,760 --> 00:45:10,800
means so

1305
00:45:08,480 --> 00:45:12,480
with these you can actually you can take

1306
00:45:10,800 --> 00:45:15,599
these languages and embed them

1307
00:45:12,480 --> 00:45:17,280
within your malware to

1308
00:45:15,599 --> 00:45:19,520
add scripting capabilities so if you

1309
00:45:17,280 --> 00:45:21,839
wanted to embed lua within your

1310
00:45:19,520 --> 00:45:23,359
malware you can totally do that there is

1311
00:45:21,839 --> 00:45:25,279
a project for that

1312
00:45:23,359 --> 00:45:27,598
there's javascript there's a javascript

1313
00:45:25,280 --> 00:45:28,640
implementation there is a webassembly

1314
00:45:27,599 --> 00:45:31,680
implementation

1315
00:45:28,640 --> 00:45:32,000
which i've if i ever get around get some

1316
00:45:31,680 --> 00:45:33,440
time

1317
00:45:32,000 --> 00:45:34,800
to play around with i'm totally playing

1318
00:45:33,440 --> 00:45:36,880
around with that because it would be

1319
00:45:34,800 --> 00:45:38,800
kind of freaking amazing to

1320
00:45:36,880 --> 00:45:40,640
dynamically embed and execute web

1321
00:45:38,800 --> 00:45:44,160
assemblies within c-sharp

1322
00:45:40,640 --> 00:45:46,000
for malware that would be kind of crazy

1323
00:45:44,160 --> 00:45:48,000
um there's clear script there's iron

1324
00:45:46,000 --> 00:45:48,720
python 2 there's iron python 3 which is

1325
00:45:48,000 --> 00:45:50,640
in the work

1326
00:45:48,720 --> 00:45:52,078
which is in the works uh and there's

1327
00:45:50,640 --> 00:45:54,240
also iron ruby

1328
00:45:52,079 --> 00:45:55,359
and boolang obviously but out of all of

1329
00:45:54,240 --> 00:45:56,959
these by far

1330
00:45:55,359 --> 00:45:59,359
the most feature complete one that i've

1331
00:45:56,960 --> 00:46:01,520
found so far is bulang

1332
00:45:59,359 --> 00:46:02,799
um and that's what i wrote saw in

1333
00:46:01,520 --> 00:46:04,480
trinity in which i don't think i'll have

1334
00:46:02,800 --> 00:46:08,079
time to demo unfortunately but

1335
00:46:04,480 --> 00:46:10,800
um that's that's that's that if i

1336
00:46:08,079 --> 00:46:11,119
recommend you if i had to recommend one

1337
00:46:10,800 --> 00:46:13,119
uh

1338
00:46:11,119 --> 00:46:14,560
language to play around with it would be

1339
00:46:13,119 --> 00:46:16,560
boo lying because it's the most feature

1340
00:46:14,560 --> 00:46:19,759
complete and the documentation is

1341
00:46:16,560 --> 00:46:22,720
pretty good so bonus round so

1342
00:46:19,760 --> 00:46:23,680
as i said before like net is a set of

1343
00:46:22,720 --> 00:46:25,200
tools

1344
00:46:23,680 --> 00:46:26,839
that allows you to build your own

1345
00:46:25,200 --> 00:46:29,759
language some of these

1346
00:46:26,839 --> 00:46:32,078
tools also allow you to build your own

1347
00:46:29,760 --> 00:46:33,200
compiler for that language really really

1348
00:46:32,079 --> 00:46:37,200
easily

1349
00:46:33,200 --> 00:46:40,160
incredible right so if you you

1350
00:46:37,200 --> 00:46:41,680
so boo lang for example again is a

1351
00:46:40,160 --> 00:46:42,078
perfect example is because it comes with

1352
00:46:41,680 --> 00:46:45,440
its own

1353
00:46:42,079 --> 00:46:46,880
compiler okay so say

1354
00:46:45,440 --> 00:46:48,240
say you're like marcelo i don't want to

1355
00:46:46,880 --> 00:46:49,760
deal with this any of this embedding

1356
00:46:48,240 --> 00:46:51,520
stuff because it's just

1357
00:46:49,760 --> 00:46:53,119
it's it's too complicated i don't want

1358
00:46:51,520 --> 00:46:56,160
to deal with it that's fine

1359
00:46:53,119 --> 00:46:58,560
you can totally take those

1360
00:46:56,160 --> 00:47:00,319
boulang scripts that i just showed you

1361
00:46:58,560 --> 00:47:03,920
compile them to a dot

1362
00:47:00,319 --> 00:47:05,359
executable and run them on windows like

1363
00:47:03,920 --> 00:47:08,079
you can totally do that too

1364
00:47:05,359 --> 00:47:10,480
so you can easily weaponize this stuff

1365
00:47:08,079 --> 00:47:13,200
without having to do the embedding

1366
00:47:10,480 --> 00:47:14,560
although the embedding is sort of what

1367
00:47:13,200 --> 00:47:17,040
um

1368
00:47:14,560 --> 00:47:18,560
adds that extra layer of flexibility

1369
00:47:17,040 --> 00:47:20,800
right

1370
00:47:18,560 --> 00:47:21,599
but again like that executable that

1371
00:47:20,800 --> 00:47:23,760
generates

1372
00:47:21,599 --> 00:47:25,760
that you get from compiling boolang is

1373
00:47:23,760 --> 00:47:27,440
also.net assembly so what that means

1374
00:47:25,760 --> 00:47:29,119
is that you can take that compiled

1375
00:47:27,440 --> 00:47:32,079
boolean executable

1376
00:47:29,119 --> 00:47:33,599
and run it within powershell or c sharp

1377
00:47:32,079 --> 00:47:34,240
or whatever.net language you want

1378
00:47:33,599 --> 00:47:37,359
because

1379
00:47:34,240 --> 00:47:38,959
that's just how.net works it's amazing

1380
00:47:37,359 --> 00:47:40,799
taking advantage of existing tooling so

1381
00:47:38,960 --> 00:47:43,359
this is the main problem so say

1382
00:47:40,800 --> 00:47:44,000
you know i just i convince everybody

1383
00:47:43,359 --> 00:47:46,240
that

1384
00:47:44,000 --> 00:47:48,160
maybe c-sharp isn't the solution to this

1385
00:47:46,240 --> 00:47:49,839
maybe we should start looking into these

1386
00:47:48,160 --> 00:47:52,879
third-party scripting languages

1387
00:47:49,839 --> 00:47:55,920
to maximize return on investment

1388
00:47:52,880 --> 00:47:58,480
on red team operations the problem is

1389
00:47:55,920 --> 00:48:00,160
we've gone too far like we've we've gone

1390
00:47:58,480 --> 00:48:01,760
too far down the c-sharp rabbit hole so

1391
00:48:00,160 --> 00:48:03,440
most of the tooling out there has been

1392
00:48:01,760 --> 00:48:06,079
ported over to c-sharp

1393
00:48:03,440 --> 00:48:07,440
so in order to completely operationalize

1394
00:48:06,079 --> 00:48:10,400
this you have to port over

1395
00:48:07,440 --> 00:48:12,160
the c-sharp tools to boolean right

1396
00:48:10,400 --> 00:48:14,559
incredibly enough

1397
00:48:12,160 --> 00:48:16,399
uh there is a project called sharp

1398
00:48:14,559 --> 00:48:20,160
develop 4.4

1399
00:48:16,400 --> 00:48:22,400
that has a c-sharp to boolean translator

1400
00:48:20,160 --> 00:48:23,200
i i yeah don't even i don't even i don't

1401
00:48:22,400 --> 00:48:25,280
know

1402
00:48:23,200 --> 00:48:27,520
but it does have it so you can literally

1403
00:48:25,280 --> 00:48:29,839
copy paste c sharp code

1404
00:48:27,520 --> 00:48:31,759
into sharp develop 4.4 which is not the

1405
00:48:29,839 --> 00:48:33,119
latest version it was removed in the

1406
00:48:31,760 --> 00:48:34,720
latest version that translator was

1407
00:48:33,119 --> 00:48:36,559
removed in the latest version

1408
00:48:34,720 --> 00:48:39,040
uh so you have to get exactly version

1409
00:48:36,559 --> 00:48:41,119
4.4 and you can totally just copy and

1410
00:48:39,040 --> 00:48:44,160
paste c sharp code into sharp develop

1411
00:48:41,119 --> 00:48:45,520
and it'll spit out boolean code so you

1412
00:48:44,160 --> 00:48:47,040
you don't even have to worry about

1413
00:48:45,520 --> 00:48:49,040
porting over tooling anymore you can

1414
00:48:47,040 --> 00:48:51,839
just use sharp develop it does take some

1415
00:48:49,040 --> 00:48:53,279
like it's not completely 100 foolproof

1416
00:48:51,839 --> 00:48:54,160
like you are gonna have to fix some

1417
00:48:53,280 --> 00:48:56,000
things up but

1418
00:48:54,160 --> 00:48:57,680
it's a hell of a time saver if you do go

1419
00:48:56,000 --> 00:49:00,400
down this route

1420
00:48:57,680 --> 00:49:01,279
and i have five minutes left so i'm just

1421
00:49:00,400 --> 00:49:03,280
gonna skip

1422
00:49:01,280 --> 00:49:05,280
over that because i want to get to a few

1423
00:49:03,280 --> 00:49:06,079
things so science trinity is the tool

1424
00:49:05,280 --> 00:49:07,839
that i wrote to

1425
00:49:06,079 --> 00:49:09,839
weaponize these concepts that i talked

1426
00:49:07,839 --> 00:49:11,440
about and it uses boolang it originally

1427
00:49:09,839 --> 00:49:12,480
used in python but i switched it over to

1428
00:49:11,440 --> 00:49:14,880
boolang

1429
00:49:12,480 --> 00:49:17,040
so definitely check that out another

1430
00:49:14,880 --> 00:49:20,319
tool that i wrote was your mangander

1431
00:49:17,040 --> 00:49:21,119
but this uses python4.net python4.net is

1432
00:49:20,319 --> 00:49:24,480
different

1433
00:49:21,119 --> 00:49:26,559
uh it uh basically isn't it's not a.net

1434
00:49:24,480 --> 00:49:29,040
language it's standard python

1435
00:49:26,559 --> 00:49:30,960
but it interfaces with net in order to

1436
00:49:29,040 --> 00:49:34,160
actually call those.net api

1437
00:49:30,960 --> 00:49:37,359
so with standard python installed

1438
00:49:34,160 --> 00:49:38,319
you can actually do whatever powershell

1439
00:49:37,359 --> 00:49:40,558
could do

1440
00:49:38,319 --> 00:49:42,720
okay using python4.net and you can

1441
00:49:40,559 --> 00:49:45,280
totally pip install python.net

1442
00:49:42,720 --> 00:49:46,720
if you find python installed by default

1443
00:49:45,280 --> 00:49:48,640
on a windows machine

1444
00:49:46,720 --> 00:49:50,000
you can totally install python4.net and

1445
00:49:48,640 --> 00:49:52,000
now you can do whatever powershell does

1446
00:49:50,000 --> 00:49:55,599
because you can interface with

1447
00:49:52,000 --> 00:49:59,200
net framework okay you can also

1448
00:49:55,599 --> 00:50:02,960
embed standard c python

1449
00:49:59,200 --> 00:50:05,040
right within c sharp using python4.net

1450
00:50:02,960 --> 00:50:06,880
and there's an actual

1451
00:50:05,040 --> 00:50:08,079
paragraph saying because the python code

1452
00:50:06,880 --> 00:50:09,520
running under the python4 that is

1453
00:50:08,079 --> 00:50:11,119
inherently unverifiable

1454
00:50:09,520 --> 00:50:12,480
it runs totally under the radar security

1455
00:50:11,119 --> 00:50:14,319
infrastructure so you should restrict

1456
00:50:12,480 --> 00:50:14,720
use of python which is exactly what i

1457
00:50:14,319 --> 00:50:16,240
want

1458
00:50:14,720 --> 00:50:17,439
okay and i wrote i wrote a tool called

1459
00:50:16,240 --> 00:50:19,040
your mangano i haven't released this

1460
00:50:17,440 --> 00:50:20,800
publicly yet i still have to clean it up

1461
00:50:19,040 --> 00:50:21,920
but it's basically is like a you can

1462
00:50:20,800 --> 00:50:23,200
think of it as sort of like a mini

1463
00:50:21,920 --> 00:50:26,800
python installer

1464
00:50:23,200 --> 00:50:29,680
in c sharp but the end result is

1465
00:50:26,800 --> 00:50:32,240
you can basically call.net apis from

1466
00:50:29,680 --> 00:50:34,720
regular python which also allows you to

1467
00:50:32,240 --> 00:50:36,160
basically install like impact it and all

1468
00:50:34,720 --> 00:50:37,759
the other stuff because it's regular

1469
00:50:36,160 --> 00:50:40,240
python now we're not dealing with

1470
00:50:37,760 --> 00:50:41,760
iron python which is not built on cpi

1471
00:50:40,240 --> 00:50:44,479
this is regular python

1472
00:50:41,760 --> 00:50:45,200
um so hopefully i'll get that sorted out

1473
00:50:44,480 --> 00:50:47,839
soon

1474
00:50:45,200 --> 00:50:48,799
detection really quickly remove

1475
00:50:47,839 --> 00:50:50,078
powershell

1476
00:50:48,800 --> 00:50:52,160
uh if you have anything less than

1477
00:50:50,079 --> 00:50:52,800
powershell version five remove it

1478
00:50:52,160 --> 00:50:56,078
everywhere

1479
00:50:52,800 --> 00:50:58,640
okay just get rid of it because this is

1480
00:50:56,079 --> 00:50:59,359
these are general.net tradecraft

1481
00:50:58,640 --> 00:51:02,000
detection

1482
00:50:59,359 --> 00:51:03,839
recommendations like this this is not

1483
00:51:02,000 --> 00:51:04,720
specifically tied to the research that i

1484
00:51:03,839 --> 00:51:07,920
presented

1485
00:51:04,720 --> 00:51:09,279
um but generally like for any sort of

1486
00:51:07,920 --> 00:51:11,920
net tradecraft

1487
00:51:09,280 --> 00:51:12,559
remove powershell uh less than 5.0

1488
00:51:11,920 --> 00:51:14,559
everywhere

1489
00:51:12,559 --> 00:51:16,880
okay which in some organizations that's

1490
00:51:14,559 --> 00:51:19,760
pretty easy to do actually

1491
00:51:16,880 --> 00:51:21,680
i would also recommend removing uh net

1492
00:51:19,760 --> 00:51:22,319
less than 4.8 everywhere but that's

1493
00:51:21,680 --> 00:51:24,879
actually

1494
00:51:22,319 --> 00:51:25,920
somewhat pretty hard to do so that's

1495
00:51:24,880 --> 00:51:26,400
definitely going to be up to something

1496
00:51:25,920 --> 00:51:28,240
that you

1497
00:51:26,400 --> 00:51:29,760
to think about a lot but that's that's

1498
00:51:28,240 --> 00:51:30,319
because the reason why i recommend this

1499
00:51:29,760 --> 00:51:32,559
is because

1500
00:51:30,319 --> 00:51:34,880
less those versions less than 5.0 and

1501
00:51:32,559 --> 00:51:36,400
4.8 don't have amz and any of those

1502
00:51:34,880 --> 00:51:37,440
detections in place that microsoft put

1503
00:51:36,400 --> 00:51:38,960
in okay

1504
00:51:37,440 --> 00:51:40,559
i would highly recommend sticking with

1505
00:51:38,960 --> 00:51:42,079
microsoft products as possible when it

1506
00:51:40,559 --> 00:51:44,480
comes to edrs

1507
00:51:42,079 --> 00:51:45,359
highly recommend it and the reason why

1508
00:51:44,480 --> 00:51:47,119
is

1509
00:51:45,359 --> 00:51:48,640
most third-party edr solutions

1510
00:51:47,119 --> 00:51:50,720
incredibly enough still don't integrate

1511
00:51:48,640 --> 00:51:54,240
with amsi so what this means is that

1512
00:51:50,720 --> 00:51:57,439
if you decide to use a third-party edr

1513
00:51:54,240 --> 00:51:58,078
silence or you know or any of those

1514
00:51:57,440 --> 00:52:01,920
right

1515
00:51:58,079 --> 00:52:03,440
um if you turn if you use silence turn

1516
00:52:01,920 --> 00:52:06,880
off defender

1517
00:52:03,440 --> 00:52:10,240
you will not uh see detections

1518
00:52:06,880 --> 00:52:11,440
for amsi like science from at least last

1519
00:52:10,240 --> 00:52:12,879
time i checked

1520
00:52:11,440 --> 00:52:14,640
you know i guess i said it out loud now

1521
00:52:12,880 --> 00:52:16,160
without coughing but uh last time i

1522
00:52:14,640 --> 00:52:19,680
checked does not integrate with amsi

1523
00:52:16,160 --> 00:52:21,359
so again i would just highly recommend

1524
00:52:19,680 --> 00:52:22,480
just sticking with microsoft products as

1525
00:52:21,359 --> 00:52:25,279
much as possible

1526
00:52:22,480 --> 00:52:26,000
because any third-party stuff is is uh

1527
00:52:25,280 --> 00:52:29,440
is a gamble

1528
00:52:26,000 --> 00:52:31,920
it really is there lee holmes uh twitter

1529
00:52:29,440 --> 00:52:33,280
on his twitter he also has a up-to-date

1530
00:52:31,920 --> 00:52:36,960
spreadsheet of all of

1531
00:52:33,280 --> 00:52:38,640
modern uh edr solutions and av

1532
00:52:36,960 --> 00:52:40,559
vendors that actually do integrate with

1533
00:52:38,640 --> 00:52:42,480
amsi this is i think

1534
00:52:40,559 --> 00:52:43,680
somewhat the latest one unfortunately

1535
00:52:42,480 --> 00:52:45,520
it's very unclear

1536
00:52:43,680 --> 00:52:47,040
trying to get in contact with these

1537
00:52:45,520 --> 00:52:48,400
vendors trying to actually understand if

1538
00:52:47,040 --> 00:52:50,400
they do integrate with amz

1539
00:52:48,400 --> 00:52:52,079
i'd highly recommend if you're trying to

1540
00:52:50,400 --> 00:52:54,720
look for a new edr

1541
00:52:52,079 --> 00:52:56,640
get amsi integration press them say if

1542
00:52:54,720 --> 00:52:57,759
you do not have amg integration i do not

1543
00:52:56,640 --> 00:52:59,520
want your product

1544
00:52:57,760 --> 00:53:00,960
because if you're not looking at amsi

1545
00:52:59,520 --> 00:53:02,400
logs you're doing it wrong you're

1546
00:53:00,960 --> 00:53:03,920
absolutely doing it wrong

1547
00:53:02,400 --> 00:53:06,000
there's also this new technology called

1548
00:53:03,920 --> 00:53:07,440
etw which is you can think of it as

1549
00:53:06,000 --> 00:53:08,880
telemetry

1550
00:53:07,440 --> 00:53:10,480
these are some links associated with

1551
00:53:08,880 --> 00:53:13,119
that but really quickly

1552
00:53:10,480 --> 00:53:14,559
etw allows you to see stuff like this so

1553
00:53:13,119 --> 00:53:16,319
it allows you to see

1554
00:53:14,559 --> 00:53:17,760
that net assembly is loaded within

1555
00:53:16,319 --> 00:53:19,759
memory okay

1556
00:53:17,760 --> 00:53:21,760
and this is extremely important because

1557
00:53:19,760 --> 00:53:23,359
you can see like hey this process is

1558
00:53:21,760 --> 00:53:25,599
bulang loaded

1559
00:53:23,359 --> 00:53:27,839
that's probably evil that's probably bad

1560
00:53:25,599 --> 00:53:29,520
right i've heard of boolean before

1561
00:53:27,839 --> 00:53:30,720
someone does really bad things with it

1562
00:53:29,520 --> 00:53:33,440
you know you should probably take a look

1563
00:53:30,720 --> 00:53:36,558
at that okay uh so etw allows you to do

1564
00:53:33,440 --> 00:53:39,680
to introspect into the dot-net runtime

1565
00:53:36,559 --> 00:53:41,359
and actually like get any sort of

1566
00:53:39,680 --> 00:53:42,799
information from it it's basically the

1567
00:53:41,359 --> 00:53:44,558
only thing that allows you to do that

1568
00:53:42,800 --> 00:53:48,319
right now at least from my knowledge

1569
00:53:44,559 --> 00:53:50,319
so definitely look into using etw

1570
00:53:48,319 --> 00:53:52,319
to supplement your detections when it

1571
00:53:50,319 --> 00:53:55,599
comes to net tradecraft

1572
00:53:52,319 --> 00:53:58,400
and this and finally that's it

1573
00:53:55,599 --> 00:54:11,839
if there are any questions let me know

1574
00:53:58,400 --> 00:54:11,839
in the chat

1575
00:54:14,800 --> 00:54:16,880
you

