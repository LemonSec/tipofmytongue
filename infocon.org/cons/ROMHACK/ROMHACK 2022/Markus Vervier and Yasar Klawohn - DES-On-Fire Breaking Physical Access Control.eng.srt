1
00:00:01,800 --> 00:00:06,899
okay hi everyone so yes DS on Fire House

2
00:00:06,899 --> 00:00:09,840
physical Access Control rates

3
00:00:09,840 --> 00:00:10,559
um

4
00:00:10,559 --> 00:00:12,200
maybe quick

5
00:00:12,200 --> 00:00:16,320
first problem yeah no first uh quick who

6
00:00:16,320 --> 00:00:18,900
am I just quickly um yeah I don't know

7
00:00:18,900 --> 00:00:23,539
I'm Marcus uh I'm doing stuff at x41

8
00:00:23,539 --> 00:00:25,980
non-ordinary tactical stuff also

9
00:00:25,980 --> 00:00:29,340
Direction stuff uh but I have a

10
00:00:29,340 --> 00:00:31,320
background penetration testing security

11
00:00:31,320 --> 00:00:34,440
research and yeah which means Yasha yeah

12
00:00:34,440 --> 00:00:36,780
hi I'm

13
00:00:36,780 --> 00:00:40,020
I'm working student x41 I study still uh

14
00:00:40,020 --> 00:00:42,120
yeah and we basically did the research

15
00:00:42,120 --> 00:00:44,700
together yeah and

16
00:00:44,700 --> 00:00:46,920
um quick overview of the talk so

17
00:00:46,920 --> 00:00:49,860
um talks about yeah there's fire and how

18
00:00:49,860 --> 00:00:51,480
we discovered a critical vulnerability

19
00:00:51,480 --> 00:00:55,020
in real world alarm system that's using

20
00:00:55,020 --> 00:00:58,320
that fire for um access control and uh

21
00:00:58,320 --> 00:01:00,899
digital logs but also like

22
00:01:00,899 --> 00:01:03,660
how can this fire systems be attacked

23
00:01:03,660 --> 00:01:06,659
right uh what what are things that could

24
00:01:06,659 --> 00:01:08,640
go wrong

25
00:01:08,640 --> 00:01:11,939
um and then we show some yeah things

26
00:01:11,939 --> 00:01:14,760
that uh that that you need if you want

27
00:01:14,760 --> 00:01:19,080
to attack it like emulating tags and um

28
00:01:19,080 --> 00:01:21,540
we shall a demo about what what we did

29
00:01:21,540 --> 00:01:23,580
and how we opened uh opened the log

30
00:01:23,580 --> 00:01:26,460
without having the proper key in the

31
00:01:26,460 --> 00:01:28,259
first place

32
00:01:28,259 --> 00:01:29,820
yes

33
00:01:29,820 --> 00:01:31,320
um just want to mention I mean there was

34
00:01:31,320 --> 00:01:33,180
already a lot of research on going

35
00:01:33,180 --> 00:01:35,880
against these systems test fire

36
00:01:35,880 --> 00:01:38,939
um protocols and RFID tags uh because

37
00:01:38,939 --> 00:01:41,939
that's what the log is using also

38
00:01:41,939 --> 00:01:44,220
um it's just two examples and just want

39
00:01:44,220 --> 00:01:46,320
to mention that a lot of these attacks

40
00:01:46,320 --> 00:01:48,360
were against like the tokens or the for

41
00:01:48,360 --> 00:01:50,759
example the random numbers uh generators

42
00:01:50,759 --> 00:01:55,020
of the generated by tokens

43
00:01:55,020 --> 00:01:57,060
um we looked more at the the general

44
00:01:57,060 --> 00:02:00,540
protocol and the general how it works

45
00:02:00,540 --> 00:02:02,880
and where you can attack it

46
00:02:02,880 --> 00:02:05,700
um and not let's say at a particular

47
00:02:05,700 --> 00:02:07,700
tax or

48
00:02:07,700 --> 00:02:10,199
weaknesses there more looking on the

49
00:02:10,199 --> 00:02:12,440
other side

50
00:02:13,379 --> 00:02:16,459
so that's a picture of the target

51
00:02:16,459 --> 00:02:20,160
it's one of these electronic locks there

52
00:02:20,160 --> 00:02:22,379
are multiple manufacturers and multiple

53
00:02:22,379 --> 00:02:24,000
uh

54
00:02:24,000 --> 00:02:26,340
um yeah implementations

55
00:02:26,340 --> 00:02:29,160
um most of them somehow are from the

56
00:02:29,160 --> 00:02:31,940
same companies so they're more

57
00:02:31,940 --> 00:02:35,879
vendors than actual manufacturers this

58
00:02:35,879 --> 00:02:38,099
one is Taylor notes it's a German

59
00:02:38,099 --> 00:02:41,580
company they do alarm systems and part

60
00:02:41,580 --> 00:02:43,739
of the Alarm Systems also these are

61
00:02:43,739 --> 00:02:46,379
electronic lock cylinders and I think

62
00:02:46,379 --> 00:02:48,680
internally they're from another company

63
00:02:48,680 --> 00:02:52,739
zubmitai or c-plex so you will find

64
00:02:52,739 --> 00:02:54,959
these logs and that's actually maybe for

65
00:02:54,959 --> 00:02:56,459
you maybe you have a similar looking

66
00:02:56,459 --> 00:02:59,360
lock maybe check could be the same model

67
00:02:59,360 --> 00:03:01,440
they sort of all look the same different

68
00:03:01,440 --> 00:03:04,099
branding

69
00:03:05,700 --> 00:03:08,760
um yes

70
00:03:08,760 --> 00:03:11,340
um yeah okay so they're used in for home

71
00:03:11,340 --> 00:03:13,739
use and even in businesses some banks

72
00:03:13,739 --> 00:03:16,379
use them uh which we found interesting

73
00:03:16,379 --> 00:03:18,599
because yeah it's important

74
00:03:18,599 --> 00:03:20,720
um

75
00:03:21,180 --> 00:03:22,440
sorry

76
00:03:22,440 --> 00:03:24,560
um

77
00:03:26,040 --> 00:03:29,179
yeah sorry um

78
00:03:29,599 --> 00:03:32,400
I think we did we did the switch one

79
00:03:32,400 --> 00:03:35,580
slide too early it was up to the side so

80
00:03:35,580 --> 00:03:38,459
yeah just uh so alarm systems yeah

81
00:03:38,459 --> 00:03:39,900
they'll use of course different

82
00:03:39,900 --> 00:03:41,940
businesses and um important thing here

83
00:03:41,940 --> 00:03:44,459
is I guess it's death fire and and it's

84
00:03:44,459 --> 00:03:46,379
NFC tax

85
00:03:46,379 --> 00:03:49,620
um and also uh what we discovered is

86
00:03:49,620 --> 00:03:51,299
that

87
00:03:51,299 --> 00:03:54,060
um the same thing that we found is also

88
00:03:54,060 --> 00:03:55,799
applicable not only to the death fire

89
00:03:55,799 --> 00:03:58,080
but also to a remote access from alarm

90
00:03:58,080 --> 00:04:00,360
systems and the talk is not too much

91
00:04:00,360 --> 00:04:01,799
about that but we want to mention it we

92
00:04:01,799 --> 00:04:04,680
mentioned it at the at the end and

93
00:04:04,680 --> 00:04:05,640
um

94
00:04:05,640 --> 00:04:07,920
so why we mentioned this slide is also

95
00:04:07,920 --> 00:04:10,200
because we are using in our company that

96
00:04:10,200 --> 00:04:13,200
we're using the system ourselves and at

97
00:04:13,200 --> 00:04:15,480
one point since we also try to eat our

98
00:04:15,480 --> 00:04:18,000
own dog foods and yeah we we test

99
00:04:18,000 --> 00:04:20,579
everything that we also use at one point

100
00:04:20,579 --> 00:04:24,900
I told uh yasher or asked Yasha if he he

101
00:04:24,900 --> 00:04:27,360
could maybe look into

102
00:04:27,360 --> 00:04:29,940
um how this system works but actually

103
00:04:29,940 --> 00:04:32,699
not really for

104
00:04:32,699 --> 00:04:36,720
um yeah for uh finding bugs I mean it's

105
00:04:36,720 --> 00:04:39,180
the usual story but but it's more about

106
00:04:39,180 --> 00:04:40,919
accessibility but they're like I want to

107
00:04:40,919 --> 00:04:42,960
have the access logs of these logs and

108
00:04:42,960 --> 00:04:47,220
uh they have tcpip and uh they only have

109
00:04:47,220 --> 00:04:49,259
a GUI app so we would like to have some

110
00:04:49,259 --> 00:04:51,600
command line clients so let's maybe just

111
00:04:51,600 --> 00:04:54,600
reverse it and that's usually then the

112
00:04:54,600 --> 00:04:57,600
time to fire up Ida and the debugger and

113
00:04:57,600 --> 00:04:59,280
to capture some traffic and that's

114
00:04:59,280 --> 00:05:01,919
basically where uh yeah Yasha basically

115
00:05:01,919 --> 00:05:04,919
comes in and um yeah so I hand over to

116
00:05:04,919 --> 00:05:06,780
you yeah

117
00:05:06,780 --> 00:05:07,320
um

118
00:05:07,320 --> 00:05:10,199
yeah so we used Ida and

119
00:05:10,199 --> 00:05:12,600
proxmark actually to hack it but in the

120
00:05:12,600 --> 00:05:15,419
beginning just either uh

121
00:05:15,419 --> 00:05:17,160
we'll now have a look at gidra because

122
00:05:17,160 --> 00:05:20,300
we are licensed server issues with Ida

123
00:05:20,300 --> 00:05:23,699
but Ida is cool is just for the record

124
00:05:23,699 --> 00:05:26,039
um yeah so

125
00:05:26,039 --> 00:05:27,479
I don't know one of the first things I

126
00:05:27,479 --> 00:05:29,940
usually do just look at the Imports and

127
00:05:29,940 --> 00:05:31,860
what we actually found if you see it

128
00:05:31,860 --> 00:05:33,419
it's very small on the left is rant

129
00:05:33,419 --> 00:05:35,820
being imported and that's always curious

130
00:05:35,820 --> 00:05:39,360
because yeah brand isn't secure and this

131
00:05:39,360 --> 00:05:41,880
is a yeah alarm system that's supposed

132
00:05:41,880 --> 00:05:44,340
to be secure so it was interesting to

133
00:05:44,340 --> 00:05:45,780
have a look at where they actually use

134
00:05:45,780 --> 00:05:46,740
it

135
00:05:46,740 --> 00:05:48,120
um it's um

136
00:05:48,120 --> 00:05:50,039
I don't know Delphia but whatever they

137
00:05:50,039 --> 00:05:50,940
um

138
00:05:50,940 --> 00:05:52,740
thankfully they included some debug

139
00:05:52,740 --> 00:05:55,560
symbols so we just look at the uh

140
00:05:55,560 --> 00:05:58,139
where where Rand is used and the at the

141
00:05:58,139 --> 00:06:00,380
bottom

142
00:06:01,259 --> 00:06:02,940
okay that doesn't work

143
00:06:02,940 --> 00:06:04,620
um but

144
00:06:04,620 --> 00:06:07,139
um it's in German but it says yeah make

145
00:06:07,139 --> 00:06:10,560
two files so it means create random AES

146
00:06:10,560 --> 00:06:12,060
key

147
00:06:12,060 --> 00:06:14,580
um so that's already kind of

148
00:06:14,580 --> 00:06:17,160
yeah looks bad that they use a

149
00:06:17,160 --> 00:06:19,860
non-secure random number generator in uh

150
00:06:19,860 --> 00:06:22,020
or non-cryptographically secure random

151
00:06:22,020 --> 00:06:23,819
number generator for a yes key

152
00:06:23,819 --> 00:06:26,100
generation and having a look at it it's

153
00:06:26,100 --> 00:06:29,039
it's pretty ugly because it's decompiled

154
00:06:29,039 --> 00:06:30,600
but um

155
00:06:30,600 --> 00:06:33,900
we can see here they use f strand seated

156
00:06:33,900 --> 00:06:36,539
with time

157
00:06:36,539 --> 00:06:39,139
oops

158
00:06:40,440 --> 00:06:42,840
yeah and and that's so yeah that's

159
00:06:42,840 --> 00:06:44,520
pretty bad because

160
00:06:44,520 --> 00:06:46,440
that's just yeah for one each second

161
00:06:46,440 --> 00:06:49,080
there's going to be just one key and

162
00:06:49,080 --> 00:06:51,900
yeah there aren't that many seconds

163
00:06:51,900 --> 00:06:56,220
uh so a bit more cleaned up uh we can

164
00:06:56,220 --> 00:06:57,900
see that they yeah

165
00:06:57,900 --> 00:07:00,360
oops

166
00:07:00,360 --> 00:07:03,539
yeah again they use S rant seated with

167
00:07:03,539 --> 00:07:05,539
time then just

168
00:07:05,539 --> 00:07:08,460
get 16 random numbers put them use them

169
00:07:08,460 --> 00:07:11,340
as a key and yeah so that really isn't

170
00:07:11,340 --> 00:07:13,199
secure

171
00:07:13,199 --> 00:07:15,319
um

172
00:07:15,720 --> 00:07:18,360
yeah there as said before they also used

173
00:07:18,360 --> 00:07:21,539
as the remote access keys for

174
00:07:21,539 --> 00:07:24,020
accessing logs or whatever

175
00:07:24,020 --> 00:07:27,900
or administrating it but uh

176
00:07:27,900 --> 00:07:30,120
we have like a small spoiler sadly you

177
00:07:30,120 --> 00:07:32,280
can't really attack the thing via TCP

178
00:07:32,280 --> 00:07:33,660
even though there are a bunch of them on

179
00:07:33,660 --> 00:07:35,759
the Internet because they heavily rate

180
00:07:35,759 --> 00:07:38,039
limited but so we looked at the desk

181
00:07:38,039 --> 00:07:40,259
fire application Keys used for physical

182
00:07:40,259 --> 00:07:42,060
access

183
00:07:42,060 --> 00:07:43,199
um

184
00:07:43,199 --> 00:07:45,599
yeah

185
00:07:45,599 --> 00:07:47,520
okay

186
00:07:47,520 --> 00:07:51,060
um so um

187
00:07:51,060 --> 00:07:52,500
so we looked at the death for our

188
00:07:52,500 --> 00:07:54,840
application keys and just to reiterate

189
00:07:54,840 --> 00:07:57,479
so we looked at the the software that

190
00:07:57,479 --> 00:07:59,819
basically manages this alarm systems and

191
00:07:59,819 --> 00:08:01,560
they provides the keys and it also

192
00:08:01,560 --> 00:08:04,380
generates the keys so

193
00:08:04,380 --> 00:08:06,840
um yeah I mean render myth is actually I

194
00:08:06,840 --> 00:08:10,020
mean I guess nothing too new but

195
00:08:10,020 --> 00:08:12,479
um the more interesting thing starts

196
00:08:12,479 --> 00:08:14,639
actually now

197
00:08:14,639 --> 00:08:17,099
um because uh how can we actually attack

198
00:08:17,099 --> 00:08:20,099
this I mean yeah you have Wiki and we we

199
00:08:20,099 --> 00:08:21,539
see that

200
00:08:21,539 --> 00:08:24,660
um the key space might not be too big so

201
00:08:24,660 --> 00:08:28,199
it's uh you can bound it by 16 times 2

202
00:08:28,199 --> 00:08:31,379
to the power of 32 so 2 to the power 36

203
00:08:31,379 --> 00:08:32,820
I think

204
00:08:32,820 --> 00:08:34,260
um so

205
00:08:34,260 --> 00:08:37,919
um as Max keys but I mean if you only

206
00:08:37,919 --> 00:08:40,620
have like five tries uh in your physical

207
00:08:40,620 --> 00:08:43,260
system that's probably still maybe safe

208
00:08:43,260 --> 00:08:45,240
enough right so

209
00:08:45,240 --> 00:08:48,180
um until there's a rate limit or the the

210
00:08:48,180 --> 00:08:51,180
key is rejected or so

211
00:08:51,180 --> 00:08:53,519
so we were thinking okay can what can we

212
00:08:53,519 --> 00:08:55,200
do I mean online attacks don't really

213
00:08:55,200 --> 00:08:56,760
work that well

214
00:08:56,760 --> 00:09:00,120
um low slow rate limited uh also noisy

215
00:09:00,120 --> 00:09:01,860
if you go to the to the log stand in

216
00:09:01,860 --> 00:09:03,360
front of the door whole day not a good

217
00:09:03,360 --> 00:09:04,860
idea

218
00:09:04,860 --> 00:09:06,899
um what about an offline attack can we

219
00:09:06,899 --> 00:09:08,399
can we like capture some challenge

220
00:09:08,399 --> 00:09:10,740
response and can we like attack uh

221
00:09:10,740 --> 00:09:13,080
attack these these these keys

222
00:09:13,080 --> 00:09:15,240
on our own Hardware right on our own

223
00:09:15,240 --> 00:09:17,820
cracking harness and

224
00:09:17,820 --> 00:09:19,440
but the question is is that actually

225
00:09:19,440 --> 00:09:22,680
possible and we didn't find anything

226
00:09:22,680 --> 00:09:25,560
um and for that maybe we do quick intro

227
00:09:25,560 --> 00:09:27,959
to death fire just high level later on

228
00:09:27,959 --> 00:09:29,880
we will go a bit deeper to the

229
00:09:29,880 --> 00:09:32,220
authentication how it actually works but

230
00:09:32,220 --> 00:09:34,320
um so there was this my fair My Fair

231
00:09:34,320 --> 00:09:36,420
Classic and that was super insecure and

232
00:09:36,420 --> 00:09:38,940
people found there and hack it super

233
00:09:38,940 --> 00:09:41,820
easily but in 2006 they introduced death

234
00:09:41,820 --> 00:09:44,640
fire if you want and now it's um it

235
00:09:44,640 --> 00:09:47,339
starts to know EV3 is the latest and

236
00:09:47,339 --> 00:09:49,640
there actually they use really crypto

237
00:09:49,640 --> 00:09:52,500
cryptography and um so they have NFC

238
00:09:52,500 --> 00:09:55,200
tags and they have uh seven bytes

239
00:09:55,200 --> 00:09:57,120
identifiers which are not really a

240
00:09:57,120 --> 00:09:59,760
security feature and um you can have

241
00:09:59,760 --> 00:10:01,620
multiple applications and you have like

242
00:10:01,620 --> 00:10:04,260
an Authentication Protocol that uses DS

243
00:10:04,260 --> 00:10:07,880
okay not good a 2K 3DS

244
00:10:07,880 --> 00:10:10,200
maybe a bit better but you can also use

245
00:10:10,200 --> 00:10:12,000
AES

246
00:10:12,000 --> 00:10:13,380
um and the text actually do proper

247
00:10:13,380 --> 00:10:16,200
crypto as far as we could see apparently

248
00:10:16,200 --> 00:10:18,360
before somebody people found there might

249
00:10:18,360 --> 00:10:20,760
be some problems but that's not part of

250
00:10:20,760 --> 00:10:24,420
our research so and yeah nft uses APD

251
00:10:24,420 --> 00:10:26,160
use and

252
00:10:26,160 --> 00:10:27,360
um

253
00:10:27,360 --> 00:10:29,459
um it's kind of similar to Smart cards

254
00:10:29,459 --> 00:10:30,300
so

255
00:10:30,300 --> 00:10:31,440
and

256
00:10:31,440 --> 00:10:32,940
um what we've seen before from what

257
00:10:32,940 --> 00:10:35,339
Yasha reversed was that they use the

258
00:10:35,339 --> 00:10:37,019
Unix timestamp for seating

259
00:10:37,019 --> 00:10:38,880
and for example if it was introduced in

260
00:10:38,880 --> 00:10:40,080
2006

261
00:10:40,080 --> 00:10:42,959
yeah we can say it's even less Keys

262
00:10:42,959 --> 00:10:46,500
um and so we had a plan we wanted to

263
00:10:46,500 --> 00:10:48,600
first off see okay can we build a piece

264
00:10:48,600 --> 00:10:50,640
of code to just regenerate the code yeah

265
00:10:50,640 --> 00:10:52,380
we could do that we reverse the

266
00:10:52,380 --> 00:10:53,940
algorithm it was super simple we found

267
00:10:53,940 --> 00:10:56,820
it they were using uh Boland a ball and

268
00:10:56,820 --> 00:10:59,459
implementation of the rent

269
00:10:59,459 --> 00:11:02,519
um yes but now that we sort of can

270
00:11:02,519 --> 00:11:05,279
generate all possible keys on our laptop

271
00:11:05,279 --> 00:11:08,579
how can we actually find which one is

272
00:11:08,579 --> 00:11:11,100
the right one right what's the what's

273
00:11:11,100 --> 00:11:13,620
that and for that we started looking at

274
00:11:13,620 --> 00:11:15,000
how the death fire authentication

275
00:11:15,000 --> 00:11:16,500
actually works

276
00:11:16,500 --> 00:11:17,940
and

277
00:11:17,940 --> 00:11:18,779
um

278
00:11:18,779 --> 00:11:22,200
yeah so we it's basically uh started

279
00:11:22,200 --> 00:11:23,279
um

280
00:11:23,279 --> 00:11:27,420
um trading it with a prox mark and um so

281
00:11:27,420 --> 00:11:29,880
we found is that first on a high level

282
00:11:29,880 --> 00:11:32,100
reader asked for the information at uid

283
00:11:32,100 --> 00:11:33,600
of the tech

284
00:11:33,600 --> 00:11:36,180
then some of the reader select the wrong

285
00:11:36,180 --> 00:11:39,360
application on the tag right so it does

286
00:11:39,360 --> 00:11:40,980
something wrong there's an arrow and

287
00:11:40,980 --> 00:11:42,959
then it actually selects the correct

288
00:11:42,959 --> 00:11:45,720
application why do I mention that

289
00:11:45,720 --> 00:11:48,540
um it gave us a bit of a or confused us

290
00:11:48,540 --> 00:11:51,120
a bit so if you have some error when

291
00:11:51,120 --> 00:11:52,560
reversing something maybe it's

292
00:11:52,560 --> 00:11:54,899
intentional because otherwise if the

293
00:11:54,899 --> 00:11:57,120
reader doesn't do it the authentication

294
00:11:57,120 --> 00:11:58,200
fails

295
00:11:58,200 --> 00:12:02,820
so anybody has some idea why why that is

296
00:12:02,820 --> 00:12:05,399
um yeah so we didn't find out why but it

297
00:12:05,399 --> 00:12:06,839
just has to be like that you have to do

298
00:12:06,839 --> 00:12:09,000
it's something wrong and then you can

299
00:12:09,000 --> 00:12:10,500
actually start the actual

300
00:12:10,500 --> 00:12:12,720
authentication

301
00:12:12,720 --> 00:12:15,480
um the second time it's successful and

302
00:12:15,480 --> 00:12:18,480
interestingly it reads the uid of the

303
00:12:18,480 --> 00:12:20,519
tag again but this time from a file and

304
00:12:20,519 --> 00:12:22,920
it's secure with some CMAC also based on

305
00:12:22,920 --> 00:12:24,000
this key

306
00:12:24,000 --> 00:12:26,399
and then yeah reader opens the door but

307
00:12:26,399 --> 00:12:28,320
that's actually not as far as we had to

308
00:12:28,320 --> 00:12:29,640
look we would just want to know the key

309
00:12:29,640 --> 00:12:31,150
right

310
00:12:31,150 --> 00:12:31,500
[Music]

311
00:12:31,500 --> 00:12:32,220
um

312
00:12:32,220 --> 00:12:36,000
yes so yeah wrong application ID

313
00:12:36,000 --> 00:12:38,459
and then the the one that's in the file

314
00:12:38,459 --> 00:12:42,140
is resurrect and

315
00:12:42,180 --> 00:12:44,760
that's actually good because it means

316
00:12:44,760 --> 00:12:46,079
that

317
00:12:46,079 --> 00:12:48,079
you don't have to do

318
00:12:48,079 --> 00:12:50,519
emulate a full tag you can just buy some

319
00:12:50,519 --> 00:12:53,100
on eBay with a different uid because

320
00:12:53,100 --> 00:12:55,200
normally you can change them but you can

321
00:12:55,200 --> 00:12:57,540
buy some in China and China or you can

322
00:12:57,540 --> 00:12:59,160
build one yourself but you don't need to

323
00:12:59,160 --> 00:13:01,440
do that you just need to to write a file

324
00:13:01,440 --> 00:13:02,880
to it

325
00:13:02,880 --> 00:13:07,380
and um so to emulate the tag we need two

326
00:13:07,380 --> 00:13:08,220
things

327
00:13:08,220 --> 00:13:11,820
we need to have this uid

328
00:13:11,820 --> 00:13:13,980
we can collect it just by reading the

329
00:13:13,980 --> 00:13:16,740
NFC tag right that's nothing protected

330
00:13:16,740 --> 00:13:18,899
we just assume it will yeah it will

331
00:13:18,899 --> 00:13:20,279
basically work

332
00:13:20,279 --> 00:13:23,220
you can go to someone and hold it close

333
00:13:23,220 --> 00:13:24,959
to his pocket and then the area is key

334
00:13:24,959 --> 00:13:28,399
and that's the actual challenge right

335
00:13:29,459 --> 00:13:30,779
um

336
00:13:30,779 --> 00:13:33,000
so how does the authentication actually

337
00:13:33,000 --> 00:13:35,020
work

338
00:13:35,020 --> 00:13:35,399
[Music]

339
00:13:35,399 --> 00:13:36,180
um

340
00:13:36,180 --> 00:13:40,200
if you hold the tag in front of a reader

341
00:13:40,200 --> 00:13:42,360
the reader will actually start talking

342
00:13:42,360 --> 00:13:44,339
to the tech and we'll say like

343
00:13:44,339 --> 00:13:47,940
authenticate please with AES

344
00:13:47,940 --> 00:13:49,079
so

345
00:13:49,079 --> 00:13:52,079
the tech will generate a random number

346
00:13:52,079 --> 00:13:54,000
called B

347
00:13:54,000 --> 00:13:57,060
and it will encrypt it with this secret

348
00:13:57,060 --> 00:14:00,120
key that the reader and the tech share

349
00:14:00,120 --> 00:14:03,300
and the encrypted random number is sent

350
00:14:03,300 --> 00:14:05,820
to the reader

351
00:14:05,820 --> 00:14:07,860
the reader does something with this and

352
00:14:07,860 --> 00:14:09,839
number

353
00:14:09,839 --> 00:14:11,880
it generates its own random number sends

354
00:14:11,880 --> 00:14:15,959
it back to the tag tag decrypts it

355
00:14:15,959 --> 00:14:18,060
modifies also the random number from the

356
00:14:18,060 --> 00:14:19,920
reader sends it back so

357
00:14:19,920 --> 00:14:21,779
just conceptual this is like a change

358
00:14:21,779 --> 00:14:25,620
response Mutual like authentication and

359
00:14:25,620 --> 00:14:28,380
um that way basically the attack and the

360
00:14:28,380 --> 00:14:30,000
reader can sort of say like yeah okay

361
00:14:30,000 --> 00:14:33,540
you're like no the same key as me and

362
00:14:33,540 --> 00:14:36,060
please open the door so important

363
00:14:36,060 --> 00:14:38,339
operations here are from the text

364
00:14:38,339 --> 00:14:40,800
perspective are there's six and random

365
00:14:40,800 --> 00:14:43,740
bytes security generated we don't know

366
00:14:43,740 --> 00:14:45,180
if it's secure we didn't check that

367
00:14:45,180 --> 00:14:46,740
because we didn't like what the hardware

368
00:14:46,740 --> 00:14:48,540
reverse the text we just saw okay the

369
00:14:48,540 --> 00:14:50,519
tag generates some kind of random number

370
00:14:50,519 --> 00:14:52,339
that's specified in the protocol

371
00:14:52,339 --> 00:14:54,060
encrypts it

372
00:14:54,060 --> 00:14:56,160
reader modifies it

373
00:14:56,160 --> 00:14:57,660
sends it back

374
00:14:57,660 --> 00:14:59,699
the tech can verify it

375
00:14:59,699 --> 00:15:03,120
and if it's verified correctly then yeah

376
00:15:03,120 --> 00:15:06,060
that's that's basically okay for opening

377
00:15:06,060 --> 00:15:07,920
the door

378
00:15:07,920 --> 00:15:11,100
um and they use ascbc encryption that's

379
00:15:11,100 --> 00:15:15,060
also not pretty let's say recommended

380
00:15:15,060 --> 00:15:16,260
but

381
00:15:16,260 --> 00:15:17,940
um yeah we didn't also find something

382
00:15:17,940 --> 00:15:20,699
that that would introduce a weakness

383
00:15:20,699 --> 00:15:24,000
there on that level

384
00:15:24,000 --> 00:15:25,680
so

385
00:15:25,680 --> 00:15:27,660
um what is the actual operation that

386
00:15:27,660 --> 00:15:30,180
that the reader and the tech do to the

387
00:15:30,180 --> 00:15:32,279
random decrypted random numbers they

388
00:15:32,279 --> 00:15:35,279
find they basically rotate it's a it's a

389
00:15:35,279 --> 00:15:37,500
bit rotation

390
00:15:37,500 --> 00:15:40,440
question is why do they actually do that

391
00:15:40,440 --> 00:15:42,540
and the

392
00:15:42,540 --> 00:15:44,940
they do it because

393
00:15:44,940 --> 00:15:47,100
they can later check if the rotate the

394
00:15:47,100 --> 00:15:48,959
rotation can be reversed

395
00:15:48,959 --> 00:15:50,279
so

396
00:15:50,279 --> 00:15:53,279
reader says authentication please tag

397
00:15:53,279 --> 00:15:56,639
generates a random number encrypts it

398
00:15:56,639 --> 00:15:58,920
read it gets the random number decrypted

399
00:15:58,920 --> 00:16:01,320
bit rotates it

400
00:16:01,320 --> 00:16:03,480
sends it back to the tag

401
00:16:03,480 --> 00:16:06,560
the tech is decrypting that rotating

402
00:16:06,560 --> 00:16:09,480
backwards and

403
00:16:09,480 --> 00:16:12,899
um will then see okay this actually is

404
00:16:12,899 --> 00:16:14,820
the same random number that I that I

405
00:16:14,820 --> 00:16:18,019
sent in the first place right

406
00:16:18,480 --> 00:16:21,000
fair enough

407
00:16:21,000 --> 00:16:22,260
um

408
00:16:22,260 --> 00:16:25,079
yeah so each side proves it knows the

409
00:16:25,079 --> 00:16:26,579
the key

410
00:16:26,579 --> 00:16:28,199
um

411
00:16:28,199 --> 00:16:31,320
now we got a bit of a problem

412
00:16:31,320 --> 00:16:32,160
um

413
00:16:32,160 --> 00:16:34,019
let's say we have we know it's one of

414
00:16:34,019 --> 00:16:36,060
these keys that region can generate on

415
00:16:36,060 --> 00:16:37,860
our laptops

416
00:16:37,860 --> 00:16:40,800
how do we actually brute force them how

417
00:16:40,800 --> 00:16:43,440
do we actually Brute Force the keys here

418
00:16:43,440 --> 00:16:45,779
because

419
00:16:45,779 --> 00:16:48,420
a random number we don't know we have

420
00:16:48,420 --> 00:16:50,639
the ciphertext of the random number

421
00:16:50,639 --> 00:16:52,860
but the

422
00:16:52,860 --> 00:16:54,959
if you try all possible Keys what is

423
00:16:54,959 --> 00:16:56,279
actually the signal

424
00:16:56,279 --> 00:16:58,860
that shows us when we found the right

425
00:16:58,860 --> 00:17:01,440
one because we don't know the the

426
00:17:01,440 --> 00:17:03,360
correct decryption result right so we

427
00:17:03,360 --> 00:17:06,599
don't know it so what what's the signal

428
00:17:06,599 --> 00:17:07,679
um

429
00:17:07,679 --> 00:17:10,339
and

430
00:17:10,500 --> 00:17:12,780
it turns out this rotation

431
00:17:12,780 --> 00:17:16,260
of uh the random number and the what the

432
00:17:16,260 --> 00:17:17,819
real sense factor is actually key for

433
00:17:17,819 --> 00:17:20,359
that because

434
00:17:20,579 --> 00:17:23,520
we have two Cipher texts and the first

435
00:17:23,520 --> 00:17:27,359
ciphertext contains the encrypted random

436
00:17:27,359 --> 00:17:29,220
number from the tag and the second

437
00:17:29,220 --> 00:17:32,400
ciphertext contains the encrypted and

438
00:17:32,400 --> 00:17:35,039
rotated random number from the tag

439
00:17:35,039 --> 00:17:36,179
so

440
00:17:36,179 --> 00:17:37,799
what we can do

441
00:17:37,799 --> 00:17:40,140
we decrypt both of these ciphertexts

442
00:17:40,140 --> 00:17:44,059
with each of our keys and we check if

443
00:17:44,059 --> 00:17:48,000
what what is the decrypted results if

444
00:17:48,000 --> 00:17:50,580
they are basically matching in being

445
00:17:50,580 --> 00:17:52,559
rotated right we do the same thing as

446
00:17:52,559 --> 00:17:54,480
the tech

447
00:17:54,480 --> 00:17:57,539
um just for each key and um that

448
00:17:57,539 --> 00:17:59,039
actually gives us a signal to say like

449
00:17:59,039 --> 00:18:01,980
with a high probability uh

450
00:18:01,980 --> 00:18:04,620
because with as if you flip one bit the

451
00:18:04,620 --> 00:18:07,380
results will completely change with a

452
00:18:07,380 --> 00:18:09,840
high probability so

453
00:18:09,840 --> 00:18:12,840
um so um that's actually our signal and

454
00:18:12,840 --> 00:18:14,580
that's what we yeah what we basically

455
00:18:14,580 --> 00:18:15,780
implemented

456
00:18:15,780 --> 00:18:22,559
to go to a log collect the the challenge

457
00:18:22,559 --> 00:18:25,080
um no go to reader

458
00:18:25,080 --> 00:18:28,620
collector collect also the challenge and

459
00:18:28,620 --> 00:18:30,900
um and basically yeah

460
00:18:30,900 --> 00:18:33,360
um do that okay now the question is we

461
00:18:33,360 --> 00:18:35,039
still don't know the uh the rotated

462
00:18:35,039 --> 00:18:36,000
number

463
00:18:36,000 --> 00:18:37,799
um we still don't know the the random

464
00:18:37,799 --> 00:18:39,960
numbers so how can we go to a reader and

465
00:18:39,960 --> 00:18:42,900
how can we uh can we make it encrypt

466
00:18:42,900 --> 00:18:46,260
something for us right and

467
00:18:46,260 --> 00:18:48,299
that's actually

468
00:18:48,299 --> 00:18:51,559
the night thing with AES or with yeah

469
00:18:51,559 --> 00:18:55,080
Works in our favor so

470
00:18:55,080 --> 00:18:57,960
um each and each random string can be

471
00:18:57,960 --> 00:19:00,380
decrypted as an AES

472
00:19:00,380 --> 00:19:02,820
ciphertext and it will result in

473
00:19:02,820 --> 00:19:04,620
something right you put some random

474
00:19:04,620 --> 00:19:06,720
bytes into a s algorithm

475
00:19:06,720 --> 00:19:10,500
and out comes some plain text right

476
00:19:10,500 --> 00:19:13,320
so what we do is we have our fake tag

477
00:19:13,320 --> 00:19:15,179
Mallory tag

478
00:19:15,179 --> 00:19:18,299
we generate some random bytes or one two

479
00:19:18,299 --> 00:19:20,940
three four five six whatever bytes and

480
00:19:20,940 --> 00:19:23,820
16 16 bytes we sent that to the reader

481
00:19:23,820 --> 00:19:26,700
the reader will apply AES

482
00:19:26,700 --> 00:19:30,240
it will decode the encrypted

483
00:19:30,240 --> 00:19:34,020
random data from us to something

484
00:19:34,020 --> 00:19:36,660
bit rotated

485
00:19:36,660 --> 00:19:41,039
send it back to us to our bad tag so now

486
00:19:41,039 --> 00:19:42,419
we got

487
00:19:42,419 --> 00:19:44,340
the same situation as before we have

488
00:19:44,340 --> 00:19:47,400
like uh encrypted B and we have

489
00:19:47,400 --> 00:19:51,780
something that is uh rotated encrypted B

490
00:19:51,780 --> 00:19:55,440
so we we can apply the same algorithm

491
00:19:55,440 --> 00:19:57,360
can say like okay we just try to decrypt

492
00:19:57,360 --> 00:19:58,260
whatever

493
00:19:58,260 --> 00:20:00,240
with each of the keys until we find a

494
00:20:00,240 --> 00:20:04,400
matching pair that is rotated so

495
00:20:04,799 --> 00:20:07,380
and yeah I hand over to Yasha who uh

496
00:20:07,380 --> 00:20:09,600
implemented that then as that is the

497
00:20:09,600 --> 00:20:12,419
algorithm yeah I mean it's basically

498
00:20:12,419 --> 00:20:16,440
just like he explained uh

499
00:20:17,940 --> 00:20:20,340
we decrypt the challenge

500
00:20:20,340 --> 00:20:22,919
that we sent with with the key we want

501
00:20:22,919 --> 00:20:24,000
to try

502
00:20:24,000 --> 00:20:26,760
see what we got I also decrypt

503
00:20:26,760 --> 00:20:28,440
what we got from the log back and then

504
00:20:28,440 --> 00:20:30,059
just compare the last

505
00:20:30,059 --> 00:20:32,580
at the part of the cell of what we got

506
00:20:32,580 --> 00:20:36,379
back from the locus the

507
00:20:36,660 --> 00:20:38,580
the other channel but our challenge

508
00:20:38,580 --> 00:20:40,260
shifted

509
00:20:40,260 --> 00:20:40,919
um

510
00:20:40,919 --> 00:20:42,480
we

511
00:20:42,480 --> 00:20:45,240
first we just implemented a very simple

512
00:20:45,240 --> 00:20:47,580
brute forcer like the naive one you see

513
00:20:47,580 --> 00:20:49,799
here's just single threaded just

514
00:20:49,799 --> 00:20:52,980
not even fancy uh optimizations or

515
00:20:52,980 --> 00:20:56,520
whatever and uh all the keys since 2006

516
00:20:56,520 --> 00:20:58,200
could be just cracked on this laptop in

517
00:20:58,200 --> 00:21:00,059
like three minutes

518
00:21:00,059 --> 00:21:00,720
um

519
00:21:00,720 --> 00:21:03,960
so yeah it's like you could probably

520
00:21:03,960 --> 00:21:05,280
even

521
00:21:05,280 --> 00:21:07,200
if you want to go into some bank or so

522
00:21:07,200 --> 00:21:08,880
you just go with a prox market and a

523
00:21:08,880 --> 00:21:12,179
phone walk there get the challenge send

524
00:21:12,179 --> 00:21:13,799
it to someone who has a laptop or so

525
00:21:13,799 --> 00:21:17,100
having crack it and uh get it back in a

526
00:21:17,100 --> 00:21:19,140
few minutes I mean probably you don't

527
00:21:19,140 --> 00:21:21,480
have to try the last uh 16 years or so

528
00:21:21,480 --> 00:21:23,039
you probably know like I don't know the

529
00:21:23,039 --> 00:21:24,900
bank is five years old

530
00:21:24,900 --> 00:21:27,120
um and then you can just walk in at

531
00:21:27,120 --> 00:21:28,440
first you have to get a uid from someone

532
00:21:28,440 --> 00:21:30,299
but then you can you just walk by some

533
00:21:30,299 --> 00:21:32,100
employee call to grab it with your phone

534
00:21:32,100 --> 00:21:33,840
then you have everything you need to get

535
00:21:33,840 --> 00:21:35,880
into the to the bank or I don't know

536
00:21:35,880 --> 00:21:38,760
some home or whatever

537
00:21:38,760 --> 00:21:41,280
um we yeah that Marcus sat down and

538
00:21:41,280 --> 00:21:43,140
wanted to make it even quicker

539
00:21:43,140 --> 00:21:46,740
um so he made like a yeah fancy asni

540
00:21:46,740 --> 00:21:51,380
native encryption native instruction uh

541
00:21:51,380 --> 00:21:52,980
optimizations

542
00:21:52,980 --> 00:21:54,419
um that uses Forex or it's just

543
00:21:54,419 --> 00:21:56,159
multi-threaded you just use all your

544
00:21:56,159 --> 00:21:59,039
cores it's way quicker

545
00:21:59,039 --> 00:21:59,700
um

546
00:21:59,700 --> 00:22:02,059
yeah yeah

547
00:22:02,059 --> 00:22:05,299
I guess you can maybe show it um

548
00:22:05,299 --> 00:22:08,039
is it even readable

549
00:22:08,039 --> 00:22:11,760
that's terrible yeah maybe who is just

550
00:22:11,760 --> 00:22:14,940
that what we what we see I mean we have

551
00:22:14,940 --> 00:22:17,280
a Tech Challenge right and we have the

552
00:22:17,280 --> 00:22:19,500
the lock Challenge and this is both that

553
00:22:19,500 --> 00:22:22,080
we can we have to go to the lock

554
00:22:22,080 --> 00:22:24,419
holds yeah basically

555
00:22:24,419 --> 00:22:26,100
interact with the lock and then we can

556
00:22:26,100 --> 00:22:27,240
get that but we don't need the

557
00:22:27,240 --> 00:22:29,340
interaction with we don't need to be men

558
00:22:29,340 --> 00:22:32,940
in the middle and we don't need to

559
00:22:32,940 --> 00:22:35,700
um interact with the

560
00:22:35,700 --> 00:22:39,480
um with the the tag accept forgetting

561
00:22:39,480 --> 00:22:42,900
the right uid right the urds are not

562
00:22:42,900 --> 00:22:45,539
really completely random so

563
00:22:45,539 --> 00:22:47,640
there could also be some options I mean

564
00:22:47,640 --> 00:22:49,620
for the story we made our life easy

565
00:22:49,620 --> 00:22:51,539
because we just assumed to say like okay

566
00:22:51,539 --> 00:22:54,419
we can basically somebody can just hold

567
00:22:54,419 --> 00:22:57,360
the reader next to us but even if you

568
00:22:57,360 --> 00:22:59,700
don't have that

569
00:22:59,700 --> 00:23:00,840
um there might be some options because

570
00:23:00,840 --> 00:23:02,820
we saw that the uids are all pretty

571
00:23:02,820 --> 00:23:03,840
similar

572
00:23:03,840 --> 00:23:06,000
so if you have one maybe you have all

573
00:23:06,000 --> 00:23:08,520
the others because they they wrote down

574
00:23:08,520 --> 00:23:09,900
somewhere that it's According to some

575
00:23:09,900 --> 00:23:11,880
standard but you have to pay hundreds of

576
00:23:11,880 --> 00:23:13,380
Euros if I remember correctly to get

577
00:23:13,380 --> 00:23:15,059
that because it's some ISO standard

578
00:23:15,059 --> 00:23:17,460
thing also yeah

579
00:23:17,460 --> 00:23:19,440
I think that's how it was

580
00:23:19,440 --> 00:23:22,320
um but yeah so we have on the right we

581
00:23:22,320 --> 00:23:24,360
have now our small slow Brute Force so I

582
00:23:24,360 --> 00:23:25,919
think it takes like 20 seconds to get a

583
00:23:25,919 --> 00:23:27,600
key and then

584
00:23:27,600 --> 00:23:32,880
we'll see see Marcus's thing go fast

585
00:23:32,880 --> 00:23:34,320
yeah it's more of an engineering

586
00:23:34,320 --> 00:23:37,679
challenge I guess so but it's um I would

587
00:23:37,679 --> 00:23:39,179
say it's

588
00:23:39,179 --> 00:23:40,860
it was kind of interesting to see okay

589
00:23:40,860 --> 00:23:42,480
how fast can we actually Brute Force

590
00:23:42,480 --> 00:23:43,260
this

591
00:23:43,260 --> 00:23:45,240
does it take a year or

592
00:23:45,240 --> 00:23:46,980
or less

593
00:23:46,980 --> 00:23:50,520
okay so if we if we do that

594
00:23:50,520 --> 00:23:52,320
um I don't know maybe we show the code

595
00:23:52,320 --> 00:23:54,740
quickly

596
00:23:55,080 --> 00:24:00,179
um yeah which one uh the left one so um

597
00:24:00,179 --> 00:24:02,700
so

598
00:24:02,700 --> 00:24:06,240
um we used as and I for that and

599
00:24:06,240 --> 00:24:08,100
um yeah that's that's

600
00:24:08,100 --> 00:24:09,960
from what we know I mean you could

601
00:24:09,960 --> 00:24:12,659
probably implement it in hashcad but uh

602
00:24:12,659 --> 00:24:15,059
so this implementation was a battery

603
00:24:15,059 --> 00:24:17,340
license so I didn't do that myself

604
00:24:17,340 --> 00:24:21,659
um so uh basically the standard as and I

605
00:24:21,659 --> 00:24:25,440
AES ECB or as just as encryption then

606
00:24:25,440 --> 00:24:26,580
you have to

607
00:24:26,580 --> 00:24:29,220
um have to do the mode of course we had

608
00:24:29,220 --> 00:24:32,280
to uh yeah replicate the same uh great

609
00:24:32,280 --> 00:24:34,140
random number function which some kind

610
00:24:34,140 --> 00:24:37,500
of magic uh values uh

611
00:24:37,500 --> 00:24:39,419
we first thought it's the Microsoft one

612
00:24:39,419 --> 00:24:41,580
but uh then we discovered it's the

613
00:24:41,580 --> 00:24:43,679
ballant one and it's nearly the same but

614
00:24:43,679 --> 00:24:46,340
uh yeah a slightly different

615
00:24:46,340 --> 00:24:51,179
and and uh yeah I I want to explain

616
00:24:51,179 --> 00:24:53,640
exactly we were we were I think we

617
00:24:53,640 --> 00:24:54,980
published the

618
00:24:54,980 --> 00:24:58,280
non-multi processed or multi-thread one

619
00:24:58,280 --> 00:25:01,740
but we will also publish this one

620
00:25:01,740 --> 00:25:05,059
um and why is it interesting to actually

621
00:25:05,059 --> 00:25:07,200
get a

622
00:25:07,200 --> 00:25:09,360
yeah I won't go to introduce here but

623
00:25:09,360 --> 00:25:11,580
why is it actually interesting to get

624
00:25:11,580 --> 00:25:14,880
this as fast as possible I mean

625
00:25:14,880 --> 00:25:15,960
um

626
00:25:15,960 --> 00:25:19,320
yeah I mean they use this here

627
00:25:19,320 --> 00:25:22,380
for this Vlog from Taylor North

628
00:25:22,380 --> 00:25:24,720
um to generate the keys but I mean you

629
00:25:24,720 --> 00:25:26,580
could also imagine that there might be

630
00:25:26,580 --> 00:25:28,380
slightly better

631
00:25:28,380 --> 00:25:32,159
um versions of the key generation right

632
00:25:32,159 --> 00:25:33,659
so

633
00:25:33,659 --> 00:25:35,820
um being able to brute force that fast

634
00:25:35,820 --> 00:25:37,860
can be important right there could be

635
00:25:37,860 --> 00:25:40,500
also other locks that have weak

636
00:25:40,500 --> 00:25:42,179
degeneration but maybe it's not that

637
00:25:42,179 --> 00:25:44,700
weak or maybe maybe people can enter

638
00:25:44,700 --> 00:25:47,159
their passwords and it's converted to an

639
00:25:47,159 --> 00:25:50,159
ads key right something like that

640
00:25:50,159 --> 00:25:52,020
and that's actually

641
00:25:52,020 --> 00:25:54,299
why I personally found it kind of quite

642
00:25:54,299 --> 00:25:55,679
interesting that we could like offload

643
00:25:55,679 --> 00:25:58,820
offline Brute Force

644
00:26:02,820 --> 00:26:05,940
oh yeah we have also a video

645
00:26:05,940 --> 00:26:07,559
of

646
00:26:07,559 --> 00:26:09,720
we wanted to do it live but we have we

647
00:26:09,720 --> 00:26:11,700
had some logistical issues with the

648
00:26:11,700 --> 00:26:14,059
locks

649
00:26:23,820 --> 00:26:27,179
yeah so we show how we collect the

650
00:26:27,179 --> 00:26:29,960
chains from the lock

651
00:26:30,000 --> 00:26:31,380
um

652
00:26:31,380 --> 00:26:34,260
yeah basically using the prox Mac super

653
00:26:34,260 --> 00:26:36,659
secret and then we

654
00:26:36,659 --> 00:26:38,700
um yeah basically

655
00:26:38,700 --> 00:26:40,320
uh

656
00:26:40,320 --> 00:26:42,120
start to Brute Force

657
00:26:42,120 --> 00:26:44,760
and

658
00:26:44,760 --> 00:26:47,580
uh I think it was not as optimized back

659
00:26:47,580 --> 00:26:51,120
then I know actually it was

660
00:26:51,120 --> 00:26:53,100
um we need to collect the uid from the

661
00:26:53,100 --> 00:26:54,059
tag

662
00:26:54,059 --> 00:26:55,260
so

663
00:26:55,260 --> 00:26:58,559
um that's sort of some physical

664
00:26:58,559 --> 00:27:00,000
element

665
00:27:00,000 --> 00:27:01,020
foreign

666
00:27:01,020 --> 00:27:03,240
but I guess yeah that's basically it

667
00:27:03,240 --> 00:27:05,760
yeah you can just read it through

668
00:27:05,760 --> 00:27:06,919
yeah

669
00:27:06,919 --> 00:27:10,020
jeans or whatever

670
00:27:10,020 --> 00:27:12,659
and so we have no both things but now

671
00:27:12,659 --> 00:27:15,900
yeah how do we emulate attack

672
00:27:15,900 --> 00:27:18,419
and that's what yeah I guess yeah you

673
00:27:18,419 --> 00:27:19,980
implemented

674
00:27:19,980 --> 00:27:22,559
in the proxback

675
00:27:22,559 --> 00:27:26,178
yeah we can open the lock

676
00:27:26,220 --> 00:27:27,960
yeah and you can see you can just have a

677
00:27:27,960 --> 00:27:30,059
it was a Raspberry Pi a power bank and

678
00:27:30,059 --> 00:27:32,580
the products Mark I think you can yeah

679
00:27:32,580 --> 00:27:34,440
but by the way we moved out of that

680
00:27:34,440 --> 00:27:36,740
office

681
00:27:38,419 --> 00:27:40,980
flipper zero I was playing around with

682
00:27:40,980 --> 00:27:44,760
it but I didn't have enough time uh so

683
00:27:44,760 --> 00:27:46,980
but I think you can also just do it with

684
00:27:46,980 --> 00:27:48,779
that one and it's like way smaller it

685
00:27:48,779 --> 00:27:51,720
has a built-in battery uh there's a

686
00:27:51,720 --> 00:27:54,360
mobile app for it and I guess since

687
00:27:54,360 --> 00:27:57,240
mobile phone processors should have as

688
00:27:57,240 --> 00:27:59,700
native instructions you could probably

689
00:27:59,700 --> 00:28:01,260
just do the brute forcing on there if

690
00:28:01,260 --> 00:28:03,179
you develop an app so you could be even

691
00:28:03,179 --> 00:28:06,140
more stealthy and

692
00:28:08,340 --> 00:28:10,260
yeah we have some proof concept code

693
00:28:10,260 --> 00:28:12,840
yeah uh yeah

694
00:28:12,840 --> 00:28:15,360
yeah wait for the

695
00:28:15,360 --> 00:28:17,520
yes that's uh do you want to explain

696
00:28:17,520 --> 00:28:18,779
something about the proof of concept

697
00:28:18,779 --> 00:28:20,100
code

698
00:28:20,100 --> 00:28:22,260
or about the approximately were there

699
00:28:22,260 --> 00:28:25,380
any like challenges

700
00:28:25,380 --> 00:28:27,059
I guess

701
00:28:27,059 --> 00:28:29,100
I don't remember

702
00:28:29,100 --> 00:28:31,500
okay

703
00:28:31,500 --> 00:28:33,620
um

704
00:28:34,020 --> 00:28:35,520
uh yes

705
00:28:35,520 --> 00:28:37,700
um

706
00:28:38,460 --> 00:28:40,200
Okay so

707
00:28:40,200 --> 00:28:42,299
maybe the third point should be the

708
00:28:42,299 --> 00:28:45,360
should be the the first point

709
00:28:45,360 --> 00:28:47,299
um

710
00:28:47,299 --> 00:28:50,600
the the

711
00:28:50,700 --> 00:28:53,039
the death fire protocol itself we didn't

712
00:28:53,039 --> 00:28:55,559
break that fire right so we didn't break

713
00:28:55,559 --> 00:28:57,240
that fire that we found like a protocol

714
00:28:57,240 --> 00:29:00,960
flaw that breaks everything and it's

715
00:29:00,960 --> 00:29:02,940
really about the keys but it's also

716
00:29:02,940 --> 00:29:06,059
about the challenge response so maybe in

717
00:29:06,059 --> 00:29:09,360
that case I I would say there would be

718
00:29:09,360 --> 00:29:10,860
some improved room from Improvement

719
00:29:10,860 --> 00:29:13,080
right for the protocol to design like

720
00:29:13,080 --> 00:29:16,020
this kind of authentication of a

721
00:29:16,020 --> 00:29:18,000
protocols

722
00:29:18,000 --> 00:29:18,659
um

723
00:29:18,659 --> 00:29:22,020
so we recommend you if you have uh if

724
00:29:22,020 --> 00:29:23,460
you have that fire

725
00:29:23,460 --> 00:29:26,340
please double check that the keys are

726
00:29:26,340 --> 00:29:28,620
generated securely because if they are

727
00:29:28,620 --> 00:29:30,240
not you can see what happens we can

728
00:29:30,240 --> 00:29:31,980
break them

729
00:29:31,980 --> 00:29:34,860
um and and there's not yeah it can be

730
00:29:34,860 --> 00:29:36,460
broken on commodity Hardware

731
00:29:36,460 --> 00:29:37,919
[Music]

732
00:29:37,919 --> 00:29:40,740
um so check if the keys are generated

733
00:29:40,740 --> 00:29:43,500
securely and uh yeah

734
00:29:43,500 --> 00:29:46,440
that uh software that used to be used

735
00:29:46,440 --> 00:29:48,600
was used to generate it I mean yeah

736
00:29:48,600 --> 00:29:50,899
that's basically a flaw in that software

737
00:29:50,899 --> 00:29:53,760
but I have heard that there might be

738
00:29:53,760 --> 00:29:56,820
others that also do it in a bad way or

739
00:29:56,820 --> 00:29:59,039
maybe that manufacturers pre-deployed

740
00:29:59,039 --> 00:30:00,299
the keys right so there are a lot of

741
00:30:00,299 --> 00:30:01,399
options

742
00:30:01,399 --> 00:30:04,860
and Daniel you your death fire versions

743
00:30:04,860 --> 00:30:07,500
they uh support things like uh key

744
00:30:07,500 --> 00:30:09,779
rollover or they have like additional

745
00:30:09,779 --> 00:30:13,440
features that can make the

746
00:30:13,440 --> 00:30:15,840
um uh compromising of keys a bit more

747
00:30:15,840 --> 00:30:17,460
difficult right so that's these

748
00:30:17,460 --> 00:30:18,899
application notes that we Link in the

749
00:30:18,899 --> 00:30:23,100
slides uh that has a comparison and a

750
00:30:23,100 --> 00:30:25,080
key rollover for example means that you

751
00:30:25,080 --> 00:30:28,440
can deploy multiple key sets on uh on

752
00:30:28,440 --> 00:30:30,419
the text so if one is considered

753
00:30:30,419 --> 00:30:31,620
compromised

754
00:30:31,620 --> 00:30:33,480
you still have the others and maybe you

755
00:30:33,480 --> 00:30:36,419
generate them from different sources and

756
00:30:36,419 --> 00:30:38,279
um that's actually pretty important

757
00:30:38,279 --> 00:30:39,419
because

758
00:30:39,419 --> 00:30:40,020
um

759
00:30:40,020 --> 00:30:42,539
uh yeah I guess the manufacturer had to

760
00:30:42,539 --> 00:30:44,460
notify all their clients and I think

761
00:30:44,460 --> 00:30:46,620
they had to replace uh they said

762
00:30:46,620 --> 00:30:49,200
something about 200 000 tokens or at

763
00:30:49,200 --> 00:30:51,720
thousands of tokens at least because uh

764
00:30:51,720 --> 00:30:54,000
yeah I mean if the all the tokens have

765
00:30:54,000 --> 00:30:55,140
the same key

766
00:30:55,140 --> 00:30:56,820
right

767
00:30:56,820 --> 00:30:58,980
um or in most scenarios they have the

768
00:30:58,980 --> 00:31:01,799
same key so with ev2 av3 you can use at

769
00:31:01,799 --> 00:31:04,559
least different keys and the ev1 or the

770
00:31:04,559 --> 00:31:07,799
tokens they could have more keys but um

771
00:31:07,799 --> 00:31:11,159
yeah Nobody Does it so which is also it

772
00:31:11,159 --> 00:31:13,500
may be important seeing that uh

773
00:31:13,500 --> 00:31:15,960
everybody's using the same key

774
00:31:15,960 --> 00:31:18,299
maybe that's some Hardware attacks or so

775
00:31:18,299 --> 00:31:21,960
to get the key out of some uh some tag I

776
00:31:21,960 --> 00:31:22,860
don't know

777
00:31:22,860 --> 00:31:25,140
I'm not an expert in that but I

778
00:31:25,140 --> 00:31:26,820
people do pretty crazy things with with

779
00:31:26,820 --> 00:31:29,279
expert with with like uh Hardware

780
00:31:29,279 --> 00:31:31,679
attacks

781
00:31:31,679 --> 00:31:36,179
um yeah yeah death fire kinda okay

782
00:31:36,179 --> 00:31:38,820
keys and implementations maybe not so

783
00:31:38,820 --> 00:31:41,760
much and then um yeah rotating the keys

784
00:31:41,760 --> 00:31:43,260
on a regular basis

785
00:31:43,260 --> 00:31:45,059
might also mitigate something right

786
00:31:45,059 --> 00:31:47,700
might not be that easy on the other hand

787
00:31:47,700 --> 00:31:49,320
with new desktop versions you can also

788
00:31:49,320 --> 00:31:51,659
like update keys and do things think so

789
00:31:51,659 --> 00:31:55,559
on a more like conceptual level

790
00:31:55,559 --> 00:31:58,200
um future mitigations for such attacks

791
00:31:58,200 --> 00:32:01,860
so if uh vendor wants to implement uh

792
00:32:01,860 --> 00:32:06,120
their um their own let's say a death

793
00:32:06,120 --> 00:32:08,399
fire kind of protocol I mean there are

794
00:32:08,399 --> 00:32:12,419
protocols just as fake and and zero

795
00:32:12,419 --> 00:32:13,860
knowledge and

796
00:32:13,860 --> 00:32:16,620
more modern ways to do authentication

797
00:32:16,620 --> 00:32:18,840
that even if you're a man in the middle

798
00:32:18,840 --> 00:32:22,200
or if you're able to capture traffic

799
00:32:22,200 --> 00:32:24,419
you they are resistant against Brute

800
00:32:24,419 --> 00:32:25,860
Force

801
00:32:25,860 --> 00:32:27,419
um yeah which would have saved today

802
00:32:27,419 --> 00:32:29,340
here

803
00:32:29,340 --> 00:32:30,120
um

804
00:32:30,120 --> 00:32:32,640
and yeah Jasper also has some leak

805
00:32:32,640 --> 00:32:34,919
resistant Primitives and we didn't

806
00:32:34,919 --> 00:32:37,620
really investigate that so if others

807
00:32:37,620 --> 00:32:41,100
don't do it we might do it in the future

808
00:32:41,100 --> 00:32:45,779
um but yeah we um that that

809
00:32:45,779 --> 00:32:49,140
supposed to prevent some attacks but

810
00:32:49,140 --> 00:32:51,840
it's not really what they mean I mean

811
00:32:51,840 --> 00:32:54,059
they call it side Channel proof or so

812
00:32:54,059 --> 00:32:56,279
yeah well yeah

813
00:32:56,279 --> 00:32:58,919
and which brings me to the point we are

814
00:32:58,919 --> 00:33:00,419
not did not do a man in the middle

815
00:33:00,419 --> 00:33:01,919
attack and also another side Channel

816
00:33:01,919 --> 00:33:03,720
attack right we just basically did what

817
00:33:03,720 --> 00:33:06,840
the protocol specifies so

818
00:33:06,840 --> 00:33:09,360
um and yeah rolling Keys might also be

819
00:33:09,360 --> 00:33:11,159
an option uh but that has some

820
00:33:11,159 --> 00:33:12,659
implementation challenges right if you

821
00:33:12,659 --> 00:33:15,299
have a desync and the rolling Keys uh

822
00:33:15,299 --> 00:33:16,980
right I mean you could with each

823
00:33:16,980 --> 00:33:19,700
authentication sort of

824
00:33:19,700 --> 00:33:23,100
ratchet forward the keys so if somebody

825
00:33:23,100 --> 00:33:25,799
has an old challenge they're like not

826
00:33:25,799 --> 00:33:28,799
useful anymore but I mean yeah that gets

827
00:33:28,799 --> 00:33:30,720
some implementation challenges if you

828
00:33:30,720 --> 00:33:33,360
have a desync of the legitimate ones and

829
00:33:33,360 --> 00:33:35,100
and this kind of things so just some

830
00:33:35,100 --> 00:33:40,580
ideas floating to improve these things

831
00:33:42,179 --> 00:33:44,279
yes maybe you want to mention something

832
00:33:44,279 --> 00:33:47,399
about the relay attacks yeah a colleague

833
00:33:47,399 --> 00:33:49,080
had the idea to just try relay attacks

834
00:33:49,080 --> 00:33:51,360
and we we didn't have the time for it

835
00:33:51,360 --> 00:33:54,419
but we just so just put some sleeves in

836
00:33:54,419 --> 00:33:58,019
the proximarco to to simulate like large

837
00:33:58,019 --> 00:34:03,419
delays and usually these uh this uh his

838
00:34:03,419 --> 00:34:05,519
protocol steps or these devices have

839
00:34:05,519 --> 00:34:06,480
some

840
00:34:06,480 --> 00:34:08,760
code that's supposed to prevent relay

841
00:34:08,760 --> 00:34:11,580
attacks but like like a relay attack is

842
00:34:11,580 --> 00:34:13,859
where one person reads the tag and

843
00:34:13,859 --> 00:34:16,139
another person is at the Lock and you

844
00:34:16,139 --> 00:34:18,179
just send the challenge of a Wi-Fi like

845
00:34:18,179 --> 00:34:20,280
a long distinction cable basically and

846
00:34:20,280 --> 00:34:23,339
so you try to keep the amount of time

847
00:34:23,339 --> 00:34:25,859
between each command small enough so

848
00:34:25,859 --> 00:34:28,379
that that isn't possible uh but yeah

849
00:34:28,379 --> 00:34:30,239
here it's like 75 minutes like seconds

850
00:34:30,239 --> 00:34:32,940
at 80 milliseconds it doesn't allow it

851
00:34:32,940 --> 00:34:34,500
anymore like it just stops

852
00:34:34,500 --> 00:34:36,060
authentication but so this should be

853
00:34:36,060 --> 00:34:38,339
enough to just do it over Wi-Fi like

854
00:34:38,339 --> 00:34:40,859
work up to some employee and have them

855
00:34:40,859 --> 00:34:43,199
relay their Channel and their tag

856
00:34:43,199 --> 00:34:46,379
The Avengers claim that relay attacks

857
00:34:46,379 --> 00:34:47,879
are like I mean relay attacks used to be

858
00:34:47,879 --> 00:34:50,280
sort of people demonstrate to them and I

859
00:34:50,280 --> 00:34:52,800
don't know some Carl stolen which relay

860
00:34:52,800 --> 00:34:54,540
attacks and everything super powerful

861
00:34:54,540 --> 00:34:56,460
right and various claim that they have

862
00:34:56,460 --> 00:34:58,020
some mitigations against that but we

863
00:34:58,020 --> 00:35:00,780
didn't see it right I mean I guess the

864
00:35:00,780 --> 00:35:02,400
mitigation should be that the time is

865
00:35:02,400 --> 00:35:06,540
pretty small to uh to uh the responses

866
00:35:06,540 --> 00:35:09,839
and and challenges but um yeah I mean 75

867
00:35:09,839 --> 00:35:14,700
milliseconds uh is uh you could probably

868
00:35:14,700 --> 00:35:18,359
uh relay to North America and back uh I

869
00:35:18,359 --> 00:35:21,540
don't know depends but somewhere so and

870
00:35:21,540 --> 00:35:23,880
it was it even fast enough for LTE so

871
00:35:23,880 --> 00:35:25,440
LTS like what did we check 11

872
00:35:25,440 --> 00:35:27,540
milliseconds so in the round trip or

873
00:35:27,540 --> 00:35:30,000
like detailing where you are so

874
00:35:30,000 --> 00:35:31,859
we think it would be possible to relay

875
00:35:31,859 --> 00:35:33,480
this right you don't even need to hack

876
00:35:33,480 --> 00:35:36,480
the protocol if you get the relay

877
00:35:36,480 --> 00:35:39,060
uh for someone with a legitimate attack

878
00:35:39,060 --> 00:35:42,119
in his pocket back to the lock maybe for

879
00:35:42,119 --> 00:35:43,380
red team it could be an interesting

880
00:35:43,380 --> 00:35:45,540
scenario I mean we only checked our

881
00:35:45,540 --> 00:35:48,480
cylinder or like yeah reader so it might

882
00:35:48,480 --> 00:35:50,700
be different for others but yeah

883
00:35:50,700 --> 00:35:53,460
sure if it would be a I mean they could

884
00:35:53,460 --> 00:35:55,500
do a five milliseconds

885
00:35:55,500 --> 00:35:59,420
cut off probably helpful

886
00:35:59,820 --> 00:36:01,920
yeah so

887
00:36:01,920 --> 00:36:04,320
um as a conclusion yeah secure random

888
00:36:04,320 --> 00:36:06,060
number generators is crucial like

889
00:36:06,060 --> 00:36:07,380
everywhere

890
00:36:07,380 --> 00:36:09,839
and that fire can be attacked with

891
00:36:09,839 --> 00:36:12,839
offline attacks on capture challenges uh

892
00:36:12,839 --> 00:36:14,700
from a reader

893
00:36:14,700 --> 00:36:17,099
um and so any system that uses a weak

894
00:36:17,099 --> 00:36:20,000
Secrets is in danger

895
00:36:20,000 --> 00:36:24,420
I just claim no and yeah doing card

896
00:36:24,420 --> 00:36:26,460
simulation is a lot of fun uh you didn't

897
00:36:26,460 --> 00:36:30,260
see it but uh yeah we had a

898
00:36:30,359 --> 00:36:32,040
um yeah with some engineering some

899
00:36:32,040 --> 00:36:34,020
development effort to like

900
00:36:34,020 --> 00:36:36,119
get the things right and

901
00:36:36,119 --> 00:36:37,800
speak to protocol in the right way as

902
00:36:37,800 --> 00:36:40,160
they expect

903
00:36:41,280 --> 00:36:43,140
okay

904
00:36:43,140 --> 00:36:45,480
um yeah we want to mention that one as

905
00:36:45,480 --> 00:36:47,760
resources as well because

906
00:36:47,760 --> 00:36:51,660
um if you look at the specs uh you have

907
00:36:51,660 --> 00:36:53,880
a hard time but they're terrible yeah

908
00:36:53,880 --> 00:36:56,040
like I looked at so many

909
00:36:56,040 --> 00:36:58,380
websites where they claim that this is

910
00:36:58,380 --> 00:37:00,720
how the protocol works and this is the

911
00:37:00,720 --> 00:37:03,300
only thing that was right and it was

912
00:37:03,300 --> 00:37:06,560
amazing and I'm so thankful yeah

913
00:37:06,560 --> 00:37:09,839
a Polish guy that uh apparently did some

914
00:37:09,839 --> 00:37:14,280
work on yeah doing it right so yeah

915
00:37:14,280 --> 00:37:16,340
hey uh thank you

916
00:37:16,340 --> 00:37:20,149
[Applause]

