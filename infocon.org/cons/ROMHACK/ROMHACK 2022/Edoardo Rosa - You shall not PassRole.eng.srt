1
00:00:01,700 --> 00:00:05,279
hi everyone today we are going to see

2
00:00:05,279 --> 00:00:07,560
some previous correction attacks on AWS

3
00:00:07,560 --> 00:00:10,500
and a new approach on how to spot them

4
00:00:10,500 --> 00:00:12,780
using a tool that we the security team

5
00:00:12,780 --> 00:00:15,179
of Prima security developed actually

6
00:00:15,179 --> 00:00:17,400
this tool is open source and is written

7
00:00:17,400 --> 00:00:18,480
in golang

8
00:00:18,480 --> 00:00:21,539
I am Eduardo Rosa but you should call me

9
00:00:21,539 --> 00:00:24,720
dodo and I'm a security engineer at

10
00:00:24,720 --> 00:00:27,359
Prima security and my background is is

11
00:00:27,359 --> 00:00:29,760
mixed because I've done blue and red

12
00:00:29,760 --> 00:00:32,159
teaming on on-premise and on cloud

13
00:00:32,159 --> 00:00:35,760
infrastructure my passions are rugby and

14
00:00:35,760 --> 00:00:37,680
the automation of remediation and

15
00:00:37,680 --> 00:00:40,739
detection on all environments

16
00:00:40,739 --> 00:00:43,920
to this agenda is quite long so please

17
00:00:43,920 --> 00:00:46,379
call back your or your parents at home

18
00:00:46,379 --> 00:00:49,320
because you will be late tomorrow today

19
00:00:49,320 --> 00:00:52,739
tonight and joking aside we'll go

20
00:00:52,739 --> 00:00:55,199
through some AWS basic knowledge and

21
00:00:55,199 --> 00:00:57,840
then moving forward to performing some

22
00:00:57,840 --> 00:01:00,000
previous escalation attacks and the

23
00:01:00,000 --> 00:01:02,340
final part is dedicated on how to detect

24
00:01:02,340 --> 00:01:05,099
uh such police escalation using

25
00:01:05,099 --> 00:01:06,900
automation

26
00:01:06,900 --> 00:01:09,780
you may know AWS but for some of you

27
00:01:09,780 --> 00:01:12,540
that I don't use it there is a quick and

28
00:01:12,540 --> 00:01:15,360
gentle and brief introduction

29
00:01:15,360 --> 00:01:18,600
Amazon web services AWS is a

30
00:01:18,600 --> 00:01:20,880
comprehensive cloud computing platform

31
00:01:20,880 --> 00:01:24,180
that offers a plethora of services that

32
00:01:24,180 --> 00:01:26,220
may include the software service

33
00:01:26,220 --> 00:01:28,560
infrastructure as a service platform as

34
00:01:28,560 --> 00:01:29,939
a service

35
00:01:29,939 --> 00:01:33,840
Etc the most used services are simple

36
00:01:33,840 --> 00:01:36,060
storage service S3

37
00:01:36,060 --> 00:01:39,780
elastic Cloud compute ec2 and Lambda

38
00:01:39,780 --> 00:01:41,400
function

39
00:01:41,400 --> 00:01:44,520
S3 is a service used to store objects

40
00:01:44,520 --> 00:01:47,040
inside containers these containers are

41
00:01:47,040 --> 00:01:48,540
actually called packets

42
00:01:48,540 --> 00:01:50,399
and basically you can store whatever

43
00:01:50,399 --> 00:01:54,360
data you want and here is where you can

44
00:01:54,360 --> 00:01:56,399
find juicy stuff doing your team

45
00:01:56,399 --> 00:01:57,960
engagement or during your penetration

46
00:01:57,960 --> 00:01:58,920
test

47
00:01:58,920 --> 00:02:01,860
ec2 is a service that basically allows

48
00:02:01,860 --> 00:02:04,219
you to create a virtual machine on cloud

49
00:02:04,219 --> 00:02:08,280
but one of the main differences is that

50
00:02:08,280 --> 00:02:10,560
from a from a classical VM is that you

51
00:02:10,560 --> 00:02:13,739
can actually execute this instance with

52
00:02:13,739 --> 00:02:16,200
a role Associated what does it mean it

53
00:02:16,200 --> 00:02:18,180
doesn't mean that this role is used to

54
00:02:18,180 --> 00:02:21,720
perform a direction on AWS and this is

55
00:02:21,720 --> 00:02:24,180
actually required because we are in a

56
00:02:24,180 --> 00:02:25,980
cloud environment so we always need

57
00:02:25,980 --> 00:02:28,200
authorization and authentication to the

58
00:02:28,200 --> 00:02:29,640
other services

59
00:02:29,640 --> 00:02:32,459
this last concept is very important to

60
00:02:32,459 --> 00:02:34,860
keep in mind especially for our edemas

61
00:02:34,860 --> 00:02:37,200
and think of it of something like

62
00:02:37,200 --> 00:02:38,959
impersonating

63
00:02:38,959 --> 00:02:43,260
a Windows user using Windows token a

64
00:02:43,260 --> 00:02:45,720
Lambda function is just a service this

65
00:02:45,720 --> 00:02:48,060
allows you to execute some code when a

66
00:02:48,060 --> 00:02:50,519
specified event is triggered

67
00:02:50,519 --> 00:02:53,400
and like ec2 lambdas can be executed

68
00:02:53,400 --> 00:02:56,280
with the permission Associated to our

69
00:02:56,280 --> 00:02:57,840
role

70
00:02:57,840 --> 00:03:00,480
the most important and critical service

71
00:03:00,480 --> 00:03:03,120
on WS obviously is the identity and

72
00:03:03,120 --> 00:03:05,940
access management I am because it allows

73
00:03:05,940 --> 00:03:08,160
you to centrally manage all permission

74
00:03:08,160 --> 00:03:12,480
across AWS and is used to specify

75
00:03:12,480 --> 00:03:15,840
who or what can access resources or

76
00:03:15,840 --> 00:03:16,920
other services

77
00:03:16,920 --> 00:03:19,860
in the next slides we'll see the basic

78
00:03:19,860 --> 00:03:21,959
structure and relationship between IIM

79
00:03:21,959 --> 00:03:25,500
entities that are users groups role

80
00:03:25,500 --> 00:03:29,400
policy and actions action is the AWS

81
00:03:29,400 --> 00:03:31,620
name for permission and keep in mind the

82
00:03:31,620 --> 00:03:33,780
Ws likes to change name to obvious

83
00:03:33,780 --> 00:03:35,159
things

84
00:03:35,159 --> 00:03:39,300
users like anything else in AWS are

85
00:03:39,300 --> 00:03:42,739
identified by a name

86
00:03:43,220 --> 00:03:46,260
is the Amazon resource name it actually

87
00:03:46,260 --> 00:03:47,900
is the

88
00:03:47,900 --> 00:03:51,599
string that identify uniquely a resource

89
00:03:51,599 --> 00:03:54,239
and user can be a member of one or more

90
00:03:54,239 --> 00:03:57,060
groups for example the membership he

91
00:03:57,060 --> 00:04:00,540
used to logically associate an user to a

92
00:04:00,540 --> 00:04:02,159
department or maybe a specific

93
00:04:02,159 --> 00:04:03,959
permission set

94
00:04:03,959 --> 00:04:06,900
and like users and any other AWS

95
00:04:06,900 --> 00:04:09,420
resources also group are identified by

96
00:04:09,420 --> 00:04:11,580
name and arms

97
00:04:11,580 --> 00:04:15,060
policy are actually what are used to

98
00:04:15,060 --> 00:04:17,760
define what an ablast principle is

99
00:04:17,760 --> 00:04:20,339
capable to perform on AWS

100
00:04:20,339 --> 00:04:22,680
and user can receive for example a

101
00:04:22,680 --> 00:04:24,660
policy through a group membership or

102
00:04:24,660 --> 00:04:28,020
directly with a link with a policy

103
00:04:28,020 --> 00:04:29,820
our policy can also be attached to a

104
00:04:29,820 --> 00:04:33,660
role and think overall of something like

105
00:04:33,660 --> 00:04:36,720
similar to a service account it may be

106
00:04:36,720 --> 00:04:39,720
seen like a user but it's different it's

107
00:04:39,720 --> 00:04:41,419
same but different

108
00:04:41,419 --> 00:04:45,360
and and I guess a policy simply Define

109
00:04:45,360 --> 00:04:49,199
what action are denied or allowed to

110
00:04:49,199 --> 00:04:51,720
that principle

111
00:04:51,720 --> 00:04:57,300
and a policy is composed by a statement

112
00:04:57,300 --> 00:05:01,560
that contains the Field Effect this can

113
00:05:01,560 --> 00:05:05,540
be allow or denied and a list of action

114
00:05:05,540 --> 00:05:09,000
on each action is described and written

115
00:05:09,000 --> 00:05:12,060
as a service Name colon operation they

116
00:05:12,060 --> 00:05:15,060
can be performed to the service

117
00:05:15,060 --> 00:05:19,919
and at the end we also have the resource

118
00:05:19,919 --> 00:05:22,340
resource field that actually specify

119
00:05:22,340 --> 00:05:25,680
what action uh what resources can be

120
00:05:25,680 --> 00:05:28,919
targeted by that action

121
00:05:28,919 --> 00:05:32,039
when for example the IIM delete role

122
00:05:32,039 --> 00:05:35,400
should be used to delete a role in AWS

123
00:05:35,400 --> 00:05:38,039
obviously but if we have the chart star

124
00:05:38,039 --> 00:05:40,500
in the resource field we can delete all

125
00:05:40,500 --> 00:05:43,020
role in our AWS account

126
00:05:43,020 --> 00:05:45,060
and more generally when we are dealing

127
00:05:45,060 --> 00:05:47,460
with IIM action

128
00:05:47,460 --> 00:05:49,259
uh

129
00:05:49,259 --> 00:05:51,840
the target can be any of the the

130
00:05:51,840 --> 00:05:54,000
entities that we saw before for example

131
00:05:54,000 --> 00:05:59,039
users group policy and other roles

132
00:05:59,039 --> 00:06:02,520
at the same uh the action works with

133
00:06:02,520 --> 00:06:05,639
other services for example S3

134
00:06:05,639 --> 00:06:09,000
and in the in that case of a service

135
00:06:09,000 --> 00:06:12,840
that targets S3 Service uh with the

136
00:06:12,840 --> 00:06:15,320
charge star we can actually

137
00:06:15,320 --> 00:06:19,259
Target all buckets in our AWS otherwise

138
00:06:19,259 --> 00:06:23,100
the scope can be restricted to a subset

139
00:06:23,100 --> 00:06:26,699
or box or a single bucket

140
00:06:26,699 --> 00:06:28,680
when we are dealing with Cloud the

141
00:06:28,680 --> 00:06:30,840
attack metal methodology is basically

142
00:06:30,840 --> 00:06:33,180
the same that we are used to when

143
00:06:33,180 --> 00:06:35,580
dealing with the more classic ecosystem

144
00:06:35,580 --> 00:06:38,340
like after directory or simply Windows

145
00:06:38,340 --> 00:06:39,740
Networks

146
00:06:39,740 --> 00:06:43,319
and the next arches can be the same we

147
00:06:43,319 --> 00:06:46,259
can exploit our vulnerability we can

148
00:06:46,259 --> 00:06:48,600
perform some phishing to get credential

149
00:06:48,600 --> 00:06:52,860
for example from a VPN or just look for

150
00:06:52,860 --> 00:06:54,780
some exposed secret or disposite

151
00:06:54,780 --> 00:06:56,940
credential and so on

152
00:06:56,940 --> 00:06:59,880
what actually changed are the specific

153
00:06:59,880 --> 00:07:01,919
techniques that we use

154
00:07:01,919 --> 00:07:04,620
to abuse Cloud misconfiguration aim

155
00:07:04,620 --> 00:07:06,960
permission to perform both lateral

156
00:07:06,960 --> 00:07:10,100
movement and previous escalation

157
00:07:10,100 --> 00:07:12,840
most of the parts to abuse

158
00:07:12,840 --> 00:07:16,139
are due to IIM misconfiguration caused

159
00:07:16,139 --> 00:07:19,039
by a lack of awareness

160
00:07:19,039 --> 00:07:21,960
and an attacker for example may only

161
00:07:21,960 --> 00:07:24,900
abuse IIM operation to perform previous

162
00:07:24,900 --> 00:07:26,880
collection without exploiting any

163
00:07:26,880 --> 00:07:30,840
vulnerabilities on the environment

164
00:07:30,840 --> 00:07:34,919
and in AWS there are some actions they

165
00:07:34,919 --> 00:07:37,500
are called shadow of admin actions and

166
00:07:37,500 --> 00:07:40,740
uh Bishop Fox cyber Arc Rhino security

167
00:07:40,740 --> 00:07:42,660
labs and many other security companies

168
00:07:42,660 --> 00:07:46,020
had done an excellent job to find and

169
00:07:46,020 --> 00:07:48,780
describe such combination and for

170
00:07:48,780 --> 00:07:51,539
example the the most known is the IIM

171
00:07:51,539 --> 00:07:55,139
pastoral in SSU Urban instances these

172
00:07:55,139 --> 00:07:57,360
two actions actually allows an attacker

173
00:07:57,360 --> 00:07:58,620
to

174
00:07:58,620 --> 00:08:02,639
create an instance pass a role to

175
00:08:02,639 --> 00:08:05,819
distance and if the attacker has access

176
00:08:05,819 --> 00:08:09,780
to that instance he may dump the

177
00:08:09,780 --> 00:08:11,819
credential think of it or something like

178
00:08:11,819 --> 00:08:15,180
mimicus does when you are logging into a

179
00:08:15,180 --> 00:08:18,440
Windows machine

180
00:08:18,840 --> 00:08:21,660
correctly click p

181
00:08:21,660 --> 00:08:23,699
found out that we are talking about the

182
00:08:23,699 --> 00:08:27,060
imposterone so we're doing a little

183
00:08:27,060 --> 00:08:30,960
dipping into the IM password action the

184
00:08:30,960 --> 00:08:33,419
this action is actually used to define

185
00:08:33,419 --> 00:08:36,958
whether an user can attach and assign a

186
00:08:36,958 --> 00:08:38,479
role

187
00:08:38,479 --> 00:08:42,059
service let's say for example

188
00:08:42,059 --> 00:08:44,520
that administrator needs to set up a

189
00:08:44,520 --> 00:08:46,860
service on application on an ECU

190
00:08:46,860 --> 00:08:48,959
instance that should interact with a

191
00:08:48,959 --> 00:08:50,220
bucket

192
00:08:50,220 --> 00:08:54,779
the IT guy first creates or find

193
00:08:54,779 --> 00:08:58,680
is not visible okay the intega efforts

194
00:08:58,680 --> 00:09:01,260
create and find a roll one

195
00:09:01,260 --> 00:09:03,240
with a low privileged policy they

196
00:09:03,240 --> 00:09:05,940
actually allows only the operation that

197
00:09:05,940 --> 00:09:08,339
we need to perform on that bucket he

198
00:09:08,339 --> 00:09:10,920
then creates an initial instance

199
00:09:10,920 --> 00:09:13,980
and when you find that role and these

200
00:09:13,980 --> 00:09:17,040
for instance is created it then attach

201
00:09:17,040 --> 00:09:20,060
this role to the instance in that way

202
00:09:20,060 --> 00:09:22,760
the administrator actually

203
00:09:22,760 --> 00:09:25,440
created a way to authenticate that

204
00:09:25,440 --> 00:09:28,920
instance to the S3 bucket

205
00:09:28,920 --> 00:09:32,220
and with the policy the application

206
00:09:32,220 --> 00:09:34,019
running on any instance can actually

207
00:09:34,019 --> 00:09:36,060
perform the required operation

208
00:09:36,060 --> 00:09:39,240
but at the same time and answer this

209
00:09:39,240 --> 00:09:41,279
title the title of this talk

210
00:09:41,279 --> 00:09:42,899
this action can also be abused by

211
00:09:42,899 --> 00:09:45,720
talkers to perform previous correlation

212
00:09:45,720 --> 00:09:50,940
if an attacker can pass an admin role to

213
00:09:50,940 --> 00:09:54,180
a service image escalates is privileges

214
00:09:54,180 --> 00:09:57,060
that's why IIM pastoral is one of the

215
00:09:57,060 --> 00:09:59,580
most important and critical permission

216
00:09:59,580 --> 00:10:01,680
on AWS

217
00:10:01,680 --> 00:10:05,459
now finally let's get into action and

218
00:10:05,459 --> 00:10:07,080
see how to actually perform previous

219
00:10:07,080 --> 00:10:10,740
collection in our demos we will Target a

220
00:10:10,740 --> 00:10:13,920
company called called Ultima

221
00:10:13,920 --> 00:10:17,700
and Ultima is moving to the cloud

222
00:10:17,700 --> 00:10:20,940
and in one of the first POC to start

223
00:10:20,940 --> 00:10:23,220
creating AWS resources they started

224
00:10:23,220 --> 00:10:25,740
using cloudformation that actually is a

225
00:10:25,740 --> 00:10:28,260
AWS service for infrastructure as code

226
00:10:28,260 --> 00:10:31,019
and expose it a web service

227
00:10:31,019 --> 00:10:33,540
this web service simply allows users to

228
00:10:33,540 --> 00:10:36,899
upload yaml file that will be ingested

229
00:10:36,899 --> 00:10:38,459
by cloudformation to create new

230
00:10:38,459 --> 00:10:41,540
resources and configure them

231
00:10:41,540 --> 00:10:44,760
what we were able to do is to find

232
00:10:44,760 --> 00:10:47,100
isotherm vulnerability that allowed us

233
00:10:47,100 --> 00:10:49,620
to perform an exploration of the file

234
00:10:49,620 --> 00:10:53,160
system of the backend and the internal

235
00:10:53,160 --> 00:10:55,800
Network obviously now as an attacker

236
00:10:55,800 --> 00:10:58,019
point of view our

237
00:10:58,019 --> 00:10:59,760
Target is

238
00:10:59,760 --> 00:11:03,540
find the crown jewel of this company

239
00:11:03,540 --> 00:11:05,640
we know that this company is storing all

240
00:11:05,640 --> 00:11:07,320
its data on

241
00:11:07,320 --> 00:11:10,500
S3 buckets so let's see what we can do

242
00:11:10,500 --> 00:11:11,279
actually

243
00:11:11,279 --> 00:11:15,480
and from this srf we saw that in the ATC

244
00:11:15,480 --> 00:11:19,200
password file there is a user called ec2

245
00:11:19,200 --> 00:11:20,279
user

246
00:11:20,279 --> 00:11:24,240
and this is quite interesting because uh

247
00:11:24,240 --> 00:11:27,060
ec2 instances exposes a metadata

248
00:11:27,060 --> 00:11:29,160
endpoint called emds

249
00:11:29,160 --> 00:11:32,640
that actually is used to dump the

250
00:11:32,640 --> 00:11:34,560
credential of the attached roll if

251
00:11:34,560 --> 00:11:36,959
present along with that information that

252
00:11:36,959 --> 00:11:39,420
actually right now we don't care

253
00:11:39,420 --> 00:11:42,000
if this endpoint is not upgraded to use

254
00:11:42,000 --> 00:11:43,800
version show

255
00:11:43,800 --> 00:11:47,700
we can abuse the ssrf vulnerability to

256
00:11:47,700 --> 00:11:51,660
access those route credentials and if

257
00:11:51,660 --> 00:11:53,579
you are curious to see what kind what

258
00:11:53,579 --> 00:11:56,579
big Bank vendors are using in the MDS V1

259
00:11:56,579 --> 00:11:59,519
there is a link at the bottom of this uh

260
00:11:59,519 --> 00:12:02,820
this page and you can see that that is

261
00:12:02,820 --> 00:12:05,640
not quite difficult to see such

262
00:12:05,640 --> 00:12:08,240
configuration

263
00:12:08,399 --> 00:12:11,060
demo

264
00:12:11,420 --> 00:12:14,279
you can see no

265
00:12:14,279 --> 00:12:17,700
okay now you can see at first we are

266
00:12:17,700 --> 00:12:21,420
going to Simply call the web service and

267
00:12:21,420 --> 00:12:24,300
then we are going to exploit the srf

268
00:12:24,300 --> 00:12:27,480
simply calling the localhost itself

269
00:12:27,480 --> 00:12:29,640
now we'll see the content of the ATC

270
00:12:29,640 --> 00:12:31,860
positive

271
00:12:31,860 --> 00:12:35,660
and we see this hso user

272
00:12:36,420 --> 00:12:39,839
now we are going to Simply

273
00:12:39,839 --> 00:12:40,380
um

274
00:12:40,380 --> 00:12:44,540
query this MDS endpoint

275
00:12:47,820 --> 00:12:50,459
on the right you can see this blue

276
00:12:50,459 --> 00:12:51,660
circle

277
00:12:51,660 --> 00:12:53,579
and

278
00:12:53,579 --> 00:12:57,060
during this demo we'll see populate the

279
00:12:57,060 --> 00:12:59,700
this graph will be populated with the

280
00:12:59,700 --> 00:13:01,920
information that we actually discovered

281
00:13:01,920 --> 00:13:03,420
during our

282
00:13:03,420 --> 00:13:07,320
basis of the attack and we'll see later

283
00:13:07,320 --> 00:13:09,019
what does it mean

284
00:13:09,019 --> 00:13:12,959
at the moment we are uh

285
00:13:12,959 --> 00:13:16,680
using the ssrf to access the emds

286
00:13:16,680 --> 00:13:20,339
metadata endpoint and we can explore

287
00:13:20,339 --> 00:13:22,560
this endpoints because it's using a

288
00:13:22,560 --> 00:13:24,779
directory listing configuration so we

289
00:13:24,779 --> 00:13:27,300
can manually do whatever we want until

290
00:13:27,300 --> 00:13:30,500
we found UC stuff

291
00:13:30,779 --> 00:13:33,660
for example we are going to see what if

292
00:13:33,660 --> 00:13:37,079
a role is attached to this instance and

293
00:13:37,079 --> 00:13:38,459
actually there is one and it's called

294
00:13:38,459 --> 00:13:41,719
confirmation deployer

295
00:13:42,180 --> 00:13:46,440
and simply uh performing a get

296
00:13:46,440 --> 00:13:49,800
to that file we can see the access key

297
00:13:49,800 --> 00:13:52,019
ID the secret access key and the token

298
00:13:52,019 --> 00:13:55,200
these are the AWS credential of the

299
00:13:55,200 --> 00:13:57,480
cloudformation deployer role

300
00:13:57,480 --> 00:13:59,660
so we simply

301
00:13:59,660 --> 00:14:03,540
copy and pass them into our shell using

302
00:14:03,540 --> 00:14:06,420
environmental variables to instruct AWS

303
00:14:06,420 --> 00:14:09,600
clear the official AWS tool

304
00:14:09,600 --> 00:14:12,779
to use them for authentication now we

305
00:14:12,779 --> 00:14:15,240
simply add impersonated platformation

306
00:14:15,240 --> 00:14:18,420
deployer and we got a photo on Ultima

307
00:14:18,420 --> 00:14:19,680
environment

308
00:14:19,680 --> 00:14:21,839
now we're going to Simply list what kind

309
00:14:21,839 --> 00:14:25,700
of policy are associated to this role

310
00:14:26,220 --> 00:14:28,800
there is only one and it's called ec2

311
00:14:28,800 --> 00:14:31,800
cloud formation the player policy

312
00:14:31,800 --> 00:14:34,500
and what actually this part is allow is

313
00:14:34,500 --> 00:14:37,860
to perform a clip stack on

314
00:14:37,860 --> 00:14:42,360
cloudformation a couple of IIM lists for

315
00:14:42,360 --> 00:14:45,360
the policy are described follow stack in

316
00:14:45,360 --> 00:14:47,279
our transformation service

317
00:14:47,279 --> 00:14:50,639
but what actually is interesting is the

318
00:14:50,639 --> 00:14:52,500
IIM password

319
00:14:52,500 --> 00:14:54,060
this password

320
00:14:54,060 --> 00:14:57,060
is compared only to the service deployer

321
00:14:57,060 --> 00:15:00,660
role so we can actually create a stack

322
00:15:00,660 --> 00:15:05,600
passing only the service deployer role

323
00:15:06,240 --> 00:15:07,860
now let's see what this is the player

324
00:15:07,860 --> 00:15:11,220
role can do there is a inline policy

325
00:15:11,220 --> 00:15:13,800
called Ultima custom deployer policy

326
00:15:13,800 --> 00:15:16,139
that actually allows all operation on

327
00:15:16,139 --> 00:15:21,300
lambdas on ec2 and a password on all

328
00:15:21,300 --> 00:15:25,079
or also which name ends with Dash Runner

329
00:15:25,079 --> 00:15:28,019
Dash Runner because we have these Char

330
00:15:28,019 --> 00:15:31,380
star star here that actually scope the

331
00:15:31,380 --> 00:15:33,540
Pastoral to all roles which name ends

332
00:15:33,540 --> 00:15:34,920
with Dash Runner

333
00:15:34,920 --> 00:15:37,920
but there is a problem

334
00:15:37,920 --> 00:15:42,000
we don't know any role with the

335
00:15:42,000 --> 00:15:43,800
Dash Runner

336
00:15:43,800 --> 00:15:46,560
string in the name so what we're going

337
00:15:46,560 --> 00:15:49,440
to do is a commenting technique used on

338
00:15:49,440 --> 00:15:52,920
ws and testing and it's actually Brute

339
00:15:52,920 --> 00:15:56,339
Force the name of the roles and we can

340
00:15:56,339 --> 00:15:58,860
do that using AWS key because we are

341
00:15:58,860 --> 00:16:03,360
simply calling https HTTP API and if the

342
00:16:03,360 --> 00:16:04,980
role does not exist

343
00:16:04,980 --> 00:16:08,100
we got we we got an error no such entity

344
00:16:08,100 --> 00:16:10,920
you can go ahead test other

345
00:16:10,920 --> 00:16:12,959
names

346
00:16:12,959 --> 00:16:15,300
until we get a valid one

347
00:16:15,300 --> 00:16:18,360
this one Lambda Runner has an align

348
00:16:18,360 --> 00:16:22,579
policy called Lambda render policy

349
00:16:23,639 --> 00:16:26,940
which gives to this role

350
00:16:26,940 --> 00:16:29,660
speed up

351
00:16:34,339 --> 00:16:36,180
some

352
00:16:36,180 --> 00:16:39,660
action to actually publish logs on

353
00:16:39,660 --> 00:16:42,300
cloudwatch and manage them but what it

354
00:16:42,300 --> 00:16:45,420
is what it is is interesting is the list

355
00:16:45,420 --> 00:16:49,220
function because until now we didn't add

356
00:16:49,220 --> 00:16:53,940
these uh this action Allowed by any of

357
00:16:53,940 --> 00:16:57,079
our roles and we can actually try to

358
00:16:57,079 --> 00:17:00,060
impersonate somehow the Lambda under

359
00:17:00,060 --> 00:17:03,740
role to perform other enumeration

360
00:17:03,740 --> 00:17:06,359
specifically on the Lambda service

361
00:17:06,359 --> 00:17:08,220
of AWS

362
00:17:08,220 --> 00:17:11,280
what you're going to do is

363
00:17:11,280 --> 00:17:12,599
step back

364
00:17:12,599 --> 00:17:15,839
and analyze our graph

365
00:17:15,839 --> 00:17:19,199
now we got access to this cut formation

366
00:17:19,199 --> 00:17:21,480
deployer that actually allows us to

367
00:17:21,480 --> 00:17:24,179
create cut formation stack using the

368
00:17:24,179 --> 00:17:25,740
service deployment

369
00:17:25,740 --> 00:17:28,020
the service deployer role allows to

370
00:17:28,020 --> 00:17:30,840
create Lambda function using

371
00:17:30,840 --> 00:17:33,900
all roles which name ends with Dash

372
00:17:33,900 --> 00:17:36,480
Runner and we discover one this one only

373
00:17:36,480 --> 00:17:40,080
allows list function so our Target is

374
00:17:40,080 --> 00:17:42,960
right now Lambda Lambda rander what

375
00:17:42,960 --> 00:17:44,580
you're going to do

376
00:17:44,580 --> 00:17:47,600
you have any ideas

377
00:17:55,140 --> 00:17:57,179
what we can do is create a craft

378
00:17:57,179 --> 00:17:58,919
formation stack

379
00:17:58,919 --> 00:18:02,460
that actually instructs AWS to create a

380
00:18:02,460 --> 00:18:05,460
Lambda function this function names

381
00:18:05,460 --> 00:18:07,620
you can do whatever you want at the

382
00:18:07,620 --> 00:18:09,900
moment is demo one Lambda fun

383
00:18:09,900 --> 00:18:12,299
this Lambda will be executed using

384
00:18:12,299 --> 00:18:14,580
Lambda rander role

385
00:18:14,580 --> 00:18:17,220
and the code that this Lambda will will

386
00:18:17,220 --> 00:18:19,860
execute is the

387
00:18:19,860 --> 00:18:24,120
the previous uh python script is simple

388
00:18:24,120 --> 00:18:26,880
enough just to say that it just Fetch

389
00:18:26,880 --> 00:18:29,039
and prints the content of proc self and

390
00:18:29,039 --> 00:18:32,760
Veron file this file contains the AWS

391
00:18:32,760 --> 00:18:34,740
credential of the roller touch at the

392
00:18:34,740 --> 00:18:36,179
Lambda

393
00:18:36,179 --> 00:18:38,940
but we need also a way to invoke that

394
00:18:38,940 --> 00:18:41,460
Lambda and fetch the output so we are

395
00:18:41,460 --> 00:18:45,080
going to create a Lambda function Norm

396
00:18:45,600 --> 00:18:49,919
visual is simply an HTTP HTTP URL which

397
00:18:49,919 --> 00:18:52,020
can be invoked by anyone without

398
00:18:52,020 --> 00:18:54,000
Authentication

399
00:18:54,000 --> 00:18:56,580
but there is another problem how we can

400
00:18:56,580 --> 00:18:57,660
fetch

401
00:18:57,660 --> 00:18:59,640
this function or if you don't have any

402
00:18:59,640 --> 00:19:02,760
permission to inspect the Lambda that we

403
00:19:02,760 --> 00:19:05,340
are going to create we simply ask gently

404
00:19:05,340 --> 00:19:08,520
that formation to print this functional

405
00:19:08,520 --> 00:19:10,740
on the outputs

406
00:19:10,740 --> 00:19:12,480
and this is a yaml file that we are

407
00:19:12,480 --> 00:19:14,220
going to ingest

408
00:19:14,220 --> 00:19:16,260
into cloudformation the stack name is

409
00:19:16,260 --> 00:19:18,419
demo one previous and we are going to

410
00:19:18,419 --> 00:19:20,520
pass to this role the service deployer

411
00:19:20,520 --> 00:19:22,080
as planet

412
00:19:22,080 --> 00:19:24,419
now we are going to list those Tech to

413
00:19:24,419 --> 00:19:26,400
see if the deployment has completed

414
00:19:26,400 --> 00:19:30,660
there is a stack hold we don't care

415
00:19:30,660 --> 00:19:33,720
the moan is our stack that is in

416
00:19:33,720 --> 00:19:35,160
progress

417
00:19:35,160 --> 00:19:37,620
do it for a couple seconds and we see

418
00:19:37,620 --> 00:19:40,260
that the equation is completed and on

419
00:19:40,260 --> 00:19:42,720
the outputs we have the function rule

420
00:19:42,720 --> 00:19:45,240
the actually we created and is bound to

421
00:19:45,240 --> 00:19:46,380
the Lambda

422
00:19:46,380 --> 00:19:49,200
what we are going simply to do is curl

423
00:19:49,200 --> 00:19:52,020
this this overall and access to the

424
00:19:52,020 --> 00:19:55,140
process and your own content file

425
00:19:55,140 --> 00:19:57,539
and we see the same token and the same

426
00:19:57,539 --> 00:19:59,160
access that we saw before just different

427
00:19:59,160 --> 00:20:01,260
because they are bound to the Lambda

428
00:20:01,260 --> 00:20:02,340
Randle

429
00:20:02,340 --> 00:20:06,678
we load them into our terminal

430
00:20:09,419 --> 00:20:12,600
and now we are Lambda Runner

431
00:20:12,600 --> 00:20:14,700
what we can do at the moment

432
00:20:14,700 --> 00:20:17,340
we're gonna list all the Lambda function

433
00:20:17,340 --> 00:20:21,360
in the in these are AWS account

434
00:20:21,360 --> 00:20:22,919
the first one is called the back

435
00:20:22,919 --> 00:20:25,140
handling alarm DPI which is running with

436
00:20:25,140 --> 00:20:26,460
Lambda under

437
00:20:26,460 --> 00:20:29,220
I don't care about the second one is

438
00:20:29,220 --> 00:20:32,820
back-end API Tempo which is running with

439
00:20:32,820 --> 00:20:34,799
a new role that we didn't know about

440
00:20:34,799 --> 00:20:38,580
before and this temp the cam API roll

441
00:20:38,580 --> 00:20:42,120
Runner so we from the previous graph we

442
00:20:42,120 --> 00:20:46,320
simply added a new role it can be abused

443
00:20:46,320 --> 00:20:48,600
using the same step

444
00:20:48,600 --> 00:20:51,620
that we saw before

445
00:20:57,000 --> 00:20:58,799
and the third one and the third Lambda

446
00:20:58,799 --> 00:21:01,140
is just simply our llama that we created

447
00:21:01,140 --> 00:21:01,919
before

448
00:21:01,919 --> 00:21:04,500
uh the permission

449
00:21:04,500 --> 00:21:06,840
for temple backend API Roadrunner

450
00:21:06,840 --> 00:21:09,840
actually are administrator access and Mr

451
00:21:09,840 --> 00:21:15,299
access is just the domain admin of AWS

452
00:21:15,299 --> 00:21:18,419
so now our targets is

453
00:21:18,419 --> 00:21:21,660
dump the credential of temp backend API

454
00:21:21,660 --> 00:21:25,980
roll Runner imab shows choose it on

455
00:21:25,980 --> 00:21:30,480
easier name and now we are

456
00:21:30,480 --> 00:21:32,460
Lambda under

457
00:21:32,460 --> 00:21:35,039
and we don't we can do anything so we

458
00:21:35,039 --> 00:21:37,140
step back and we return to the cut

459
00:21:37,140 --> 00:21:39,900
formation deployer role

460
00:21:39,900 --> 00:21:43,260
and we need to find a way to exploit uh

461
00:21:43,260 --> 00:21:44,340
all

462
00:21:44,340 --> 00:21:46,559
our previous escalation to get the photo

463
00:21:46,559 --> 00:21:50,100
to the administrator role you simply

464
00:21:50,100 --> 00:21:53,360
create another Lambda with this new role

465
00:21:53,360 --> 00:21:56,220
the code of the Lambda is the same as we

466
00:21:56,220 --> 00:21:57,600
saw before

467
00:21:57,600 --> 00:21:59,600
another functional another

468
00:21:59,600 --> 00:22:02,120
authentication another output another

469
00:22:02,120 --> 00:22:05,479
confirmation stack

470
00:22:06,299 --> 00:22:09,679
and after the deployment

471
00:22:12,960 --> 00:22:14,520
we get

472
00:22:14,520 --> 00:22:16,020
another rule

473
00:22:16,020 --> 00:22:19,520
that we can curl

474
00:22:20,700 --> 00:22:23,280
and now we have access to the

475
00:22:23,280 --> 00:22:27,559
uh administrator role credential

476
00:22:28,320 --> 00:22:30,840
we load them into our environmental

477
00:22:30,840 --> 00:22:32,340
variable

478
00:22:32,340 --> 00:22:34,799
as you may know

479
00:22:34,799 --> 00:22:38,820
and actually we are admin on AWS since

480
00:22:38,820 --> 00:22:41,880
our Target is listing an access all the

481
00:22:41,880 --> 00:22:45,299
content in uh of the buckets we simply

482
00:22:45,299 --> 00:22:47,159
go to list the buckets there is only one

483
00:22:47,159 --> 00:22:50,120
called demo one flag

484
00:22:50,760 --> 00:22:53,100
we are going to list the content of this

485
00:22:53,100 --> 00:22:55,520
bucket

486
00:22:56,760 --> 00:23:01,260
there is only a file called flax60

487
00:23:01,260 --> 00:23:05,480
we fetch it and we just print

488
00:23:07,140 --> 00:23:09,740
so

489
00:23:10,380 --> 00:23:14,900
is it clear what we have performed here

490
00:23:15,419 --> 00:23:18,299
and this is a little cup

491
00:23:18,299 --> 00:23:22,200
and we started with a ssrf from the

492
00:23:22,200 --> 00:23:26,460
top right blue circle in the ec2

493
00:23:26,460 --> 00:23:28,559
instance to actually dump the credential

494
00:23:28,559 --> 00:23:31,260
of the cut formation deployer we

495
00:23:31,260 --> 00:23:33,120
discovered that we were able to create a

496
00:23:33,120 --> 00:23:36,120
transformation stack passing a single

497
00:23:36,120 --> 00:23:39,000
role that was called service deployer

498
00:23:39,000 --> 00:23:43,080
these are all itself allows allowed us

499
00:23:43,080 --> 00:23:46,080
to create a Lambda function passing a

500
00:23:46,080 --> 00:23:49,380
role Lambda render this role was simply

501
00:23:49,380 --> 00:23:51,059
Brute Force

502
00:23:51,059 --> 00:23:55,380
and then we discovered all Lambda in the

503
00:23:55,380 --> 00:23:58,740
on our Target AWS account and this

504
00:23:58,740 --> 00:24:01,440
allowed us to discover another role at

505
00:24:01,440 --> 00:24:04,340
which was admin on AWS

506
00:24:04,340 --> 00:24:07,799
we stepped back from the beginning

507
00:24:07,799 --> 00:24:09,960
create another Lambda to actually dump

508
00:24:09,960 --> 00:24:12,960
the credential of our admin role then we

509
00:24:12,960 --> 00:24:16,559
impersonated imma we got access to the

510
00:24:16,559 --> 00:24:18,600
flag and actually to the Crown Jewel of

511
00:24:18,600 --> 00:24:20,580
the company

512
00:24:20,580 --> 00:24:23,460
the action that we performed were

513
00:24:23,460 --> 00:24:26,640
totally not object because guard Duty

514
00:24:26,640 --> 00:24:28,919
the track the AWS track detection

515
00:24:28,919 --> 00:24:31,080
service should have triggered at least

516
00:24:31,080 --> 00:24:35,400
at least one critical alert because uh

517
00:24:35,400 --> 00:24:38,580
we called AWS apis using a role

518
00:24:38,580 --> 00:24:40,740
credential Associated to an issue

519
00:24:40,740 --> 00:24:47,100
instance outside AWS from DP of my own

520
00:24:47,100 --> 00:24:49,679
there are bypasses for such detection

521
00:24:49,679 --> 00:24:52,200
but that's not the story and you may

522
00:24:52,200 --> 00:24:55,620
find a little write-up on how to bypass

523
00:24:55,620 --> 00:24:58,440
these uh this detection on the link at

524
00:24:58,440 --> 00:25:00,299
the bottom of the slide

525
00:25:00,299 --> 00:25:02,820
in the second demo we learned that

526
00:25:02,820 --> 00:25:05,220
Ultima after the previous incident

527
00:25:05,220 --> 00:25:07,799
obviously started hardening the system

528
00:25:07,799 --> 00:25:11,340
and creating a dock deny policy to block

529
00:25:11,340 --> 00:25:14,280
known previous escalation such that the

530
00:25:14,280 --> 00:25:16,500
shadow admin action that we saw at the

531
00:25:16,500 --> 00:25:18,419
beginning of this talk

532
00:25:18,419 --> 00:25:21,600
and they even started using all AWS

533
00:25:21,600 --> 00:25:24,419
services like elastic mapreduce to

534
00:25:24,419 --> 00:25:26,279
perform data scientists data science

535
00:25:26,279 --> 00:25:30,059
they added a lot of data scientists but

536
00:25:30,059 --> 00:25:33,600
you one of the latest Ires are not happy

537
00:25:33,600 --> 00:25:35,580
with the company and the job you are you

538
00:25:35,580 --> 00:25:38,039
are doing so decided to delete all data

539
00:25:38,039 --> 00:25:42,679
of Ultima why why not

540
00:25:46,440 --> 00:25:49,200
so we start this demo as Ultima data

541
00:25:49,200 --> 00:25:50,940
scientist role

542
00:25:50,940 --> 00:25:53,880
so now we are authenticated

543
00:25:53,880 --> 00:25:55,260
on AWS

544
00:25:55,260 --> 00:25:58,260
we're going to list the policy and the

545
00:25:58,260 --> 00:26:01,919
permission attached to our

546
00:26:01,919 --> 00:26:05,220
data scientist we see that we have

547
00:26:05,220 --> 00:26:09,179
uh come on account formation stack okay

548
00:26:09,179 --> 00:26:11,100
a confirmation create stack as we saw

549
00:26:11,100 --> 00:26:14,580
before and uh a pastoral

550
00:26:14,580 --> 00:26:17,100
and a couple of IIM

551
00:26:17,100 --> 00:26:20,580
action that was are useful to perform in

552
00:26:20,580 --> 00:26:22,440
variation and

553
00:26:22,440 --> 00:26:24,419
we can see that we have an easy win

554
00:26:24,419 --> 00:26:27,600
because we have the great stack and the

555
00:26:27,600 --> 00:26:31,080
Pastoral on all resources on AWS

556
00:26:31,080 --> 00:26:32,880
so

557
00:26:32,880 --> 00:26:35,700
this seems an easy win but let's go

558
00:26:35,700 --> 00:26:38,279
ahead with the numeration

559
00:26:38,279 --> 00:26:40,799
let's check out the second policy

560
00:26:40,799 --> 00:26:42,360
attached to this role actually it's

561
00:26:42,360 --> 00:26:44,400
called Data scientists

562
00:26:44,400 --> 00:26:47,880
and these two policies are managed by

563
00:26:47,880 --> 00:26:51,539
AWS and are not written a doc by the

564
00:26:51,539 --> 00:26:55,980
security team of the devops of uh Ultima

565
00:26:55,980 --> 00:26:58,020
and we see that we have again

566
00:26:58,020 --> 00:27:01,820
the create stack action

567
00:27:03,779 --> 00:27:07,679
a couple of enumeration action we can

568
00:27:07,679 --> 00:27:10,799
create delete Lambda we can list the

569
00:27:10,799 --> 00:27:12,659
lambdas basically we can do whatever we

570
00:27:12,659 --> 00:27:16,620
want on S3 buckets and we can also

571
00:27:16,620 --> 00:27:18,600
delete object

572
00:27:18,600 --> 00:27:21,000
on on the buckets so

573
00:27:21,000 --> 00:27:23,159
we can actually at the moment we can

574
00:27:23,159 --> 00:27:25,620
perform previous collection and delete

575
00:27:25,620 --> 00:27:28,459
all the data

576
00:27:29,220 --> 00:27:31,380
again another essay children instances

577
00:27:31,380 --> 00:27:34,740
at least at least the Pastoral is scoped

578
00:27:34,740 --> 00:27:38,580
to only a subset of rules

579
00:27:38,580 --> 00:27:42,179
but we knew that the Ultima security

580
00:27:42,179 --> 00:27:44,179
team created the

581
00:27:44,179 --> 00:27:49,440
custom denied policy to block some

582
00:27:49,440 --> 00:27:53,159
some a small a small subset of British

583
00:27:53,159 --> 00:27:55,500
escalation for example they denied the

584
00:27:55,500 --> 00:27:57,179
usage of class formation Chris Tech

585
00:27:57,179 --> 00:27:59,580
update stack run instances all the

586
00:27:59,580 --> 00:28:02,580
Lambda and update operation and all S3

587
00:28:02,580 --> 00:28:05,279
delete operation

588
00:28:05,279 --> 00:28:09,059
so now actually we don't know what to do

589
00:28:09,059 --> 00:28:12,240
first of all before starting to think

590
00:28:12,240 --> 00:28:14,580
what we can do I can do this or can do

591
00:28:14,580 --> 00:28:16,620
that we need a Target

592
00:28:16,620 --> 00:28:20,760
so we list all roles in AWS and we

593
00:28:20,760 --> 00:28:23,460
simply search for another admin

594
00:28:23,460 --> 00:28:26,159
and we see that there is a this ec2

595
00:28:26,159 --> 00:28:27,240
admin

596
00:28:27,240 --> 00:28:29,760
this ec2 admin

597
00:28:29,760 --> 00:28:31,380
actually

598
00:28:31,380 --> 00:28:35,460
is not admin of all ec2 but is admin of

599
00:28:35,460 --> 00:28:38,279
all the AWS account so this is our

600
00:28:38,279 --> 00:28:39,419
Target

601
00:28:39,419 --> 00:28:44,159
but how we can uh abuse this role for

602
00:28:44,159 --> 00:28:45,179
our

603
00:28:45,179 --> 00:28:49,080
Target which is delete all data

604
00:28:49,080 --> 00:28:51,419
maybe we can start up using the auto

605
00:28:51,419 --> 00:28:54,059
scaling Service uh Auto scaling service

606
00:28:54,059 --> 00:28:56,700
is just the obvious service this allows

607
00:28:56,700 --> 00:29:00,120
you to scale up and down cluster of ECU

608
00:29:00,120 --> 00:29:01,200
instances

609
00:29:01,200 --> 00:29:03,299
at night for example you don't want to

610
00:29:03,299 --> 00:29:07,080
pay for 1 000 ovc shoe instance for just

611
00:29:07,080 --> 00:29:10,260
a single HTTP request

612
00:29:10,260 --> 00:29:13,460
and auto scaling is allows us to create

613
00:29:13,460 --> 00:29:16,559
instances so first of all we need to

614
00:29:16,559 --> 00:29:19,500
find a way we need to find um

615
00:29:19,500 --> 00:29:22,919
an MI ID and my ID is the identification

616
00:29:22,919 --> 00:29:25,080
number of an image

617
00:29:25,080 --> 00:29:28,799
that we can use to start these instances

618
00:29:28,799 --> 00:29:32,399
uh second we need a way to access

619
00:29:32,399 --> 00:29:34,320
the instance that we are going to spawn

620
00:29:34,320 --> 00:29:37,620
we simply create a Chrome tab which runs

621
00:29:37,620 --> 00:29:39,000
on

622
00:29:39,000 --> 00:29:44,779
simply bash reverse shell every minute

623
00:29:51,000 --> 00:29:54,600
on the right you can see again the

624
00:29:54,600 --> 00:29:57,240
information that we actually got

625
00:29:57,240 --> 00:29:58,740
for now

626
00:29:58,740 --> 00:30:01,559
and now we created a launch

627
00:30:01,559 --> 00:30:04,039
configuration on auto scaling service

628
00:30:04,039 --> 00:30:08,580
and using the previous image ID we are

629
00:30:08,580 --> 00:30:11,220
going to start a T1 micro instance

630
00:30:11,220 --> 00:30:13,020
because we are poor we don't want to

631
00:30:13,020 --> 00:30:15,779
spend money and these instances are

632
00:30:15,779 --> 00:30:18,240
going to start up with attached role is

633
00:30:18,240 --> 00:30:20,179
the ec2 admin

634
00:30:20,179 --> 00:30:22,919
and this is actually just the

635
00:30:22,919 --> 00:30:24,960
configuration of the sensitivity you are

636
00:30:24,960 --> 00:30:26,880
going to spawn

637
00:30:26,880 --> 00:30:29,840
uh

638
00:30:30,480 --> 00:30:33,120
the first the the last flag of this

639
00:30:33,120 --> 00:30:36,419
command is user data and we are going to

640
00:30:36,419 --> 00:30:37,799
pass

641
00:30:37,799 --> 00:30:41,159
to this property our reversal script and

642
00:30:41,159 --> 00:30:43,679
user data actually used on ec2 instances

643
00:30:43,679 --> 00:30:47,760
to perform bootstrap operation so

644
00:30:47,760 --> 00:30:50,399
actually we got the access using another

645
00:30:50,399 --> 00:30:53,159
shell and a persistence because in each

646
00:30:53,159 --> 00:30:55,740
reboot this kit will be executed and

647
00:30:55,740 --> 00:30:58,559
then the account will be added and again

648
00:30:58,559 --> 00:31:01,679
we may have access using the reverse

649
00:31:01,679 --> 00:31:02,940
shell

650
00:31:02,940 --> 00:31:05,039
another information that we need to

651
00:31:05,039 --> 00:31:08,940
start our issue instances are the subnet

652
00:31:08,940 --> 00:31:12,720
because we need a way to root our

653
00:31:12,720 --> 00:31:15,179
traffic from the instance to our common

654
00:31:15,179 --> 00:31:18,000
and control so the VPC or the subplate

655
00:31:18,000 --> 00:31:21,620
needs to go out onto the internet

656
00:31:21,899 --> 00:31:24,299
in this environment we have three subnet

657
00:31:24,299 --> 00:31:27,779
on the same vpg VPC they are actually in

658
00:31:27,779 --> 00:31:29,580
different availability Zone

659
00:31:29,580 --> 00:31:32,279
so we just pick one and know for the

660
00:31:32,279 --> 00:31:33,360
best

661
00:31:33,360 --> 00:31:35,159
now we are going to create another

662
00:31:35,159 --> 00:31:36,960
scaling group

663
00:31:36,960 --> 00:31:40,380
and we want to spawn at minimum one

664
00:31:40,380 --> 00:31:43,200
instance at maximum one instant so one

665
00:31:43,200 --> 00:31:45,419
instance that's easy

666
00:31:45,419 --> 00:31:48,120
and with the subnet we choose randomly

667
00:31:48,120 --> 00:31:52,080
before and we wait simply for our shell

668
00:31:52,080 --> 00:31:55,980
that we received so uh

669
00:31:55,980 --> 00:31:58,860
actually we should be inside the

670
00:31:58,860 --> 00:32:01,260
instance the spawn with the ec2 admin

671
00:32:01,260 --> 00:32:04,140
attached since we are using Chrome tab

672
00:32:04,140 --> 00:32:07,679
we can control C on the reverse shell

673
00:32:07,679 --> 00:32:10,320
and just wait for another execution of

674
00:32:10,320 --> 00:32:11,940
crone

675
00:32:11,940 --> 00:32:14,640
and we should be easy to add me now we

676
00:32:14,640 --> 00:32:17,159
are easy to admin we bypassed all the

677
00:32:17,159 --> 00:32:20,700
deny previous the security team created

678
00:32:20,700 --> 00:32:23,340
and now we can actually

679
00:32:23,340 --> 00:32:26,640
list all buckets and delete

680
00:32:26,640 --> 00:32:31,200
and that's it the this granted data

681
00:32:31,200 --> 00:32:33,899
scientist actually got access to the

682
00:32:33,899 --> 00:32:37,200
buckets and deleted all our company data

683
00:32:37,200 --> 00:32:38,399
foreign

684
00:32:38,399 --> 00:32:41,340
what we learn is that we can we can't

685
00:32:41,340 --> 00:32:44,899
only find and block paths to

686
00:32:44,899 --> 00:32:47,580
admin privileges or domain admin

687
00:32:47,580 --> 00:32:49,080
privileges or administrator access

688
00:32:49,080 --> 00:32:50,940
privileges we need to actually to

689
00:32:50,940 --> 00:32:51,779
protect

690
00:32:51,779 --> 00:32:54,240
uh the company challenge crown jewels

691
00:32:54,240 --> 00:32:57,539
and backup anything you may back up on

692
00:32:57,539 --> 00:32:59,580
another account another S3 bucket

693
00:32:59,580 --> 00:33:01,760
off-site on paper

694
00:33:01,760 --> 00:33:05,039
on post it you can write each byte one

695
00:33:05,039 --> 00:33:07,740
by one on deposit and attach them on the

696
00:33:07,740 --> 00:33:08,520
wall

697
00:33:08,520 --> 00:33:11,700
do whatever you want please do backup

698
00:33:11,700 --> 00:33:14,460
and what is the problem

699
00:33:14,460 --> 00:33:17,340
how we can prevent such attacks

700
00:33:17,340 --> 00:33:19,559
interior is simple you just apply the

701
00:33:19,559 --> 00:33:20,940
least privileged Edge the previous

702
00:33:20,940 --> 00:33:23,760
principle you update the system hard and

703
00:33:23,760 --> 00:33:26,279
all the things use all the AWS Security

704
00:33:26,279 --> 00:33:27,720
Services

705
00:33:27,720 --> 00:33:29,340
but

706
00:33:29,340 --> 00:33:31,500
following that requirements is not

707
00:33:31,500 --> 00:33:34,500
always easy or possible in larger and

708
00:33:34,500 --> 00:33:36,899
complex environment because we may have

709
00:33:36,899 --> 00:33:39,120
a limited scope we have an eye number of

710
00:33:39,120 --> 00:33:42,059
entities Services resources or simply a

711
00:33:42,059 --> 00:33:45,360
limited capacity of the team to follow

712
00:33:45,360 --> 00:33:47,940
and control all changes so we just give

713
00:33:47,940 --> 00:33:50,159
root access to the no no no no that's

714
00:33:50,159 --> 00:33:53,159
not the scope of this talk and the

715
00:33:53,159 --> 00:33:56,039
review of permission in large and

716
00:33:56,039 --> 00:33:57,840
complex ecosystem

717
00:33:57,840 --> 00:34:00,539
it's difficult it's difficult for

718
00:34:00,539 --> 00:34:03,179
example the image on the right

719
00:34:03,179 --> 00:34:07,200
is uh just a portion of the Prima AWS

720
00:34:07,200 --> 00:34:09,839
organization each dot represents a

721
00:34:09,839 --> 00:34:11,699
resource

722
00:34:11,699 --> 00:34:13,980
and it's just a portion

723
00:34:13,980 --> 00:34:15,659
two wrappers from the cloud security

724
00:34:15,659 --> 00:34:18,659
Alliance stated most of the organization

725
00:34:18,659 --> 00:34:21,239
do not use any security automation at

726
00:34:21,239 --> 00:34:23,339
all and the main reason

727
00:34:23,339 --> 00:34:26,040
is the lack of knowledge and expertise

728
00:34:26,040 --> 00:34:28,679
on such fields

729
00:34:28,679 --> 00:34:31,739
more in general we need to have a global

730
00:34:31,739 --> 00:34:33,719
overview of the ecosystem because

731
00:34:33,719 --> 00:34:36,540
knowledge is the key and a full

732
00:34:36,540 --> 00:34:39,060
understanding of the environment from an

733
00:34:39,060 --> 00:34:41,460
eye level enables companies to establish

734
00:34:41,460 --> 00:34:43,320
priorities and fulfill security

735
00:34:43,320 --> 00:34:44,760
requirements

736
00:34:44,760 --> 00:34:46,918
and there is this motto that states that

737
00:34:46,918 --> 00:34:49,320
attackers taking rough and for example

738
00:34:49,320 --> 00:34:52,040
Bloodhound the tools that you may know

739
00:34:52,040 --> 00:34:55,980
uh to exploit and map active directory

740
00:34:55,980 --> 00:34:58,740
permission on a graph is the king of

741
00:34:58,740 --> 00:35:00,000
this idea

742
00:35:00,000 --> 00:35:02,820
but why we can't also protect our

743
00:35:02,820 --> 00:35:05,400
environment thinking in graph

744
00:35:05,400 --> 00:35:07,200
and that's why we started creating

745
00:35:07,200 --> 00:35:08,580
novola

746
00:35:08,580 --> 00:35:10,500
and novela is an open source and

747
00:35:10,500 --> 00:35:13,079
Community Driven tool developed by Prima

748
00:35:13,079 --> 00:35:15,180
security and that aims to perform

749
00:35:15,180 --> 00:35:17,640
automatic and manual security analysis

750
00:35:17,640 --> 00:35:20,940
on AWS environments using graph AML

751
00:35:20,940 --> 00:35:24,000
files Nova basically reflects reflects

752
00:35:24,000 --> 00:35:26,339
the Bloodhound traits used on active

753
00:35:26,339 --> 00:35:28,680
directory but on cloud environments

754
00:35:28,680 --> 00:35:31,020
specifically for AWS

755
00:35:31,020 --> 00:35:33,960
and using graph is possible to model AWS

756
00:35:33,960 --> 00:35:37,140
resources creating a digital twin using

757
00:35:37,140 --> 00:35:40,099
nodes and edges and like

758
00:35:40,099 --> 00:35:43,560
uses the advantages and principle of the

759
00:35:43,560 --> 00:35:47,160
graph Theory embedded inside neo4j to

760
00:35:47,160 --> 00:35:49,440
discover and reveal relationship between

761
00:35:49,440 --> 00:35:52,200
objects enabling that enabling saw

762
00:35:52,200 --> 00:35:54,780
Engineers to perform analysis not only

763
00:35:54,780 --> 00:35:56,940
security analysis but analysis because

764
00:35:56,940 --> 00:35:58,859
we have an eye level overview of our

765
00:35:58,859 --> 00:36:00,839
infrastructure

766
00:36:00,839 --> 00:36:03,540
and the need of this new tool is due to

767
00:36:03,540 --> 00:36:05,220
the lack of interactivity global

768
00:36:05,220 --> 00:36:07,440
overview and specific feature of the

769
00:36:07,440 --> 00:36:10,680
others but don't get me wrong don't stop

770
00:36:10,680 --> 00:36:14,220
using principal mapper Paco Scouts so

771
00:36:14,220 --> 00:36:16,260
it's cartography because such tools are

772
00:36:16,260 --> 00:36:19,619
amazing and we I use it we use it you

773
00:36:19,619 --> 00:36:20,880
should use it

774
00:36:20,880 --> 00:36:23,760
them but they're not quite filled our

775
00:36:23,760 --> 00:36:25,740
gaps so they that's why we started

776
00:36:25,740 --> 00:36:28,220
developing novela

777
00:36:28,220 --> 00:36:31,440
our tool has three main features dumped

778
00:36:31,440 --> 00:36:34,140
assess and enumerate the first one is

779
00:36:34,140 --> 00:36:36,900
used to dump all service configuration

780
00:36:36,900 --> 00:36:41,220
and IIM entities to create a graph from

781
00:36:41,220 --> 00:36:43,680
all configuration and relationship that

782
00:36:43,680 --> 00:36:46,260
graph can then maybe used to run queries

783
00:36:46,260 --> 00:36:49,619
assess using yaml files to ease the

784
00:36:49,619 --> 00:36:51,900
investigation the third model not yet

785
00:36:51,900 --> 00:36:53,040
implemented

786
00:36:53,040 --> 00:36:55,619
will be used to enumerate all accessible

787
00:36:55,619 --> 00:36:58,200
resources from a low privileged account

788
00:36:58,200 --> 00:37:00,720
and this is basically what the collector

789
00:37:00,720 --> 00:37:02,880
of Bloodhound performed on at the

790
00:37:02,880 --> 00:37:04,380
directory

791
00:37:04,380 --> 00:37:07,320
and for example using nuvola we can

792
00:37:07,320 --> 00:37:11,400
define a simple yaml file to find all

793
00:37:11,400 --> 00:37:14,940
ec2 instances with uh with the MDS V1

794
00:37:14,940 --> 00:37:17,220
enable the metadatan pointer

795
00:37:17,220 --> 00:37:20,099
and the syntax is easier than the one

796
00:37:20,099 --> 00:37:23,339
offered by Cipher that is the query

797
00:37:23,339 --> 00:37:26,599
engine for neo4j and this allows even

798
00:37:26,599 --> 00:37:28,920
non-arcore analysts to perform

799
00:37:28,920 --> 00:37:30,440
assessment

800
00:37:30,440 --> 00:37:33,140
for example the community

801
00:37:33,140 --> 00:37:37,859
should contribute and maybe you can to

802
00:37:37,859 --> 00:37:39,720
create new rules for example you can try

803
00:37:39,720 --> 00:37:41,640
to map all cheese Benchmark controls

804
00:37:41,640 --> 00:37:45,000
using yaml files and then automatically

805
00:37:45,000 --> 00:37:48,240
ingest them into novola to perform the

806
00:37:48,240 --> 00:37:52,040
Benchmark and get it and get the results

807
00:37:52,140 --> 00:37:54,480
the main advantage of using graphs

808
00:37:54,480 --> 00:37:57,599
obviously is not to use yaml file but is

809
00:37:57,599 --> 00:38:00,660
to find

810
00:38:00,660 --> 00:38:04,440
paths between two two points from A to B

811
00:38:04,440 --> 00:38:06,420
like the one that we saw in the first

812
00:38:06,420 --> 00:38:09,359
demo this actually is the output of a

813
00:38:09,359 --> 00:38:13,920
search on novola to create a way to

814
00:38:13,920 --> 00:38:16,680
display a previous escalation path

815
00:38:16,680 --> 00:38:19,440
we could have found the previous

816
00:38:19,440 --> 00:38:22,020
collection path for the demo one using a

817
00:38:22,020 --> 00:38:25,859
simple yaml file to query all users or

818
00:38:25,859 --> 00:38:29,160
roles with the associated action of IIM

819
00:38:29,160 --> 00:38:31,320
password and cut formation press stack

820
00:38:31,320 --> 00:38:35,760
to find a path to our targets our

821
00:38:35,760 --> 00:38:38,400
targets are the for example the policy

822
00:38:38,400 --> 00:38:39,960
administrator access or the action

823
00:38:39,960 --> 00:38:41,579
create role

824
00:38:41,579 --> 00:38:43,260
and in the output you can see that

825
00:38:43,260 --> 00:38:44,820
actually the cloudformation deployer

826
00:38:44,820 --> 00:38:47,240
role is printed

827
00:38:47,240 --> 00:38:51,660
detected that visceral can be used to

828
00:38:51,660 --> 00:38:54,740
gain administrator access

829
00:38:54,839 --> 00:38:57,240
addition to automation you can use neo4j

830
00:38:57,240 --> 00:38:59,880
browser or in the future Uh custom

831
00:38:59,880 --> 00:39:01,740
graphical interface

832
00:39:01,740 --> 00:39:03,660
we can manually explore the graph to the

833
00:39:03,660 --> 00:39:05,339
nice properties and the relationship

834
00:39:05,339 --> 00:39:06,540
manually

835
00:39:06,540 --> 00:39:09,180
and using Cipher is always possible to

836
00:39:09,180 --> 00:39:11,880
query specific properties of the nodes

837
00:39:11,880 --> 00:39:13,619
or the edges basically you can do

838
00:39:13,619 --> 00:39:15,660
whatever you want

839
00:39:15,660 --> 00:39:18,480
finally we got to an end

840
00:39:18,480 --> 00:39:20,820
and what we learn is that an eye level

841
00:39:20,820 --> 00:39:24,060
of review of our infrastructures

842
00:39:24,060 --> 00:39:26,220
may be necessary and from the beginning

843
00:39:26,220 --> 00:39:28,460
of this presentation we started to map

844
00:39:28,460 --> 00:39:32,400
AWS entity and relationship in graph

845
00:39:32,400 --> 00:39:34,740
and then with nuvoila we found a way to

846
00:39:34,740 --> 00:39:36,839
use this knowledge for good

847
00:39:36,839 --> 00:39:39,119
normalize an open source tool so we

848
00:39:39,119 --> 00:39:40,800
invite you to participate and contribute

849
00:39:40,800 --> 00:39:43,740
to this uh this newborn tool you may

850
00:39:43,740 --> 00:39:47,099
open put requests write some code delete

851
00:39:47,099 --> 00:39:50,099
some code open issue test the code you

852
00:39:50,099 --> 00:39:52,800
can do whatever you want but please go

853
00:39:52,800 --> 00:39:54,300
check it out

854
00:39:54,300 --> 00:39:56,520
I want to thank you for the this talk

855
00:39:56,520 --> 00:39:58,740
and I want to thank you also the romac

856
00:39:58,740 --> 00:40:03,618
staff for this opportunity they gave me

857
00:40:09,300 --> 00:40:12,140
thank you

