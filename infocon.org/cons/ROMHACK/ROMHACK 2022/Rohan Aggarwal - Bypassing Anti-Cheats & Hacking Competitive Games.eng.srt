1
00:00:00,170 --> 00:00:02,520
[Applause]

2
00:00:02,520 --> 00:00:05,580
so hello everyone first of all I would

3
00:00:05,580 --> 00:00:08,820
like to uh thank you for the organizing

4
00:00:08,820 --> 00:00:11,040
this awesome event and inviting me for

5
00:00:11,040 --> 00:00:12,240
speaking here

6
00:00:12,240 --> 00:00:15,960
so so in this talk I'll be sharing about

7
00:00:15,960 --> 00:00:18,420
my experience and research in hacking

8
00:00:18,420 --> 00:00:21,060
games and bypassing entity sheets

9
00:00:21,060 --> 00:00:23,580
so the question is why why would you

10
00:00:23,580 --> 00:00:26,340
want to do that and to be honest I don't

11
00:00:26,340 --> 00:00:29,039
know maybe you just want to admit that

12
00:00:29,039 --> 00:00:32,820
you suck at gaming or maybe you just

13
00:00:32,820 --> 00:00:35,340
want to have fun seeing people through

14
00:00:35,340 --> 00:00:37,739
walls or shooting at their head without

15
00:00:37,739 --> 00:00:40,620
even aiming at their heads or maybe you

16
00:00:40,620 --> 00:00:42,600
just want to earn a lot of money because

17
00:00:42,600 --> 00:00:44,340
uh

18
00:00:44,340 --> 00:00:47,160
uh game act uh making cheats is a

19
00:00:47,160 --> 00:00:49,440
multi-million dollar industry and people

20
00:00:49,440 --> 00:00:52,140
are living on it and uh

21
00:00:52,140 --> 00:00:55,079
also uh the things that you learn from

22
00:00:55,079 --> 00:00:58,739
game hacking uh is uh

23
00:00:58,739 --> 00:01:00,239
also the things that you learn from game

24
00:01:00,239 --> 00:01:02,399
hacking can also be applied in other

25
00:01:02,399 --> 00:01:05,400
fields like malware analysis because uh

26
00:01:05,400 --> 00:01:08,159
the things that you learn like internal

27
00:01:08,159 --> 00:01:11,400
Windows API and undocumented function

28
00:01:11,400 --> 00:01:13,860
can also be used in other stuff

29
00:01:13,860 --> 00:01:16,580
so

30
00:01:17,040 --> 00:01:20,580
so despite all these reasons I would

31
00:01:20,580 --> 00:01:23,340
still uh do not recommend you uh to

32
00:01:23,340 --> 00:01:25,740
cheat in the games because it ruins the

33
00:01:25,740 --> 00:01:28,380
experience for others so anyone here

34
00:01:28,380 --> 00:01:30,840
ever played competitive games

35
00:01:30,840 --> 00:01:34,439
like Apex Legend valrent

36
00:01:34,439 --> 00:01:36,000
paladins

37
00:01:36,000 --> 00:01:37,619
fortnite

38
00:01:37,619 --> 00:01:38,820
okay

39
00:01:38,820 --> 00:01:41,159
so I guess no one even used any cheats

40
00:01:41,159 --> 00:01:42,420
before

41
00:01:42,420 --> 00:01:44,759
So I myself have been playing games for

42
00:01:44,759 --> 00:01:47,579
a lot of time and I was always curious

43
00:01:47,579 --> 00:01:50,820
like how these hackers are able to hack

44
00:01:50,820 --> 00:01:53,399
this game like for example

45
00:01:53,399 --> 00:01:54,840
uh this

46
00:01:54,840 --> 00:01:57,360
so if you don't know what uh this game

47
00:01:57,360 --> 00:02:00,840
is this is uh well rant and currently it

48
00:02:00,840 --> 00:02:03,600
has one of the best entity cheat in the

49
00:02:03,600 --> 00:02:06,360
market called Vanguard because it runs

50
00:02:06,360 --> 00:02:10,199
at the boot of Windows and it keeps on

51
00:02:10,199 --> 00:02:12,720
running at the background 24 7. even if

52
00:02:12,720 --> 00:02:17,940
you are not playing games so uh and and

53
00:02:17,940 --> 00:02:20,700
it's not me so I found this server on

54
00:02:20,700 --> 00:02:24,660
Instagram so how did he do it uh maybe

55
00:02:24,660 --> 00:02:28,579
you'll find out at the end of the video

56
00:02:28,819 --> 00:02:31,739
so um so a little bit about myself I'm

57
00:02:31,739 --> 00:02:35,819
Rohan Agarwal my handle is and

58
00:02:35,819 --> 00:02:37,739
and I have a small company in India

59
00:02:37,739 --> 00:02:39,239
called defco security which provide

60
00:02:39,239 --> 00:02:42,300
penetration testing and continuous Asset

61
00:02:42,300 --> 00:02:44,879
Management Services I do bug Bounty as

62
00:02:44,879 --> 00:02:46,739
well and I have participated in hacker

63
00:02:46,739 --> 00:02:48,840
one and integrity live hacking events

64
00:02:48,840 --> 00:02:51,540
and I love playing games of course

65
00:02:51,540 --> 00:02:54,319
without cheats

66
00:02:55,620 --> 00:02:58,080
and so the agenda is get you all started

67
00:02:58,080 --> 00:03:01,500
in game hacking and demonstrate some

68
00:03:01,500 --> 00:03:04,319
working methods that still work for end

69
00:03:04,319 --> 00:03:06,599
for bypassing the anti-cheats and

70
00:03:06,599 --> 00:03:08,879
encourage more research in this field

71
00:03:08,879 --> 00:03:11,760
because currently game hacking is what

72
00:03:11,760 --> 00:03:14,280
is is what was presentation testing or

73
00:03:14,280 --> 00:03:17,400
bug bounties 10 or 15 years back so

74
00:03:17,400 --> 00:03:19,980
there's not many resources on resources

75
00:03:19,980 --> 00:03:20,819
online

76
00:03:20,819 --> 00:03:24,840
so also to encourage the ntg developers

77
00:03:24,840 --> 00:03:27,959
to uh make a more powerful entity sheet

78
00:03:27,959 --> 00:03:29,940
currently it's already powerful but

79
00:03:29,940 --> 00:03:34,159
still there is always room to improve

80
00:03:34,159 --> 00:03:37,800
so before we start I want to clarify uh

81
00:03:37,800 --> 00:03:40,080
what kind of what this talk is not about

82
00:03:40,080 --> 00:03:42,000
so usually when I talk about game

83
00:03:42,000 --> 00:03:46,500
hacking people uh assume that I'm

84
00:03:46,500 --> 00:03:49,140
finding vulnerabilities and finding

85
00:03:49,140 --> 00:03:51,480
vulnerabilities in anti-cheat code

86
00:03:51,480 --> 00:03:54,659
itself or game code itself and

87
00:03:54,659 --> 00:03:58,319
exploiting it to uh hack other players

88
00:03:58,319 --> 00:04:01,140
or hack company servers so the stock is

89
00:04:01,140 --> 00:04:03,180
not about that this stock is basically

90
00:04:03,180 --> 00:04:05,120
all about gaining the advantage

91
00:04:05,120 --> 00:04:09,299
competitive advantage over other players

92
00:04:09,299 --> 00:04:11,580
so I've divided this log into four

93
00:04:11,580 --> 00:04:13,980
section uh in the first one we'll

94
00:04:13,980 --> 00:04:16,440
quickly see the history of cheats and

95
00:04:16,440 --> 00:04:19,199
entity sheets and in the next section

96
00:04:19,199 --> 00:04:22,019
we're going to see some basic stuff that

97
00:04:22,019 --> 00:04:24,419
you need to know for game hacking and

98
00:04:24,419 --> 00:04:27,600
the in the next section we'll go uh

99
00:04:27,600 --> 00:04:30,960
development for finding hooks drivers

100
00:04:30,960 --> 00:04:33,300
and in the last I will show you a

101
00:04:33,300 --> 00:04:36,419
demonstration of one of the popular uh

102
00:04:36,419 --> 00:04:38,460
twitch game uh

103
00:04:38,460 --> 00:04:41,340
which which I hacked only for research

104
00:04:41,340 --> 00:04:43,699
purposes

105
00:04:43,699 --> 00:04:46,800
so a little bit history about game

106
00:04:46,800 --> 00:04:49,979
hacking so the very first game was made

107
00:04:49,979 --> 00:04:53,340
in 1957 and it was a tennis game and but

108
00:04:53,340 --> 00:04:56,639
it was not publicly available because it

109
00:04:56,639 --> 00:04:59,400
was in a laboratory and fun fact the guy

110
00:04:59,400 --> 00:05:02,040
who made that game was also responsible

111
00:05:02,040 --> 00:05:05,820
in making our first nuclear bomb so a

112
00:05:05,820 --> 00:05:08,960
very talented guy

113
00:05:09,080 --> 00:05:12,240
so but the video games gain its

114
00:05:12,240 --> 00:05:15,720
popularity in 1970s and 1980s you know

115
00:05:15,720 --> 00:05:19,259
when uh when the games were introduced

116
00:05:19,259 --> 00:05:21,240
for Public public use

117
00:05:21,240 --> 00:05:24,720
and in 1980s uh modding of uh game

118
00:05:24,720 --> 00:05:26,900
started happening using command line

119
00:05:26,900 --> 00:05:30,180
hexelita tools and uh

120
00:05:30,180 --> 00:05:32,940
and the first import was developed in

121
00:05:32,940 --> 00:05:36,199
1995 for Doom 2 game

122
00:05:36,199 --> 00:05:39,960
but the things uh started getting heated

123
00:05:39,960 --> 00:05:43,259
up heating up when popular games like

124
00:05:43,259 --> 00:05:47,060
Counter-Strike 1.6 uh started uh

125
00:05:47,060 --> 00:05:51,360
launching in early 2000 because you see

126
00:05:51,360 --> 00:05:53,759
when the cheating was done on single

127
00:05:53,759 --> 00:05:57,060
player games uh the only thing that is

128
00:05:57,060 --> 00:06:00,240
getting destroyed is uh the hacker that

129
00:06:00,240 --> 00:06:02,100
is doing the game that is hacking the

130
00:06:02,100 --> 00:06:04,500
game and not the others player or

131
00:06:04,500 --> 00:06:06,660
company servers but when these

132
00:06:06,660 --> 00:06:08,340
multiplayer games get get launched

133
00:06:08,340 --> 00:06:11,340
that's when uh things went serious

134
00:06:11,340 --> 00:06:13,380
because uh hackers were directly

135
00:06:13,380 --> 00:06:16,199
impacting others player experience and

136
00:06:16,199 --> 00:06:18,600
sometimes even the servers as well

137
00:06:18,600 --> 00:06:20,820
and since the success of online games

138
00:06:20,820 --> 00:06:24,360
depends on the uh current active user

139
00:06:24,360 --> 00:06:26,520
base how much uh how much game is

140
00:06:26,520 --> 00:06:30,060
popular so the the developers can let go

141
00:06:30,060 --> 00:06:32,699
of these small set of people ruining the

142
00:06:32,699 --> 00:06:35,220
experience of others so that's when in

143
00:06:35,220 --> 00:06:36,419
2000

144
00:06:36,419 --> 00:06:38,940
came the punk Buster which was the first

145
00:06:38,940 --> 00:06:42,360
entry cheat and in 2002 came back which

146
00:06:42,360 --> 00:06:45,660
is evolved well venti cheat so initially

147
00:06:45,660 --> 00:06:47,340
they were very successful in stopping

148
00:06:47,340 --> 00:06:50,759
most of the Cheetahs but uh as well as

149
00:06:50,759 --> 00:06:54,300
they were only user mode cheats so uh

150
00:06:54,300 --> 00:06:56,819
very quickly the hackers shift their

151
00:06:56,819 --> 00:06:58,919
cheats to the kernel level so that way

152
00:06:58,919 --> 00:07:01,800
they were able to bypass them so

153
00:07:01,800 --> 00:07:06,000
soon after that came these and uh

154
00:07:06,000 --> 00:07:08,460
kernel level entities like easy entity

155
00:07:08,460 --> 00:07:11,039
cheat battle eye or Vanguard and

156
00:07:11,039 --> 00:07:13,500
currently we are at this stage we are

157
00:07:13,500 --> 00:07:16,020
where they are mostly able to stop but

158
00:07:16,020 --> 00:07:19,800
not not all the hackers

159
00:07:19,800 --> 00:07:21,360
so I'm hoping you guys know the

160
00:07:21,360 --> 00:07:23,460
difference between user mode and kernel

161
00:07:23,460 --> 00:07:25,860
mode but if you still don't I'll give an

162
00:07:25,860 --> 00:07:28,740
example like uh whenever you open a

163
00:07:28,740 --> 00:07:31,500
browser so that is open in user mode and

164
00:07:31,500 --> 00:07:33,660
all the core functionalities that do

165
00:07:33,660 --> 00:07:35,699
that it does it happens in card number

166
00:07:35,699 --> 00:07:38,699
like uh Like You are downloading a file

167
00:07:38,699 --> 00:07:41,039
and it it needs to be written to the

168
00:07:41,039 --> 00:07:44,340
hard disk so it needs to it make the

169
00:07:44,340 --> 00:07:46,259
system called in the kernel for storing

170
00:07:46,259 --> 00:07:47,940
for getting the access to the hard drive

171
00:07:47,940 --> 00:07:51,120
and storing that on the hard disk

172
00:07:51,120 --> 00:07:53,099
so the main point with respect to game

173
00:07:53,099 --> 00:07:55,800
hacking is that uh user mode process

174
00:07:55,800 --> 00:07:58,220
doesn't have access to the kernel mode

175
00:07:58,220 --> 00:08:01,620
processor and memory so like if the

176
00:08:01,620 --> 00:08:04,400
entity sheet is in user mode so you can

177
00:08:04,400 --> 00:08:07,800
simply have you can simply make a driver

178
00:08:07,800 --> 00:08:10,800
in kernel mode and you and the entity

179
00:08:10,800 --> 00:08:12,780
will not be knowing because it's in user

180
00:08:12,780 --> 00:08:15,300
mode and and in the kernel World they

181
00:08:15,300 --> 00:08:18,259
don't have access to that

182
00:08:18,259 --> 00:08:20,639
so these are some of the features of

183
00:08:20,639 --> 00:08:23,220
candle antichrades uh think of and cheat

184
00:08:23,220 --> 00:08:26,879
like classic NT debugger and it has

185
00:08:26,879 --> 00:08:29,220
various signature detections so just

186
00:08:29,220 --> 00:08:32,399
like antivirus have signatures for

187
00:08:32,399 --> 00:08:33,740
viruses

188
00:08:33,740 --> 00:08:36,240
so and teach you'd also have signatures

189
00:08:36,240 --> 00:08:40,440
for cheats so initially kernel entity it

190
00:08:40,440 --> 00:08:43,020
was a big step for the good of Gaming

191
00:08:43,020 --> 00:08:45,899
Community right when it's launched 95

192
00:08:45,899 --> 00:08:48,660
percent of the shooters were instantly

193
00:08:48,660 --> 00:08:51,240
managed from the servers and of course

194
00:08:51,240 --> 00:08:54,779
it can't stop 100 of the cheaters uh

195
00:08:54,779 --> 00:08:57,500
because even ntg developers know that

196
00:08:57,500 --> 00:09:00,360
there will always be a dedicated or

197
00:09:00,360 --> 00:09:02,339
dedicated or determined ones that will

198
00:09:02,339 --> 00:09:05,760
always find a way uh to hack into the

199
00:09:05,760 --> 00:09:07,880
game

200
00:09:08,760 --> 00:09:11,760
so now we can move to the basics

201
00:09:11,760 --> 00:09:14,820
so anyone who is making a cheat first

202
00:09:14,820 --> 00:09:16,980
has to decide whether he wants to make

203
00:09:16,980 --> 00:09:19,740
an internal cheat or an external so

204
00:09:19,740 --> 00:09:22,140
internal as the name suggests is

205
00:09:22,140 --> 00:09:25,680
injected directly into the game memory

206
00:09:25,680 --> 00:09:28,620
so as it as it has direct access to the

207
00:09:28,620 --> 00:09:31,500
game it is very much it has great

208
00:09:31,500 --> 00:09:34,380
performance and it is much flexible by

209
00:09:34,380 --> 00:09:35,940
flexibility I mean it has great

210
00:09:35,940 --> 00:09:37,980
functionality it has great flexibility

211
00:09:37,980 --> 00:09:41,640
in adding the new cheat functionalities

212
00:09:41,640 --> 00:09:44,820
and uh internal sheets are mostly

213
00:09:44,820 --> 00:09:48,360
preferred for games with low level or no

214
00:09:48,360 --> 00:09:52,140
anti-cheats and external are as the

215
00:09:52,140 --> 00:09:54,480
names that is have their own processes

216
00:09:54,480 --> 00:09:57,360
and they manipulate the memory of the

217
00:09:57,360 --> 00:09:58,740
game externally

218
00:09:58,740 --> 00:10:00,060
and

219
00:10:00,060 --> 00:10:02,100
therefore since they are external for

220
00:10:02,100 --> 00:10:03,420
each read and write they are making

221
00:10:03,420 --> 00:10:05,880
different calls so therefore their

222
00:10:05,880 --> 00:10:08,640
performance is low as compared to

223
00:10:08,640 --> 00:10:11,399
internal and the functionality that they

224
00:10:11,399 --> 00:10:14,399
offer is also low but it's enough for

225
00:10:14,399 --> 00:10:16,260
doing what we want to do for like for

226
00:10:16,260 --> 00:10:19,080
example if you want to Simply do wall X

227
00:10:19,080 --> 00:10:22,800
or Aimbot you can do that stuff here

228
00:10:22,800 --> 00:10:25,560
and external genes are mostly preferred

229
00:10:25,560 --> 00:10:29,519
for games with strong antigens uh

230
00:10:29,519 --> 00:10:31,740
because uh strong entity cheats have

231
00:10:31,740 --> 00:10:34,380
great detection vectors for internal in

232
00:10:34,380 --> 00:10:37,920
internal hacks so that's why uh we

233
00:10:37,920 --> 00:10:40,380
prefer external for uh strong entities

234
00:10:40,380 --> 00:10:42,839
so we will we will be focusing on

235
00:10:42,839 --> 00:10:45,300
external only

236
00:10:45,300 --> 00:10:48,779
so how do these hackers bypass these

237
00:10:48,779 --> 00:10:50,700
kernel entities

238
00:10:50,700 --> 00:10:54,959
so as you can see here we have uh we

239
00:10:54,959 --> 00:10:57,120
have achieved which is in user mode and

240
00:10:57,120 --> 00:10:59,820
we have a game as well and in the kernel

241
00:10:59,820 --> 00:11:03,060
we have the entity driver which is

242
00:11:03,060 --> 00:11:05,820
supposed to protect the game's memory so

243
00:11:05,820 --> 00:11:07,260
as you can see we are trying to read

244
00:11:07,260 --> 00:11:11,220
write directly from user mode and for

245
00:11:11,220 --> 00:11:13,500
reading we need to have the handle for

246
00:11:13,500 --> 00:11:16,079
we need to create the handle uh to the

247
00:11:16,079 --> 00:11:20,459
game memory So What entity does is uh it

248
00:11:20,459 --> 00:11:23,339
has us it uses the OB register callback

249
00:11:23,339 --> 00:11:25,740
and as soon as it detects the handle it

250
00:11:25,740 --> 00:11:28,320
completely blocks it so in order to

251
00:11:28,320 --> 00:11:32,220
bypass that uh we also need to go uh to

252
00:11:32,220 --> 00:11:34,019
the kernel level as well so we basically

253
00:11:34,019 --> 00:11:36,480
create the driver and we load it into

254
00:11:36,480 --> 00:11:39,120
the kernel space and we send the

255
00:11:39,120 --> 00:11:41,940
instruction from user mode to whatever

256
00:11:41,940 --> 00:11:45,720
and our driver will be uh doing us doing

257
00:11:45,720 --> 00:11:47,519
the stuff for us for example Reading

258
00:11:47,519 --> 00:11:49,500
Writing the memory

259
00:11:49,500 --> 00:11:51,620
all right

260
00:11:51,620 --> 00:11:55,019
so what are the challenge like if you

261
00:11:55,019 --> 00:11:58,019
want to if you want to make your own uh

262
00:11:58,019 --> 00:12:00,180
kernel level cheat what are the

263
00:12:00,180 --> 00:12:03,000
challenges that you will be facing

264
00:12:03,000 --> 00:12:04,680
now the first one is how you can create

265
00:12:04,680 --> 00:12:06,060
your driver

266
00:12:06,060 --> 00:12:08,519
the second one is how we can load the

267
00:12:08,519 --> 00:12:11,220
driver into kernel like can you is it

268
00:12:11,220 --> 00:12:13,140
allowed to even load any driver into the

269
00:12:13,140 --> 00:12:14,160
kernel

270
00:12:14,160 --> 00:12:17,339
and how can you communicate from user

271
00:12:17,339 --> 00:12:19,440
remote to the kanama for example you

272
00:12:19,440 --> 00:12:22,680
have a user mode cheat how will you send

273
00:12:22,680 --> 00:12:24,839
instructions to your driver in the

274
00:12:24,839 --> 00:12:27,420
kernel and lastly even after doing all

275
00:12:27,420 --> 00:12:29,880
this how will you make your driver

276
00:12:29,880 --> 00:12:32,279
undetected because it will be making lot

277
00:12:32,279 --> 00:12:34,620
of noise at the kernel level so you need

278
00:12:34,620 --> 00:12:38,399
to also make sure that it it don't get

279
00:12:38,399 --> 00:12:41,480
caught up with the entity

280
00:12:41,519 --> 00:12:43,380
so now we can move to the cheat

281
00:12:43,380 --> 00:12:45,000
development phase

282
00:12:45,000 --> 00:12:47,820
so basically I've divided the whole G

283
00:12:47,820 --> 00:12:50,940
development cycle into five parts uh the

284
00:12:50,940 --> 00:12:53,339
first one which is reversing so

285
00:12:53,339 --> 00:12:56,760
basically uh you need to know uh what

286
00:12:56,760 --> 00:12:58,920
kind of cheat you are making like what

287
00:12:58,920 --> 00:13:00,899
things you need to manipulate what

288
00:13:00,899 --> 00:13:02,820
things you need to read for so for that

289
00:13:02,820 --> 00:13:04,920
you need to reverse the game for finding

290
00:13:04,920 --> 00:13:07,680
those things uh then uh you need to

291
00:13:07,680 --> 00:13:09,420
create the driver that will redirect

292
00:13:09,420 --> 00:13:12,600
memory that will send uh and third is

293
00:13:12,600 --> 00:13:14,279
the hooking which is the communication

294
00:13:14,279 --> 00:13:16,980
part which handles the communication

295
00:13:16,980 --> 00:13:19,920
from user mode to Kernel mode then the

296
00:13:19,920 --> 00:13:21,720
fourth is loading driver how will you

297
00:13:21,720 --> 00:13:24,360
load the driver and the fifth is the

298
00:13:24,360 --> 00:13:26,339
creating user mode

299
00:13:26,339 --> 00:13:30,420
so now we we can go uh deep into all the

300
00:13:30,420 --> 00:13:32,220
stuff

301
00:13:32,220 --> 00:13:34,320
before the first one is reverse

302
00:13:34,320 --> 00:13:36,660
engineering so usually in game hacking

303
00:13:36,660 --> 00:13:38,279
what we are doing is reading some

304
00:13:38,279 --> 00:13:41,579
address in the memory for example uh you

305
00:13:41,579 --> 00:13:45,060
want your health to be infinite so you

306
00:13:45,060 --> 00:13:47,579
need to First find the address uh

307
00:13:47,579 --> 00:13:51,120
address of that health health variable

308
00:13:51,120 --> 00:13:54,720
into the memory so for that you need to

309
00:13:54,720 --> 00:13:56,579
reverse the game so usually there are

310
00:13:56,579 --> 00:13:59,279
two ways uh you can do that the first

311
00:13:59,279 --> 00:14:01,980
one is debugging that is used usually

312
00:14:01,980 --> 00:14:04,980
cheat engine so maybe you have used uh

313
00:14:04,980 --> 00:14:08,480
in your childhood for hacking uh games

314
00:14:08,480 --> 00:14:10,680
and the second one is using

315
00:14:10,680 --> 00:14:13,440
disassembling using idea or any other

316
00:14:13,440 --> 00:14:15,180
disassembler

317
00:14:15,180 --> 00:14:17,459
now I personally will personally prefer

318
00:14:17,459 --> 00:14:20,639
cheat engine because uh it gets the job

319
00:14:20,639 --> 00:14:23,579
done easily and conveniently with idea

320
00:14:23,579 --> 00:14:25,380
there are a couple of things that you

321
00:14:25,380 --> 00:14:27,779
need to take care of first the game

322
00:14:27,779 --> 00:14:31,019
Winery is heavily obfuscated so you need

323
00:14:31,019 --> 00:14:33,660
to defer status first and for doing that

324
00:14:33,660 --> 00:14:36,180
you need to dump the binary using a

325
00:14:36,180 --> 00:14:37,320
kernel driver

326
00:14:37,320 --> 00:14:40,019
and the second thing is you need to be

327
00:14:40,019 --> 00:14:43,279
well aware of how that uh

328
00:14:43,279 --> 00:14:46,980
how that game is based on like is it is

329
00:14:46,980 --> 00:14:49,380
it based on a Unity engine or is it

330
00:14:49,380 --> 00:14:51,480
based on our undeal engine so you need

331
00:14:51,480 --> 00:14:55,019
to know the structure of that for uh for

332
00:14:55,019 --> 00:14:56,820
disassembling using idea so that's why

333
00:14:56,820 --> 00:15:00,360
uh is ticket to cheat engine so for that

334
00:15:00,360 --> 00:15:02,940
you don't need to worry about all those

335
00:15:02,940 --> 00:15:05,180
stuff

336
00:15:05,360 --> 00:15:08,519
so uh before I go into reverse anything

337
00:15:08,519 --> 00:15:11,820
I first need to clarify what are the

338
00:15:11,820 --> 00:15:15,180
offsets as they are very uh

339
00:15:15,180 --> 00:15:18,000
important point in reverse engineering

340
00:15:18,000 --> 00:15:20,820
so offset by the by the name suggest is

341
00:15:20,820 --> 00:15:23,279
how far is something with respect to

342
00:15:23,279 --> 00:15:24,180
another

343
00:15:24,180 --> 00:15:27,000
and why is it important why is it

344
00:15:27,000 --> 00:15:29,459
important here so as you can see we have

345
00:15:29,459 --> 00:15:33,420
starting point uh a and a is zero

346
00:15:33,420 --> 00:15:35,639
kilometer away from starting point B is

347
00:15:35,639 --> 00:15:37,620
12 kilometers so we can say that b

348
00:15:37,620 --> 00:15:41,339
offset is 12 kilometer away so why is it

349
00:15:41,339 --> 00:15:43,579
important in game hacking

350
00:15:43,579 --> 00:15:47,699
so basically uh the thing happens is

351
00:15:47,699 --> 00:15:50,279
whenever you load a game into the memory

352
00:15:50,279 --> 00:15:52,500
every time it will be having different

353
00:15:52,500 --> 00:15:55,800
uh address so like as you can see here

354
00:15:55,800 --> 00:15:58,680
we have first launch so you can see the

355
00:15:58,680 --> 00:16:01,139
game at the game is launched at 0x1 plus

356
00:16:01,139 --> 00:16:03,300
the address on the second launch you can

357
00:16:03,300 --> 00:16:05,579
see uh game is launched at four five six

358
00:16:05,579 --> 00:16:08,339
letters so let's say I want to set my

359
00:16:08,339 --> 00:16:10,980
health uh to whatever I want to

360
00:16:10,980 --> 00:16:13,800
so at the first launch I have to reverse

361
00:16:13,800 --> 00:16:16,560
the reverse the game using whatever she

362
00:16:16,560 --> 00:16:20,160
attention or disassembler so and and we

363
00:16:20,160 --> 00:16:22,079
get the address one two six so the

364
00:16:22,079 --> 00:16:24,000
second time also I have to do the same

365
00:16:24,000 --> 00:16:27,120
thing so instead of not reverse

366
00:16:27,120 --> 00:16:29,459
engineering again and again what I will

367
00:16:29,459 --> 00:16:32,339
do is find the offset of the health from

368
00:16:32,339 --> 00:16:34,680
the starting point which is the game

369
00:16:34,680 --> 00:16:35,880
Base address

370
00:16:35,880 --> 00:16:39,480
so I know here if you see one common

371
00:16:39,480 --> 00:16:41,940
thing that health is always three bytes

372
00:16:41,940 --> 00:16:44,040
away from the game memory as in first

373
00:16:44,040 --> 00:16:46,019
launch also it's three bytes away and

374
00:16:46,019 --> 00:16:47,880
second launch also three bytes away so

375
00:16:47,880 --> 00:16:49,560
what I can do is

376
00:16:49,560 --> 00:16:52,680
uh says the health offset is always

377
00:16:52,680 --> 00:16:55,259
three but away so I can always find the

378
00:16:55,259 --> 00:16:57,480
game memory first which is very easy to

379
00:16:57,480 --> 00:16:59,459
find using Windows apis or Windows

380
00:16:59,459 --> 00:17:00,360
function

381
00:17:00,360 --> 00:17:05,579
so to clarify all this uh uh again so

382
00:17:05,579 --> 00:17:07,799
let's say we have a game we launched the

383
00:17:07,799 --> 00:17:10,559
game and inside we have uh two

384
00:17:10,559 --> 00:17:12,480
structures only which is enemy and

385
00:17:12,480 --> 00:17:15,599
player and whenever you uh load the game

386
00:17:15,599 --> 00:17:17,579
the

387
00:17:17,579 --> 00:17:18,140
um

388
00:17:18,140 --> 00:17:21,000
structure and the members of it will

389
00:17:21,000 --> 00:17:24,299
always be side to side like you can see

390
00:17:24,299 --> 00:17:26,459
that ammo will always be four bytes away

391
00:17:26,459 --> 00:17:28,740
from player structure but the struct

392
00:17:28,740 --> 00:17:30,419
player structure itself can be loaded

393
00:17:30,419 --> 00:17:34,020
anywhere into the memory so so let's say

394
00:17:34,020 --> 00:17:38,400
I want to set my player ammo to 40. so

395
00:17:38,400 --> 00:17:41,700
first way I can do that is I get the

396
00:17:41,700 --> 00:17:43,860
address of the mo we are basically

397
00:17:43,860 --> 00:17:46,559
dereferencing the address and then we

398
00:17:46,559 --> 00:17:50,520
set the set it to 40. another best way

399
00:17:50,520 --> 00:17:53,580
a better way to do that is that

400
00:17:53,580 --> 00:17:55,679
since we know that ammo address is four

401
00:17:55,679 --> 00:17:57,900
bytes away from players player structure

402
00:17:57,900 --> 00:17:59,880
so we can find the player structure

403
00:17:59,880 --> 00:18:01,980
address add four bytes to it and we'll

404
00:18:01,980 --> 00:18:03,660
get the ammo address and we can then set

405
00:18:03,660 --> 00:18:04,919
to 40.

406
00:18:04,919 --> 00:18:08,460
even better ways to do that

407
00:18:08,460 --> 00:18:12,660
is to find the game address and since we

408
00:18:12,660 --> 00:18:14,700
know that player structure is 10 bytes

409
00:18:14,700 --> 00:18:18,120
away from game so we can just add a game

410
00:18:18,120 --> 00:18:19,860
address plus 10 byte which will give us

411
00:18:19,860 --> 00:18:22,559
player structure and we can then add

412
00:18:22,559 --> 00:18:24,720
four bytes which will give us ammo

413
00:18:24,720 --> 00:18:28,039
address and we can set to 40. and

414
00:18:28,039 --> 00:18:31,860
and this is how we are uh we will be

415
00:18:31,860 --> 00:18:34,559
representing what ammo offset is which

416
00:18:34,559 --> 00:18:38,460
is game uh exe plus 10 and which will

417
00:18:38,460 --> 00:18:42,360
point to 4 and we can set that to ammo

418
00:18:42,360 --> 00:18:44,479
address

419
00:18:44,940 --> 00:18:48,000
so have a quick demo for offsets but I

420
00:18:48,000 --> 00:18:50,640
think since we are short of time and

421
00:18:50,640 --> 00:18:53,280
and uh there are a lot more things that

422
00:18:53,280 --> 00:18:55,620
I need to cover here so I'll just keep

423
00:18:55,620 --> 00:18:57,780
that for at the end and if we have time

424
00:18:57,780 --> 00:18:59,640
I'll play that

425
00:18:59,640 --> 00:19:03,240
uh so this is a screenshot from uh from

426
00:19:03,240 --> 00:19:05,880
that demo basically we uh so we

427
00:19:05,880 --> 00:19:08,460
basically find the paladins which is a

428
00:19:08,460 --> 00:19:11,100
game protected by EAC uh using cheat

429
00:19:11,100 --> 00:19:13,500
engine we found the ad uh Health offset

430
00:19:13,500 --> 00:19:16,140
which is a five level deep pointer

431
00:19:16,140 --> 00:19:18,360
and

432
00:19:18,360 --> 00:19:21,720
and this is a very simple uh C plus plus

433
00:19:21,720 --> 00:19:25,020
program which only works for games uh

434
00:19:25,020 --> 00:19:27,900
that don't have entity sheets so this is

435
00:19:27,900 --> 00:19:30,480
just to show you that how easily we can

436
00:19:30,480 --> 00:19:33,720
uh using C plus plus read or write the

437
00:19:33,720 --> 00:19:35,640
memory for the games that don't have

438
00:19:35,640 --> 00:19:38,100
attitude

439
00:19:38,100 --> 00:19:41,100
so the next we can move to creating

440
00:19:41,100 --> 00:19:44,460
kernel driver and for that uh we will be

441
00:19:44,460 --> 00:19:46,940
needing some tools like visual studio

442
00:19:46,940 --> 00:19:52,559
uh wtk and a debugger for debugging

443
00:19:52,559 --> 00:19:55,380
and so before I overwhelm you with the

444
00:19:55,380 --> 00:19:58,320
uh the whole cheat uh I would like I

445
00:19:58,320 --> 00:20:01,740
would first like to show you the hello

446
00:20:01,740 --> 00:20:04,020
world driver itself like how other

447
00:20:04,020 --> 00:20:07,620
driver you can make it and how you can

448
00:20:07,620 --> 00:20:08,820
debug that

449
00:20:08,820 --> 00:20:11,600
so

450
00:20:25,799 --> 00:20:28,639
so yeah

451
00:20:33,539 --> 00:20:36,000
so yeah so as you can see if you have

452
00:20:36,000 --> 00:20:39,059
ever coded in C plus plus uh so you know

453
00:20:39,059 --> 00:20:41,520
that the starting point is always void

454
00:20:41,520 --> 00:20:46,380
main so same here uh for driver itself

455
00:20:46,380 --> 00:20:49,380
also the starting points point is uh

456
00:20:49,380 --> 00:20:52,140
driver entry and you can also customize

457
00:20:52,140 --> 00:20:55,320
the starting point in the Linker setting

458
00:20:55,320 --> 00:20:57,840
as well just make sure whatever the

459
00:20:57,840 --> 00:21:00,840
driver entries here uh the link or

460
00:21:00,840 --> 00:21:02,760
setting will also we will be having that

461
00:21:02,760 --> 00:21:05,760
so basically what we are whenever we

462
00:21:05,760 --> 00:21:07,320
load our driver it will first go to

463
00:21:07,320 --> 00:21:10,740
driver entry and uh

464
00:21:10,740 --> 00:21:12,840
since the driver doesn't unload itself

465
00:21:12,840 --> 00:21:14,280
we need to create an object for

466
00:21:14,280 --> 00:21:17,100
unloading as well so that's what we have

467
00:21:17,100 --> 00:21:19,860
done here we created object and inside

468
00:21:19,860 --> 00:21:21,660
object we just simply printed that we

469
00:21:21,660 --> 00:21:23,880
are out of the kernel and it also has a

470
00:21:23,880 --> 00:21:25,919
header files as well for defining this

471
00:21:25,919 --> 00:21:30,780
function now I can show you how uh how

472
00:21:30,780 --> 00:21:32,580
it actually works how what happens in

473
00:21:32,580 --> 00:21:35,000
the background

474
00:21:38,940 --> 00:21:41,419
together

475
00:21:46,320 --> 00:21:49,460
uh so I have I have here a virtual box

476
00:21:49,460 --> 00:21:52,820
running latest windows

477
00:21:52,820 --> 00:21:56,880
so this is what uh this is our hello

478
00:21:56,880 --> 00:22:00,059
driver and uh

479
00:22:00,059 --> 00:22:03,600
and follow for loading it

480
00:22:03,600 --> 00:22:06,780
uh one of the ways you can load it is uh

481
00:22:06,780 --> 00:22:09,840
Windows as internal way of loading using

482
00:22:09,840 --> 00:22:11,940
test signing model so you need to enable

483
00:22:11,940 --> 00:22:13,559
test sending mode as you can see on the

484
00:22:13,559 --> 00:22:15,780
bottom right we have test mode open and

485
00:22:15,780 --> 00:22:18,419
using that you can load any driver but

486
00:22:18,419 --> 00:22:21,720
the thing is the end if you are inside

487
00:22:21,720 --> 00:22:24,179
the test mode you cannot launch any game

488
00:22:24,179 --> 00:22:28,080
because NT cheats will will be detecting

489
00:22:28,080 --> 00:22:31,440
this mode so it's just for testing your

490
00:22:31,440 --> 00:22:34,679
drivers and debugging them so first you

491
00:22:34,679 --> 00:22:36,900
need to for entering test mode you need

492
00:22:36,900 --> 00:22:40,559
to set that command in command from BCD

493
00:22:40,559 --> 00:22:43,679
edit dot set and then you need to reboot

494
00:22:43,679 --> 00:22:45,299
your system and it will be booted into

495
00:22:45,299 --> 00:22:46,380
test mode

496
00:22:46,380 --> 00:22:48,360
so the next thing is you need to create

497
00:22:48,360 --> 00:22:53,299
is the service so I have already

498
00:23:13,799 --> 00:23:16,140
so I've already created the service as

499
00:23:16,140 --> 00:23:19,320
you can see it already failed so to load

500
00:23:19,320 --> 00:23:22,740
this driver into the kernel all you have

501
00:23:22,740 --> 00:23:27,000
to do is uh as he create

502
00:23:27,000 --> 00:23:30,380
the driver name

503
00:23:40,140 --> 00:23:43,340
for yes he start

504
00:23:52,620 --> 00:23:57,139
so the driver is loaded

505
00:24:04,039 --> 00:24:08,480
and if I can show you

506
00:24:14,400 --> 00:24:17,600
in the driver View

507
00:24:21,840 --> 00:24:24,059
so it was it is showing all the

508
00:24:24,059 --> 00:24:26,460
currently driver that are loaded on the

509
00:24:26,460 --> 00:24:28,580
system

510
00:24:43,020 --> 00:24:46,760
uh so yeah this one

511
00:24:47,940 --> 00:24:50,159
so as you can see the driver is loaded

512
00:24:50,159 --> 00:24:53,220
and in the debugger also I can show you

513
00:24:53,220 --> 00:24:55,700
the message

514
00:25:05,360 --> 00:25:07,980
just make sure the capture kernel is

515
00:25:07,980 --> 00:25:11,299
open and now I will

516
00:25:11,539 --> 00:25:14,039
I will now unload the driver and it

517
00:25:14,039 --> 00:25:15,659
should

518
00:25:15,659 --> 00:25:18,620
print the message

519
00:25:23,280 --> 00:25:25,860
yeah so whatever the debug message we

520
00:25:25,860 --> 00:25:29,220
send uh it just printed on the Kernel

521
00:25:29,220 --> 00:25:33,980
and we are able to see that here so the

522
00:25:37,919 --> 00:25:40,620
so now as we have seen the driver itself

523
00:25:40,620 --> 00:25:44,159
a very basic driver uh next thing which

524
00:25:44,159 --> 00:25:47,220
is very important here is cooking so in

525
00:25:47,220 --> 00:25:50,100
order to rewrite the target memory using

526
00:25:50,100 --> 00:25:51,380
a loaded driver

527
00:25:51,380 --> 00:25:54,960
we need a communication path for that so

528
00:25:54,960 --> 00:25:57,299
as you can see here we are trying to

529
00:25:57,299 --> 00:25:59,520
communicate to our driver which is in

530
00:25:59,520 --> 00:26:01,440
the kernel and we can't actually

531
00:26:01,440 --> 00:26:03,539
communicate through it so hooking

532
00:26:03,539 --> 00:26:06,539
actually provides a path for it and

533
00:26:06,539 --> 00:26:08,580
cooking basically what does is it

534
00:26:08,580 --> 00:26:11,220
changes the flow of execution of a

535
00:26:11,220 --> 00:26:13,919
function so how are we going to do that

536
00:26:13,919 --> 00:26:16,159
is

537
00:26:16,260 --> 00:26:20,460
we will hijack a system called which is

538
00:26:20,460 --> 00:26:22,559
already provided inside the Windows

539
00:26:22,559 --> 00:26:24,059
driver you can use any Windows driver

540
00:26:24,059 --> 00:26:27,960
like dxg kernel.sears which is a direct

541
00:26:27,960 --> 00:26:30,779
test driver or Intel drivers so they

542
00:26:30,779 --> 00:26:33,240
have system calls in that so what you'll

543
00:26:33,240 --> 00:26:35,580
do is uh you'll place your instruction

544
00:26:35,580 --> 00:26:39,179
that hey I want to uh I want to

545
00:26:39,179 --> 00:26:41,760
communicate with my driver and here I

546
00:26:41,760 --> 00:26:45,179
have send set an instruction or a shell

547
00:26:45,179 --> 00:26:47,640
code in starting of the system call so

548
00:26:47,640 --> 00:26:50,419
whenever I call that system call

549
00:26:50,419 --> 00:26:54,140
the system call will uh

550
00:26:54,140 --> 00:26:56,760
transfer our instruction to the driver

551
00:26:56,760 --> 00:27:00,659
itself and to understand that in detail

552
00:27:00,659 --> 00:27:03,240
I have a diagram I have a diagram here

553
00:27:03,240 --> 00:27:05,159
so as you can see we have a user mode

554
00:27:05,159 --> 00:27:08,279
and the kernel we have the driver with

555
00:27:08,279 --> 00:27:10,340
the system call which we are going to

556
00:27:10,340 --> 00:27:14,340
hook to and we have a driver as well so

557
00:27:14,340 --> 00:27:16,260
you can see that we are trying to

558
00:27:16,260 --> 00:27:18,779
communicate but we can't do that because

559
00:27:18,779 --> 00:27:20,940
the way we will be loading our driver

560
00:27:20,940 --> 00:27:23,220
which is manual mapping and we can't do

561
00:27:23,220 --> 00:27:24,179
that

562
00:27:24,179 --> 00:27:27,260
so in order to do that uh we are

563
00:27:27,260 --> 00:27:29,700
invoking a system call with our

564
00:27:29,700 --> 00:27:31,679
instruction which is whatever read or

565
00:27:31,679 --> 00:27:34,380
write you want to do and it will go to a

566
00:27:34,380 --> 00:27:36,900
system call and inside system call what

567
00:27:36,900 --> 00:27:39,539
we have done is uh we have added a Shell

568
00:27:39,539 --> 00:27:42,539
Code which is basically doing which is

569
00:27:42,539 --> 00:27:44,760
basically what you're doing is uh

570
00:27:44,760 --> 00:27:46,980
setting the racks register to the

571
00:27:46,980 --> 00:27:48,840
address of our function in our driver

572
00:27:48,840 --> 00:27:52,740
and jumping to that so using hooking we

573
00:27:52,740 --> 00:27:54,679
are able to uh

574
00:27:54,679 --> 00:27:57,600
ah we are able to hook the system call

575
00:27:57,600 --> 00:28:00,179
which are which will be uh sending the

576
00:28:00,179 --> 00:28:01,740
instruction to whatever basically we are

577
00:28:01,740 --> 00:28:03,720
able to communicate with the with the

578
00:28:03,720 --> 00:28:06,120
driver itself

579
00:28:06,120 --> 00:28:09,419
so till now uh what we have done is

580
00:28:09,419 --> 00:28:11,580
basic hello world driver we have seen

581
00:28:11,580 --> 00:28:13,620
how we can communicate with the driver

582
00:28:13,620 --> 00:28:16,440
which is using hooking and so what else

583
00:28:16,440 --> 00:28:18,960
we need to do with the driver as well I

584
00:28:18,960 --> 00:28:21,080
will show that

585
00:28:21,080 --> 00:28:24,720
so the first thing it should uh it

586
00:28:24,720 --> 00:28:27,120
should have is able to get the system

587
00:28:27,120 --> 00:28:29,340
call address so if I go to previous

588
00:28:29,340 --> 00:28:32,179
slide we so as you can see we are

589
00:28:32,179 --> 00:28:34,980
invoking the system call so for that we

590
00:28:34,980 --> 00:28:36,600
need to get the address of that first

591
00:28:36,600 --> 00:28:38,760
cell so it should be able to get that

592
00:28:38,760 --> 00:28:39,779
address

593
00:28:39,779 --> 00:28:44,159
uh and the second part is hooking uh it

594
00:28:44,159 --> 00:28:45,960
should be able to place our the Shell

595
00:28:45,960 --> 00:28:47,880
Code into the system call

596
00:28:47,880 --> 00:28:49,500
and

597
00:28:49,500 --> 00:28:53,820
the third is hook Handler itself uh for

598
00:28:53,820 --> 00:28:55,799
so basically whatever the instruction we

599
00:28:55,799 --> 00:28:57,600
are sending to a driver it should be

600
00:28:57,600 --> 00:28:59,039
handled you should be able to handle

601
00:28:59,039 --> 00:29:02,039
whether it's read or write

602
00:29:02,039 --> 00:29:04,260
and the fourth one is clearing the

603
00:29:04,260 --> 00:29:06,960
traces so whenever we load a driver it

604
00:29:06,960 --> 00:29:09,240
creates not a fly noise and there are

605
00:29:09,240 --> 00:29:13,440
some uh tables inside which these things

606
00:29:13,440 --> 00:29:15,600
get logged so you need to also clear

607
00:29:15,600 --> 00:29:18,260
those things

608
00:29:19,020 --> 00:29:22,200
so I can

609
00:29:22,200 --> 00:29:24,539
just go over

610
00:29:24,539 --> 00:29:26,700
the driver itself the code of the driver

611
00:29:26,700 --> 00:29:29,179
itself

612
00:29:45,659 --> 00:29:47,580
true

613
00:29:47,580 --> 00:29:49,980
so just like I showed you in the hello

614
00:29:49,980 --> 00:29:53,039
world driver we have here a driver entry

615
00:29:53,039 --> 00:29:56,880
and we have a kernel function uh so we

616
00:29:56,880 --> 00:29:59,059
can

617
00:30:03,480 --> 00:30:06,480
so just to give you overview uh this is

618
00:30:06,480 --> 00:30:09,659
the part uh where where we are getting

619
00:30:09,659 --> 00:30:12,480
the system call address so in this we

620
00:30:12,480 --> 00:30:15,059
are targeting the system call which is

621
00:30:15,059 --> 00:30:17,460
NT open composition which is very good

622
00:30:17,460 --> 00:30:19,380
and uh

623
00:30:19,380 --> 00:30:22,380
this system call is inside the dxg

624
00:30:22,380 --> 00:30:27,480
kernel.sys so we are targeting that and

625
00:30:27,480 --> 00:30:30,480
and here we are placing uh our Shell

626
00:30:30,480 --> 00:30:33,899
Code into that thing so that it so that

627
00:30:33,899 --> 00:30:39,418
it can transfer our instructions and

628
00:30:41,880 --> 00:30:44,760
and this is the hook Handler

629
00:30:44,760 --> 00:30:46,380
which will be handling all the

630
00:30:46,380 --> 00:30:47,640
instruction that we are sending whether

631
00:30:47,640 --> 00:30:50,279
it's read or write so there are a lot

632
00:30:50,279 --> 00:30:53,760
more stuff going on and uh I can't like

633
00:30:53,760 --> 00:30:56,940
explain all this stuff you need to most

634
00:30:56,940 --> 00:30:59,039
of them are undocumented undocumented

635
00:30:59,039 --> 00:31:02,580
functions so you need to uh explore it

636
00:31:02,580 --> 00:31:05,159
on your own and see what what is going

637
00:31:05,159 --> 00:31:06,779
on at the end maybe just Google these

638
00:31:06,779 --> 00:31:08,640
function and you'll get to know what is

639
00:31:08,640 --> 00:31:10,500
happening

640
00:31:10,500 --> 00:31:13,580
and uh

641
00:31:15,360 --> 00:31:19,620
and I can show you uh

642
00:31:19,620 --> 00:31:23,719
what is happening at the back end

643
00:31:33,020 --> 00:31:36,480
so I already have here the driver itself

644
00:31:36,480 --> 00:31:39,440
and

645
00:31:41,039 --> 00:31:44,779
let me open a debugger

646
00:32:16,260 --> 00:32:20,658
we need to do the kernel debug local

647
00:32:24,600 --> 00:32:27,600
foreign

648
00:32:28,640 --> 00:32:32,340
just reload the driver which is which is

649
00:32:32,340 --> 00:32:35,299
having our system call

650
00:32:50,220 --> 00:32:54,659
and now if we uh we should be able to

651
00:32:54,659 --> 00:32:58,740
uh disassemble this driver

652
00:32:58,740 --> 00:33:04,039
and to show you the system call in this

653
00:33:09,000 --> 00:33:12,620
so this is a system called

654
00:33:28,440 --> 00:33:30,740
so as you can see we got the system call

655
00:33:30,740 --> 00:33:33,539
and if you see the first few

656
00:33:33,539 --> 00:33:36,360
instructions that there is no uh move

657
00:33:36,360 --> 00:33:38,159
racks or whatever the Shell Code which

658
00:33:38,159 --> 00:33:40,500
will be which we will placing so now

659
00:33:40,500 --> 00:33:42,899
I'll just uh load the driver and you can

660
00:33:42,899 --> 00:33:45,899
see our Shell Code which will be placed

661
00:33:45,899 --> 00:33:48,439
inside here

662
00:34:04,679 --> 00:34:07,679
foreign

663
00:34:24,800 --> 00:34:27,418
which I was talking before the move rack

664
00:34:27,418 --> 00:34:30,359
jump racks it will it will be pushed on

665
00:34:30,359 --> 00:34:33,060
the very first instruction of the system

666
00:34:33,060 --> 00:34:34,918
calls so whenever I will be invoking

667
00:34:34,918 --> 00:34:38,280
that it will be jumping uh to our hook

668
00:34:38,280 --> 00:34:39,719
Handler which will be handling all the

669
00:34:39,719 --> 00:34:42,199
instructions

670
00:34:50,099 --> 00:34:54,060
so we have seen the driver itself uh

671
00:34:54,060 --> 00:34:57,599
then uh the next time the next slide is

672
00:34:57,599 --> 00:35:00,240
very important as it as it can make or

673
00:35:00,240 --> 00:35:03,540
break your uh cheated self so what are

674
00:35:03,540 --> 00:35:05,400
the detection vectors while you are

675
00:35:05,400 --> 00:35:07,680
using this Fork so the very first thing

676
00:35:07,680 --> 00:35:09,480
is the hook it's the hook function

677
00:35:09,480 --> 00:35:11,040
itself the system call that I was

678
00:35:11,040 --> 00:35:13,260
talking about uh

679
00:35:13,260 --> 00:35:15,599
that is very widely known by The Entity

680
00:35:15,599 --> 00:35:18,540
so if you use that you will instantly

681
00:35:18,540 --> 00:35:21,780
get detected so you need to find your

682
00:35:21,780 --> 00:35:23,820
own system call it can be inside that

683
00:35:23,820 --> 00:35:26,820
dxg kernel.sys or you can find your own

684
00:35:26,820 --> 00:35:28,460
driver

685
00:35:28,460 --> 00:35:31,800
or you can find the your own driver in

686
00:35:31,800 --> 00:35:33,359
which you can find the your own system

687
00:35:33,359 --> 00:35:35,760
call and the second

688
00:35:35,760 --> 00:35:37,560
thing that you need to take care of is

689
00:35:37,560 --> 00:35:40,320
the style code itself the uh the

690
00:35:40,320 --> 00:35:41,820
assembly code that you are pushing

691
00:35:41,820 --> 00:35:43,859
inside the uh

692
00:35:43,859 --> 00:35:46,800
system call move racket jump racks so

693
00:35:46,800 --> 00:35:49,020
this is also very uh The Entity sheet

694
00:35:49,020 --> 00:35:51,599
have made signature off so you need to

695
00:35:51,599 --> 00:35:54,599
create your own Shell Code which will be

696
00:35:54,599 --> 00:35:56,760
doing the same stuff as what this is

697
00:35:56,760 --> 00:35:59,160
doing the one that I'm using has 11 line

698
00:35:59,160 --> 00:36:01,560
of assembly and the hook function that

699
00:36:01,560 --> 00:36:03,180
I'm using is totally in a different

700
00:36:03,180 --> 00:36:05,400
driver

701
00:36:05,400 --> 00:36:07,800
so as you can see this is a screenshot

702
00:36:07,800 --> 00:36:11,820
of the driver itself so the this hook

703
00:36:11,820 --> 00:36:13,560
function you need to change the NT open

704
00:36:13,560 --> 00:36:15,839
and the Shell Code which you have we are

705
00:36:15,839 --> 00:36:17,940
placing you need to change those in

706
00:36:17,940 --> 00:36:20,040
order to get in order to be undetected

707
00:36:20,040 --> 00:36:23,640
now I can't tell you like

708
00:36:23,640 --> 00:36:25,680
what you should do because as soon as I

709
00:36:25,680 --> 00:36:29,520
do that uh the the everyone is watching

710
00:36:29,520 --> 00:36:31,920
this so as soon as I do that the

711
00:36:31,920 --> 00:36:34,320
anti-cheat company will make signature

712
00:36:34,320 --> 00:36:36,300
for it or if we use it or many people

713
00:36:36,300 --> 00:36:38,700
use it uh they will get to know about it

714
00:36:38,700 --> 00:36:41,460
and they can easily make signature and

715
00:36:41,460 --> 00:36:44,040
it will get banned

716
00:36:44,040 --> 00:36:46,500
so the next thing is how will you load

717
00:36:46,500 --> 00:36:47,940
the driver you have created your driver

718
00:36:47,940 --> 00:36:50,520
you have you got the hook the next

719
00:36:50,520 --> 00:36:52,859
question is how you can load it so one

720
00:36:52,859 --> 00:36:56,099
thing one way I showed you was the test

721
00:36:56,099 --> 00:36:58,920
signing mode but the thing that in that

722
00:36:58,920 --> 00:37:00,780
is uh

723
00:37:00,780 --> 00:37:02,579
it doesn't work with modern entity

724
00:37:02,579 --> 00:37:06,359
sheets so you can't like uh so you using

725
00:37:06,359 --> 00:37:09,180
that you can't load your driver the next

726
00:37:09,180 --> 00:37:11,839
thing is you can pay money to Microsoft

727
00:37:11,839 --> 00:37:14,940
to get your driver signed by them which

728
00:37:14,940 --> 00:37:17,339
will give you the certified for that but

729
00:37:17,339 --> 00:37:19,800
the thing is you have to pay it and it

730
00:37:19,800 --> 00:37:22,320
can be easily revoked by them if if it

731
00:37:22,320 --> 00:37:24,900
gets reported or if it's get detected

732
00:37:24,900 --> 00:37:27,900
so the next thing uh the next best way

733
00:37:27,900 --> 00:37:31,020
you can do is exploit so basically you

734
00:37:31,020 --> 00:37:34,200
exploit the the officially signed driver

735
00:37:34,200 --> 00:37:36,300
itself for example

736
00:37:36,300 --> 00:37:40,140
uh this is a tool called KD mapper what

737
00:37:40,140 --> 00:37:42,420
it does is it there is a vulnerability

738
00:37:42,420 --> 00:37:43,980
inside a

739
00:37:43,980 --> 00:37:49,140
Intel driver which is ikey IQ VW and

740
00:37:49,140 --> 00:37:51,060
it exploits the vulnerable trainer to

741
00:37:51,060 --> 00:37:53,460
manually map a driver into the kernel

742
00:37:53,460 --> 00:37:55,740
memory what I mean by manually mapping

743
00:37:55,740 --> 00:37:59,099
is it allocates some memory and it just

744
00:37:59,099 --> 00:38:01,920
throws a driver into that memory so so

745
00:38:01,920 --> 00:38:05,180
that way uh using some vulnerable travel

746
00:38:05,180 --> 00:38:08,640
which are officially signed you can load

747
00:38:08,640 --> 00:38:10,920
your unsigned driver into the kernel

748
00:38:10,920 --> 00:38:13,560
memory and to do that all you need to do

749
00:38:13,560 --> 00:38:16,160
is KDM app the driver itself

750
00:38:16,160 --> 00:38:19,619
and one thing which is also beneficial

751
00:38:19,619 --> 00:38:22,740
for you of using this KD mapper is that

752
00:38:22,740 --> 00:38:25,500
it will automatically clear most of the

753
00:38:25,500 --> 00:38:28,920
traces like the most major places are mm

754
00:38:28,920 --> 00:38:31,140
and load driver with B cache and G

755
00:38:31,140 --> 00:38:33,900
kernel so these are all get get tracked

756
00:38:33,900 --> 00:38:35,460
inside the kernel when you load your

757
00:38:35,460 --> 00:38:38,400
driver when you hook it so this tool

758
00:38:38,400 --> 00:38:40,020
automatically creates those but it

759
00:38:40,020 --> 00:38:42,780
doesn't clear everything so you need to

760
00:38:42,780 --> 00:38:45,420
reverse the entity itself and see what

761
00:38:45,420 --> 00:38:48,720
kind of buckets or the logs they are

762
00:38:48,720 --> 00:38:52,339
checking in inside the kernel itself

763
00:39:00,780 --> 00:39:03,359
yeah this is one of the easiest steps

764
00:39:03,359 --> 00:39:06,420
for creating the user mode all you all

765
00:39:06,420 --> 00:39:08,880
you need to do is you need to be able to

766
00:39:08,880 --> 00:39:10,920
call your hook function and you need to

767
00:39:10,920 --> 00:39:13,440
be able to prepare those instructions

768
00:39:13,440 --> 00:39:15,480
like if you are sending read you need to

769
00:39:15,480 --> 00:39:17,940
be able to prepare those instruction and

770
00:39:17,940 --> 00:39:19,200
if you are sending right you need to be

771
00:39:19,200 --> 00:39:22,320
able to do that but it gets complex when

772
00:39:22,320 --> 00:39:25,020
you do other stuff like import or ESP

773
00:39:25,020 --> 00:39:28,980
because that requires doing calculation

774
00:39:28,980 --> 00:39:33,359
trigonometry stuff so in those cases uh

775
00:39:33,359 --> 00:39:36,300
making the user mode at yet complex but

776
00:39:36,300 --> 00:39:40,020
usually for other stuff like

777
00:39:40,020 --> 00:39:43,560
reading memory uh it's uh it's very easy

778
00:39:43,560 --> 00:39:45,720
for creating the user mode

779
00:39:45,720 --> 00:39:50,339
so now I can quickly just show you uh

780
00:39:50,339 --> 00:39:53,460
the hack that I made for a very popular

781
00:39:53,460 --> 00:39:55,820
game

782
00:40:25,859 --> 00:40:28,859
so the game is Apex Legends and maybe

783
00:40:28,859 --> 00:40:32,579
you have played it or not but it's uh

784
00:40:32,579 --> 00:40:35,339
just below the Valor end

785
00:40:35,339 --> 00:40:39,000
well read in terms of Twitch streaming

786
00:40:39,000 --> 00:40:40,740
so

787
00:40:40,740 --> 00:40:44,820
I've just fast forward it just create a

788
00:40:44,820 --> 00:40:48,020
just finding the match

789
00:40:50,520 --> 00:40:53,640
and what I've done in this cheat is uh I

790
00:40:53,640 --> 00:40:57,240
have added the added the glow on enemies

791
00:40:57,240 --> 00:41:00,119
itself so I'll be able to see them

792
00:41:00,119 --> 00:41:02,820
through the walls and I've also added

793
00:41:02,820 --> 00:41:05,280
the items glow as well so you can see

794
00:41:05,280 --> 00:41:08,940
the uh items that you that for example

795
00:41:08,940 --> 00:41:11,640
you need to loot a specific kind of gun

796
00:41:11,640 --> 00:41:14,160
like sniper so you can see through walls

797
00:41:14,160 --> 00:41:17,598
where that gun is

798
00:41:21,660 --> 00:41:23,300
foreign

799
00:41:23,300 --> 00:41:27,000
just two three days back

800
00:41:27,000 --> 00:41:28,920
this is the user mode I have already

801
00:41:28,920 --> 00:41:31,440
loaded uh the kernel driver into the

802
00:41:31,440 --> 00:41:33,660
kernel I've just I've just run the user

803
00:41:33,660 --> 00:41:35,779
mode

804
00:41:37,980 --> 00:41:40,859
so as you can see I'm able to see people

805
00:41:40,859 --> 00:41:43,500
through walls

806
00:41:43,500 --> 00:41:46,079
and

807
00:41:46,079 --> 00:41:48,540
if I if I'll go any closer I'll also be

808
00:41:48,540 --> 00:41:50,880
able to show the CD load so as you can

809
00:41:50,880 --> 00:41:53,099
see the blue ones are the I have already

810
00:41:53,099 --> 00:41:55,500
highlighted a certain kind of weapons

811
00:41:55,500 --> 00:41:57,599
which I can see through also that I can

812
00:41:57,599 --> 00:42:01,760
uh allude them

813
00:42:15,180 --> 00:42:18,720
so this is the Border stuff so the

814
00:42:18,720 --> 00:42:21,060
problem with the stuff which I showed

815
00:42:21,060 --> 00:42:24,180
you earlier is that thing works for most

816
00:42:24,180 --> 00:42:25,740
of the game here but there is one

817
00:42:25,740 --> 00:42:29,160
exception which is uh well-rent uh it

818
00:42:29,160 --> 00:42:32,640
has it has a very powerful anti-cheat

819
00:42:32,640 --> 00:42:34,560
and the

820
00:42:34,560 --> 00:42:37,800
the things that is uh uh not working

821
00:42:37,800 --> 00:42:40,079
with what I was showing you earlier is

822
00:42:40,079 --> 00:42:42,420
that the way we were loading the driver

823
00:42:42,420 --> 00:42:44,579
we are not able to use do that here

824
00:42:44,579 --> 00:42:46,500
because in that case we were loading the

825
00:42:46,500 --> 00:42:49,920
driver in the user mode and uh whenever

826
00:42:49,920 --> 00:42:51,720
we start the game at that point entity

827
00:42:51,720 --> 00:42:55,380
runs but in case of valid the ntg trans

828
00:42:55,380 --> 00:42:58,440
start starting from the boot itself so

829
00:42:58,440 --> 00:43:01,040
we need to find a way to load the driver

830
00:43:01,040 --> 00:43:05,099
before we can even start the system

831
00:43:05,099 --> 00:43:08,280
so one of the ways we can do that is is

832
00:43:08,280 --> 00:43:11,520
uh using the bios so in BIOS generally

833
00:43:11,520 --> 00:43:14,040
we can't load the driver but we can use

834
00:43:14,040 --> 00:43:18,900
an alternate way uh is by using UEFI so

835
00:43:18,900 --> 00:43:22,560
it's like a modern bios so you put the

836
00:43:22,560 --> 00:43:25,200
driver of UEFI and your driver inside

837
00:43:25,200 --> 00:43:29,160
the USB and you you plug the USB into

838
00:43:29,160 --> 00:43:32,099
your system and then you reboot and just

839
00:43:32,099 --> 00:43:35,280
like when you install uh Windows using

840
00:43:35,280 --> 00:43:39,000
USB it will first it will go it will

841
00:43:39,000 --> 00:43:41,400
launch the BIOS and in the Bios you will

842
00:43:41,400 --> 00:43:43,859
you will find the UEFI loader and in

843
00:43:43,859 --> 00:43:46,260
that you can load your driver and uh

844
00:43:46,260 --> 00:43:48,359
that way you can load your driver

845
00:43:48,359 --> 00:43:52,560
without before the window starts the

846
00:43:52,560 --> 00:43:56,700
other hacks which are relevant for uh

847
00:43:56,700 --> 00:44:01,500
well rent is external hardware hacks so

848
00:44:01,500 --> 00:44:05,160
so there were many many recently many

849
00:44:05,160 --> 00:44:08,880
people were making pixel pixel bot for

850
00:44:08,880 --> 00:44:10,859
uh well run so as you can see the enemy

851
00:44:10,859 --> 00:44:13,800
here it has it is highlighted with a red

852
00:44:13,800 --> 00:44:16,440
color so they have made a python script

853
00:44:16,440 --> 00:44:19,980
which uh simply you know find this pixel

854
00:44:19,980 --> 00:44:22,980
on the screen and aims at that pixel so

855
00:44:22,980 --> 00:44:25,500
initially they were working the Python

856
00:44:25,500 --> 00:44:28,020
scripts but they were easily getting

857
00:44:28,020 --> 00:44:31,200
detected so next thing they did is they

858
00:44:31,200 --> 00:44:33,900
used uh Arduino for doing that so

859
00:44:33,900 --> 00:44:36,599
whatever the mouse event will fall

860
00:44:36,599 --> 00:44:39,060
example clicking and all it was handling

861
00:44:39,060 --> 00:44:42,180
by the Arduino itself again and using

862
00:44:42,180 --> 00:44:45,359
hypervisor it was able to simulate a

863
00:44:45,359 --> 00:44:46,859
secondary Mouse

864
00:44:46,859 --> 00:44:49,740
so again this was in August it got

865
00:44:49,740 --> 00:44:52,319
passed by well rent the hypervisor and

866
00:44:52,319 --> 00:44:54,180
the next thing the now hackers what are

867
00:44:54,180 --> 00:44:57,119
doing is uh they are using USB host

868
00:44:57,119 --> 00:45:00,300
shield on the top of the Arduino so now

869
00:45:00,300 --> 00:45:02,940
you can just simply plug your mouse to

870
00:45:02,940 --> 00:45:05,460
the Arduino and you already know you can

871
00:45:05,460 --> 00:45:08,400
plug to the computer so it's like having

872
00:45:08,400 --> 00:45:11,040
embot inside your mouse itself so I

873
00:45:11,040 --> 00:45:13,380
don't know how they will detect it or

874
00:45:13,380 --> 00:45:16,500
they will patch it but let's see

875
00:45:16,500 --> 00:45:20,940
so here I will be sharing the driver the

876
00:45:20,940 --> 00:45:23,099
code for the user mode and kernel board

877
00:45:23,099 --> 00:45:26,940
by the end of the day and these are some

878
00:45:26,940 --> 00:45:29,579
of the references which helped in making

879
00:45:29,579 --> 00:45:33,480
of This slide these this presentation uh

880
00:45:33,480 --> 00:45:35,760
the guided hacking this is a paid this

881
00:45:35,760 --> 00:45:40,200
is a paid website which post which has a

882
00:45:40,200 --> 00:45:42,720
great community and it costs around 20

883
00:45:42,720 --> 00:45:46,440
for a year so it's cheap so you so it's

884
00:45:46,440 --> 00:45:49,079
like a go-to for game hacking you can

885
00:45:49,079 --> 00:45:52,380
find lot of tutorials and stuff the

886
00:45:52,380 --> 00:45:54,900
second one is unknown sheets it's game

887
00:45:54,900 --> 00:45:56,880
hacking form and

888
00:45:56,880 --> 00:45:59,160
the information there is scattered so

889
00:45:59,160 --> 00:46:01,200
you need to research whatever you want

890
00:46:01,200 --> 00:46:02,940
to find you will get there but you need

891
00:46:02,940 --> 00:46:05,579
to research on it and the third one is

892
00:46:05,579 --> 00:46:09,660
uh this guy null uh he posts uh videos

893
00:46:09,660 --> 00:46:12,180
about making kernel cheats

894
00:46:12,180 --> 00:46:14,579
so that's it

895
00:46:14,579 --> 00:46:17,940
uh thank you everyone I hope you liked

896
00:46:17,940 --> 00:46:20,060
it

