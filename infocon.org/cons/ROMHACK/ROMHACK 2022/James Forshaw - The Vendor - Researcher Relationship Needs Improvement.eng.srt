1
00:00:00,000 --> 00:00:02,940
right thanks very much

2
00:00:02,940 --> 00:00:06,060
it's good to uh be finally at Ron hack

3
00:00:06,060 --> 00:00:07,980
like it I've been asked a few times hey

4
00:00:07,980 --> 00:00:09,900
could you come and it's like sorry not

5
00:00:09,900 --> 00:00:12,059
this year I've I've other plans

6
00:00:12,059 --> 00:00:13,679
unfortunately so it's nice to actually

7
00:00:13,679 --> 00:00:16,079
finally make it here also after a couple

8
00:00:16,079 --> 00:00:18,539
of years of uh of desolation in the

9
00:00:18,539 --> 00:00:20,100
world

10
00:00:20,100 --> 00:00:21,720
um so when I was asked to do a keynote I

11
00:00:21,720 --> 00:00:23,939
thought okay what what can I talk about

12
00:00:23,939 --> 00:00:26,359
in an authoritative sense and I thought

13
00:00:26,359 --> 00:00:28,740
relationships like I'm really good at

14
00:00:28,740 --> 00:00:30,480
relationships apparently so that's what

15
00:00:30,480 --> 00:00:32,520
I'm going to be talking about and you

16
00:00:32,520 --> 00:00:35,399
may notice a Tinder sarcasm there

17
00:00:35,399 --> 00:00:37,559
um but for people who don't know me

18
00:00:37,559 --> 00:00:40,260
and James I work in Google's Project

19
00:00:40,260 --> 00:00:42,600
zero team which are doing uh security

20
00:00:42,600 --> 00:00:44,820
research

21
00:00:44,820 --> 00:00:47,040
and I specialize in finding

22
00:00:47,040 --> 00:00:49,140
vulnerabilities in in Microsoft and

23
00:00:49,140 --> 00:00:51,420
windows platforms

24
00:00:51,420 --> 00:00:54,480
um now I'm also sometimes a vendor like

25
00:00:54,480 --> 00:00:57,539
I write code for the Chrome browser I do

26
00:00:57,539 --> 00:00:59,100
a lot of work in the the windows

27
00:00:59,100 --> 00:01:02,280
sandboxing so I write new code I fix

28
00:01:02,280 --> 00:01:05,220
bugs so I actually have to be a vendor

29
00:01:05,220 --> 00:01:07,380
sometimes as well and probably why I'm

30
00:01:07,380 --> 00:01:08,939
here to do a keynote is I do have

31
00:01:08,939 --> 00:01:11,340
opinions because it's always good to

32
00:01:11,340 --> 00:01:13,400
have opinions

33
00:01:13,400 --> 00:01:15,840
so what is the relationship I'm actually

34
00:01:15,840 --> 00:01:17,460
going to be talking about obviously not

35
00:01:17,460 --> 00:01:19,380
between um two people who love each

36
00:01:19,380 --> 00:01:21,600
other but between researchers and

37
00:01:21,600 --> 00:01:23,400
vendors who don't necessarily love each

38
00:01:23,400 --> 00:01:25,140
other right

39
00:01:25,140 --> 00:01:27,240
um like quick show of hands who would

40
00:01:27,240 --> 00:01:28,259
who would consider themselves

41
00:01:28,259 --> 00:01:31,380
researchers in this audience

42
00:01:31,380 --> 00:01:33,840
I'm not that many

43
00:01:33,840 --> 00:01:36,180
so is the rescue vendors are you just

44
00:01:36,180 --> 00:01:38,100
uninterested parties unaffiliated

45
00:01:38,100 --> 00:01:39,540
parties

46
00:01:39,540 --> 00:01:40,380
um

47
00:01:40,380 --> 00:01:43,920
I obviously picked the pictures to prove

48
00:01:43,920 --> 00:01:45,840
a point like from a researcher's

49
00:01:45,840 --> 00:01:47,700
perspective sometimes you always feel

50
00:01:47,700 --> 00:01:49,079
that the vendor is trying to put you

51
00:01:49,079 --> 00:01:50,939
down trying to make you make your life

52
00:01:50,939 --> 00:01:52,860
difficult

53
00:01:52,860 --> 00:01:55,500
um but there is of course uh the sort of

54
00:01:55,500 --> 00:01:57,119
flip side of that the researcher isn't

55
00:01:57,119 --> 00:01:59,340
always necessarily as generous to the

56
00:01:59,340 --> 00:02:01,380
vendor as they could be as as good

57
00:02:01,380 --> 00:02:04,020
nature to the vendors could be so in an

58
00:02:04,020 --> 00:02:05,820
Ideal World we want this relationship to

59
00:02:05,820 --> 00:02:08,098
be better because the end result of that

60
00:02:08,098 --> 00:02:10,440
researcher vendor relationship is more

61
00:02:10,440 --> 00:02:12,120
secure products

62
00:02:12,120 --> 00:02:13,980
um obviously depending on why you're

63
00:02:13,980 --> 00:02:17,480
doing the research in the first place

64
00:02:17,640 --> 00:02:20,340
um now if you're wanting to construct a

65
00:02:20,340 --> 00:02:22,560
better relationship between the two

66
00:02:22,560 --> 00:02:24,720
between researchers and vendors

67
00:02:24,720 --> 00:02:26,760
at least from a vendor perspective it

68
00:02:26,760 --> 00:02:28,440
kind of has to be something which you

69
00:02:28,440 --> 00:02:30,780
you build in from the beginning

70
00:02:30,780 --> 00:02:34,500
you uh don't design your products so

71
00:02:34,500 --> 00:02:37,379
that they are intentionally difficult to

72
00:02:37,379 --> 00:02:41,040
research you don't set out to be like a

73
00:02:41,040 --> 00:02:43,560
terrible person towards these these

74
00:02:43,560 --> 00:02:46,080
external researchers because if you

75
00:02:46,080 --> 00:02:49,160
build any sort of product at any scale

76
00:02:49,160 --> 00:02:52,200
there's a almost a guarantee that some

77
00:02:52,200 --> 00:02:53,819
security researcher will come in and

78
00:02:53,819 --> 00:02:57,959
start poking holes in your software

79
00:02:57,959 --> 00:03:00,120
and you need to be prepared for that and

80
00:03:00,120 --> 00:03:02,340
the best time to be prepared for that is

81
00:03:02,340 --> 00:03:06,060
right at the beginning of time

82
00:03:06,060 --> 00:03:07,379
um

83
00:03:07,379 --> 00:03:09,420
so you're designing your new fancy

84
00:03:09,420 --> 00:03:12,060
product right and of course uh

85
00:03:12,060 --> 00:03:13,920
engineering is going hey we can build

86
00:03:13,920 --> 00:03:15,959
this amazing system like it's going to

87
00:03:15,959 --> 00:03:17,640
be it's going to be the greatest thing

88
00:03:17,640 --> 00:03:19,860
ever and then of course marketing goes

89
00:03:19,860 --> 00:03:21,959
greatest thing ever you say well maybe

90
00:03:21,959 --> 00:03:24,780
we can uh we can do something with that

91
00:03:24,780 --> 00:03:26,700
now if you actually want to build

92
00:03:26,700 --> 00:03:28,620
products which can stand up to the

93
00:03:28,620 --> 00:03:31,200
scrutiny of of your average researcher

94
00:03:31,200 --> 00:03:34,440
you really have to be basing it on on

95
00:03:34,440 --> 00:03:36,360
engineering first that engineering team

96
00:03:36,360 --> 00:03:38,040
has to be leading that product

97
00:03:38,040 --> 00:03:39,840
development because

98
00:03:39,840 --> 00:03:42,480
ultimately if they don't

99
00:03:42,480 --> 00:03:45,420
um like if marketing is the cart before

100
00:03:45,420 --> 00:03:48,120
the horse then marketing are going to

101
00:03:48,120 --> 00:03:50,159
dictate what you can and can't do in

102
00:03:50,159 --> 00:03:51,659
your in your products what you can and

103
00:03:51,659 --> 00:03:54,120
can't do in your design and then also

104
00:03:54,120 --> 00:03:56,700
dig it up and say this is this is the

105
00:03:56,700 --> 00:03:59,760
best thing since sliced bread and uh

106
00:03:59,760 --> 00:04:01,159
then a research is going to come along

107
00:04:01,159 --> 00:04:03,480
rightly skeptical of those marketing

108
00:04:03,480 --> 00:04:05,879
persons claims and say hey no I think

109
00:04:05,879 --> 00:04:08,099
you're you're completely lying about

110
00:04:08,099 --> 00:04:10,860
that and it doesn't necessarily give you

111
00:04:10,860 --> 00:04:13,260
a good impression like if your product

112
00:04:13,260 --> 00:04:16,440
is is actually fairly weak if it's just

113
00:04:16,440 --> 00:04:19,560
super hyped up yeah like No One's Gonna

114
00:04:19,560 --> 00:04:22,740
be very happy about that

115
00:04:22,740 --> 00:04:25,440
so of course if you're building your new

116
00:04:25,440 --> 00:04:27,840
fancy product careful design is a must

117
00:04:27,840 --> 00:04:30,120
like trying to

118
00:04:30,120 --> 00:04:32,160
Wilder of course are vulnerabilities

119
00:04:32,160 --> 00:04:34,740
which can occur just from the

120
00:04:34,740 --> 00:04:36,720
implementation

121
00:04:36,720 --> 00:04:37,500
um

122
00:04:37,500 --> 00:04:40,080
ideally your design should try and

123
00:04:40,080 --> 00:04:41,220
mitigate those before you've even

124
00:04:41,220 --> 00:04:44,400
started something I say simple but it's

125
00:04:44,400 --> 00:04:46,620
never simple right like don't don't box

126
00:04:46,620 --> 00:04:48,120
yourself into a corner where the only

127
00:04:48,120 --> 00:04:49,919
way you can write your your your

128
00:04:49,919 --> 00:04:51,360
software product or build your Hardware

129
00:04:51,360 --> 00:04:53,759
product is is using memory unsafe

130
00:04:53,759 --> 00:04:56,220
languages like you might end up using C

131
00:04:56,220 --> 00:04:59,520
plus anyway but if you can design it in

132
00:04:59,520 --> 00:05:01,139
such a way that

133
00:05:01,139 --> 00:05:03,419
um you're not required to use C plus

134
00:05:03,419 --> 00:05:05,220
plus that you can use

135
00:05:05,220 --> 00:05:08,699
go or rust or some other managed

136
00:05:08,699 --> 00:05:10,740
language then maybe that's a better

137
00:05:10,740 --> 00:05:14,220
design overall and you will then have to

138
00:05:14,220 --> 00:05:16,139
deal with fewer researchers hopefully

139
00:05:16,139 --> 00:05:18,840
who are poking holes in your product but

140
00:05:18,840 --> 00:05:20,100
of course you also want to make sure

141
00:05:20,100 --> 00:05:21,840
that you don't have horrendous design

142
00:05:21,840 --> 00:05:24,360
bugs and design flaws in your product

143
00:05:24,360 --> 00:05:28,880
especially for new existing products

144
00:05:29,220 --> 00:05:33,419
um now as a researcher like we're all

145
00:05:33,419 --> 00:05:36,060
time constrained I know that some of

146
00:05:36,060 --> 00:05:38,220
them I do this as a professional job so

147
00:05:38,220 --> 00:05:39,900
I'm very lucky in that regard that I can

148
00:05:39,900 --> 00:05:41,180
just spend

149
00:05:41,180 --> 00:05:44,280
relative infinite time to do research

150
00:05:44,280 --> 00:05:46,919
not everyone can but of course if you

151
00:05:46,919 --> 00:05:48,720
want to have the Maximum Impact as a

152
00:05:48,720 --> 00:05:51,360
researcher and get on the vendor's good

153
00:05:51,360 --> 00:05:53,699
side then finding bugs in their

154
00:05:53,699 --> 00:05:55,620
pre-release products is quite quite a

155
00:05:55,620 --> 00:05:57,300
useful way of doing that potentially

156
00:05:57,300 --> 00:05:59,759
it's a an interesting set of new code

157
00:05:59,759 --> 00:06:02,520
new design code new functionality which

158
00:06:02,520 --> 00:06:04,860
isn't currently ready for prime time

159
00:06:04,860 --> 00:06:06,300
and

160
00:06:06,300 --> 00:06:07,800
it's something you can get the ground

161
00:06:07,800 --> 00:06:09,419
floor on you can get a jump ahead of

162
00:06:09,419 --> 00:06:11,460
potentially other researchers if you are

163
00:06:11,460 --> 00:06:13,199
looking at beta products now in

164
00:06:13,199 --> 00:06:15,300
Microsoft's case they have The Insider

165
00:06:15,300 --> 00:06:16,440
preview

166
00:06:16,440 --> 00:06:18,080
which you can just download and install

167
00:06:18,080 --> 00:06:21,000
obviously give your email address to

168
00:06:21,000 --> 00:06:23,039
Microsoft to allow you to do that but

169
00:06:23,039 --> 00:06:27,120
that's that's not a completely terrible

170
00:06:27,120 --> 00:06:28,919
um obviously Apple have something very

171
00:06:28,919 --> 00:06:30,060
similar

172
00:06:30,060 --> 00:06:33,000
um and it just really would help in that

173
00:06:33,000 --> 00:06:34,560
that sort of relationship regard to

174
00:06:34,560 --> 00:06:37,319
actually also not only look at the

175
00:06:37,319 --> 00:06:39,060
existing software but also look at the

176
00:06:39,060 --> 00:06:41,940
new stuff which is coming out

177
00:06:41,940 --> 00:06:43,620
but of course back on the vendor side

178
00:06:43,620 --> 00:06:45,960
it's not it's it's useless if your

179
00:06:45,960 --> 00:06:47,520
researcher finds these amazing

180
00:06:47,520 --> 00:06:49,319
vulnerabilities in your product but

181
00:06:49,319 --> 00:06:51,539
there's no way of telling them about it

182
00:06:51,539 --> 00:06:53,340
like

183
00:06:53,340 --> 00:06:56,280
there's so many cases like even in

184
00:06:56,280 --> 00:06:58,620
Project zero with are supposedly cachet

185
00:06:58,620 --> 00:07:01,620
our name it can be very difficult to

186
00:07:01,620 --> 00:07:03,720
find who is the point of contact in a

187
00:07:03,720 --> 00:07:05,819
vendor to actually submit security

188
00:07:05,819 --> 00:07:08,880
vulnerabilities to or even if you do it

189
00:07:08,880 --> 00:07:10,680
kind of goes into a black hole somewhere

190
00:07:10,680 --> 00:07:12,900
and you get no feedback and did they

191
00:07:12,900 --> 00:07:14,880
even receive it who knows

192
00:07:14,880 --> 00:07:17,940
uh obviously a lot of these examples are

193
00:07:17,940 --> 00:07:19,319
from Microsoft because that is my

194
00:07:19,319 --> 00:07:22,380
specialty of course but Microsoft have a

195
00:07:22,380 --> 00:07:24,360
web page hey go on here you can click a

196
00:07:24,360 --> 00:07:26,819
link it'll take you to the Vendor Portal

197
00:07:26,819 --> 00:07:28,440
you obviously need to create an account

198
00:07:28,440 --> 00:07:30,840
of some kind and you can submit your

199
00:07:30,840 --> 00:07:32,460
vulnerability report all the

200
00:07:32,460 --> 00:07:34,080
descriptions upload your approve a

201
00:07:34,080 --> 00:07:37,020
Concepts things like that and it does a

202
00:07:37,020 --> 00:07:39,860
reasonable job I have issues with the uh

203
00:07:39,860 --> 00:07:42,419
the portal they've set up the web portal

204
00:07:42,419 --> 00:07:44,460
because it's it's your typical web web

205
00:07:44,460 --> 00:07:47,220
application which is just not fit for

206
00:07:47,220 --> 00:07:49,380
purpose in most cases so usually I just

207
00:07:49,380 --> 00:07:51,660
email them but at least you get a good

208
00:07:51,660 --> 00:07:54,300
response generally from the emailing as

209
00:07:54,300 --> 00:07:56,759
well so again if you're a vendor you

210
00:07:56,759 --> 00:07:59,160
really need to have that mechanism to

211
00:07:59,160 --> 00:08:02,460
actually not make the researcher annoyed

212
00:08:02,460 --> 00:08:04,440
at you before you've even started to

213
00:08:04,440 --> 00:08:08,300
deal with the vulnerability reports

214
00:08:08,400 --> 00:08:11,940
but it also helps that especially for

215
00:08:11,940 --> 00:08:14,280
vendors which have large product bases

216
00:08:14,280 --> 00:08:16,020
and lots and lots of Technologies

217
00:08:16,020 --> 00:08:18,300
associated with apps especially Legacy

218
00:08:18,300 --> 00:08:20,400
Technologies to actually Define what's

219
00:08:20,400 --> 00:08:22,319
in scope

220
00:08:22,319 --> 00:08:24,240
um obviously that's going to depend on

221
00:08:24,240 --> 00:08:26,960
the vendor like in the Microsoft example

222
00:08:26,960 --> 00:08:29,520
Microsoft have basically a criteria

223
00:08:29,520 --> 00:08:32,219
which says this meets the bar for

224
00:08:32,219 --> 00:08:34,740
releasing some sort of security patch

225
00:08:34,740 --> 00:08:36,059
out into a while because each security

226
00:08:36,059 --> 00:08:38,279
patch is potentially

227
00:08:38,279 --> 00:08:41,039
like six figures seven figures uh cost

228
00:08:41,039 --> 00:08:43,080
to Microsoft so they want to kind of

229
00:08:43,080 --> 00:08:44,520
minimize the number of vulnerability

230
00:08:44,520 --> 00:08:47,459
reports that they actually fix as a

231
00:08:47,459 --> 00:08:48,660
patch

232
00:08:48,660 --> 00:08:50,580
so Microsoft actually have this

233
00:08:50,580 --> 00:08:52,620
servicing criteria document on their

234
00:08:52,620 --> 00:08:54,600
website which basically says

235
00:08:54,600 --> 00:08:56,700
if you find a bug in this particular

236
00:08:56,700 --> 00:08:59,580
particular technology we will just not

237
00:08:59,580 --> 00:09:01,920
fix it and that can be a signal to you

238
00:09:01,920 --> 00:09:04,380
to just not do research in that area or

239
00:09:04,380 --> 00:09:06,839
if you do do research in that area it's

240
00:09:06,839 --> 00:09:09,839
not something that you've will you're

241
00:09:09,839 --> 00:09:11,459
not going to be annoyed if you can't get

242
00:09:11,459 --> 00:09:12,839
it fixed by Microsoft because they've

243
00:09:12,839 --> 00:09:13,920
already told you they're not going to

244
00:09:13,920 --> 00:09:16,380
fix it so a good example is if you can

245
00:09:16,380 --> 00:09:18,360
get from a normal user normal

246
00:09:18,360 --> 00:09:21,660
unprivileged user to Kernel mode that is

247
00:09:21,660 --> 00:09:23,820
a boundary that Microsoft will support

248
00:09:23,820 --> 00:09:26,220
however if you are already an

249
00:09:26,220 --> 00:09:28,260
administrator even though Microsoft have

250
00:09:28,260 --> 00:09:29,519
done loads of things to try and make

251
00:09:29,519 --> 00:09:31,440
running arbitrary kernel code more

252
00:09:31,440 --> 00:09:33,480
difficult if you can find a bug which

253
00:09:33,480 --> 00:09:36,000
goes from admin to Kernel they do not

254
00:09:36,000 --> 00:09:37,560
consider that to be a security boundary

255
00:09:37,560 --> 00:09:40,200
and so that Keys you into like either

256
00:09:40,200 --> 00:09:42,360
you research that admin to Kernel

257
00:09:42,360 --> 00:09:45,899
boundary just for the fun aspects of it

258
00:09:45,899 --> 00:09:48,120
or you just don't do it at all and save

259
00:09:48,120 --> 00:09:50,459
yourself a Time the pain of actually

260
00:09:50,459 --> 00:09:53,300
doing that work

261
00:09:53,519 --> 00:09:55,740
um and that obviously comes down to the

262
00:09:55,740 --> 00:09:57,839
greatest incentive uh Mankind's ever

263
00:09:57,839 --> 00:09:58,980
came up with

264
00:09:58,980 --> 00:10:02,700
heart cold hard cash right like who

265
00:10:02,700 --> 00:10:04,620
doesn't like a bit of like a couple of

266
00:10:04,620 --> 00:10:07,560
100 euros sent you away for uh for

267
00:10:07,560 --> 00:10:09,839
finding vulnerabilities

268
00:10:09,839 --> 00:10:10,740
um

269
00:10:10,740 --> 00:10:12,720
and but this has got to be done in the

270
00:10:12,720 --> 00:10:14,339
right way from a vendor perspective like

271
00:10:14,339 --> 00:10:17,160
you can't just necessarily just like

272
00:10:17,160 --> 00:10:19,500
throw money like for everybody because

273
00:10:19,500 --> 00:10:21,779
then like almost like there's there's no

274
00:10:21,779 --> 00:10:23,700
value to it at that point

275
00:10:23,700 --> 00:10:26,040
um but you want it as an incentive now

276
00:10:26,040 --> 00:10:28,800
my view is that like when I started

277
00:10:28,800 --> 00:10:30,540
doing these kind of things the best I

278
00:10:30,540 --> 00:10:32,880
was going to get maybe a cve perhaps a

279
00:10:32,880 --> 00:10:34,920
T-shirt If I was really lucky I'd get

280
00:10:34,920 --> 00:10:38,399
invited to like an internal conference

281
00:10:38,399 --> 00:10:39,600
um but

282
00:10:39,600 --> 00:10:42,000
these days it's very much pretty much

283
00:10:42,000 --> 00:10:43,740
all vendors

284
00:10:43,740 --> 00:10:46,500
um there are exceptions have some sort

285
00:10:46,500 --> 00:10:48,720
of monetary reward for finding

286
00:10:48,720 --> 00:10:50,160
vulnerabilities in their products which

287
00:10:50,160 --> 00:10:52,440
feels like only right because they're

288
00:10:52,440 --> 00:10:53,940
making potentially especially the

289
00:10:53,940 --> 00:10:55,260
proprietary event is making a lot of

290
00:10:55,260 --> 00:10:58,560
money on their on their software because

291
00:10:58,560 --> 00:11:00,000
it's kind of free money once they've

292
00:11:00,000 --> 00:11:02,100
developed it right and yet they won't

293
00:11:02,100 --> 00:11:04,260
pay you for finding bugs in their

294
00:11:04,260 --> 00:11:07,380
software that seems a bit unfair

295
00:11:07,380 --> 00:11:09,180
um so they usually do this through bug

296
00:11:09,180 --> 00:11:12,899
bounties and uh from a vendor

297
00:11:12,899 --> 00:11:14,839
perspective one of the things you really

298
00:11:14,839 --> 00:11:17,700
want to be deciding on is what is it you

299
00:11:17,700 --> 00:11:19,620
want your bug bounty to be

300
00:11:19,620 --> 00:11:21,839
because that's going to a depend on what

301
00:11:21,839 --> 00:11:23,100
types of bugs you're going to receive

302
00:11:23,100 --> 00:11:24,899
the volume of bugs you're going to

303
00:11:24,899 --> 00:11:27,839
receive and also like

304
00:11:27,839 --> 00:11:30,240
whether that that the return of

305
00:11:30,240 --> 00:11:32,220
investment of paying that money out to

306
00:11:32,220 --> 00:11:34,680
researchers is worth it

307
00:11:34,680 --> 00:11:36,180
so on the one side you've got bug

308
00:11:36,180 --> 00:11:38,339
quality you're looking for bugs which

309
00:11:38,339 --> 00:11:40,380
Advance the state of the art maybe

310
00:11:40,380 --> 00:11:42,899
they're demonstrating a new bug class

311
00:11:42,899 --> 00:11:44,519
maybe they're demonstrating a new

312
00:11:44,519 --> 00:11:47,519
exploit primitive

313
00:11:47,519 --> 00:11:49,320
um maybe it's

314
00:11:49,320 --> 00:11:51,060
showing deficiencies in the current

315
00:11:51,060 --> 00:11:53,220
system like where mitigations might

316
00:11:53,220 --> 00:11:55,800
might be beneficial uh that's sort of on

317
00:11:55,800 --> 00:11:57,839
the bug quality side and the idea here

318
00:11:57,839 --> 00:12:00,420
is your internal incentivize people to

319
00:12:00,420 --> 00:12:03,480
send you bugs which help you to make

320
00:12:03,480 --> 00:12:05,100
better products and better

321
00:12:05,100 --> 00:12:07,500
determinations or you could just go for

322
00:12:07,500 --> 00:12:09,060
the root of literally we're going to pay

323
00:12:09,060 --> 00:12:10,940
for anything which comes across our desk

324
00:12:10,940 --> 00:12:13,980
and that's kind of the the sort of

325
00:12:13,980 --> 00:12:15,839
opposite side to things like in some

326
00:12:15,839 --> 00:12:17,880
ways you don't really care about the

327
00:12:17,880 --> 00:12:19,800
information gathering as such although

328
00:12:19,800 --> 00:12:22,560
perhaps you can do some of that but what

329
00:12:22,560 --> 00:12:24,120
you're really interested in is just

330
00:12:24,120 --> 00:12:26,880
fixing as many actual bugs as you can

331
00:12:26,880 --> 00:12:28,740
possibly find and you just incentivize

332
00:12:28,740 --> 00:12:29,820
for that

333
00:12:29,820 --> 00:12:31,200
and coming from the Microsoft

334
00:12:31,200 --> 00:12:34,079
perspective uh they seem to have a bit

335
00:12:34,079 --> 00:12:36,000
of a schizophrenic view of this like

336
00:12:36,000 --> 00:12:39,300
they have some bug bounties which are

337
00:12:39,300 --> 00:12:41,700
nominally for information gathering

338
00:12:41,700 --> 00:12:44,880
things like the mitigation bypass Bounty

339
00:12:44,880 --> 00:12:46,500
um and they kind of almost imply that

340
00:12:46,500 --> 00:12:49,019
some of the general bug bounties that

341
00:12:49,019 --> 00:12:50,279
they do are also for information

342
00:12:50,279 --> 00:12:52,980
gathering but then there was cases where

343
00:12:52,980 --> 00:12:54,540
they were just literally almost pay out

344
00:12:54,540 --> 00:12:56,639
for anything like a good case is is

345
00:12:56,639 --> 00:12:58,920
related to foul planting privilege

346
00:12:58,920 --> 00:13:00,360
escalation attacks

347
00:13:00,360 --> 00:13:04,440
and they paid like like it was it was a

348
00:13:04,440 --> 00:13:06,540
very weak spot in in the security model

349
00:13:06,540 --> 00:13:09,720
of Windows and like certainly some

350
00:13:09,720 --> 00:13:12,120
um Chinese and Korean researchers

351
00:13:12,120 --> 00:13:13,920
basically automated the hell out of this

352
00:13:13,920 --> 00:13:17,279
and we're we're making six seven figures

353
00:13:17,279 --> 00:13:18,839
out of Microsoft out of bug bounties

354
00:13:18,839 --> 00:13:21,420
just by submitting Sim link bug after

355
00:13:21,420 --> 00:13:24,480
sibling bug to uh to Microsoft

356
00:13:24,480 --> 00:13:27,180
um so they eventually said no more we're

357
00:13:27,180 --> 00:13:28,980
creating a mitigation we've gathered

358
00:13:28,980 --> 00:13:30,300
enough information finally after

359
00:13:30,300 --> 00:13:32,760
receiving like hundreds of bugs will now

360
00:13:32,760 --> 00:13:35,880
mitigate it but they ended up saying

361
00:13:35,880 --> 00:13:37,019
that they're going to stop paying these

362
00:13:37,019 --> 00:13:38,700
bounties before they actually ship the

363
00:13:38,700 --> 00:13:42,000
mitigation and that just riled up a

364
00:13:42,000 --> 00:13:44,399
number of people because it's like like

365
00:13:44,399 --> 00:13:46,800
well take your pick either your

366
00:13:46,800 --> 00:13:48,360
information gathering which is what you

367
00:13:48,360 --> 00:13:49,800
were doing before or you're just paying

368
00:13:49,800 --> 00:13:52,079
for bugs and they paid for so many bugs

369
00:13:52,079 --> 00:13:54,420
like after the first five which I

370
00:13:54,420 --> 00:13:57,300
submitted like six seven years ago they

371
00:13:57,300 --> 00:13:59,519
had enough then to go right they should

372
00:13:59,519 --> 00:14:01,380
just mitigate this right but no they

373
00:14:01,380 --> 00:14:03,240
kept paying and kept paying kept paying

374
00:14:03,240 --> 00:14:06,899
until like they they were out

375
00:14:06,899 --> 00:14:08,579
I don't know what the actual figure was

376
00:14:08,579 --> 00:14:10,440
but it was in the millions that they'd

377
00:14:10,440 --> 00:14:12,480
ended up paid out for these these bugs

378
00:14:12,480 --> 00:14:14,820
and that was a stupid stupid thing on

379
00:14:14,820 --> 00:14:16,800
their behalf and so all you ended up

380
00:14:16,800 --> 00:14:19,620
doing was annoying researchers which

381
00:14:19,620 --> 00:14:21,540
doesn't help you necessarily

382
00:14:21,540 --> 00:14:24,620
especially if you're Microsoft

383
00:14:24,959 --> 00:14:25,800
um

384
00:14:25,800 --> 00:14:28,680
now one of the things I spend the most

385
00:14:28,680 --> 00:14:31,440
time on I would probably say uh when I'm

386
00:14:31,440 --> 00:14:33,240
doing any research on proprietary

387
00:14:33,240 --> 00:14:34,680
software where I have no source code

388
00:14:34,680 --> 00:14:37,440
access is just understanding how that

389
00:14:37,440 --> 00:14:39,360
code is supposed to work

390
00:14:39,360 --> 00:14:42,120
now it would be amazing if every

391
00:14:42,120 --> 00:14:44,820
significant piece of code in a vendor's

392
00:14:44,820 --> 00:14:46,860
product like in Microsoft they ship a

393
00:14:46,860 --> 00:14:48,180
new product especially one which is

394
00:14:48,180 --> 00:14:50,519
going to be heavily marketed

395
00:14:50,519 --> 00:14:53,040
like if you're going to put something on

396
00:14:53,040 --> 00:14:54,720
a web on your web page saying this is

397
00:14:54,720 --> 00:14:56,399
the greatest thing ever

398
00:14:56,399 --> 00:14:58,560
I also want you to provide me with

399
00:14:58,560 --> 00:15:00,060
documentation of what it's supposed to

400
00:15:00,060 --> 00:15:02,579
do what is security boundaries are what

401
00:15:02,579 --> 00:15:05,579
it's print basic functionality is or a

402
00:15:05,579 --> 00:15:08,040
white paper of like actual like in-depth

403
00:15:08,040 --> 00:15:09,480
like this is exactly what's going to

404
00:15:09,480 --> 00:15:12,300
happen with this software so that not

405
00:15:12,300 --> 00:15:14,699
only do I understand how it works I

406
00:15:14,699 --> 00:15:16,860
understand what constitutes a security

407
00:15:16,860 --> 00:15:19,620
vulnerability in this scenario

408
00:15:19,620 --> 00:15:22,860
uh unfortunately Microsoft certainly

409
00:15:22,860 --> 00:15:24,899
generally do not do this now some of

410
00:15:24,899 --> 00:15:26,880
that is almost certainly for commercial

411
00:15:26,880 --> 00:15:28,560
reasons like they don't want to give

412
00:15:28,560 --> 00:15:30,600
away their secret sauce to uh to other

413
00:15:30,600 --> 00:15:33,600
people some of it's just literally just

414
00:15:33,600 --> 00:15:36,000
bear bear tax cash right like

415
00:15:36,000 --> 00:15:38,459
fundamentally it costs money to write

416
00:15:38,459 --> 00:15:40,860
documentation because it's probably not

417
00:15:40,860 --> 00:15:42,839
there might be some design documentation

418
00:15:42,839 --> 00:15:44,579
somewhere but it's probably not in a

419
00:15:44,579 --> 00:15:46,139
form you can just disseminate to the app

420
00:15:46,139 --> 00:15:47,639
to the average users who have to go for

421
00:15:47,639 --> 00:15:49,380
review processes and all that sort of

422
00:15:49,380 --> 00:15:50,399
stuff

423
00:15:50,399 --> 00:15:52,800
um so it's a bit of a pipe dream but I

424
00:15:52,800 --> 00:15:55,260
would really like it if like it was

425
00:15:55,260 --> 00:15:57,240
possible to get better documentation

426
00:15:57,240 --> 00:16:01,320
about on platform Technologies which a

427
00:16:01,320 --> 00:16:04,100
vendor supports

428
00:16:04,740 --> 00:16:06,420
now if you're dealing with proprietary

429
00:16:06,420 --> 00:16:07,459
software

430
00:16:07,459 --> 00:16:09,779
and you're having to reverse engineer

431
00:16:09,779 --> 00:16:11,760
the binaries themselves Stick it and say

432
00:16:11,760 --> 00:16:13,920
Ida or gidra

433
00:16:13,920 --> 00:16:15,120
um

434
00:16:15,120 --> 00:16:18,060
if you just get say a 100 Meg blob like

435
00:16:18,060 --> 00:16:20,279
you're trying to reverse engineer iOS

436
00:16:20,279 --> 00:16:23,579
and you just get like 100 Meg Library

437
00:16:23,579 --> 00:16:26,880
cache file whatever with no symbols very

438
00:16:26,880 --> 00:16:29,160
little information from that then it's a

439
00:16:29,160 --> 00:16:32,100
massive barrier of Entry right like

440
00:16:32,100 --> 00:16:34,380
what you want as a vendor is to

441
00:16:34,380 --> 00:16:36,420
incentivize as many researchers as to

442
00:16:36,420 --> 00:16:37,740
come along to help you find

443
00:16:37,740 --> 00:16:40,440
vulnerabilities because they won't pay

444
00:16:40,440 --> 00:16:43,259
like the actual people in their own

445
00:16:43,259 --> 00:16:46,019
company to do this all the time so they

446
00:16:46,019 --> 00:16:49,500
need external help as well right and if

447
00:16:49,500 --> 00:16:52,160
you just give them 100 Meg blob of of

448
00:16:52,160 --> 00:16:54,240
executable code it's going to be very

449
00:16:54,240 --> 00:16:57,240
difficult to determine what that or does

450
00:16:57,240 --> 00:16:59,160
not do

451
00:16:59,160 --> 00:17:00,899
so this is where symbols can come in

452
00:17:00,899 --> 00:17:03,420
handy Microsoft have historically

453
00:17:03,420 --> 00:17:05,579
released public symbols for all their

454
00:17:05,579 --> 00:17:09,179
sort of core OS components so I can load

455
00:17:09,179 --> 00:17:11,099
a binary up in Ida get the public

456
00:17:11,099 --> 00:17:13,020
symbols which are usually just like

457
00:17:13,020 --> 00:17:14,339
function names and things like that but

458
00:17:14,339 --> 00:17:15,720
you couldn't obviously infer a

459
00:17:15,720 --> 00:17:18,599
significant amount about a application

460
00:17:18,599 --> 00:17:20,760
based on just the function names

461
00:17:20,760 --> 00:17:23,339
themself uh one big blind spot in

462
00:17:23,339 --> 00:17:27,059
Microsoft's case was office who has had

463
00:17:27,059 --> 00:17:29,040
never released public symbols as far as

464
00:17:29,040 --> 00:17:31,640
I'm aware uh not intentionally anyway

465
00:17:31,640 --> 00:17:34,740
but last month they finally announced

466
00:17:34,740 --> 00:17:36,179
that hey we're going to actually start

467
00:17:36,179 --> 00:17:38,760
releasing public symbols for office and

468
00:17:38,760 --> 00:17:40,740
it might actually incentivize me now to

469
00:17:40,740 --> 00:17:43,020
look at offers because the barrier of

470
00:17:43,020 --> 00:17:45,240
Entry to to look for vulnerabilities in

471
00:17:45,240 --> 00:17:46,919
the office suite is now potentially

472
00:17:46,919 --> 00:17:48,660
lower so

473
00:17:48,660 --> 00:17:51,059
um as a vendor it it helps to actually

474
00:17:51,059 --> 00:17:54,139
release this sort of information

475
00:17:54,780 --> 00:17:56,820
um and then finally after all this you

476
00:17:56,820 --> 00:17:58,919
found your amazing vulnerability like

477
00:17:58,919 --> 00:18:01,020
it's so awesome like it's going to

478
00:18:01,020 --> 00:18:02,880
change the world

479
00:18:02,880 --> 00:18:04,860
um and of course you want to get your

480
00:18:04,860 --> 00:18:06,900
your payments right

481
00:18:06,900 --> 00:18:08,640
um but when you submit the availability

482
00:18:08,640 --> 00:18:11,039
to Microsoft or the other vendors just

483
00:18:11,039 --> 00:18:13,140
don't be a dick about it right like

484
00:18:13,140 --> 00:18:15,720
don't sort of like demand it like I'm

485
00:18:15,720 --> 00:18:18,539
I'm the greatest thing ever because

486
00:18:18,539 --> 00:18:20,220
um unfortunately

487
00:18:20,220 --> 00:18:21,600
like

488
00:18:21,600 --> 00:18:23,220
very few people are the greatest thing

489
00:18:23,220 --> 00:18:25,559
ever vendors don't necessarily have to

490
00:18:25,559 --> 00:18:27,419
listen to you and if your ultimate goal

491
00:18:27,419 --> 00:18:29,280
is to get more money out of that vendor

492
00:18:29,280 --> 00:18:31,980
based on your your knowledge and your

493
00:18:31,980 --> 00:18:33,720
your ability to find interesting

494
00:18:33,720 --> 00:18:36,179
vulnerabilities then being a dick to

495
00:18:36,179 --> 00:18:37,679
them isn't necessarily going to help you

496
00:18:37,679 --> 00:18:40,740
in that regard because it may preclude

497
00:18:40,740 --> 00:18:43,200
you from getting useful information out

498
00:18:43,200 --> 00:18:45,179
of them so they may tip you off about

499
00:18:45,179 --> 00:18:46,320
hey there's some interesting

500
00:18:46,320 --> 00:18:47,640
functionality here maybe you should have

501
00:18:47,640 --> 00:18:48,360
a look

502
00:18:48,360 --> 00:18:51,240
or even like I we want to contract you

503
00:18:51,240 --> 00:18:52,799
you're so good at finding bugs in this

504
00:18:52,799 --> 00:18:55,260
area can we give you money as a contract

505
00:18:55,260 --> 00:18:57,780
to actually find vulnerabilities for us

506
00:18:57,780 --> 00:19:00,900
uh in just a contract relationship and

507
00:19:00,900 --> 00:19:02,160
that's obviously going to be precluded

508
00:19:02,160 --> 00:19:04,679
if you make the vendor's life difficult

509
00:19:04,679 --> 00:19:06,660
right

510
00:19:06,660 --> 00:19:08,520
um so

511
00:19:08,520 --> 00:19:11,100
um that's sort of my summary of where

512
00:19:11,100 --> 00:19:14,039
you the sort of vendor and researcher

513
00:19:14,039 --> 00:19:15,840
could maybe make our relationships

514
00:19:15,840 --> 00:19:16,860
better

515
00:19:16,860 --> 00:19:18,780
I thought it's worth going through just

516
00:19:18,780 --> 00:19:20,520
a quick sort of

517
00:19:20,520 --> 00:19:21,480
um

518
00:19:21,480 --> 00:19:24,120
case study I suppose of an area of

519
00:19:24,120 --> 00:19:25,559
Windows that I was researching into

520
00:19:25,559 --> 00:19:27,720
recently and this is Windows credential

521
00:19:27,720 --> 00:19:30,780
guard and windows credential guard is a

522
00:19:30,780 --> 00:19:32,840
technology which was introduced in

523
00:19:32,840 --> 00:19:35,400
multiple versions of Windows back in

524
00:19:35,400 --> 00:19:38,220
Windows 10 and it what it uses is it

525
00:19:38,220 --> 00:19:41,580
uses hyper-v to create special isolated

526
00:19:41,580 --> 00:19:43,320
processes

527
00:19:43,320 --> 00:19:44,700
um and one of the one of the key

528
00:19:44,700 --> 00:19:46,799
weaknesses and if you ever do like red

529
00:19:46,799 --> 00:19:49,320
teaming or penetration testing on

530
00:19:49,320 --> 00:19:51,480
Windows domain networks like almost

531
00:19:51,480 --> 00:19:53,700
certainly you've run mimikats on a on a

532
00:19:53,700 --> 00:19:56,340
box and pulled out passwords pulled out

533
00:19:56,340 --> 00:19:58,919
encryption keys for Kerberos and then

534
00:19:58,919 --> 00:20:01,020
use that for lateral movement and and

535
00:20:01,020 --> 00:20:03,299
attacking the network

536
00:20:03,299 --> 00:20:05,700
um and the problem is like those that

537
00:20:05,700 --> 00:20:07,260
information that secret information is

538
00:20:07,260 --> 00:20:09,720
just sitting in a process that any user

539
00:20:09,720 --> 00:20:12,360
well any admin user can access and yes

540
00:20:12,360 --> 00:20:14,100
you can have detections and other sort

541
00:20:14,100 --> 00:20:15,000
of stuff

542
00:20:15,000 --> 00:20:17,460
but it's not ideal so the idea of

543
00:20:17,460 --> 00:20:18,600
credential guard is we're going to

544
00:20:18,600 --> 00:20:20,480
create a completely isolated environment

545
00:20:20,480 --> 00:20:24,480
and any key material like it might start

546
00:20:24,480 --> 00:20:26,520
obviously over here

547
00:20:26,520 --> 00:20:29,520
um but it's used only as long as it

548
00:20:29,520 --> 00:20:31,919
needs to be and it's encrypted into some

549
00:20:31,919 --> 00:20:33,539
form inside this virtualization

550
00:20:33,539 --> 00:20:35,580
container and the container is the only

551
00:20:35,580 --> 00:20:37,559
thing which can decrypt this secret

552
00:20:37,559 --> 00:20:38,940
information

553
00:20:38,940 --> 00:20:41,760
so it exposes an API which you can say

554
00:20:41,760 --> 00:20:45,600
Okay generate me a Kerberos request and

555
00:20:45,600 --> 00:20:48,900
it will use its encrypted key decrypted

556
00:20:48,900 --> 00:20:51,240
inside virtual secure mode and then

557
00:20:51,240 --> 00:20:52,919
return you the encrypted blob you can

558
00:20:52,919 --> 00:20:55,620
then send off to the KDC or whatever it

559
00:20:55,620 --> 00:20:57,660
happens to be

560
00:20:57,660 --> 00:21:01,860
um so this is this is kind of a neat use

561
00:21:01,860 --> 00:21:03,660
case

562
00:21:03,660 --> 00:21:05,580
um so obviously it's probably been

563
00:21:05,580 --> 00:21:06,840
designed right

564
00:21:06,840 --> 00:21:09,059
but this blog post from a couple of days

565
00:21:09,059 --> 00:21:12,240
ago by Dave Weston who's the uh the VP

566
00:21:12,240 --> 00:21:14,940
of Enterprise nowhere security was

567
00:21:14,940 --> 00:21:16,860
basically how Windows 11 is the greatest

568
00:21:16,860 --> 00:21:18,720
thing ever for a security especially in

569
00:21:18,720 --> 00:21:21,120
hybrid work hybrid work because everyone

570
00:21:21,120 --> 00:21:23,820
wants the hybrid work and it

571
00:21:23,820 --> 00:21:25,679
specifically points out credential guard

572
00:21:25,679 --> 00:21:27,720
saying we're now enabling this feature

573
00:21:27,720 --> 00:21:30,120
by default on Windows Enterprise because

574
00:21:30,120 --> 00:21:32,039
it's so amazing right

575
00:21:32,039 --> 00:21:33,780
and of course if you read this it is

576
00:21:33,780 --> 00:21:35,760
pure marketing right like it's

577
00:21:35,760 --> 00:21:37,559
all marketing

578
00:21:37,559 --> 00:21:40,020
um my my general red flag is if any

579
00:21:40,020 --> 00:21:41,820
technology in Windows has Windows

580
00:21:41,820 --> 00:21:44,159
Defender as the moniker it's marketing

581
00:21:44,159 --> 00:21:46,860
as opposed to anything else and yes this

582
00:21:46,860 --> 00:21:48,539
is but almost certainly designed and

583
00:21:48,539 --> 00:21:49,799
engineered right

584
00:21:49,799 --> 00:21:53,400
but the marketing kind of oversells it I

585
00:21:53,400 --> 00:21:55,200
feel in some ways like

586
00:21:55,200 --> 00:21:57,480
is this really true is this is this as

587
00:21:57,480 --> 00:22:00,419
amazing as they say right

588
00:22:00,419 --> 00:22:03,000
um well one thing it's not as amazing as

589
00:22:03,000 --> 00:22:04,620
they say is in the bug bounties so

590
00:22:04,620 --> 00:22:06,720
Microsoft bug bounties have a number of

591
00:22:06,720 --> 00:22:08,760
higher value targets where which they

592
00:22:08,760 --> 00:22:10,799
consider to be high priority like

593
00:22:10,799 --> 00:22:12,059
potentially you can get quarter of a

594
00:22:12,059 --> 00:22:14,039
million dollars for finding a critical

595
00:22:14,039 --> 00:22:15,720
RC in hyper-v

596
00:22:15,720 --> 00:22:17,520
but if you actually go through this list

597
00:22:17,520 --> 00:22:19,740
there is not nothing in here which is

598
00:22:19,740 --> 00:22:21,659
specific to credential guard you may

599
00:22:21,659 --> 00:22:23,820
think it's like hyper-v the hyper-v bug

600
00:22:23,820 --> 00:22:25,100
Bounty will cover that but it doesn't

601
00:22:25,100 --> 00:22:28,320
hyper-v1 is all about sort of rce remote

602
00:22:28,320 --> 00:22:30,720
information disclosure uh remote denial

603
00:22:30,720 --> 00:22:34,200
of service issues not can you get into

604
00:22:34,200 --> 00:22:37,740
virtual secure mode and and steal keys

605
00:22:37,740 --> 00:22:39,059
um

606
00:22:39,059 --> 00:22:40,500
as we'll see about the only thing in

607
00:22:40,500 --> 00:22:42,539
which it can be covered under is the

608
00:22:42,539 --> 00:22:44,340
inside a preview one which just pays for

609
00:22:44,340 --> 00:22:46,440
bugs inside

610
00:22:46,440 --> 00:22:48,059
um inside Insider previews those sort of

611
00:22:48,059 --> 00:22:50,340
beta versions of Windows

612
00:22:50,340 --> 00:22:52,200
um so it's obviously not important

613
00:22:52,200 --> 00:22:54,000
enough that they're explicitly going to

614
00:22:54,000 --> 00:22:55,679
say hey it would be amazing if you could

615
00:22:55,679 --> 00:22:58,500
find bugs in this this software

616
00:22:58,500 --> 00:23:02,039
um is the documentation not really

617
00:23:02,039 --> 00:23:04,500
um they they you can find pages on on

618
00:23:04,500 --> 00:23:06,720
mscn or Microsoft's website which says

619
00:23:06,720 --> 00:23:08,760
how you turn it on and a very brief

620
00:23:08,760 --> 00:23:12,000
overview of the functionality of it

621
00:23:12,000 --> 00:23:14,520
um which makes claims which actually

622
00:23:14,520 --> 00:23:16,740
when I then looked at it turned out to

623
00:23:16,740 --> 00:23:18,900
not be entirely true

624
00:23:18,900 --> 00:23:20,880
um the only documentation which is

625
00:23:20,880 --> 00:23:22,799
remotely relevant is there's something

626
00:23:22,799 --> 00:23:24,659
called remote credential guard which as

627
00:23:24,659 --> 00:23:26,760
the name implies is credential guard but

628
00:23:26,760 --> 00:23:28,919
remote and it's used for like RDP and

629
00:23:28,919 --> 00:23:31,740
securing RDP authentication and it turns

630
00:23:31,740 --> 00:23:33,900
out that what they basically did was

631
00:23:33,900 --> 00:23:35,580
they took their credential guard

632
00:23:35,580 --> 00:23:37,640
interface that they'd already designed

633
00:23:37,640 --> 00:23:40,860
and basically just remoted it in some

634
00:23:40,860 --> 00:23:42,900
some fashion

635
00:23:42,900 --> 00:23:44,940
um so a number of these calls were

636
00:23:44,940 --> 00:23:46,380
basically

637
00:23:46,380 --> 00:23:48,120
um the same as if you looked at the

638
00:23:48,120 --> 00:23:49,799
credential guard interface and so you

639
00:23:49,799 --> 00:23:51,419
could just extract sort of like the

640
00:23:51,419 --> 00:23:53,100
basic information structures and stuff

641
00:23:53,100 --> 00:23:54,360
like that

642
00:23:54,360 --> 00:23:54,960
um

643
00:23:54,960 --> 00:23:56,419
turns out like there was actually

644
00:23:56,419 --> 00:23:58,500
documentation error in this one of the

645
00:23:58,500 --> 00:24:01,440
one of the documented commands had like

646
00:24:01,440 --> 00:24:03,780
a magic value it said you must set it to

647
00:24:03,780 --> 00:24:05,580
this value if you actually set it to

648
00:24:05,580 --> 00:24:07,559
this value you got memory corruption in

649
00:24:07,559 --> 00:24:09,360
in the virtualized container because

650
00:24:09,360 --> 00:24:11,520
they this magic value was like literally

651
00:24:11,520 --> 00:24:13,679
a magic value and it changed between

652
00:24:13,679 --> 00:24:16,740
releases and so it did something bad

653
00:24:16,740 --> 00:24:18,960
um which is kind of funny

654
00:24:18,960 --> 00:24:21,419
now at least they've got symbols

655
00:24:21,419 --> 00:24:23,640
um yes just public symbols

656
00:24:23,640 --> 00:24:26,280
um but a lot of this code is written in

657
00:24:26,280 --> 00:24:28,200
C plus you get the mangled symbols so

658
00:24:28,200 --> 00:24:29,820
you get like at least type names for

659
00:24:29,820 --> 00:24:31,080
three you don't get full type

660
00:24:31,080 --> 00:24:33,120
information but that's that's not too

661
00:24:33,120 --> 00:24:34,559
bad

662
00:24:34,559 --> 00:24:36,900
um so from my perspective was it success

663
00:24:36,900 --> 00:24:40,080
well I found a few bugs

664
00:24:40,080 --> 00:24:42,360
um like nine actual bugs in credential

665
00:24:42,360 --> 00:24:43,860
guard itself in the credential guard

666
00:24:43,860 --> 00:24:45,960
interface

667
00:24:45,960 --> 00:24:49,140
um and two which were were adjacent

668
00:24:49,140 --> 00:24:52,260
related bugs to Windows credential guard

669
00:24:52,260 --> 00:24:54,059
and these were pretty serious these

670
00:24:54,059 --> 00:24:56,220
range from like full-on like object code

671
00:24:56,220 --> 00:24:57,720
execution inside the virtualized

672
00:24:57,720 --> 00:25:01,320
container which doesn't sound great to

673
00:25:01,320 --> 00:25:03,059
effectively encryption oracles or

674
00:25:03,059 --> 00:25:04,260
decryption oracles where you could

675
00:25:04,260 --> 00:25:05,880
decrypt key material and things like

676
00:25:05,880 --> 00:25:07,620
that like

677
00:25:07,620 --> 00:25:10,620
these don't sound like a well-designed

678
00:25:10,620 --> 00:25:12,419
system or a well-influented system which

679
00:25:12,419 --> 00:25:14,220
you need to have such a big marketing

680
00:25:14,220 --> 00:25:16,140
push around

681
00:25:16,140 --> 00:25:17,580
um so I thought I'd find because

682
00:25:17,580 --> 00:25:19,080
obviously this is a keynote it's

683
00:25:19,080 --> 00:25:20,280
supposed to be boring it's supposed to

684
00:25:20,280 --> 00:25:21,840
be dry and non-technical but I thought

685
00:25:21,840 --> 00:25:23,760
I'd at least like put it a few slides of

686
00:25:23,760 --> 00:25:25,740
technical stuff at the end so this is my

687
00:25:25,740 --> 00:25:27,840
favorite bug in my opinion from the

688
00:25:27,840 --> 00:25:30,360
vulnerabilities that I found

689
00:25:30,360 --> 00:25:33,960
um and it's basically uh an a decryption

690
00:25:33,960 --> 00:25:35,460
Oracle

691
00:25:35,460 --> 00:25:38,220
um and it's kind of fundamentally a

692
00:25:38,220 --> 00:25:40,440
design problem like a misunderstanding

693
00:25:40,440 --> 00:25:42,900
of kind of how like

694
00:25:42,900 --> 00:25:44,460
they should have been deploying this

695
00:25:44,460 --> 00:25:46,559
functionality right

696
00:25:46,559 --> 00:25:49,679
so it was a function which I found on

697
00:25:49,679 --> 00:25:51,659
the RPC interface which you could call

698
00:25:51,659 --> 00:25:54,440
from user mode into this secure mode

699
00:25:54,440 --> 00:25:57,779
ntlm ium which is isolated user mode

700
00:25:57,779 --> 00:26:00,360
calculate NT response and it takes three

701
00:26:00,360 --> 00:26:04,020
parameters takes um a challenge array it

702
00:26:04,020 --> 00:26:05,820
takes some sort of encrypted credential

703
00:26:05,820 --> 00:26:08,700
and it returns you this NT response and

704
00:26:08,700 --> 00:26:10,860
it internally it decrypts it which is

705
00:26:10,860 --> 00:26:13,559
correct it has to decrypt this buffer

706
00:26:13,559 --> 00:26:15,299
inside the virtual secure mode because

707
00:26:15,299 --> 00:26:17,400
we can't use it otherwise and then

708
00:26:17,400 --> 00:26:19,919
calculates the NT response RTL

709
00:26:19,919 --> 00:26:21,299
calculator entity response is better

710
00:26:21,299 --> 00:26:25,500
known to everybody a system function009

711
00:26:25,500 --> 00:26:28,679
um I love that function it's amazing

712
00:26:28,679 --> 00:26:30,779
um but what that is doing is it's

713
00:26:30,779 --> 00:26:34,620
generating an ntlm V1 response hash

714
00:26:34,620 --> 00:26:37,140
and if anybody knows anything about ntlm

715
00:26:37,140 --> 00:26:41,700
V1 response hashes that's bad so because

716
00:26:41,700 --> 00:26:44,460
it's basically using it's using the key

717
00:26:44,460 --> 00:26:47,940
like a hash key to generate like free

718
00:26:47,940 --> 00:26:51,659
Des blocks and

719
00:26:51,659 --> 00:26:54,360
it uses single function des and it's

720
00:26:54,360 --> 00:26:56,159
basically especially if you control the

721
00:26:56,159 --> 00:26:57,020
challenge

722
00:26:57,020 --> 00:27:00,659
trivial to Brute Force like trivialize

723
00:27:00,659 --> 00:27:02,700
they like relatively speaking like you

724
00:27:02,700 --> 00:27:04,080
can use rainbow tables and stuff like

725
00:27:04,080 --> 00:27:06,480
that to to Brute Forces back so you can

726
00:27:06,480 --> 00:27:10,620
take an ntlmv one response hash and and

727
00:27:10,620 --> 00:27:12,900
basically decrypt that credential buffer

728
00:27:12,900 --> 00:27:14,820
so you can get back back and in fact

729
00:27:14,820 --> 00:27:18,000
what you actually get back is the uh the

730
00:27:18,000 --> 00:27:20,820
original uh NT hash which is the md4sum

731
00:27:20,820 --> 00:27:22,440
of

732
00:27:22,440 --> 00:27:24,179
um the patent user's password which is

733
00:27:24,179 --> 00:27:25,500
all you need to basically compromise

734
00:27:25,500 --> 00:27:27,059
ntlm

735
00:27:27,059 --> 00:27:29,640
so that sounds bad right

736
00:27:29,640 --> 00:27:33,539
um but ntlamp whatever right like

737
00:27:33,539 --> 00:27:36,299
um that's not necessarily that not

738
00:27:36,299 --> 00:27:38,640
interesting ntlm can be disabled on

739
00:27:38,640 --> 00:27:40,200
Enterprise environments so be really

740
00:27:40,200 --> 00:27:41,760
useful if we could attack Kerberos

741
00:27:41,760 --> 00:27:44,520
instead right so it turns out that I

742
00:27:44,520 --> 00:27:48,120
found that say you have a rc4 key for a

743
00:27:48,120 --> 00:27:50,039
for Kerberos Kerberos can have multiple

744
00:27:50,039 --> 00:27:51,779
different key types you can have rt4 you

745
00:27:51,779 --> 00:27:53,340
can have AES

746
00:27:53,340 --> 00:27:55,200
um there's a function which will take an

747
00:27:55,200 --> 00:27:57,600
encrypted RT for Kerberos key and create

748
00:27:57,600 --> 00:27:59,220
what is called a supplemental credential

749
00:27:59,220 --> 00:28:00,900
and the supplemental credential is a way

750
00:28:00,900 --> 00:28:02,760
in which curb if you just authenticate

751
00:28:02,760 --> 00:28:04,860
using Kerberos allows you to still use

752
00:28:04,860 --> 00:28:06,179
ntlm

753
00:28:06,179 --> 00:28:07,919
because it gives you the correct hash

754
00:28:07,919 --> 00:28:09,480
value

755
00:28:09,480 --> 00:28:11,760
um that obviously returns back to user

756
00:28:11,760 --> 00:28:13,200
mode and encrypted supplemental

757
00:28:13,200 --> 00:28:15,419
credential so again it's not something

758
00:28:15,419 --> 00:28:17,760
you can directly use but you can pass

759
00:28:17,760 --> 00:28:19,919
that function that credential to another

760
00:28:19,919 --> 00:28:22,740
function this ntlab make one-way

761
00:28:22,740 --> 00:28:25,140
function string from isolated user mode

762
00:28:25,140 --> 00:28:27,059
supplement to credential

763
00:28:27,059 --> 00:28:28,380
breathe

764
00:28:28,380 --> 00:28:30,419
um and that gives you now an encrypted

765
00:28:30,419 --> 00:28:33,120
one-way function string okay okay what

766
00:28:33,120 --> 00:28:34,860
can we do with that well we can pass

767
00:28:34,860 --> 00:28:36,539
that to calculate entity response which

768
00:28:36,539 --> 00:28:39,059
you just seen and we get act back our

769
00:28:39,059 --> 00:28:40,500
ntlm hash

770
00:28:40,500 --> 00:28:42,840
we throw that in our cracker and we've

771
00:28:42,840 --> 00:28:44,820
just recovered our rc4 Kerberos key

772
00:28:44,820 --> 00:28:46,980
fantastic we we can now apply this to

773
00:28:46,980 --> 00:28:48,960
Kerberos Authentication

774
00:28:48,960 --> 00:28:52,260
but so what the rt4 encryption key is by

775
00:28:52,260 --> 00:28:54,299
Design the same as the ntlm hash we've

776
00:28:54,299 --> 00:28:55,919
just done all this for nothing right

777
00:28:55,919 --> 00:28:57,600
especially when you get things like

778
00:28:57,600 --> 00:28:59,159
protected user groups involved like

779
00:28:59,159 --> 00:29:00,360
particular user groups with something

780
00:29:00,360 --> 00:29:03,840
added in Server 2012 which basically

781
00:29:03,840 --> 00:29:06,120
prevents a user like you can add it to

782
00:29:06,120 --> 00:29:07,679
say domain admins which prevent them

783
00:29:07,679 --> 00:29:09,960
using ntlm and prevents them using Des

784
00:29:09,960 --> 00:29:12,779
or rc4 encryption types in Kerberos

785
00:29:12,779 --> 00:29:15,120
so he's always worthless right like

786
00:29:15,120 --> 00:29:17,400
assuming that this the system is well

787
00:29:17,400 --> 00:29:19,740
designed and secure is this completely

788
00:29:19,740 --> 00:29:22,200
pointless it turns out that that initial

789
00:29:22,200 --> 00:29:24,120
function had a bug

790
00:29:24,120 --> 00:29:27,539
and specifically uh each key has of

791
00:29:27,539 --> 00:29:29,520
course the key data itself the size of

792
00:29:29,520 --> 00:29:32,399
that key material and the key type that

793
00:29:32,399 --> 00:29:34,980
is associated with that key

794
00:29:34,980 --> 00:29:37,440
and the only thing this function checked

795
00:29:37,440 --> 00:29:39,960
was the size of the key

796
00:29:39,960 --> 00:29:41,580
um not the key type

797
00:29:41,580 --> 00:29:43,740
and it turns out that there is an

798
00:29:43,740 --> 00:29:45,720
existing key type in Kerberos which

799
00:29:45,720 --> 00:29:47,940
happens to also be 16 bytes inside as

800
00:29:47,940 --> 00:29:51,419
the rc4 kit that's the aes128 key and

801
00:29:51,419 --> 00:29:52,799
this of course is secure because it's

802
00:29:52,799 --> 00:29:54,120
AES right

803
00:29:54,120 --> 00:29:56,880
so instead what we can do is we can

804
00:29:56,880 --> 00:29:59,580
instead of passing an rt4 key in we pass

805
00:29:59,580 --> 00:30:02,279
an as key and

806
00:30:02,279 --> 00:30:04,500
from the algorithms perspective it

807
00:30:04,500 --> 00:30:06,240
doesn't matter it doesn't realize that

808
00:30:06,240 --> 00:30:09,480
this string of 16 bytes is is actually

809
00:30:09,480 --> 00:30:11,940
generated from an md4 sum of the

810
00:30:11,940 --> 00:30:14,279
password versus it's just an AES key

811
00:30:14,279 --> 00:30:16,860
they they can't tell there's no way in

812
00:30:16,860 --> 00:30:18,899
determining that

813
00:30:18,899 --> 00:30:21,600
so the end result of that is of course

814
00:30:21,600 --> 00:30:25,679
you can apply this and decrypt arbitrary

815
00:30:25,679 --> 00:30:28,440
AES 128 keys from the Kerberos user so

816
00:30:28,440 --> 00:30:30,179
even if they've got a protected User

817
00:30:30,179 --> 00:30:32,520
Group you can still there it doesn't

818
00:30:32,520 --> 00:30:35,179
disable ntlm in these functions right

819
00:30:35,179 --> 00:30:37,740
and that's kind of like why is that

820
00:30:37,740 --> 00:30:39,720
function even there like it seems a

821
00:30:39,720 --> 00:30:41,700
pretty pretty terrible thing to add into

822
00:30:41,700 --> 00:30:43,860
your design

823
00:30:43,860 --> 00:30:45,840
um and this is a screenshot I took of

824
00:30:45,840 --> 00:30:47,940
crack.sh just run that and stick it

825
00:30:47,940 --> 00:30:49,799
against their rainbow tables and it in

826
00:30:49,799 --> 00:30:51,659
this time it took 45 seconds and that's

827
00:30:51,659 --> 00:30:53,820
probably like it's just mainly waiting

828
00:30:53,820 --> 00:30:55,980
right so it's pretty it's pretty uh

829
00:30:55,980 --> 00:30:58,260
practical cracking time for your as128

830
00:30:58,260 --> 00:30:59,940
key and once you've got that you can

831
00:30:59,940 --> 00:31:02,640
arbitrary request tgts use Kerberos

832
00:31:02,640 --> 00:31:04,260
across the network you've compromise

833
00:31:04,260 --> 00:31:06,059
that user

834
00:31:06,059 --> 00:31:07,260
but because

835
00:31:07,260 --> 00:31:09,059
bug Bounty didn't

836
00:31:09,059 --> 00:31:09,720
um

837
00:31:09,720 --> 00:31:11,940
didn't have a specific category then

838
00:31:11,940 --> 00:31:13,679
you're left with The Insider preview bug

839
00:31:13,679 --> 00:31:16,080
Bounty payments right I found nine

840
00:31:16,080 --> 00:31:18,299
pretty serious bugs in their super

841
00:31:18,299 --> 00:31:20,039
highly marketed feature that they've

842
00:31:20,039 --> 00:31:22,559
added to their their product

843
00:31:22,559 --> 00:31:24,779
um and maybe fortunately I didn't have

844
00:31:24,779 --> 00:31:26,760
to do this because I get paid to do this

845
00:31:26,760 --> 00:31:29,039
on a regular basis I could maybe have

846
00:31:29,039 --> 00:31:31,080
got 20 grand out of it for a month month

847
00:31:31,080 --> 00:31:33,899
of work that might be a reasonable uh

848
00:31:33,899 --> 00:31:36,539
payback for that but that seems pretty

849
00:31:36,539 --> 00:31:38,700
poor for for something which is

850
00:31:38,700 --> 00:31:42,140
apparently so important right

851
00:31:42,240 --> 00:31:45,960
okay so in conclusion like do I ever

852
00:31:45,960 --> 00:31:48,360
think that the researcher vendor can

853
00:31:48,360 --> 00:31:50,760
actually love each other and hug and be

854
00:31:50,760 --> 00:31:52,679
really really happy together probably

855
00:31:52,679 --> 00:31:55,020
not like I feel it's always going to be

856
00:31:55,020 --> 00:31:56,580
antagonism between vendors and

857
00:31:56,580 --> 00:31:58,559
researchers just because of the nature

858
00:31:58,559 --> 00:32:00,360
of the relationship

859
00:32:00,360 --> 00:32:02,220
um but I think

860
00:32:02,220 --> 00:32:05,340
both vendors and researchers can do a

861
00:32:05,340 --> 00:32:07,320
little bit towards approaching each

862
00:32:07,320 --> 00:32:08,880
other and maybe they can have a cuddle

863
00:32:08,880 --> 00:32:10,740
once in a while right

864
00:32:10,740 --> 00:32:12,659
um so thanks for uh listening to my

865
00:32:12,659 --> 00:32:14,820
keynote and uh

866
00:32:14,820 --> 00:32:16,970
that is it thank you very much

867
00:32:16,970 --> 00:32:27,099
[Applause]

