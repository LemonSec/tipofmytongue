1
00:00:06,000 --> 00:00:06,799
wow

2
00:00:06,799 --> 00:00:08,400
hello everybody

3
00:00:08,400 --> 00:00:10,240
so many people

4
00:00:10,240 --> 00:00:11,519
so it's uh

5
00:00:11,519 --> 00:00:13,519
it's great to be here

6
00:00:13,519 --> 00:00:15,360
it's been a it's a bit of a mission to

7
00:00:15,360 --> 00:00:18,240
get here what with covid and brexit

8
00:00:18,240 --> 00:00:20,480
there's lots of forms and

9
00:00:20,480 --> 00:00:22,400
but i managed to get here so i'm here

10
00:00:22,400 --> 00:00:23,439
and uh

11
00:00:23,439 --> 00:00:26,400
yeah yeah it's great to be here

12
00:00:26,400 --> 00:00:27,680
and

13
00:00:27,680 --> 00:00:28,840
thank you thank

14
00:00:28,840 --> 00:00:30,400
you

15
00:00:30,400 --> 00:00:33,120
so uh first off sincere thanks to the

16
00:00:33,120 --> 00:00:34,880
guys you know it's putting on a great

17
00:00:34,880 --> 00:00:36,800
event here and it's just good to see

18
00:00:36,800 --> 00:00:39,440
communities come together again you know

19
00:00:39,440 --> 00:00:41,600
we've all had some difficult times so

20
00:00:41,600 --> 00:00:42,960
yeah

21
00:00:42,960 --> 00:00:45,360
so yeah so i'm here to talk to you about

22
00:00:45,360 --> 00:00:47,600
project six store and ironically this is

23
00:00:47,600 --> 00:00:49,440
a lockdown project it was started during

24
00:00:49,440 --> 00:00:51,039
lockdown okay

25
00:00:51,039 --> 00:00:52,960
and um but i'll do a little bit of an

26
00:00:52,960 --> 00:00:54,879
introduction to myself

27
00:00:54,879 --> 00:00:58,000
so um i work at red hat and i'm a

28
00:00:58,000 --> 00:01:00,079
security engineering lead in our office

29
00:01:00,079 --> 00:01:01,520
of the cto

30
00:01:01,520 --> 00:01:04,080
we have a group that focuses on emerging

31
00:01:04,080 --> 00:01:06,240
technologies and so i've got a team of

32
00:01:06,240 --> 00:01:08,159
about eight engineers some really great

33
00:01:08,159 --> 00:01:12,000
folks and we work on all sorts of things

34
00:01:12,000 --> 00:01:14,560
confidential computing trusted computers

35
00:01:14,560 --> 00:01:16,640
we saw before tpms

36
00:01:16,640 --> 00:01:19,040
but we started to pivot towards secure

37
00:01:19,040 --> 00:01:20,960
supply chain because it's becoming such

38
00:01:20,960 --> 00:01:23,680
of a problem space as recent you'd have

39
00:01:23,680 --> 00:01:24,960
seen there's been a lot of stuff in the

40
00:01:24,960 --> 00:01:26,799
press

41
00:01:26,799 --> 00:01:29,200
i'm predominantly a software engineer so

42
00:01:29,200 --> 00:01:32,799
i'm all about defending but i do um

43
00:01:32,799 --> 00:01:35,040
i volunteer for the kubernetes security

44
00:01:35,040 --> 00:01:36,479
response team

45
00:01:36,479 --> 00:01:38,799
so there we have like a hacker one bug

46
00:01:38,799 --> 00:01:41,600
bounty program so i typically stay

47
00:01:41,600 --> 00:01:43,439
involved with vulnerabilities and you

48
00:01:43,439 --> 00:01:45,600
know trying to get developers to own

49
00:01:45,600 --> 00:01:46,960
that they actually

50
00:01:46,960 --> 00:01:48,880
it's their code that caused the problem

51
00:01:48,880 --> 00:01:49,840
and then

52
00:01:49,840 --> 00:01:51,920
triaging a patch having a responsible

53
00:01:51,920 --> 00:01:54,720
disclosure system all this sort of stuff

54
00:01:54,720 --> 00:01:56,799
yeah and i do um various other things

55
00:01:56,799 --> 00:01:58,799
i've been involved with the open source

56
00:01:58,799 --> 00:02:00,479
security foundation there's some

57
00:02:00,479 --> 00:02:01,840
interesting work that's going on there

58
00:02:01,840 --> 00:02:03,920
as well

59
00:02:03,920 --> 00:02:06,320
great so today um we're going to do an

60
00:02:06,320 --> 00:02:09,038
introduction to what is a supply chain

61
00:02:09,038 --> 00:02:11,038
okay and what are these common security

62
00:02:11,038 --> 00:02:12,400
attacks

63
00:02:12,400 --> 00:02:13,920
okay we'll give some examples of those

64
00:02:13,920 --> 00:02:15,920
attacks they're going to be very high

65
00:02:15,920 --> 00:02:16,879
level

66
00:02:16,879 --> 00:02:18,480
i'm not really going to go too level on

67
00:02:18,480 --> 00:02:20,400
these okay so that we can get a few

68
00:02:20,400 --> 00:02:22,400
different examples in

69
00:02:22,400 --> 00:02:24,000
uh we're going to do an introduction to

70
00:02:24,000 --> 00:02:25,520
sigstor

71
00:02:25,520 --> 00:02:26,560
and then

72
00:02:26,560 --> 00:02:28,800
i was going to do a demonstration but

73
00:02:28,800 --> 00:02:30,400
might shy away from that with the time

74
00:02:30,400 --> 00:02:32,959
that we have and whenever i do demos

75
00:02:32,959 --> 00:02:35,519
they break so you know let's see let's

76
00:02:35,519 --> 00:02:36,480
see

77
00:02:36,480 --> 00:02:38,879
maybe i'll feel brave so so what is a

78
00:02:38,879 --> 00:02:41,120
what is a software supply chain okay so

79
00:02:41,120 --> 00:02:42,480
predominantly what we're talking about

80
00:02:42,480 --> 00:02:45,599
here is it's a mixture of people and

81
00:02:45,599 --> 00:02:47,519
machines okay

82
00:02:47,519 --> 00:02:50,239
two very problematic areas so typically

83
00:02:50,239 --> 00:02:52,160
you'll have your developer

84
00:02:52,160 --> 00:02:54,879
who writes code or they write a change

85
00:02:54,879 --> 00:02:57,440
for an existing code base okay

86
00:02:57,440 --> 00:03:00,159
and they will be the start of the chain

87
00:03:00,159 --> 00:03:01,599
predominantly they are the start of the

88
00:03:01,599 --> 00:03:02,480
chain

89
00:03:02,480 --> 00:03:05,040
so they will commit their code

90
00:03:05,040 --> 00:03:06,400
okay and then you might have another

91
00:03:06,400 --> 00:03:08,720
human who's a reviewer they'll look at

92
00:03:08,720 --> 00:03:10,239
the code and they'll say looks good to

93
00:03:10,239 --> 00:03:11,680
me okay

94
00:03:11,680 --> 00:03:13,360
then you'll start to get the machines

95
00:03:13,360 --> 00:03:14,959
that will be involved so you'll have

96
00:03:14,959 --> 00:03:17,120
your your build system so you might have

97
00:03:17,120 --> 00:03:18,800
integration tests

98
00:03:18,800 --> 00:03:21,840
unit tests uh security lint scanners

99
00:03:21,840 --> 00:03:22,640
like

100
00:03:22,640 --> 00:03:25,200
code ql bandit various different

101
00:03:25,200 --> 00:03:27,280
projects we'll look at the code

102
00:03:27,280 --> 00:03:29,200
check that it

103
00:03:29,200 --> 00:03:31,599
is of the right uh formatting and so

104
00:03:31,599 --> 00:03:32,480
forth

105
00:03:32,480 --> 00:03:33,599
and then

106
00:03:33,599 --> 00:03:35,040
typically what happens is the build

107
00:03:35,040 --> 00:03:37,120
system will generate some sort of

108
00:03:37,120 --> 00:03:39,200
artifact okay so

109
00:03:39,200 --> 00:03:42,000
that could be a package like a python

110
00:03:42,000 --> 00:03:43,280
package

111
00:03:43,280 --> 00:03:46,000
or it could be a container image or it

112
00:03:46,000 --> 00:03:47,519
could be

113
00:03:47,519 --> 00:03:49,840
consumed as yet another code dependency

114
00:03:49,840 --> 00:03:51,680
by another project so another project

115
00:03:51,680 --> 00:03:54,000
could use your software

116
00:03:54,000 --> 00:03:55,120
as a

117
00:03:55,120 --> 00:03:57,200
library or a module or a dependency in

118
00:03:57,200 --> 00:03:59,360
their code base effectively and this is

119
00:03:59,360 --> 00:04:01,280
what we have with this secure sorry with

120
00:04:01,280 --> 00:04:03,519
this supply chain and then eventually we

121
00:04:03,519 --> 00:04:05,840
get the consumers okay and this is the

122
00:04:05,840 --> 00:04:07,040
people that

123
00:04:07,040 --> 00:04:09,439
use software so this is your users

124
00:04:09,439 --> 00:04:10,720
and i think this is where it gets really

125
00:04:10,720 --> 00:04:14,720
interesting with with open source

126
00:04:14,720 --> 00:04:16,560
the people that use

127
00:04:16,560 --> 00:04:18,639
open source software are really we're

128
00:04:18,639 --> 00:04:20,238
talking

129
00:04:20,238 --> 00:04:22,400
uh health banking

130
00:04:22,400 --> 00:04:24,720
military finance

131
00:04:24,720 --> 00:04:26,720
critical infrastructure that we really

132
00:04:26,720 --> 00:04:28,960
rely upon okay so i think we often take

133
00:04:28,960 --> 00:04:31,040
that for granted when you wake up in the

134
00:04:31,040 --> 00:04:33,040
morning the systems that you rely on to

135
00:04:33,040 --> 00:04:34,560
go about your day

136
00:04:34,560 --> 00:04:37,040
you know they're at risk from various

137
00:04:37,040 --> 00:04:38,960
types of attacks okay which we started

138
00:04:38,960 --> 00:04:41,199
to see increasing which

139
00:04:41,199 --> 00:04:44,160
i will get on to now so i'm gonna

140
00:04:44,160 --> 00:04:46,080
there's a lot of kind of splats here to

141
00:04:46,080 --> 00:04:47,919
show areas we're gonna walk into these

142
00:04:47,919 --> 00:04:50,240
in a bit more detail

143
00:04:50,240 --> 00:04:52,160
but there are multiple

144
00:04:52,160 --> 00:04:55,040
junctures where people can compromise a

145
00:04:55,040 --> 00:04:57,600
secure supply chain so there are people

146
00:04:57,600 --> 00:04:59,840
can be compromised their identities can

147
00:04:59,840 --> 00:05:01,280
be stolen

148
00:05:01,280 --> 00:05:03,840
there are build systems that are quite

149
00:05:03,840 --> 00:05:05,680
often exploited especially with open

150
00:05:05,680 --> 00:05:07,840
source projects because a lot of the

151
00:05:07,840 --> 00:05:10,720
time the way they're configured is is

152
00:05:10,720 --> 00:05:14,479
open anybody can go and read the yaml

153
00:05:14,479 --> 00:05:17,039
the json files etc that

154
00:05:17,039 --> 00:05:18,800
dictate how that build system should

155
00:05:18,800 --> 00:05:20,960
operate so they're open to read and

156
00:05:20,960 --> 00:05:22,400
scrutinize

157
00:05:22,400 --> 00:05:23,759
and then there's all these other sort of

158
00:05:23,759 --> 00:05:25,840
attacks which are i'll walk into as we

159
00:05:25,840 --> 00:05:27,919
go through this so one of the common

160
00:05:27,919 --> 00:05:30,800
ones oh yeah and

161
00:05:30,800 --> 00:05:32,320
going a bit too quick there this

162
00:05:32,320 --> 00:05:34,320
actually came out a week ago

163
00:05:34,320 --> 00:05:35,520
um

164
00:05:35,520 --> 00:05:37,120
sona type

165
00:05:37,120 --> 00:05:38,639
i've seen that they reported there's

166
00:05:38,639 --> 00:05:41,680
been a 650 increase

167
00:05:41,680 --> 00:05:44,080
in supply chain attacks and a majority

168
00:05:44,080 --> 00:05:46,880
of these are exploiting open source

169
00:05:46,880 --> 00:05:48,960
systems okay so i think that's the kind

170
00:05:48,960 --> 00:05:50,320
of a good

171
00:05:50,320 --> 00:05:53,759
reflection of how serious things are

172
00:05:53,759 --> 00:05:55,440
so we'll start off with some common

173
00:05:55,440 --> 00:05:57,120
supply chain tax

174
00:05:57,120 --> 00:05:59,440
uh the first one is what we call a roll

175
00:05:59,440 --> 00:06:01,360
uh a roll back a replay attack or a

176
00:06:01,360 --> 00:06:03,759
targeted attack okay

177
00:06:03,759 --> 00:06:07,120
this essentially is a case of

178
00:06:07,120 --> 00:06:08,720
predominantly it happens with update

179
00:06:08,720 --> 00:06:11,759
systems okay or package managers so

180
00:06:11,759 --> 00:06:13,440
somebody will say i want the latest

181
00:06:13,440 --> 00:06:16,080
version of widgets okay

182
00:06:16,080 --> 00:06:18,880
and then the system will reply to tell

183
00:06:18,880 --> 00:06:20,639
them what that version is they will then

184
00:06:20,639 --> 00:06:22,960
pull that version down they'll install

185
00:06:22,960 --> 00:06:25,280
it they'll restart the service

186
00:06:25,280 --> 00:06:26,960
job done okay

187
00:06:26,960 --> 00:06:28,560
now what happens is quite a lot a

188
00:06:28,560 --> 00:06:31,840
nefarious mirror or a proxy

189
00:06:31,840 --> 00:06:34,240
can be involved so that a targeted

190
00:06:34,240 --> 00:06:36,000
attack happens so it's not predict

191
00:06:36,000 --> 00:06:38,160
particularly for everybody it might be a

192
00:06:38,160 --> 00:06:40,639
small group of people are targeted for

193
00:06:40,639 --> 00:06:41,840
an attack

194
00:06:41,840 --> 00:06:43,199
and they believe they're getting the

195
00:06:43,199 --> 00:06:44,800
latest version

196
00:06:44,800 --> 00:06:46,479
but the latest version is probably a

197
00:06:46,479 --> 00:06:48,880
very old version which contains a nasty

198
00:06:48,880 --> 00:06:50,960
cve okay

199
00:06:50,960 --> 00:06:52,800
and you can see here the example of

200
00:06:52,800 --> 00:06:55,520
they're led to believe that 1.9.2

201
00:06:55,520 --> 00:06:57,360
is the latest version whereas it's

202
00:06:57,360 --> 00:07:00,319
actually 1.9.4 and 1.9.2

203
00:07:00,319 --> 00:07:03,840
contains cve xyz and this has happened a

204
00:07:03,840 --> 00:07:06,800
lot we've seen this in um fedora in

205
00:07:06,800 --> 00:07:08,960
different packaging systems there's lots

206
00:07:08,960 --> 00:07:11,599
of uh finer points to this i've i've

207
00:07:11,599 --> 00:07:13,039
kind of put this as a high level but

208
00:07:13,039 --> 00:07:15,120
this is predominantly what a targeted

209
00:07:15,120 --> 00:07:17,039
attack is about

210
00:07:17,039 --> 00:07:19,919
the next one is good old key compromise

211
00:07:19,919 --> 00:07:22,319
okay happens all the time

212
00:07:22,319 --> 00:07:24,880
and one of the problems with

213
00:07:24,880 --> 00:07:26,240
one of the many problems with key

214
00:07:26,240 --> 00:07:28,319
compromise are the trust models so

215
00:07:28,319 --> 00:07:30,160
there's something called tofu anybody

216
00:07:30,160 --> 00:07:33,280
heard of tofu it's not the vegan food

217
00:07:33,280 --> 00:07:36,240
it's uh trust on first use okay so

218
00:07:36,240 --> 00:07:38,160
predominantly what you'll do is

219
00:07:38,160 --> 00:07:39,680
you'll go to it's like when you create

220
00:07:39,680 --> 00:07:42,319
an ssh connection for the first time it

221
00:07:42,319 --> 00:07:44,319
says do you trust this machine you put

222
00:07:44,319 --> 00:07:45,919
yes

223
00:07:45,919 --> 00:07:48,560
trust on first use every time you repeat

224
00:07:48,560 --> 00:07:49,919
a visit to that machine you've

225
00:07:49,919 --> 00:07:51,919
established that trust okay

226
00:07:51,919 --> 00:07:54,479
and a similar thing happens with keys

227
00:07:54,479 --> 00:07:57,280
because predominantly a pgp

228
00:07:57,280 --> 00:08:00,400
gpg what happens is you retrieve a key

229
00:08:00,400 --> 00:08:02,240
from somebody you believe that person to

230
00:08:02,240 --> 00:08:04,960
be that person that they claim to be

231
00:08:04,960 --> 00:08:07,599
you import that key you trust it and

232
00:08:07,599 --> 00:08:09,199
from there on you you've established

233
00:08:09,199 --> 00:08:11,680
your trust on first use

234
00:08:11,680 --> 00:08:13,440
and the problem with this model is

235
00:08:13,440 --> 00:08:15,039
really is is when a

236
00:08:15,039 --> 00:08:17,520
a compromise can happen okay now there's

237
00:08:17,520 --> 00:08:18,879
one thing if you

238
00:08:18,879 --> 00:08:20,560
know that the compromise has happened

239
00:08:20,560 --> 00:08:23,280
there are steps that you can take to

240
00:08:23,280 --> 00:08:25,520
revoke the key but it's when it's not

241
00:08:25,520 --> 00:08:27,280
known about that's the real problem so

242
00:08:27,280 --> 00:08:30,080
when a key compromise occurs

243
00:08:30,080 --> 00:08:32,479
and then you're assuming that this is

244
00:08:32,479 --> 00:08:34,479
linus linus signed this do you see what

245
00:08:34,479 --> 00:08:36,320
i mean it's signed with his pgp

246
00:08:36,320 --> 00:08:37,839
everything is great it's wonderful that

247
00:08:37,839 --> 00:08:40,479
i can i can trust i can trust this

248
00:08:40,479 --> 00:08:42,559
it's exploitfully free it's not been

249
00:08:42,559 --> 00:08:44,640
tampered with okay

250
00:08:44,640 --> 00:08:45,680
and

251
00:08:45,680 --> 00:08:47,839
a lot of the time what we've seen is

252
00:08:47,839 --> 00:08:49,839
these keys are stored on the same

253
00:08:49,839 --> 00:08:51,600
website

254
00:08:51,600 --> 00:08:53,200
as the actual artifacts that you're

255
00:08:53,200 --> 00:08:55,120
retrieving you know and a lot of the

256
00:08:55,120 --> 00:08:57,040
time

257
00:08:57,040 --> 00:08:58,800
they're platforms they get hacked all

258
00:08:58,800 --> 00:09:01,360
the time so you go to this platform

259
00:09:01,360 --> 00:09:04,399
you say i i you know i i want to

260
00:09:04,399 --> 00:09:07,440
verify a particular artifact is signed

261
00:09:07,440 --> 00:09:09,519
by the person that claims to be the

262
00:09:09,519 --> 00:09:11,440
maintainer of that project or the owner

263
00:09:11,440 --> 00:09:13,279
of the software

264
00:09:13,279 --> 00:09:14,240
and

265
00:09:14,240 --> 00:09:16,320
you're actually retrieving the software

266
00:09:16,320 --> 00:09:18,640
and the keys from the same source so we

267
00:09:18,640 --> 00:09:20,959
actually go into that a little bit more

268
00:09:20,959 --> 00:09:22,720
shortly but the main thing i wanted to

269
00:09:22,720 --> 00:09:24,240
illustrate here is

270
00:09:24,240 --> 00:09:26,000
very hard to detect when a key

271
00:09:26,000 --> 00:09:28,560
compromise happens and this is kind of

272
00:09:28,560 --> 00:09:30,640
leading into the area where six door

273
00:09:30,640 --> 00:09:33,519
comes into play

274
00:09:33,600 --> 00:09:36,240
okay another attack that you've probably

275
00:09:36,240 --> 00:09:38,480
all heard of i imagine some of you

276
00:09:38,480 --> 00:09:40,320
probably know it much better than me and

277
00:09:40,320 --> 00:09:41,760
you've studied this in detail but

278
00:09:41,760 --> 00:09:43,600
there's a solar winds attack

279
00:09:43,600 --> 00:09:45,680
okay and effectively a

280
00:09:45,680 --> 00:09:48,160
dynamic link library was compromised

281
00:09:48,160 --> 00:09:51,600
backdoored okay and that was accepted

282
00:09:51,600 --> 00:09:53,680
because it was signed by a certificate

283
00:09:53,680 --> 00:09:56,399
that had been compromised effectively so

284
00:09:56,399 --> 00:09:59,360
it appeared to be a trusted

285
00:09:59,360 --> 00:10:01,680
trusted piece of software but evidently

286
00:10:01,680 --> 00:10:04,079
it wasn't because what happened was this

287
00:10:04,079 --> 00:10:06,240
would then spawn a command and control

288
00:10:06,240 --> 00:10:07,440
server

289
00:10:07,440 --> 00:10:09,519
which would then leak private data out

290
00:10:09,519 --> 00:10:12,399
to to criminals and uh you know hostile

291
00:10:12,399 --> 00:10:14,079
states that sort of thing

292
00:10:14,079 --> 00:10:16,640
and the result of this was that

293
00:10:16,640 --> 00:10:19,920
many many us government sites military

294
00:10:19,920 --> 00:10:21,360
systems

295
00:10:21,360 --> 00:10:23,440
were attacked and compromised and we

296
00:10:23,440 --> 00:10:27,279
still don't know to what degree okay

297
00:10:27,600 --> 00:10:30,000
another one this is around swapped

298
00:10:30,000 --> 00:10:32,160
hashes and artifacts this one happens so

299
00:10:32,160 --> 00:10:35,519
much linux mint the linux distribution

300
00:10:35,519 --> 00:10:37,839
some of you might have heard of

301
00:10:37,839 --> 00:10:40,079
they had a wordpress site

302
00:10:40,079 --> 00:10:43,760
and on there they had a an md5 checksum

303
00:10:43,760 --> 00:10:46,399
of the iso image okay so you download

304
00:10:46,399 --> 00:10:48,160
the iso image

305
00:10:48,160 --> 00:10:53,040
you run md5 sum it spits out a digest

306
00:10:53,040 --> 00:10:54,560
you look at the one on the website and

307
00:10:54,560 --> 00:10:55,519
you think

308
00:10:55,519 --> 00:10:57,839
great i can trust it okay but the

309
00:10:57,839 --> 00:11:01,200
problem is somebody swapped out the iso

310
00:11:01,200 --> 00:11:02,720
and while they were there they swapped

311
00:11:02,720 --> 00:11:05,519
out the digest as well okay so again

312
00:11:05,519 --> 00:11:07,279
another example of

313
00:11:07,279 --> 00:11:09,200
this is problem of people

314
00:11:09,200 --> 00:11:10,959
storing

315
00:11:10,959 --> 00:11:13,680
cryptographic properties on

316
00:11:13,680 --> 00:11:16,160
systems that are exploited okay and are

317
00:11:16,160 --> 00:11:18,240
trivial for the people that want to

318
00:11:18,240 --> 00:11:20,320
exploit these systems their trivial

319
00:11:20,320 --> 00:11:24,399
systems to to attack in the first place

320
00:11:24,399 --> 00:11:26,560
another example of this and i don't want

321
00:11:26,560 --> 00:11:28,399
to pick on any projects but you know

322
00:11:28,399 --> 00:11:30,399
it's it's it's key to look at this to

323
00:11:30,399 --> 00:11:32,000
get an understanding

324
00:11:32,000 --> 00:11:34,720
anybody heard of tails

325
00:11:34,720 --> 00:11:38,399
yeah okay seen a few nods there so tails

326
00:11:38,399 --> 00:11:40,880
is a linux distribution

327
00:11:40,880 --> 00:11:43,120
that is um

328
00:11:43,120 --> 00:11:44,320
so i guess

329
00:11:44,320 --> 00:11:46,720
core to its philosophy is privacy so

330
00:11:46,720 --> 00:11:48,640
it's utilized by whistleblowers

331
00:11:48,640 --> 00:11:50,079
journalists

332
00:11:50,079 --> 00:11:51,839
people that need to

333
00:11:51,839 --> 00:11:54,720
leak information okay and are probably

334
00:11:54,720 --> 00:11:56,720
targets because of those actions that

335
00:11:56,720 --> 00:12:01,680
they're taking so again you download

336
00:12:01,760 --> 00:12:04,320
the iso image and you get the

337
00:12:04,320 --> 00:12:07,360
cryptographic keys to verify it from the

338
00:12:07,360 --> 00:12:10,160
same website so again somebody all they

339
00:12:10,160 --> 00:12:12,800
have to do is swap out the iso

340
00:12:12,800 --> 00:12:15,120
and the keys now you might have visited

341
00:12:15,120 --> 00:12:16,480
before and already had the key and

342
00:12:16,480 --> 00:12:18,560
notice that it's changed in that case

343
00:12:18,560 --> 00:12:20,880
you're covered but when we consider this

344
00:12:20,880 --> 00:12:23,120
trust on first use model

345
00:12:23,120 --> 00:12:24,720
where people for the first time are

346
00:12:24,720 --> 00:12:26,720
visiting a website

347
00:12:26,720 --> 00:12:28,240
they don't know about that they have no

348
00:12:28,240 --> 00:12:30,720
past association and there's no

349
00:12:30,720 --> 00:12:33,360
authority to vouch for the identity of

350
00:12:33,360 --> 00:12:35,839
that particular individual

351
00:12:35,839 --> 00:12:37,040
and as you can imagine if a

352
00:12:37,040 --> 00:12:40,240
whistleblower's system is compromised

353
00:12:40,240 --> 00:12:42,639
human rights are across you know it's it

354
00:12:42,639 --> 00:12:45,519
really is that serious

355
00:12:45,519 --> 00:12:47,279
so another one kind of coming back to

356
00:12:47,279 --> 00:12:49,440
open source did anybody hear a code

357
00:12:49,440 --> 00:12:50,720
cover attack

358
00:12:50,720 --> 00:12:53,920
at all so codecov is

359
00:12:53,920 --> 00:12:56,959
short for code coverage okay so the idea

360
00:12:56,959 --> 00:12:58,320
is that

361
00:12:58,320 --> 00:13:01,920
your code is passed out and they

362
00:13:01,920 --> 00:13:04,240
calculate how much coverage of unit

363
00:13:04,240 --> 00:13:06,399
testing you have so do you have a good

364
00:13:06,399 --> 00:13:08,959
unit test coverage for your software a

365
00:13:08,959 --> 00:13:10,240
high score

366
00:13:10,240 --> 00:13:12,959
suggests that your software is

367
00:13:12,959 --> 00:13:16,480
highly tested so it should be

368
00:13:16,480 --> 00:13:18,000
robust and

369
00:13:18,000 --> 00:13:20,560
and relatively bug-free

370
00:13:20,560 --> 00:13:22,800
now code curve

371
00:13:22,800 --> 00:13:25,120
had a backshot loader script that people

372
00:13:25,120 --> 00:13:26,320
would use

373
00:13:26,320 --> 00:13:28,639
so what they would do is they would um

374
00:13:28,639 --> 00:13:30,959
have a curl bash statement and this

375
00:13:30,959 --> 00:13:32,639
would sort of

376
00:13:32,639 --> 00:13:34,480
send off a sequence of events that would

377
00:13:34,480 --> 00:13:36,320
get your data up and then you know you

378
00:13:36,320 --> 00:13:38,240
could render your graph around your code

379
00:13:38,240 --> 00:13:39,199
coverage

380
00:13:39,199 --> 00:13:41,440
and we've seen so many of these curl

381
00:13:41,440 --> 00:13:43,519
bash exploits that are happening but

382
00:13:43,519 --> 00:13:44,480
it's just

383
00:13:44,480 --> 00:13:46,160
you know we're going to this a bit more

384
00:13:46,160 --> 00:13:47,680
but it's just a common thing that we see

385
00:13:47,680 --> 00:13:48,880
all the time

386
00:13:48,880 --> 00:13:50,639
so somebody managed to compromise the

387
00:13:50,639 --> 00:13:53,040
script okay they swap the script out

388
00:13:53,040 --> 00:13:54,720
with something that would leak all of

389
00:13:54,720 --> 00:13:56,320
these secrets

390
00:13:56,320 --> 00:13:58,880
from people's build systems github

391
00:13:58,880 --> 00:14:01,279
actions and so forth so if anybody had

392
00:14:01,279 --> 00:14:04,959
like developer keys github keys

393
00:14:04,959 --> 00:14:07,040
uh secrets

394
00:14:07,040 --> 00:14:09,839
any sort of sensitive materials it was

395
00:14:09,839 --> 00:14:12,399
leaked by this script effectively and

396
00:14:12,399 --> 00:14:15,360
this was pretty serious it happened in

397
00:14:15,360 --> 00:14:17,680
kubernetes we had to go fishing to find

398
00:14:17,680 --> 00:14:18,639
them

399
00:14:18,639 --> 00:14:20,160
hashicorp

400
00:14:20,160 --> 00:14:22,399
twilo rapid7

401
00:14:22,399 --> 00:14:24,240
it's a big e-commerce company that were

402
00:14:24,240 --> 00:14:25,279
affected

403
00:14:25,279 --> 00:14:26,880
and they're still out there as well

404
00:14:26,880 --> 00:14:28,480
they're still instances out there i mean

405
00:14:28,480 --> 00:14:30,000
they fixed the script still but there

406
00:14:30,000 --> 00:14:31,440
are people that are not even aware that

407
00:14:31,440 --> 00:14:34,880
this happened in the first place

408
00:14:35,360 --> 00:14:37,839
okay another one again this is really

409
00:14:37,839 --> 00:14:39,680
simple but i love the simple ones

410
00:14:39,680 --> 00:14:41,440
because they work do you see what i mean

411
00:14:41,440 --> 00:14:43,279
you often think it's really complex

412
00:14:43,279 --> 00:14:45,519
stuff but the simple stuff is just

413
00:14:45,519 --> 00:14:47,199
you think how do they think about it so

414
00:14:47,199 --> 00:14:50,240
simple you know and for this one

415
00:14:50,240 --> 00:14:51,760
some of you that develop on github

416
00:14:51,760 --> 00:14:53,199
you'll know

417
00:14:53,199 --> 00:14:55,360
you make your pull request and then a

418
00:14:55,360 --> 00:15:00,000
series of actions ci actions run okay so

419
00:15:00,000 --> 00:15:02,560
they'll possibly spawn some containers

420
00:15:02,560 --> 00:15:05,519
or vms which will then unit test your

421
00:15:05,519 --> 00:15:08,000
code and run code ql and all these

422
00:15:08,000 --> 00:15:09,199
various things

423
00:15:09,199 --> 00:15:11,199
so somebody worked out what you could do

424
00:15:11,199 --> 00:15:12,639
was

425
00:15:12,639 --> 00:15:14,160
so the first time you

426
00:15:14,160 --> 00:15:16,560
send a paw request to a project

427
00:15:16,560 --> 00:15:18,320
it's automatically accepted it's not

428
00:15:18,320 --> 00:15:21,279
merged but it's accepted and ci starts

429
00:15:21,279 --> 00:15:23,920
to run to establish the quality of your

430
00:15:23,920 --> 00:15:26,240
code okay so somebody thought well what

431
00:15:26,240 --> 00:15:28,240
if i just send

432
00:15:28,240 --> 00:15:31,360
some scripts that run a bitcoin miner

433
00:15:31,360 --> 00:15:34,079
then the ci will run it it doesn't

434
00:15:34,079 --> 00:15:36,160
even worry about who i am

435
00:15:36,160 --> 00:15:37,839
it will just run it and for that short

436
00:15:37,839 --> 00:15:40,399
amount of time that it works i'll

437
00:15:40,399 --> 00:15:42,959
accumulate some bitcoin so if i do this

438
00:15:42,959 --> 00:15:45,199
like many many times and start to

439
00:15:45,199 --> 00:15:47,279
generate some bots to do this there's

440
00:15:47,279 --> 00:15:49,600
some money in it now in their favor

441
00:15:49,600 --> 00:15:51,839
github responded really quickly to this

442
00:15:51,839 --> 00:15:54,240
and they changed it so that when

443
00:15:54,240 --> 00:15:56,320
somebody makes a first pull request to a

444
00:15:56,320 --> 00:15:59,759
project the ci is paused until a

445
00:15:59,759 --> 00:16:02,639
maintainer of the project allows it to

446
00:16:02,639 --> 00:16:04,399
go through so they can look at the code

447
00:16:04,399 --> 00:16:05,600
so

448
00:16:05,600 --> 00:16:07,600
you know kudos to github they they

449
00:16:07,600 --> 00:16:11,120
closed that one down pretty quickly

450
00:16:12,160 --> 00:16:15,759
so yeah as i say these systems are

451
00:16:15,759 --> 00:16:17,839
wide open to um

452
00:16:17,839 --> 00:16:20,880
for recce essentially to to look at and

453
00:16:20,880 --> 00:16:23,839
um they're open to scrutiny you know

454
00:16:23,839 --> 00:16:25,120
that that's that's one of the key

455
00:16:25,120 --> 00:16:27,120
elements here

456
00:16:27,120 --> 00:16:29,360
so attackers can look at things like

457
00:16:29,360 --> 00:16:32,959
integration tests you know that create

458
00:16:32,959 --> 00:16:35,279
machines and then you know virtual

459
00:16:35,279 --> 00:16:36,800
networks and there's all sorts of stuff

460
00:16:36,800 --> 00:16:38,959
that happens in integration tests they

461
00:16:38,959 --> 00:16:41,440
can see possible exploits there and as i

462
00:16:41,440 --> 00:16:43,600
said earlier there's so many instances

463
00:16:43,600 --> 00:16:45,440
of people doing this

464
00:16:45,440 --> 00:16:48,000
here's my project they want people to

465
00:16:48,000 --> 00:16:51,360
use it quickly so they say curl

466
00:16:51,360 --> 00:16:53,519
a shell script down you've got no idea

467
00:16:53,519 --> 00:16:55,680
what that shell script is and run it as

468
00:16:55,680 --> 00:16:58,399
root on your machine and it's really bad

469
00:16:58,399 --> 00:17:00,639
you know you're you're a smart audience

470
00:17:00,639 --> 00:17:03,040
you're security guy guys and girls so

471
00:17:03,040 --> 00:17:05,679
you know you know not to do this but

472
00:17:05,679 --> 00:17:07,199
if you just happen to be passing and

473
00:17:07,199 --> 00:17:08,959
you've walked in off the street don't do

474
00:17:08,959 --> 00:17:12,640
this it's really bad it's really bad

475
00:17:12,640 --> 00:17:15,359
okay another one is typo squatting and i

476
00:17:15,359 --> 00:17:16,559
forgot to say we're going to make this

477
00:17:16,559 --> 00:17:19,439
interactive okay

478
00:17:19,439 --> 00:17:22,000
so typo squadron is

479
00:17:22,000 --> 00:17:24,400
essentially you find a name that's very

480
00:17:24,400 --> 00:17:27,520
similar to an existing project okay and

481
00:17:27,520 --> 00:17:29,520
you just change a small part of it so to

482
00:17:29,520 --> 00:17:31,120
the human eye

483
00:17:31,120 --> 00:17:33,120
they can't really spot the difference

484
00:17:33,120 --> 00:17:36,240
okay but then you're then able to have

485
00:17:36,240 --> 00:17:38,640
somebody pull down your package

486
00:17:38,640 --> 00:17:41,200
which is malicious and run okay and this

487
00:17:41,200 --> 00:17:43,919
is especially key when

488
00:17:43,919 --> 00:17:46,000
let's take python okay they have their

489
00:17:46,000 --> 00:17:48,480
dependency requirements.text some of

490
00:17:48,480 --> 00:17:52,160
them have like 25 you know nobody reads

491
00:17:52,160 --> 00:17:54,160
over all of those you know

492
00:17:54,160 --> 00:17:56,400
you just don't see what i mean it just

493
00:17:56,400 --> 00:17:57,919
it might be some that do but they're a

494
00:17:57,919 --> 00:17:59,200
minority

495
00:17:59,200 --> 00:18:00,880
so i wanted to um

496
00:18:00,880 --> 00:18:03,280
just check with you

497
00:18:03,280 --> 00:18:05,039
anybody left or right which is the

498
00:18:05,039 --> 00:18:06,559
malicious one

499
00:18:06,559 --> 00:18:08,880
two seconds one right

500
00:18:08,880 --> 00:18:10,480
okay you got it

501
00:18:10,480 --> 00:18:12,160
so you probably spotted

502
00:18:12,160 --> 00:18:14,400
it's actually the eye is swapped out for

503
00:18:14,400 --> 00:18:15,440
an l

504
00:18:15,440 --> 00:18:18,320
now here's one where there's no

505
00:18:18,320 --> 00:18:21,440
uh deliberate spelling mistake okay so

506
00:18:21,440 --> 00:18:23,280
probably the python developers are going

507
00:18:23,280 --> 00:18:26,480
to get a bit more of a an advantage here

508
00:18:26,480 --> 00:18:28,799
so which one is the actual correct

509
00:18:28,799 --> 00:18:31,919
authentic package

510
00:18:31,919 --> 00:18:34,400
anyone

511
00:18:36,400 --> 00:18:37,840
you're correct yeah

512
00:18:37,840 --> 00:18:40,240
so the one on the left is

513
00:18:40,240 --> 00:18:42,559
that's what linux distributions tend to

514
00:18:42,559 --> 00:18:45,200
do so if you use debian or fedora

515
00:18:45,200 --> 00:18:49,200
they'll prepend prepend yeah python 3 to

516
00:18:49,200 --> 00:18:51,200
the start of the package just helps them

517
00:18:51,200 --> 00:18:53,679
for passing out stuff and you know stuff

518
00:18:53,679 --> 00:18:54,960
like that

519
00:18:54,960 --> 00:18:57,039
so yeah date utils is the actual correct

520
00:18:57,039 --> 00:18:57,919
one

521
00:18:57,919 --> 00:18:59,520
and that was there was actually a case

522
00:18:59,520 --> 00:19:01,679
of a python free date utils that was

523
00:19:01,679 --> 00:19:04,559
compromised as well

524
00:19:04,559 --> 00:19:07,679
okay so looking at all of this

525
00:19:07,679 --> 00:19:09,520
there's a um

526
00:19:09,520 --> 00:19:13,039
so should i stop at the line now

527
00:19:13,039 --> 00:19:15,679
looking into this there's um

528
00:19:15,679 --> 00:19:18,000
some common sort of solutions that we

529
00:19:18,000 --> 00:19:20,480
could start to explore here okay

530
00:19:20,480 --> 00:19:22,880
and one of them is transparency so the

531
00:19:22,880 --> 00:19:25,120
ability to detect a key compromise

532
00:19:25,120 --> 00:19:26,559
because as we've seen

533
00:19:26,559 --> 00:19:29,840
they're very difficult to

534
00:19:29,840 --> 00:19:32,080
very difficult to monitor for okay

535
00:19:32,080 --> 00:19:33,039
unless

536
00:19:33,039 --> 00:19:34,000
somebody

537
00:19:34,000 --> 00:19:34,880
really

538
00:19:34,880 --> 00:19:36,720
spots it because it's their key perhaps

539
00:19:36,720 --> 00:19:38,080
and they know that they didn't sign

540
00:19:38,080 --> 00:19:40,000
something but it's very difficult when

541
00:19:40,000 --> 00:19:42,320
they they are actually compromised to to

542
00:19:42,320 --> 00:19:43,679
establish that

543
00:19:43,679 --> 00:19:45,679
there's this whole thing of tofu that we

544
00:19:45,679 --> 00:19:47,520
described okay

545
00:19:47,520 --> 00:19:50,840
and trust on first use and having

546
00:19:50,840 --> 00:19:53,440
non-repudiation okay around the identity

547
00:19:53,440 --> 00:19:55,360
that's making a claim

548
00:19:55,360 --> 00:19:57,840
there is uh being tamper resistant okay

549
00:19:57,840 --> 00:19:59,679
so people can't

550
00:19:59,679 --> 00:20:01,440
change digests

551
00:20:01,440 --> 00:20:04,000
and manipulate metadata and so forth to

552
00:20:04,000 --> 00:20:07,280
cover up any sort of bad actions

553
00:20:07,280 --> 00:20:09,520
and then there's time stamping okay

554
00:20:09,520 --> 00:20:11,280
trusted time stamping this can really

555
00:20:11,280 --> 00:20:13,360
help protecting against

556
00:20:13,360 --> 00:20:15,600
the forward the targeted attacks that i

557
00:20:15,600 --> 00:20:18,320
described earlier such as replay attacks

558
00:20:18,320 --> 00:20:20,159
so i started to look at these and i

559
00:20:20,159 --> 00:20:21,760
thought what would be a useful

560
00:20:21,760 --> 00:20:24,640
technology to to address

561
00:20:24,640 --> 00:20:26,960
some of these concerns that we've seen

562
00:20:26,960 --> 00:20:28,000
okay

563
00:20:28,000 --> 00:20:30,559
so i had a hunt around

564
00:20:30,559 --> 00:20:32,400
is there anything existing

565
00:20:32,400 --> 00:20:35,039
that we could utilize so this is where i

566
00:20:35,039 --> 00:20:37,120
came across a technology called a

567
00:20:37,120 --> 00:20:39,280
transparency log okay

568
00:20:39,280 --> 00:20:42,720
and a transparency log uses

569
00:20:42,720 --> 00:20:45,440
an algorithm called a merkle tree okay

570
00:20:45,440 --> 00:20:46,799
it's nothing to do with the german

571
00:20:46,799 --> 00:20:49,760
chancellor okay it's uh it's actually uh

572
00:20:49,760 --> 00:20:51,360
ralph merkel

573
00:20:51,360 --> 00:20:53,200
invented the merkle tree

574
00:20:53,200 --> 00:20:55,679
and a merkle tree they're used quite

575
00:20:55,679 --> 00:20:58,240
widely bittorrent uses a merkle tree

576
00:20:58,240 --> 00:21:01,039
bitcoin transactions utilize a mercury

577
00:21:01,039 --> 00:21:04,240
tree a merkle tree and

578
00:21:04,240 --> 00:21:06,799
git has a kind of merkle tree as well

579
00:21:06,799 --> 00:21:09,679
okay and a merkle tree to put it simply

580
00:21:09,679 --> 00:21:11,679
is what you do is you build a tree of

581
00:21:11,679 --> 00:21:14,640
hashes okay so you have digests

582
00:21:14,640 --> 00:21:17,520
okay and what they tend to do is

583
00:21:17,520 --> 00:21:20,559
if you have four blocks okay say you've

584
00:21:20,559 --> 00:21:23,440
got a file you split it into four pieces

585
00:21:23,440 --> 00:21:25,280
let's use the bittorrent

586
00:21:25,280 --> 00:21:27,120
technology as an example

587
00:21:27,120 --> 00:21:28,320
so you've got

588
00:21:28,320 --> 00:21:31,200
star wars avi okay you split it into

589
00:21:31,200 --> 00:21:32,640
four pieces

590
00:21:32,640 --> 00:21:34,960
and you capture a digest for each file

591
00:21:34,960 --> 00:21:39,039
part okay so now you've got four digests

592
00:21:39,039 --> 00:21:40,400
two of them

593
00:21:40,400 --> 00:21:42,559
are concatenated together

594
00:21:42,559 --> 00:21:45,039
and then a hash is generated of that and

595
00:21:45,039 --> 00:21:47,039
then you step up the tree from four to

596
00:21:47,039 --> 00:21:48,159
two

597
00:21:48,159 --> 00:21:51,120
then those two are concatenated together

598
00:21:51,120 --> 00:21:53,440
a hash is made and then you have your

599
00:21:53,440 --> 00:21:57,120
root hash okay and your root hash

600
00:21:57,120 --> 00:21:59,360
represents the entire integrity of the

601
00:21:59,360 --> 00:22:02,400
tree if anybody tried to tamper with any

602
00:22:02,400 --> 00:22:03,360
single

603
00:22:03,360 --> 00:22:06,559
part of that star wars avi

604
00:22:06,559 --> 00:22:09,440
file that that had been uh

605
00:22:09,440 --> 00:22:11,280
seeded i guess they call it for

606
00:22:11,280 --> 00:22:12,559
bittorrent

607
00:22:12,559 --> 00:22:15,440
then it would break the entire

608
00:22:15,440 --> 00:22:17,760
structural integrity of the tree okay

609
00:22:17,760 --> 00:22:19,919
and git does a very similar thing here

610
00:22:19,919 --> 00:22:21,840
and tpm's that we've spoke about before

611
00:22:21,840 --> 00:22:24,400
they use this they call it a hash extend

612
00:22:24,400 --> 00:22:27,360
okay and the good thing about this is

613
00:22:27,360 --> 00:22:30,320
it's computationally very inexpensive to

614
00:22:30,320 --> 00:22:33,200
to hash stuff okay symmetric hashing is

615
00:22:33,200 --> 00:22:35,039
very resource

616
00:22:35,039 --> 00:22:37,200
unintensive okay

617
00:22:37,200 --> 00:22:39,520
but it's incredibly expensive to try to

618
00:22:39,520 --> 00:22:40,960
go the other way

619
00:22:40,960 --> 00:22:43,280
okay it's practically impossible we're

620
00:22:43,280 --> 00:22:45,440
kind of getting into the

621
00:22:45,440 --> 00:22:46,880
the realm of

622
00:22:46,880 --> 00:22:48,960
quantum computing and all that sort of

623
00:22:48,960 --> 00:22:50,320
stuff okay

624
00:22:50,320 --> 00:22:51,919
so um

625
00:22:51,919 --> 00:22:54,000
this is actually the technology where i

626
00:22:54,000 --> 00:22:55,520
noticed this was utilized in an

627
00:22:55,520 --> 00:22:57,120
interesting way is called certificate

628
00:22:57,120 --> 00:22:59,840
transparency okay and certificate

629
00:22:59,840 --> 00:23:01,760
transparency has been around for a while

630
00:23:01,760 --> 00:23:03,840
if you don't know about it chances are

631
00:23:03,840 --> 00:23:06,720
you're already using it so we'll um how

632
00:23:06,720 --> 00:23:08,559
are we doing for time

633
00:23:08,559 --> 00:23:11,039
you okay i'll keep going okay

634
00:23:11,039 --> 00:23:12,080
so

635
00:23:12,080 --> 00:23:13,600
i'm going to give you a give you a kind

636
00:23:13,600 --> 00:23:16,000
of quick context of what certificate

637
00:23:16,000 --> 00:23:18,799
transparency is because it helps frame

638
00:23:18,799 --> 00:23:19,760
how we

639
00:23:19,760 --> 00:23:21,600
leverage this first software signing

640
00:23:21,600 --> 00:23:23,039
transparency

641
00:23:23,039 --> 00:23:25,840
so before certificate transparency came

642
00:23:25,840 --> 00:23:27,360
along what you would have is you'd have

643
00:23:27,360 --> 00:23:29,120
your website admin

644
00:23:29,120 --> 00:23:30,960
obviously this is a black hat in this

645
00:23:30,960 --> 00:23:33,679
instance you'd have your browser

646
00:23:33,679 --> 00:23:35,280
and then you'd have your

647
00:23:35,280 --> 00:23:38,240
your ca your certificate authority okay

648
00:23:38,240 --> 00:23:40,720
so the

649
00:23:41,360 --> 00:23:43,520
the website owner or admin would say

650
00:23:43,520 --> 00:23:47,360
right i've got this domain bigbang.com

651
00:23:47,360 --> 00:23:49,520
can you sign this for me here's my csr

652
00:23:49,520 --> 00:23:51,919
my certificate signing request this will

653
00:23:51,919 --> 00:23:53,679
go off to the ca

654
00:23:53,679 --> 00:23:56,080
so it'd usually be a commercial

655
00:23:56,080 --> 00:23:58,720
corporation like godaddy or verisign or

656
00:23:58,720 --> 00:24:00,640
somebody like that okay

657
00:24:00,640 --> 00:24:02,799
and they would go right let me do some

658
00:24:02,799 --> 00:24:05,120
checks to make sure you are who you

659
00:24:05,120 --> 00:24:06,799
claim to be so

660
00:24:06,799 --> 00:24:09,440
make a txt record against that domain

661
00:24:09,440 --> 00:24:10,320
show

662
00:24:10,320 --> 00:24:12,000
prove to me that you own that domain

663
00:24:12,000 --> 00:24:13,600
okay

664
00:24:13,600 --> 00:24:15,440
they go right we're good

665
00:24:15,440 --> 00:24:17,840
everything's good here's your sign

666
00:24:17,840 --> 00:24:20,400
certificate or your bundle okay and then

667
00:24:20,400 --> 00:24:22,159
you have to try to work out how the hell

668
00:24:22,159 --> 00:24:24,080
do i get this to work in apache or in

669
00:24:24,080 --> 00:24:26,720
jinx okay

670
00:24:26,720 --> 00:24:29,919
then what happens is the browser

671
00:24:29,919 --> 00:24:31,919
i come back on the browser then wants to

672
00:24:31,919 --> 00:24:34,320
visit bigbang.com

673
00:24:34,320 --> 00:24:37,600
so they asked the ca via the

674
00:24:37,600 --> 00:24:41,440
um the root store in the browser okay

675
00:24:41,440 --> 00:24:43,919
can i trust and the ca says yeah yeah

676
00:24:43,919 --> 00:24:45,440
you're good okay and then everything

677
00:24:45,440 --> 00:24:47,120
looks great you get the green padlock

678
00:24:47,120 --> 00:24:48,159
okay

679
00:24:48,159 --> 00:24:51,760
now the problem with this model is

680
00:24:51,760 --> 00:24:53,840
all of our trust is going into this

681
00:24:53,840 --> 00:24:54,960
single

682
00:24:54,960 --> 00:24:57,760
entity the significant authority okay

683
00:24:57,760 --> 00:25:00,720
now if they're they're good

684
00:25:00,720 --> 00:25:01,760
it's okay

685
00:25:01,760 --> 00:25:03,840
but we're having to make a kind of a

686
00:25:03,840 --> 00:25:06,080
very loose decision of trust there

687
00:25:06,080 --> 00:25:08,000
around the ca

688
00:25:08,000 --> 00:25:09,200
okay

689
00:25:09,200 --> 00:25:10,159
so

690
00:25:10,159 --> 00:25:11,200
what

691
00:25:11,200 --> 00:25:12,960
a few folks came up with was this idea

692
00:25:12,960 --> 00:25:16,000
of a certificate transparency log

693
00:25:16,000 --> 00:25:17,440
and what happens now is so the

694
00:25:17,440 --> 00:25:20,000
certificate transparency yogg utilizes

695
00:25:20,000 --> 00:25:23,200
this merkle tree okay so certificates

696
00:25:23,200 --> 00:25:26,159
are sort of hashed into the tree okay

697
00:25:26,159 --> 00:25:28,159
and um

698
00:25:28,159 --> 00:25:30,159
so we get exactly the same flow as

699
00:25:30,159 --> 00:25:33,200
before i'm bigbang.com can you sign my

700
00:25:33,200 --> 00:25:34,159
staff

701
00:25:34,159 --> 00:25:35,840
here's your sign certificate and then

702
00:25:35,840 --> 00:25:38,000
the browser wants to visit the site but

703
00:25:38,000 --> 00:25:39,919
what happens now is

704
00:25:39,919 --> 00:25:41,120
the ca

705
00:25:41,120 --> 00:25:43,279
has to put the certificate chain into

706
00:25:43,279 --> 00:25:46,480
the certificate transparency log okay

707
00:25:46,480 --> 00:25:47,919
and something i didn't mention earlier

708
00:25:47,919 --> 00:25:49,279
with merkle trees they're they're

709
00:25:49,279 --> 00:25:50,559
immutable

710
00:25:50,559 --> 00:25:52,080
so you cannot change them they're

711
00:25:52,080 --> 00:25:53,760
impossible to change okay so they're

712
00:25:53,760 --> 00:25:56,480
considered append only and immutable

713
00:25:56,480 --> 00:25:58,799
okay so that goes into the transparency

714
00:25:58,799 --> 00:25:59,760
log

715
00:25:59,760 --> 00:26:01,919
now the browser when they want to visit

716
00:26:01,919 --> 00:26:03,919
a site they have an ahead of saying

717
00:26:03,919 --> 00:26:06,559
expect ct which is that i'm not going to

718
00:26:06,559 --> 00:26:08,400
trust this unless it's in the it's in

719
00:26:08,400 --> 00:26:10,720
the certificate transparency log not so

720
00:26:10,720 --> 00:26:13,200
much trust i'm not going to serve this

721
00:26:13,200 --> 00:26:14,400
unless it's in the certificate

722
00:26:14,400 --> 00:26:16,960
transparency log

723
00:26:16,960 --> 00:26:18,559
so

724
00:26:18,559 --> 00:26:20,880
we then have an extra entity at the top

725
00:26:20,880 --> 00:26:22,880
which is a monitor

726
00:26:22,880 --> 00:26:25,679
so then the monitors can monitor the log

727
00:26:25,679 --> 00:26:27,840
for domains being signed and they can

728
00:26:27,840 --> 00:26:30,320
see the they have non-repudiation

729
00:26:30,320 --> 00:26:32,240
because the certificate that was signed

730
00:26:32,240 --> 00:26:35,279
for the website is fixed to a root ca

731
00:26:35,279 --> 00:26:36,799
okay so there's

732
00:26:36,799 --> 00:26:39,600
the ca cannot deny that non-repudiation

733
00:26:39,600 --> 00:26:40,960
means that

734
00:26:40,960 --> 00:26:42,880
i can't claim something isn't true

735
00:26:42,880 --> 00:26:45,120
because it's provable with cryptography

736
00:26:45,120 --> 00:26:47,120
essentially okay

737
00:26:47,120 --> 00:26:50,240
and the reason this came up is because a

738
00:26:50,240 --> 00:26:51,360
while ago

739
00:26:51,360 --> 00:26:54,720
google and facebook and a few others

740
00:26:54,720 --> 00:26:56,720
somebody went up to a ca and said hey

741
00:26:56,720 --> 00:26:59,279
i'm google can you sign my certificate

742
00:26:59,279 --> 00:27:00,720
and they weren't sure

743
00:27:00,720 --> 00:27:03,279
and then somebody had a tls certificate

744
00:27:03,279 --> 00:27:05,440
saying they were google on facebook so

745
00:27:05,440 --> 00:27:07,440
you can imagine the damage you could do

746
00:27:07,440 --> 00:27:08,400
if you

747
00:27:08,400 --> 00:27:10,320
the power that you would have if you you

748
00:27:10,320 --> 00:27:12,960
know if that was given to you so now the

749
00:27:12,960 --> 00:27:15,120
likes of all these big providers they

750
00:27:15,120 --> 00:27:18,000
all now monitor these transparency logs

751
00:27:18,000 --> 00:27:20,240
so let's encrypt run one cloudflare

752
00:27:20,240 --> 00:27:22,240
google quite a few others they they're

753
00:27:22,240 --> 00:27:25,360
on these certificate transparency logs

754
00:27:25,360 --> 00:27:28,080
so to cut a long story short i thought

755
00:27:28,080 --> 00:27:30,240
maybe we could utilize this technology

756
00:27:30,240 --> 00:27:31,120
for

757
00:27:31,120 --> 00:27:32,960
software signing because we have some

758
00:27:32,960 --> 00:27:35,039
commonalities there's

759
00:27:35,039 --> 00:27:37,360
you know we could utilize x-509 there's

760
00:27:37,360 --> 00:27:40,559
digests we need an immutable

761
00:27:40,559 --> 00:27:44,080
append only tamper-resistant store

762
00:27:44,080 --> 00:27:44,960
maybe

763
00:27:44,960 --> 00:27:47,279
there could be some traction to this

764
00:27:47,279 --> 00:27:48,960
so i

765
00:27:48,960 --> 00:27:50,480
wrote a prototype it was over the

766
00:27:50,480 --> 00:27:52,520
weekend it was july

767
00:27:52,520 --> 00:27:56,240
2020 locked down

768
00:27:56,240 --> 00:27:58,640
you know might as well try and do this

769
00:27:58,640 --> 00:28:00,640
let's have a go at it so i wrote this

770
00:28:00,640 --> 00:28:04,159
basic system called it project recall

771
00:28:04,159 --> 00:28:07,120
and then like any open source project

772
00:28:07,120 --> 00:28:08,799
i wasn't really quite sure what to do

773
00:28:08,799 --> 00:28:10,559
next so i started to share it with some

774
00:28:10,559 --> 00:28:11,919
people so there's a

775
00:28:11,919 --> 00:28:13,760
a guy from the

776
00:28:13,760 --> 00:28:16,080
google open source security team who i'm

777
00:28:16,080 --> 00:28:17,679
quite good friends with and i shared it

778
00:28:17,679 --> 00:28:20,240
to him i said dan dan lawrence

779
00:28:20,240 --> 00:28:21,840
what do you think and he said this is

780
00:28:21,840 --> 00:28:23,520
pretty cool i'd like to

781
00:28:23,520 --> 00:28:25,440
work on this so then we started to

782
00:28:25,440 --> 00:28:27,440
collaborate and it started to build and

783
00:28:27,440 --> 00:28:29,840
and we built this system called recall

784
00:28:29,840 --> 00:28:31,840
okay so we had this

785
00:28:31,840 --> 00:28:34,159
software signing transparency log we

786
00:28:34,159 --> 00:28:35,600
thought great we started to talk to

787
00:28:35,600 --> 00:28:38,720
people and then what we realized was

788
00:28:38,720 --> 00:28:40,399
um

789
00:28:40,399 --> 00:28:42,720
nobody's signing anything

790
00:28:42,720 --> 00:28:44,320
so we can't get people to put stuff in

791
00:28:44,320 --> 00:28:45,760
because they're not signing anything in

792
00:28:45,760 --> 00:28:47,600
the first place

793
00:28:47,600 --> 00:28:49,120
so it's like right okay well we thought

794
00:28:49,120 --> 00:28:50,720
we had a solution now we've got another

795
00:28:50,720 --> 00:28:53,039
problem okay so

796
00:28:53,039 --> 00:28:55,919
we started to look into

797
00:28:55,919 --> 00:28:57,919
who was signing things and in what way

798
00:28:57,919 --> 00:29:00,399
we did some due diligence

799
00:29:00,399 --> 00:29:02,799
and there was the linux kernel

800
00:29:02,799 --> 00:29:04,159
predominantly most of them were using

801
00:29:04,159 --> 00:29:07,279
pgp as you saw for the linux kernel it's

802
00:29:07,279 --> 00:29:10,320
tofu trust on first used okay

803
00:29:10,320 --> 00:29:12,480
so if littleness has ever compromised

804
00:29:12,480 --> 00:29:15,919
god help us all and um

805
00:29:15,919 --> 00:29:17,840
node.js

806
00:29:17,840 --> 00:29:19,520
again all of the

807
00:29:19,520 --> 00:29:22,320
public keys are on a github readme it

808
00:29:22,320 --> 00:29:24,080
can be changed

809
00:29:24,080 --> 00:29:25,279
um

810
00:29:25,279 --> 00:29:27,840
python they use pgp

811
00:29:27,840 --> 00:29:30,960
keys are on a website uh openssl same

812
00:29:30,960 --> 00:29:33,600
story again kubernetes when i started

813
00:29:33,600 --> 00:29:35,039
this project but they weren't signing

814
00:29:35,039 --> 00:29:37,200
anything they're using sixdoll now so we

815
00:29:37,200 --> 00:29:38,720
managed to get one of these guys and

816
00:29:38,720 --> 00:29:40,480
we're talking to the others

817
00:29:40,480 --> 00:29:42,880
and we looked at package managers

818
00:29:42,880 --> 00:29:45,600
kind of the same story again some had

819
00:29:45,600 --> 00:29:47,919
some level of sign in system

820
00:29:47,919 --> 00:29:50,159
but the usage rate was in the sort of

821
00:29:50,159 --> 00:29:54,240
low two three percent okay uh rust not

822
00:29:54,240 --> 00:29:57,679
doing anything at all so if you

823
00:29:57,679 --> 00:29:59,760
if you're on rust up

824
00:29:59,760 --> 00:30:01,679
or you run cargo to pull your

825
00:30:01,679 --> 00:30:03,440
dependencies in they're all being pulled

826
00:30:03,440 --> 00:30:05,679
in untrusted okay

827
00:30:05,679 --> 00:30:08,720
so um i love rust okay but

828
00:30:08,720 --> 00:30:10,880
the big thing with rust is the

829
00:30:10,880 --> 00:30:13,120
the guarantees you get around memory

830
00:30:13,120 --> 00:30:15,200
safety and ownership so it's seen as

831
00:30:15,200 --> 00:30:17,120
being a secure language

832
00:30:17,120 --> 00:30:19,039
but the package managers just pulls

833
00:30:19,039 --> 00:30:21,840
stuff in untrusted and you know and then

834
00:30:21,840 --> 00:30:24,000
you compile your project from that so

835
00:30:24,000 --> 00:30:26,159
there's a very mixed picture there

836
00:30:26,159 --> 00:30:28,080
and the predominant thing was that

837
00:30:28,080 --> 00:30:30,480
everybody was using pgp it's probably

838
00:30:30,480 --> 00:30:32,240
what i'm going to upset somebody now

839
00:30:32,240 --> 00:30:33,200
okay

840
00:30:33,200 --> 00:30:34,240
um

841
00:30:34,240 --> 00:30:37,679
pgp is broken it's well it's not britain

842
00:30:37,679 --> 00:30:39,679
okay i'll retract that in certain

843
00:30:39,679 --> 00:30:42,080
scenarios it's very useful still okay

844
00:30:42,080 --> 00:30:44,320
like my own company red hat

845
00:30:44,320 --> 00:30:45,840
we sign things with

846
00:30:45,840 --> 00:30:48,559
a gpg key but then we've got a hardware

847
00:30:48,559 --> 00:30:50,880
security module that's locked in a room

848
00:30:50,880 --> 00:30:53,679
that you need to sign to get access to

849
00:30:53,679 --> 00:30:55,200
trying to

850
00:30:55,200 --> 00:30:57,279
replicate that setup as a small open

851
00:30:57,279 --> 00:30:59,519
source project is really difficult and

852
00:30:59,519 --> 00:31:01,519
it's expensive okay

853
00:31:01,519 --> 00:31:03,840
and the general consensus is i mean look

854
00:31:03,840 --> 00:31:05,360
we've got some pretty

855
00:31:05,360 --> 00:31:07,200
heavyweight crypto folks who are just

856
00:31:07,200 --> 00:31:11,039
saying it's days over for pgp okay

857
00:31:11,039 --> 00:31:11,840
and

858
00:31:11,840 --> 00:31:13,679
the

859
00:31:13,679 --> 00:31:16,000
adoption has never really happened i

860
00:31:16,000 --> 00:31:17,840
mean it was it was amazing technology

861
00:31:17,840 --> 00:31:20,080
when it first came out the idea if you

862
00:31:20,080 --> 00:31:21,919
could sign emails you could encrypt

863
00:31:21,919 --> 00:31:24,159
emails okay

864
00:31:24,159 --> 00:31:26,240
but the majority of people just do not

865
00:31:26,240 --> 00:31:28,880
use it i mean you're all security folks

866
00:31:28,880 --> 00:31:31,200
and be really honest with me here

867
00:31:31,200 --> 00:31:35,200
who's got pgp set up for their email

868
00:31:35,840 --> 00:31:39,039
so a quick count i'd say is about

869
00:31:39,039 --> 00:31:43,279
eight or nine of you out of 100 maybe

870
00:31:43,279 --> 00:31:46,720
okay so you know it's um it's just not

871
00:31:46,720 --> 00:31:48,880
got the adoption so we thought we can't

872
00:31:48,880 --> 00:31:50,799
really go with that we need to use a

873
00:31:50,799 --> 00:31:53,279
different protocol here

874
00:31:53,279 --> 00:31:55,840
so again what projects or technologies

875
00:31:55,840 --> 00:31:58,559
can we utilize here because um

876
00:31:58,559 --> 00:32:00,159
one of the other concerns that people

877
00:32:00,159 --> 00:32:03,200
had was managing the private key okay

878
00:32:03,200 --> 00:32:05,200
how do i do that what if i lose my key

879
00:32:05,200 --> 00:32:07,440
what if somebody steals my laptop so we

880
00:32:07,440 --> 00:32:08,880
have to try and solve that issue for

881
00:32:08,880 --> 00:32:10,640
them so for here i'm talking about the

882
00:32:10,640 --> 00:32:12,559
95

883
00:32:12,559 --> 00:32:15,200
who are not really don't have a ubi key

884
00:32:15,200 --> 00:32:17,279
and are really into kind of crypto

885
00:32:17,279 --> 00:32:19,600
management and stuff like that

886
00:32:19,600 --> 00:32:20,880
so

887
00:32:20,880 --> 00:32:22,240
something that's predominantly used a

888
00:32:22,240 --> 00:32:24,960
lot is open id open id connect okay and

889
00:32:24,960 --> 00:32:27,200
the nice thing with open id connect you

890
00:32:27,200 --> 00:32:28,880
get some very

891
00:32:28,880 --> 00:32:31,679
user-friendly security tools two-factor

892
00:32:31,679 --> 00:32:34,480
authentication that are built around it

893
00:32:34,480 --> 00:32:36,480
so for a majority of users they can get

894
00:32:36,480 --> 00:32:38,159
their head around using this stuff like

895
00:32:38,159 --> 00:32:41,519
my wife uses 2fa for her gmail accounts

896
00:32:41,519 --> 00:32:43,600
and stuff like that so it's very easy

897
00:32:43,600 --> 00:32:46,080
for the majority to adopt i'm not

898
00:32:46,080 --> 00:32:48,320
talking the hardcore security geeks here

899
00:32:48,320 --> 00:32:50,640
okay so we thought how could we utilize

900
00:32:50,640 --> 00:32:51,360
this

901
00:32:51,360 --> 00:32:53,360
could somebody sign something with their

902
00:32:53,360 --> 00:32:56,399
open id okay

903
00:32:56,399 --> 00:32:59,120
so we then sort of pivoted from recall

904
00:32:59,120 --> 00:33:00,799
to becoming six door which is what the

905
00:33:00,799 --> 00:33:03,600
project is okay and now we have

906
00:33:03,600 --> 00:33:05,200
this and i'm not going to try to walk

907
00:33:05,200 --> 00:33:07,120
you through that i've got a an animated

908
00:33:07,120 --> 00:33:09,039
slide that will be easier to do

909
00:33:09,039 --> 00:33:10,640
it's a bit of a it's a bit too much to

910
00:33:10,640 --> 00:33:12,559
take in but we

911
00:33:12,559 --> 00:33:14,240
combined all of these technologies

912
00:33:14,240 --> 00:33:16,799
together to create what we now call

913
00:33:16,799 --> 00:33:19,120
ephemeral key sign-in okay so i'll show

914
00:33:19,120 --> 00:33:20,720
you what that looks like

915
00:33:20,720 --> 00:33:23,360
so we have our user they've got their

916
00:33:23,360 --> 00:33:25,679
artifact that they want to sign

917
00:33:25,679 --> 00:33:27,279
there is a new system that we have

918
00:33:27,279 --> 00:33:30,399
called fulcio this is like our pki

919
00:33:30,399 --> 00:33:32,799
certificate signing system

920
00:33:32,799 --> 00:33:34,320
there's recall at the bottom that you

921
00:33:34,320 --> 00:33:36,240
know about that's a

922
00:33:36,240 --> 00:33:38,320
software sign transparency log the

923
00:33:38,320 --> 00:33:40,000
merkle tree and there's also a

924
00:33:40,000 --> 00:33:42,399
certificate transparency log okay so

925
00:33:42,399 --> 00:33:44,880
we've got these various parts of the

926
00:33:44,880 --> 00:33:46,320
system

927
00:33:46,320 --> 00:33:48,640
and what happens is the user generates a

928
00:33:48,640 --> 00:33:52,480
key pair okay this happens locally it's

929
00:33:52,480 --> 00:33:54,640
uh it's ephemeral it's just they don't

930
00:33:54,640 --> 00:33:56,480
even touch disk they're encoded to

931
00:33:56,480 --> 00:33:59,120
memory okay so they'll create a keeper

932
00:33:59,120 --> 00:34:01,279
in this instance it's elliptic curve

933
00:34:01,279 --> 00:34:03,279
p256 okay

934
00:34:03,279 --> 00:34:05,760
they'll then contact our system

935
00:34:05,760 --> 00:34:07,760
and the system will then send back an

936
00:34:07,760 --> 00:34:11,199
open id connect session okay

937
00:34:11,199 --> 00:34:12,960
that user will then

938
00:34:12,960 --> 00:34:15,599
select a provider github or google or

939
00:34:15,599 --> 00:34:17,359
whoever there is there's about 20 of

940
00:34:17,359 --> 00:34:19,040
them okay

941
00:34:19,040 --> 00:34:21,440
and what they will then do is they'll

942
00:34:21,440 --> 00:34:24,000
receive the token and they'll sign their

943
00:34:24,000 --> 00:34:25,918
email address and send it back as a

944
00:34:25,918 --> 00:34:26,879
challenge

945
00:34:26,879 --> 00:34:29,280
now we're not taking any security

946
00:34:29,280 --> 00:34:31,040
guarantees from that email address it's

947
00:34:31,040 --> 00:34:33,199
just an arbitrary bit of data what we

948
00:34:33,199 --> 00:34:35,199
want them to do is prove that they have

949
00:34:35,199 --> 00:34:37,599
the key pair that's all it is that could

950
00:34:37,599 --> 00:34:40,079
say mickey mouse okay so

951
00:34:40,079 --> 00:34:41,839
we don't have to worry about the user as

952
00:34:41,839 --> 00:34:44,480
the source of the email okay the actual

953
00:34:44,480 --> 00:34:47,599
email identity we get from the provider

954
00:34:47,599 --> 00:34:50,719
okay so our service will talk to github

955
00:34:50,719 --> 00:34:52,960
and they'll request a scope of your

956
00:34:52,960 --> 00:34:54,800
email address so that will then come

957
00:34:54,800 --> 00:34:56,399
back okay

958
00:34:56,399 --> 00:34:59,280
and then what we do is we generate an x

959
00:34:59,280 --> 00:35:01,760
509 certificate based on the public key

960
00:35:01,760 --> 00:35:03,839
for the key pair that you have that has

961
00:35:03,839 --> 00:35:06,160
your email address in and it's time

962
00:35:06,160 --> 00:35:09,200
stamped and then it's stored and frozen

963
00:35:09,200 --> 00:35:11,200
into the transparency log

964
00:35:11,200 --> 00:35:13,359
so we then have we've sort of captured

965
00:35:13,359 --> 00:35:14,480
in time

966
00:35:14,480 --> 00:35:17,119
that somebody owned a key pair

967
00:35:17,119 --> 00:35:19,200
that has an account with an identity

968
00:35:19,200 --> 00:35:21,440
provider a particular time in a very

969
00:35:21,440 --> 00:35:24,000
small window and we put that into the

970
00:35:24,000 --> 00:35:26,160
transparency log

971
00:35:26,160 --> 00:35:29,200
what happens is the user then

972
00:35:29,200 --> 00:35:32,160
split second later they sign their

973
00:35:32,160 --> 00:35:35,440
artifact okay and the signature

974
00:35:35,440 --> 00:35:37,599
uh the certificate and the digest are

975
00:35:37,599 --> 00:35:39,839
stored into a second transparency log

976
00:35:39,839 --> 00:35:41,520
the signature

977
00:35:41,520 --> 00:35:43,520
signature transparency log

978
00:35:43,520 --> 00:35:44,560
okay

979
00:35:44,560 --> 00:35:46,480
now they can discard those keys they

980
00:35:46,480 --> 00:35:47,920
don't have to worry about the private

981
00:35:47,920 --> 00:35:48,880
key

982
00:35:48,880 --> 00:35:52,000
being compromised because it's very very

983
00:35:52,000 --> 00:35:54,240
it's very short-lived okay

984
00:35:54,240 --> 00:35:56,000
and then what this gives us then is a

985
00:35:56,000 --> 00:35:59,200
trust route so you can now verify

986
00:35:59,200 --> 00:36:01,520
an artifact has been signed by a

987
00:36:01,520 --> 00:36:04,320
particular individual that is in control

988
00:36:04,320 --> 00:36:06,960
of a particular account by querying the

989
00:36:06,960 --> 00:36:09,200
transparency logs so you're able to

990
00:36:09,200 --> 00:36:12,000
establish the lhines at redhat.com

991
00:36:12,000 --> 00:36:15,040
signed an artifact at a certain time

992
00:36:15,040 --> 00:36:16,880
with a certificate chain which goes to

993
00:36:16,880 --> 00:36:18,960
our root ca okay

994
00:36:18,960 --> 00:36:20,560
now immediately when people see this

995
00:36:20,560 --> 00:36:22,160
they think what if somebody's account

996
00:36:22,160 --> 00:36:23,839
gets hacked

997
00:36:23,839 --> 00:36:26,079
okay that can happen but then it's in

998
00:36:26,079 --> 00:36:28,560
the public transparency log so you can

999
00:36:28,560 --> 00:36:31,280
then monitor for your email being used

1000
00:36:31,280 --> 00:36:34,240
so if your email came up

1001
00:36:34,240 --> 00:36:36,240
and you'd sign something that wasn't

1002
00:36:36,240 --> 00:36:38,240
yours or you you weren't aware of signed

1003
00:36:38,240 --> 00:36:40,160
and then you'd know

1004
00:36:40,160 --> 00:36:42,320
somebody's compromised my account so

1005
00:36:42,320 --> 00:36:43,440
we're actually looking at building

1006
00:36:43,440 --> 00:36:45,920
systems like you know have i been phoned

1007
00:36:45,920 --> 00:36:48,320
so you can sign up so that if your email

1008
00:36:48,320 --> 00:36:49,839
address appears

1009
00:36:49,839 --> 00:36:52,640
or your identity then it will blast out

1010
00:36:52,640 --> 00:36:55,119
to signal alternative email addresses

1011
00:36:55,119 --> 00:36:56,240
that

1012
00:36:56,240 --> 00:36:57,040
you've

1013
00:36:57,040 --> 00:36:58,960
your identity has signed something and

1014
00:36:58,960 --> 00:37:00,880
then that's captured

1015
00:37:00,880 --> 00:37:04,079
and frozen in time okay in a publicly

1016
00:37:04,079 --> 00:37:06,240
orderable transparency log so that then

1017
00:37:06,240 --> 00:37:08,480
gives us a trust route to verify and we

1018
00:37:08,480 --> 00:37:10,000
no longer have to worry about managing

1019
00:37:10,000 --> 00:37:12,400
the private key

1020
00:37:12,400 --> 00:37:15,040
so what we can do then is we can

1021
00:37:15,040 --> 00:37:17,920
stack consensus around trust okay

1022
00:37:17,920 --> 00:37:19,920
so i can say that

1023
00:37:19,920 --> 00:37:22,880
i maybe trust something enough to run in

1024
00:37:22,880 --> 00:37:24,720
my test if

1025
00:37:24,720 --> 00:37:26,880
one maintainer signed it but i'm not

1026
00:37:26,880 --> 00:37:28,560
going to let it run in production until

1027
00:37:28,560 --> 00:37:30,720
three different accounts have signed it

1028
00:37:30,720 --> 00:37:32,960
so then you're stacking up

1029
00:37:32,960 --> 00:37:35,119
the security security guarantees by

1030
00:37:35,119 --> 00:37:36,320
having more

1031
00:37:36,320 --> 00:37:38,720
entities actually attest

1032
00:37:38,720 --> 00:37:42,880
that they signed a particular thing okay

1033
00:37:42,880 --> 00:37:43,760
now

1034
00:37:43,760 --> 00:37:46,960
coincidentally we do cater to

1035
00:37:46,960 --> 00:37:49,440
the real security

1036
00:37:49,440 --> 00:37:52,079
geeks as well okay so we have like pk

1037
00:37:52,079 --> 00:37:55,599
cs11 support for hsms and we also

1038
00:37:55,599 --> 00:37:57,359
integrate with um

1039
00:37:57,359 --> 00:37:59,280
key management solutions from the

1040
00:37:59,280 --> 00:38:01,359
various cloud providers as well

1041
00:38:01,359 --> 00:38:03,200
so that previous one that's for your

1042
00:38:03,200 --> 00:38:04,480
kind of

1043
00:38:04,480 --> 00:38:07,119
developers that just don't do security

1044
00:38:07,119 --> 00:38:08,320
do you see what i mean they're the ones

1045
00:38:08,320 --> 00:38:10,320
that aren't signing anything

1046
00:38:10,320 --> 00:38:13,359
so for them we we balanced usability

1047
00:38:13,359 --> 00:38:16,240
against security guarantees and it's

1048
00:38:16,240 --> 00:38:17,920
it's a pretty good balance but if you

1049
00:38:17,920 --> 00:38:20,640
want to be hardcore and use a ub key you

1050
00:38:20,640 --> 00:38:24,400
can do that with our transparency log

1051
00:38:24,400 --> 00:38:27,040
so in project seekstore we've started to

1052
00:38:27,040 --> 00:38:29,119
create clients these are the tools that

1053
00:38:29,119 --> 00:38:31,119
sign things okay and one of them is a

1054
00:38:31,119 --> 00:38:33,200
project called cosign

1055
00:38:33,200 --> 00:38:35,119
which has seen some really good adoption

1056
00:38:35,119 --> 00:38:36,880
and this is for signing containers so

1057
00:38:36,880 --> 00:38:38,960
you can sign a container

1058
00:38:38,960 --> 00:38:40,320
and um

1059
00:38:40,320 --> 00:38:42,720
you can discard the key afterwards and

1060
00:38:42,720 --> 00:38:44,240
the trust route is captured in the

1061
00:38:44,240 --> 00:38:47,599
transparency logs we also are developing

1062
00:38:47,599 --> 00:38:49,040
a tool

1063
00:38:49,040 --> 00:38:50,480
called s-get

1064
00:38:50,480 --> 00:38:52,960
which is to address the

1065
00:38:52,960 --> 00:38:55,040
curl bash scenario that i described

1066
00:38:55,040 --> 00:38:58,560
earlier so somebody will be able to

1067
00:38:58,560 --> 00:39:00,400
pull down a file

1068
00:39:00,400 --> 00:39:02,960
verify the integrity of that file the

1069
00:39:02,960 --> 00:39:05,119
identities that signed it and then

1070
00:39:05,119 --> 00:39:08,079
execute it only if those checks pass

1071
00:39:08,079 --> 00:39:10,079
okay

1072
00:39:10,079 --> 00:39:11,920
and then we're also working on clients

1073
00:39:11,920 --> 00:39:13,920
for ruby gems we've got some stuff for

1074
00:39:13,920 --> 00:39:15,520
commit signing there's some folks

1075
00:39:15,520 --> 00:39:18,880
looking at signing wazar modules

1076
00:39:18,880 --> 00:39:20,560
the python community looking to

1077
00:39:20,560 --> 00:39:22,560
implement something we're working with

1078
00:39:22,560 --> 00:39:24,160
various different communities to build

1079
00:39:24,160 --> 00:39:26,480
clients as well so it's really the

1080
00:39:26,480 --> 00:39:28,000
project's really blown up there's a lot

1081
00:39:28,000 --> 00:39:29,760
of people starting to contribute now so

1082
00:39:29,760 --> 00:39:31,920
it's really great to see

1083
00:39:31,920 --> 00:39:34,079
the other thing as well we have

1084
00:39:34,079 --> 00:39:36,960
our root ca is is open

1085
00:39:36,960 --> 00:39:39,599
okay so when we created our root ca it

1086
00:39:39,599 --> 00:39:42,560
happened live on twitch okay and all of

1087
00:39:42,560 --> 00:39:44,800
the establishing of our roots here is

1088
00:39:44,800 --> 00:39:46,720
captured in a repository and we had

1089
00:39:46,720 --> 00:39:49,119
people verify everything so we had

1090
00:39:49,119 --> 00:39:51,599
people ask questions like

1091
00:39:51,599 --> 00:39:54,480
what's the what's the price of bitcoin

1092
00:39:54,480 --> 00:39:56,800
uh what's the temperature in rome today

1093
00:39:56,800 --> 00:39:58,640
so that

1094
00:39:58,640 --> 00:40:00,160
people could obviously see that it

1095
00:40:00,160 --> 00:40:01,839
wasn't a pre-recorded event it was

1096
00:40:01,839 --> 00:40:03,359
happening live

1097
00:40:03,359 --> 00:40:05,760
so we use this for our infrastructure

1098
00:40:05,760 --> 00:40:08,800
okay and there's five key holders

1099
00:40:08,800 --> 00:40:11,839
and it's a mix of uh academia and

1100
00:40:11,839 --> 00:40:13,839
corporate so we've got some folks from

1101
00:40:13,839 --> 00:40:15,040
nyu

1102
00:40:15,040 --> 00:40:17,520
and purdue university and then there's

1103
00:40:17,520 --> 00:40:19,359
myself and another guy from red hat and

1104
00:40:19,359 --> 00:40:21,040
there's dan from google

1105
00:40:21,040 --> 00:40:23,280
and then if any of us are going missing

1106
00:40:23,280 --> 00:40:24,400
for some reason

1107
00:40:24,400 --> 00:40:26,880
we can swap out because you need three

1108
00:40:26,880 --> 00:40:29,599
keys to swap out a previous key holder

1109
00:40:29,599 --> 00:40:32,240
or if somebody's key is compromised then

1110
00:40:32,240 --> 00:40:35,359
we have key compromise resilience okay

1111
00:40:35,359 --> 00:40:36,839
so we

1112
00:40:36,839 --> 00:40:39,599
can quite relatively easily swap

1113
00:40:39,599 --> 00:40:41,520
somebody out so we will rotate people

1114
00:40:41,520 --> 00:40:43,680
every six months and we're making this

1115
00:40:43,680 --> 00:40:45,440
available to other open source projects

1116
00:40:45,440 --> 00:40:47,440
to use for free so if you need a trust

1117
00:40:47,440 --> 00:40:49,760
rate you don't have to go and spend how

1118
00:40:49,760 --> 00:40:52,160
many many hundred dollars you can come

1119
00:40:52,160 --> 00:40:53,760
and see us and we'll create something

1120
00:40:53,760 --> 00:40:55,920
for you

1121
00:40:55,920 --> 00:40:58,160
so our sort of vision at the moment

1122
00:40:58,160 --> 00:41:00,240
really is what we want to do is we want

1123
00:41:00,240 --> 00:41:02,400
to be to software signing on provenance

1124
00:41:02,400 --> 00:41:05,440
what let's encrypt was to tls okay

1125
00:41:05,440 --> 00:41:08,000
so an interesting thing happened

1126
00:41:08,000 --> 00:41:10,400
when let's encrypt came on the scene so

1127
00:41:10,400 --> 00:41:12,319
previously

1128
00:41:12,319 --> 00:41:14,160
there were many many sites running on

1129
00:41:14,160 --> 00:41:16,480
http okay

1130
00:41:16,480 --> 00:41:18,720
a lot of personal blogs even e-commerce

1131
00:41:18,720 --> 00:41:21,280
sites were run on http

1132
00:41:21,280 --> 00:41:23,119
and a lot of this was because it was

1133
00:41:23,119 --> 00:41:25,520
just a hassle to get a certificate you

1134
00:41:25,520 --> 00:41:27,839
had to go to somebody

1135
00:41:27,839 --> 00:41:29,280
give them money

1136
00:41:29,280 --> 00:41:31,680
scan your passport send it to them wait

1137
00:41:31,680 --> 00:41:34,240
for them to reply prove who you are

1138
00:41:34,240 --> 00:41:36,240
there's all this faffing about that what

1139
00:41:36,240 --> 00:41:39,119
happened for you to get your certificate

1140
00:41:39,119 --> 00:41:40,720
and let's encrypt came along and they

1141
00:41:40,720 --> 00:41:42,880
made them free okay and they provided

1142
00:41:42,880 --> 00:41:44,400
the tooling so you could get them like

1143
00:41:44,400 --> 00:41:46,400
that okay and then an interesting shift

1144
00:41:46,400 --> 00:41:47,760
happened

1145
00:41:47,760 --> 00:41:50,960
it became socially unacceptable to run a

1146
00:41:50,960 --> 00:41:53,119
site on http

1147
00:41:53,119 --> 00:41:55,920
so now if you go to a site and it's http

1148
00:41:55,920 --> 00:41:57,760
it's like

1149
00:41:57,760 --> 00:41:59,520
you're like i'm going to get a virus or

1150
00:41:59,520 --> 00:42:01,119
something it just feels a bit dirty do

1151
00:42:01,119 --> 00:42:02,880
you know what i mean because everybody

1152
00:42:02,880 --> 00:42:05,920
expects https now not even your power

1153
00:42:05,920 --> 00:42:08,079
users you know so we managed to shift

1154
00:42:08,079 --> 00:42:10,240
the paradigm and that's what we want to

1155
00:42:10,240 --> 00:42:13,119
do for software that's our vision in in

1156
00:42:13,119 --> 00:42:15,680
sigstor is so that it's no longer

1157
00:42:15,680 --> 00:42:18,400
acceptable to pull in packages and

1158
00:42:18,400 --> 00:42:21,040
dependencies from the internet

1159
00:42:21,040 --> 00:42:22,800
and run them in your software without

1160
00:42:22,800 --> 00:42:24,640
them being trusted we want that to

1161
00:42:24,640 --> 00:42:27,280
become a bit kind of

1162
00:42:27,280 --> 00:42:29,760
that's not good

1163
00:42:29,760 --> 00:42:31,599
okay so that's our kind of our driving

1164
00:42:31,599 --> 00:42:33,040
vision

1165
00:42:33,040 --> 00:42:35,839
um what we have coming next is we're

1166
00:42:35,839 --> 00:42:37,280
looking to integrate with more

1167
00:42:37,280 --> 00:42:39,839
communities so arch linux want to use us

1168
00:42:39,839 --> 00:42:42,400
for binary transparency been speaking to

1169
00:42:42,400 --> 00:42:45,040
the arch folks uh doing work with

1170
00:42:45,040 --> 00:42:47,119
kubernetes bitcoin want to use sigstor

1171
00:42:47,119 --> 00:42:49,440
to sign bitcoin releases they got an

1172
00:42:49,440 --> 00:42:50,800
issue about that

1173
00:42:50,800 --> 00:42:53,200
uh ruby gems python the ross community

1174
00:42:53,200 --> 00:42:56,079
was starting to approach them

1175
00:42:56,079 --> 00:42:58,480
and we're also starting to look at

1176
00:42:58,480 --> 00:43:00,319
s-bombs so we're starting to realize

1177
00:43:00,319 --> 00:43:02,400
this technology is really

1178
00:43:02,400 --> 00:43:04,640
conducive to supporting s-bombs so an

1179
00:43:04,640 --> 00:43:07,280
s-bomb is a secure bill of materials

1180
00:43:07,280 --> 00:43:09,440
okay so it's essentially uh

1181
00:43:09,440 --> 00:43:11,520
a log of what's happened to build a

1182
00:43:11,520 --> 00:43:13,599
piece of software okay and there's lots

1183
00:43:13,599 --> 00:43:15,200
of people realizing this would be pretty

1184
00:43:15,200 --> 00:43:16,720
good to build

1185
00:43:16,720 --> 00:43:19,599
to uh to provide provenance of an s-bomb

1186
00:43:19,599 --> 00:43:21,119
okay

1187
00:43:21,119 --> 00:43:23,200
and um

1188
00:43:23,200 --> 00:43:24,720
just before i go into that i just

1189
00:43:24,720 --> 00:43:26,240
realized one thing that's missing here

1190
00:43:26,240 --> 00:43:27,119
so

1191
00:43:27,119 --> 00:43:29,520
we're running a public service right now

1192
00:43:29,520 --> 00:43:31,760
so you can use sigstor to start signing

1193
00:43:31,760 --> 00:43:32,720
things

1194
00:43:32,720 --> 00:43:35,440
but we are not fully launched as yet

1195
00:43:35,440 --> 00:43:37,599
we're in soft launch so we're what we're

1196
00:43:37,599 --> 00:43:39,040
doing at the moment is we're seeking

1197
00:43:39,040 --> 00:43:40,880
funding okay so we're approaching

1198
00:43:40,880 --> 00:43:42,960
various people to fund us we're under

1199
00:43:42,960 --> 00:43:45,359
the linux foundation okay

1200
00:43:45,359 --> 00:43:47,359
and sigstor is going to run as a

1201
00:43:47,359 --> 00:43:49,839
non-profit free to use service for

1202
00:43:49,839 --> 00:43:52,160
everybody okay there's not going to be

1203
00:43:52,160 --> 00:43:55,040
any pay more and get a special tier it's

1204
00:43:55,040 --> 00:43:57,040
for everybody to use this has to work

1205
00:43:57,040 --> 00:43:59,359
for everybody it's got to be easy to use

1206
00:43:59,359 --> 00:44:01,680
and it's got to be free and that was one

1207
00:44:01,680 --> 00:44:02,640
of the

1208
00:44:02,640 --> 00:44:05,279
the core

1209
00:44:05,440 --> 00:44:07,440
asks that i had for this project was

1210
00:44:07,440 --> 00:44:09,599
that if it's going to work it needs to

1211
00:44:09,599 --> 00:44:12,319
be non-profit driven okay

1212
00:44:12,319 --> 00:44:13,520
so um

1213
00:44:13,520 --> 00:44:15,040
what i'd like to say is a kind of a

1214
00:44:15,040 --> 00:44:17,200
little call to action is

1215
00:44:17,200 --> 00:44:20,079
if you're interested do approach me our

1216
00:44:20,079 --> 00:44:22,480
transparency log is open so lots of

1217
00:44:22,480 --> 00:44:24,400
people are looking to build security

1218
00:44:24,400 --> 00:44:26,319
systems on top of that because there's

1219
00:44:26,319 --> 00:44:28,079
all sorts of interesting data sets that

1220
00:44:28,079 --> 00:44:30,240
you can get at you can monitor for your

1221
00:44:30,240 --> 00:44:33,040
clients to look for key compromise

1222
00:44:33,040 --> 00:44:35,359
uh software bill of material provenance

1223
00:44:35,359 --> 00:44:36,720
and so forth

1224
00:44:36,720 --> 00:44:37,839
um

1225
00:44:37,839 --> 00:44:39,839
if you need stuff signing come and see

1226
00:44:39,839 --> 00:44:42,240
us okay we're always really keen to work

1227
00:44:42,240 --> 00:44:43,599
with people

1228
00:44:43,599 --> 00:44:46,319
and we are really really like friendly

1229
00:44:46,319 --> 00:44:49,119
community we mentor people

1230
00:44:49,119 --> 00:44:51,440
you don't have to be like a security

1231
00:44:51,440 --> 00:44:52,760
engineer

1232
00:44:52,760 --> 00:44:55,280
documentation sysadmins to kick the

1233
00:44:55,280 --> 00:44:57,920
tires get things to work report bugs so

1234
00:44:57,920 --> 00:45:00,400
we really are a welcoming place so i do

1235
00:45:00,400 --> 00:45:02,160
encourage you to come along

1236
00:45:02,160 --> 00:45:05,520
and um if you need to get in touch we

1237
00:45:05,520 --> 00:45:08,880
have our website sigstor.dev okay you'll

1238
00:45:08,880 --> 00:45:10,720
find everything you need there

1239
00:45:10,720 --> 00:45:13,760
and then all of our code is 100 open

1240
00:45:13,760 --> 00:45:16,400
source okay so you you can come in you

1241
00:45:16,400 --> 00:45:19,280
can read the code quite a few of you are

1242
00:45:19,280 --> 00:45:20,800
security researchers and you'll probably

1243
00:45:20,800 --> 00:45:21,839
be thinking

1244
00:45:21,839 --> 00:45:23,359
i might go and have a look in there you

1245
00:45:23,359 --> 00:45:25,839
know so we do welcome that what we'd say

1246
00:45:25,839 --> 00:45:28,240
is we are quite early in and we're not

1247
00:45:28,240 --> 00:45:30,240
going to go into production until we

1248
00:45:30,240 --> 00:45:31,280
have a

1249
00:45:31,280 --> 00:45:32,400
thorough

1250
00:45:32,400 --> 00:45:35,359
uh set of scrutiny from

1251
00:45:35,359 --> 00:45:36,640
some people that are going to come in

1252
00:45:36,640 --> 00:45:38,400
and do a threat analysis and look at the

1253
00:45:38,400 --> 00:45:41,440
code and and so but if you do

1254
00:45:41,440 --> 00:45:43,760
we run a responsible disclosure program

1255
00:45:43,760 --> 00:45:45,119
so that means you'll be able to get in

1256
00:45:45,119 --> 00:45:47,440
touch with one of us okay and then we'll

1257
00:45:47,440 --> 00:45:49,520
handle it under embargo

1258
00:45:49,520 --> 00:45:51,200
to make sure that systems are patched

1259
00:45:51,200 --> 00:45:53,599
and users aren't put at risk essentially

1260
00:45:53,599 --> 00:45:56,000
okay and so yeah anybody that's

1261
00:45:56,000 --> 00:45:58,319
interested do come along and

1262
00:45:58,319 --> 00:46:01,359
i'm right on time um thanks for having

1263
00:46:01,359 --> 00:46:02,800
me everybody it's been great really

1264
00:46:02,800 --> 00:46:04,880
enjoyed meeting you and thanks again to

1265
00:46:04,880 --> 00:46:10,200
the folks that put this on cheers

1266
00:46:20,560 --> 00:46:22,640
you

