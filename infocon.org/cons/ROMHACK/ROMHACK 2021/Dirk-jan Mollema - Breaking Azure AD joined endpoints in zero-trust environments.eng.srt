1
00:00:06,620 --> 00:00:10,570
[Applause]

2
00:00:11,120 --> 00:00:12,559
welcome everyone

3
00:00:12,559 --> 00:00:15,200
talk today is about breaking azure a2

4
00:00:15,200 --> 00:00:16,800
joined endpoints in zero twist

5
00:00:16,800 --> 00:00:17,920
environments

6
00:00:17,920 --> 00:00:19,920
really excited to be back in a physical

7
00:00:19,920 --> 00:00:21,680
conference it's really good i hate

8
00:00:21,680 --> 00:00:23,600
online conferences so thank you all for

9
00:00:23,600 --> 00:00:25,279
being here

10
00:00:25,279 --> 00:00:27,680
i'm a little bit about myself i'm dircya

11
00:00:27,680 --> 00:00:30,480
muloma i live in the netherlands and

12
00:00:30,480 --> 00:00:32,320
i do a bit of a mix of penetration

13
00:00:32,320 --> 00:00:33,920
testing red teaming and security

14
00:00:33,920 --> 00:00:35,280
research

15
00:00:35,280 --> 00:00:37,680
i like to write tools that help me doing

16
00:00:37,680 --> 00:00:40,960
my work better and well some of the

17
00:00:40,960 --> 00:00:44,480
better known tools are minim 6 i'm the

18
00:00:44,480 --> 00:00:47,680
python port of the bloodhound gatherer

19
00:00:47,680 --> 00:00:50,640
and for azure i also wrote road tools

20
00:00:50,640 --> 00:00:53,280
which is one of the azure tools

21
00:00:53,280 --> 00:00:55,039
i have a blog and i have a twitter

22
00:00:55,039 --> 00:00:58,559
account where i write about my research

23
00:00:58,559 --> 00:01:00,800
today i want to get started with talking

24
00:01:00,800 --> 00:01:04,159
a bit about azure id what it is and zero

25
00:01:04,159 --> 00:01:05,760
trust really short

26
00:01:05,760 --> 00:01:07,760
and then we'll dive into the technical

27
00:01:07,760 --> 00:01:10,640
content looking at sj80 device join how

28
00:01:10,640 --> 00:01:13,119
it works and what it does and how

29
00:01:13,119 --> 00:01:14,960
trusted platform modules or hardware

30
00:01:14,960 --> 00:01:17,439
based security plays into that

31
00:01:17,439 --> 00:01:20,320
then we'll start a topic about

32
00:01:20,320 --> 00:01:22,400
primary refresh tokens how we can

33
00:01:22,400 --> 00:01:23,840
interact with them from an attacker's

34
00:01:23,840 --> 00:01:26,320
perspective and what's fun stuff we can

35
00:01:26,320 --> 00:01:28,080
do with it to play

36
00:01:28,080 --> 00:01:30,640
um we'll talk about registering devices

37
00:01:30,640 --> 00:01:32,079
in azure 80

38
00:01:32,079 --> 00:01:34,159
on the less official way

39
00:01:34,159 --> 00:01:36,960
and as a bonus i'll talk about bypassing

40
00:01:36,960 --> 00:01:39,119
multi-factor authentication if you're an

41
00:01:39,119 --> 00:01:42,400
intune admin in azure id

42
00:01:42,640 --> 00:01:44,960
so just to make it clear today we're

43
00:01:44,960 --> 00:01:47,360
talking about azure active directory not

44
00:01:47,360 --> 00:01:49,439
to be confused with on-premise active

45
00:01:49,439 --> 00:01:52,000
directory it's completely different even

46
00:01:52,000 --> 00:01:54,399
though it's called partially distinct

47
00:01:54,399 --> 00:01:56,240
but if we're talking about azure 8d is

48
00:01:56,240 --> 00:01:58,799
really the identity platform for all of

49
00:01:58,799 --> 00:02:01,280
microsoft's online services so that's

50
00:02:01,280 --> 00:02:02,880
obviously xd5

51
00:02:02,880 --> 00:02:04,960
but also the azure resource manager

52
00:02:04,960 --> 00:02:06,640
where virtual machines are stored they

53
00:02:06,640 --> 00:02:10,239
all use azure key as a identity platform

54
00:02:10,239 --> 00:02:12,879
and also other third-party sas

55
00:02:12,879 --> 00:02:14,959
applications that you can integrate with

56
00:02:14,959 --> 00:02:16,800
it you can have the authentication done

57
00:02:16,800 --> 00:02:18,319
by azure 8

58
00:02:18,319 --> 00:02:21,120
so we're not talking about

59
00:02:21,120 --> 00:02:23,120
infrastructure as a service of platform

60
00:02:23,120 --> 00:02:25,360
as a servers or virtual machines in

61
00:02:25,360 --> 00:02:27,599
azure this is really about the identity

62
00:02:27,599 --> 00:02:29,760
part

63
00:02:29,760 --> 00:02:33,280
i'll also be talking about zero trust

64
00:02:33,280 --> 00:02:36,480
it's a bit of a buzzword but in the end

65
00:02:36,480 --> 00:02:38,080
zero trust at least the way that

66
00:02:38,080 --> 00:02:40,800
microsoft explains it is really about

67
00:02:40,800 --> 00:02:43,519
combining identity information and that

68
00:02:43,519 --> 00:02:45,680
can be from user identities so that's

69
00:02:45,680 --> 00:02:47,120
what you see on the top

70
00:02:47,120 --> 00:02:48,080
and

71
00:02:48,080 --> 00:02:51,440
also a device identity so the idea is

72
00:02:51,440 --> 00:02:54,080
that if you combine those two then

73
00:02:54,080 --> 00:02:56,560
a user is using authentication on

74
00:02:56,560 --> 00:02:59,360
hopefully a trusted device and based on

75
00:02:59,360 --> 00:03:01,519
that zero trust can make decisions

76
00:03:01,519 --> 00:03:03,120
whether or not you're allowed to access

77
00:03:03,120 --> 00:03:05,920
for example sensitive information

78
00:03:05,920 --> 00:03:08,640
so of course user identities is a fairly

79
00:03:08,640 --> 00:03:10,319
well-known topic

80
00:03:10,319 --> 00:03:13,760
all with passwordless and windows hello

81
00:03:13,760 --> 00:03:15,360
very interesting

82
00:03:15,360 --> 00:03:16,640
but what's a bit

83
00:03:16,640 --> 00:03:18,319
less well talked about is device

84
00:03:18,319 --> 00:03:20,560
identities and how they play into this

85
00:03:20,560 --> 00:03:22,560
whole thing

86
00:03:22,560 --> 00:03:25,360
so device identity is really a device

87
00:03:25,360 --> 00:03:28,239
that is registered or joined to azure ad

88
00:03:28,239 --> 00:03:30,319
now device identity doesn't necessarily

89
00:03:30,319 --> 00:03:32,480
have to be a microsoft product or

90
00:03:32,480 --> 00:03:33,599
microsoft

91
00:03:33,599 --> 00:03:35,840
physical product it can also be your

92
00:03:35,840 --> 00:03:37,519
mobile phone or

93
00:03:37,519 --> 00:03:39,680
it can be for example a mac os laptop

94
00:03:39,680 --> 00:03:41,599
that's joined to azure registered in

95
00:03:41,599 --> 00:03:42,959
azure id

96
00:03:42,959 --> 00:03:45,120
and when these are registered in azure

97
00:03:45,120 --> 00:03:48,159
ad they have a device object so it's

98
00:03:48,159 --> 00:03:50,799
like an identity object but then for a

99
00:03:50,799 --> 00:03:53,200
device instead of a person

100
00:03:53,200 --> 00:03:55,280
and of course devices that are in azure

101
00:03:55,280 --> 00:03:57,120
id can be managed by a mobile device

102
00:03:57,120 --> 00:04:01,080
manager such as intune

103
00:04:01,439 --> 00:04:03,840
so there are a couple of options to

104
00:04:03,840 --> 00:04:06,319
register your device in azure id

105
00:04:06,319 --> 00:04:08,720
i think the full or the modern new

106
00:04:08,720 --> 00:04:12,080
option is azure adjoint then a device

107
00:04:12,080 --> 00:04:14,879
really only knows about azure ad it's

108
00:04:14,879 --> 00:04:17,440
not linked to any on-prem stuff anymore

109
00:04:17,440 --> 00:04:20,320
but it's only for windows 10 so it's

110
00:04:20,320 --> 00:04:21,680
supposed to be used for corporate-owned

111
00:04:21,680 --> 00:04:23,840
devices and they're fully managed and

112
00:04:23,840 --> 00:04:25,919
joined to azure 80.

113
00:04:25,919 --> 00:04:27,199
there's also

114
00:04:27,199 --> 00:04:29,280
like a bit less strict variant which is

115
00:04:29,280 --> 00:04:31,120
suad registered

116
00:04:31,120 --> 00:04:33,680
that means that the device isn't fully

117
00:04:33,680 --> 00:04:36,320
managed but only part of it is managed

118
00:04:36,320 --> 00:04:38,000
you could for example do this for bring

119
00:04:38,000 --> 00:04:39,440
your own device

120
00:04:39,440 --> 00:04:41,360
or on android or iphones you can have

121
00:04:41,360 --> 00:04:42,800
like a container

122
00:04:42,800 --> 00:04:45,440
within which the work data is stored and

123
00:04:45,440 --> 00:04:47,600
then that part is registered in azure id

124
00:04:47,600 --> 00:04:49,120
but it doesn't necessarily mean that you

125
00:04:49,120 --> 00:04:51,199
have to manage the whole device

126
00:04:51,199 --> 00:04:52,960
this is also compatible with more

127
00:04:52,960 --> 00:04:54,400
operating systems rather than just

128
00:04:54,400 --> 00:04:56,320
windows

129
00:04:56,320 --> 00:04:58,800
lastly there's also a hybrid join

130
00:04:58,800 --> 00:05:01,680
which is a bit of a mix match of old and

131
00:05:01,680 --> 00:05:04,720
new so these are primarily joined to an

132
00:05:04,720 --> 00:05:07,039
on-premise active directory domain but

133
00:05:07,039 --> 00:05:09,440
they're also synchronized to azure and

134
00:05:09,440 --> 00:05:12,479
they also have an identity in azure ad

135
00:05:12,479 --> 00:05:14,960
these are not managed by an mdm solution

136
00:05:14,960 --> 00:05:16,880
but are usually managed by the on-prem

137
00:05:16,880 --> 00:05:18,400
ads or via

138
00:05:18,400 --> 00:05:20,160
the well-known group policy objects for

139
00:05:20,160 --> 00:05:22,639
example

140
00:05:22,960 --> 00:05:25,280
um in this talk we'll mainly focus on

141
00:05:25,280 --> 00:05:28,479
azure ad joint or hybrid joints and sja

142
00:05:28,479 --> 00:05:30,800
radius works slightly different but the

143
00:05:30,800 --> 00:05:34,800
concepts do have some overlaps

144
00:05:35,199 --> 00:05:36,960
so the device joint flow how does it

145
00:05:36,960 --> 00:05:41,199
actually look well when you buy like new

146
00:05:41,199 --> 00:05:43,680
surface for example laptop and you set

147
00:05:43,680 --> 00:05:46,000
it up you get this this screen and it

148
00:05:46,000 --> 00:05:47,440
prompts you to sign in with your

149
00:05:47,440 --> 00:05:49,520
microsoft account and if it's a

150
00:05:49,520 --> 00:05:51,120
enterprise edition of windows it will

151
00:05:51,120 --> 00:05:52,400
ask you to

152
00:05:52,400 --> 00:05:53,919
log in with your

153
00:05:53,919 --> 00:05:55,520
work account

154
00:05:55,520 --> 00:05:57,360
so if you do that then you go through

155
00:05:57,360 --> 00:05:59,199
the whole flow and then your device is

156
00:05:59,199 --> 00:06:01,840
automatically joined to azure id

157
00:06:01,840 --> 00:06:03,680
you can also do it for devices that are

158
00:06:03,680 --> 00:06:07,120
already set up so when you have that you

159
00:06:07,120 --> 00:06:09,360
can go to the option to access work or

160
00:06:09,360 --> 00:06:11,520
school and then choose to join your

161
00:06:11,520 --> 00:06:14,240
device to azure 80 but that's not

162
00:06:14,240 --> 00:06:16,319
well it works a bit the same but one is

163
00:06:16,319 --> 00:06:18,560
before setup and one is when you already

164
00:06:18,560 --> 00:06:21,800
have a device

165
00:06:22,319 --> 00:06:25,120
in the background what it does is it

166
00:06:25,120 --> 00:06:26,800
prompts you to sign into your microsoft

167
00:06:26,800 --> 00:06:27,919
account

168
00:06:27,919 --> 00:06:30,479
and using that sign-in data it

169
00:06:30,479 --> 00:06:33,199
requests tokens for the microsoft device

170
00:06:33,199 --> 00:06:35,039
registration service

171
00:06:35,039 --> 00:06:37,360
and once you've got a token and you can

172
00:06:37,360 --> 00:06:39,280
access that service it gives you like

173
00:06:39,280 --> 00:06:40,639
the final prompt

174
00:06:40,639 --> 00:06:42,080
like are you sure you want to join this

175
00:06:42,080 --> 00:06:44,240
device to this organization

176
00:06:44,240 --> 00:06:46,319
and then you click join

177
00:06:46,319 --> 00:06:49,120
so what happens at that point in time

178
00:06:49,120 --> 00:06:51,520
two rsa key pairs i generate so public

179
00:06:51,520 --> 00:06:53,199
key private key

180
00:06:53,199 --> 00:06:55,680
and one is the device key and one is a

181
00:06:55,680 --> 00:06:58,080
transport key and the device key is

182
00:06:58,080 --> 00:06:59,680
really used to

183
00:06:59,680 --> 00:07:02,400
identify the device as an entity and the

184
00:07:02,400 --> 00:07:04,800
transport key is used to

185
00:07:04,800 --> 00:07:07,759
encrypt sensitive data but in transport

186
00:07:07,759 --> 00:07:09,599
between azure id

187
00:07:09,599 --> 00:07:11,680
so the device key can prove the device

188
00:07:11,680 --> 00:07:13,759
identity and a transport key can be used

189
00:07:13,759 --> 00:07:16,400
to transfer sensitive material and the

190
00:07:16,400 --> 00:07:18,639
public key for this is sent to azure ad

191
00:07:18,639 --> 00:07:21,280
and the private parts of these rsa key

192
00:07:21,280 --> 00:07:24,960
pairs remain on the device

193
00:07:25,280 --> 00:07:26,639
how does this look

194
00:07:26,639 --> 00:07:28,240
all right so here's a

195
00:07:28,240 --> 00:07:30,560
request i hope it's a bit uh readable in

196
00:07:30,560 --> 00:07:33,199
the back but we'll go over it bit by bit

197
00:07:33,199 --> 00:07:35,919
and so this is basically the whole azure

198
00:07:35,919 --> 00:07:38,240
ad things they're all apis they're all

199
00:07:38,240 --> 00:07:41,199
web-based apis and this basically a

200
00:07:41,199 --> 00:07:43,520
simple post request

201
00:07:43,520 --> 00:07:46,479
to the enterprise registration service

202
00:07:46,479 --> 00:07:49,039
of course the first part is the access

203
00:07:49,039 --> 00:07:51,120
token for the service so that's when you

204
00:07:51,120 --> 00:07:53,280
signed in you provided your information

205
00:07:53,280 --> 00:07:55,199
and you get back an access token that

206
00:07:55,199 --> 00:07:56,879
proves that you are

207
00:07:56,879 --> 00:07:58,639
actually that you actually have access

208
00:07:58,639 --> 00:08:00,400
to that account

209
00:08:00,400 --> 00:08:03,360
so that's used for the authorization

210
00:08:03,360 --> 00:08:04,960
then there's a certificate signing

211
00:08:04,960 --> 00:08:07,039
request that's really

212
00:08:07,039 --> 00:08:08,879
normal certificate signing requests as

213
00:08:08,879 --> 00:08:10,639
we see in public key infrastructure as

214
00:08:10,639 --> 00:08:13,199
well and that's basically the device

215
00:08:13,199 --> 00:08:16,160
asking azure 80 hey i've just set this

216
00:08:16,160 --> 00:08:18,479
up can you please sign my certificate so

217
00:08:18,479 --> 00:08:21,840
that it can be trusted in the future

218
00:08:21,840 --> 00:08:23,759
next to that there's a transport key

219
00:08:23,759 --> 00:08:25,039
which is the

220
00:08:25,039 --> 00:08:26,400
public key part

221
00:08:26,400 --> 00:08:28,639
of the transport key so that azure id

222
00:08:28,639 --> 00:08:30,400
can has the public key and it can

223
00:08:30,400 --> 00:08:31,919
encrypt information with that when it

224
00:08:31,919 --> 00:08:33,839
wants

225
00:08:33,839 --> 00:08:34,958
and there's also of course some

226
00:08:34,958 --> 00:08:37,120
information about the device

227
00:08:37,120 --> 00:08:39,440
funny enough if you play with this you

228
00:08:39,440 --> 00:08:41,200
can call it anything you want so it

229
00:08:41,200 --> 00:08:43,360
could also be a

230
00:08:43,360 --> 00:08:45,600
i don't know it could say i'm a shoe or

231
00:08:45,600 --> 00:08:47,519
something version 10

232
00:08:47,519 --> 00:08:49,519
and that that would work so it's not

233
00:08:49,519 --> 00:08:51,040
really strictly checked but it's just

234
00:08:51,040 --> 00:08:52,720
used to populate the information in

235
00:08:52,720 --> 00:08:55,519
azure id

236
00:08:55,519 --> 00:08:57,760
the join type is in this case zero so

237
00:08:57,760 --> 00:08:59,279
the join types there are different join

238
00:08:59,279 --> 00:09:01,200
types that we just talked about and zero

239
00:09:01,200 --> 00:09:02,959
is an azure ad join and there are

240
00:09:02,959 --> 00:09:05,040
different numbers for the different join

241
00:09:05,040 --> 00:09:06,720
types

242
00:09:06,720 --> 00:09:09,040
and lastly there's a device ticket

243
00:09:09,040 --> 00:09:11,120
which is used to

244
00:09:11,120 --> 00:09:12,959
prove some different part of the device

245
00:09:12,959 --> 00:09:14,720
identity which is not really important

246
00:09:14,720 --> 00:09:16,800
for this talk and it's also not required

247
00:09:16,800 --> 00:09:18,320
so you can just leave this out if you

248
00:09:18,320 --> 00:09:20,560
want

249
00:09:21,120 --> 00:09:22,640
what happens then in the back end so

250
00:09:22,640 --> 00:09:25,839
azure ad then gives a certificate

251
00:09:25,839 --> 00:09:28,560
and that's difficult is signed by the

252
00:09:28,560 --> 00:09:30,560
certificate authority and then you have

253
00:09:30,560 --> 00:09:32,720
your device certificate there's also a

254
00:09:32,720 --> 00:09:35,440
device object created in azure 80. so if

255
00:09:35,440 --> 00:09:37,200
you go to the azure portal

256
00:09:37,200 --> 00:09:38,560
you see like the device with the

257
00:09:38,560 --> 00:09:41,120
hostname and the windows version and you

258
00:09:41,120 --> 00:09:43,360
see the join type is azure adjoint so

259
00:09:43,360 --> 00:09:46,320
it's obviously joined to ajd

260
00:09:46,320 --> 00:09:48,080
for those that are familiar with this

261
00:09:48,080 --> 00:09:49,279
whole flow

262
00:09:49,279 --> 00:09:51,360
you can see that the mdm is here set to

263
00:09:51,360 --> 00:09:54,560
none so when you join an azure it device

264
00:09:54,560 --> 00:09:56,560
to azure id it doesn't automatically

265
00:09:56,560 --> 00:09:58,800
register as an intune so that step is

266
00:09:58,800 --> 00:10:00,640
distinct from that so there's no link

267
00:10:00,640 --> 00:10:04,600
with intune yet at this point

268
00:10:04,640 --> 00:10:07,519
um what you get back is hopefully a 200

269
00:10:07,519 --> 00:10:09,200
okay from azure

270
00:10:09,200 --> 00:10:10,640
with our certificate

271
00:10:10,640 --> 00:10:12,880
a thumbprint and of course the

272
00:10:12,880 --> 00:10:15,279
certificate that signed by azure 80

273
00:10:15,279 --> 00:10:17,360
as well as some of the membership

274
00:10:17,360 --> 00:10:19,440
changes so when you join the device to

275
00:10:19,440 --> 00:10:20,640
enter id

276
00:10:20,640 --> 00:10:23,040
different users and different groups get

277
00:10:23,040 --> 00:10:24,640
out to the local administrators group on

278
00:10:24,640 --> 00:10:25,760
the device

279
00:10:25,760 --> 00:10:28,000
normally that's the group id of the

280
00:10:28,000 --> 00:10:30,480
global admins and of the

281
00:10:30,480 --> 00:10:32,880
device administrators

282
00:10:32,880 --> 00:10:34,399
and these all have

283
00:10:34,399 --> 00:10:36,000
security identifiers just like you would

284
00:10:36,000 --> 00:10:39,279
normally see on windows

285
00:10:39,519 --> 00:10:41,360
and if you then request the status of

286
00:10:41,360 --> 00:10:43,920
the device you can see that it's azure

287
00:10:43,920 --> 00:10:45,440
adjoint

288
00:10:45,440 --> 00:10:47,279
it's not domain joined to the hybrid

289
00:10:47,279 --> 00:10:49,680
joint device and on the bottom we see

290
00:10:49,680 --> 00:10:52,560
that we have a device id and we have a

291
00:10:52,560 --> 00:10:55,120
certificate and we also see that this

292
00:10:55,120 --> 00:10:58,399
certificate is protected by a tpm

293
00:10:58,399 --> 00:11:00,480
which also we also can see at from the

294
00:11:00,480 --> 00:11:02,640
key provider which says the microsoft

295
00:11:02,640 --> 00:11:05,120
platform crypto profile so the platform

296
00:11:05,120 --> 00:11:07,519
crypto is um usually associated with

297
00:11:07,519 --> 00:11:09,040
something hardware where the software

298
00:11:09,040 --> 00:11:10,720
provider is like

299
00:11:10,720 --> 00:11:13,200
software stored on the device

300
00:11:13,200 --> 00:11:14,399
so in this case

301
00:11:14,399 --> 00:11:15,440
some of the

302
00:11:15,440 --> 00:11:17,200
private parts of the key are protected

303
00:11:17,200 --> 00:11:19,839
by a tpm

304
00:11:19,839 --> 00:11:22,720
now what is a dpn so fully set is a

305
00:11:22,720 --> 00:11:24,800
trusted platform module and it's

306
00:11:24,800 --> 00:11:26,320
supposed to be

307
00:11:26,320 --> 00:11:28,640
a separate processor or a separate part

308
00:11:28,640 --> 00:11:30,800
of the process in which you can store

309
00:11:30,800 --> 00:11:32,800
store secure data

310
00:11:32,800 --> 00:11:35,200
and this can be a physical chip for

311
00:11:35,200 --> 00:11:36,800
example on the desktop computer on the

312
00:11:36,800 --> 00:11:38,320
picture you see one that you can plug on

313
00:11:38,320 --> 00:11:39,760
the motherboard

314
00:11:39,760 --> 00:11:41,680
it can be integrated in your cpu or it

315
00:11:41,680 --> 00:11:44,079
can also be virtual basically most

316
00:11:44,079 --> 00:11:47,120
modern processors do have a virtual tpm

317
00:11:47,120 --> 00:11:50,240
so they have this secure storage area

318
00:11:50,240 --> 00:11:52,560
it's also a requirement for windows 11

319
00:11:52,560 --> 00:11:55,040
probably because microsoft really wants

320
00:11:55,040 --> 00:11:58,240
this security boundary to be enforced in

321
00:11:58,240 --> 00:12:00,480
windows 11 and they want to securely

322
00:12:00,480 --> 00:12:03,440
store these device identities somewhere

323
00:12:03,440 --> 00:12:05,360
because the idea is that if it's in a

324
00:12:05,360 --> 00:12:07,120
separate chip then the operating system

325
00:12:07,120 --> 00:12:08,959
has never has access to the private key

326
00:12:08,959 --> 00:12:11,040
material again so it cannot leave the

327
00:12:11,040 --> 00:12:13,519
device

328
00:12:13,920 --> 00:12:16,880
so i made a little drawing

329
00:12:16,880 --> 00:12:19,120
the private key can either be generated

330
00:12:19,120 --> 00:12:20,959
on a tpm or put there

331
00:12:20,959 --> 00:12:23,360
and after it's in the tpm which is of

332
00:12:23,360 --> 00:12:25,440
course part of the device it's not like

333
00:12:25,440 --> 00:12:26,160
a

334
00:12:26,160 --> 00:12:28,320
usb dongle or something

335
00:12:28,320 --> 00:12:30,240
then the os can no longer

336
00:12:30,240 --> 00:12:33,760
get the private material out of the dpn

337
00:12:33,760 --> 00:12:37,120
what it can do is ask the tpm to use the

338
00:12:37,120 --> 00:12:39,120
private key material so for example if

339
00:12:39,120 --> 00:12:40,639
they want to

340
00:12:40,639 --> 00:12:43,120
calculate an rsa signature they can ask

341
00:12:43,120 --> 00:12:45,200
the tpm hey can you just sign this for

342
00:12:45,200 --> 00:12:46,480
me

343
00:12:46,480 --> 00:12:48,959
and then the tpm will

344
00:12:48,959 --> 00:12:50,399
give you back the

345
00:12:50,399 --> 00:12:53,200
designed information without disclosing

346
00:12:53,200 --> 00:12:55,519
the private key itself

347
00:12:55,519 --> 00:12:56,720
it was really to

348
00:12:56,720 --> 00:12:58,399
keep things separate from the operating

349
00:12:58,399 --> 00:13:00,720
system

350
00:13:00,720 --> 00:13:03,360
now there's a few things about tpms that

351
00:13:03,360 --> 00:13:04,720
are important

352
00:13:04,720 --> 00:13:06,800
but it mainly protects against is like

353
00:13:06,800 --> 00:13:09,360
two scenarios so one is

354
00:13:09,360 --> 00:13:11,839
if you use your tpm to shore store like

355
00:13:11,839 --> 00:13:13,920
for example your bitlocker key then the

356
00:13:13,920 --> 00:13:15,519
scenario is if someone steals your

357
00:13:15,519 --> 00:13:17,920
device they cannot extract that material

358
00:13:17,920 --> 00:13:20,320
from the tpm

359
00:13:20,320 --> 00:13:22,240
at least if it's protected by something

360
00:13:22,240 --> 00:13:24,639
like a pin or a password or something

361
00:13:24,639 --> 00:13:27,120
then it's protected in the tpm

362
00:13:27,120 --> 00:13:28,959
the other thing is

363
00:13:28,959 --> 00:13:29,680
it

364
00:13:29,680 --> 00:13:31,600
shouldn't allow you to extract private

365
00:13:31,600 --> 00:13:33,519
key material while you're running on the

366
00:13:33,519 --> 00:13:35,519
operating system layer because it's a

367
00:13:35,519 --> 00:13:37,600
separate hardware module and you're not

368
00:13:37,600 --> 00:13:39,440
supposed to extract private material

369
00:13:39,440 --> 00:13:41,760
from there

370
00:13:41,760 --> 00:13:44,320
what it doesn't protect against are like

371
00:13:44,320 --> 00:13:46,240
physical hardware attacks so there are

372
00:13:46,240 --> 00:13:47,680
some scenarios known in which you can

373
00:13:47,680 --> 00:13:48,480
just

374
00:13:48,480 --> 00:13:50,560
like sniff the pins of the tpm and

375
00:13:50,560 --> 00:13:52,560
whenever the exchange is made for

376
00:13:52,560 --> 00:13:54,160
example for the bitlocker key then you

377
00:13:54,160 --> 00:13:56,320
can extract that so that's not something

378
00:13:56,320 --> 00:13:58,720
that it's supposed to protect against

379
00:13:58,720 --> 00:13:59,839
and also

380
00:13:59,839 --> 00:14:02,079
tpm does not prevent you from actually

381
00:14:02,079 --> 00:14:04,959
using the key material that's in the tpm

382
00:14:04,959 --> 00:14:07,040
like if you're on the operating system

383
00:14:07,040 --> 00:14:09,120
you're running a system

384
00:14:09,120 --> 00:14:12,160
you can ask dpm to do whatever and if

385
00:14:12,160 --> 00:14:15,040
you want to sign like 1000 requests the

386
00:14:15,040 --> 00:14:17,440
tpm will happily do that and it only

387
00:14:17,440 --> 00:14:19,519
prevents you from extracting the actual

388
00:14:19,519 --> 00:14:21,199
material and

389
00:14:21,199 --> 00:14:22,880
sending that somewhere else for example

390
00:14:22,880 --> 00:14:24,320
so it's supposed to stay on the same

391
00:14:24,320 --> 00:14:26,880
system but it's not supposed to protect

392
00:14:26,880 --> 00:14:29,120
you from actually using the material

393
00:14:29,120 --> 00:14:30,720
while you have high privileged access to

394
00:14:30,720 --> 00:14:33,279
the device

395
00:14:36,880 --> 00:14:37,600
so

396
00:14:37,600 --> 00:14:40,160
whenever a device is joined

397
00:14:40,160 --> 00:14:42,480
then this private key material is stored

398
00:14:42,480 --> 00:14:44,560
in the tpm if you have one if not it's

399
00:14:44,560 --> 00:14:46,160
stored in software

400
00:14:46,160 --> 00:14:48,240
that's less secure

401
00:14:48,240 --> 00:14:51,519
but after the device is registered then

402
00:14:51,519 --> 00:14:54,079
there's key material for device identity

403
00:14:54,079 --> 00:14:56,800
in the tpm

404
00:14:56,880 --> 00:14:59,040
now we have the device registered and

405
00:14:59,040 --> 00:15:00,720
then the user signs in for the first

406
00:15:00,720 --> 00:15:03,680
time so the user username and password

407
00:15:03,680 --> 00:15:06,160
and then azure ad gives you a primary

408
00:15:06,160 --> 00:15:07,760
refresh token

409
00:15:07,760 --> 00:15:10,399
and the primary refresh token is really

410
00:15:10,399 --> 00:15:12,399
also a like persistent

411
00:15:12,399 --> 00:15:15,680
piece of identity so for everything you

412
00:15:15,680 --> 00:15:17,839
access in azure you can use this primary

413
00:15:17,839 --> 00:15:19,760
refresh token to prove that you're that

414
00:15:19,760 --> 00:15:21,920
identity without having to enter your

415
00:15:21,920 --> 00:15:24,800
username and password all the time

416
00:15:24,800 --> 00:15:27,760
so let's see how that's issued

417
00:15:27,760 --> 00:15:30,000
um how this works is first that the

418
00:15:30,000 --> 00:15:32,720
device is actually requesting a

419
00:15:32,720 --> 00:15:34,399
challenge from the server

420
00:15:34,399 --> 00:15:37,040
from the from azure id basically

421
00:15:37,040 --> 00:15:38,560
that's just because it wants to have a

422
00:15:38,560 --> 00:15:41,120
nonce to prevent against replay attacks

423
00:15:41,120 --> 00:15:42,399
so it doesn't

424
00:15:42,399 --> 00:15:43,839
it's not something that's the same all

425
00:15:43,839 --> 00:15:44,959
the time

426
00:15:44,959 --> 00:15:47,360
it simply asks you hey give me a

427
00:15:47,360 --> 00:15:51,040
challenge that i can do something with

428
00:15:51,120 --> 00:15:52,639
azure edible then just gives you a

429
00:15:52,639 --> 00:15:54,399
challenge and it's basically in the form

430
00:15:54,399 --> 00:15:55,839
of a nonce

431
00:15:55,839 --> 00:15:58,480
um the nonce is some part of encrypted

432
00:15:58,480 --> 00:16:00,000
data

433
00:16:00,000 --> 00:16:02,160
i think it contains at least some like

434
00:16:02,160 --> 00:16:04,560
some form of time stamping

435
00:16:04,560 --> 00:16:06,959
but no way sure because microsoft has

436
00:16:06,959 --> 00:16:08,880
the the private key to the kryptonite

437
00:16:08,880 --> 00:16:10,880
and actually see the information that's

438
00:16:10,880 --> 00:16:11,759
in there

439
00:16:11,759 --> 00:16:14,399
but it's not like a fully random

440
00:16:14,399 --> 00:16:17,120
random string

441
00:16:17,279 --> 00:16:19,600
but we can use this nonce

442
00:16:19,600 --> 00:16:22,399
and with the nonce and with the

443
00:16:22,399 --> 00:16:24,959
private key you can like generate a

444
00:16:24,959 --> 00:16:27,759
piece of data then sign that and then

445
00:16:27,759 --> 00:16:30,160
azure id will accept that as coming from

446
00:16:30,160 --> 00:16:32,800
the device

447
00:16:32,800 --> 00:16:34,560
how does that look

448
00:16:34,560 --> 00:16:36,800
so it's just send a request to the

449
00:16:36,800 --> 00:16:37,680
server

450
00:16:37,680 --> 00:16:38,959
and

451
00:16:38,959 --> 00:16:41,120
if you are familiar with the oauth

452
00:16:41,120 --> 00:16:43,759
things then you know see that there's a

453
00:16:43,759 --> 00:16:46,160
ground type which is a special one it's

454
00:16:46,160 --> 00:16:49,440
a json web token bearer and there's some

455
00:16:49,440 --> 00:16:51,360
requests which contains a lot of

456
00:16:51,360 --> 00:16:53,199
gibberish

457
00:16:53,199 --> 00:16:55,279
it's actually a json web token

458
00:16:55,279 --> 00:16:57,040
that's in this request

459
00:16:57,040 --> 00:17:00,160
and if we decode that we see some data

460
00:17:00,160 --> 00:17:02,880
in there so we see the client id which

461
00:17:02,880 --> 00:17:04,720
is our device id

462
00:17:04,720 --> 00:17:07,679
we see the nones that we requested

463
00:17:07,679 --> 00:17:09,599
we see some other parameters like scope

464
00:17:09,599 --> 00:17:11,760
and the group identifiers

465
00:17:11,760 --> 00:17:14,400
and most importantly we see that the

466
00:17:14,400 --> 00:17:16,720
passwords that the user just entered

467
00:17:16,720 --> 00:17:19,520
is sent to azure id so basically it

468
00:17:19,520 --> 00:17:21,520
takes the username and password

469
00:17:21,520 --> 00:17:24,400
it puts that json web token which is

470
00:17:24,400 --> 00:17:28,559
signed by the device key so it asks dpm

471
00:17:28,559 --> 00:17:31,039
to like sign this part and then it sends

472
00:17:31,039 --> 00:17:34,640
it off to azure id sjd can then verify

473
00:17:34,640 --> 00:17:36,880
that this was signed using the correct

474
00:17:36,880 --> 00:17:39,679
private key because it has the uh the

475
00:17:39,679 --> 00:17:41,760
public bars that was sent to it when it

476
00:17:41,760 --> 00:17:44,160
requested the certificate so as uad can

477
00:17:44,160 --> 00:17:46,400
verify this game from a legit device and

478
00:17:46,400 --> 00:17:50,960
it can issue a primary refresh token

479
00:17:52,080 --> 00:17:53,280
which is really

480
00:17:53,280 --> 00:17:56,160
just like a regular refresh token

481
00:17:56,160 --> 00:17:59,120
it's a json web token it's encrypted you

482
00:17:59,120 --> 00:18:00,880
can't really see what's in it it's one

483
00:18:00,880 --> 00:18:02,240
big secret

484
00:18:02,240 --> 00:18:04,400
um but it's here basically

485
00:18:04,400 --> 00:18:07,039
and this is really the part um that's

486
00:18:07,039 --> 00:18:09,120
really important because this is a token

487
00:18:09,120 --> 00:18:11,919
that's valid for 90 days and it will

488
00:18:11,919 --> 00:18:15,120
give you access to anything in azure 80

489
00:18:15,120 --> 00:18:16,720
as that account

490
00:18:16,720 --> 00:18:18,320
so it's very important piece of

491
00:18:18,320 --> 00:18:20,160
information

492
00:18:20,160 --> 00:18:22,320
it is however not really secret by

493
00:18:22,320 --> 00:18:23,520
itself

494
00:18:23,520 --> 00:18:25,919
because the primary refresh token

495
00:18:25,919 --> 00:18:27,440
is only like

496
00:18:27,440 --> 00:18:30,480
a token it contains information but just

497
00:18:30,480 --> 00:18:33,039
having it doesn't really prove anything

498
00:18:33,039 --> 00:18:34,960
the important part is that you have the

499
00:18:34,960 --> 00:18:36,480
session key

500
00:18:36,480 --> 00:18:38,720
and this is the session key which is

501
00:18:38,720 --> 00:18:40,240
encrypted

502
00:18:40,240 --> 00:18:42,640
so the device can decrypt that using the

503
00:18:42,640 --> 00:18:44,640
transport key that it generated earlier

504
00:18:44,640 --> 00:18:46,960
and then it has the session key for the

505
00:18:46,960 --> 00:18:48,960
primary refresh token and the

506
00:18:48,960 --> 00:18:51,039
combination primary refresh token

507
00:18:51,039 --> 00:18:53,200
session key that is what can be used to

508
00:18:53,200 --> 00:18:55,600
sign in

509
00:18:55,840 --> 00:18:59,440
um there's also some expires in which is

510
00:18:59,440 --> 00:19:00,960
actually inaccurate

511
00:19:00,960 --> 00:19:03,120
because it says here that this is like

512
00:19:03,120 --> 00:19:04,960
14 days in seconds

513
00:19:04,960 --> 00:19:06,720
and microsoft finally updated the

514
00:19:06,720 --> 00:19:08,559
documentation to mention that it's

515
00:19:08,559 --> 00:19:10,480
actually 90 days

516
00:19:10,480 --> 00:19:12,720
so this is valid for 90 days

517
00:19:12,720 --> 00:19:15,760
if you don't renew it

518
00:19:16,799 --> 00:19:17,520
so

519
00:19:17,520 --> 00:19:21,360
to summarize what we just learned

520
00:19:21,360 --> 00:19:23,120
there's a private key

521
00:19:23,120 --> 00:19:24,559
for the device

522
00:19:24,559 --> 00:19:26,880
there's a transport key and there's also

523
00:19:26,880 --> 00:19:29,600
the session key for the json web token

524
00:19:29,600 --> 00:19:32,320
these are all stored in the tpm

525
00:19:32,320 --> 00:19:34,160
so you're not supposed to access that

526
00:19:34,160 --> 00:19:35,280
anymore

527
00:19:35,280 --> 00:19:37,919
and the computer can use the keys but it

528
00:19:37,919 --> 00:19:39,919
cannot like extract the keys from the

529
00:19:39,919 --> 00:19:43,360
tpm and use it somewhere else

530
00:19:43,360 --> 00:19:45,520
even if you have the highest privileges

531
00:19:45,520 --> 00:19:47,039
and all these

532
00:19:47,039 --> 00:19:49,200
three information things are used to

533
00:19:49,200 --> 00:19:51,360
facilitate single sign-on on anything

534
00:19:51,360 --> 00:19:53,440
that's connected to azure 80. so when

535
00:19:53,440 --> 00:19:55,760
you go to office 365

536
00:19:55,760 --> 00:19:57,360
it will automatically sign you in it

537
00:19:57,360 --> 00:19:58,799
will use this

538
00:19:58,799 --> 00:20:00,960
primary refresh token it will use the

539
00:20:00,960 --> 00:20:03,120
session key to prove to azure id that it

540
00:20:03,120 --> 00:20:05,679
has the session key and then it can just

541
00:20:05,679 --> 00:20:07,039
sign you in and everything works

542
00:20:07,039 --> 00:20:09,520
magically

543
00:20:11,440 --> 00:20:13,840
of course if we are actually on the

544
00:20:13,840 --> 00:20:16,159
device we can also interact ourselves

545
00:20:16,159 --> 00:20:20,200
with the primary refresh token

546
00:20:21,280 --> 00:20:23,120
and this is the whole thing with single

547
00:20:23,120 --> 00:20:24,400
sign-on

548
00:20:24,400 --> 00:20:27,440
which has been true since ever and tlm

549
00:20:27,440 --> 00:20:28,640
and kerberos

550
00:20:28,640 --> 00:20:30,080
if you're on the device you can

551
00:20:30,080 --> 00:20:32,559
basically single sign-on to anything

552
00:20:32,559 --> 00:20:33,679
that's

553
00:20:33,679 --> 00:20:35,840
that the user has access to

554
00:20:35,840 --> 00:20:37,200
and the same is true for a primary

555
00:20:37,200 --> 00:20:38,960
refresh token so if you have an

556
00:20:38,960 --> 00:20:41,280
application running on the device or

557
00:20:41,280 --> 00:20:43,120
backdoor running on the device as the

558
00:20:43,120 --> 00:20:44,080
user

559
00:20:44,080 --> 00:20:47,280
you can simply call some rpc protocol

560
00:20:47,280 --> 00:20:49,679
and say hey i want a

561
00:20:49,679 --> 00:20:52,320
cookie which will let me do single

562
00:20:52,320 --> 00:20:54,240
sign-on in azure ad

563
00:20:54,240 --> 00:20:56,480
and if you ask for that then

564
00:20:56,480 --> 00:20:59,200
the system will handle the whole flow of

565
00:20:59,200 --> 00:21:01,919
going to lsas talking to the tpm and it

566
00:21:01,919 --> 00:21:03,600
will give you a cookie which can be used

567
00:21:03,600 --> 00:21:05,760
for single sign-on

568
00:21:05,760 --> 00:21:07,600
and there's two references here

569
00:21:07,600 --> 00:21:09,760
one is the rpc approach that lee

570
00:21:09,760 --> 00:21:11,520
christensen blogged about

571
00:21:11,520 --> 00:21:14,720
it just uses the correct rpc calls to

572
00:21:14,720 --> 00:21:16,720
extract this token

573
00:21:16,720 --> 00:21:19,440
i also used a different approach

574
00:21:19,440 --> 00:21:22,480
and basically i emulated the chrome

575
00:21:22,480 --> 00:21:24,720
extension that allows for single sign-on

576
00:21:24,720 --> 00:21:26,880
because chrome doesn't yet do single

577
00:21:26,880 --> 00:21:28,559
sign-on natively

578
00:21:28,559 --> 00:21:30,880
and i just wrote a small program which

579
00:21:30,880 --> 00:21:32,400
basically calls the same helper

580
00:21:32,400 --> 00:21:34,640
application as chrome does and requests

581
00:21:34,640 --> 00:21:37,440
cookies that way

582
00:21:38,400 --> 00:21:40,960
so just to demonstrate

583
00:21:40,960 --> 00:21:43,120
if we want to use this stool that i

584
00:21:43,120 --> 00:21:45,360
wrote i called it the road token because

585
00:21:45,360 --> 00:21:47,760
you can get tokens with it

586
00:21:47,760 --> 00:21:49,840
you first have to request a nonce once

587
00:21:49,840 --> 00:21:51,840
again because every time you sign in

588
00:21:51,840 --> 00:21:54,400
with a primary refresh token

589
00:21:54,400 --> 00:21:57,280
it basically asks for a nonce

590
00:21:57,280 --> 00:21:59,039
and this you can just do from your

591
00:21:59,039 --> 00:22:00,960
attacker host

592
00:22:00,960 --> 00:22:02,960
then you pass that nonce to the road

593
00:22:02,960 --> 00:22:06,240
token tool and the row token tool will

594
00:22:06,240 --> 00:22:08,320
call the chrome helper which is just

595
00:22:08,320 --> 00:22:10,799
executable on disk it will send the

596
00:22:10,799 --> 00:22:13,200
request and the system will process that

597
00:22:13,200 --> 00:22:14,960
and gives you basically a cookie that

598
00:22:14,960 --> 00:22:18,400
you can use with azure id

599
00:22:19,840 --> 00:22:20,960
so

600
00:22:20,960 --> 00:22:22,960
here we see that

601
00:22:22,960 --> 00:22:24,880
i'm using the primary refresh token

602
00:22:24,880 --> 00:22:28,559
cookie which is a

603
00:22:28,559 --> 00:22:30,559
a signed

604
00:22:30,559 --> 00:22:33,520
cookie containing the token itself and a

605
00:22:33,520 --> 00:22:36,320
signature that it was that's calculated

606
00:22:36,320 --> 00:22:38,000
with the session key so this is the

607
00:22:38,000 --> 00:22:40,480
cookie that allows for sign-in and you

608
00:22:40,480 --> 00:22:43,440
see that this is a token even though i

609
00:22:43,440 --> 00:22:45,200
requested this on a different machine

610
00:22:45,200 --> 00:22:46,640
but because i

611
00:22:46,640 --> 00:22:48,320
use the single sign-on data from the

612
00:22:48,320 --> 00:22:50,720
actual host then it passes validation

613
00:22:50,720 --> 00:22:52,799
and gives me tokens

614
00:22:52,799 --> 00:22:54,640
and there's also just a json web token

615
00:22:54,640 --> 00:22:58,559
so we can decode it and we can see that

616
00:22:58,559 --> 00:23:01,120
audio ad thinks this token was

617
00:23:01,120 --> 00:23:03,919
requested from a managed device that was

618
00:23:03,919 --> 00:23:05,520
also the main joint

619
00:23:05,520 --> 00:23:08,799
so if you use the single sign-on token

620
00:23:08,799 --> 00:23:11,360
azure ad just thinks that

621
00:23:11,360 --> 00:23:13,679
it was actually from that device and you

622
00:23:13,679 --> 00:23:15,360
can also bypass

623
00:23:15,360 --> 00:23:17,679
policies that require you to be for

624
00:23:17,679 --> 00:23:20,600
example on a hybrid join

625
00:23:20,600 --> 00:23:24,000
device um this basically also works to

626
00:23:24,000 --> 00:23:26,000
satisfy multi-factor authentication

627
00:23:26,000 --> 00:23:27,840
because the primary refresh token will

628
00:23:27,840 --> 00:23:29,120
often have

629
00:23:29,120 --> 00:23:32,320
the multi-factor claim like built in so

630
00:23:32,320 --> 00:23:34,880
if you do single sign-on with that

631
00:23:34,880 --> 00:23:37,360
refresh token then sjd will also think

632
00:23:37,360 --> 00:23:40,959
that you're using multifactor

633
00:23:41,039 --> 00:23:42,799
all right so this is from a regular user

634
00:23:42,799 --> 00:23:43,919
session

635
00:23:43,919 --> 00:23:46,400
if you have administrative privileges

636
00:23:46,400 --> 00:23:48,480
it becomes a bit more interesting so i

637
00:23:48,480 --> 00:23:51,120
did some research on this back

638
00:23:51,120 --> 00:23:53,760
in last summer with benjamin delphi

639
00:23:53,760 --> 00:23:55,120
known very well as the author of

640
00:23:55,120 --> 00:23:56,720
mimikatz

641
00:23:56,720 --> 00:23:58,559
and basically built a combination of

642
00:23:58,559 --> 00:24:01,520
mimikats and row tools together that

643
00:24:01,520 --> 00:24:03,039
allow you to

644
00:24:03,039 --> 00:24:07,200
interact with this primary refresh token

645
00:24:07,440 --> 00:24:10,320
so if you use this mimikatz plugin it's

646
00:24:10,320 --> 00:24:12,880
called the cloud ap plugin

647
00:24:12,880 --> 00:24:14,799
and it will dump like the primary

648
00:24:14,799 --> 00:24:17,760
refresh token information from lsas

649
00:24:17,760 --> 00:24:20,640
now if this primary refresh token is not

650
00:24:20,640 --> 00:24:22,320
or the session key is not stored in a

651
00:24:22,320 --> 00:24:23,360
tpm

652
00:24:23,360 --> 00:24:25,760
then the token will basically be

653
00:24:25,760 --> 00:24:28,159
in lss and you can just steal the

654
00:24:28,159 --> 00:24:30,559
refresh token steal the session key and

655
00:24:30,559 --> 00:24:33,440
then you can use that wherever

656
00:24:33,440 --> 00:24:36,320
of course if the token of if the private

657
00:24:36,320 --> 00:24:39,520
session key is in a tpm then it's not in

658
00:24:39,520 --> 00:24:41,840
the lcs process and mimikatz also can't

659
00:24:41,840 --> 00:24:43,919
dump it

660
00:24:43,919 --> 00:24:45,200
so then what

661
00:24:45,200 --> 00:24:46,400
i really started

662
00:24:46,400 --> 00:24:48,400
looking at how this interaction with the

663
00:24:48,400 --> 00:24:50,240
tpm works

664
00:24:50,240 --> 00:24:52,720
um i did a lot of difficult

665
00:24:52,720 --> 00:24:55,279
uh stuff with reversing wind dvg

666
00:24:55,279 --> 00:24:58,720
but in the end it was quite simple or

667
00:24:58,720 --> 00:25:01,520
relatively simple just monitoring calls

668
00:25:01,520 --> 00:25:04,960
to all the crypto apis using api monitor

669
00:25:04,960 --> 00:25:07,039
which is really an awesome tool

670
00:25:07,039 --> 00:25:09,760
i eventually found out that it uses the

671
00:25:09,760 --> 00:25:11,039
function

672
00:25:11,039 --> 00:25:13,760
encrypt key derivation

673
00:25:13,760 --> 00:25:16,320
and when i looked what this does

674
00:25:16,320 --> 00:25:18,640
it actually says right this function

675
00:25:18,640 --> 00:25:21,360
creates a key from another key

676
00:25:21,360 --> 00:25:24,159
and the function returns a key in a byte

677
00:25:24,159 --> 00:25:25,600
array

678
00:25:25,600 --> 00:25:27,039
so what does mean

679
00:25:27,039 --> 00:25:29,039
that it

680
00:25:29,039 --> 00:25:30,640
basically takes the key that's in the

681
00:25:30,640 --> 00:25:33,360
tpm and it derives a different key from

682
00:25:33,360 --> 00:25:34,799
that

683
00:25:34,799 --> 00:25:36,400
at that point

684
00:25:36,400 --> 00:25:38,320
this key is no longer in the tpm it's in

685
00:25:38,320 --> 00:25:40,400
the lsat process so that's quite

686
00:25:40,400 --> 00:25:42,880
interesting for us

687
00:25:42,880 --> 00:25:46,480
just to put the flow a bit in context

688
00:25:46,480 --> 00:25:48,640
how it actually works is it generates

689
00:25:48,640 --> 00:25:50,320
some random bytes

690
00:25:50,320 --> 00:25:53,520
and this is called the context

691
00:25:53,520 --> 00:25:56,400
and it puts the random bytes it submits

692
00:25:56,400 --> 00:25:57,760
it to this function

693
00:25:57,760 --> 00:26:00,000
and then a key is derived from the

694
00:26:00,000 --> 00:26:01,919
session key so it basically talks to the

695
00:26:01,919 --> 00:26:04,159
tpm and it says hey here's some random

696
00:26:04,159 --> 00:26:06,480
context now give me a derived key from

697
00:26:06,480 --> 00:26:08,480
that

698
00:26:08,480 --> 00:26:11,120
this derived key is used in combination

699
00:26:11,120 --> 00:26:13,679
with the primary refresh token to sign

700
00:26:13,679 --> 00:26:16,000
the json web token and that together

701
00:26:16,000 --> 00:26:18,080
that's the primary first token cookie

702
00:26:18,080 --> 00:26:21,918
that you can actually use to sign in

703
00:26:22,080 --> 00:26:24,640
so this this whole cookie this whole

704
00:26:24,640 --> 00:26:27,039
piece um that's what we are actually

705
00:26:27,039 --> 00:26:28,880
after

706
00:26:28,880 --> 00:26:31,520
and the interesting part if we look at

707
00:26:31,520 --> 00:26:34,000
this from a perspective where we have

708
00:26:34,000 --> 00:26:37,120
the lz process on the left and the tpm

709
00:26:37,120 --> 00:26:38,480
on the right

710
00:26:38,480 --> 00:26:41,279
and lss is sending this random context

711
00:26:41,279 --> 00:26:42,880
to the tpm

712
00:26:42,880 --> 00:26:45,360
and the vpn basically gives us back a

713
00:26:45,360 --> 00:26:48,240
derived key and this key is used in the

714
00:26:48,240 --> 00:26:50,240
lss process to sign

715
00:26:50,240 --> 00:26:53,120
whichever we want to use

716
00:26:53,120 --> 00:26:54,559
but the thing is

717
00:26:54,559 --> 00:26:56,240
this else has processed that's running a

718
00:26:56,240 --> 00:26:57,840
software so this is what we have full

719
00:26:57,840 --> 00:26:59,279
control over

720
00:26:59,279 --> 00:27:00,960
so what is stopping us from actually

721
00:27:00,960 --> 00:27:02,320
just sending

722
00:27:02,320 --> 00:27:05,279
requesting random contextus from the tpm

723
00:27:05,279 --> 00:27:07,440
and getting like 100 derived keys that

724
00:27:07,440 --> 00:27:10,880
we can then use to actually sign primary

725
00:27:10,880 --> 00:27:13,600
fast token cookies whenever we want

726
00:27:13,600 --> 00:27:14,960
well turns out there's nothing actually

727
00:27:14,960 --> 00:27:17,520
stopping us from doing that

728
00:27:17,520 --> 00:27:19,360
so benjamin made a nice function in

729
00:27:19,360 --> 00:27:20,799
mimikat

730
00:27:20,799 --> 00:27:23,039
you give it the key material required to

731
00:27:23,039 --> 00:27:25,520
talk to the tpm you give it a context

732
00:27:25,520 --> 00:27:27,360
and it will give you back the derived

733
00:27:27,360 --> 00:27:28,480
key

734
00:27:28,480 --> 00:27:31,279
and if you do this like 100 times with

735
00:27:31,279 --> 00:27:33,200
different random context you could just

736
00:27:33,200 --> 00:27:34,960
get a list of

737
00:27:34,960 --> 00:27:37,840
future context derived key combinations

738
00:27:37,840 --> 00:27:39,200
that you can use

739
00:27:39,200 --> 00:27:41,279
many times in the future to use that

740
00:27:41,279 --> 00:27:45,039
same primary refresh token

741
00:27:45,760 --> 00:27:47,279
we then go back to

742
00:27:47,279 --> 00:27:49,679
road tools so this is once again the

743
00:27:49,679 --> 00:27:51,440
python code that i wrote to actually use

744
00:27:51,440 --> 00:27:52,960
this

745
00:27:52,960 --> 00:27:54,799
and you can then

746
00:27:54,799 --> 00:27:56,240
submit the

747
00:27:56,240 --> 00:27:58,640
primary first token cookie but also the

748
00:27:58,640 --> 00:28:00,880
context and the derived key and then it

749
00:28:00,880 --> 00:28:03,919
will automatically unpack the cookie

750
00:28:03,919 --> 00:28:06,159
request a new nonce put the new nonce in

751
00:28:06,159 --> 00:28:08,320
the cookie and resign it using the

752
00:28:08,320 --> 00:28:10,640
context and the derived key that we

753
00:28:10,640 --> 00:28:13,120
obtained

754
00:28:14,080 --> 00:28:16,799
so to summarize this a bit

755
00:28:16,799 --> 00:28:19,520
if we're administrator on the device

756
00:28:19,520 --> 00:28:21,440
we can steal the primary refresh token

757
00:28:21,440 --> 00:28:22,799
and the session key if it's not in the

758
00:28:22,799 --> 00:28:24,000
tpm

759
00:28:24,000 --> 00:28:25,760
if it isn't a tpm

760
00:28:25,760 --> 00:28:28,000
we can still require as many

761
00:28:28,000 --> 00:28:29,919
context and derive key combinations as

762
00:28:29,919 --> 00:28:32,559
we want which actually allows us to use

763
00:28:32,559 --> 00:28:35,039
the token indefinitely without needing

764
00:28:35,039 --> 00:28:37,120
access to the device

765
00:28:37,120 --> 00:28:38,559
if you want to read the longer version

766
00:28:38,559 --> 00:28:41,120
about this it's on my blog

767
00:28:41,120 --> 00:28:42,320
and

768
00:28:42,320 --> 00:28:44,799
there's also the details of all the

769
00:28:44,799 --> 00:28:48,559
reversing that i did to analyze this

770
00:28:51,440 --> 00:28:53,520
so this was basically

771
00:28:53,520 --> 00:28:57,039
my summer holiday last year

772
00:28:57,039 --> 00:28:59,120
going actually places is more fun i can

773
00:28:59,120 --> 00:29:00,960
tell you

774
00:29:00,960 --> 00:29:02,320
so after that

775
00:29:02,320 --> 00:29:03,760
there was some more

776
00:29:03,760 --> 00:29:05,679
research that i did

777
00:29:05,679 --> 00:29:09,440
so let's talk about how we can actually

778
00:29:09,440 --> 00:29:10,840
move further with

779
00:29:10,840 --> 00:29:13,520
this so there are some downsides on

780
00:29:13,520 --> 00:29:15,520
doing this attack where we need to be

781
00:29:15,520 --> 00:29:18,000
administrator and steal the tokens from

782
00:29:18,000 --> 00:29:19,440
the dpm

783
00:29:19,440 --> 00:29:20,559
first of course we need to be

784
00:29:20,559 --> 00:29:21,840
administrator

785
00:29:21,840 --> 00:29:24,080
not all users are administrator

786
00:29:24,080 --> 00:29:26,159
you need to actually dump else as run

787
00:29:26,159 --> 00:29:27,520
mimikats

788
00:29:27,520 --> 00:29:30,080
that's quite noisy the most endpoint

789
00:29:30,080 --> 00:29:32,000
protection things actually try to

790
00:29:32,000 --> 00:29:35,120
prevent you from doing exactly this

791
00:29:35,120 --> 00:29:37,840
and if the primary refresh token expires

792
00:29:37,840 --> 00:29:40,000
we can't request a new one because we

793
00:29:40,000 --> 00:29:41,919
don't have to private key material for

794
00:29:41,919 --> 00:29:44,720
the transport key or the session key

795
00:29:44,720 --> 00:29:46,559
itself

796
00:29:46,559 --> 00:29:49,039
also if the device is disabled then our

797
00:29:49,039 --> 00:29:51,600
primary refresh token loses its validity

798
00:29:51,600 --> 00:29:52,480
as well

799
00:29:52,480 --> 00:29:55,840
so there are some downsides to this

800
00:29:55,840 --> 00:29:58,559
so i came up with something new

801
00:29:58,559 --> 00:30:00,399
and we're basically combining the two

802
00:30:00,399 --> 00:30:02,720
things that we just talked about

803
00:30:02,720 --> 00:30:03,600
like

804
00:30:03,600 --> 00:30:05,760
we know how the registration flow works

805
00:30:05,760 --> 00:30:07,600
we can register

806
00:30:07,600 --> 00:30:09,440
our own device and that would give us a

807
00:30:09,440 --> 00:30:11,360
primary refresh token

808
00:30:11,360 --> 00:30:13,919
and we know how to get an access token

809
00:30:13,919 --> 00:30:16,399
as a low privileged user by using single

810
00:30:16,399 --> 00:30:18,159
sign-on

811
00:30:18,159 --> 00:30:19,919
so i thought

812
00:30:19,919 --> 00:30:22,559
what if i register a new device using

813
00:30:22,559 --> 00:30:25,840
single sign-on would that work

814
00:30:25,840 --> 00:30:27,360
well the answer is

815
00:30:27,360 --> 00:30:29,200
it does

816
00:30:29,200 --> 00:30:30,960
so this is how you do that

817
00:30:30,960 --> 00:30:32,960
basically you request a single sign-on

818
00:30:32,960 --> 00:30:36,000
token which is specifically scoped to

819
00:30:36,000 --> 00:30:38,399
the device registration service

820
00:30:38,399 --> 00:30:41,200
so normally you would authenticate which

821
00:30:41,200 --> 00:30:43,679
you used in passwords and mfa and then

822
00:30:43,679 --> 00:30:45,440
get a token for device registration

823
00:30:45,440 --> 00:30:46,559
service

824
00:30:46,559 --> 00:30:48,640
but if you're already on a device you

825
00:30:48,640 --> 00:30:50,559
can just use single sign-on and request

826
00:30:50,559 --> 00:30:52,480
a token for the device registration

827
00:30:52,480 --> 00:30:54,960
service just as you would for basically

828
00:30:54,960 --> 00:30:58,240
any other service in azure

829
00:30:59,360 --> 00:31:01,440
and then i wrote some other tools to

830
00:31:01,440 --> 00:31:03,440
actually register the device so to do

831
00:31:03,440 --> 00:31:05,760
the whole flow of creating a certificate

832
00:31:05,760 --> 00:31:08,399
and then submitting the right request

833
00:31:08,399 --> 00:31:10,720
which is all partially adapted from the

834
00:31:10,720 --> 00:31:13,760
aed internals module by dr azure id

835
00:31:13,760 --> 00:31:15,519
which is some really good great tooling

836
00:31:15,519 --> 00:31:18,159
if you're into azure id hacking

837
00:31:18,159 --> 00:31:20,880
but this basically takes the token for

838
00:31:20,880 --> 00:31:23,120
the device registration service

839
00:31:23,120 --> 00:31:24,799
submits the request

840
00:31:24,799 --> 00:31:27,679
using a private key that it generates on

841
00:31:27,679 --> 00:31:30,080
the fly and then it gets back the site

842
00:31:30,080 --> 00:31:33,360
certificate from azure so at this point

843
00:31:33,360 --> 00:31:36,559
we have our own like fake device

844
00:31:36,559 --> 00:31:38,159
with the key that we control with the

845
00:31:38,159 --> 00:31:40,399
key that's not in the tpm and with the

846
00:31:40,399 --> 00:31:42,880
key that's not on the endpoint anymore

847
00:31:42,880 --> 00:31:46,159
that's heavily monitored

848
00:31:46,159 --> 00:31:48,240
now the next step we obtain a primary

849
00:31:48,240 --> 00:31:50,000
refresh token

850
00:31:50,000 --> 00:31:52,240
we can do this using only the

851
00:31:52,240 --> 00:31:54,720
username and password for the user

852
00:31:54,720 --> 00:31:57,200
and if we do that we get the primary

853
00:31:57,200 --> 00:31:59,120
refresh token

854
00:31:59,120 --> 00:32:00,720
and we get a session key which we can

855
00:32:00,720 --> 00:32:03,519
decrypt because we have just registered

856
00:32:03,519 --> 00:32:05,519
our own device with the key material

857
00:32:05,519 --> 00:32:08,080
that we own

858
00:32:09,279 --> 00:32:11,440
when you use this with

859
00:32:11,440 --> 00:32:13,360
with row tools you can once again

860
00:32:13,360 --> 00:32:14,399
request

861
00:32:14,399 --> 00:32:15,360
a

862
00:32:15,360 --> 00:32:17,200
a token for whichever service you would

863
00:32:17,200 --> 00:32:20,080
like using the primary refresh token

864
00:32:20,080 --> 00:32:20,880
and

865
00:32:20,880 --> 00:32:22,720
the session key that we have so this

866
00:32:22,720 --> 00:32:24,960
just gives you a token for

867
00:32:24,960 --> 00:32:28,679
anything that you would want

868
00:32:28,880 --> 00:32:30,720
the fun part is

869
00:32:30,720 --> 00:32:32,799
requesting a sign on tokens

870
00:32:32,799 --> 00:32:34,880
as a limited user

871
00:32:34,880 --> 00:32:36,880
these access tokens they will contain

872
00:32:36,880 --> 00:32:40,000
the mfa claim because the user performs

873
00:32:40,000 --> 00:32:41,600
multi-factor authentication at some

874
00:32:41,600 --> 00:32:42,960
point

875
00:32:42,960 --> 00:32:44,480
if you then use that single sign-on

876
00:32:44,480 --> 00:32:47,519
token to register a new device

877
00:32:47,519 --> 00:32:48,960
you will also get

878
00:32:48,960 --> 00:32:50,080
a

879
00:32:50,080 --> 00:32:52,000
primary refresh token which also has

880
00:32:52,000 --> 00:32:53,840
that mfa claim

881
00:32:53,840 --> 00:32:56,080
and we didn't use mfa at any point of

882
00:32:56,080 --> 00:32:58,320
this we just used a single sign-on token

883
00:32:58,320 --> 00:33:00,960
and we used the username and password

884
00:33:00,960 --> 00:33:02,559
and in some cases you don't even need

885
00:33:02,559 --> 00:33:04,080
the passwords because if you use

886
00:33:04,080 --> 00:33:06,000
federated authentication

887
00:33:06,000 --> 00:33:08,399
you could use anti-lam or kerberos to

888
00:33:08,399 --> 00:33:11,760
ask a saml token and use that to

889
00:33:11,760 --> 00:33:13,919
register your device and get the primary

890
00:33:13,919 --> 00:33:15,840
refresh token

891
00:33:15,840 --> 00:33:18,159
so we only did some single sign-on and

892
00:33:18,159 --> 00:33:21,200
we got a free primary refresh token with

893
00:33:21,200 --> 00:33:23,039
multi-factor authentication from a

894
00:33:23,039 --> 00:33:24,559
limited user

895
00:33:24,559 --> 00:33:27,200
it's pretty cool

896
00:33:28,720 --> 00:33:30,159
some upside and downside to this

897
00:33:30,159 --> 00:33:31,440
technique

898
00:33:31,440 --> 00:33:34,240
it is separate from the old device so if

899
00:33:34,240 --> 00:33:36,799
you disable the old device then nothing

900
00:33:36,799 --> 00:33:38,480
really happens to our token

901
00:33:38,480 --> 00:33:40,320
uh the preamble refresh token will keep

902
00:33:40,320 --> 00:33:41,840
working because it was registered on a

903
00:33:41,840 --> 00:33:43,360
new device

904
00:33:43,360 --> 00:33:45,360
and of course it doesn't have to be like

905
00:33:45,360 --> 00:33:47,600
a physical laptop i did this with just a

906
00:33:47,600 --> 00:33:49,919
script and with the script you can just

907
00:33:49,919 --> 00:33:52,320
store the private key on disk

908
00:33:52,320 --> 00:33:53,679
azure doesn't care where you store the

909
00:33:53,679 --> 00:33:55,440
private key there's no way to prove that

910
00:33:55,440 --> 00:33:57,200
it's actually in the tpm

911
00:33:57,200 --> 00:33:58,080
so

912
00:33:58,080 --> 00:33:59,919
it doesn't matter you can just use it

913
00:33:59,919 --> 00:34:02,080
for as long as you want you can refresh

914
00:34:02,080 --> 00:34:03,840
the primary refresh token for as long as

915
00:34:03,840 --> 00:34:07,200
you want and it's all coming from like a

916
00:34:07,200 --> 00:34:09,679
legitimate device as far as azure is

917
00:34:09,679 --> 00:34:12,079
concerned

918
00:34:14,159 --> 00:34:16,320
of course there are some downsides

919
00:34:16,320 --> 00:34:18,560
and it does actually require you to be

920
00:34:18,560 --> 00:34:20,879
allowed to register devices

921
00:34:20,879 --> 00:34:23,440
this is not always allowed but

922
00:34:23,440 --> 00:34:25,839
a lot of organizations allow it it's

923
00:34:25,839 --> 00:34:28,399
allowed by default and it's required for

924
00:34:28,399 --> 00:34:29,520
some

925
00:34:29,520 --> 00:34:31,359
for the self-registration flow that's

926
00:34:31,359 --> 00:34:34,800
used with autopilot for example

927
00:34:34,800 --> 00:34:36,159
and this

928
00:34:36,159 --> 00:34:37,440
it doesn't mean

929
00:34:37,440 --> 00:34:39,440
just because you register a new device

930
00:34:39,440 --> 00:34:41,359
doesn't mean that it's also allowed to

931
00:34:41,359 --> 00:34:44,079
write and roll on in tune so it doesn't

932
00:34:44,079 --> 00:34:46,399
necessarily pass the

933
00:34:46,399 --> 00:34:48,320
policies that you may have which require

934
00:34:48,320 --> 00:34:50,960
device compliancy personas around that

935
00:34:50,960 --> 00:34:52,399
sometimes

936
00:34:52,399 --> 00:34:53,359
but

937
00:34:53,359 --> 00:34:55,839
it may be prevented by some advanced

938
00:34:55,839 --> 00:34:58,399
controls

939
00:34:58,880 --> 00:35:02,400
now if we actually have done all this we

940
00:35:02,400 --> 00:35:04,560
can also of course use the primary

941
00:35:04,560 --> 00:35:06,800
refresh token using a python tool

942
00:35:06,800 --> 00:35:08,240
but that's not really useful for the

943
00:35:08,240 --> 00:35:10,000
attacker because it's like a lot of

944
00:35:10,000 --> 00:35:12,160
tokens and manual stuff

945
00:35:12,160 --> 00:35:14,960
so i wanted to automate this

946
00:35:14,960 --> 00:35:16,800
and we talked about the chrome approach

947
00:35:16,800 --> 00:35:20,800
first and chrome actually calls a binary

948
00:35:20,800 --> 00:35:23,200
called browsercore.exe

949
00:35:23,200 --> 00:35:25,920
when it does single sign-on

950
00:35:25,920 --> 00:35:28,640
so i just replaced the browser core exe

951
00:35:28,640 --> 00:35:30,400
with browser core dot pi

952
00:35:30,400 --> 00:35:32,320
which of course contains

953
00:35:32,320 --> 00:35:34,480
the primary refresh token data and some

954
00:35:34,480 --> 00:35:36,160
references to the

955
00:35:36,160 --> 00:35:37,839
road tools library which can

956
00:35:37,839 --> 00:35:40,800
automatically create the cookies and

957
00:35:40,800 --> 00:35:42,240
sign all of them

958
00:35:42,240 --> 00:35:44,960
and if you then change the

959
00:35:44,960 --> 00:35:46,880
the link for basically the chrome

960
00:35:46,880 --> 00:35:48,960
extension and make that point

961
00:35:48,960 --> 00:35:50,880
to the new binary

962
00:35:50,880 --> 00:35:52,560
then whenever you use single sign-on in

963
00:35:52,560 --> 00:35:54,800
chrome it will call the python script

964
00:35:54,800 --> 00:35:57,520
and it will just request single sign-on

965
00:35:57,520 --> 00:36:00,240
cookies from there

966
00:36:00,240 --> 00:36:02,000
and this works really well if you just

967
00:36:02,000 --> 00:36:03,680
go to office.com

968
00:36:03,680 --> 00:36:05,520
it will automatically call the python

969
00:36:05,520 --> 00:36:07,839
code use the primary refresh token it

970
00:36:07,839 --> 00:36:10,320
will sign you in and as you will think

971
00:36:10,320 --> 00:36:13,760
this is from a legitimate company device

972
00:36:13,760 --> 00:36:15,520
and it will also think that you use

973
00:36:15,520 --> 00:36:17,440
multi-factor authentication

974
00:36:17,440 --> 00:36:20,960
while in fact you didn't

975
00:36:21,520 --> 00:36:23,440
so of course i reported this to

976
00:36:23,440 --> 00:36:24,960
microsoft

977
00:36:24,960 --> 00:36:27,680
in december 2020

978
00:36:27,680 --> 00:36:28,560
and

979
00:36:28,560 --> 00:36:29,920
well there was some

980
00:36:29,920 --> 00:36:32,320
it took them a while to fix this

981
00:36:32,320 --> 00:36:34,000
because it's of course not as easy as

982
00:36:34,000 --> 00:36:37,359
just blocking single sign-on tokens

983
00:36:37,359 --> 00:36:39,839
they accounted for well scenarios

984
00:36:39,839 --> 00:36:41,599
but the final fix is actually rolled out

985
00:36:41,599 --> 00:36:43,520
earlier this month which is really great

986
00:36:43,520 --> 00:36:44,640
because it means i can actually have

987
00:36:44,640 --> 00:36:46,560
this talk

988
00:36:46,560 --> 00:36:48,560
and they also i think they also rolled

989
00:36:48,560 --> 00:36:51,520
some out some intermediary fixes for

990
00:36:51,520 --> 00:36:53,680
windows specifically but i was told it

991
00:36:53,680 --> 00:36:55,280
was also an issue like on android and

992
00:36:55,280 --> 00:36:56,320
ios

993
00:36:56,320 --> 00:36:59,119
even though i didn't test it myself

994
00:36:59,119 --> 00:37:00,880
so after the changes it's no longer

995
00:37:00,880 --> 00:37:03,839
possible to use single sign-on tokens to

996
00:37:03,839 --> 00:37:06,400
register a new device which is i think

997
00:37:06,400 --> 00:37:07,599
good

998
00:37:07,599 --> 00:37:09,440
because there's really no reason

999
00:37:09,440 --> 00:37:11,119
why you would

1000
00:37:11,119 --> 00:37:14,960
why that would be a use case

1001
00:37:15,520 --> 00:37:18,000
um there's also be some other changes as

1002
00:37:18,000 --> 00:37:19,680
i prepared for this talk i noticed that

1003
00:37:19,680 --> 00:37:20,880
there were some

1004
00:37:20,880 --> 00:37:24,000
new flows for device registration

1005
00:37:24,000 --> 00:37:26,560
so this worked basically up until august

1006
00:37:26,560 --> 00:37:29,119
this flow that i just described

1007
00:37:29,119 --> 00:37:31,280
but it on the latest version of windows

1008
00:37:31,280 --> 00:37:34,320
if you have the august 2021 updates

1009
00:37:34,320 --> 00:37:35,359
it actually

1010
00:37:35,359 --> 00:37:37,520
well nemicas doesn't work anymore when

1011
00:37:37,520 --> 00:37:39,599
dumping the clouds plug in

1012
00:37:39,599 --> 00:37:42,079
i'm not sure why i

1013
00:37:42,079 --> 00:37:44,400
asked benjamin and he said well probably

1014
00:37:44,400 --> 00:37:46,880
because they changed some ways of how it

1015
00:37:46,880 --> 00:37:48,720
starts in memory

1016
00:37:48,720 --> 00:37:51,280
and i think they also partially changed

1017
00:37:51,280 --> 00:37:54,320
how the tpm is involved in

1018
00:37:54,320 --> 00:37:57,119
signing like this whole cookie thing

1019
00:37:57,119 --> 00:38:00,160
so there's like a v2 key exchange method

1020
00:38:00,160 --> 00:38:02,000
now

1021
00:38:02,000 --> 00:38:04,000
i have to research this and see if it's

1022
00:38:04,000 --> 00:38:06,880
also no longer possible to um to like

1023
00:38:06,880 --> 00:38:09,520
hijack the tpm flow and extract keys as

1024
00:38:09,520 --> 00:38:10,880
you want

1025
00:38:10,880 --> 00:38:13,280
so i'm curious how they did that

1026
00:38:13,280 --> 00:38:16,160
but i don't know yet

1027
00:38:17,359 --> 00:38:19,280
so as a bonus

1028
00:38:19,280 --> 00:38:22,079
this whole scenario can also be used to

1029
00:38:22,079 --> 00:38:24,079
bypass mfa

1030
00:38:24,079 --> 00:38:26,320
if you have some administrative account

1031
00:38:26,320 --> 00:38:27,760
privileged

1032
00:38:27,760 --> 00:38:29,760
now does that work

1033
00:38:29,760 --> 00:38:31,839
if we look at the registration flow like

1034
00:38:31,839 --> 00:38:34,079
the legit registration flow

1035
00:38:34,079 --> 00:38:36,640
if you use registered device using

1036
00:38:36,640 --> 00:38:38,320
multi-factor

1037
00:38:38,320 --> 00:38:39,440
then

1038
00:38:39,440 --> 00:38:42,320
suad automatically sets you as an owner

1039
00:38:42,320 --> 00:38:44,880
of that device

1040
00:38:44,880 --> 00:38:47,359
then after you sign in again

1041
00:38:47,359 --> 00:38:50,400
then the mfa claim which is like stored

1042
00:38:50,400 --> 00:38:52,160
on the device so the device will have a

1043
00:38:52,160 --> 00:38:53,760
property which authentication methods

1044
00:38:53,760 --> 00:38:56,160
were used to register it and mfa is one

1045
00:38:56,160 --> 00:38:57,119
of those

1046
00:38:57,119 --> 00:38:58,640
and if you then sign in for the first

1047
00:38:58,640 --> 00:39:01,440
time suid will just copy the

1048
00:39:01,440 --> 00:39:02,800
the properties that were used during

1049
00:39:02,800 --> 00:39:04,720
registration to your primary refresh

1050
00:39:04,720 --> 00:39:06,800
token so if you use multi-factor

1051
00:39:06,800 --> 00:39:09,200
authentication to register it then the

1052
00:39:09,200 --> 00:39:11,440
first issued primary refresh token will

1053
00:39:11,440 --> 00:39:14,320
also have the multifactor claim now this

1054
00:39:14,320 --> 00:39:16,079
is done because

1055
00:39:16,079 --> 00:39:18,079
the user that

1056
00:39:18,079 --> 00:39:20,720
registered the device so the owner is

1057
00:39:20,720 --> 00:39:23,599
the one that's signing in

1058
00:39:23,599 --> 00:39:25,359
if the user is not the owner then it

1059
00:39:25,359 --> 00:39:28,560
wouldn't transfer it

1060
00:39:28,560 --> 00:39:31,280
so as we said the mfa claim is copied

1061
00:39:31,280 --> 00:39:33,359
and if you use the primary refresh token

1062
00:39:33,359 --> 00:39:35,280
then to

1063
00:39:35,280 --> 00:39:38,240
ask for tokens then the

1064
00:39:38,240 --> 00:39:40,079
mfa claim will also be present on the

1065
00:39:40,079 --> 00:39:41,040
token

1066
00:39:41,040 --> 00:39:42,560
so that you did multispect

1067
00:39:42,560 --> 00:39:44,720
authentication once at the beginning and

1068
00:39:44,720 --> 00:39:46,800
at the end you can keep using it and

1069
00:39:46,800 --> 00:39:50,000
don't have to enter mfa all the time

1070
00:39:50,000 --> 00:39:52,880
and there's a flaw in this one

1071
00:39:52,880 --> 00:39:55,359
and the flaws here

1072
00:39:55,359 --> 00:39:56,560
because it really

1073
00:39:56,560 --> 00:39:58,800
issues these tokens

1074
00:39:58,800 --> 00:40:01,200
it transfers the claim because the user

1075
00:40:01,200 --> 00:40:02,320
is the owner

1076
00:40:02,320 --> 00:40:04,560
and the owner of the device is assumed

1077
00:40:04,560 --> 00:40:06,319
to be the one that actually registered

1078
00:40:06,319 --> 00:40:07,280
it

1079
00:40:07,280 --> 00:40:11,119
but it's not actually validated so

1080
00:40:11,119 --> 00:40:13,280
there's no proof that it was the owner

1081
00:40:13,280 --> 00:40:14,800
or that it was the owner because it

1082
00:40:14,800 --> 00:40:17,119
registered it or that the owner was like

1083
00:40:17,119 --> 00:40:19,520
changed in between

1084
00:40:19,520 --> 00:40:21,280
and here's just like

1085
00:40:21,280 --> 00:40:24,319
you see the mfa tokens

1086
00:40:24,319 --> 00:40:26,079
so what you can do this

1087
00:40:26,079 --> 00:40:28,319
if you are someone who can edit the

1088
00:40:28,319 --> 00:40:29,839
owner of a device

1089
00:40:29,839 --> 00:40:33,200
then you can just add like a new owner

1090
00:40:33,200 --> 00:40:35,599
with the device that you just registered

1091
00:40:35,599 --> 00:40:37,599
you can do that using the azure ag

1092
00:40:37,599 --> 00:40:39,280
module for example

1093
00:40:39,280 --> 00:40:40,960
so in this case i'm just connecting to

1094
00:40:40,960 --> 00:40:43,119
azure id and using the powershell

1095
00:40:43,119 --> 00:40:46,160
commandlets to add a new owner to the

1096
00:40:46,160 --> 00:40:47,200
device

1097
00:40:47,200 --> 00:40:49,440
as a device admin

1098
00:40:49,440 --> 00:40:51,760
and now the device has two orders it can

1099
00:40:51,760 --> 00:40:53,520
also have 10 owners

1100
00:40:53,520 --> 00:40:55,920
and then if you

1101
00:40:55,920 --> 00:40:57,280
if you try

1102
00:40:57,280 --> 00:40:58,319
to

1103
00:40:58,319 --> 00:41:00,160
do the same thing again so requesting a

1104
00:41:00,160 --> 00:41:02,079
prime refresh token

1105
00:41:02,079 --> 00:41:04,800
using only username and password then it

1106
00:41:04,800 --> 00:41:07,119
will automatically get the multi-factor

1107
00:41:07,119 --> 00:41:09,680
claim also in the token

1108
00:41:09,680 --> 00:41:12,240
so if you have this account and you have

1109
00:41:12,240 --> 00:41:14,640
some passwords for users

1110
00:41:14,640 --> 00:41:16,240
you can just

1111
00:41:16,240 --> 00:41:18,079
request as many primary refresh tokens

1112
00:41:18,079 --> 00:41:20,160
as you want including multifactor

1113
00:41:20,160 --> 00:41:22,240
authentication claims even though you

1114
00:41:22,240 --> 00:41:23,920
never actually had the multi-factor

1115
00:41:23,920 --> 00:41:27,680
authentication for that user

1116
00:41:28,240 --> 00:41:30,160
so i reported this in may

1117
00:41:30,160 --> 00:41:32,640
and well there was some discussions

1118
00:41:32,640 --> 00:41:34,800
because initially they weren't convinced

1119
00:41:34,800 --> 00:41:37,200
that it was actually an issue

1120
00:41:37,200 --> 00:41:38,880
but after some discussion they accepted

1121
00:41:38,880 --> 00:41:41,359
this as a vulnerability in july

1122
00:41:41,359 --> 00:41:44,000
and they actually fixed it in august so

1123
00:41:44,000 --> 00:41:46,160
that was relatively quick

1124
00:41:46,160 --> 00:41:48,880
and now there's like no longer that the

1125
00:41:48,880 --> 00:41:51,119
mfa claim is transferred

1126
00:41:51,119 --> 00:41:53,599
if you if you request a refresh token

1127
00:41:53,599 --> 00:41:55,680
after device registration so they've

1128
00:41:55,680 --> 00:41:58,480
really decoupled that part

1129
00:41:58,480 --> 00:42:00,480
which i think is good because

1130
00:42:00,480 --> 00:42:04,800
it wasn't a very solid security measure

1131
00:42:06,319 --> 00:42:08,640
so what can we learn from this talk

1132
00:42:08,640 --> 00:42:10,240
i think one of the most important

1133
00:42:10,240 --> 00:42:12,400
conclusions is that single sign-on still

1134
00:42:12,400 --> 00:42:13,839
breaks security

1135
00:42:13,839 --> 00:42:15,760
even in 2021

1136
00:42:15,760 --> 00:42:19,040
as it has been for like forever

1137
00:42:19,040 --> 00:42:20,800
and some way to defend against this is

1138
00:42:20,800 --> 00:42:24,400
to monitor for strange device joints

1139
00:42:24,400 --> 00:42:26,319
because users shouldn't be registering

1140
00:42:26,319 --> 00:42:28,720
new devices every day and certainly not

1141
00:42:28,720 --> 00:42:30,880
with strange names or operating systems

1142
00:42:30,880 --> 00:42:33,280
that you don't actually use such as uos

1143
00:42:33,280 --> 00:42:35,599
it's a bit weird

1144
00:42:35,599 --> 00:42:38,160
and you should also limit device joining

1145
00:42:38,160 --> 00:42:40,480
or registrations as much as possible

1146
00:42:40,480 --> 00:42:41,760
unlike you could

1147
00:42:41,760 --> 00:42:43,520
ground those permissions to group and

1148
00:42:43,520 --> 00:42:44,960
only put users in a group when they

1149
00:42:44,960 --> 00:42:47,040
actually need to register a device

1150
00:42:47,040 --> 00:42:48,800
rather than having it enabled all the

1151
00:42:48,800 --> 00:42:51,040
time

1152
00:42:52,319 --> 00:42:53,119
so

1153
00:42:53,119 --> 00:42:54,720
to conclude

1154
00:42:54,720 --> 00:42:56,800
everything all the tools that i've shown

1155
00:42:56,800 --> 00:42:59,040
are part of the road tools frameworks

1156
00:42:59,040 --> 00:43:00,240
library

1157
00:43:00,240 --> 00:43:02,319
which is open source available on my

1158
00:43:02,319 --> 00:43:03,680
github

1159
00:43:03,680 --> 00:43:05,599
i don't have the tools in there yet for

1160
00:43:05,599 --> 00:43:08,000
the device registration and primary

1161
00:43:08,000 --> 00:43:10,400
refresh token things i'll probably do

1162
00:43:10,400 --> 00:43:11,359
that

1163
00:43:11,359 --> 00:43:12,960
somewhere soon when i write a blog about

1164
00:43:12,960 --> 00:43:14,480
this

1165
00:43:14,480 --> 00:43:17,359
if there are questions welcome to ask

1166
00:43:17,359 --> 00:43:19,599
also via twitter or just whenever i'm

1167
00:43:19,599 --> 00:43:20,880
around here

1168
00:43:20,880 --> 00:43:22,880
and i do have quite some road tools

1169
00:43:22,880 --> 00:43:24,800
stickers with me so if you like stickers

1170
00:43:24,800 --> 00:43:27,200
then just come pick some up

1171
00:43:27,200 --> 00:43:29,598
thank you

1172
00:43:34,520 --> 00:43:37,200
[Applause]

1173
00:43:37,200 --> 00:43:38,839
any

1174
00:43:38,839 --> 00:43:43,279
questions yeah why not

1175
00:43:44,000 --> 00:43:46,240
i'm just going to know if you think that

1176
00:43:46,240 --> 00:43:49,599
this stuff was uh ever been used uh in

1177
00:43:49,599 --> 00:43:53,520
the wild to bypass mfa for some asia

1178
00:43:53,520 --> 00:43:55,760
azurely using companies

1179
00:43:55,760 --> 00:43:57,599
uh you would have to answer to microsoft

1180
00:43:57,599 --> 00:44:00,000
i don't know

1181
00:44:02,640 --> 00:44:05,279
any other

1182
00:44:06,560 --> 00:44:07,680
that's cool

1183
00:44:07,680 --> 00:44:09,359
okay

1184
00:44:09,359 --> 00:44:10,480
thank you

1185
00:44:10,480 --> 00:44:14,920
no problem it was really cool

1186
00:44:24,880 --> 00:44:26,960
you

