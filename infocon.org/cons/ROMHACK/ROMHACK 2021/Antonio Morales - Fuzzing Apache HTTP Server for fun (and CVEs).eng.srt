1
00:00:05,680 --> 00:00:08,000
hello

2
00:00:08,000 --> 00:00:10,719
let's start with the with the talk

3
00:00:10,719 --> 00:00:11,679
today

4
00:00:11,679 --> 00:00:15,120
i will cover some of my research

5
00:00:15,120 --> 00:00:18,480
on apache apache http

6
00:00:18,480 --> 00:00:19,920
web server

7
00:00:19,920 --> 00:00:20,880
and

8
00:00:20,880 --> 00:00:22,560
i will show you

9
00:00:22,560 --> 00:00:25,599
also some of the vulnerabilities that i

10
00:00:25,599 --> 00:00:26,880
have found

11
00:00:26,880 --> 00:00:29,599
during this this process

12
00:00:29,599 --> 00:00:32,159
but first of all who am i

13
00:00:32,159 --> 00:00:34,800
well i am antoni morales

14
00:00:34,800 --> 00:00:37,360
i work as a security researcher at

15
00:00:37,360 --> 00:00:38,719
github

16
00:00:38,719 --> 00:00:41,360
that is my

17
00:00:43,520 --> 00:00:45,600
that is my twitter handle

18
00:00:45,600 --> 00:00:49,200
where i usually post most of my research

19
00:00:49,200 --> 00:00:50,160
and

20
00:00:50,160 --> 00:00:51,680
inside github

21
00:00:51,680 --> 00:00:54,640
i'm part of a small team called

22
00:00:54,640 --> 00:00:57,199
github security lab

23
00:00:57,199 --> 00:00:58,480
our main goal

24
00:00:58,480 --> 00:01:01,520
in github security lab is to improve the

25
00:01:01,520 --> 00:01:05,760
security of the open source software

26
00:01:05,760 --> 00:01:09,040
this is just an example of our work

27
00:01:09,040 --> 00:01:12,880
and i encourage you to visit our website

28
00:01:12,880 --> 00:01:14,479
this is the link

29
00:01:14,479 --> 00:01:16,880
to know more about

30
00:01:16,880 --> 00:01:21,680
our theme and the research that we do

31
00:01:21,680 --> 00:01:25,280
and in my case i mainly focus on c and c

32
00:01:25,280 --> 00:01:26,799
plus plus projects

33
00:01:26,799 --> 00:01:29,920
i'm also a fashion enthusiast

34
00:01:29,920 --> 00:01:32,400
and more specifically

35
00:01:32,400 --> 00:01:35,119
an afl and afl plus plus

36
00:01:35,119 --> 00:01:36,320
fan

37
00:01:36,320 --> 00:01:38,799
and these are some examples

38
00:01:38,799 --> 00:01:41,759
of software in which i have been working

39
00:01:41,759 --> 00:01:42,640
on

40
00:01:42,640 --> 00:01:45,200
during the the last year

41
00:01:45,200 --> 00:01:47,360
but today i'm going to focus

42
00:01:47,360 --> 00:01:48,320
only

43
00:01:48,320 --> 00:01:49,280
in the

44
00:01:49,280 --> 00:01:54,560
apache http server security

45
00:01:54,560 --> 00:01:55,520
okay

46
00:01:55,520 --> 00:01:58,799
so the agenda for today has

47
00:01:58,799 --> 00:02:00,880
these five points

48
00:02:00,880 --> 00:02:03,600
in the first one i will show you a brief

49
00:02:03,600 --> 00:02:06,399
introduction about the apache

50
00:02:06,399 --> 00:02:08,399
architecture

51
00:02:08,399 --> 00:02:10,639
in the second one i will show you a

52
00:02:10,639 --> 00:02:14,400
summary of my fasting workflow

53
00:02:14,400 --> 00:02:17,520
then i will go over some of the custom

54
00:02:17,520 --> 00:02:19,040
mutators that

55
00:02:19,040 --> 00:02:20,879
i have built

56
00:02:20,879 --> 00:02:23,120
and why i have built these custom

57
00:02:23,120 --> 00:02:24,560
mutators

58
00:02:24,560 --> 00:02:27,599
after that i'm going to explain some of

59
00:02:27,599 --> 00:02:30,400
the houston interceptors that i have

60
00:02:30,400 --> 00:02:31,840
created

61
00:02:31,840 --> 00:02:32,640
and

62
00:02:32,640 --> 00:02:34,959
in the last point i will show you some

63
00:02:34,959 --> 00:02:38,160
of the vulnerabilities and backs that i

64
00:02:38,160 --> 00:02:40,879
have discovered

65
00:02:41,120 --> 00:02:43,519
well let's start with the apache

66
00:02:43,519 --> 00:02:45,840
architecture overview

67
00:02:45,840 --> 00:02:48,720
apache is one of the most well-known

68
00:02:48,720 --> 00:02:51,120
http web servers

69
00:02:51,120 --> 00:02:52,000
so

70
00:02:52,000 --> 00:02:53,840
i think that it doesn't need any

71
00:02:53,840 --> 00:02:55,200
introduction

72
00:02:55,200 --> 00:02:59,280
so we can skip this slide

73
00:03:01,120 --> 00:03:04,720
okay and apache apache architecture

74
00:03:04,720 --> 00:03:08,720
is compound composed of three main parts

75
00:03:08,720 --> 00:03:10,159
the first part

76
00:03:10,159 --> 00:03:12,319
is the the bachelor

77
00:03:12,319 --> 00:03:13,680
that includes

78
00:03:13,680 --> 00:03:17,840
some basic functionalities of apache

79
00:03:17,840 --> 00:03:19,280
we can find

80
00:03:19,280 --> 00:03:20,560
the modules

81
00:03:20,560 --> 00:03:22,400
the modules implement

82
00:03:22,400 --> 00:03:25,200
most of the functionalities of the web

83
00:03:25,200 --> 00:03:26,560
server

84
00:03:26,560 --> 00:03:30,560
and then we have we have the apr the apr

85
00:03:30,560 --> 00:03:33,920
library the apache portable runtime

86
00:03:33,920 --> 00:03:36,159
library

87
00:03:36,159 --> 00:03:39,440
and between these modules we have five

88
00:03:39,440 --> 00:03:41,120
different categories

89
00:03:41,120 --> 00:03:44,319
the first one is the mpm modules

90
00:03:44,319 --> 00:03:47,519
this type of modules are responsible for

91
00:03:47,519 --> 00:03:52,000
basic request handling and dispatching

92
00:03:52,000 --> 00:03:55,519
then we have the base modules

93
00:03:55,519 --> 00:03:58,640
these are modules that are compiled

94
00:03:58,640 --> 00:04:02,080
and loaded by default

95
00:04:02,080 --> 00:04:05,120
we also have the extension modules

96
00:04:05,120 --> 00:04:08,319
that are not normally loaded into the

97
00:04:08,319 --> 00:04:09,680
web server

98
00:04:09,680 --> 00:04:13,040
except for a few cases

99
00:04:13,040 --> 00:04:16,560
and out of the apache distribution we

100
00:04:16,560 --> 00:04:20,560
can find also the experimental modules

101
00:04:20,560 --> 00:04:24,000
those are sorry those are available into

102
00:04:24,000 --> 00:04:26,639
the apache distribution but are not

103
00:04:26,639 --> 00:04:28,400
officially supported

104
00:04:28,400 --> 00:04:30,800
by the apaches thing by the apache

105
00:04:30,800 --> 00:04:32,479
developers

106
00:04:32,479 --> 00:04:34,320
and the last group is the external

107
00:04:34,320 --> 00:04:36,000
modules that

108
00:04:36,000 --> 00:04:38,880
are those modules that are not included

109
00:04:38,880 --> 00:04:42,440
in the apache kit

110
00:04:42,639 --> 00:04:44,479
a very important

111
00:04:44,479 --> 00:04:47,919
type of modules are the mpm modules the

112
00:04:47,919 --> 00:04:50,880
multi-processing modules

113
00:04:50,880 --> 00:04:53,919
this provides an interface between

114
00:04:53,919 --> 00:04:56,479
the apache server and the operating

115
00:04:56,479 --> 00:04:59,199
system syscalls

116
00:04:59,199 --> 00:05:02,639
between the tasks that the npm handle

117
00:05:02,639 --> 00:05:04,800
we can find for example

118
00:05:04,800 --> 00:05:07,360
creating the network connections

119
00:05:07,360 --> 00:05:10,240
listening for requests and accepting

120
00:05:10,240 --> 00:05:12,080
requests for the clients

121
00:05:12,080 --> 00:05:13,039
and

122
00:05:13,039 --> 00:05:16,720
npm also can handle the creation of

123
00:05:16,720 --> 00:05:19,520
proof processes and threats

124
00:05:19,520 --> 00:05:21,919
and it's important to note that we can

125
00:05:21,919 --> 00:05:23,120
only have

126
00:05:23,120 --> 00:05:24,639
one npm

127
00:05:24,639 --> 00:05:26,080
running

128
00:05:26,080 --> 00:05:29,758
or loaded at the time

129
00:05:31,280 --> 00:05:34,160
well between these three main modules we

130
00:05:34,160 --> 00:05:35,600
can

131
00:05:35,600 --> 00:05:36,720
or

132
00:05:36,720 --> 00:05:38,880
best set we can differentiate

133
00:05:38,880 --> 00:05:42,000
three main modules on unix systems the

134
00:05:42,000 --> 00:05:43,600
first one will be the

135
00:05:43,600 --> 00:05:46,880
prefork configuration that implements

136
00:05:46,880 --> 00:05:48,639
just a

137
00:05:48,639 --> 00:05:50,800
prefork web server

138
00:05:50,800 --> 00:05:53,840
without threads of any type

139
00:05:53,840 --> 00:05:55,039
that is how

140
00:05:55,039 --> 00:05:58,560
the old versions of apache used to work

141
00:05:58,560 --> 00:06:00,560
in the past

142
00:06:00,560 --> 00:06:02,880
the second mpn configuration

143
00:06:02,880 --> 00:06:05,680
is the worker npm

144
00:06:05,680 --> 00:06:09,600
this npm implement implements a hybrid

145
00:06:09,600 --> 00:06:12,319
multi-thread and multi-processes

146
00:06:12,319 --> 00:06:14,160
multi-process server

147
00:06:14,160 --> 00:06:16,960
in this npn each process

148
00:06:16,960 --> 00:06:19,919
creates a fixed number number of threads

149
00:06:19,919 --> 00:06:21,280
threads

150
00:06:21,280 --> 00:06:22,880
and the last one

151
00:06:22,880 --> 00:06:27,520
that is the newest one is the event npm

152
00:06:27,520 --> 00:06:30,560
in that case it's an asynchronous

153
00:06:30,560 --> 00:06:31,919
implementation

154
00:06:31,919 --> 00:06:34,319
and the main difference with the worker

155
00:06:34,319 --> 00:06:39,600
npn is that the event and npm is able to

156
00:06:39,600 --> 00:06:42,560
re reuse a single thread for new

157
00:06:42,560 --> 00:06:43,759
connection

158
00:06:43,759 --> 00:06:45,199
so

159
00:06:45,199 --> 00:06:49,440
it doesn't need to open a new

160
00:06:49,440 --> 00:06:53,599
thread or for every new connection

161
00:06:53,759 --> 00:06:55,840
and then we have the third main

162
00:06:55,840 --> 00:06:58,880
component of the apache architecture the

163
00:06:58,880 --> 00:07:01,680
apache portable runtime

164
00:07:01,680 --> 00:07:04,800
apr is a supporting library for for

165
00:07:04,800 --> 00:07:06,319
apache

166
00:07:06,319 --> 00:07:10,319
it's provide a set of apis

167
00:07:10,319 --> 00:07:12,800
that make possible to use

168
00:07:12,800 --> 00:07:14,400
the same functions

169
00:07:14,400 --> 00:07:16,319
across different platforms across

170
00:07:16,319 --> 00:07:18,960
different operating systems

171
00:07:18,960 --> 00:07:21,440
and some of the capabilities of apr

172
00:07:21,440 --> 00:07:22,639
includes

173
00:07:22,639 --> 00:07:25,039
are the memory pools and memory

174
00:07:25,039 --> 00:07:29,039
allocations that i will explain after

175
00:07:29,039 --> 00:07:30,319
also handle

176
00:07:30,319 --> 00:07:33,840
the file input and file output

177
00:07:33,840 --> 00:07:35,440
provides also

178
00:07:35,440 --> 00:07:38,080
share memory functionalities

179
00:07:38,080 --> 00:07:40,960
and for example other things as

180
00:07:40,960 --> 00:07:42,800
multi-threading

181
00:07:42,800 --> 00:07:43,599
or

182
00:07:43,599 --> 00:07:46,400
time routines

183
00:07:46,800 --> 00:07:51,120
and this is the apache operation diagram

184
00:07:51,120 --> 00:07:53,520
it has three different phases

185
00:07:53,520 --> 00:07:55,599
the first one is the

186
00:07:55,599 --> 00:07:59,319
apache startup

187
00:07:59,440 --> 00:08:02,560
this first stage includes the

188
00:08:02,560 --> 00:08:05,280
parsing of the configuration file

189
00:08:05,280 --> 00:08:07,840
the loading of libraries and the

190
00:08:07,840 --> 00:08:11,360
initialization of the system resources

191
00:08:11,360 --> 00:08:13,120
the second one

192
00:08:13,120 --> 00:08:15,280
is the operation phase

193
00:08:15,280 --> 00:08:17,759
in this stage the first thing that

194
00:08:17,759 --> 00:08:22,400
apache does is to call to the set uid

195
00:08:22,400 --> 00:08:24,400
function

196
00:08:24,400 --> 00:08:27,680
in order to change the to a regular user

197
00:08:27,680 --> 00:08:30,160
from root to a regular user

198
00:08:30,160 --> 00:08:31,840
it also includes

199
00:08:31,840 --> 00:08:32,640
the

200
00:08:32,640 --> 00:08:34,958
request processing itself

201
00:08:34,958 --> 00:08:38,080
and the third one is the cleanup phase

202
00:08:38,080 --> 00:08:41,039
in this last stage apache release all

203
00:08:41,039 --> 00:08:44,240
the resources including memory file

204
00:08:44,240 --> 00:08:47,600
handles or sockets

205
00:08:49,360 --> 00:08:51,680
now i will show you an

206
00:08:51,680 --> 00:08:53,680
http request

207
00:08:53,680 --> 00:08:54,800
and how

208
00:08:54,800 --> 00:08:58,800
this http request is processed by apache

209
00:08:58,800 --> 00:09:01,040
for example we have

210
00:09:01,040 --> 00:09:04,800
our http request here

211
00:09:04,800 --> 00:09:08,480
and at first this http request

212
00:09:08,480 --> 00:09:10,399
will go through

213
00:09:10,399 --> 00:09:14,320
these metadata modules

214
00:09:14,320 --> 00:09:17,360
then the output of the metadata modules

215
00:09:17,360 --> 00:09:20,160
will be processed processed by the input

216
00:09:20,160 --> 00:09:23,519
filters filters sorry

217
00:09:23,519 --> 00:09:26,480
after this the request is processed by

218
00:09:26,480 --> 00:09:29,360
the handler modules

219
00:09:29,360 --> 00:09:33,519
and by the output output filters

220
00:09:33,519 --> 00:09:36,720
the last stage is the execution of the

221
00:09:36,720 --> 00:09:38,880
login modules

222
00:09:38,880 --> 00:09:42,240
and amongst the metadata modules for

223
00:09:42,240 --> 00:09:44,399
example we can find

224
00:09:44,399 --> 00:09:48,880
modules for url preparing or modules for

225
00:09:48,880 --> 00:09:53,360
http access and authentication

226
00:09:53,360 --> 00:09:55,680
as a filter examples we can find for

227
00:09:55,680 --> 00:09:58,000
example modules for

228
00:09:58,000 --> 00:10:02,079
for encryption or for compressing

229
00:10:02,079 --> 00:10:03,519
well

230
00:10:03,519 --> 00:10:05,519
now i'm going to explain

231
00:10:05,519 --> 00:10:07,519
some of the most

232
00:10:07,519 --> 00:10:11,760
relevant aspect of my fasting workflow

233
00:10:11,760 --> 00:10:13,920
i have divided my fasting workflow in

234
00:10:13,920 --> 00:10:16,560
four different parts

235
00:10:16,560 --> 00:10:18,640
choosing a fasting engine

236
00:10:18,640 --> 00:10:20,560
socket fasten

237
00:10:20,560 --> 00:10:22,560
important code changes

238
00:10:22,560 --> 00:10:25,920
and fasten modules

239
00:10:26,000 --> 00:10:26,880
well

240
00:10:26,880 --> 00:10:28,880
choosing a fasten engine

241
00:10:28,880 --> 00:10:31,440
when it comes to the fasten engine i

242
00:10:31,440 --> 00:10:33,360
don't have any doubt

243
00:10:33,360 --> 00:10:36,959
afl is my my choice by default

244
00:10:36,959 --> 00:10:38,720
i felt plus plus

245
00:10:38,720 --> 00:10:41,279
is a fork of afl

246
00:10:41,279 --> 00:10:45,279
but it includes a lot of new features in

247
00:10:45,279 --> 00:10:49,519
comparison with the original afl

248
00:10:49,519 --> 00:10:52,160
among these future

249
00:10:52,160 --> 00:10:54,560
features i can mention for example

250
00:10:54,560 --> 00:10:56,160
custom mutators

251
00:10:56,160 --> 00:10:58,240
or power schedules

252
00:10:58,240 --> 00:10:59,200
or

253
00:10:59,200 --> 00:11:03,519
multiple in instrumentation modes

254
00:11:03,760 --> 00:11:06,399
another problem that we face when we

255
00:11:06,399 --> 00:11:09,440
want to fast an interactive server

256
00:11:09,440 --> 00:11:12,480
is that afl doesn't support

257
00:11:12,480 --> 00:11:15,040
native sockets fasten

258
00:11:15,040 --> 00:11:15,839
so

259
00:11:15,839 --> 00:11:17,279
we need to find

260
00:11:17,279 --> 00:11:20,000
or we need to modify the source code in

261
00:11:20,000 --> 00:11:22,959
order to be able to fast the server

262
00:11:22,959 --> 00:11:26,240
for that my approach was to add a small

263
00:11:26,240 --> 00:11:27,600
code snippet

264
00:11:27,600 --> 00:11:31,360
into the mpm code that i saw to you

265
00:11:31,360 --> 00:11:32,720
before

266
00:11:32,720 --> 00:11:35,839
this snippet code self-connect to the

267
00:11:35,839 --> 00:11:37,680
server itself

268
00:11:37,680 --> 00:11:39,120
open a new thread

269
00:11:39,120 --> 00:11:40,399
and redirect

270
00:11:40,399 --> 00:11:43,920
all the input data through it

271
00:11:43,920 --> 00:11:47,360
let's look at these two code snippets

272
00:11:47,360 --> 00:11:50,720
you can see the self connect function

273
00:11:50,720 --> 00:11:52,079
just here

274
00:11:52,079 --> 00:11:55,040
that establish a connection to the

275
00:11:55,040 --> 00:11:57,120
server itself you can see here the

276
00:11:57,120 --> 00:11:58,880
localhost

277
00:11:58,880 --> 00:12:02,240
and what i do then is just to

278
00:12:02,240 --> 00:12:04,160
read the file data

279
00:12:04,160 --> 00:12:05,040
here

280
00:12:05,040 --> 00:12:06,720
and send

281
00:12:06,720 --> 00:12:10,240
this data through the socket

282
00:12:10,240 --> 00:12:11,920
this code snippets

283
00:12:11,920 --> 00:12:15,519
will be then introduced at the npm

284
00:12:15,519 --> 00:12:18,800
circles source code

285
00:12:18,800 --> 00:12:21,440
and in my case i use two different

286
00:12:21,440 --> 00:12:22,839
fasten

287
00:12:22,839 --> 00:12:25,360
configurations most of the time i use

288
00:12:25,360 --> 00:12:27,839
the prefork npm

289
00:12:27,839 --> 00:12:31,040
mostly 80 of my of my time

290
00:12:31,040 --> 00:12:35,120
with only one process at a time

291
00:12:35,120 --> 00:12:39,040
with the aim of getting a good stability

292
00:12:39,040 --> 00:12:39,920
but

293
00:12:39,920 --> 00:12:41,760
i also fasted

294
00:12:41,760 --> 00:12:44,480
the event npm

295
00:12:44,480 --> 00:12:46,399
in order to catch

296
00:12:46,399 --> 00:12:49,120
concurrency backs so to catch

297
00:12:49,120 --> 00:12:52,639
concurrency issues

298
00:12:52,639 --> 00:12:55,680
let's see now some changes that i made

299
00:12:55,680 --> 00:12:57,440
to the source code

300
00:12:57,440 --> 00:13:01,120
in order to improve the fashion process

301
00:13:01,120 --> 00:13:03,440
for example the first group of changes

302
00:13:03,440 --> 00:13:04,880
are aimed

303
00:13:04,880 --> 00:13:08,320
at reducing the entropy

304
00:13:08,320 --> 00:13:11,440
for example in that case replacing calls

305
00:13:11,440 --> 00:13:12,800
to random

306
00:13:12,800 --> 00:13:14,480
by constant values

307
00:13:14,480 --> 00:13:15,839
here

308
00:13:15,839 --> 00:13:17,440
you can see that

309
00:13:17,440 --> 00:13:19,519
that i comment out

310
00:13:19,519 --> 00:13:23,120
the generate random bytes call

311
00:13:23,120 --> 00:13:25,200
and instead

312
00:13:25,200 --> 00:13:27,440
i use a constant seed

313
00:13:27,440 --> 00:13:28,880
the main idea

314
00:13:28,880 --> 00:13:31,200
is to reduce the entropy of the

315
00:13:31,200 --> 00:13:34,000
execution

316
00:13:34,000 --> 00:13:36,560
second group of changes

317
00:13:36,560 --> 00:13:38,160
are aimed to

318
00:13:38,160 --> 00:13:40,240
reduce delays

319
00:13:40,240 --> 00:13:43,600
for example removing some sleep or

320
00:13:43,600 --> 00:13:44,959
select calls

321
00:13:44,959 --> 00:13:47,600
the idea here is to improve the fasting

322
00:13:47,600 --> 00:13:50,000
speed and you can see here

323
00:13:50,000 --> 00:13:54,800
as i comment out the select call

324
00:13:55,600 --> 00:13:58,240
the third group of changes are those

325
00:13:58,240 --> 00:14:00,959
made in crypto routines

326
00:14:00,959 --> 00:14:04,560
for example to disable checksums

327
00:14:04,560 --> 00:14:07,279
in this picture you can see as i comment

328
00:14:07,279 --> 00:14:08,079
out

329
00:14:08,079 --> 00:14:09,040
both

330
00:14:09,040 --> 00:14:12,079
crc comparisons

331
00:14:12,079 --> 00:14:13,279
here and

332
00:14:13,279 --> 00:14:14,639
here

333
00:14:14,639 --> 00:14:18,880
and that's really important because

334
00:14:18,880 --> 00:14:21,839
otherwise the faster will get stuck

335
00:14:21,839 --> 00:14:26,000
in this crc so this is always a critical

336
00:14:26,000 --> 00:14:26,800
uh

337
00:14:26,800 --> 00:14:28,639
moment when we are preparing the the

338
00:14:28,639 --> 00:14:31,440
fast the fasting

339
00:14:32,240 --> 00:14:35,360
okay and now i will show you my approach

340
00:14:35,360 --> 00:14:39,920
for fasting the different apache modules

341
00:14:41,360 --> 00:14:44,160
what i did was to use at first an

342
00:14:44,160 --> 00:14:46,079
incremental approach

343
00:14:46,079 --> 00:14:49,519
where i started with a small set of

344
00:14:49,519 --> 00:14:52,720
modules enabled you can see here the

345
00:14:52,720 --> 00:14:55,279
httpd conf

346
00:14:55,279 --> 00:14:58,399
and then i try to progressively

347
00:14:58,399 --> 00:15:01,279
include new modules in the configuration

348
00:15:01,279 --> 00:15:04,800
file and test the stability

349
00:15:04,800 --> 00:15:07,279
following that i repeat the process

350
00:15:07,279 --> 00:15:10,720
until all the modules are enabled

351
00:15:10,720 --> 00:15:14,399
and the fasting process is stable

352
00:15:14,399 --> 00:15:15,279
okay

353
00:15:15,279 --> 00:15:17,839
let's give now a brief introduction

354
00:15:17,839 --> 00:15:20,480
about custom mutators

355
00:15:20,480 --> 00:15:21,680
so

356
00:15:21,680 --> 00:15:23,519
what's the problem

357
00:15:23,519 --> 00:15:25,440
that we want to solve

358
00:15:25,440 --> 00:15:29,440
well by default afl and lift faster

359
00:15:29,440 --> 00:15:30,560
implement

360
00:15:30,560 --> 00:15:33,759
basic mutators like for example

361
00:15:33,759 --> 00:15:36,240
bit flipping byte flipping

362
00:15:36,240 --> 00:15:38,880
known integers

363
00:15:38,880 --> 00:15:39,600
so

364
00:15:39,600 --> 00:15:43,759
these mutators provide good results when

365
00:15:43,759 --> 00:15:46,000
applied to binary formats

366
00:15:46,000 --> 00:15:46,800
but

367
00:15:46,800 --> 00:15:48,959
are not so good when

368
00:15:48,959 --> 00:15:51,519
applied to complex formats

369
00:15:51,519 --> 00:15:54,480
like for example the http protocol

370
00:15:54,480 --> 00:15:57,360
so my solution was to include additional

371
00:15:57,360 --> 00:15:59,199
custom mutators

372
00:15:59,199 --> 00:16:02,480
specifically created for fasting the

373
00:16:02,480 --> 00:16:04,320
http protocol

374
00:16:04,320 --> 00:16:06,959
you can find all the code related with

375
00:16:06,959 --> 00:16:09,120
these custom mutators

376
00:16:09,120 --> 00:16:10,959
in my github

377
00:16:10,959 --> 00:16:13,839
repository this is the link

378
00:16:13,839 --> 00:16:16,240
tony morales

379
00:16:16,240 --> 00:16:19,040
and for example in this

380
00:16:19,040 --> 00:16:21,360
first example we can see a simple

381
00:16:21,360 --> 00:16:25,040
customizator the line swiping

382
00:16:25,040 --> 00:16:27,440
you can see here two different http

383
00:16:27,440 --> 00:16:29,920
requests

384
00:16:30,320 --> 00:16:33,120
the guest get request and the post

385
00:16:33,120 --> 00:16:35,360
request

386
00:16:35,360 --> 00:16:38,000
and below you can see an example of

387
00:16:38,000 --> 00:16:39,360
mutation

388
00:16:39,360 --> 00:16:43,360
where the content type

389
00:16:43,360 --> 00:16:46,000
and the accept language

390
00:16:46,000 --> 00:16:47,279
you can see

391
00:16:47,279 --> 00:16:48,160
as

392
00:16:48,160 --> 00:16:50,079
these headers

393
00:16:50,079 --> 00:16:52,639
have been swapped

394
00:16:52,639 --> 00:16:53,440
so

395
00:16:53,440 --> 00:16:57,199
now the post request has two different

396
00:16:57,199 --> 00:16:59,600
abstract languages headers

397
00:16:59,600 --> 00:17:02,800
while they get requests don't have any

398
00:17:02,800 --> 00:17:06,079
accept language either

399
00:17:07,280 --> 00:17:10,400
in this second example we can see a word

400
00:17:10,400 --> 00:17:12,240
swapping

401
00:17:12,240 --> 00:17:15,919
that just swaps two words or more

402
00:17:15,919 --> 00:17:20,480
specifically to part of the url

403
00:17:20,480 --> 00:17:22,959
in the picture below you can see us the

404
00:17:22,959 --> 00:17:28,079
http request get hello and post

405
00:17:28,559 --> 00:17:30,000
hub swap

406
00:17:30,000 --> 00:17:32,960
date url now the post

407
00:17:32,960 --> 00:17:38,520
goes to hello and the get go to cgi

408
00:17:39,200 --> 00:17:42,480
well but i have implements also some

409
00:17:42,480 --> 00:17:45,600
other mutators obviously for example i

410
00:17:45,600 --> 00:17:46,720
implemented

411
00:17:46,720 --> 00:17:52,000
a charset brute force mutator

412
00:17:52,720 --> 00:17:56,160
these mutators were inspired by hascat

413
00:17:56,160 --> 00:17:58,160
passport cracker 2

414
00:17:58,160 --> 00:18:00,640
and for example i implemented things

415
00:18:00,640 --> 00:18:03,440
like two bytes brute force three bytes

416
00:18:03,440 --> 00:18:06,720
brute force strings brute force digits

417
00:18:06,720 --> 00:18:09,280
brute force

418
00:18:09,280 --> 00:18:13,039
and in addition to use custom mutators i

419
00:18:13,039 --> 00:18:14,880
used

420
00:18:14,880 --> 00:18:17,120
custom grammars

421
00:18:17,120 --> 00:18:19,919
for this task i used the grammar mutator

422
00:18:19,919 --> 00:18:24,320
tool that it's include into the afl plus

423
00:18:24,320 --> 00:18:28,000
and to use grammar mutator we need to

424
00:18:28,000 --> 00:18:31,520
define we only need to define a json

425
00:18:31,520 --> 00:18:34,799
file that includes a collection of key

426
00:18:34,799 --> 00:18:35,600
and

427
00:18:35,600 --> 00:18:38,320
value pairs

428
00:18:39,120 --> 00:18:40,320
this is a

429
00:18:40,320 --> 00:18:42,640
part of my grammar specification here

430
00:18:42,640 --> 00:18:44,320
you can see

431
00:18:44,320 --> 00:18:46,160
you can see it best

432
00:18:46,160 --> 00:18:47,600
with an example

433
00:18:47,600 --> 00:18:49,600
for example you can see

434
00:18:49,600 --> 00:18:52,799
us every request

435
00:18:52,799 --> 00:18:54,400
is composed

436
00:18:54,400 --> 00:18:57,280
of a start line

437
00:18:57,280 --> 00:18:59,280
then we have an

438
00:18:59,280 --> 00:19:01,280
enough line

439
00:19:01,280 --> 00:19:03,760
then the headers

440
00:19:03,760 --> 00:19:05,280
the body

441
00:19:05,280 --> 00:19:08,240
and the end of the request

442
00:19:08,240 --> 00:19:11,200
and at the same time every single start

443
00:19:11,200 --> 00:19:12,640
line

444
00:19:12,640 --> 00:19:15,520
is composed of a method

445
00:19:15,520 --> 00:19:18,240
for example get head post

446
00:19:18,240 --> 00:19:19,919
the uri

447
00:19:19,919 --> 00:19:23,360
and the http version so this is a part

448
00:19:23,360 --> 00:19:24,400
of a

449
00:19:24,400 --> 00:19:26,640
custom grammar

450
00:19:26,640 --> 00:19:30,080
well and now it's time for custom

451
00:19:30,080 --> 00:19:32,400
interceptors

452
00:19:32,400 --> 00:19:34,160
but first of all

453
00:19:34,160 --> 00:19:36,799
why do we need to implement houston

454
00:19:36,799 --> 00:19:38,799
interceptors well

455
00:19:38,799 --> 00:19:40,559
things are going to be a little bit

456
00:19:40,559 --> 00:19:44,320
harder there but don't worry

457
00:19:45,200 --> 00:19:48,240
so as i previously mentioned apache use

458
00:19:48,240 --> 00:19:50,320
custom memory pools

459
00:19:50,320 --> 00:19:52,880
to improve dynamo dynamic memory

460
00:19:52,880 --> 00:19:54,640
management

461
00:19:54,640 --> 00:19:58,400
for this task apache use the functions

462
00:19:58,400 --> 00:20:01,600
that apr the apache portable runtime

463
00:20:01,600 --> 00:20:02,880
provides

464
00:20:02,880 --> 00:20:04,799
for example

465
00:20:04,799 --> 00:20:07,360
if we want to allocate memory inside the

466
00:20:07,360 --> 00:20:10,720
memory pool we need to use the

467
00:20:10,720 --> 00:20:13,840
apr apr p alloc

468
00:20:13,840 --> 00:20:15,120
instead

469
00:20:15,120 --> 00:20:16,080
of the

470
00:20:16,080 --> 00:20:18,000
standard malloc

471
00:20:18,000 --> 00:20:20,240
because we want to allocate memory

472
00:20:20,240 --> 00:20:22,159
inside the memory pool

473
00:20:22,159 --> 00:20:25,360
so consider the following code snippet

474
00:20:25,360 --> 00:20:27,440
where the program

475
00:20:27,440 --> 00:20:28,320
calls

476
00:20:28,320 --> 00:20:29,919
to apr

477
00:20:29,919 --> 00:20:31,280
pialog

478
00:20:31,280 --> 00:20:36,240
in this case the second argument that

479
00:20:37,200 --> 00:20:41,360
okay so we want to allocate for example

480
00:20:41,480 --> 00:20:44,640
126 bytes inside the

481
00:20:44,640 --> 00:20:49,039
first argument inside the apr pool

482
00:20:49,039 --> 00:20:51,200
this is the site argument and this is

483
00:20:51,200 --> 00:20:54,000
the apr pool where we want to

484
00:20:54,000 --> 00:20:56,400
allocate the memory

485
00:20:56,400 --> 00:20:57,520
so

486
00:20:57,520 --> 00:21:01,120
this is how apache memory pool works the

487
00:21:01,120 --> 00:21:03,919
apache memory pool consists of a link at

488
00:21:03,919 --> 00:21:06,480
the list of memory nodes

489
00:21:06,480 --> 00:21:07,840
each node

490
00:21:07,840 --> 00:21:08,640
has

491
00:21:08,640 --> 00:21:09,919
a fixed

492
00:21:09,919 --> 00:21:12,480
side memory available you can see here

493
00:21:12,480 --> 00:21:15,200
the memory of each node

494
00:21:15,200 --> 00:21:17,840
and as you can see also in this picture

495
00:21:17,840 --> 00:21:19,760
the third node

496
00:21:19,760 --> 00:21:24,080
has some free space available

497
00:21:24,159 --> 00:21:27,520
then when more space is needed

498
00:21:27,520 --> 00:21:30,720
the program will add a new node

499
00:21:30,720 --> 00:21:32,240
just

500
00:21:32,240 --> 00:21:34,559
at the end of the list so if we don't

501
00:21:34,559 --> 00:21:36,400
have memory obviously we need to add a

502
00:21:36,400 --> 00:21:39,200
new node to the link in the list

503
00:21:39,200 --> 00:21:41,840
and this is the code of the allocator

504
00:21:41,840 --> 00:21:43,520
alloc

505
00:21:43,520 --> 00:21:45,440
function

506
00:21:45,440 --> 00:21:47,039
and the thing is that

507
00:21:47,039 --> 00:21:48,960
this function as you can see in this

508
00:21:48,960 --> 00:21:50,480
comment

509
00:21:50,480 --> 00:21:55,120
round up the minimum size to

510
00:21:55,799 --> 00:21:58,400
8192 bytes

511
00:21:58,400 --> 00:21:59,600
and of course

512
00:21:59,600 --> 00:22:01,520
this will be a problem for other

513
00:22:01,520 --> 00:22:03,919
sanitizer

514
00:22:03,919 --> 00:22:05,840
so for example

515
00:22:05,840 --> 00:22:10,559
i can show you an scenario where

516
00:22:10,559 --> 00:22:12,960
we make a call

517
00:22:12,960 --> 00:22:16,600
to apr pialog with a size of

518
00:22:16,600 --> 00:22:20,480
126 bytes here you can see the output of

519
00:22:20,480 --> 00:22:22,240
the debug

520
00:22:22,240 --> 00:22:23,679
so um

521
00:22:23,679 --> 00:22:24,880
this is the

522
00:22:24,880 --> 00:22:27,440
output of the debug

523
00:22:27,440 --> 00:22:29,840
in the

524
00:22:30,640 --> 00:22:33,520
allocator alloc function

525
00:22:33,520 --> 00:22:34,400
so

526
00:22:34,400 --> 00:22:37,760
we have made a call to apr pialog with a

527
00:22:37,760 --> 00:22:42,159
size argument of 126 bytes but other

528
00:22:42,159 --> 00:22:47,240
sanitizer has poison and memory area of

529
00:22:47,240 --> 00:22:50,559
8192 bytes

530
00:22:50,640 --> 00:22:52,720
so the

531
00:22:52,720 --> 00:22:55,600
result is a total area of

532
00:22:55,600 --> 00:22:58,720
eight thousand and sixty-six bytes

533
00:22:58,720 --> 00:23:01,120
arched as writable

534
00:23:01,120 --> 00:23:03,840
by other sanitizer

535
00:23:03,840 --> 00:23:06,559
but the thing is that this is not

536
00:23:06,559 --> 00:23:08,720
real allocated memory

537
00:23:08,720 --> 00:23:11,600
instead is free space

538
00:23:11,600 --> 00:23:13,840
in the node of the

539
00:23:13,840 --> 00:23:15,280
list

540
00:23:15,280 --> 00:23:16,640
so for example

541
00:23:16,640 --> 00:23:18,159
imagine

542
00:23:18,159 --> 00:23:20,559
that we call to main copy

543
00:23:20,559 --> 00:23:22,559
with a size of

544
00:23:22,559 --> 00:23:24,640
5000

545
00:23:24,640 --> 00:23:25,840
this will lead

546
00:23:25,840 --> 00:23:29,039
to an override of the rest of the nose

547
00:23:29,039 --> 00:23:30,480
nodes memory

548
00:23:30,480 --> 00:23:32,640
because

549
00:23:32,640 --> 00:23:34,960
our buffer was

550
00:23:34,960 --> 00:23:37,960
has is of

551
00:23:37,960 --> 00:23:40,720
128 bytes

552
00:23:40,720 --> 00:23:42,480
but however

553
00:23:42,480 --> 00:23:44,159
other sanitizer

554
00:23:44,159 --> 00:23:49,279
will not throw any alert message because

555
00:23:49,279 --> 00:23:51,840
sorry uh

556
00:23:51,840 --> 00:23:54,960
other sanitizer poisson poison it a

557
00:23:54,960 --> 00:23:59,320
memory area of 8192

558
00:23:59,360 --> 00:24:02,240
so will not throw any alert

559
00:24:02,240 --> 00:24:03,120
and

560
00:24:03,120 --> 00:24:05,840
the thing is that errors like this can

561
00:24:05,840 --> 00:24:08,720
result in vulnerabilities such

562
00:24:08,720 --> 00:24:11,840
as the one i published one year ago in

563
00:24:11,840 --> 00:24:13,840
pro ftp

564
00:24:13,840 --> 00:24:14,960
this is the

565
00:24:14,960 --> 00:24:18,000
cbe of the use after three that i

566
00:24:18,000 --> 00:24:20,720
published one year ago and this

567
00:24:20,720 --> 00:24:24,400
use of the three has a public exploit

568
00:24:24,400 --> 00:24:26,799
released

569
00:24:29,440 --> 00:24:32,640
okay so how we can

570
00:24:32,640 --> 00:24:34,799
solve this so to solve this we can

571
00:24:34,799 --> 00:24:36,320
define

572
00:24:36,320 --> 00:24:37,600
uh

573
00:24:37,600 --> 00:24:41,600
our q stone other sanitizer interceptors

574
00:24:41,600 --> 00:24:42,799
to define

575
00:24:42,799 --> 00:24:44,000
our

576
00:24:44,000 --> 00:24:46,799
other sanitizer interceptors we need two

577
00:24:46,799 --> 00:24:48,320
things

578
00:24:48,320 --> 00:24:50,400
the first thing the first thing

579
00:24:50,400 --> 00:24:51,760
is to define

580
00:24:51,760 --> 00:24:52,559
an

581
00:24:52,559 --> 00:24:55,760
interceptor function

582
00:24:55,760 --> 00:24:57,760
like that like this

583
00:24:57,760 --> 00:25:01,120
where the fu

584
00:25:01,120 --> 00:25:04,159
is the name of the function that we want

585
00:25:04,159 --> 00:25:06,559
to intercept

586
00:25:06,559 --> 00:25:08,159
and the second thing

587
00:25:08,159 --> 00:25:11,360
is to call to the asan intercept

588
00:25:11,360 --> 00:25:13,840
function

589
00:25:13,840 --> 00:25:15,360
the first call

590
00:25:15,360 --> 00:25:18,000
of the function 4 or prior to the first

591
00:25:18,000 --> 00:25:21,120
call of function 4.

592
00:25:21,120 --> 00:25:24,000
and this is just an example this is my

593
00:25:24,000 --> 00:25:25,760
implementation of my

594
00:25:25,760 --> 00:25:28,960
interceptor for apr pialog

595
00:25:28,960 --> 00:25:31,760
there are three relevant parts

596
00:25:31,760 --> 00:25:34,480
the first one is when i call to

597
00:25:34,480 --> 00:25:37,120
real apr pialog

598
00:25:37,120 --> 00:25:40,000
to get the original address

599
00:25:40,000 --> 00:25:43,120
of apr pialog

600
00:25:43,120 --> 00:25:46,159
then i save the address

601
00:25:46,159 --> 00:25:47,600
of

602
00:25:47,600 --> 00:25:51,120
the sanitized malloc

603
00:25:51,360 --> 00:25:54,720
and in the end what i do is to save

604
00:25:54,720 --> 00:25:56,400
both addresses

605
00:25:56,400 --> 00:25:59,840
to free them later

606
00:26:00,880 --> 00:26:03,279
obviously if we define houston

607
00:26:03,279 --> 00:26:05,279
interceptors for

608
00:26:05,279 --> 00:26:07,039
pialog or

609
00:26:07,039 --> 00:26:09,360
whatever malloc

610
00:26:09,360 --> 00:26:11,440
derivative function we will need to

611
00:26:11,440 --> 00:26:14,480
define also q stone interceptors for the

612
00:26:14,480 --> 00:26:16,159
free functions

613
00:26:16,159 --> 00:26:18,640
so in that case what i do in the first

614
00:26:18,640 --> 00:26:21,919
step is to free all the addresses

615
00:26:21,919 --> 00:26:25,039
previously allocated with the other

616
00:26:25,039 --> 00:26:28,960
sanitary sanitizer version of malloc

617
00:26:28,960 --> 00:26:30,240
and then

618
00:26:30,240 --> 00:26:32,720
we can proceed to free the memory

619
00:26:32,720 --> 00:26:34,080
allocated

620
00:26:34,080 --> 00:26:37,039
with the lipsy version of mallow with

621
00:26:37,039 --> 00:26:39,039
the standard version of mallow the lip

622
00:26:39,039 --> 00:26:41,600
say lipsy

623
00:26:41,600 --> 00:26:42,400
cool

624
00:26:42,400 --> 00:26:45,279
so now it's time for the most expensive

625
00:26:45,279 --> 00:26:47,600
part

626
00:26:48,159 --> 00:26:49,520
now i will show you some of the

627
00:26:49,520 --> 00:26:51,279
bonalitis and bugs

628
00:26:51,279 --> 00:26:54,240
that i have found

629
00:26:54,240 --> 00:26:56,960
i'm going to start with a nude reference

630
00:26:56,960 --> 00:27:00,320
in the session identity decode function

631
00:27:00,320 --> 00:27:02,240
as you can see here

632
00:27:02,240 --> 00:27:04,320
this back can be triggered set in a

633
00:27:04,320 --> 00:27:08,880
cookie with a null key and value

634
00:27:08,880 --> 00:27:12,480
so look at this example that clarified

635
00:27:12,480 --> 00:27:13,360
the

636
00:27:13,360 --> 00:27:14,640
the thing

637
00:27:14,640 --> 00:27:17,120
in the first position of the cookie we

638
00:27:17,120 --> 00:27:19,600
have the session

639
00:27:19,600 --> 00:27:20,640
key

640
00:27:20,640 --> 00:27:22,559
and the choco value

641
00:27:22,559 --> 00:27:23,919
this is the

642
00:27:23,919 --> 00:27:26,320
first position

643
00:27:26,320 --> 00:27:28,399
in the second position we have the admin

644
00:27:28,399 --> 00:27:29,840
user key

645
00:27:29,840 --> 00:27:31,679
and

646
00:27:31,679 --> 00:27:34,799
the number two as a value

647
00:27:34,799 --> 00:27:37,360
but in the third position we have an

648
00:27:37,360 --> 00:27:39,360
empty key and

649
00:27:39,360 --> 00:27:42,480
empty value pair

650
00:27:42,480 --> 00:27:45,120
what's the problem here well if you look

651
00:27:45,120 --> 00:27:46,399
just below

652
00:27:46,399 --> 00:27:47,440
you can see

653
00:27:47,440 --> 00:27:49,360
two calls to

654
00:27:49,360 --> 00:27:52,720
apr string token

655
00:27:52,720 --> 00:27:55,760
these functions try to extract extract

656
00:27:55,760 --> 00:27:58,720
the first and the second value that are

657
00:27:58,720 --> 00:28:00,000
the key

658
00:28:00,000 --> 00:28:02,399
and the value of the cookie

659
00:28:02,399 --> 00:28:05,679
so that said let's see what happens

660
00:28:05,679 --> 00:28:06,799
in the

661
00:28:06,799 --> 00:28:08,480
string token function

662
00:28:08,480 --> 00:28:12,399
when the first argument is null

663
00:28:12,559 --> 00:28:14,840
just look here that we have the

664
00:28:14,840 --> 00:28:17,679
pair a string but the second can be null

665
00:28:17,679 --> 00:28:19,120
if the

666
00:28:19,120 --> 00:28:20,880
key was previously

667
00:28:20,880 --> 00:28:23,919
nulled too so

668
00:28:23,919 --> 00:28:25,919
you can see in this line

669
00:28:25,919 --> 00:28:28,240
how the while loop

670
00:28:28,240 --> 00:28:31,120
try to the reference

671
00:28:31,120 --> 00:28:34,480
the first argument the string argument

672
00:28:34,480 --> 00:28:37,360
so in order to

673
00:28:37,360 --> 00:28:41,120
uh so so in in that case it will it will

674
00:28:41,120 --> 00:28:45,120
lead to a nude reference obviously

675
00:28:45,120 --> 00:28:46,720
and

676
00:28:46,720 --> 00:28:50,000
in order to exploit this bug mod session

677
00:28:50,000 --> 00:28:51,840
needs to be enabled

678
00:28:51,840 --> 00:28:53,600
and

679
00:28:53,600 --> 00:28:56,000
this one reliability can lead

680
00:28:56,000 --> 00:28:58,799
to denial of service

681
00:28:58,799 --> 00:29:00,720
at the child level

682
00:29:00,720 --> 00:29:03,760
that is affecting to the other threats

683
00:29:03,760 --> 00:29:06,399
in the same process or affecting to the

684
00:29:06,399 --> 00:29:09,200
other clients that are connected to the

685
00:29:09,200 --> 00:29:11,120
server

686
00:29:11,120 --> 00:29:13,520
okay now it's time for another

687
00:29:13,520 --> 00:29:15,840
vulnerability in that case it's an ex

688
00:29:15,840 --> 00:29:19,440
stack base off by one in the check notes

689
00:29:19,440 --> 00:29:21,919
function

690
00:29:22,399 --> 00:29:24,960
in order to exploit this back

691
00:29:24,960 --> 00:29:28,159
the mob of digest module

692
00:29:28,159 --> 00:29:29,919
should be enabled

693
00:29:29,919 --> 00:29:33,120
and the application has to be using the

694
00:29:33,120 --> 00:29:34,159
digest

695
00:29:34,159 --> 00:29:36,080
authentication here you can see the

696
00:29:36,080 --> 00:29:38,000
digest

697
00:29:38,000 --> 00:29:40,559
and for triggering this back we need to

698
00:29:40,559 --> 00:29:41,679
assign

699
00:29:41,679 --> 00:29:43,760
a specific

700
00:29:43,760 --> 00:29:45,520
set of values

701
00:29:45,520 --> 00:29:48,000
or a specific value

702
00:29:48,000 --> 00:29:50,240
to the noun's field you can see here the

703
00:29:50,240 --> 00:29:52,320
nouns feel

704
00:29:52,320 --> 00:29:54,640
as you can see the the nose field

705
00:29:54,640 --> 00:29:57,440
is a base 64 value

706
00:29:57,440 --> 00:30:00,240
in the nose in the nose

707
00:30:00,240 --> 00:30:03,279
so then the check non function

708
00:30:03,279 --> 00:30:05,520
does a call to the

709
00:30:05,520 --> 00:30:09,039
base base 64 decode binary

710
00:30:09,039 --> 00:30:11,760
in order to decode this

711
00:30:11,760 --> 00:30:13,279
64 value

712
00:30:13,279 --> 00:30:15,120
base 64 value

713
00:30:15,120 --> 00:30:17,919
the thing is that the first argument

714
00:30:17,919 --> 00:30:19,360
is

715
00:30:19,360 --> 00:30:23,279
a local array of size 8 this is the

716
00:30:23,279 --> 00:30:25,200
first argument

717
00:30:25,200 --> 00:30:27,679
but here below you can see us the

718
00:30:27,679 --> 00:30:29,679
calculation of

719
00:30:29,679 --> 00:30:32,240
n bytes the code

720
00:30:32,240 --> 00:30:34,399
variable is grown

721
00:30:34,399 --> 00:30:38,240
giving 9 as a result

722
00:30:38,240 --> 00:30:40,000
so in this case

723
00:30:40,000 --> 00:30:43,760
nine bytes will be written into an

724
00:30:43,760 --> 00:30:44,480
uh

725
00:30:44,480 --> 00:30:46,720
an eight bytes buffer

726
00:30:46,720 --> 00:30:50,720
writing one byte out of the boundaries

727
00:30:50,720 --> 00:30:54,399
of the array in the stack

728
00:30:54,640 --> 00:30:57,120
okay let's see the third vulnerability

729
00:30:57,120 --> 00:31:00,080
here we have an usable three in the

730
00:31:00,080 --> 00:31:03,039
cleanup tables function

731
00:31:03,039 --> 00:31:05,720
this function calls to

732
00:31:05,720 --> 00:31:08,480
rmm destroy

733
00:31:08,480 --> 00:31:09,760
as you can see

734
00:31:09,760 --> 00:31:12,240
in this line

735
00:31:12,240 --> 00:31:14,720
the thing is that this memory

736
00:31:14,720 --> 00:31:16,240
has been previously

737
00:31:16,240 --> 00:31:21,039
freed by the apr allocator destroy

738
00:31:21,039 --> 00:31:22,720
function

739
00:31:22,720 --> 00:31:25,919
so where we are trying to access to an

740
00:31:25,919 --> 00:31:30,159
address that is no no longer valid

741
00:31:30,159 --> 00:31:32,720
it will lead to an use after free or in

742
00:31:32,720 --> 00:31:33,760
this case

743
00:31:33,760 --> 00:31:36,080
uh sometimes to a new safety free and

744
00:31:36,080 --> 00:31:39,840
some other times to a double free

745
00:31:39,840 --> 00:31:41,840
it's important to mention that this

746
00:31:41,840 --> 00:31:44,720
vulnerability can only be triggered

747
00:31:44,720 --> 00:31:48,480
in the one process mode

748
00:31:51,519 --> 00:31:54,480
okay another one in this case we have an

749
00:31:54,480 --> 00:31:56,640
out of bounds right

750
00:31:56,640 --> 00:31:58,960
in the hip the off by one pre the

751
00:31:58,960 --> 00:32:01,679
previously explained off by one was in

752
00:32:01,679 --> 00:32:04,080
the stack and this is in the hip

753
00:32:04,080 --> 00:32:06,159
affecting to the escape

754
00:32:06,159 --> 00:32:08,480
quotes function

755
00:32:08,480 --> 00:32:11,600
this function escapes any quotes

756
00:32:11,600 --> 00:32:12,960
in the given

757
00:32:12,960 --> 00:32:15,279
string

758
00:32:15,279 --> 00:32:17,840
the origin of this back is a calculation

759
00:32:17,840 --> 00:32:18,960
mismatch

760
00:32:18,960 --> 00:32:22,159
between the length of the input string

761
00:32:22,159 --> 00:32:25,600
and the size of the allocated outer

762
00:32:25,600 --> 00:32:27,279
string buffer here you can see the

763
00:32:27,279 --> 00:32:31,840
allocation for the outstream buffer so

764
00:32:31,840 --> 00:32:34,720
in this first code snippet i saw the

765
00:32:34,720 --> 00:32:35,760
code

766
00:32:35,760 --> 00:32:38,080
used

767
00:32:38,080 --> 00:32:40,799
the code that is used to calculate the

768
00:32:40,799 --> 00:32:44,480
length of the input string

769
00:32:44,960 --> 00:32:45,679
and

770
00:32:45,679 --> 00:32:48,720
in this second picture you can see

771
00:32:48,720 --> 00:32:51,279
that the code for calculating

772
00:32:51,279 --> 00:32:53,360
the size of the output string is

773
00:32:53,360 --> 00:32:55,360
different

774
00:32:55,360 --> 00:32:56,480
as a result

775
00:32:56,480 --> 00:32:58,880
if we provide a malicious input to the

776
00:32:58,880 --> 00:33:01,200
escape quote function

777
00:33:01,200 --> 00:33:03,760
it's possible to write out

778
00:33:03,760 --> 00:33:07,840
of write out of the out chart array

779
00:33:07,840 --> 00:33:08,840
that

780
00:33:08,840 --> 00:33:12,240
is it's a pointer to

781
00:33:12,240 --> 00:33:15,919
outstring the output string array

782
00:33:15,919 --> 00:33:18,559
unfortunately this back was previously

783
00:33:18,559 --> 00:33:22,240
reported by google os os fast just a few

784
00:33:22,240 --> 00:33:24,480
days before i found it so it was a back

785
00:33:24,480 --> 00:33:26,880
collision

786
00:33:26,880 --> 00:33:28,880
and now i'm going to explain

787
00:33:28,880 --> 00:33:31,200
something totally different

788
00:33:31,200 --> 00:33:33,200
in this case this back is a race

789
00:33:33,200 --> 00:33:34,399
condition

790
00:33:34,399 --> 00:33:38,559
leading to use after free

791
00:33:38,559 --> 00:33:41,840
and affecting to the apache core

792
00:33:41,840 --> 00:33:42,720
so

793
00:33:42,720 --> 00:33:45,360
during during my fasting research i

794
00:33:45,360 --> 00:33:49,600
found multiple bugs that i was unable to

795
00:33:49,600 --> 00:33:52,399
reproduce again

796
00:33:52,399 --> 00:33:55,679
after go deeper in that i discovered

797
00:33:55,679 --> 00:33:58,799
a kind of race condition between

798
00:33:58,799 --> 00:33:59,840
the

799
00:33:59,840 --> 00:34:02,399
allocation function like for example

800
00:34:02,399 --> 00:34:04,639
that

801
00:34:04,799 --> 00:34:08,879
a lock and the destroy functions of apr

802
00:34:08,879 --> 00:34:10,800
this leads to

803
00:34:10,800 --> 00:34:13,679
a corruption of some nodes of the memory

804
00:34:13,679 --> 00:34:14,800
pool

805
00:34:14,800 --> 00:34:15,760
and

806
00:34:15,760 --> 00:34:17,359
sometimes

807
00:34:17,359 --> 00:34:20,879
the program will try to release

808
00:34:20,879 --> 00:34:23,679
a node that is already present or a

809
00:34:23,679 --> 00:34:26,079
block that is already present in the

810
00:34:26,079 --> 00:34:28,639
free pool

811
00:34:29,040 --> 00:34:30,719
at this moment i'm

812
00:34:30,719 --> 00:34:32,399
well it's important to know that it only

813
00:34:32,399 --> 00:34:36,000
happens when the npm is the even

814
00:34:36,000 --> 00:34:38,560
mpm that is

815
00:34:38,560 --> 00:34:39,359
the

816
00:34:39,359 --> 00:34:42,159
standard de facto nowadays

817
00:34:42,159 --> 00:34:44,480
and at this moment i'm still trying to

818
00:34:44,480 --> 00:34:45,918
figure out how to exploit this

819
00:34:45,918 --> 00:34:48,399
vulnerability in a deterministic way

820
00:34:48,399 --> 00:34:50,239
that is the problem with this type of

821
00:34:50,239 --> 00:34:53,520
race condition bugs

822
00:34:53,760 --> 00:34:55,918
of course there are some

823
00:34:55,918 --> 00:34:58,400
stack traces examples i have a lot of

824
00:34:58,400 --> 00:35:01,040
them in this case we have an use after

825
00:35:01,040 --> 00:35:03,440
free as you can see here is

826
00:35:03,440 --> 00:35:04,720
use software free

827
00:35:04,720 --> 00:35:07,599
look at this stack trace

828
00:35:07,599 --> 00:35:12,560
we can we have the apr allocator destroy

829
00:35:12,960 --> 00:35:17,200
the starting with the npm

830
00:35:17,200 --> 00:35:20,880
in the the event npm but look at this

831
00:35:20,880 --> 00:35:23,040
and for example

832
00:35:23,040 --> 00:35:24,079
to here

833
00:35:24,079 --> 00:35:26,560
a totally different stack trace but

834
00:35:26,560 --> 00:35:29,280
related to the same problem the stack

835
00:35:29,280 --> 00:35:30,640
trace is

836
00:35:30,640 --> 00:35:32,320
totally different as you can see and

837
00:35:32,320 --> 00:35:34,480
it's the same problem you can see here

838
00:35:34,480 --> 00:35:36,880
the even the same

839
00:35:36,880 --> 00:35:39,520
read size of a

840
00:35:39,520 --> 00:35:41,760
and the thing is that

841
00:35:41,760 --> 00:35:43,920
that thing or this problem is not a new

842
00:35:43,920 --> 00:35:44,960
problem

843
00:35:44,960 --> 00:35:47,200
this is a problem that has been reported

844
00:35:47,200 --> 00:35:48,400
a few times

845
00:35:48,400 --> 00:35:50,079
not exactly the same problem but this

846
00:35:50,079 --> 00:35:52,720
type of problems has been reported

847
00:35:52,720 --> 00:35:54,240
in the last years

848
00:35:54,240 --> 00:35:56,839
for example i would like to mention to

849
00:35:56,839 --> 00:36:00,560
hanovoc that reported this back at first

850
00:36:00,560 --> 00:36:02,800
time of this type of bugs

851
00:36:02,800 --> 00:36:04,960
three years ago

852
00:36:04,960 --> 00:36:07,040
if you are interested you can check it

853
00:36:07,040 --> 00:36:09,839
in the following link

854
00:36:09,839 --> 00:36:11,920
their original reports and for now the

855
00:36:11,920 --> 00:36:14,640
position of apache security team is to

856
00:36:14,640 --> 00:36:16,079
not consider

857
00:36:16,079 --> 00:36:18,079
these security issues

858
00:36:18,079 --> 00:36:20,160
as a problem unless

859
00:36:20,160 --> 00:36:21,920
we can show a practical

860
00:36:21,920 --> 00:36:26,880
exploit so i'm working on it and

861
00:36:26,880 --> 00:36:28,960
something similar happened

862
00:36:28,960 --> 00:36:31,760
the last year with pro ftpd

863
00:36:31,760 --> 00:36:34,160
we found a new sustainer free in the

864
00:36:34,160 --> 00:36:36,800
memory pool of pro ftpd that at the same

865
00:36:36,800 --> 00:36:39,119
time is based on the memory pools of

866
00:36:39,119 --> 00:36:41,280
apache and at this moment

867
00:36:41,280 --> 00:36:42,480
there is a

868
00:36:42,480 --> 00:36:45,040
public exploit that has been released to

869
00:36:45,040 --> 00:36:48,720
exploit this polarity but anyway

870
00:36:48,720 --> 00:36:52,160
and during my fasting session obviously

871
00:36:52,160 --> 00:36:55,359
i found a lot of other mineral bugs

872
00:36:55,359 --> 00:36:58,800
so i would like to show you one of them

873
00:36:58,800 --> 00:37:02,000
that is an integral overflow in the

874
00:37:02,000 --> 00:37:06,079
session identity they call function

875
00:37:06,240 --> 00:37:08,720
in that in that case it's not a

876
00:37:08,720 --> 00:37:10,960
it's not a dangerous bug but i think

877
00:37:10,960 --> 00:37:14,000
that it's interesting to show an example

878
00:37:14,000 --> 00:37:16,720
of how trivial or how easy

879
00:37:16,720 --> 00:37:19,359
is to trigger this bug

880
00:37:19,359 --> 00:37:21,440
for example you only need

881
00:37:21,440 --> 00:37:24,240
to send a lock

882
00:37:24,240 --> 00:37:28,000
webdav request here is the request

883
00:37:28,000 --> 00:37:29,359
with a loan

884
00:37:29,359 --> 00:37:32,079
time out value

885
00:37:32,079 --> 00:37:34,640
but don't get mess i mean this is not an

886
00:37:34,640 --> 00:37:36,400
overflow i mean

887
00:37:36,400 --> 00:37:38,720
we provide a really long

888
00:37:38,720 --> 00:37:40,960
time out value but

889
00:37:40,960 --> 00:37:43,680
it is an integral flow

890
00:37:43,680 --> 00:37:46,560
i'm sure that most of you

891
00:37:46,560 --> 00:37:49,680
are able to identify what is the problem

892
00:37:49,680 --> 00:37:51,810
marco i'm sure that you are able

893
00:37:51,810 --> 00:37:54,960
[Laughter]

894
00:37:54,960 --> 00:37:56,960
okay perfect

895
00:37:56,960 --> 00:37:59,040
that's perfect

896
00:37:59,040 --> 00:38:01,760
here we have the addition of two integer

897
00:38:01,760 --> 00:38:04,880
values you can see here that will be a

898
00:38:04,880 --> 00:38:06,400
store

899
00:38:06,400 --> 00:38:08,880
in another integer value

900
00:38:08,880 --> 00:38:12,880
so if these values are big enough we can

901
00:38:12,880 --> 00:38:14,800
overflow the returned value because

902
00:38:14,800 --> 00:38:17,599
obviously we cannot store in an integer

903
00:38:17,599 --> 00:38:19,520
the addition of two maximum interiors

904
00:38:19,520 --> 00:38:23,119
that is a typical integral flow

905
00:38:23,119 --> 00:38:25,359
seeing since this is this back is

906
00:38:25,359 --> 00:38:28,160
triggered with a lock request

907
00:38:28,160 --> 00:38:29,280
mod dab

908
00:38:29,280 --> 00:38:31,680
should be enabled in order to

909
00:38:31,680 --> 00:38:35,440
to to be able to trigger the bar

910
00:38:35,440 --> 00:38:36,240
okay

911
00:38:36,240 --> 00:38:38,560
and now i would like to say

912
00:38:38,560 --> 00:38:41,680
one last thought

913
00:38:41,680 --> 00:38:44,160
apache http security has been

914
00:38:44,160 --> 00:38:48,079
extensively studied by researchers

915
00:38:48,079 --> 00:38:51,200
but at the same time there is still room

916
00:38:51,200 --> 00:38:54,000
for discovering new vulnerabilities for

917
00:38:54,000 --> 00:38:56,240
example using fusing

918
00:38:56,240 --> 00:38:58,960
and in the coming weeks i will release

919
00:38:58,960 --> 00:39:03,440
new details about apache http security

920
00:39:03,440 --> 00:39:08,400
including new bugs so stay tuned

921
00:39:08,400 --> 00:39:09,440
so

922
00:39:09,440 --> 00:39:11,760
that's the end thank you

923
00:39:11,760 --> 00:39:14,720
to all of you for attending and now it's

924
00:39:14,720 --> 00:39:17,480
time for for questing thank you

925
00:39:17,480 --> 00:39:26,079
[Applause]

926
00:39:26,079 --> 00:39:29,839
thank you antonio is there any question

927
00:39:34,320 --> 00:39:36,640
i know i already asked yesterday uh but

928
00:39:36,640 --> 00:39:38,320
i think this might be something

929
00:39:38,320 --> 00:39:40,400
interesting for everyone how much time

930
00:39:40,400 --> 00:39:42,160
do you invested in this specific

931
00:39:42,160 --> 00:39:43,680
research

932
00:39:43,680 --> 00:39:46,960
in that case or in general

933
00:39:46,960 --> 00:39:49,359
in this specific case well i'm not going

934
00:39:49,359 --> 00:39:50,720
to

935
00:39:50,720 --> 00:39:52,800
i don't know i'm not able to

936
00:39:52,800 --> 00:39:55,040
to estimate certainly because i mean i

937
00:39:55,040 --> 00:39:56,960
put a lot of e4

938
00:39:56,960 --> 00:39:58,640
but

939
00:39:58,640 --> 00:40:01,040
it depends it depends it can take i'm

940
00:40:01,040 --> 00:40:02,720
not going to give you a number i don't

941
00:40:02,720 --> 00:40:04,480
want to

942
00:40:04,480 --> 00:40:06,720
maybe later i can give you an answer

943
00:40:06,720 --> 00:40:09,040
privately you know

944
00:40:09,040 --> 00:40:10,960
but it takes

945
00:40:10,960 --> 00:40:13,599
a lot of time yeah

946
00:40:13,599 --> 00:40:16,079
no i don't know yet no

947
00:40:16,079 --> 00:40:17,520
i mean

948
00:40:17,520 --> 00:40:20,160
at the first

949
00:40:20,319 --> 00:40:22,240
slide or well

950
00:40:22,240 --> 00:40:24,000
you can see that in the last year i have

951
00:40:24,000 --> 00:40:25,200
been working on

952
00:40:25,200 --> 00:40:27,520
too many different projects so you need

953
00:40:27,520 --> 00:40:28,400
to

954
00:40:28,400 --> 00:40:29,920
to be able to find vulnerabilities in a

955
00:40:29,920 --> 00:40:31,839
lot of projects in the same gear if you

956
00:40:31,839 --> 00:40:34,079
want to to work

957
00:40:34,079 --> 00:40:37,040
as a security research today yes

958
00:40:37,040 --> 00:40:39,359
any one

959
00:40:39,359 --> 00:40:43,119
any other question another question

960
00:40:43,920 --> 00:40:46,160
yeah

961
00:40:46,240 --> 00:40:48,079
come on

962
00:40:48,079 --> 00:40:48,880
and

963
00:40:48,880 --> 00:40:51,599
while doing the specific research

964
00:40:51,599 --> 00:40:54,000
on the exploitability side are there any

965
00:40:54,000 --> 00:40:55,839
bugs which are actually like easy to

966
00:40:55,839 --> 00:40:58,000
exploit in a real world scenario or most

967
00:40:58,000 --> 00:41:00,240
of them uh like needs also like i don't

968
00:41:00,240 --> 00:41:01,680
know memory leak or whatever to be

969
00:41:01,680 --> 00:41:02,880
exploited

970
00:41:02,880 --> 00:41:05,520
okay there are like

971
00:41:05,520 --> 00:41:07,040
what i usually

972
00:41:07,040 --> 00:41:09,200
look or what i usually try to find with

973
00:41:09,200 --> 00:41:13,119
fasting are memory corruption backs so

974
00:41:13,119 --> 00:41:14,960
there are like two big

975
00:41:14,960 --> 00:41:15,920
uh

976
00:41:15,920 --> 00:41:19,200
type of bugs there there are logic backs

977
00:41:19,200 --> 00:41:21,599
and memory correlation marks so

978
00:41:21,599 --> 00:41:22,880
logic backs

979
00:41:22,880 --> 00:41:24,400
for example if you are able to find a

980
00:41:24,400 --> 00:41:27,280
logic back probably you only need one

981
00:41:27,280 --> 00:41:28,240
back

982
00:41:28,240 --> 00:41:31,359
to be able to exploit the server but

983
00:41:31,359 --> 00:41:34,400
nowaday if you find a memory correction

984
00:41:34,400 --> 00:41:36,160
back

985
00:41:36,160 --> 00:41:38,560
it's very common to need at least two or

986
00:41:38,560 --> 00:41:40,720
three different but backs because

987
00:41:40,720 --> 00:41:43,839
probably you will need a memory leak

988
00:41:43,839 --> 00:41:46,880
probably you need another

989
00:41:46,880 --> 00:41:47,760
great

990
00:41:47,760 --> 00:41:50,640
primitive like for example i don't know

991
00:41:50,640 --> 00:41:52,480
a stack buffer flow or is used after

992
00:41:52,480 --> 00:41:55,599
free hip overflow and then you will

993
00:41:55,599 --> 00:41:57,359
probably need

994
00:41:57,359 --> 00:42:01,200
another brutality to escalate privilege

995
00:42:01,200 --> 00:42:03,200
so yes probably it depends on the type

996
00:42:03,200 --> 00:42:05,280
of vulnerability in this case one two or

997
00:42:05,280 --> 00:42:08,079
three bonaldi's

998
00:42:08,720 --> 00:42:11,250
okay thank you very much

999
00:42:11,250 --> 00:42:15,900
[Applause]

1000
00:42:24,319 --> 00:42:26,400
you

